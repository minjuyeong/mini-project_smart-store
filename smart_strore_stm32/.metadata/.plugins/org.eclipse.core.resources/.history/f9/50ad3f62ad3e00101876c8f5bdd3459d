
nucleo_f411re_uart2_printf_uart6_wifi_clcd_dht11_tim4pwm1_servo_tim3rgbLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006250  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  080063f0  080063f0  000073f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006910  08006910  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006910  08006910  00007910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006918  08006918  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006918  08006918  00007918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800691c  0800691c  0000791c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006920  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b2c  2000006c  0800698c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b98  0800698c  00008b98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000edbd  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e3  00000000  00000000  00016e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00019340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b1b  00000000  00000000  0001a188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b0b  00000000  00000000  0001aca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff57  00000000  00000000  000327ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000908b2  00000000  00000000  00042705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2fb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f8  00000000  00000000  000d2ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b5  00000000  00000000  000d78f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080063d8 	.word	0x080063d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080063d8 	.word	0x080063d8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <DWT_Delay_Init>:
 *      Author: IoT Main
 */

#include "DHT.h"
uint32_t DWT_Delay_Init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80005e0:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <DWT_Delay_Init+0x58>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	4a13      	ldr	r2, [pc, #76]	@ (8000634 <DWT_Delay_Init+0x58>)
 80005e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80005ea:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <DWT_Delay_Init+0x58>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	4a10      	ldr	r2, [pc, #64]	@ (8000634 <DWT_Delay_Init+0x58>)
 80005f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005f6:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <DWT_Delay_Init+0x5c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000638 <DWT_Delay_Init+0x5c>)
 80005fe:	f023 0301 	bic.w	r3, r3, #1
 8000602:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <DWT_Delay_Init+0x5c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a0b      	ldr	r2, [pc, #44]	@ (8000638 <DWT_Delay_Init+0x5c>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <DWT_Delay_Init+0x5c>)
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000616:	bf00      	nop
  __ASM volatile ("NOP");
 8000618:	bf00      	nop
  __ASM volatile ("NOP");
 800061a:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 800061c:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <DWT_Delay_Init+0x5c>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 8000624:	2300      	movs	r3, #0
 8000626:	e000      	b.n	800062a <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 8000628:	2301      	movs	r3, #1
  }

}
 800062a:	4618      	mov	r0, r3
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000edf0 	.word	0xe000edf0
 8000638:	e0001000 	.word	0xe0001000

0800063c <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000644:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <DWT_Delay_us+0x40>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800064a:	f002 fb2d 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 800064e:	4603      	mov	r3, r0
 8000650:	4a0b      	ldr	r2, [pc, #44]	@ (8000680 <DWT_Delay_us+0x44>)
 8000652:	fba2 2303 	umull	r2, r3, r2, r3
 8000656:	0c9b      	lsrs	r3, r3, #18
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	fb02 f303 	mul.w	r3, r2, r3
 800065e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000660:	bf00      	nop
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <DWT_Delay_us+0x40>)
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	1ad2      	subs	r2, r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	429a      	cmp	r2, r3
 800066e:	d3f8      	bcc.n	8000662 <DWT_Delay_us+0x26>
}
 8000670:	bf00      	nop
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	e0001000 	.word	0xe0001000
 8000680:	431bde83 	.word	0x431bde83

08000684 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80006a0:	887b      	ldrh	r3, [r7, #2]
 80006a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	4619      	mov	r1, r3
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f001 fcc6 	bl	8002044 <HAL_GPIO_Init>
}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80006dc:	887b      	ldrh	r3, [r7, #2]
 80006de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	4619      	mov	r1, r3
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f001 fcaa 	bl	8002044 <HAL_GPIO_Init>
}
 80006f0:	bf00      	nop
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <DHT11_Init>:

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80006fc:	f7ff ff6e 	bl	80005dc <DWT_Delay_Init>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000700:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000704:	4807      	ldr	r0, [pc, #28]	@ (8000724 <DHT11_Init+0x2c>)
 8000706:	f7ff ffbd 	bl	8000684 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800070a:	2201      	movs	r2, #1
 800070c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <DHT11_Init+0x2c>)
 8000712:	f001 fe33 	bl	800237c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000716:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800071a:	f001 facb 	bl	8001cb4 <HAL_Delay>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40020800 	.word	0x40020800

08000728 <DHT11_Start>:

void DHT11_Start (void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 800072c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000730:	4811      	ldr	r0, [pc, #68]	@ (8000778 <DHT11_Start+0x50>)
 8000732:	f7ff ffa7 	bl	8000684 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800073c:	480e      	ldr	r0, [pc, #56]	@ (8000778 <DHT11_Start+0x50>)
 800073e:	f001 fe1d 	bl	800237c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000748:	480b      	ldr	r0, [pc, #44]	@ (8000778 <DHT11_Start+0x50>)
 800074a:	f001 fe17 	bl	800237c <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);
 800074e:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000752:	f7ff ff73 	bl	800063c <DWT_Delay_us>
	//delay_us (18000);   // wait for 18ms
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800075c:	4806      	ldr	r0, [pc, #24]	@ (8000778 <DHT11_Start+0x50>)
 800075e:	f001 fe0d 	bl	800237c <HAL_GPIO_WritePin>
	DWT_Delay_us(20);
 8000762:	2014      	movs	r0, #20
 8000764:	f7ff ff6a 	bl	800063c <DWT_Delay_us>
	//delay_us (20);   // wait for 20us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000768:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800076c:	4802      	ldr	r0, [pc, #8]	@ (8000778 <DHT11_Start+0x50>)
 800076e:	f7ff ffa7 	bl	80006c0 <Set_Pin_Input>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40020800 	.word	0x40020800

0800077c <DHT11_Stop>:

void DHT11_Stop (void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000780:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000784:	4805      	ldr	r0, [pc, #20]	@ (800079c <DHT11_Stop+0x20>)
 8000786:	f7ff ff7d 	bl	8000684 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800078a:	2201      	movs	r2, #1
 800078c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000790:	4802      	ldr	r0, [pc, #8]	@ (800079c <DHT11_Stop+0x20>)
 8000792:	f001 fdf3 	bl	800237c <HAL_GPIO_WritePin>
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40020800 	.word	0x40020800

080007a0 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	71fb      	strb	r3, [r7, #7]

	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80007aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ae:	4812      	ldr	r0, [pc, #72]	@ (80007f8 <DHT11_Check_Response+0x58>)
 80007b0:	f001 fdcc 	bl	800234c <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d10f      	bne.n	80007da <DHT11_Check_Response+0x3a>
	{
		DWT_Delay_us(80);
 80007ba:	2050      	movs	r0, #80	@ 0x50
 80007bc:	f7ff ff3e 	bl	800063c <DWT_Delay_us>
		//delay_us (80);
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80007c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007c4:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <DHT11_Check_Response+0x58>)
 80007c6:	f001 fdc1 	bl	800234c <HAL_GPIO_ReadPin>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <DHT11_Check_Response+0x36>
 80007d0:	2301      	movs	r3, #1
 80007d2:	71fb      	strb	r3, [r7, #7]
 80007d4:	e001      	b.n	80007da <DHT11_Check_Response+0x3a>
		else Response = -1; // 255
 80007d6:	23ff      	movs	r3, #255	@ 0xff
 80007d8:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 80007da:	bf00      	nop
 80007dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007e0:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <DHT11_Check_Response+0x58>)
 80007e2:	f001 fdb3 	bl	800234c <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f7      	bne.n	80007dc <DHT11_Check_Response+0x3c>

	return Response;
 80007ec:	79fb      	ldrb	r3, [r7, #7]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40020800 	.word	0x40020800

080007fc <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000802:	2300      	movs	r3, #0
 8000804:	71bb      	strb	r3, [r7, #6]
 8000806:	e03a      	b.n	800087e <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8000808:	bf00      	nop
 800080a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800080e:	4820      	ldr	r0, [pc, #128]	@ (8000890 <DHT11_Read+0x94>)
 8000810:	f001 fd9c 	bl	800234c <HAL_GPIO_ReadPin>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d0f7      	beq.n	800080a <DHT11_Read+0xe>
		DWT_Delay_us(40);
 800081a:	2028      	movs	r0, #40	@ 0x28
 800081c:	f7ff ff0e 	bl	800063c <DWT_Delay_us>
		//delay_us (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000820:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000824:	481a      	ldr	r0, [pc, #104]	@ (8000890 <DHT11_Read+0x94>)
 8000826:	f001 fd91 	bl	800234c <HAL_GPIO_ReadPin>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d10e      	bne.n	800084e <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000830:	79bb      	ldrb	r3, [r7, #6]
 8000832:	f1c3 0307 	rsb	r3, r3, #7
 8000836:	2201      	movs	r2, #1
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	b25b      	sxtb	r3, r3
 800083e:	43db      	mvns	r3, r3
 8000840:	b25a      	sxtb	r2, r3
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	4013      	ands	r3, r2
 8000848:	b25b      	sxtb	r3, r3
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	e00b      	b.n	8000866 <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	f1c3 0307 	rsb	r3, r3, #7
 8000854:	2201      	movs	r2, #1
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	b25a      	sxtb	r2, r3
 800085c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000860:	4313      	orrs	r3, r2
 8000862:	b25b      	sxtb	r3, r3
 8000864:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8000866:	bf00      	nop
 8000868:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800086c:	4808      	ldr	r0, [pc, #32]	@ (8000890 <DHT11_Read+0x94>)
 800086e:	f001 fd6d 	bl	800234c <HAL_GPIO_ReadPin>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1f7      	bne.n	8000868 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	3301      	adds	r3, #1
 800087c:	71bb      	strb	r3, [r7, #6]
 800087e:	79bb      	ldrb	r3, [r7, #6]
 8000880:	2b07      	cmp	r3, #7
 8000882:	d9c1      	bls.n	8000808 <DHT11_Read+0xc>
	}
	return i;
 8000884:	79fb      	ldrb	r3, [r7, #7]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40020800 	.word	0x40020800

08000894 <DHT11_readData>:

DHT11_TypeDef DHT11_readData()
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	DHT11_TypeDef dht11;
	DHT11_Start();
 800089c:	f7ff ff44 	bl	8000728 <DHT11_Start>
	if ((dht11.status = DHT11_Check_Response()) < 0) return dht11;
 80008a0:	f7ff ff7e 	bl	80007a0 <DHT11_Check_Response>
 80008a4:	4603      	mov	r3, r0
 80008a6:	737b      	strb	r3, [r7, #13]
	dht11.rh_byte1 = DHT11_Read ();
 80008a8:	f7ff ffa8 	bl	80007fc <DHT11_Read>
 80008ac:	4603      	mov	r3, r0
 80008ae:	723b      	strb	r3, [r7, #8]
	dht11.rh_byte2 = DHT11_Read ();
 80008b0:	f7ff ffa4 	bl	80007fc <DHT11_Read>
 80008b4:	4603      	mov	r3, r0
 80008b6:	727b      	strb	r3, [r7, #9]
	dht11.temp_byte1 = DHT11_Read ();
 80008b8:	f7ff ffa0 	bl	80007fc <DHT11_Read>
 80008bc:	4603      	mov	r3, r0
 80008be:	72bb      	strb	r3, [r7, #10]
	dht11.temp_byte2 = DHT11_Read ();
 80008c0:	f7ff ff9c 	bl	80007fc <DHT11_Read>
 80008c4:	4603      	mov	r3, r0
 80008c6:	72fb      	strb	r3, [r7, #11]
	dht11.checksum = DHT11_Read();
 80008c8:	f7ff ff98 	bl	80007fc <DHT11_Read>
 80008cc:	4603      	mov	r3, r0
 80008ce:	733b      	strb	r3, [r7, #12]
	DHT11_Stop();
 80008d0:	f7ff ff54 	bl	800077c <DHT11_Stop>
	return dht11;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	461a      	mov	r2, r3
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	6010      	str	r0, [r2, #0]
 80008e0:	889b      	ldrh	r3, [r3, #4]
 80008e2:	8093      	strh	r3, [r2, #4]
}
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
 80008f8:	807b      	strh	r3, [r7, #2]
    *length = 0;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2200      	movs	r2, #0
 80008fe:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8000900:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000904:	2100      	movs	r1, #0
 8000906:	68b8      	ldr	r0, [r7, #8]
 8000908:	f004 fcdc 	bl	80052c4 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 800090c:	f240 4202 	movw	r2, #1026	@ 0x402
 8000910:	2100      	movs	r1, #0
 8000912:	4826      	ldr	r0, [pc, #152]	@ (80009ac <esp_at_command+0xc0>)
 8000914:	f004 fcd6 	bl	80052c4 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8000918:	68f8      	ldr	r0, [r7, #12]
 800091a:	f7ff fc6b 	bl	80001f4 <strlen>
 800091e:	4603      	mov	r3, r0
 8000920:	b29a      	uxth	r2, r3
 8000922:	2364      	movs	r3, #100	@ 0x64
 8000924:	68f9      	ldr	r1, [r7, #12]
 8000926:	4822      	ldr	r0, [pc, #136]	@ (80009b0 <esp_at_command+0xc4>)
 8000928:	f003 f9f4 	bl	8003d14 <HAL_UART_Transmit>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d032      	beq.n	8000998 <esp_at_command+0xac>
        return -1;
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	e035      	b.n	80009a4 <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 8000938:	4b1c      	ldr	r3, [pc, #112]	@ (80009ac <esp_at_command+0xc0>)
 800093a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800093e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000942:	d302      	bcc.n	800094a <esp_at_command+0x5e>
            return -2;
 8000944:	f06f 0301 	mvn.w	r3, #1
 8000948:	e02c      	b.n	80009a4 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 800094a:	491a      	ldr	r1, [pc, #104]	@ (80009b4 <esp_at_command+0xc8>)
 800094c:	4817      	ldr	r0, [pc, #92]	@ (80009ac <esp_at_command+0xc0>)
 800094e:	f004 fd3d 	bl	80053cc <strstr>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <esp_at_command+0x72>
            return -3;
 8000958:	f06f 0302 	mvn.w	r3, #2
 800095c:	e022      	b.n	80009a4 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 800095e:	4916      	ldr	r1, [pc, #88]	@ (80009b8 <esp_at_command+0xcc>)
 8000960:	4812      	ldr	r0, [pc, #72]	@ (80009ac <esp_at_command+0xc0>)
 8000962:	f004 fd33 	bl	80053cc <strstr>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d00e      	beq.n	800098a <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <esp_at_command+0xc0>)
 800096e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000972:	461a      	mov	r2, r3
 8000974:	490d      	ldr	r1, [pc, #52]	@ (80009ac <esp_at_command+0xc0>)
 8000976:	68b8      	ldr	r0, [r7, #8]
 8000978:	f004 fdb9 	bl	80054ee <memcpy>
            *length = cb_data.length;
 800097c:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <esp_at_command+0xc0>)
 800097e:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	801a      	strh	r2, [r3, #0]
            return 0;
 8000986:	2300      	movs	r3, #0
 8000988:	e00c      	b.n	80009a4 <esp_at_command+0xb8>
        }
        time_out -= 10;
 800098a:	887b      	ldrh	r3, [r7, #2]
 800098c:	3b0a      	subs	r3, #10
 800098e:	b29b      	uxth	r3, r3
 8000990:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 8000992:	200a      	movs	r0, #10
 8000994:	f001 f98e 	bl	8001cb4 <HAL_Delay>
    while(time_out > 0)
 8000998:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800099c:	2b00      	cmp	r3, #0
 800099e:	dccb      	bgt.n	8000938 <esp_at_command+0x4c>
    }
    return -4;
 80009a0:	f06f 0303 	mvn.w	r3, #3
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200004d0 	.word	0x200004d0
 80009b0:	200009b0 	.word	0x200009b0
 80009b4:	080063f0 	.word	0x080063f0
 80009b8:	080063f8 	.word	0x080063f8

080009bc <esp_reset>:

static int esp_reset(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 80009c6:	1dba      	adds	r2, r7, #6
 80009c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009cc:	4909      	ldr	r1, [pc, #36]	@ (80009f4 <esp_reset+0x38>)
 80009ce:	480a      	ldr	r0, [pc, #40]	@ (80009f8 <esp_reset+0x3c>)
 80009d0:	f7ff ff8c 	bl	80008ec <esp_at_command>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d002      	beq.n	80009e0 <esp_reset+0x24>
    {
    	return -1;
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	e004      	b.n	80009ea <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 80009e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009e4:	f001 f966 	bl	8001cb4 <HAL_Delay>
    return 0;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000098 	.word	0x20000098
 80009f8:	080063fc 	.word	0x080063fc

080009fc <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000a0a:	f107 020a 	add.w	r2, r7, #10
 8000a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a12:	492d      	ldr	r1, [pc, #180]	@ (8000ac8 <request_ip_addr+0xcc>)
 8000a14:	482d      	ldr	r0, [pc, #180]	@ (8000acc <request_ip_addr+0xd0>)
 8000a16:	f7ff ff69 	bl	80008ec <esp_at_command>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8000a20:	482b      	ldr	r0, [pc, #172]	@ (8000ad0 <request_ip_addr+0xd4>)
 8000a22:	f004 fb4d 	bl	80050c0 <puts>
 8000a26:	e049      	b.n	8000abc <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 8000a28:	492a      	ldr	r1, [pc, #168]	@ (8000ad4 <request_ip_addr+0xd8>)
 8000a2a:	4827      	ldr	r0, [pc, #156]	@ (8000ac8 <request_ip_addr+0xcc>)
 8000a2c:	f004 fc72 	bl	8005314 <strtok>
 8000a30:	6178      	str	r0, [r7, #20]

        if(is_debug)
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d03e      	beq.n	8000ab6 <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	e009      	b.n	8000a52 <request_ip_addr+0x56>
                printf("%c", response[i]);
 8000a3e:	4a22      	ldr	r2, [pc, #136]	@ (8000ac8 <request_ip_addr+0xcc>)
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	4413      	add	r3, r2
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f004 fadc 	bl	8005004 <putchar>
            for(int i = 0 ; i < length ; i++)
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	897b      	ldrh	r3, [r7, #10]
 8000a54:	461a      	mov	r2, r3
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	dbf0      	blt.n	8000a3e <request_ip_addr+0x42>
        }

        while(line != NULL)
 8000a5c:	e02b      	b.n	8000ab6 <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 8000a5e:	491e      	ldr	r1, [pc, #120]	@ (8000ad8 <request_ip_addr+0xdc>)
 8000a60:	6978      	ldr	r0, [r7, #20]
 8000a62:	f004 fcb3 	bl	80053cc <strstr>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d01f      	beq.n	8000aac <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 8000a6c:	491b      	ldr	r1, [pc, #108]	@ (8000adc <request_ip_addr+0xe0>)
 8000a6e:	6978      	ldr	r0, [r7, #20]
 8000a70:	f004 fc50 	bl	8005314 <strtok>
                ip = strtok(NULL, "\"");
 8000a74:	4919      	ldr	r1, [pc, #100]	@ (8000adc <request_ip_addr+0xe0>)
 8000a76:	2000      	movs	r0, #0
 8000a78:	f004 fc4c 	bl	8005314 <strtok>
 8000a7c:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 8000a7e:	4918      	ldr	r1, [pc, #96]	@ (8000ae0 <request_ip_addr+0xe4>)
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f7ff fbad 	bl	80001e0 <strcmp>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00f      	beq.n	8000aac <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000a8c:	2210      	movs	r2, #16
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4814      	ldr	r0, [pc, #80]	@ (8000ae4 <request_ip_addr+0xe8>)
 8000a92:	f004 fc17 	bl	80052c4 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f7ff fbac 	bl	80001f4 <strlen>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	68f9      	ldr	r1, [r7, #12]
 8000aa2:	4810      	ldr	r0, [pc, #64]	@ (8000ae4 <request_ip_addr+0xe8>)
 8000aa4:	f004 fd23 	bl	80054ee <memcpy>
                    return 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	e009      	b.n	8000ac0 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8000aac:	4909      	ldr	r1, [pc, #36]	@ (8000ad4 <request_ip_addr+0xd8>)
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f004 fc30 	bl	8005314 <strtok>
 8000ab4:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1d0      	bne.n	8000a5e <request_ip_addr+0x62>
        }
    }
    return -1;
 8000abc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000098 	.word	0x20000098
 8000acc:	08006444 	.word	0x08006444
 8000ad0:	08006450 	.word	0x08006450
 8000ad4:	08006438 	.word	0x08006438
 8000ad8:	08006470 	.word	0x08006470
 8000adc:	08006440 	.word	0x08006440
 8000ae0:	08006408 	.word	0x08006408
 8000ae4:	20000088 	.word	0x20000088

08000ae8 <esp_client_conn>:
int esp_client_conn()
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b092      	sub	sp, #72	@ 0x48
 8000aec:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	2240      	movs	r2, #64	@ 0x40
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f004 fbe4 	bl	80052c4 <memset>
  uint16_t length = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 8000b00:	f107 0008 	add.w	r0, r7, #8
 8000b04:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000b08:	4a09      	ldr	r2, [pc, #36]	@ (8000b30 <esp_client_conn+0x48>)
 8000b0a:	490a      	ldr	r1, [pc, #40]	@ (8000b34 <esp_client_conn+0x4c>)
 8000b0c:	f004 fae0 	bl	80050d0 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8000b10:	1dba      	adds	r2, r7, #6
 8000b12:	f107 0008 	add.w	r0, r7, #8
 8000b16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b1a:	4907      	ldr	r1, [pc, #28]	@ (8000b38 <esp_client_conn+0x50>)
 8000b1c:	f7ff fee6 	bl	80008ec <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8000b20:	4806      	ldr	r0, [pc, #24]	@ (8000b3c <esp_client_conn+0x54>)
 8000b22:	f000 f909 	bl	8000d38 <esp_send_data>
	return 0;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3748      	adds	r7, #72	@ 0x48
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	0800647c 	.word	0x0800647c
 8000b34:	0800648c 	.word	0x0800648c
 8000b38:	20000098 	.word	0x20000098
 8000b3c:	080064a8 	.word	0x080064a8

08000b40 <esp_get_status>:
int esp_get_status()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 8000b4a:	1dba      	adds	r2, r7, #6
 8000b4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b50:	4909      	ldr	r1, [pc, #36]	@ (8000b78 <esp_get_status+0x38>)
 8000b52:	480a      	ldr	r0, [pc, #40]	@ (8000b7c <esp_get_status+0x3c>)
 8000b54:	f7ff feca 	bl	80008ec <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 8000b58:	4909      	ldr	r1, [pc, #36]	@ (8000b80 <esp_get_status+0x40>)
 8000b5a:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <esp_get_status+0x38>)
 8000b5c:	f004 fc36 	bl	80053cc <strstr>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <esp_get_status+0x2a>
    {
    	return 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e001      	b.n	8000b6e <esp_get_status+0x2e>
    }
	return -1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000098 	.word	0x20000098
 8000b7c:	080064bc 	.word	0x080064bc
 8000b80:	080064cc 	.word	0x080064cc

08000b84 <drv_esp_init>:
int drv_esp_init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000b88:	2210      	movs	r2, #16
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4806      	ldr	r0, [pc, #24]	@ (8000ba8 <drv_esp_init+0x24>)
 8000b8e:	f004 fb99 	bl	80052c4 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 8000b92:	2201      	movs	r2, #1
 8000b94:	4905      	ldr	r1, [pc, #20]	@ (8000bac <drv_esp_init+0x28>)
 8000b96:	4806      	ldr	r0, [pc, #24]	@ (8000bb0 <drv_esp_init+0x2c>)
 8000b98:	f003 f947 	bl	8003e2a <HAL_UART_Receive_IT>

    return esp_reset();
 8000b9c:	f7ff ff0e 	bl	80009bc <esp_reset>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000088 	.word	0x20000088
 8000bac:	200004cf 	.word	0x200004cf
 8000bb0:	200009b0 	.word	0x200009b0

08000bb4 <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b094      	sub	sp, #80	@ 0x50
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	2240      	movs	r2, #64	@ 0x40
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f004 fb79 	bl	80052c4 <memset>
  if(ssid == NULL || passwd == NULL)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d002      	beq.n	8000bde <ap_conn_func+0x2a>
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d103      	bne.n	8000be6 <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8000bde:	4817      	ldr	r0, [pc, #92]	@ (8000c3c <ap_conn_func+0x88>)
 8000be0:	f004 fa6e 	bl	80050c0 <puts>
 8000be4:	e026      	b.n	8000c34 <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000be6:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000bea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bee:	4914      	ldr	r1, [pc, #80]	@ (8000c40 <ap_conn_func+0x8c>)
 8000bf0:	4814      	ldr	r0, [pc, #80]	@ (8000c44 <ap_conn_func+0x90>)
 8000bf2:	f7ff fe7b 	bl	80008ec <esp_at_command>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d002      	beq.n	8000c02 <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 8000bfc:	4812      	ldr	r0, [pc, #72]	@ (8000c48 <ap_conn_func+0x94>)
 8000bfe:	f004 fa5f 	bl	80050c0 <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 8000c02:	f107 000c 	add.w	r0, r7, #12
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	4910      	ldr	r1, [pc, #64]	@ (8000c4c <ap_conn_func+0x98>)
 8000c0c:	f004 fa60 	bl	80050d0 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8000c10:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000c14:	f107 000c 	add.w	r0, r7, #12
 8000c18:	f241 7370 	movw	r3, #6000	@ 0x1770
 8000c1c:	4908      	ldr	r1, [pc, #32]	@ (8000c40 <ap_conn_func+0x8c>)
 8000c1e:	f7ff fe65 	bl	80008ec <esp_at_command>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d005      	beq.n	8000c34 <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4808      	ldr	r0, [pc, #32]	@ (8000c50 <ap_conn_func+0x9c>)
 8000c30:	f004 f9d6 	bl	8004fe0 <iprintf>
}
 8000c34:	3750      	adds	r7, #80	@ 0x50
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08006530 	.word	0x08006530
 8000c40:	20000098 	.word	0x20000098
 8000c44:	0800655c 	.word	0x0800655c
 8000c48:	0800656c 	.word	0x0800656c
 8000c4c:	08006580 	.word	0x08006580
 8000c50:	08006598 	.word	0x08006598

08000c54 <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a23      	ldr	r2, [pc, #140]	@ (8000cf0 <HAL_UART_RxCpltCallback+0x9c>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d117      	bne.n	8000c96 <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 8000c66:	4b23      	ldr	r3, [pc, #140]	@ (8000cf4 <HAL_UART_RxCpltCallback+0xa0>)
 8000c68:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000c6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c70:	d20c      	bcs.n	8000c8c <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 8000c72:	4b20      	ldr	r3, [pc, #128]	@ (8000cf4 <HAL_UART_RxCpltCallback+0xa0>)
 8000c74:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000c78:	1c5a      	adds	r2, r3, #1
 8000c7a:	b291      	uxth	r1, r2
 8000c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000cf4 <HAL_UART_RxCpltCallback+0xa0>)
 8000c7e:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <HAL_UART_RxCpltCallback+0xa4>)
 8000c86:	7819      	ldrb	r1, [r3, #0]
 8000c88:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <HAL_UART_RxCpltCallback+0xa0>)
 8000c8a:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	491a      	ldr	r1, [pc, #104]	@ (8000cf8 <HAL_UART_RxCpltCallback+0xa4>)
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f003 f8ca 	bl	8003e2a <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a18      	ldr	r2, [pc, #96]	@ (8000cfc <HAL_UART_RxCpltCallback+0xa8>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d122      	bne.n	8000ce6 <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <HAL_UART_RxCpltCallback+0xac>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a17      	ldr	r2, [pc, #92]	@ (8000d04 <HAL_UART_RxCpltCallback+0xb0>)
 8000ca6:	7811      	ldrb	r1, [r2, #0]
 8000ca8:	4a17      	ldr	r2, [pc, #92]	@ (8000d08 <HAL_UART_RxCpltCallback+0xb4>)
 8000caa:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 8000cac:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <HAL_UART_RxCpltCallback+0xac>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a15      	ldr	r2, [pc, #84]	@ (8000d08 <HAL_UART_RxCpltCallback+0xb4>)
 8000cb2:	5cd3      	ldrb	r3, [r2, r3]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b0d      	cmp	r3, #13
 8000cb8:	d10b      	bne.n	8000cd2 <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 8000cba:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <HAL_UART_RxCpltCallback+0xac>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a12      	ldr	r2, [pc, #72]	@ (8000d08 <HAL_UART_RxCpltCallback+0xb4>)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <HAL_UART_RxCpltCallback+0xb8>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8000cca:	4b0d      	ldr	r3, [pc, #52]	@ (8000d00 <HAL_UART_RxCpltCallback+0xac>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	e004      	b.n	8000cdc <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d00 <HAL_UART_RxCpltCallback+0xac>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	4a09      	ldr	r2, [pc, #36]	@ (8000d00 <HAL_UART_RxCpltCallback+0xac>)
 8000cda:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4909      	ldr	r1, [pc, #36]	@ (8000d04 <HAL_UART_RxCpltCallback+0xb0>)
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f003 f8a2 	bl	8003e2a <HAL_UART_Receive_IT>
    }
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40011400 	.word	0x40011400
 8000cf4:	200004d0 	.word	0x200004d0
 8000cf8:	200004cf 	.word	0x200004cf
 8000cfc:	40004400 	.word	0x40004400
 8000d00:	200008d4 	.word	0x200008d4
 8000d04:	200004ce 	.word	0x200004ce
 8000d08:	2000049c 	.word	0x2000049c
 8000d0c:	20000498 	.word	0x20000498

08000d10 <AiotClient_Init>:


void AiotClient_Init()
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 8000d14:	4906      	ldr	r1, [pc, #24]	@ (8000d30 <AiotClient_Init+0x20>)
 8000d16:	4807      	ldr	r0, [pc, #28]	@ (8000d34 <AiotClient_Init+0x24>)
 8000d18:	f7ff ff4c 	bl	8000bb4 <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f7ff fe6d 	bl	80009fc <request_ip_addr>
	esp_client_conn();
 8000d22:	f7ff fee1 	bl	8000ae8 <esp_client_conn>
	esp_get_status();
 8000d26:	f7ff ff0b 	bl	8000b40 <esp_get_status>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	080065f8 	.word	0x080065f8
 8000d34:	08006604 	.word	0x08006604

08000d38 <esp_send_data>:

void esp_send_data(char *data)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b094      	sub	sp, #80	@ 0x50
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	2240      	movs	r2, #64	@ 0x40
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f004 fabb 	bl	80052c4 <memset>
	uint16_t length = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff fa4e 	bl	80001f4 <strlen>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	490e      	ldr	r1, [pc, #56]	@ (8000d98 <esp_send_data+0x60>)
 8000d60:	4618      	mov	r0, r3
 8000d62:	f004 f9b5 	bl	80050d0 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 8000d66:	f107 020e 	add.w	r2, r7, #14
 8000d6a:	f107 0010 	add.w	r0, r7, #16
 8000d6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d72:	490a      	ldr	r1, [pc, #40]	@ (8000d9c <esp_send_data+0x64>)
 8000d74:	f7ff fdba 	bl	80008ec <esp_at_command>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d107      	bne.n	8000d8e <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8000d7e:	f107 020e 	add.w	r2, r7, #14
 8000d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d86:	4905      	ldr	r1, [pc, #20]	@ (8000d9c <esp_send_data+0x64>)
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff fdaf 	bl	80008ec <esp_at_command>
	}
}
 8000d8e:	bf00      	nop
 8000d90:	3750      	adds	r7, #80	@ 0x50
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	0800660c 	.word	0x0800660c
 8000d9c:	20000098 	.word	0x20000098

08000da0 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8000da4:	2201      	movs	r2, #1
 8000da6:	4903      	ldr	r1, [pc, #12]	@ (8000db4 <drv_uart_init+0x14>)
 8000da8:	4803      	ldr	r0, [pc, #12]	@ (8000db8 <drv_uart_init+0x18>)
 8000daa:	f003 f83e 	bl	8003e2a <HAL_UART_Receive_IT>
    return 0;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200004ce 	.word	0x200004ce
 8000db8:	20000968 	.word	0x20000968

08000dbc <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8000dc4:	1d39      	adds	r1, r7, #4
 8000dc6:	230a      	movs	r3, #10
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4807      	ldr	r0, [pc, #28]	@ (8000de8 <__io_putchar+0x2c>)
 8000dcc:	f002 ffa2 	bl	8003d14 <HAL_UART_Transmit>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d101      	bne.n	8000dda <__io_putchar+0x1e>
        return ch;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	e001      	b.n	8000dde <__io_putchar+0x22>
    return -1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000968 	.word	0x20000968

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08e      	sub	sp, #56	@ 0x38
 8000df0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	int ret = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	DHT11_TypeDef dht11Data;
	char buff[30];
	int pluse = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfa:	f000 fee9 	bl	8001bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfe:	f000 f8dd 	bl	8000fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e02:	f000 fa5f 	bl	80012c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e06:	f000 fa09 	bl	800121c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000e0a:	f000 fa31 	bl	8001270 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000e0e:	f000 f93f 	bl	8001090 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e12:	f000 f98b 	bl	800112c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  printf("Start main() - wifi\r\n");
 8000e16:	4858      	ldr	r0, [pc, #352]	@ (8000f78 <main+0x18c>)
 8000e18:	f004 f952 	bl	80050c0 <puts>
  ret |= drv_uart_init();
 8000e1c:	f7ff ffc0 	bl	8000da0 <drv_uart_init>
 8000e20:	4602      	mov	r2, r0
 8000e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e24:	4313      	orrs	r3, r2
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ret |= drv_esp_init();
 8000e28:	f7ff feac 	bl	8000b84 <drv_esp_init>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e30:	4313      	orrs	r3, r2
 8000e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(ret != 0)
 8000e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d004      	beq.n	8000e44 <main+0x58>
  {
	  printf("Esp response error\r\n");
 8000e3a:	4850      	ldr	r0, [pc, #320]	@ (8000f7c <main+0x190>)
 8000e3c:	f004 f940 	bl	80050c0 <puts>
	  Error_Handler();
 8000e40:	f000 fc34 	bl	80016ac <Error_Handler>
  }

  AiotClient_Init();
 8000e44:	f7ff ff64 	bl	8000d10 <AiotClient_Init>

  DHT11_Init();
 8000e48:	f7ff fc56 	bl	80006f8 <DHT11_Init>

  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000e4c:	484c      	ldr	r0, [pc, #304]	@ (8000f80 <main+0x194>)
 8000e4e:	f001 ffaf 	bl	8002db0 <HAL_TIM_Base_Start_IT>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <main+0x70>
  {
	  Error_Handler();
 8000e58:	f000 fc28 	bl	80016ac <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4849      	ldr	r0, [pc, #292]	@ (8000f84 <main+0x198>)
 8000e60:	f002 f862 	bl	8002f28 <HAL_TIM_PWM_Start>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <main+0x82>
  {
	  Error_Handler();
 8000e6a:	f000 fc1f 	bl	80016ac <Error_Handler>
  }
  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1,(pluse-1)<0?0:pluse-1);
 8000e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	bfb8      	it	lt
 8000e74:	2301      	movlt	r3, #1
 8000e76:	1e5a      	subs	r2, r3, #1
 8000e78:	4b42      	ldr	r3, [pc, #264]	@ (8000f84 <main+0x198>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8000e7e:	4942      	ldr	r1, [pc, #264]	@ (8000f88 <main+0x19c>)
 8000e80:	4842      	ldr	r0, [pc, #264]	@ (8000f8c <main+0x1a0>)
 8000e82:	f004 faa3 	bl	80053cc <strstr>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d01d      	beq.n	8000ec8 <main+0xdc>
 8000e8c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f8c <main+0x1a0>)
 8000e8e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000e92:	3b01      	subs	r3, #1
 8000e94:	4a3d      	ldr	r2, [pc, #244]	@ (8000f8c <main+0x1a0>)
 8000e96:	5cd3      	ldrb	r3, [r2, r3]
 8000e98:	2b0a      	cmp	r3, #10
 8000e9a:	d115      	bne.n	8000ec8 <main+0xdc>
		{
			//?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 8000e9c:	215b      	movs	r1, #91	@ 0x5b
 8000e9e:	483b      	ldr	r0, [pc, #236]	@ (8000f8c <main+0x1a0>)
 8000ea0:	f004 fa18 	bl	80052d4 <strchr>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4839      	ldr	r0, [pc, #228]	@ (8000f90 <main+0x1a4>)
 8000eaa:	f004 fb18 	bl	80054de <strcpy>
			memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 8000eae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4835      	ldr	r0, [pc, #212]	@ (8000f8c <main+0x1a0>)
 8000eb6:	f004 fa05 	bl	80052c4 <memset>
			cb_data.length = 0;
 8000eba:	4b34      	ldr	r3, [pc, #208]	@ (8000f8c <main+0x1a0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 8000ec2:	4833      	ldr	r0, [pc, #204]	@ (8000f90 <main+0x1a4>)
 8000ec4:	f000 fac2 	bl	800144c <esp_event>
		}
		if(rx2Flag)
 8000ec8:	4b32      	ldr	r3, [pc, #200]	@ (8000f94 <main+0x1a8>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d006      	beq.n	8000ee0 <main+0xf4>
		{
			printf("recv2 : %s\r\n",rx2Data);
 8000ed2:	4931      	ldr	r1, [pc, #196]	@ (8000f98 <main+0x1ac>)
 8000ed4:	4831      	ldr	r0, [pc, #196]	@ (8000f9c <main+0x1b0>)
 8000ed6:	f004 f883 	bl	8004fe0 <iprintf>
			rx2Flag =0;
 8000eda:	4b2e      	ldr	r3, [pc, #184]	@ (8000f94 <main+0x1a8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
		}
		if(tim3Flag1Sec)	//1초에 한번
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa0 <main+0x1b4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0ca      	beq.n	8000e7e <main+0x92>
		{
			tim3Flag1Sec = 0;
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa0 <main+0x1b4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
			if(!(tim3Sec%10)) //10초에 한번
 8000eee:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa4 <main+0x1b8>)
 8000ef0:	6819      	ldr	r1, [r3, #0]
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa8 <main+0x1bc>)
 8000ef4:	fba3 2301 	umull	r2, r3, r3, r1
 8000ef8:	08da      	lsrs	r2, r3, #3
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	1aca      	subs	r2, r1, r3
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	d109      	bne.n	8000f1c <main+0x130>
			{
				if(esp_get_status() != 0)
 8000f08:	f7ff fe1a 	bl	8000b40 <esp_get_status>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d004      	beq.n	8000f1c <main+0x130>
				{
					printf("server connecting ...\r\n");
 8000f12:	4826      	ldr	r0, [pc, #152]	@ (8000fac <main+0x1c0>)
 8000f14:	f004 f8d4 	bl	80050c0 <puts>
					esp_client_conn();
 8000f18:	f7ff fde6 	bl	8000ae8 <esp_client_conn>
				}
			}
//			printf("tim3Sec : %d\r\n",tim3Sec);
			if(!(tim3Sec%5)) //5초에 한번
 8000f1c:	4b21      	ldr	r3, [pc, #132]	@ (8000fa4 <main+0x1b8>)
 8000f1e:	6819      	ldr	r1, [r3, #0]
 8000f20:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <main+0x1bc>)
 8000f22:	fba3 2301 	umull	r2, r3, r3, r1
 8000f26:	089a      	lsrs	r2, r3, #2
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	1aca      	subs	r2, r1, r3
 8000f30:	2a00      	cmp	r2, #0
 8000f32:	d1a4      	bne.n	8000e7e <main+0x92>
			{
				dht11Data = DHT11_readData();
 8000f34:	f107 0320 	add.w	r3, r7, #32
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fcab 	bl	8000894 <DHT11_readData>
				if(dht11Data.rh_byte1 != 255)
 8000f3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f42:	2bff      	cmp	r3, #255	@ 0xff
 8000f44:	d013      	beq.n	8000f6e <main+0x182>
				{
					sprintf(buff,"h: %d%% t: %d.%d'C", dht11Data.rh_byte1, dht11Data.temp_byte1, dht11Data.temp_byte2);
 8000f46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000f50:	4619      	mov	r1, r3
 8000f52:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000f56:	4638      	mov	r0, r7
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4914      	ldr	r1, [pc, #80]	@ (8000fb0 <main+0x1c4>)
 8000f5e:	f004 f8b7 	bl	80050d0 <siprintf>
					printf("%s\r\n", buff);
 8000f62:	463b      	mov	r3, r7
 8000f64:	4619      	mov	r1, r3
 8000f66:	4813      	ldr	r0, [pc, #76]	@ (8000fb4 <main+0x1c8>)
 8000f68:	f004 f83a 	bl	8004fe0 <iprintf>
 8000f6c:	e787      	b.n	8000e7e <main+0x92>
				}
				else
					printf("DHT11 response error\r\n");
 8000f6e:	4812      	ldr	r0, [pc, #72]	@ (8000fb8 <main+0x1cc>)
 8000f70:	f004 f8a6 	bl	80050c0 <puts>
		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8000f74:	e783      	b.n	8000e7e <main+0x92>
 8000f76:	bf00      	nop
 8000f78:	0800661c 	.word	0x0800661c
 8000f7c:	08006634 	.word	0x08006634
 8000f80:	200008d8 	.word	0x200008d8
 8000f84:	20000920 	.word	0x20000920
 8000f88:	08006648 	.word	0x08006648
 8000f8c:	200004d0 	.word	0x200004d0
 8000f90:	20000a00 	.word	0x20000a00
 8000f94:	20000498 	.word	0x20000498
 8000f98:	2000049c 	.word	0x2000049c
 8000f9c:	08006650 	.word	0x08006650
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	200009f8 	.word	0x200009f8
 8000fa8:	cccccccd 	.word	0xcccccccd
 8000fac:	08006660 	.word	0x08006660
 8000fb0:	08006678 	.word	0x08006678
 8000fb4:	0800668c 	.word	0x0800668c
 8000fb8:	08006694 	.word	0x08006694

08000fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b094      	sub	sp, #80	@ 0x50
 8000fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 0320 	add.w	r3, r7, #32
 8000fc6:	2230      	movs	r2, #48	@ 0x30
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f004 f97a 	bl	80052c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	4b28      	ldr	r3, [pc, #160]	@ (8001088 <SystemClock_Config+0xcc>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	4a27      	ldr	r2, [pc, #156]	@ (8001088 <SystemClock_Config+0xcc>)
 8000fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff0:	4b25      	ldr	r3, [pc, #148]	@ (8001088 <SystemClock_Config+0xcc>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	4b22      	ldr	r3, [pc, #136]	@ (800108c <SystemClock_Config+0xd0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a21      	ldr	r2, [pc, #132]	@ (800108c <SystemClock_Config+0xd0>)
 8001006:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <SystemClock_Config+0xd0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001018:	2301      	movs	r3, #1
 800101a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800101c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001022:	2302      	movs	r3, #2
 8001024:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001026:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800102a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800102c:	2308      	movs	r3, #8
 800102e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001030:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001034:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001036:	2304      	movs	r3, #4
 8001038:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800103a:	2304      	movs	r3, #4
 800103c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103e:	f107 0320 	add.w	r3, r7, #32
 8001042:	4618      	mov	r0, r3
 8001044:	f001 f9cc 	bl	80023e0 <HAL_RCC_OscConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800104e:	f000 fb2d 	bl	80016ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001052:	230f      	movs	r3, #15
 8001054:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001056:	2302      	movs	r3, #2
 8001058:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800105e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001062:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2102      	movs	r1, #2
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fc2e 	bl	80028d0 <HAL_RCC_ClockConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800107a:	f000 fb17 	bl	80016ac <Error_Handler>
  }
}
 800107e:	bf00      	nop
 8001080:	3750      	adds	r7, #80	@ 0x50
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40007000 	.word	0x40007000

08001090 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	463b      	mov	r3, r7
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001124 <MX_TIM3_Init+0x94>)
 80010ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001128 <MX_TIM3_Init+0x98>)
 80010b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <MX_TIM3_Init+0x94>)
 80010b4:	2253      	movs	r2, #83	@ 0x53
 80010b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <MX_TIM3_Init+0x94>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <MX_TIM3_Init+0x94>)
 80010c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c6:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <MX_TIM3_Init+0x94>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010cc:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <MX_TIM3_Init+0x94>)
 80010ce:	2280      	movs	r2, #128	@ 0x80
 80010d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010d2:	4814      	ldr	r0, [pc, #80]	@ (8001124 <MX_TIM3_Init+0x94>)
 80010d4:	f001 fe1c 	bl	8002d10 <HAL_TIM_Base_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80010de:	f000 fae5 	bl	80016ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	4619      	mov	r1, r3
 80010ee:	480d      	ldr	r0, [pc, #52]	@ (8001124 <MX_TIM3_Init+0x94>)
 80010f0:	f002 f97c 	bl	80033ec <HAL_TIM_ConfigClockSource>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80010fa:	f000 fad7 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	@ (8001124 <MX_TIM3_Init+0x94>)
 800110c:	f002 fd30 	bl	8003b70 <HAL_TIMEx_MasterConfigSynchronization>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001116:	f000 fac9 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200008d8 	.word	0x200008d8
 8001128:	40000400 	.word	0x40000400

0800112c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08e      	sub	sp, #56	@ 0x38
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001132:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	f107 0320 	add.w	r3, r7, #32
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	615a      	str	r2, [r3, #20]
 800115a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800115c:	4b2d      	ldr	r3, [pc, #180]	@ (8001214 <MX_TIM4_Init+0xe8>)
 800115e:	4a2e      	ldr	r2, [pc, #184]	@ (8001218 <MX_TIM4_Init+0xec>)
 8001160:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001162:	4b2c      	ldr	r3, [pc, #176]	@ (8001214 <MX_TIM4_Init+0xe8>)
 8001164:	2253      	movs	r2, #83	@ 0x53
 8001166:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b2a      	ldr	r3, [pc, #168]	@ (8001214 <MX_TIM4_Init+0xe8>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 800116e:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <MX_TIM4_Init+0xe8>)
 8001170:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001174:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001176:	4b27      	ldr	r3, [pc, #156]	@ (8001214 <MX_TIM4_Init+0xe8>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117c:	4b25      	ldr	r3, [pc, #148]	@ (8001214 <MX_TIM4_Init+0xe8>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001182:	4824      	ldr	r0, [pc, #144]	@ (8001214 <MX_TIM4_Init+0xe8>)
 8001184:	f001 fdc4 	bl	8002d10 <HAL_TIM_Base_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800118e:	f000 fa8d 	bl	80016ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001192:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001196:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001198:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800119c:	4619      	mov	r1, r3
 800119e:	481d      	ldr	r0, [pc, #116]	@ (8001214 <MX_TIM4_Init+0xe8>)
 80011a0:	f002 f924 	bl	80033ec <HAL_TIM_ConfigClockSource>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80011aa:	f000 fa7f 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011ae:	4819      	ldr	r0, [pc, #100]	@ (8001214 <MX_TIM4_Init+0xe8>)
 80011b0:	f001 fe60 	bl	8002e74 <HAL_TIM_PWM_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80011ba:	f000 fa77 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011c6:	f107 0320 	add.w	r3, r7, #32
 80011ca:	4619      	mov	r1, r3
 80011cc:	4811      	ldr	r0, [pc, #68]	@ (8001214 <MX_TIM4_Init+0xe8>)
 80011ce:	f002 fccf 	bl	8003b70 <HAL_TIMEx_MasterConfigSynchronization>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80011d8:	f000 fa68 	bl	80016ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011dc:	2360      	movs	r3, #96	@ 0x60
 80011de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80011e0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80011e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2200      	movs	r2, #0
 80011f2:	4619      	mov	r1, r3
 80011f4:	4807      	ldr	r0, [pc, #28]	@ (8001214 <MX_TIM4_Init+0xe8>)
 80011f6:	f002 f837 	bl	8003268 <HAL_TIM_PWM_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001200:	f000 fa54 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001204:	4803      	ldr	r0, [pc, #12]	@ (8001214 <MX_TIM4_Init+0xe8>)
 8001206:	f000 fabd 	bl	8001784 <HAL_TIM_MspPostInit>

}
 800120a:	bf00      	nop
 800120c:	3738      	adds	r7, #56	@ 0x38
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000920 	.word	0x20000920
 8001218:	40000800 	.word	0x40000800

0800121c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <MX_USART2_UART_Init+0x4c>)
 8001222:	4a12      	ldr	r2, [pc, #72]	@ (800126c <MX_USART2_UART_Init+0x50>)
 8001224:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <MX_USART2_UART_Init+0x4c>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <MX_USART2_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <MX_USART2_UART_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <MX_USART2_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <MX_USART2_UART_Init+0x4c>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <MX_USART2_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <MX_USART2_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	@ (8001268 <MX_USART2_UART_Init+0x4c>)
 8001254:	f002 fd0e 	bl	8003c74 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800125e:	f000 fa25 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000968 	.word	0x20000968
 800126c:	40004400 	.word	0x40004400

08001270 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <MX_USART6_UART_Init+0x4c>)
 8001276:	4a12      	ldr	r2, [pc, #72]	@ (80012c0 <MX_USART6_UART_Init+0x50>)
 8001278:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <MX_USART6_UART_Init+0x4c>)
 800127c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001280:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <MX_USART6_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <MX_USART6_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800128e:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <MX_USART6_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <MX_USART6_UART_Init+0x4c>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <MX_USART6_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <MX_USART6_UART_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80012a6:	4805      	ldr	r0, [pc, #20]	@ (80012bc <MX_USART6_UART_Init+0x4c>)
 80012a8:	f002 fce4 	bl	8003c74 <HAL_UART_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80012b2:	f000 f9fb 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200009b0 	.word	0x200009b0
 80012c0:	40011400 	.word	0x40011400

080012c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	@ 0x28
 80012c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b46      	ldr	r3, [pc, #280]	@ (80013f8 <MX_GPIO_Init+0x134>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a45      	ldr	r2, [pc, #276]	@ (80013f8 <MX_GPIO_Init+0x134>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b43      	ldr	r3, [pc, #268]	@ (80013f8 <MX_GPIO_Init+0x134>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b3f      	ldr	r3, [pc, #252]	@ (80013f8 <MX_GPIO_Init+0x134>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a3e      	ldr	r2, [pc, #248]	@ (80013f8 <MX_GPIO_Init+0x134>)
 8001300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b3c      	ldr	r3, [pc, #240]	@ (80013f8 <MX_GPIO_Init+0x134>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b38      	ldr	r3, [pc, #224]	@ (80013f8 <MX_GPIO_Init+0x134>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a37      	ldr	r2, [pc, #220]	@ (80013f8 <MX_GPIO_Init+0x134>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b35      	ldr	r3, [pc, #212]	@ (80013f8 <MX_GPIO_Init+0x134>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b31      	ldr	r3, [pc, #196]	@ (80013f8 <MX_GPIO_Init+0x134>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a30      	ldr	r2, [pc, #192]	@ (80013f8 <MX_GPIO_Init+0x134>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b2e      	ldr	r3, [pc, #184]	@ (80013f8 <MX_GPIO_Init+0x134>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2120      	movs	r1, #32
 800134e:	482b      	ldr	r0, [pc, #172]	@ (80013fc <MX_GPIO_Init+0x138>)
 8001350:	f001 f814 	bl	800237c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800135a:	4829      	ldr	r0, [pc, #164]	@ (8001400 <MX_GPIO_Init+0x13c>)
 800135c:	f001 f80e 	bl	800237c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001360:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001366:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4822      	ldr	r0, [pc, #136]	@ (8001400 <MX_GPIO_Init+0x13c>)
 8001378:	f000 fe64 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0_EXTI0_BUTTON_Pin */
  GPIO_InitStruct.Pin = PC0_EXTI0_BUTTON_Pin;
 800137c:	2301      	movs	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001380:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PC0_EXTI0_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	481b      	ldr	r0, [pc, #108]	@ (8001400 <MX_GPIO_Init+0x13c>)
 8001392:	f000 fe57 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001396:	2320      	movs	r3, #32
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	4813      	ldr	r0, [pc, #76]	@ (80013fc <MX_GPIO_Init+0x138>)
 80013ae:	f000 fe49 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80013b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	480d      	ldr	r0, [pc, #52]	@ (8001400 <MX_GPIO_Init+0x13c>)
 80013cc:	f000 fe3a 	bl	8002044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	2006      	movs	r0, #6
 80013d6:	f000 fd6c 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013da:	2006      	movs	r0, #6
 80013dc:	f000 fd85 	bl	8001eea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	2028      	movs	r0, #40	@ 0x28
 80013e6:	f000 fd64 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013ea:	2028      	movs	r0, #40	@ 0x28
 80013ec:	f000 fd7d 	bl	8001eea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80013f0:	bf00      	nop
 80013f2:	3728      	adds	r7, #40	@ 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020800 	.word	0x40020800

08001404 <MX_GPIO_LED_ON>:

/* USER CODE BEGIN 4 */
void MX_GPIO_LED_ON(int pin)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	b29b      	uxth	r3, r3
 8001410:	2201      	movs	r2, #1
 8001412:	4619      	mov	r1, r3
 8001414:	4803      	ldr	r0, [pc, #12]	@ (8001424 <MX_GPIO_LED_ON+0x20>)
 8001416:	f000 ffb1 	bl	800237c <HAL_GPIO_WritePin>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40020000 	.word	0x40020000

08001428 <MX_GPIO_LED_OFF>:
void MX_GPIO_LED_OFF(int pin)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	b29b      	uxth	r3, r3
 8001434:	2200      	movs	r2, #0
 8001436:	4619      	mov	r1, r3
 8001438:	4803      	ldr	r0, [pc, #12]	@ (8001448 <MX_GPIO_LED_OFF+0x20>)
 800143a:	f000 ff9f 	bl	800237c <HAL_GPIO_WritePin>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40020000 	.word	0x40020000

0800144c <esp_event>:
void esp_event(char * recvBuf)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b09c      	sub	sp, #112	@ 0x70
 8001450:	af02      	add	r7, sp, #8
 8001452:	6078      	str	r0, [r7, #4]
  int i=0;
 8001454:	2300      	movs	r3, #0
 8001456:	667b      	str	r3, [r7, #100]	@ 0x64
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8001458:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	2240      	movs	r2, #64	@ 0x40
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f003 ff27 	bl	80052c4 <memset>

  strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7fe febc 	bl	80001f4 <strlen>
 800147c:	4603      	mov	r3, r0
 800147e:	3b01      	subs	r3, #1
 8001480:	4a4f      	ldr	r2, [pc, #316]	@ (80015c0 <esp_event+0x174>)
 8001482:	2100      	movs	r1, #0
 8001484:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	484e      	ldr	r0, [pc, #312]	@ (80015c4 <esp_event+0x178>)
 800148a:	f003 fda9 	bl	8004fe0 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 800148e:	494e      	ldr	r1, [pc, #312]	@ (80015c8 <esp_event+0x17c>)
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f003 ff3f 	bl	8005314 <strtok>
 8001496:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8001498:	e011      	b.n	80014be <esp_event+0x72>
  {
    pArray[i] = pToken;
 800149a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	3368      	adds	r3, #104	@ 0x68
 80014a0:	443b      	add	r3, r7
 80014a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014a4:	f843 2c20 	str.w	r2, [r3, #-32]
    if(++i >= ARR_CNT)
 80014a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014aa:	3301      	adds	r3, #1
 80014ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80014ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	dc08      	bgt.n	80014c6 <esp_event+0x7a>
      break;
    pToken = strtok(NULL,"[@]");
 80014b4:	4944      	ldr	r1, [pc, #272]	@ (80015c8 <esp_event+0x17c>)
 80014b6:	2000      	movs	r0, #0
 80014b8:	f003 ff2c 	bl	8005314 <strtok>
 80014bc:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 80014be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1ea      	bne.n	800149a <esp_event+0x4e>
 80014c4:	e000      	b.n	80014c8 <esp_event+0x7c>
      break;
 80014c6:	bf00      	nop
  }

  if(!strcmp(pArray[1],"LED"))
 80014c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014ca:	4940      	ldr	r1, [pc, #256]	@ (80015cc <esp_event+0x180>)
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe fe87 	bl	80001e0 <strcmp>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d121      	bne.n	800151c <esp_event+0xd0>
  {
  	if(!strcmp(pArray[2],"ON"))
 80014d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80014da:	493d      	ldr	r1, [pc, #244]	@ (80015d0 <esp_event+0x184>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f7fe fe7f 	bl	80001e0 <strcmp>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d103      	bne.n	80014f0 <esp_event+0xa4>
  	{
  		MX_GPIO_LED_ON(LD2_Pin);
 80014e8:	2020      	movs	r0, #32
 80014ea:	f7ff ff8b 	bl	8001404 <MX_GPIO_LED_ON>
 80014ee:	e00a      	b.n	8001506 <esp_event+0xba>
  	}
	else if(!strcmp(pArray[2],"OFF"))
 80014f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80014f2:	4938      	ldr	r1, [pc, #224]	@ (80015d4 <esp_event+0x188>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe fe73 	bl	80001e0 <strcmp>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <esp_event+0xba>
	{
		MX_GPIO_LED_OFF(LD2_Pin);
 8001500:	2020      	movs	r0, #32
 8001502:	f7ff ff91 	bl	8001428 <MX_GPIO_LED_OFF>
	}
	sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 8001506:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001508:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800150a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800150c:	f107 0008 	add.w	r0, r7, #8
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	460b      	mov	r3, r1
 8001514:	4930      	ldr	r1, [pc, #192]	@ (80015d8 <esp_event+0x18c>)
 8001516:	f003 fddb 	bl	80050d0 <siprintf>
 800151a:	e03f      	b.n	800159c <esp_event+0x150>
  }
  else if(!strcmp(pArray[1],"SERVO"))
 800151c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800151e:	492f      	ldr	r1, [pc, #188]	@ (80015dc <esp_event+0x190>)
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe fe5d 	bl	80001e0 <strcmp>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d122      	bne.n	8001572 <esp_event+0x126>
  {
	int value = atoi(pArray[2]);
 800152c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800152e:	4618      	mov	r0, r3
 8001530:	f003 fc0c 	bl	8004d4c <atoi>
 8001534:	65f8      	str	r0, [r7, #92]	@ 0x5c
	value = map(value, 0, 180, 500, 2500);
 8001536:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001540:	22b4      	movs	r2, #180	@ 0xb4
 8001542:	2100      	movs	r1, #0
 8001544:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001546:	f000 f895 	bl	8001674 <map>
 800154a:	65f8      	str	r0, [r7, #92]	@ 0x5c
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1,(value-1)<0?0:value-1);
 800154c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800154e:	2b01      	cmp	r3, #1
 8001550:	bfb8      	it	lt
 8001552:	2301      	movlt	r3, #1
 8001554:	1e5a      	subs	r2, r3, #1
 8001556:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <esp_event+0x194>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	635a      	str	r2, [r3, #52]	@ 0x34
	sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 800155c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800155e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001562:	f107 0008 	add.w	r0, r7, #8
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	460b      	mov	r3, r1
 800156a:	491b      	ldr	r1, [pc, #108]	@ (80015d8 <esp_event+0x18c>)
 800156c:	f003 fdb0 	bl	80050d0 <siprintf>
 8001570:	e014      	b.n	800159c <esp_event+0x150>
  }
  else if(!strncmp(pArray[1]," New conn",8))
 8001572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001574:	2208      	movs	r2, #8
 8001576:	491b      	ldr	r1, [pc, #108]	@ (80015e4 <esp_event+0x198>)
 8001578:	4618      	mov	r0, r3
 800157a:	f003 feb8 	bl	80052ee <strncmp>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d017      	beq.n	80015b4 <esp_event+0x168>
  {
//	   printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
     return;
  }
  else if(!strncmp(pArray[1]," Already log",8))
 8001584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001586:	2208      	movs	r2, #8
 8001588:	4917      	ldr	r1, [pc, #92]	@ (80015e8 <esp_event+0x19c>)
 800158a:	4618      	mov	r0, r3
 800158c:	f003 feaf 	bl	80052ee <strncmp>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d110      	bne.n	80015b8 <esp_event+0x16c>
  {
// 	    printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
	  esp_client_conn();
 8001596:	f7ff faa7 	bl	8000ae8 <esp_client_conn>
      return;
 800159a:	e00e      	b.n	80015ba <esp_event+0x16e>
  }
  else
      return;

  esp_send_data(sendBuf);
 800159c:	f107 0308 	add.w	r3, r7, #8
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fbc9 	bl	8000d38 <esp_send_data>
  printf("Debug send : %s\r\n",sendBuf);
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	4619      	mov	r1, r3
 80015ac:	480f      	ldr	r0, [pc, #60]	@ (80015ec <esp_event+0x1a0>)
 80015ae:	f003 fd17 	bl	8004fe0 <iprintf>
 80015b2:	e002      	b.n	80015ba <esp_event+0x16e>
     return;
 80015b4:	bf00      	nop
 80015b6:	e000      	b.n	80015ba <esp_event+0x16e>
      return;
 80015b8:	bf00      	nop
}
 80015ba:	3768      	adds	r7, #104	@ 0x68
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000a00 	.word	0x20000a00
 80015c4:	080066ac 	.word	0x080066ac
 80015c8:	080066c0 	.word	0x080066c0
 80015cc:	080066c4 	.word	0x080066c4
 80015d0:	080066c8 	.word	0x080066c8
 80015d4:	080066cc 	.word	0x080066cc
 80015d8:	080066d0 	.word	0x080066d0
 80015dc:	080066dc 	.word	0x080066dc
 80015e0:	20000920 	.word	0x20000920
 80015e4:	080066e4 	.word	0x080066e4
 80015e8:	080066f0 	.word	0x080066f0
 80015ec:	08006700 	.word	0x08006700

080015f0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		//1ms 마다 호출
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 80015f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001630 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001600:	6013      	str	r3, [r2, #0]
	if(tim3Cnt >= 1000) //1ms * 1000 = 1Sec
 8001602:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800160a:	db0a      	blt.n	8001622 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 800160c:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 8001612:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	4a07      	ldr	r2, [pc, #28]	@ (8001638 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800161a:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 800161c:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
	}
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000a40 	.word	0x20000a40
 8001634:	20000000 	.word	0x20000000
 8001638:	200009f8 	.word	0x200009f8

0800163c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]
//	printf("EXTI %d\r\n",GPIO_Pin);
	switch(GPIO_Pin)
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_EXTI_Callback+0x18>
 800164c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001650:	d004      	beq.n	800165c <HAL_GPIO_EXTI_Callback+0x20>
			break;
		case GPIO_PIN_13:
			keyNo = 2;
			break;
	}
}
 8001652:	e007      	b.n	8001664 <HAL_GPIO_EXTI_Callback+0x28>
			keyNo = 1;
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <HAL_GPIO_EXTI_Callback+0x34>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]
			break;
 800165a:	e003      	b.n	8001664 <HAL_GPIO_EXTI_Callback+0x28>
			keyNo = 2;
 800165c:	4b04      	ldr	r3, [pc, #16]	@ (8001670 <HAL_GPIO_EXTI_Callback+0x34>)
 800165e:	2202      	movs	r2, #2
 8001660:	601a      	str	r2, [r3, #0]
			break;
 8001662:	bf00      	nop
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	200009fc 	.word	0x200009fc

08001674 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	69b9      	ldr	r1, [r7, #24]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	1a8a      	subs	r2, r1, r2
 800168e:	fb03 f202 	mul.w	r2, r3, r2
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1acb      	subs	r3, r1, r3
 8001698:	fb92 f2f3 	sdiv	r2, r2, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	4413      	add	r3, r2
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <Error_Handler+0x8>

080016b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <HAL_MspInit+0x4c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001704 <HAL_MspInit+0x4c>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <HAL_MspInit+0x4c>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	4a08      	ldr	r2, [pc, #32]	@ (8001704 <HAL_MspInit+0x4c>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016f6:	2007      	movs	r0, #7
 80016f8:	f000 fbd0 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800

08001708 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a18      	ldr	r2, [pc, #96]	@ (8001778 <HAL_TIM_Base_MspInit+0x70>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d116      	bne.n	8001748 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b17      	ldr	r3, [pc, #92]	@ (800177c <HAL_TIM_Base_MspInit+0x74>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	4a16      	ldr	r2, [pc, #88]	@ (800177c <HAL_TIM_Base_MspInit+0x74>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6413      	str	r3, [r2, #64]	@ 0x40
 800172a:	4b14      	ldr	r3, [pc, #80]	@ (800177c <HAL_TIM_Base_MspInit+0x74>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	201d      	movs	r0, #29
 800173c:	f000 fbb9 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001740:	201d      	movs	r0, #29
 8001742:	f000 fbd2 	bl	8001eea <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001746:	e012      	b.n	800176e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0c      	ldr	r2, [pc, #48]	@ (8001780 <HAL_TIM_Base_MspInit+0x78>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d10d      	bne.n	800176e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <HAL_TIM_Base_MspInit+0x74>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	4a08      	ldr	r2, [pc, #32]	@ (800177c <HAL_TIM_Base_MspInit+0x74>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	6413      	str	r3, [r2, #64]	@ 0x40
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_TIM_Base_MspInit+0x74>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
}
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40000400 	.word	0x40000400
 800177c:	40023800 	.word	0x40023800
 8001780:	40000800 	.word	0x40000800

08001784 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a12      	ldr	r2, [pc, #72]	@ (80017ec <HAL_TIM_MspPostInit+0x68>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d11d      	bne.n	80017e2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <HAL_TIM_MspPostInit+0x6c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a10      	ldr	r2, [pc, #64]	@ (80017f0 <HAL_TIM_MspPostInit+0x6c>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <HAL_TIM_MspPostInit+0x6c>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017c2:	2340      	movs	r3, #64	@ 0x40
 80017c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017d2:	2302      	movs	r3, #2
 80017d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <HAL_TIM_MspPostInit+0x70>)
 80017de:	f000 fc31 	bl	8002044 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80017e2:	bf00      	nop
 80017e4:	3720      	adds	r7, #32
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40000800 	.word	0x40000800
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020400 	.word	0x40020400

080017f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	@ 0x30
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a3a      	ldr	r2, [pc, #232]	@ (8001900 <HAL_UART_MspInit+0x108>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d134      	bne.n	8001884 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
 800181e:	4b39      	ldr	r3, [pc, #228]	@ (8001904 <HAL_UART_MspInit+0x10c>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	4a38      	ldr	r2, [pc, #224]	@ (8001904 <HAL_UART_MspInit+0x10c>)
 8001824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001828:	6413      	str	r3, [r2, #64]	@ 0x40
 800182a:	4b36      	ldr	r3, [pc, #216]	@ (8001904 <HAL_UART_MspInit+0x10c>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001832:	61bb      	str	r3, [r7, #24]
 8001834:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	4b32      	ldr	r3, [pc, #200]	@ (8001904 <HAL_UART_MspInit+0x10c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	4a31      	ldr	r2, [pc, #196]	@ (8001904 <HAL_UART_MspInit+0x10c>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6313      	str	r3, [r2, #48]	@ 0x30
 8001846:	4b2f      	ldr	r3, [pc, #188]	@ (8001904 <HAL_UART_MspInit+0x10c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001852:	230c      	movs	r3, #12
 8001854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001862:	2307      	movs	r3, #7
 8001864:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	4619      	mov	r1, r3
 800186c:	4826      	ldr	r0, [pc, #152]	@ (8001908 <HAL_UART_MspInit+0x110>)
 800186e:	f000 fbe9 	bl	8002044 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2026      	movs	r0, #38	@ 0x26
 8001878:	f000 fb1b 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800187c:	2026      	movs	r0, #38	@ 0x26
 800187e:	f000 fb34 	bl	8001eea <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001882:	e038      	b.n	80018f6 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a20      	ldr	r2, [pc, #128]	@ (800190c <HAL_UART_MspInit+0x114>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d133      	bne.n	80018f6 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	4b1c      	ldr	r3, [pc, #112]	@ (8001904 <HAL_UART_MspInit+0x10c>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	4a1b      	ldr	r2, [pc, #108]	@ (8001904 <HAL_UART_MspInit+0x10c>)
 8001898:	f043 0320 	orr.w	r3, r3, #32
 800189c:	6453      	str	r3, [r2, #68]	@ 0x44
 800189e:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <HAL_UART_MspInit+0x10c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <HAL_UART_MspInit+0x10c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a14      	ldr	r2, [pc, #80]	@ (8001904 <HAL_UART_MspInit+0x10c>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_UART_MspInit+0x10c>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018c6:	23c0      	movs	r3, #192	@ 0xc0
 80018c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80018d6:	2308      	movs	r3, #8
 80018d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	4619      	mov	r1, r3
 80018e0:	480b      	ldr	r0, [pc, #44]	@ (8001910 <HAL_UART_MspInit+0x118>)
 80018e2:	f000 fbaf 	bl	8002044 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	2047      	movs	r0, #71	@ 0x47
 80018ec:	f000 fae1 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80018f0:	2047      	movs	r0, #71	@ 0x47
 80018f2:	f000 fafa 	bl	8001eea <HAL_NVIC_EnableIRQ>
}
 80018f6:	bf00      	nop
 80018f8:	3730      	adds	r7, #48	@ 0x30
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40004400 	.word	0x40004400
 8001904:	40023800 	.word	0x40023800
 8001908:	40020000 	.word	0x40020000
 800190c:	40011400 	.word	0x40011400
 8001910:	40020800 	.word	0x40020800

08001914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <NMI_Handler+0x4>

0800191c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <MemManage_Handler+0x4>

0800192c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <UsageFault_Handler+0x4>

0800193c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196a:	f000 f983 	bl	8001c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}

08001972 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC0_EXTI0_BUTTON_Pin);
 8001976:	2001      	movs	r0, #1
 8001978:	f000 fd1a 	bl	80023b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <TIM3_IRQHandler+0x10>)
 8001986:	f001 fb7f 	bl	8003088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200008d8 	.word	0x200008d8

08001994 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001998:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <USART2_IRQHandler+0x10>)
 800199a:	f002 fa6b 	bl	8003e74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000968 	.word	0x20000968

080019a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80019b0:	f000 fcfe 	bl	80023b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80019bc:	4802      	ldr	r0, [pc, #8]	@ (80019c8 <USART6_IRQHandler+0x10>)
 80019be:	f002 fa59 	bl	8003e74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200009b0 	.word	0x200009b0

080019cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return 1;
 80019d0:	2301      	movs	r3, #1
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_kill>:

int _kill(int pid, int sig)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019e6:	f003 fd4d 	bl	8005484 <__errno>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2216      	movs	r2, #22
 80019ee:	601a      	str	r2, [r3, #0]
  return -1;
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_exit>:

void _exit (int status)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ffe7 	bl	80019dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a0e:	bf00      	nop
 8001a10:	e7fd      	b.n	8001a0e <_exit+0x12>

08001a12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	e00a      	b.n	8001a3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a24:	f3af 8000 	nop.w
 8001a28:	4601      	mov	r1, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	60ba      	str	r2, [r7, #8]
 8001a30:	b2ca      	uxtb	r2, r1
 8001a32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	3301      	adds	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	dbf0      	blt.n	8001a24 <_read+0x12>
  }

  return len;
 8001a42:	687b      	ldr	r3, [r7, #4]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e009      	b.n	8001a72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	60ba      	str	r2, [r7, #8]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f9a8 	bl	8000dbc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	dbf1      	blt.n	8001a5e <_write+0x12>
  }
  return len;
 8001a7a:	687b      	ldr	r3, [r7, #4]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_close>:

int _close(int file)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aac:	605a      	str	r2, [r3, #4]
  return 0;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_isatty>:

int _isatty(int file)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b085      	sub	sp, #20
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af4:	4a14      	ldr	r2, [pc, #80]	@ (8001b48 <_sbrk+0x5c>)
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <_sbrk+0x60>)
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b00:	4b13      	ldr	r3, [pc, #76]	@ (8001b50 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b08:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <_sbrk+0x64>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	@ (8001b54 <_sbrk+0x68>)
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d207      	bcs.n	8001b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b1c:	f003 fcb2 	bl	8005484 <__errno>
 8001b20:	4603      	mov	r3, r0
 8001b22:	220c      	movs	r2, #12
 8001b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2a:	e009      	b.n	8001b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	@ (8001b50 <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b32:	4b07      	ldr	r3, [pc, #28]	@ (8001b50 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a05      	ldr	r2, [pc, #20]	@ (8001b50 <_sbrk+0x64>)
 8001b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20020000 	.word	0x20020000
 8001b4c:	00000400 	.word	0x00000400
 8001b50:	20000a44 	.word	0x20000a44
 8001b54:	20000b98 	.word	0x20000b98

08001b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <SystemInit+0x20>)
 8001b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b62:	4a05      	ldr	r2, [pc, #20]	@ (8001b78 <SystemInit+0x20>)
 8001b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8001b7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b80:	f7ff ffea 	bl	8001b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b84:	480c      	ldr	r0, [pc, #48]	@ (8001bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b86:	490d      	ldr	r1, [pc, #52]	@ (8001bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b88:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b8c:	e002      	b.n	8001b94 <LoopCopyDataInit>

08001b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b92:	3304      	adds	r3, #4

08001b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b98:	d3f9      	bcc.n	8001b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b9c:	4c0a      	ldr	r4, [pc, #40]	@ (8001bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba0:	e001      	b.n	8001ba6 <LoopFillZerobss>

08001ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba4:	3204      	adds	r2, #4

08001ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba8:	d3fb      	bcc.n	8001ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001baa:	f003 fc71 	bl	8005490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bae:	f7ff f91d 	bl	8000dec <main>
  bx  lr    
 8001bb2:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8001bb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bbc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001bc0:	08006920 	.word	0x08006920
  ldr r2, =_sbss
 8001bc4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001bc8:	20000b98 	.word	0x20000b98

08001bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bcc:	e7fe      	b.n	8001bcc <ADC_IRQHandler>
	...

08001bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c10 <HAL_Init+0x40>)
 8001bda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001be0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <HAL_Init+0x40>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <HAL_Init+0x40>)
 8001be6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bec:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a07      	ldr	r2, [pc, #28]	@ (8001c10 <HAL_Init+0x40>)
 8001bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f000 f94f 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f000 f808 	bl	8001c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c04:	f7ff fd58 	bl	80016b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023c00 	.word	0x40023c00

08001c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c1c:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <HAL_InitTick+0x54>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <HAL_InitTick+0x58>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f967 	bl	8001f06 <HAL_SYSTICK_Config>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00e      	b.n	8001c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b0f      	cmp	r3, #15
 8001c46:	d80a      	bhi.n	8001c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f000 f92f 	bl	8001eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c54:	4a06      	ldr	r2, [pc, #24]	@ (8001c70 <HAL_InitTick+0x5c>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000004 	.word	0x20000004
 8001c6c:	2000000c 	.word	0x2000000c
 8001c70:	20000008 	.word	0x20000008

08001c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_IncTick+0x20>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_IncTick+0x24>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a04      	ldr	r2, [pc, #16]	@ (8001c98 <HAL_IncTick+0x24>)
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	2000000c 	.word	0x2000000c
 8001c98:	20000a48 	.word	0x20000a48

08001c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	@ (8001cb0 <HAL_GetTick+0x14>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000a48 	.word	0x20000a48

08001cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cbc:	f7ff ffee 	bl	8001c9c <HAL_GetTick>
 8001cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ccc:	d005      	beq.n	8001cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cce:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <HAL_Delay+0x44>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cda:	bf00      	nop
 8001cdc:	f7ff ffde 	bl	8001c9c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d8f7      	bhi.n	8001cdc <HAL_Delay+0x28>
  {
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000000c 	.word	0x2000000c

08001cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	@ (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	60d3      	str	r3, [r2, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d48:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <__NVIC_GetPriorityGrouping+0x18>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	f003 0307 	and.w	r3, r3, #7
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	db0b      	blt.n	8001d8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	f003 021f 	and.w	r2, r3, #31
 8001d78:	4907      	ldr	r1, [pc, #28]	@ (8001d98 <__NVIC_EnableIRQ+0x38>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2001      	movs	r0, #1
 8001d82:	fa00 f202 	lsl.w	r2, r0, r2
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000e100 	.word	0xe000e100

08001d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	6039      	str	r1, [r7, #0]
 8001da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	db0a      	blt.n	8001dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	490c      	ldr	r1, [pc, #48]	@ (8001de8 <__NVIC_SetPriority+0x4c>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	0112      	lsls	r2, r2, #4
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc4:	e00a      	b.n	8001ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4908      	ldr	r1, [pc, #32]	@ (8001dec <__NVIC_SetPriority+0x50>)
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	3b04      	subs	r3, #4
 8001dd4:	0112      	lsls	r2, r2, #4
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	440b      	add	r3, r1
 8001dda:	761a      	strb	r2, [r3, #24]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000e100 	.word	0xe000e100
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	@ 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f1c3 0307 	rsb	r3, r3, #7
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	bf28      	it	cs
 8001e0e:	2304      	movcs	r3, #4
 8001e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3304      	adds	r3, #4
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d902      	bls.n	8001e20 <NVIC_EncodePriority+0x30>
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3b03      	subs	r3, #3
 8001e1e:	e000      	b.n	8001e22 <NVIC_EncodePriority+0x32>
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	f04f 32ff 	mov.w	r2, #4294967295
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	401a      	ands	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e38:	f04f 31ff 	mov.w	r1, #4294967295
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	43d9      	mvns	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	4313      	orrs	r3, r2
         );
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3724      	adds	r7, #36	@ 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e68:	d301      	bcc.n	8001e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00f      	b.n	8001e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <SysTick_Config+0x40>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e76:	210f      	movs	r1, #15
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f7ff ff8e 	bl	8001d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e80:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <SysTick_Config+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e86:	4b04      	ldr	r3, [pc, #16]	@ (8001e98 <SysTick_Config+0x40>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff29 	bl	8001cfc <__NVIC_SetPriorityGrouping>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec4:	f7ff ff3e 	bl	8001d44 <__NVIC_GetPriorityGrouping>
 8001ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff8e 	bl	8001df0 <NVIC_EncodePriority>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff5d 	bl	8001d9c <__NVIC_SetPriority>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff31 	bl	8001d60 <__NVIC_EnableIRQ>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ffa2 	bl	8001e58 <SysTick_Config>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f2c:	f7ff feb6 	bl	8001c9c <HAL_GetTick>
 8001f30:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d008      	beq.n	8001f50 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2280      	movs	r2, #128	@ 0x80
 8001f42:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e052      	b.n	8001ff6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0216 	bic.w	r2, r2, #22
 8001f5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f6e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d103      	bne.n	8001f80 <HAL_DMA_Abort+0x62>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0208 	bic.w	r2, r2, #8
 8001f8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa0:	e013      	b.n	8001fca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fa2:	f7ff fe7b 	bl	8001c9c <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d90c      	bls.n	8001fca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2203      	movs	r2, #3
 8001fba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e015      	b.n	8001ff6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1e4      	bne.n	8001fa2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fdc:	223f      	movs	r2, #63	@ 0x3f
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d004      	beq.n	800201c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2280      	movs	r2, #128	@ 0x80
 8002016:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e00c      	b.n	8002036 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2205      	movs	r2, #5
 8002020:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0201 	bic.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	@ 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	e159      	b.n	8002314 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002060:	2201      	movs	r2, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	429a      	cmp	r2, r3
 800207a:	f040 8148 	bne.w	800230e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d005      	beq.n	8002096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002092:	2b02      	cmp	r3, #2
 8002094:	d130      	bne.n	80020f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2203      	movs	r2, #3
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020cc:	2201      	movs	r2, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 0201 	and.w	r2, r3, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b03      	cmp	r3, #3
 8002102:	d017      	beq.n	8002134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d123      	bne.n	8002188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	220f      	movs	r2, #15
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	08da      	lsrs	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3208      	adds	r2, #8
 8002182:	69b9      	ldr	r1, [r7, #24]
 8002184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80a2 	beq.w	800230e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b57      	ldr	r3, [pc, #348]	@ (800232c <HAL_GPIO_Init+0x2e8>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	4a56      	ldr	r2, [pc, #344]	@ (800232c <HAL_GPIO_Init+0x2e8>)
 80021d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021da:	4b54      	ldr	r3, [pc, #336]	@ (800232c <HAL_GPIO_Init+0x2e8>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e6:	4a52      	ldr	r2, [pc, #328]	@ (8002330 <HAL_GPIO_Init+0x2ec>)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	089b      	lsrs	r3, r3, #2
 80021ec:	3302      	adds	r3, #2
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	220f      	movs	r2, #15
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a49      	ldr	r2, [pc, #292]	@ (8002334 <HAL_GPIO_Init+0x2f0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d019      	beq.n	8002246 <HAL_GPIO_Init+0x202>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a48      	ldr	r2, [pc, #288]	@ (8002338 <HAL_GPIO_Init+0x2f4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <HAL_GPIO_Init+0x1fe>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a47      	ldr	r2, [pc, #284]	@ (800233c <HAL_GPIO_Init+0x2f8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00d      	beq.n	800223e <HAL_GPIO_Init+0x1fa>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a46      	ldr	r2, [pc, #280]	@ (8002340 <HAL_GPIO_Init+0x2fc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d007      	beq.n	800223a <HAL_GPIO_Init+0x1f6>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a45      	ldr	r2, [pc, #276]	@ (8002344 <HAL_GPIO_Init+0x300>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d101      	bne.n	8002236 <HAL_GPIO_Init+0x1f2>
 8002232:	2304      	movs	r3, #4
 8002234:	e008      	b.n	8002248 <HAL_GPIO_Init+0x204>
 8002236:	2307      	movs	r3, #7
 8002238:	e006      	b.n	8002248 <HAL_GPIO_Init+0x204>
 800223a:	2303      	movs	r3, #3
 800223c:	e004      	b.n	8002248 <HAL_GPIO_Init+0x204>
 800223e:	2302      	movs	r3, #2
 8002240:	e002      	b.n	8002248 <HAL_GPIO_Init+0x204>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_GPIO_Init+0x204>
 8002246:	2300      	movs	r3, #0
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	f002 0203 	and.w	r2, r2, #3
 800224e:	0092      	lsls	r2, r2, #2
 8002250:	4093      	lsls	r3, r2
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002258:	4935      	ldr	r1, [pc, #212]	@ (8002330 <HAL_GPIO_Init+0x2ec>)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	3302      	adds	r3, #2
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002266:	4b38      	ldr	r3, [pc, #224]	@ (8002348 <HAL_GPIO_Init+0x304>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800228a:	4a2f      	ldr	r2, [pc, #188]	@ (8002348 <HAL_GPIO_Init+0x304>)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002290:	4b2d      	ldr	r3, [pc, #180]	@ (8002348 <HAL_GPIO_Init+0x304>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022b4:	4a24      	ldr	r2, [pc, #144]	@ (8002348 <HAL_GPIO_Init+0x304>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ba:	4b23      	ldr	r3, [pc, #140]	@ (8002348 <HAL_GPIO_Init+0x304>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022de:	4a1a      	ldr	r2, [pc, #104]	@ (8002348 <HAL_GPIO_Init+0x304>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e4:	4b18      	ldr	r3, [pc, #96]	@ (8002348 <HAL_GPIO_Init+0x304>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002308:	4a0f      	ldr	r2, [pc, #60]	@ (8002348 <HAL_GPIO_Init+0x304>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3301      	adds	r3, #1
 8002312:	61fb      	str	r3, [r7, #28]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	2b0f      	cmp	r3, #15
 8002318:	f67f aea2 	bls.w	8002060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3724      	adds	r7, #36	@ 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800
 8002330:	40013800 	.word	0x40013800
 8002334:	40020000 	.word	0x40020000
 8002338:	40020400 	.word	0x40020400
 800233c:	40020800 	.word	0x40020800
 8002340:	40020c00 	.word	0x40020c00
 8002344:	40021000 	.word	0x40021000
 8002348:	40013c00 	.word	0x40013c00

0800234c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	887b      	ldrh	r3, [r7, #2]
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	e001      	b.n	800236e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	807b      	strh	r3, [r7, #2]
 8002388:	4613      	mov	r3, r2
 800238a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800238c:	787b      	ldrb	r3, [r7, #1]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002398:	e003      	b.n	80023a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800239a:	887b      	ldrh	r3, [r7, #2]
 800239c:	041a      	lsls	r2, r3, #16
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	619a      	str	r2, [r3, #24]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023ba:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d006      	beq.n	80023d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023c6:	4a05      	ldr	r2, [pc, #20]	@ (80023dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff f934 	bl	800163c <HAL_GPIO_EXTI_Callback>
  }
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40013c00 	.word	0x40013c00

080023e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e267      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d075      	beq.n	80024ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023fe:	4b88      	ldr	r3, [pc, #544]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b04      	cmp	r3, #4
 8002408:	d00c      	beq.n	8002424 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240a:	4b85      	ldr	r3, [pc, #532]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002412:	2b08      	cmp	r3, #8
 8002414:	d112      	bne.n	800243c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002416:	4b82      	ldr	r3, [pc, #520]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800241e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002422:	d10b      	bne.n	800243c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002424:	4b7e      	ldr	r3, [pc, #504]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d05b      	beq.n	80024e8 <HAL_RCC_OscConfig+0x108>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d157      	bne.n	80024e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e242      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002444:	d106      	bne.n	8002454 <HAL_RCC_OscConfig+0x74>
 8002446:	4b76      	ldr	r3, [pc, #472]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a75      	ldr	r2, [pc, #468]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e01d      	b.n	8002490 <HAL_RCC_OscConfig+0xb0>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x98>
 800245e:	4b70      	ldr	r3, [pc, #448]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a6f      	ldr	r2, [pc, #444]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 8002464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b6d      	ldr	r3, [pc, #436]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a6c      	ldr	r2, [pc, #432]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0xb0>
 8002478:	4b69      	ldr	r3, [pc, #420]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a68      	ldr	r2, [pc, #416]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 800247e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b66      	ldr	r3, [pc, #408]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a65      	ldr	r2, [pc, #404]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800248e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d013      	beq.n	80024c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7ff fc00 	bl	8001c9c <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7ff fbfc 	bl	8001c9c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	@ 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e207      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0xc0>
 80024be:	e014      	b.n	80024ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fbec 	bl	8001c9c <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7ff fbe8 	bl	8001c9c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	@ 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1f3      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	4b51      	ldr	r3, [pc, #324]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0xe8>
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d063      	beq.n	80025be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002502:	4b47      	ldr	r3, [pc, #284]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800250a:	2b08      	cmp	r3, #8
 800250c:	d11c      	bne.n	8002548 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250e:	4b44      	ldr	r3, [pc, #272]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d116      	bne.n	8002548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251a:	4b41      	ldr	r3, [pc, #260]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_RCC_OscConfig+0x152>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e1c7      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	4b3b      	ldr	r3, [pc, #236]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4937      	ldr	r1, [pc, #220]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002546:	e03a      	b.n	80025be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d020      	beq.n	8002592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002550:	4b34      	ldr	r3, [pc, #208]	@ (8002624 <HAL_RCC_OscConfig+0x244>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7ff fba1 	bl	8001c9c <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255e:	f7ff fb9d 	bl	8001c9c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e1a8      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	4b2b      	ldr	r3, [pc, #172]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257c:	4b28      	ldr	r3, [pc, #160]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4925      	ldr	r1, [pc, #148]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]
 8002590:	e015      	b.n	80025be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002592:	4b24      	ldr	r3, [pc, #144]	@ (8002624 <HAL_RCC_OscConfig+0x244>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7ff fb80 	bl	8001c9c <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a0:	f7ff fb7c 	bl	8001c9c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e187      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d036      	beq.n	8002638 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d016      	beq.n	8002600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d2:	4b15      	ldr	r3, [pc, #84]	@ (8002628 <HAL_RCC_OscConfig+0x248>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d8:	f7ff fb60 	bl	8001c9c <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e0:	f7ff fb5c 	bl	8001c9c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e167      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002620 <HAL_RCC_OscConfig+0x240>)
 80025f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x200>
 80025fe:	e01b      	b.n	8002638 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002600:	4b09      	ldr	r3, [pc, #36]	@ (8002628 <HAL_RCC_OscConfig+0x248>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002606:	f7ff fb49 	bl	8001c9c <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260c:	e00e      	b.n	800262c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800260e:	f7ff fb45 	bl	8001c9c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d907      	bls.n	800262c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e150      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
 8002620:	40023800 	.word	0x40023800
 8002624:	42470000 	.word	0x42470000
 8002628:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262c:	4b88      	ldr	r3, [pc, #544]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 800262e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ea      	bne.n	800260e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 8097 	beq.w	8002774 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264a:	4b81      	ldr	r3, [pc, #516]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10f      	bne.n	8002676 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	4b7d      	ldr	r3, [pc, #500]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	4a7c      	ldr	r2, [pc, #496]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002664:	6413      	str	r3, [r2, #64]	@ 0x40
 8002666:	4b7a      	ldr	r3, [pc, #488]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002672:	2301      	movs	r3, #1
 8002674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002676:	4b77      	ldr	r3, [pc, #476]	@ (8002854 <HAL_RCC_OscConfig+0x474>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d118      	bne.n	80026b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002682:	4b74      	ldr	r3, [pc, #464]	@ (8002854 <HAL_RCC_OscConfig+0x474>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a73      	ldr	r2, [pc, #460]	@ (8002854 <HAL_RCC_OscConfig+0x474>)
 8002688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800268c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268e:	f7ff fb05 	bl	8001c9c <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002696:	f7ff fb01 	bl	8001c9c <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e10c      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002854 <HAL_RCC_OscConfig+0x474>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x2ea>
 80026bc:	4b64      	ldr	r3, [pc, #400]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 80026be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c0:	4a63      	ldr	r2, [pc, #396]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c8:	e01c      	b.n	8002704 <HAL_RCC_OscConfig+0x324>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b05      	cmp	r3, #5
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0x30c>
 80026d2:	4b5f      	ldr	r3, [pc, #380]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d6:	4a5e      	ldr	r2, [pc, #376]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80026de:	4b5c      	ldr	r3, [pc, #368]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ea:	e00b      	b.n	8002704 <HAL_RCC_OscConfig+0x324>
 80026ec:	4b58      	ldr	r3, [pc, #352]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f0:	4a57      	ldr	r2, [pc, #348]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 80026f2:	f023 0301 	bic.w	r3, r3, #1
 80026f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f8:	4b55      	ldr	r3, [pc, #340]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fc:	4a54      	ldr	r2, [pc, #336]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 80026fe:	f023 0304 	bic.w	r3, r3, #4
 8002702:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d015      	beq.n	8002738 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270c:	f7ff fac6 	bl	8001c9c <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002712:	e00a      	b.n	800272a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002714:	f7ff fac2 	bl	8001c9c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e0cb      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272a:	4b49      	ldr	r3, [pc, #292]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0ee      	beq.n	8002714 <HAL_RCC_OscConfig+0x334>
 8002736:	e014      	b.n	8002762 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002738:	f7ff fab0 	bl	8001c9c <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273e:	e00a      	b.n	8002756 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002740:	f7ff faac 	bl	8001c9c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e0b5      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002756:	4b3e      	ldr	r3, [pc, #248]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1ee      	bne.n	8002740 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002762:	7dfb      	ldrb	r3, [r7, #23]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d105      	bne.n	8002774 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002768:	4b39      	ldr	r3, [pc, #228]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	4a38      	ldr	r2, [pc, #224]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 800276e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002772:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80a1 	beq.w	80028c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800277e:	4b34      	ldr	r3, [pc, #208]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b08      	cmp	r3, #8
 8002788:	d05c      	beq.n	8002844 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d141      	bne.n	8002816 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b31      	ldr	r3, [pc, #196]	@ (8002858 <HAL_RCC_OscConfig+0x478>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7ff fa80 	bl	8001c9c <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7ff fa7c 	bl	8001c9c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e087      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b2:	4b27      	ldr	r3, [pc, #156]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69da      	ldr	r2, [r3, #28]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	019b      	lsls	r3, r3, #6
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	3b01      	subs	r3, #1
 80027d8:	041b      	lsls	r3, r3, #16
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	491b      	ldr	r1, [pc, #108]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002858 <HAL_RCC_OscConfig+0x478>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7ff fa55 	bl	8001c9c <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f6:	f7ff fa51 	bl	8001c9c <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e05c      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002808:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x416>
 8002814:	e054      	b.n	80028c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002816:	4b10      	ldr	r3, [pc, #64]	@ (8002858 <HAL_RCC_OscConfig+0x478>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7ff fa3e 	bl	8001c9c <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002824:	f7ff fa3a 	bl	8001c9c <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e045      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002836:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <HAL_RCC_OscConfig+0x470>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x444>
 8002842:	e03d      	b.n	80028c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d107      	bne.n	800285c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e038      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
 8002850:	40023800 	.word	0x40023800
 8002854:	40007000 	.word	0x40007000
 8002858:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800285c:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <HAL_RCC_OscConfig+0x4ec>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d028      	beq.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d121      	bne.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d11a      	bne.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800288c:	4013      	ands	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002892:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002894:	4293      	cmp	r3, r2
 8002896:	d111      	bne.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a2:	085b      	lsrs	r3, r3, #1
 80028a4:	3b01      	subs	r3, #1
 80028a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d107      	bne.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800

080028d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0cc      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	4b68      	ldr	r3, [pc, #416]	@ (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d90c      	bls.n	800290c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b65      	ldr	r3, [pc, #404]	@ (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b63      	ldr	r3, [pc, #396]	@ (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0b8      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002924:	4b59      	ldr	r3, [pc, #356]	@ (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4a58      	ldr	r2, [pc, #352]	@ (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800292e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800293c:	4b53      	ldr	r3, [pc, #332]	@ (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a52      	ldr	r2, [pc, #328]	@ (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002948:	4b50      	ldr	r3, [pc, #320]	@ (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	494d      	ldr	r1, [pc, #308]	@ (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d044      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d107      	bne.n	800297e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296e:	4b47      	ldr	r3, [pc, #284]	@ (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d119      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e07f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d003      	beq.n	800298e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298a:	2b03      	cmp	r3, #3
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e06f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e067      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ae:	4b37      	ldr	r3, [pc, #220]	@ (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4934      	ldr	r1, [pc, #208]	@ (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c0:	f7ff f96c 	bl	8001c9c <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	e00a      	b.n	80029de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c8:	f7ff f968 	bl	8001c9c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e04f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	4b2b      	ldr	r3, [pc, #172]	@ (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 020c 	and.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d1eb      	bne.n	80029c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f0:	4b25      	ldr	r3, [pc, #148]	@ (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d20c      	bcs.n	8002a18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b22      	ldr	r3, [pc, #136]	@ (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b20      	ldr	r3, [pc, #128]	@ (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e032      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a24:	4b19      	ldr	r3, [pc, #100]	@ (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4916      	ldr	r1, [pc, #88]	@ (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a42:	4b12      	ldr	r3, [pc, #72]	@ (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	490e      	ldr	r1, [pc, #56]	@ (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a56:	f000 f821 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	490a      	ldr	r1, [pc, #40]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 8002a68:	5ccb      	ldrb	r3, [r1, r3]
 8002a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6e:	4a09      	ldr	r2, [pc, #36]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a72:	4b09      	ldr	r3, [pc, #36]	@ (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff f8cc 	bl	8001c14 <HAL_InitTick>

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023c00 	.word	0x40023c00
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	08006714 	.word	0x08006714
 8002a94:	20000004 	.word	0x20000004
 8002a98:	20000008 	.word	0x20000008

08002a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa0:	b094      	sub	sp, #80	@ 0x50
 8002aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ab4:	4b79      	ldr	r3, [pc, #484]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 030c 	and.w	r3, r3, #12
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d00d      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x40>
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	f200 80e1 	bhi.w	8002c88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ace:	e0db      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ad0:	4b73      	ldr	r3, [pc, #460]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ad4:	e0db      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ad6:	4b73      	ldr	r3, [pc, #460]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ada:	e0d8      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002adc:	4b6f      	ldr	r3, [pc, #444]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ae4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ae6:	4b6d      	ldr	r3, [pc, #436]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d063      	beq.n	8002bba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af2:	4b6a      	ldr	r3, [pc, #424]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	099b      	lsrs	r3, r3, #6
 8002af8:	2200      	movs	r2, #0
 8002afa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002afc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b06:	2300      	movs	r3, #0
 8002b08:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b0e:	4622      	mov	r2, r4
 8002b10:	462b      	mov	r3, r5
 8002b12:	f04f 0000 	mov.w	r0, #0
 8002b16:	f04f 0100 	mov.w	r1, #0
 8002b1a:	0159      	lsls	r1, r3, #5
 8002b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b20:	0150      	lsls	r0, r2, #5
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4621      	mov	r1, r4
 8002b28:	1a51      	subs	r1, r2, r1
 8002b2a:	6139      	str	r1, [r7, #16]
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b40:	4659      	mov	r1, fp
 8002b42:	018b      	lsls	r3, r1, #6
 8002b44:	4651      	mov	r1, sl
 8002b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b4a:	4651      	mov	r1, sl
 8002b4c:	018a      	lsls	r2, r1, #6
 8002b4e:	4651      	mov	r1, sl
 8002b50:	ebb2 0801 	subs.w	r8, r2, r1
 8002b54:	4659      	mov	r1, fp
 8002b56:	eb63 0901 	sbc.w	r9, r3, r1
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b6e:	4690      	mov	r8, r2
 8002b70:	4699      	mov	r9, r3
 8002b72:	4623      	mov	r3, r4
 8002b74:	eb18 0303 	adds.w	r3, r8, r3
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	462b      	mov	r3, r5
 8002b7c:	eb49 0303 	adc.w	r3, r9, r3
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b8e:	4629      	mov	r1, r5
 8002b90:	024b      	lsls	r3, r1, #9
 8002b92:	4621      	mov	r1, r4
 8002b94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b98:	4621      	mov	r1, r4
 8002b9a:	024a      	lsls	r2, r1, #9
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ba8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bac:	f7fd fb80 	bl	80002b0 <__aeabi_uldivmod>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bb8:	e058      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bba:	4b38      	ldr	r3, [pc, #224]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	099b      	lsrs	r3, r3, #6
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bca:	623b      	str	r3, [r7, #32]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bd4:	4642      	mov	r2, r8
 8002bd6:	464b      	mov	r3, r9
 8002bd8:	f04f 0000 	mov.w	r0, #0
 8002bdc:	f04f 0100 	mov.w	r1, #0
 8002be0:	0159      	lsls	r1, r3, #5
 8002be2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002be6:	0150      	lsls	r0, r2, #5
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4641      	mov	r1, r8
 8002bee:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c0c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c10:	eb63 050b 	sbc.w	r5, r3, fp
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	00eb      	lsls	r3, r5, #3
 8002c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c22:	00e2      	lsls	r2, r4, #3
 8002c24:	4614      	mov	r4, r2
 8002c26:	461d      	mov	r5, r3
 8002c28:	4643      	mov	r3, r8
 8002c2a:	18e3      	adds	r3, r4, r3
 8002c2c:	603b      	str	r3, [r7, #0]
 8002c2e:	464b      	mov	r3, r9
 8002c30:	eb45 0303 	adc.w	r3, r5, r3
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c42:	4629      	mov	r1, r5
 8002c44:	028b      	lsls	r3, r1, #10
 8002c46:	4621      	mov	r1, r4
 8002c48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	028a      	lsls	r2, r1, #10
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c56:	2200      	movs	r2, #0
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	61fa      	str	r2, [r7, #28]
 8002c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c60:	f7fd fb26 	bl	80002b0 <__aeabi_uldivmod>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4613      	mov	r3, r2
 8002c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	0c1b      	lsrs	r3, r3, #16
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	3301      	adds	r3, #1
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002c7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c86:	e002      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c88:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3750      	adds	r7, #80	@ 0x50
 8002c94:	46bd      	mov	sp, r7
 8002c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	00f42400 	.word	0x00f42400
 8002ca4:	007a1200 	.word	0x007a1200

08002ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cac:	4b03      	ldr	r3, [pc, #12]	@ (8002cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000004 	.word	0x20000004

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cc4:	f7ff fff0 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b05      	ldr	r3, [pc, #20]	@ (8002ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	0a9b      	lsrs	r3, r3, #10
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4903      	ldr	r1, [pc, #12]	@ (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	08006724 	.word	0x08006724

08002ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cec:	f7ff ffdc 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	@ (8002d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	0b5b      	lsrs	r3, r3, #13
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4903      	ldr	r1, [pc, #12]	@ (8002d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	08006724 	.word	0x08006724

08002d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e041      	b.n	8002da6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe fce6 	bl	8001708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	f000 fc3c 	bl	80035cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d001      	beq.n	8002dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e044      	b.n	8002e52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1e      	ldr	r2, [pc, #120]	@ (8002e60 <HAL_TIM_Base_Start_IT+0xb0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d018      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x6c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df2:	d013      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x6c>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a1a      	ldr	r2, [pc, #104]	@ (8002e64 <HAL_TIM_Base_Start_IT+0xb4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00e      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x6c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a19      	ldr	r2, [pc, #100]	@ (8002e68 <HAL_TIM_Base_Start_IT+0xb8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d009      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x6c>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a17      	ldr	r2, [pc, #92]	@ (8002e6c <HAL_TIM_Base_Start_IT+0xbc>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d004      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x6c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a16      	ldr	r2, [pc, #88]	@ (8002e70 <HAL_TIM_Base_Start_IT+0xc0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d111      	bne.n	8002e40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b06      	cmp	r3, #6
 8002e2c:	d010      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3e:	e007      	b.n	8002e50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40010000 	.word	0x40010000
 8002e64:	40000400 	.word	0x40000400
 8002e68:	40000800 	.word	0x40000800
 8002e6c:	40000c00 	.word	0x40000c00
 8002e70:	40014000 	.word	0x40014000

08002e74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e041      	b.n	8002f0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f839 	bl	8002f12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f000 fb8a 	bl	80035cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <HAL_TIM_PWM_Start+0x24>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	bf14      	ite	ne
 8002f44:	2301      	movne	r3, #1
 8002f46:	2300      	moveq	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	e022      	b.n	8002f92 <HAL_TIM_PWM_Start+0x6a>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d109      	bne.n	8002f66 <HAL_TIM_PWM_Start+0x3e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	bf14      	ite	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	2300      	moveq	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	e015      	b.n	8002f92 <HAL_TIM_PWM_Start+0x6a>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d109      	bne.n	8002f80 <HAL_TIM_PWM_Start+0x58>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e008      	b.n	8002f92 <HAL_TIM_PWM_Start+0x6a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	bf14      	ite	ne
 8002f8c:	2301      	movne	r3, #1
 8002f8e:	2300      	moveq	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e068      	b.n	800306c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d104      	bne.n	8002faa <HAL_TIM_PWM_Start+0x82>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fa8:	e013      	b.n	8002fd2 <HAL_TIM_PWM_Start+0xaa>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d104      	bne.n	8002fba <HAL_TIM_PWM_Start+0x92>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fb8:	e00b      	b.n	8002fd2 <HAL_TIM_PWM_Start+0xaa>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d104      	bne.n	8002fca <HAL_TIM_PWM_Start+0xa2>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fc8:	e003      	b.n	8002fd2 <HAL_TIM_PWM_Start+0xaa>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	6839      	ldr	r1, [r7, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fda2 	bl	8003b24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a23      	ldr	r2, [pc, #140]	@ (8003074 <HAL_TIM_PWM_Start+0x14c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d107      	bne.n	8002ffa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ff8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1d      	ldr	r2, [pc, #116]	@ (8003074 <HAL_TIM_PWM_Start+0x14c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d018      	beq.n	8003036 <HAL_TIM_PWM_Start+0x10e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800300c:	d013      	beq.n	8003036 <HAL_TIM_PWM_Start+0x10e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a19      	ldr	r2, [pc, #100]	@ (8003078 <HAL_TIM_PWM_Start+0x150>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00e      	beq.n	8003036 <HAL_TIM_PWM_Start+0x10e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a17      	ldr	r2, [pc, #92]	@ (800307c <HAL_TIM_PWM_Start+0x154>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d009      	beq.n	8003036 <HAL_TIM_PWM_Start+0x10e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a16      	ldr	r2, [pc, #88]	@ (8003080 <HAL_TIM_PWM_Start+0x158>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d004      	beq.n	8003036 <HAL_TIM_PWM_Start+0x10e>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a14      	ldr	r2, [pc, #80]	@ (8003084 <HAL_TIM_PWM_Start+0x15c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d111      	bne.n	800305a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b06      	cmp	r3, #6
 8003046:	d010      	beq.n	800306a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003058:	e007      	b.n	800306a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0201 	orr.w	r2, r2, #1
 8003068:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40010000 	.word	0x40010000
 8003078:	40000400 	.word	0x40000400
 800307c:	40000800 	.word	0x40000800
 8003080:	40000c00 	.word	0x40000c00
 8003084:	40014000 	.word	0x40014000

08003088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d020      	beq.n	80030ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01b      	beq.n	80030ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0202 	mvn.w	r2, #2
 80030bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fa5b 	bl	800358e <HAL_TIM_IC_CaptureCallback>
 80030d8:	e005      	b.n	80030e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fa4d 	bl	800357a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fa5e 	bl	80035a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d020      	beq.n	8003138 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01b      	beq.n	8003138 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0204 	mvn.w	r2, #4
 8003108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2202      	movs	r2, #2
 800310e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fa35 	bl	800358e <HAL_TIM_IC_CaptureCallback>
 8003124:	e005      	b.n	8003132 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fa27 	bl	800357a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fa38 	bl	80035a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d020      	beq.n	8003184 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d01b      	beq.n	8003184 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0208 	mvn.w	r2, #8
 8003154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2204      	movs	r2, #4
 800315a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fa0f 	bl	800358e <HAL_TIM_IC_CaptureCallback>
 8003170:	e005      	b.n	800317e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fa01 	bl	800357a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fa12 	bl	80035a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b00      	cmp	r3, #0
 800318c:	d020      	beq.n	80031d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f003 0310 	and.w	r3, r3, #16
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01b      	beq.n	80031d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0210 	mvn.w	r2, #16
 80031a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2208      	movs	r2, #8
 80031a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f9e9 	bl	800358e <HAL_TIM_IC_CaptureCallback>
 80031bc:	e005      	b.n	80031ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f9db 	bl	800357a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f9ec 	bl	80035a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00c      	beq.n	80031f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d007      	beq.n	80031f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0201 	mvn.w	r2, #1
 80031ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fe f9fe 	bl	80015f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00c      	beq.n	8003218 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003204:	2b00      	cmp	r3, #0
 8003206:	d007      	beq.n	8003218 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fd24 	bl	8003c60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00c      	beq.n	800323c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003228:	2b00      	cmp	r3, #0
 800322a:	d007      	beq.n	800323c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f9bd 	bl	80035b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00c      	beq.n	8003260 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d007      	beq.n	8003260 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0220 	mvn.w	r2, #32
 8003258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fcf6 	bl	8003c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003260:	bf00      	nop
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003282:	2302      	movs	r3, #2
 8003284:	e0ae      	b.n	80033e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b0c      	cmp	r3, #12
 8003292:	f200 809f 	bhi.w	80033d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003296:	a201      	add	r2, pc, #4	@ (adr r2, 800329c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329c:	080032d1 	.word	0x080032d1
 80032a0:	080033d5 	.word	0x080033d5
 80032a4:	080033d5 	.word	0x080033d5
 80032a8:	080033d5 	.word	0x080033d5
 80032ac:	08003311 	.word	0x08003311
 80032b0:	080033d5 	.word	0x080033d5
 80032b4:	080033d5 	.word	0x080033d5
 80032b8:	080033d5 	.word	0x080033d5
 80032bc:	08003353 	.word	0x08003353
 80032c0:	080033d5 	.word	0x080033d5
 80032c4:	080033d5 	.word	0x080033d5
 80032c8:	080033d5 	.word	0x080033d5
 80032cc:	08003393 	.word	0x08003393
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f9fe 	bl	80036d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0208 	orr.w	r2, r2, #8
 80032ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0204 	bic.w	r2, r2, #4
 80032fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6999      	ldr	r1, [r3, #24]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	619a      	str	r2, [r3, #24]
      break;
 800330e:	e064      	b.n	80033da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fa44 	bl	80037a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800332a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800333a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6999      	ldr	r1, [r3, #24]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	021a      	lsls	r2, r3, #8
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	619a      	str	r2, [r3, #24]
      break;
 8003350:	e043      	b.n	80033da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fa8f 	bl	800387c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0208 	orr.w	r2, r2, #8
 800336c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0204 	bic.w	r2, r2, #4
 800337c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69d9      	ldr	r1, [r3, #28]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	61da      	str	r2, [r3, #28]
      break;
 8003390:	e023      	b.n	80033da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fad9 	bl	8003950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69da      	ldr	r2, [r3, #28]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69da      	ldr	r2, [r3, #28]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69d9      	ldr	r1, [r3, #28]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	021a      	lsls	r2, r3, #8
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	61da      	str	r2, [r3, #28]
      break;
 80033d2:	e002      	b.n	80033da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	75fb      	strb	r3, [r7, #23]
      break;
 80033d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_TIM_ConfigClockSource+0x1c>
 8003404:	2302      	movs	r3, #2
 8003406:	e0b4      	b.n	8003572 <HAL_TIM_ConfigClockSource+0x186>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800342e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003440:	d03e      	beq.n	80034c0 <HAL_TIM_ConfigClockSource+0xd4>
 8003442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003446:	f200 8087 	bhi.w	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 800344a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800344e:	f000 8086 	beq.w	800355e <HAL_TIM_ConfigClockSource+0x172>
 8003452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003456:	d87f      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003458:	2b70      	cmp	r3, #112	@ 0x70
 800345a:	d01a      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0xa6>
 800345c:	2b70      	cmp	r3, #112	@ 0x70
 800345e:	d87b      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003460:	2b60      	cmp	r3, #96	@ 0x60
 8003462:	d050      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x11a>
 8003464:	2b60      	cmp	r3, #96	@ 0x60
 8003466:	d877      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003468:	2b50      	cmp	r3, #80	@ 0x50
 800346a:	d03c      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0xfa>
 800346c:	2b50      	cmp	r3, #80	@ 0x50
 800346e:	d873      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003470:	2b40      	cmp	r3, #64	@ 0x40
 8003472:	d058      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0x13a>
 8003474:	2b40      	cmp	r3, #64	@ 0x40
 8003476:	d86f      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003478:	2b30      	cmp	r3, #48	@ 0x30
 800347a:	d064      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x15a>
 800347c:	2b30      	cmp	r3, #48	@ 0x30
 800347e:	d86b      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003480:	2b20      	cmp	r3, #32
 8003482:	d060      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x15a>
 8003484:	2b20      	cmp	r3, #32
 8003486:	d867      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d05c      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x15a>
 800348c:	2b10      	cmp	r3, #16
 800348e:	d05a      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x15a>
 8003490:	e062      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034a2:	f000 fb1f 	bl	8003ae4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	609a      	str	r2, [r3, #8]
      break;
 80034be:	e04f      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034d0:	f000 fb08 	bl	8003ae4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034e2:	609a      	str	r2, [r3, #8]
      break;
 80034e4:	e03c      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f2:	461a      	mov	r2, r3
 80034f4:	f000 fa7c 	bl	80039f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2150      	movs	r1, #80	@ 0x50
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fad5 	bl	8003aae <TIM_ITRx_SetConfig>
      break;
 8003504:	e02c      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003512:	461a      	mov	r2, r3
 8003514:	f000 fa9b 	bl	8003a4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2160      	movs	r1, #96	@ 0x60
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fac5 	bl	8003aae <TIM_ITRx_SetConfig>
      break;
 8003524:	e01c      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003532:	461a      	mov	r2, r3
 8003534:	f000 fa5c 	bl	80039f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2140      	movs	r1, #64	@ 0x40
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fab5 	bl	8003aae <TIM_ITRx_SetConfig>
      break;
 8003544:	e00c      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4619      	mov	r1, r3
 8003550:	4610      	mov	r0, r2
 8003552:	f000 faac 	bl	8003aae <TIM_ITRx_SetConfig>
      break;
 8003556:	e003      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	73fb      	strb	r3, [r7, #15]
      break;
 800355c:	e000      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800355e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003570:	7bfb      	ldrb	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a37      	ldr	r2, [pc, #220]	@ (80036bc <TIM_Base_SetConfig+0xf0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00f      	beq.n	8003604 <TIM_Base_SetConfig+0x38>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ea:	d00b      	beq.n	8003604 <TIM_Base_SetConfig+0x38>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a34      	ldr	r2, [pc, #208]	@ (80036c0 <TIM_Base_SetConfig+0xf4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d007      	beq.n	8003604 <TIM_Base_SetConfig+0x38>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a33      	ldr	r2, [pc, #204]	@ (80036c4 <TIM_Base_SetConfig+0xf8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <TIM_Base_SetConfig+0x38>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a32      	ldr	r2, [pc, #200]	@ (80036c8 <TIM_Base_SetConfig+0xfc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d108      	bne.n	8003616 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800360a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a28      	ldr	r2, [pc, #160]	@ (80036bc <TIM_Base_SetConfig+0xf0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d01b      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003624:	d017      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a25      	ldr	r2, [pc, #148]	@ (80036c0 <TIM_Base_SetConfig+0xf4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a24      	ldr	r2, [pc, #144]	@ (80036c4 <TIM_Base_SetConfig+0xf8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00f      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a23      	ldr	r2, [pc, #140]	@ (80036c8 <TIM_Base_SetConfig+0xfc>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00b      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a22      	ldr	r2, [pc, #136]	@ (80036cc <TIM_Base_SetConfig+0x100>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d007      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a21      	ldr	r2, [pc, #132]	@ (80036d0 <TIM_Base_SetConfig+0x104>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d003      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a20      	ldr	r2, [pc, #128]	@ (80036d4 <TIM_Base_SetConfig+0x108>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d108      	bne.n	8003668 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800365c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a0c      	ldr	r2, [pc, #48]	@ (80036bc <TIM_Base_SetConfig+0xf0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d103      	bne.n	8003696 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f043 0204 	orr.w	r2, r3, #4
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	601a      	str	r2, [r3, #0]
}
 80036ae:	bf00      	nop
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40010000 	.word	0x40010000
 80036c0:	40000400 	.word	0x40000400
 80036c4:	40000800 	.word	0x40000800
 80036c8:	40000c00 	.word	0x40000c00
 80036cc:	40014000 	.word	0x40014000
 80036d0:	40014400 	.word	0x40014400
 80036d4:	40014800 	.word	0x40014800

080036d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f023 0201 	bic.w	r2, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0303 	bic.w	r3, r3, #3
 800370e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f023 0302 	bic.w	r3, r3, #2
 8003720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a1c      	ldr	r2, [pc, #112]	@ (80037a0 <TIM_OC1_SetConfig+0xc8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d10c      	bne.n	800374e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f023 0308 	bic.w	r3, r3, #8
 800373a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f023 0304 	bic.w	r3, r3, #4
 800374c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a13      	ldr	r2, [pc, #76]	@ (80037a0 <TIM_OC1_SetConfig+0xc8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d111      	bne.n	800377a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800375c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	621a      	str	r2, [r3, #32]
}
 8003794:	bf00      	nop
 8003796:	371c      	adds	r7, #28
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	40010000 	.word	0x40010000

080037a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	f023 0210 	bic.w	r2, r3, #16
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	021b      	lsls	r3, r3, #8
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f023 0320 	bic.w	r3, r3, #32
 80037ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003878 <TIM_OC2_SetConfig+0xd4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d10d      	bne.n	8003820 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800380a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800381e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a15      	ldr	r2, [pc, #84]	@ (8003878 <TIM_OC2_SetConfig+0xd4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d113      	bne.n	8003850 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800382e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003836:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	621a      	str	r2, [r3, #32]
}
 800386a:	bf00      	nop
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40010000 	.word	0x40010000

0800387c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 0303 	bic.w	r3, r3, #3
 80038b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1d      	ldr	r2, [pc, #116]	@ (800394c <TIM_OC3_SetConfig+0xd0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d10d      	bne.n	80038f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	021b      	lsls	r3, r3, #8
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a14      	ldr	r2, [pc, #80]	@ (800394c <TIM_OC3_SetConfig+0xd0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d113      	bne.n	8003926 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800390c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	621a      	str	r2, [r3, #32]
}
 8003940:	bf00      	nop
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	40010000 	.word	0x40010000

08003950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800397e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800399a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	031b      	lsls	r3, r3, #12
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a10      	ldr	r2, [pc, #64]	@ (80039ec <TIM_OC4_SetConfig+0x9c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d109      	bne.n	80039c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	019b      	lsls	r3, r3, #6
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	621a      	str	r2, [r3, #32]
}
 80039de:	bf00      	nop
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40010000 	.word	0x40010000

080039f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	f023 0201 	bic.w	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f023 030a 	bic.w	r3, r3, #10
 8003a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	621a      	str	r2, [r3, #32]
}
 8003a42:	bf00      	nop
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b087      	sub	sp, #28
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f023 0210 	bic.w	r2, r3, #16
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	031b      	lsls	r3, r3, #12
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b085      	sub	sp, #20
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f043 0307 	orr.w	r3, r3, #7
 8003ad0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	609a      	str	r2, [r3, #8]
}
 8003ad8:	bf00      	nop
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003afe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	021a      	lsls	r2, r3, #8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	609a      	str	r2, [r3, #8]
}
 8003b18:	bf00      	nop
 8003b1a:	371c      	adds	r7, #28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	2201      	movs	r2, #1
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a1a      	ldr	r2, [r3, #32]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	43db      	mvns	r3, r3
 8003b46:	401a      	ands	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a1a      	ldr	r2, [r3, #32]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	621a      	str	r2, [r3, #32]
}
 8003b62:	bf00      	nop
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e050      	b.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d018      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd4:	d013      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a18      	ldr	r2, [pc, #96]	@ (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00e      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a16      	ldr	r2, [pc, #88]	@ (8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d009      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a15      	ldr	r2, [pc, #84]	@ (8003c44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d004      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a13      	ldr	r2, [pc, #76]	@ (8003c48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d10c      	bne.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40010000 	.word	0x40010000
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40000800 	.word	0x40000800
 8003c44:	40000c00 	.word	0x40000c00
 8003c48:	40014000 	.word	0x40014000

08003c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e042      	b.n	8003d0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fd fdac 	bl	80017f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2224      	movs	r2, #36	@ 0x24
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fdd3 	bl	8004864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ccc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	@ 0x28
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	4613      	mov	r3, r2
 8003d22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d175      	bne.n	8003e20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <HAL_UART_Transmit+0x2c>
 8003d3a:	88fb      	ldrh	r3, [r7, #6]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e06e      	b.n	8003e22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2221      	movs	r2, #33	@ 0x21
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d52:	f7fd ffa3 	bl	8001c9c <HAL_GetTick>
 8003d56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	88fa      	ldrh	r2, [r7, #6]
 8003d5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	88fa      	ldrh	r2, [r7, #6]
 8003d62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d6c:	d108      	bne.n	8003d80 <HAL_UART_Transmit+0x6c>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d104      	bne.n	8003d80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	61bb      	str	r3, [r7, #24]
 8003d7e:	e003      	b.n	8003d88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d88:	e02e      	b.n	8003de8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2200      	movs	r2, #0
 8003d92:	2180      	movs	r1, #128	@ 0x80
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 fb37 	bl	8004408 <UART_WaitOnFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e03a      	b.n	8003e22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10b      	bne.n	8003dca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	61bb      	str	r3, [r7, #24]
 8003dc8:	e007      	b.n	8003dda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	781a      	ldrb	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1cb      	bne.n	8003d8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2140      	movs	r1, #64	@ 0x40
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fb03 	bl	8004408 <UART_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e006      	b.n	8003e22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e000      	b.n	8003e22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e20:	2302      	movs	r3, #2
  }
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3720      	adds	r7, #32
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	4613      	mov	r3, r2
 8003e36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	d112      	bne.n	8003e6a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_UART_Receive_IT+0x26>
 8003e4a:	88fb      	ldrh	r3, [r7, #6]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e00b      	b.n	8003e6c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fb2a 	bl	80044ba <UART_Start_Receive_IT>
 8003e66:	4603      	mov	r3, r0
 8003e68:	e000      	b.n	8003e6c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e6a:	2302      	movs	r3, #2
  }
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b0ba      	sub	sp, #232	@ 0xe8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003eb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10f      	bne.n	8003eda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <HAL_UART_IRQHandler+0x66>
 8003ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fc07 	bl	80046e6 <UART_Receive_IT>
      return;
 8003ed8:	e273      	b.n	80043c2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 80de 	beq.w	80040a0 <HAL_UART_IRQHandler+0x22c>
 8003ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ef4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80d1 	beq.w	80040a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_UART_IRQHandler+0xae>
 8003f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1a:	f043 0201 	orr.w	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <HAL_UART_IRQHandler+0xd2>
 8003f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	f043 0202 	orr.w	r2, r3, #2
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_UART_IRQHandler+0xf6>
 8003f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	f043 0204 	orr.w	r2, r3, #4
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d011      	beq.n	8003f9a <HAL_UART_IRQHandler+0x126>
 8003f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d105      	bne.n	8003f8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d005      	beq.n	8003f9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f92:	f043 0208 	orr.w	r2, r3, #8
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 820a 	beq.w	80043b8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x14e>
 8003fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fb92 	bl	80046e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fcc:	2b40      	cmp	r3, #64	@ 0x40
 8003fce:	bf0c      	ite	eq
 8003fd0:	2301      	moveq	r3, #1
 8003fd2:	2300      	movne	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d103      	bne.n	8003fee <HAL_UART_IRQHandler+0x17a>
 8003fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d04f      	beq.n	800408e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fa9d 	bl	800452e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffe:	2b40      	cmp	r3, #64	@ 0x40
 8004000:	d141      	bne.n	8004086 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3314      	adds	r3, #20
 8004008:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004010:	e853 3f00 	ldrex	r3, [r3]
 8004014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004018:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800401c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004020:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3314      	adds	r3, #20
 800402a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800402e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004032:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800403a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1d9      	bne.n	8004002 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d013      	beq.n	800407e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405a:	4a8a      	ldr	r2, [pc, #552]	@ (8004284 <HAL_UART_IRQHandler+0x410>)
 800405c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004062:	4618      	mov	r0, r3
 8004064:	f7fd ffcb 	bl	8001ffe <HAL_DMA_Abort_IT>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d016      	beq.n	800409c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004078:	4610      	mov	r0, r2
 800407a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407c:	e00e      	b.n	800409c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f9ac 	bl	80043dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004084:	e00a      	b.n	800409c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f9a8 	bl	80043dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800408c:	e006      	b.n	800409c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f9a4 	bl	80043dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800409a:	e18d      	b.n	80043b8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409c:	bf00      	nop
    return;
 800409e:	e18b      	b.n	80043b8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	f040 8167 	bne.w	8004378 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 8160 	beq.w	8004378 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80040b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8159 	beq.w	8004378 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e6:	2b40      	cmp	r3, #64	@ 0x40
 80040e8:	f040 80ce 	bne.w	8004288 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80a9 	beq.w	8004254 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800410a:	429a      	cmp	r2, r3
 800410c:	f080 80a2 	bcs.w	8004254 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004116:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004122:	f000 8088 	beq.w	8004236 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	330c      	adds	r3, #12
 800412c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800413c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004140:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004144:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004152:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004156:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800415e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800416a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1d9      	bne.n	8004126 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3314      	adds	r3, #20
 8004178:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800417c:	e853 3f00 	ldrex	r3, [r3]
 8004180:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004182:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3314      	adds	r3, #20
 8004192:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004196:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800419a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800419e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1e1      	bne.n	8004172 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3314      	adds	r3, #20
 80041b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041b8:	e853 3f00 	ldrex	r3, [r3]
 80041bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3314      	adds	r3, #20
 80041ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e3      	bne.n	80041ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	330c      	adds	r3, #12
 80041fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004204:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004206:	f023 0310 	bic.w	r3, r3, #16
 800420a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	330c      	adds	r3, #12
 8004214:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004218:	65ba      	str	r2, [r7, #88]	@ 0x58
 800421a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800421e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004220:	e841 2300 	strex	r3, r2, [r1]
 8004224:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e3      	bne.n	80041f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004230:	4618      	mov	r0, r3
 8004232:	f7fd fe74 	bl	8001f1e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2202      	movs	r2, #2
 800423a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004244:	b29b      	uxth	r3, r3
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	b29b      	uxth	r3, r3
 800424a:	4619      	mov	r1, r3
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f8cf 	bl	80043f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004252:	e0b3      	b.n	80043bc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004258:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800425c:	429a      	cmp	r2, r3
 800425e:	f040 80ad 	bne.w	80043bc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800426c:	f040 80a6 	bne.w	80043bc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800427a:	4619      	mov	r1, r3
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f8b7 	bl	80043f0 <HAL_UARTEx_RxEventCallback>
      return;
 8004282:	e09b      	b.n	80043bc <HAL_UART_IRQHandler+0x548>
 8004284:	080045f5 	.word	0x080045f5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004290:	b29b      	uxth	r3, r3
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 808e 	beq.w	80043c0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80042a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 8089 	beq.w	80043c0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	330c      	adds	r3, #12
 80042b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b8:	e853 3f00 	ldrex	r3, [r3]
 80042bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80042d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042da:	e841 2300 	strex	r3, r2, [r1]
 80042de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1e3      	bne.n	80042ae <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3314      	adds	r3, #20
 80042ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	e853 3f00 	ldrex	r3, [r3]
 80042f4:	623b      	str	r3, [r7, #32]
   return(result);
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3314      	adds	r3, #20
 8004306:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800430a:	633a      	str	r2, [r7, #48]	@ 0x30
 800430c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004312:	e841 2300 	strex	r3, r2, [r1]
 8004316:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1e3      	bne.n	80042e6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2220      	movs	r2, #32
 8004322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	330c      	adds	r3, #12
 8004332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	60fb      	str	r3, [r7, #12]
   return(result);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0310 	bic.w	r3, r3, #16
 8004342:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004350:	61fa      	str	r2, [r7, #28]
 8004352:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	69b9      	ldr	r1, [r7, #24]
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	e841 2300 	strex	r3, r2, [r1]
 800435c:	617b      	str	r3, [r7, #20]
   return(result);
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e3      	bne.n	800432c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800436a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800436e:	4619      	mov	r1, r3
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f83d 	bl	80043f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004376:	e023      	b.n	80043c0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800437c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004380:	2b00      	cmp	r3, #0
 8004382:	d009      	beq.n	8004398 <HAL_UART_IRQHandler+0x524>
 8004384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f940 	bl	8004616 <UART_Transmit_IT>
    return;
 8004396:	e014      	b.n	80043c2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800439c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00e      	beq.n	80043c2 <HAL_UART_IRQHandler+0x54e>
 80043a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f980 	bl	80046b6 <UART_EndTransmit_IT>
    return;
 80043b6:	e004      	b.n	80043c2 <HAL_UART_IRQHandler+0x54e>
    return;
 80043b8:	bf00      	nop
 80043ba:	e002      	b.n	80043c2 <HAL_UART_IRQHandler+0x54e>
      return;
 80043bc:	bf00      	nop
 80043be:	e000      	b.n	80043c2 <HAL_UART_IRQHandler+0x54e>
      return;
 80043c0:	bf00      	nop
  }
}
 80043c2:	37e8      	adds	r7, #232	@ 0xe8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	4613      	mov	r3, r2
 8004416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004418:	e03b      	b.n	8004492 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004420:	d037      	beq.n	8004492 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004422:	f7fd fc3b 	bl	8001c9c <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	6a3a      	ldr	r2, [r7, #32]
 800442e:	429a      	cmp	r2, r3
 8004430:	d302      	bcc.n	8004438 <UART_WaitOnFlagUntilTimeout+0x30>
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e03a      	b.n	80044b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b00      	cmp	r3, #0
 8004448:	d023      	beq.n	8004492 <UART_WaitOnFlagUntilTimeout+0x8a>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b80      	cmp	r3, #128	@ 0x80
 800444e:	d020      	beq.n	8004492 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b40      	cmp	r3, #64	@ 0x40
 8004454:	d01d      	beq.n	8004492 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b08      	cmp	r3, #8
 8004462:	d116      	bne.n	8004492 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 f857 	bl	800452e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2208      	movs	r2, #8
 8004484:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e00f      	b.n	80044b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4013      	ands	r3, r2
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	429a      	cmp	r2, r3
 80044a0:	bf0c      	ite	eq
 80044a2:	2301      	moveq	r3, #1
 80044a4:	2300      	movne	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	461a      	mov	r2, r3
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d0b4      	beq.n	800441a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b085      	sub	sp, #20
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	4613      	mov	r3, r2
 80044c6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	88fa      	ldrh	r2, [r7, #6]
 80044d2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	88fa      	ldrh	r2, [r7, #6]
 80044d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2222      	movs	r2, #34	@ 0x22
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d007      	beq.n	8004500 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044fe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0220 	orr.w	r2, r2, #32
 800451e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800452e:	b480      	push	{r7}
 8004530:	b095      	sub	sp, #84	@ 0x54
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	330c      	adds	r3, #12
 800453c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800454c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	330c      	adds	r3, #12
 8004554:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004556:	643a      	str	r2, [r7, #64]	@ 0x40
 8004558:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800455c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e5      	bne.n	8004536 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3314      	adds	r3, #20
 8004570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	61fb      	str	r3, [r7, #28]
   return(result);
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3314      	adds	r3, #20
 8004588:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800458a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800458c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004590:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004592:	e841 2300 	strex	r3, r2, [r1]
 8004596:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e5      	bne.n	800456a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d119      	bne.n	80045da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	330c      	adds	r3, #12
 80045ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f023 0310 	bic.w	r3, r3, #16
 80045bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	330c      	adds	r3, #12
 80045c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045c6:	61ba      	str	r2, [r7, #24]
 80045c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ca:	6979      	ldr	r1, [r7, #20]
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	e841 2300 	strex	r3, r2, [r1]
 80045d2:	613b      	str	r3, [r7, #16]
   return(result);
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e5      	bne.n	80045a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80045e8:	bf00      	nop
 80045ea:	3754      	adds	r7, #84	@ 0x54
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004600:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7ff fee7 	bl	80043dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004616:	b480      	push	{r7}
 8004618:	b085      	sub	sp, #20
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b21      	cmp	r3, #33	@ 0x21
 8004628:	d13e      	bne.n	80046a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004632:	d114      	bne.n	800465e <UART_Transmit_IT+0x48>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d110      	bne.n	800465e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004650:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	1c9a      	adds	r2, r3, #2
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	621a      	str	r2, [r3, #32]
 800465c:	e008      	b.n	8004670 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	1c59      	adds	r1, r3, #1
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6211      	str	r1, [r2, #32]
 8004668:	781a      	ldrb	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29b      	uxth	r3, r3
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	4619      	mov	r1, r3
 800467e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10f      	bne.n	80046a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004692:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e000      	b.n	80046aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046a8:	2302      	movs	r3, #2
  }
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff fe76 	bl	80043c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b08c      	sub	sp, #48	@ 0x30
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b22      	cmp	r3, #34	@ 0x22
 8004700:	f040 80aa 	bne.w	8004858 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800470c:	d115      	bne.n	800473a <UART_Receive_IT+0x54>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d111      	bne.n	800473a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004728:	b29a      	uxth	r2, r3
 800472a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004732:	1c9a      	adds	r2, r3, #2
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	629a      	str	r2, [r3, #40]	@ 0x28
 8004738:	e024      	b.n	8004784 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004748:	d007      	beq.n	800475a <UART_Receive_IT+0x74>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10a      	bne.n	8004768 <UART_Receive_IT+0x82>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	b2da      	uxtb	r2, r3
 8004762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e008      	b.n	800477a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	b2db      	uxtb	r3, r3
 8004770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004774:	b2da      	uxtb	r2, r3
 8004776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004778:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004788:	b29b      	uxth	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	b29b      	uxth	r3, r3
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4619      	mov	r1, r3
 8004792:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004794:	2b00      	cmp	r3, #0
 8004796:	d15d      	bne.n	8004854 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0220 	bic.w	r2, r2, #32
 80047a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695a      	ldr	r2, [r3, #20]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0201 	bic.w	r2, r2, #1
 80047c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d135      	bne.n	800484a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	e853 3f00 	ldrex	r3, [r3]
 80047f2:	613b      	str	r3, [r7, #16]
   return(result);
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f023 0310 	bic.w	r3, r3, #16
 80047fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004804:	623a      	str	r2, [r7, #32]
 8004806:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004808:	69f9      	ldr	r1, [r7, #28]
 800480a:	6a3a      	ldr	r2, [r7, #32]
 800480c:	e841 2300 	strex	r3, r2, [r1]
 8004810:	61bb      	str	r3, [r7, #24]
   return(result);
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e5      	bne.n	80047e4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	2b10      	cmp	r3, #16
 8004824:	d10a      	bne.n	800483c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004826:	2300      	movs	r3, #0
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004840:	4619      	mov	r1, r3
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff fdd4 	bl	80043f0 <HAL_UARTEx_RxEventCallback>
 8004848:	e002      	b.n	8004850 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fc fa02 	bl	8000c54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	e002      	b.n	800485a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	e000      	b.n	800485a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004858:	2302      	movs	r3, #2
  }
}
 800485a:	4618      	mov	r0, r3
 800485c:	3730      	adds	r7, #48	@ 0x30
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004868:	b0c0      	sub	sp, #256	@ 0x100
 800486a:	af00      	add	r7, sp, #0
 800486c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004880:	68d9      	ldr	r1, [r3, #12]
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	ea40 0301 	orr.w	r3, r0, r1
 800488c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800488e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	431a      	orrs	r2, r3
 800489c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80048bc:	f021 010c 	bic.w	r1, r1, #12
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048ca:	430b      	orrs	r3, r1
 80048cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80048da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048de:	6999      	ldr	r1, [r3, #24]
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	ea40 0301 	orr.w	r3, r0, r1
 80048ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	4b8f      	ldr	r3, [pc, #572]	@ (8004b30 <UART_SetConfig+0x2cc>)
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d005      	beq.n	8004904 <UART_SetConfig+0xa0>
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004b34 <UART_SetConfig+0x2d0>)
 8004900:	429a      	cmp	r2, r3
 8004902:	d104      	bne.n	800490e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004904:	f7fe f9f0 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 8004908:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800490c:	e003      	b.n	8004916 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800490e:	f7fe f9d7 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8004912:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004920:	f040 810c 	bne.w	8004b3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004928:	2200      	movs	r2, #0
 800492a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800492e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004932:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004936:	4622      	mov	r2, r4
 8004938:	462b      	mov	r3, r5
 800493a:	1891      	adds	r1, r2, r2
 800493c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800493e:	415b      	adcs	r3, r3
 8004940:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004942:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004946:	4621      	mov	r1, r4
 8004948:	eb12 0801 	adds.w	r8, r2, r1
 800494c:	4629      	mov	r1, r5
 800494e:	eb43 0901 	adc.w	r9, r3, r1
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800495e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004966:	4690      	mov	r8, r2
 8004968:	4699      	mov	r9, r3
 800496a:	4623      	mov	r3, r4
 800496c:	eb18 0303 	adds.w	r3, r8, r3
 8004970:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004974:	462b      	mov	r3, r5
 8004976:	eb49 0303 	adc.w	r3, r9, r3
 800497a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800497e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800498a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800498e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004992:	460b      	mov	r3, r1
 8004994:	18db      	adds	r3, r3, r3
 8004996:	653b      	str	r3, [r7, #80]	@ 0x50
 8004998:	4613      	mov	r3, r2
 800499a:	eb42 0303 	adc.w	r3, r2, r3
 800499e:	657b      	str	r3, [r7, #84]	@ 0x54
 80049a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80049a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80049a8:	f7fb fc82 	bl	80002b0 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4b61      	ldr	r3, [pc, #388]	@ (8004b38 <UART_SetConfig+0x2d4>)
 80049b2:	fba3 2302 	umull	r2, r3, r3, r2
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	011c      	lsls	r4, r3, #4
 80049ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80049c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80049cc:	4642      	mov	r2, r8
 80049ce:	464b      	mov	r3, r9
 80049d0:	1891      	adds	r1, r2, r2
 80049d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80049d4:	415b      	adcs	r3, r3
 80049d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049dc:	4641      	mov	r1, r8
 80049de:	eb12 0a01 	adds.w	sl, r2, r1
 80049e2:	4649      	mov	r1, r9
 80049e4:	eb43 0b01 	adc.w	fp, r3, r1
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049fc:	4692      	mov	sl, r2
 80049fe:	469b      	mov	fp, r3
 8004a00:	4643      	mov	r3, r8
 8004a02:	eb1a 0303 	adds.w	r3, sl, r3
 8004a06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a0a:	464b      	mov	r3, r9
 8004a0c:	eb4b 0303 	adc.w	r3, fp, r3
 8004a10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	18db      	adds	r3, r3, r3
 8004a2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a2e:	4613      	mov	r3, r2
 8004a30:	eb42 0303 	adc.w	r3, r2, r3
 8004a34:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a3e:	f7fb fc37 	bl	80002b0 <__aeabi_uldivmod>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4611      	mov	r1, r2
 8004a48:	4b3b      	ldr	r3, [pc, #236]	@ (8004b38 <UART_SetConfig+0x2d4>)
 8004a4a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a4e:	095b      	lsrs	r3, r3, #5
 8004a50:	2264      	movs	r2, #100	@ 0x64
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
 8004a56:	1acb      	subs	r3, r1, r3
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a5e:	4b36      	ldr	r3, [pc, #216]	@ (8004b38 <UART_SetConfig+0x2d4>)
 8004a60:	fba3 2302 	umull	r2, r3, r3, r2
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a6c:	441c      	add	r4, r3
 8004a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a72:	2200      	movs	r2, #0
 8004a74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a80:	4642      	mov	r2, r8
 8004a82:	464b      	mov	r3, r9
 8004a84:	1891      	adds	r1, r2, r2
 8004a86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a88:	415b      	adcs	r3, r3
 8004a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a90:	4641      	mov	r1, r8
 8004a92:	1851      	adds	r1, r2, r1
 8004a94:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a96:	4649      	mov	r1, r9
 8004a98:	414b      	adcs	r3, r1
 8004a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004aa8:	4659      	mov	r1, fp
 8004aaa:	00cb      	lsls	r3, r1, #3
 8004aac:	4651      	mov	r1, sl
 8004aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ab2:	4651      	mov	r1, sl
 8004ab4:	00ca      	lsls	r2, r1, #3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4603      	mov	r3, r0
 8004abc:	4642      	mov	r2, r8
 8004abe:	189b      	adds	r3, r3, r2
 8004ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	460a      	mov	r2, r1
 8004ac8:	eb42 0303 	adc.w	r3, r2, r3
 8004acc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004adc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ae0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	18db      	adds	r3, r3, r3
 8004ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aea:	4613      	mov	r3, r2
 8004aec:	eb42 0303 	adc.w	r3, r2, r3
 8004af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004af6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004afa:	f7fb fbd9 	bl	80002b0 <__aeabi_uldivmod>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4b0d      	ldr	r3, [pc, #52]	@ (8004b38 <UART_SetConfig+0x2d4>)
 8004b04:	fba3 1302 	umull	r1, r3, r3, r2
 8004b08:	095b      	lsrs	r3, r3, #5
 8004b0a:	2164      	movs	r1, #100	@ 0x64
 8004b0c:	fb01 f303 	mul.w	r3, r1, r3
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	3332      	adds	r3, #50	@ 0x32
 8004b16:	4a08      	ldr	r2, [pc, #32]	@ (8004b38 <UART_SetConfig+0x2d4>)
 8004b18:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	f003 0207 	and.w	r2, r3, #7
 8004b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4422      	add	r2, r4
 8004b2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b2c:	e106      	b.n	8004d3c <UART_SetConfig+0x4d8>
 8004b2e:	bf00      	nop
 8004b30:	40011000 	.word	0x40011000
 8004b34:	40011400 	.word	0x40011400
 8004b38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b40:	2200      	movs	r2, #0
 8004b42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b4e:	4642      	mov	r2, r8
 8004b50:	464b      	mov	r3, r9
 8004b52:	1891      	adds	r1, r2, r2
 8004b54:	6239      	str	r1, [r7, #32]
 8004b56:	415b      	adcs	r3, r3
 8004b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b5e:	4641      	mov	r1, r8
 8004b60:	1854      	adds	r4, r2, r1
 8004b62:	4649      	mov	r1, r9
 8004b64:	eb43 0501 	adc.w	r5, r3, r1
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	00eb      	lsls	r3, r5, #3
 8004b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b76:	00e2      	lsls	r2, r4, #3
 8004b78:	4614      	mov	r4, r2
 8004b7a:	461d      	mov	r5, r3
 8004b7c:	4643      	mov	r3, r8
 8004b7e:	18e3      	adds	r3, r4, r3
 8004b80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b84:	464b      	mov	r3, r9
 8004b86:	eb45 0303 	adc.w	r3, r5, r3
 8004b8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004baa:	4629      	mov	r1, r5
 8004bac:	008b      	lsls	r3, r1, #2
 8004bae:	4621      	mov	r1, r4
 8004bb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	008a      	lsls	r2, r1, #2
 8004bb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004bbc:	f7fb fb78 	bl	80002b0 <__aeabi_uldivmod>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4b60      	ldr	r3, [pc, #384]	@ (8004d48 <UART_SetConfig+0x4e4>)
 8004bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	011c      	lsls	r4, r3, #4
 8004bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004bdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004be0:	4642      	mov	r2, r8
 8004be2:	464b      	mov	r3, r9
 8004be4:	1891      	adds	r1, r2, r2
 8004be6:	61b9      	str	r1, [r7, #24]
 8004be8:	415b      	adcs	r3, r3
 8004bea:	61fb      	str	r3, [r7, #28]
 8004bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bf0:	4641      	mov	r1, r8
 8004bf2:	1851      	adds	r1, r2, r1
 8004bf4:	6139      	str	r1, [r7, #16]
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	414b      	adcs	r3, r1
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c08:	4659      	mov	r1, fp
 8004c0a:	00cb      	lsls	r3, r1, #3
 8004c0c:	4651      	mov	r1, sl
 8004c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c12:	4651      	mov	r1, sl
 8004c14:	00ca      	lsls	r2, r1, #3
 8004c16:	4610      	mov	r0, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4642      	mov	r2, r8
 8004c1e:	189b      	adds	r3, r3, r2
 8004c20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c24:	464b      	mov	r3, r9
 8004c26:	460a      	mov	r2, r1
 8004c28:	eb42 0303 	adc.w	r3, r2, r3
 8004c2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c48:	4649      	mov	r1, r9
 8004c4a:	008b      	lsls	r3, r1, #2
 8004c4c:	4641      	mov	r1, r8
 8004c4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c52:	4641      	mov	r1, r8
 8004c54:	008a      	lsls	r2, r1, #2
 8004c56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c5a:	f7fb fb29 	bl	80002b0 <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4611      	mov	r1, r2
 8004c64:	4b38      	ldr	r3, [pc, #224]	@ (8004d48 <UART_SetConfig+0x4e4>)
 8004c66:	fba3 2301 	umull	r2, r3, r3, r1
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	2264      	movs	r2, #100	@ 0x64
 8004c6e:	fb02 f303 	mul.w	r3, r2, r3
 8004c72:	1acb      	subs	r3, r1, r3
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	3332      	adds	r3, #50	@ 0x32
 8004c78:	4a33      	ldr	r2, [pc, #204]	@ (8004d48 <UART_SetConfig+0x4e4>)
 8004c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c84:	441c      	add	r4, r3
 8004c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c94:	4642      	mov	r2, r8
 8004c96:	464b      	mov	r3, r9
 8004c98:	1891      	adds	r1, r2, r2
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	415b      	adcs	r3, r3
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ca4:	4641      	mov	r1, r8
 8004ca6:	1851      	adds	r1, r2, r1
 8004ca8:	6039      	str	r1, [r7, #0]
 8004caa:	4649      	mov	r1, r9
 8004cac:	414b      	adcs	r3, r1
 8004cae:	607b      	str	r3, [r7, #4]
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cbc:	4659      	mov	r1, fp
 8004cbe:	00cb      	lsls	r3, r1, #3
 8004cc0:	4651      	mov	r1, sl
 8004cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cc6:	4651      	mov	r1, sl
 8004cc8:	00ca      	lsls	r2, r1, #3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4603      	mov	r3, r0
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	189b      	adds	r3, r3, r2
 8004cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cd6:	464b      	mov	r3, r9
 8004cd8:	460a      	mov	r2, r1
 8004cda:	eb42 0303 	adc.w	r3, r2, r3
 8004cde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cea:	667a      	str	r2, [r7, #100]	@ 0x64
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004cf8:	4649      	mov	r1, r9
 8004cfa:	008b      	lsls	r3, r1, #2
 8004cfc:	4641      	mov	r1, r8
 8004cfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d02:	4641      	mov	r1, r8
 8004d04:	008a      	lsls	r2, r1, #2
 8004d06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d0a:	f7fb fad1 	bl	80002b0 <__aeabi_uldivmod>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4b0d      	ldr	r3, [pc, #52]	@ (8004d48 <UART_SetConfig+0x4e4>)
 8004d14:	fba3 1302 	umull	r1, r3, r3, r2
 8004d18:	095b      	lsrs	r3, r3, #5
 8004d1a:	2164      	movs	r1, #100	@ 0x64
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	3332      	adds	r3, #50	@ 0x32
 8004d26:	4a08      	ldr	r2, [pc, #32]	@ (8004d48 <UART_SetConfig+0x4e4>)
 8004d28:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	f003 020f 	and.w	r2, r3, #15
 8004d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4422      	add	r2, r4
 8004d3a:	609a      	str	r2, [r3, #8]
}
 8004d3c:	bf00      	nop
 8004d3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d42:	46bd      	mov	sp, r7
 8004d44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d48:	51eb851f 	.word	0x51eb851f

08004d4c <atoi>:
 8004d4c:	220a      	movs	r2, #10
 8004d4e:	2100      	movs	r1, #0
 8004d50:	f000 b87a 	b.w	8004e48 <strtol>

08004d54 <_strtol_l.isra.0>:
 8004d54:	2b24      	cmp	r3, #36	@ 0x24
 8004d56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d5a:	4686      	mov	lr, r0
 8004d5c:	4690      	mov	r8, r2
 8004d5e:	d801      	bhi.n	8004d64 <_strtol_l.isra.0+0x10>
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d106      	bne.n	8004d72 <_strtol_l.isra.0+0x1e>
 8004d64:	f000 fb8e 	bl	8005484 <__errno>
 8004d68:	2316      	movs	r3, #22
 8004d6a:	6003      	str	r3, [r0, #0]
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d72:	4834      	ldr	r0, [pc, #208]	@ (8004e44 <_strtol_l.isra.0+0xf0>)
 8004d74:	460d      	mov	r5, r1
 8004d76:	462a      	mov	r2, r5
 8004d78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d7c:	5d06      	ldrb	r6, [r0, r4]
 8004d7e:	f016 0608 	ands.w	r6, r6, #8
 8004d82:	d1f8      	bne.n	8004d76 <_strtol_l.isra.0+0x22>
 8004d84:	2c2d      	cmp	r4, #45	@ 0x2d
 8004d86:	d110      	bne.n	8004daa <_strtol_l.isra.0+0x56>
 8004d88:	782c      	ldrb	r4, [r5, #0]
 8004d8a:	2601      	movs	r6, #1
 8004d8c:	1c95      	adds	r5, r2, #2
 8004d8e:	f033 0210 	bics.w	r2, r3, #16
 8004d92:	d115      	bne.n	8004dc0 <_strtol_l.isra.0+0x6c>
 8004d94:	2c30      	cmp	r4, #48	@ 0x30
 8004d96:	d10d      	bne.n	8004db4 <_strtol_l.isra.0+0x60>
 8004d98:	782a      	ldrb	r2, [r5, #0]
 8004d9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004d9e:	2a58      	cmp	r2, #88	@ 0x58
 8004da0:	d108      	bne.n	8004db4 <_strtol_l.isra.0+0x60>
 8004da2:	786c      	ldrb	r4, [r5, #1]
 8004da4:	3502      	adds	r5, #2
 8004da6:	2310      	movs	r3, #16
 8004da8:	e00a      	b.n	8004dc0 <_strtol_l.isra.0+0x6c>
 8004daa:	2c2b      	cmp	r4, #43	@ 0x2b
 8004dac:	bf04      	itt	eq
 8004dae:	782c      	ldrbeq	r4, [r5, #0]
 8004db0:	1c95      	addeq	r5, r2, #2
 8004db2:	e7ec      	b.n	8004d8e <_strtol_l.isra.0+0x3a>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1f6      	bne.n	8004da6 <_strtol_l.isra.0+0x52>
 8004db8:	2c30      	cmp	r4, #48	@ 0x30
 8004dba:	bf14      	ite	ne
 8004dbc:	230a      	movne	r3, #10
 8004dbe:	2308      	moveq	r3, #8
 8004dc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004dc4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004dc8:	2200      	movs	r2, #0
 8004dca:	fbbc f9f3 	udiv	r9, ip, r3
 8004dce:	4610      	mov	r0, r2
 8004dd0:	fb03 ca19 	mls	sl, r3, r9, ip
 8004dd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004dd8:	2f09      	cmp	r7, #9
 8004dda:	d80f      	bhi.n	8004dfc <_strtol_l.isra.0+0xa8>
 8004ddc:	463c      	mov	r4, r7
 8004dde:	42a3      	cmp	r3, r4
 8004de0:	dd1b      	ble.n	8004e1a <_strtol_l.isra.0+0xc6>
 8004de2:	1c57      	adds	r7, r2, #1
 8004de4:	d007      	beq.n	8004df6 <_strtol_l.isra.0+0xa2>
 8004de6:	4581      	cmp	r9, r0
 8004de8:	d314      	bcc.n	8004e14 <_strtol_l.isra.0+0xc0>
 8004dea:	d101      	bne.n	8004df0 <_strtol_l.isra.0+0x9c>
 8004dec:	45a2      	cmp	sl, r4
 8004dee:	db11      	blt.n	8004e14 <_strtol_l.isra.0+0xc0>
 8004df0:	fb00 4003 	mla	r0, r0, r3, r4
 8004df4:	2201      	movs	r2, #1
 8004df6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004dfa:	e7eb      	b.n	8004dd4 <_strtol_l.isra.0+0x80>
 8004dfc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004e00:	2f19      	cmp	r7, #25
 8004e02:	d801      	bhi.n	8004e08 <_strtol_l.isra.0+0xb4>
 8004e04:	3c37      	subs	r4, #55	@ 0x37
 8004e06:	e7ea      	b.n	8004dde <_strtol_l.isra.0+0x8a>
 8004e08:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004e0c:	2f19      	cmp	r7, #25
 8004e0e:	d804      	bhi.n	8004e1a <_strtol_l.isra.0+0xc6>
 8004e10:	3c57      	subs	r4, #87	@ 0x57
 8004e12:	e7e4      	b.n	8004dde <_strtol_l.isra.0+0x8a>
 8004e14:	f04f 32ff 	mov.w	r2, #4294967295
 8004e18:	e7ed      	b.n	8004df6 <_strtol_l.isra.0+0xa2>
 8004e1a:	1c53      	adds	r3, r2, #1
 8004e1c:	d108      	bne.n	8004e30 <_strtol_l.isra.0+0xdc>
 8004e1e:	2322      	movs	r3, #34	@ 0x22
 8004e20:	f8ce 3000 	str.w	r3, [lr]
 8004e24:	4660      	mov	r0, ip
 8004e26:	f1b8 0f00 	cmp.w	r8, #0
 8004e2a:	d0a0      	beq.n	8004d6e <_strtol_l.isra.0+0x1a>
 8004e2c:	1e69      	subs	r1, r5, #1
 8004e2e:	e006      	b.n	8004e3e <_strtol_l.isra.0+0xea>
 8004e30:	b106      	cbz	r6, 8004e34 <_strtol_l.isra.0+0xe0>
 8004e32:	4240      	negs	r0, r0
 8004e34:	f1b8 0f00 	cmp.w	r8, #0
 8004e38:	d099      	beq.n	8004d6e <_strtol_l.isra.0+0x1a>
 8004e3a:	2a00      	cmp	r2, #0
 8004e3c:	d1f6      	bne.n	8004e2c <_strtol_l.isra.0+0xd8>
 8004e3e:	f8c8 1000 	str.w	r1, [r8]
 8004e42:	e794      	b.n	8004d6e <_strtol_l.isra.0+0x1a>
 8004e44:	0800672d 	.word	0x0800672d

08004e48 <strtol>:
 8004e48:	4613      	mov	r3, r2
 8004e4a:	460a      	mov	r2, r1
 8004e4c:	4601      	mov	r1, r0
 8004e4e:	4802      	ldr	r0, [pc, #8]	@ (8004e58 <strtol+0x10>)
 8004e50:	6800      	ldr	r0, [r0, #0]
 8004e52:	f7ff bf7f 	b.w	8004d54 <_strtol_l.isra.0>
 8004e56:	bf00      	nop
 8004e58:	2000001c 	.word	0x2000001c

08004e5c <std>:
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	b510      	push	{r4, lr}
 8004e60:	4604      	mov	r4, r0
 8004e62:	e9c0 3300 	strd	r3, r3, [r0]
 8004e66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e6a:	6083      	str	r3, [r0, #8]
 8004e6c:	8181      	strh	r1, [r0, #12]
 8004e6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e70:	81c2      	strh	r2, [r0, #14]
 8004e72:	6183      	str	r3, [r0, #24]
 8004e74:	4619      	mov	r1, r3
 8004e76:	2208      	movs	r2, #8
 8004e78:	305c      	adds	r0, #92	@ 0x5c
 8004e7a:	f000 fa23 	bl	80052c4 <memset>
 8004e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb4 <std+0x58>)
 8004e80:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e82:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb8 <std+0x5c>)
 8004e84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e86:	4b0d      	ldr	r3, [pc, #52]	@ (8004ebc <std+0x60>)
 8004e88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec0 <std+0x64>)
 8004e8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <std+0x68>)
 8004e90:	6224      	str	r4, [r4, #32]
 8004e92:	429c      	cmp	r4, r3
 8004e94:	d006      	beq.n	8004ea4 <std+0x48>
 8004e96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e9a:	4294      	cmp	r4, r2
 8004e9c:	d002      	beq.n	8004ea4 <std+0x48>
 8004e9e:	33d0      	adds	r3, #208	@ 0xd0
 8004ea0:	429c      	cmp	r4, r3
 8004ea2:	d105      	bne.n	8004eb0 <std+0x54>
 8004ea4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eac:	f000 bb14 	b.w	80054d8 <__retarget_lock_init_recursive>
 8004eb0:	bd10      	pop	{r4, pc}
 8004eb2:	bf00      	nop
 8004eb4:	08005115 	.word	0x08005115
 8004eb8:	08005137 	.word	0x08005137
 8004ebc:	0800516f 	.word	0x0800516f
 8004ec0:	08005193 	.word	0x08005193
 8004ec4:	20000a4c 	.word	0x20000a4c

08004ec8 <stdio_exit_handler>:
 8004ec8:	4a02      	ldr	r2, [pc, #8]	@ (8004ed4 <stdio_exit_handler+0xc>)
 8004eca:	4903      	ldr	r1, [pc, #12]	@ (8004ed8 <stdio_exit_handler+0x10>)
 8004ecc:	4803      	ldr	r0, [pc, #12]	@ (8004edc <stdio_exit_handler+0x14>)
 8004ece:	f000 b869 	b.w	8004fa4 <_fwalk_sglue>
 8004ed2:	bf00      	nop
 8004ed4:	20000010 	.word	0x20000010
 8004ed8:	0800609d 	.word	0x0800609d
 8004edc:	20000020 	.word	0x20000020

08004ee0 <cleanup_stdio>:
 8004ee0:	6841      	ldr	r1, [r0, #4]
 8004ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8004f14 <cleanup_stdio+0x34>)
 8004ee4:	4299      	cmp	r1, r3
 8004ee6:	b510      	push	{r4, lr}
 8004ee8:	4604      	mov	r4, r0
 8004eea:	d001      	beq.n	8004ef0 <cleanup_stdio+0x10>
 8004eec:	f001 f8d6 	bl	800609c <_fflush_r>
 8004ef0:	68a1      	ldr	r1, [r4, #8]
 8004ef2:	4b09      	ldr	r3, [pc, #36]	@ (8004f18 <cleanup_stdio+0x38>)
 8004ef4:	4299      	cmp	r1, r3
 8004ef6:	d002      	beq.n	8004efe <cleanup_stdio+0x1e>
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f001 f8cf 	bl	800609c <_fflush_r>
 8004efe:	68e1      	ldr	r1, [r4, #12]
 8004f00:	4b06      	ldr	r3, [pc, #24]	@ (8004f1c <cleanup_stdio+0x3c>)
 8004f02:	4299      	cmp	r1, r3
 8004f04:	d004      	beq.n	8004f10 <cleanup_stdio+0x30>
 8004f06:	4620      	mov	r0, r4
 8004f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f0c:	f001 b8c6 	b.w	800609c <_fflush_r>
 8004f10:	bd10      	pop	{r4, pc}
 8004f12:	bf00      	nop
 8004f14:	20000a4c 	.word	0x20000a4c
 8004f18:	20000ab4 	.word	0x20000ab4
 8004f1c:	20000b1c 	.word	0x20000b1c

08004f20 <global_stdio_init.part.0>:
 8004f20:	b510      	push	{r4, lr}
 8004f22:	4b0b      	ldr	r3, [pc, #44]	@ (8004f50 <global_stdio_init.part.0+0x30>)
 8004f24:	4c0b      	ldr	r4, [pc, #44]	@ (8004f54 <global_stdio_init.part.0+0x34>)
 8004f26:	4a0c      	ldr	r2, [pc, #48]	@ (8004f58 <global_stdio_init.part.0+0x38>)
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2104      	movs	r1, #4
 8004f30:	f7ff ff94 	bl	8004e5c <std>
 8004f34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f38:	2201      	movs	r2, #1
 8004f3a:	2109      	movs	r1, #9
 8004f3c:	f7ff ff8e 	bl	8004e5c <std>
 8004f40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f44:	2202      	movs	r2, #2
 8004f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f4a:	2112      	movs	r1, #18
 8004f4c:	f7ff bf86 	b.w	8004e5c <std>
 8004f50:	20000b84 	.word	0x20000b84
 8004f54:	20000a4c 	.word	0x20000a4c
 8004f58:	08004ec9 	.word	0x08004ec9

08004f5c <__sfp_lock_acquire>:
 8004f5c:	4801      	ldr	r0, [pc, #4]	@ (8004f64 <__sfp_lock_acquire+0x8>)
 8004f5e:	f000 babc 	b.w	80054da <__retarget_lock_acquire_recursive>
 8004f62:	bf00      	nop
 8004f64:	20000b8d 	.word	0x20000b8d

08004f68 <__sfp_lock_release>:
 8004f68:	4801      	ldr	r0, [pc, #4]	@ (8004f70 <__sfp_lock_release+0x8>)
 8004f6a:	f000 bab7 	b.w	80054dc <__retarget_lock_release_recursive>
 8004f6e:	bf00      	nop
 8004f70:	20000b8d 	.word	0x20000b8d

08004f74 <__sinit>:
 8004f74:	b510      	push	{r4, lr}
 8004f76:	4604      	mov	r4, r0
 8004f78:	f7ff fff0 	bl	8004f5c <__sfp_lock_acquire>
 8004f7c:	6a23      	ldr	r3, [r4, #32]
 8004f7e:	b11b      	cbz	r3, 8004f88 <__sinit+0x14>
 8004f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f84:	f7ff bff0 	b.w	8004f68 <__sfp_lock_release>
 8004f88:	4b04      	ldr	r3, [pc, #16]	@ (8004f9c <__sinit+0x28>)
 8004f8a:	6223      	str	r3, [r4, #32]
 8004f8c:	4b04      	ldr	r3, [pc, #16]	@ (8004fa0 <__sinit+0x2c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f5      	bne.n	8004f80 <__sinit+0xc>
 8004f94:	f7ff ffc4 	bl	8004f20 <global_stdio_init.part.0>
 8004f98:	e7f2      	b.n	8004f80 <__sinit+0xc>
 8004f9a:	bf00      	nop
 8004f9c:	08004ee1 	.word	0x08004ee1
 8004fa0:	20000b84 	.word	0x20000b84

08004fa4 <_fwalk_sglue>:
 8004fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fa8:	4607      	mov	r7, r0
 8004faa:	4688      	mov	r8, r1
 8004fac:	4614      	mov	r4, r2
 8004fae:	2600      	movs	r6, #0
 8004fb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fb4:	f1b9 0901 	subs.w	r9, r9, #1
 8004fb8:	d505      	bpl.n	8004fc6 <_fwalk_sglue+0x22>
 8004fba:	6824      	ldr	r4, [r4, #0]
 8004fbc:	2c00      	cmp	r4, #0
 8004fbe:	d1f7      	bne.n	8004fb0 <_fwalk_sglue+0xc>
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fc6:	89ab      	ldrh	r3, [r5, #12]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d907      	bls.n	8004fdc <_fwalk_sglue+0x38>
 8004fcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	d003      	beq.n	8004fdc <_fwalk_sglue+0x38>
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	47c0      	blx	r8
 8004fda:	4306      	orrs	r6, r0
 8004fdc:	3568      	adds	r5, #104	@ 0x68
 8004fde:	e7e9      	b.n	8004fb4 <_fwalk_sglue+0x10>

08004fe0 <iprintf>:
 8004fe0:	b40f      	push	{r0, r1, r2, r3}
 8004fe2:	b507      	push	{r0, r1, r2, lr}
 8004fe4:	4906      	ldr	r1, [pc, #24]	@ (8005000 <iprintf+0x20>)
 8004fe6:	ab04      	add	r3, sp, #16
 8004fe8:	6808      	ldr	r0, [r1, #0]
 8004fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fee:	6881      	ldr	r1, [r0, #8]
 8004ff0:	9301      	str	r3, [sp, #4]
 8004ff2:	f000 fd2b 	bl	8005a4c <_vfiprintf_r>
 8004ff6:	b003      	add	sp, #12
 8004ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ffc:	b004      	add	sp, #16
 8004ffe:	4770      	bx	lr
 8005000:	2000001c 	.word	0x2000001c

08005004 <putchar>:
 8005004:	4b02      	ldr	r3, [pc, #8]	@ (8005010 <putchar+0xc>)
 8005006:	4601      	mov	r1, r0
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	6882      	ldr	r2, [r0, #8]
 800500c:	f001 b8e2 	b.w	80061d4 <_putc_r>
 8005010:	2000001c 	.word	0x2000001c

08005014 <_puts_r>:
 8005014:	6a03      	ldr	r3, [r0, #32]
 8005016:	b570      	push	{r4, r5, r6, lr}
 8005018:	6884      	ldr	r4, [r0, #8]
 800501a:	4605      	mov	r5, r0
 800501c:	460e      	mov	r6, r1
 800501e:	b90b      	cbnz	r3, 8005024 <_puts_r+0x10>
 8005020:	f7ff ffa8 	bl	8004f74 <__sinit>
 8005024:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005026:	07db      	lsls	r3, r3, #31
 8005028:	d405      	bmi.n	8005036 <_puts_r+0x22>
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	0598      	lsls	r0, r3, #22
 800502e:	d402      	bmi.n	8005036 <_puts_r+0x22>
 8005030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005032:	f000 fa52 	bl	80054da <__retarget_lock_acquire_recursive>
 8005036:	89a3      	ldrh	r3, [r4, #12]
 8005038:	0719      	lsls	r1, r3, #28
 800503a:	d502      	bpl.n	8005042 <_puts_r+0x2e>
 800503c:	6923      	ldr	r3, [r4, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d135      	bne.n	80050ae <_puts_r+0x9a>
 8005042:	4621      	mov	r1, r4
 8005044:	4628      	mov	r0, r5
 8005046:	f000 f8e7 	bl	8005218 <__swsetup_r>
 800504a:	b380      	cbz	r0, 80050ae <_puts_r+0x9a>
 800504c:	f04f 35ff 	mov.w	r5, #4294967295
 8005050:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005052:	07da      	lsls	r2, r3, #31
 8005054:	d405      	bmi.n	8005062 <_puts_r+0x4e>
 8005056:	89a3      	ldrh	r3, [r4, #12]
 8005058:	059b      	lsls	r3, r3, #22
 800505a:	d402      	bmi.n	8005062 <_puts_r+0x4e>
 800505c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800505e:	f000 fa3d 	bl	80054dc <__retarget_lock_release_recursive>
 8005062:	4628      	mov	r0, r5
 8005064:	bd70      	pop	{r4, r5, r6, pc}
 8005066:	2b00      	cmp	r3, #0
 8005068:	da04      	bge.n	8005074 <_puts_r+0x60>
 800506a:	69a2      	ldr	r2, [r4, #24]
 800506c:	429a      	cmp	r2, r3
 800506e:	dc17      	bgt.n	80050a0 <_puts_r+0x8c>
 8005070:	290a      	cmp	r1, #10
 8005072:	d015      	beq.n	80050a0 <_puts_r+0x8c>
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	6022      	str	r2, [r4, #0]
 800507a:	7019      	strb	r1, [r3, #0]
 800507c:	68a3      	ldr	r3, [r4, #8]
 800507e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005082:	3b01      	subs	r3, #1
 8005084:	60a3      	str	r3, [r4, #8]
 8005086:	2900      	cmp	r1, #0
 8005088:	d1ed      	bne.n	8005066 <_puts_r+0x52>
 800508a:	2b00      	cmp	r3, #0
 800508c:	da11      	bge.n	80050b2 <_puts_r+0x9e>
 800508e:	4622      	mov	r2, r4
 8005090:	210a      	movs	r1, #10
 8005092:	4628      	mov	r0, r5
 8005094:	f000 f881 	bl	800519a <__swbuf_r>
 8005098:	3001      	adds	r0, #1
 800509a:	d0d7      	beq.n	800504c <_puts_r+0x38>
 800509c:	250a      	movs	r5, #10
 800509e:	e7d7      	b.n	8005050 <_puts_r+0x3c>
 80050a0:	4622      	mov	r2, r4
 80050a2:	4628      	mov	r0, r5
 80050a4:	f000 f879 	bl	800519a <__swbuf_r>
 80050a8:	3001      	adds	r0, #1
 80050aa:	d1e7      	bne.n	800507c <_puts_r+0x68>
 80050ac:	e7ce      	b.n	800504c <_puts_r+0x38>
 80050ae:	3e01      	subs	r6, #1
 80050b0:	e7e4      	b.n	800507c <_puts_r+0x68>
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	6022      	str	r2, [r4, #0]
 80050b8:	220a      	movs	r2, #10
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	e7ee      	b.n	800509c <_puts_r+0x88>
	...

080050c0 <puts>:
 80050c0:	4b02      	ldr	r3, [pc, #8]	@ (80050cc <puts+0xc>)
 80050c2:	4601      	mov	r1, r0
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	f7ff bfa5 	b.w	8005014 <_puts_r>
 80050ca:	bf00      	nop
 80050cc:	2000001c 	.word	0x2000001c

080050d0 <siprintf>:
 80050d0:	b40e      	push	{r1, r2, r3}
 80050d2:	b510      	push	{r4, lr}
 80050d4:	b09d      	sub	sp, #116	@ 0x74
 80050d6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80050d8:	9002      	str	r0, [sp, #8]
 80050da:	9006      	str	r0, [sp, #24]
 80050dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80050e0:	480a      	ldr	r0, [pc, #40]	@ (800510c <siprintf+0x3c>)
 80050e2:	9107      	str	r1, [sp, #28]
 80050e4:	9104      	str	r1, [sp, #16]
 80050e6:	490a      	ldr	r1, [pc, #40]	@ (8005110 <siprintf+0x40>)
 80050e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80050ec:	9105      	str	r1, [sp, #20]
 80050ee:	2400      	movs	r4, #0
 80050f0:	a902      	add	r1, sp, #8
 80050f2:	6800      	ldr	r0, [r0, #0]
 80050f4:	9301      	str	r3, [sp, #4]
 80050f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80050f8:	f000 fb82 	bl	8005800 <_svfiprintf_r>
 80050fc:	9b02      	ldr	r3, [sp, #8]
 80050fe:	701c      	strb	r4, [r3, #0]
 8005100:	b01d      	add	sp, #116	@ 0x74
 8005102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005106:	b003      	add	sp, #12
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	2000001c 	.word	0x2000001c
 8005110:	ffff0208 	.word	0xffff0208

08005114 <__sread>:
 8005114:	b510      	push	{r4, lr}
 8005116:	460c      	mov	r4, r1
 8005118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800511c:	f000 f98e 	bl	800543c <_read_r>
 8005120:	2800      	cmp	r0, #0
 8005122:	bfab      	itete	ge
 8005124:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005126:	89a3      	ldrhlt	r3, [r4, #12]
 8005128:	181b      	addge	r3, r3, r0
 800512a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800512e:	bfac      	ite	ge
 8005130:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005132:	81a3      	strhlt	r3, [r4, #12]
 8005134:	bd10      	pop	{r4, pc}

08005136 <__swrite>:
 8005136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800513a:	461f      	mov	r7, r3
 800513c:	898b      	ldrh	r3, [r1, #12]
 800513e:	05db      	lsls	r3, r3, #23
 8005140:	4605      	mov	r5, r0
 8005142:	460c      	mov	r4, r1
 8005144:	4616      	mov	r6, r2
 8005146:	d505      	bpl.n	8005154 <__swrite+0x1e>
 8005148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800514c:	2302      	movs	r3, #2
 800514e:	2200      	movs	r2, #0
 8005150:	f000 f962 	bl	8005418 <_lseek_r>
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800515a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800515e:	81a3      	strh	r3, [r4, #12]
 8005160:	4632      	mov	r2, r6
 8005162:	463b      	mov	r3, r7
 8005164:	4628      	mov	r0, r5
 8005166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800516a:	f000 b979 	b.w	8005460 <_write_r>

0800516e <__sseek>:
 800516e:	b510      	push	{r4, lr}
 8005170:	460c      	mov	r4, r1
 8005172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005176:	f000 f94f 	bl	8005418 <_lseek_r>
 800517a:	1c43      	adds	r3, r0, #1
 800517c:	89a3      	ldrh	r3, [r4, #12]
 800517e:	bf15      	itete	ne
 8005180:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005182:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005186:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800518a:	81a3      	strheq	r3, [r4, #12]
 800518c:	bf18      	it	ne
 800518e:	81a3      	strhne	r3, [r4, #12]
 8005190:	bd10      	pop	{r4, pc}

08005192 <__sclose>:
 8005192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005196:	f000 b92f 	b.w	80053f8 <_close_r>

0800519a <__swbuf_r>:
 800519a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519c:	460e      	mov	r6, r1
 800519e:	4614      	mov	r4, r2
 80051a0:	4605      	mov	r5, r0
 80051a2:	b118      	cbz	r0, 80051ac <__swbuf_r+0x12>
 80051a4:	6a03      	ldr	r3, [r0, #32]
 80051a6:	b90b      	cbnz	r3, 80051ac <__swbuf_r+0x12>
 80051a8:	f7ff fee4 	bl	8004f74 <__sinit>
 80051ac:	69a3      	ldr	r3, [r4, #24]
 80051ae:	60a3      	str	r3, [r4, #8]
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	071a      	lsls	r2, r3, #28
 80051b4:	d501      	bpl.n	80051ba <__swbuf_r+0x20>
 80051b6:	6923      	ldr	r3, [r4, #16]
 80051b8:	b943      	cbnz	r3, 80051cc <__swbuf_r+0x32>
 80051ba:	4621      	mov	r1, r4
 80051bc:	4628      	mov	r0, r5
 80051be:	f000 f82b 	bl	8005218 <__swsetup_r>
 80051c2:	b118      	cbz	r0, 80051cc <__swbuf_r+0x32>
 80051c4:	f04f 37ff 	mov.w	r7, #4294967295
 80051c8:	4638      	mov	r0, r7
 80051ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	6922      	ldr	r2, [r4, #16]
 80051d0:	1a98      	subs	r0, r3, r2
 80051d2:	6963      	ldr	r3, [r4, #20]
 80051d4:	b2f6      	uxtb	r6, r6
 80051d6:	4283      	cmp	r3, r0
 80051d8:	4637      	mov	r7, r6
 80051da:	dc05      	bgt.n	80051e8 <__swbuf_r+0x4e>
 80051dc:	4621      	mov	r1, r4
 80051de:	4628      	mov	r0, r5
 80051e0:	f000 ff5c 	bl	800609c <_fflush_r>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d1ed      	bne.n	80051c4 <__swbuf_r+0x2a>
 80051e8:	68a3      	ldr	r3, [r4, #8]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	60a3      	str	r3, [r4, #8]
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	6022      	str	r2, [r4, #0]
 80051f4:	701e      	strb	r6, [r3, #0]
 80051f6:	6962      	ldr	r2, [r4, #20]
 80051f8:	1c43      	adds	r3, r0, #1
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d004      	beq.n	8005208 <__swbuf_r+0x6e>
 80051fe:	89a3      	ldrh	r3, [r4, #12]
 8005200:	07db      	lsls	r3, r3, #31
 8005202:	d5e1      	bpl.n	80051c8 <__swbuf_r+0x2e>
 8005204:	2e0a      	cmp	r6, #10
 8005206:	d1df      	bne.n	80051c8 <__swbuf_r+0x2e>
 8005208:	4621      	mov	r1, r4
 800520a:	4628      	mov	r0, r5
 800520c:	f000 ff46 	bl	800609c <_fflush_r>
 8005210:	2800      	cmp	r0, #0
 8005212:	d0d9      	beq.n	80051c8 <__swbuf_r+0x2e>
 8005214:	e7d6      	b.n	80051c4 <__swbuf_r+0x2a>
	...

08005218 <__swsetup_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4b29      	ldr	r3, [pc, #164]	@ (80052c0 <__swsetup_r+0xa8>)
 800521c:	4605      	mov	r5, r0
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	460c      	mov	r4, r1
 8005222:	b118      	cbz	r0, 800522c <__swsetup_r+0x14>
 8005224:	6a03      	ldr	r3, [r0, #32]
 8005226:	b90b      	cbnz	r3, 800522c <__swsetup_r+0x14>
 8005228:	f7ff fea4 	bl	8004f74 <__sinit>
 800522c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005230:	0719      	lsls	r1, r3, #28
 8005232:	d422      	bmi.n	800527a <__swsetup_r+0x62>
 8005234:	06da      	lsls	r2, r3, #27
 8005236:	d407      	bmi.n	8005248 <__swsetup_r+0x30>
 8005238:	2209      	movs	r2, #9
 800523a:	602a      	str	r2, [r5, #0]
 800523c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005240:	81a3      	strh	r3, [r4, #12]
 8005242:	f04f 30ff 	mov.w	r0, #4294967295
 8005246:	e033      	b.n	80052b0 <__swsetup_r+0x98>
 8005248:	0758      	lsls	r0, r3, #29
 800524a:	d512      	bpl.n	8005272 <__swsetup_r+0x5a>
 800524c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800524e:	b141      	cbz	r1, 8005262 <__swsetup_r+0x4a>
 8005250:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005254:	4299      	cmp	r1, r3
 8005256:	d002      	beq.n	800525e <__swsetup_r+0x46>
 8005258:	4628      	mov	r0, r5
 800525a:	f000 f975 	bl	8005548 <_free_r>
 800525e:	2300      	movs	r3, #0
 8005260:	6363      	str	r3, [r4, #52]	@ 0x34
 8005262:	89a3      	ldrh	r3, [r4, #12]
 8005264:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005268:	81a3      	strh	r3, [r4, #12]
 800526a:	2300      	movs	r3, #0
 800526c:	6063      	str	r3, [r4, #4]
 800526e:	6923      	ldr	r3, [r4, #16]
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	f043 0308 	orr.w	r3, r3, #8
 8005278:	81a3      	strh	r3, [r4, #12]
 800527a:	6923      	ldr	r3, [r4, #16]
 800527c:	b94b      	cbnz	r3, 8005292 <__swsetup_r+0x7a>
 800527e:	89a3      	ldrh	r3, [r4, #12]
 8005280:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005288:	d003      	beq.n	8005292 <__swsetup_r+0x7a>
 800528a:	4621      	mov	r1, r4
 800528c:	4628      	mov	r0, r5
 800528e:	f000 ff65 	bl	800615c <__smakebuf_r>
 8005292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005296:	f013 0201 	ands.w	r2, r3, #1
 800529a:	d00a      	beq.n	80052b2 <__swsetup_r+0x9a>
 800529c:	2200      	movs	r2, #0
 800529e:	60a2      	str	r2, [r4, #8]
 80052a0:	6962      	ldr	r2, [r4, #20]
 80052a2:	4252      	negs	r2, r2
 80052a4:	61a2      	str	r2, [r4, #24]
 80052a6:	6922      	ldr	r2, [r4, #16]
 80052a8:	b942      	cbnz	r2, 80052bc <__swsetup_r+0xa4>
 80052aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80052ae:	d1c5      	bne.n	800523c <__swsetup_r+0x24>
 80052b0:	bd38      	pop	{r3, r4, r5, pc}
 80052b2:	0799      	lsls	r1, r3, #30
 80052b4:	bf58      	it	pl
 80052b6:	6962      	ldrpl	r2, [r4, #20]
 80052b8:	60a2      	str	r2, [r4, #8]
 80052ba:	e7f4      	b.n	80052a6 <__swsetup_r+0x8e>
 80052bc:	2000      	movs	r0, #0
 80052be:	e7f7      	b.n	80052b0 <__swsetup_r+0x98>
 80052c0:	2000001c 	.word	0x2000001c

080052c4 <memset>:
 80052c4:	4402      	add	r2, r0
 80052c6:	4603      	mov	r3, r0
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d100      	bne.n	80052ce <memset+0xa>
 80052cc:	4770      	bx	lr
 80052ce:	f803 1b01 	strb.w	r1, [r3], #1
 80052d2:	e7f9      	b.n	80052c8 <memset+0x4>

080052d4 <strchr>:
 80052d4:	b2c9      	uxtb	r1, r1
 80052d6:	4603      	mov	r3, r0
 80052d8:	4618      	mov	r0, r3
 80052da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052de:	b112      	cbz	r2, 80052e6 <strchr+0x12>
 80052e0:	428a      	cmp	r2, r1
 80052e2:	d1f9      	bne.n	80052d8 <strchr+0x4>
 80052e4:	4770      	bx	lr
 80052e6:	2900      	cmp	r1, #0
 80052e8:	bf18      	it	ne
 80052ea:	2000      	movne	r0, #0
 80052ec:	4770      	bx	lr

080052ee <strncmp>:
 80052ee:	b510      	push	{r4, lr}
 80052f0:	b16a      	cbz	r2, 800530e <strncmp+0x20>
 80052f2:	3901      	subs	r1, #1
 80052f4:	1884      	adds	r4, r0, r2
 80052f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052fa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80052fe:	429a      	cmp	r2, r3
 8005300:	d103      	bne.n	800530a <strncmp+0x1c>
 8005302:	42a0      	cmp	r0, r4
 8005304:	d001      	beq.n	800530a <strncmp+0x1c>
 8005306:	2a00      	cmp	r2, #0
 8005308:	d1f5      	bne.n	80052f6 <strncmp+0x8>
 800530a:	1ad0      	subs	r0, r2, r3
 800530c:	bd10      	pop	{r4, pc}
 800530e:	4610      	mov	r0, r2
 8005310:	e7fc      	b.n	800530c <strncmp+0x1e>
	...

08005314 <strtok>:
 8005314:	4b16      	ldr	r3, [pc, #88]	@ (8005370 <strtok+0x5c>)
 8005316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800531a:	681f      	ldr	r7, [r3, #0]
 800531c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800531e:	4605      	mov	r5, r0
 8005320:	460e      	mov	r6, r1
 8005322:	b9ec      	cbnz	r4, 8005360 <strtok+0x4c>
 8005324:	2050      	movs	r0, #80	@ 0x50
 8005326:	f000 f959 	bl	80055dc <malloc>
 800532a:	4602      	mov	r2, r0
 800532c:	6478      	str	r0, [r7, #68]	@ 0x44
 800532e:	b920      	cbnz	r0, 800533a <strtok+0x26>
 8005330:	4b10      	ldr	r3, [pc, #64]	@ (8005374 <strtok+0x60>)
 8005332:	4811      	ldr	r0, [pc, #68]	@ (8005378 <strtok+0x64>)
 8005334:	215b      	movs	r1, #91	@ 0x5b
 8005336:	f000 f8e9 	bl	800550c <__assert_func>
 800533a:	e9c0 4400 	strd	r4, r4, [r0]
 800533e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005342:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005346:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800534a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800534e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8005352:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8005356:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800535a:	6184      	str	r4, [r0, #24]
 800535c:	7704      	strb	r4, [r0, #28]
 800535e:	6244      	str	r4, [r0, #36]	@ 0x24
 8005360:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005362:	4631      	mov	r1, r6
 8005364:	4628      	mov	r0, r5
 8005366:	2301      	movs	r3, #1
 8005368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800536c:	f000 b806 	b.w	800537c <__strtok_r>
 8005370:	2000001c 	.word	0x2000001c
 8005374:	0800682d 	.word	0x0800682d
 8005378:	08006844 	.word	0x08006844

0800537c <__strtok_r>:
 800537c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800537e:	4604      	mov	r4, r0
 8005380:	b908      	cbnz	r0, 8005386 <__strtok_r+0xa>
 8005382:	6814      	ldr	r4, [r2, #0]
 8005384:	b144      	cbz	r4, 8005398 <__strtok_r+0x1c>
 8005386:	4620      	mov	r0, r4
 8005388:	f814 5b01 	ldrb.w	r5, [r4], #1
 800538c:	460f      	mov	r7, r1
 800538e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005392:	b91e      	cbnz	r6, 800539c <__strtok_r+0x20>
 8005394:	b965      	cbnz	r5, 80053b0 <__strtok_r+0x34>
 8005396:	6015      	str	r5, [r2, #0]
 8005398:	2000      	movs	r0, #0
 800539a:	e005      	b.n	80053a8 <__strtok_r+0x2c>
 800539c:	42b5      	cmp	r5, r6
 800539e:	d1f6      	bne.n	800538e <__strtok_r+0x12>
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1f0      	bne.n	8005386 <__strtok_r+0xa>
 80053a4:	6014      	str	r4, [r2, #0]
 80053a6:	7003      	strb	r3, [r0, #0]
 80053a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053aa:	461c      	mov	r4, r3
 80053ac:	e00c      	b.n	80053c8 <__strtok_r+0x4c>
 80053ae:	b91d      	cbnz	r5, 80053b8 <__strtok_r+0x3c>
 80053b0:	4627      	mov	r7, r4
 80053b2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80053b6:	460e      	mov	r6, r1
 80053b8:	f816 5b01 	ldrb.w	r5, [r6], #1
 80053bc:	42ab      	cmp	r3, r5
 80053be:	d1f6      	bne.n	80053ae <__strtok_r+0x32>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0f2      	beq.n	80053aa <__strtok_r+0x2e>
 80053c4:	2300      	movs	r3, #0
 80053c6:	703b      	strb	r3, [r7, #0]
 80053c8:	6014      	str	r4, [r2, #0]
 80053ca:	e7ed      	b.n	80053a8 <__strtok_r+0x2c>

080053cc <strstr>:
 80053cc:	780a      	ldrb	r2, [r1, #0]
 80053ce:	b570      	push	{r4, r5, r6, lr}
 80053d0:	b96a      	cbnz	r2, 80053ee <strstr+0x22>
 80053d2:	bd70      	pop	{r4, r5, r6, pc}
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d109      	bne.n	80053ec <strstr+0x20>
 80053d8:	460c      	mov	r4, r1
 80053da:	4605      	mov	r5, r0
 80053dc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f6      	beq.n	80053d2 <strstr+0x6>
 80053e4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80053e8:	429e      	cmp	r6, r3
 80053ea:	d0f7      	beq.n	80053dc <strstr+0x10>
 80053ec:	3001      	adds	r0, #1
 80053ee:	7803      	ldrb	r3, [r0, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1ef      	bne.n	80053d4 <strstr+0x8>
 80053f4:	4618      	mov	r0, r3
 80053f6:	e7ec      	b.n	80053d2 <strstr+0x6>

080053f8 <_close_r>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	4d06      	ldr	r5, [pc, #24]	@ (8005414 <_close_r+0x1c>)
 80053fc:	2300      	movs	r3, #0
 80053fe:	4604      	mov	r4, r0
 8005400:	4608      	mov	r0, r1
 8005402:	602b      	str	r3, [r5, #0]
 8005404:	f7fc fb3e 	bl	8001a84 <_close>
 8005408:	1c43      	adds	r3, r0, #1
 800540a:	d102      	bne.n	8005412 <_close_r+0x1a>
 800540c:	682b      	ldr	r3, [r5, #0]
 800540e:	b103      	cbz	r3, 8005412 <_close_r+0x1a>
 8005410:	6023      	str	r3, [r4, #0]
 8005412:	bd38      	pop	{r3, r4, r5, pc}
 8005414:	20000b88 	.word	0x20000b88

08005418 <_lseek_r>:
 8005418:	b538      	push	{r3, r4, r5, lr}
 800541a:	4d07      	ldr	r5, [pc, #28]	@ (8005438 <_lseek_r+0x20>)
 800541c:	4604      	mov	r4, r0
 800541e:	4608      	mov	r0, r1
 8005420:	4611      	mov	r1, r2
 8005422:	2200      	movs	r2, #0
 8005424:	602a      	str	r2, [r5, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	f7fc fb53 	bl	8001ad2 <_lseek>
 800542c:	1c43      	adds	r3, r0, #1
 800542e:	d102      	bne.n	8005436 <_lseek_r+0x1e>
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	b103      	cbz	r3, 8005436 <_lseek_r+0x1e>
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	bd38      	pop	{r3, r4, r5, pc}
 8005438:	20000b88 	.word	0x20000b88

0800543c <_read_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4d07      	ldr	r5, [pc, #28]	@ (800545c <_read_r+0x20>)
 8005440:	4604      	mov	r4, r0
 8005442:	4608      	mov	r0, r1
 8005444:	4611      	mov	r1, r2
 8005446:	2200      	movs	r2, #0
 8005448:	602a      	str	r2, [r5, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	f7fc fae1 	bl	8001a12 <_read>
 8005450:	1c43      	adds	r3, r0, #1
 8005452:	d102      	bne.n	800545a <_read_r+0x1e>
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	b103      	cbz	r3, 800545a <_read_r+0x1e>
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	bd38      	pop	{r3, r4, r5, pc}
 800545c:	20000b88 	.word	0x20000b88

08005460 <_write_r>:
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	4d07      	ldr	r5, [pc, #28]	@ (8005480 <_write_r+0x20>)
 8005464:	4604      	mov	r4, r0
 8005466:	4608      	mov	r0, r1
 8005468:	4611      	mov	r1, r2
 800546a:	2200      	movs	r2, #0
 800546c:	602a      	str	r2, [r5, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	f7fc faec 	bl	8001a4c <_write>
 8005474:	1c43      	adds	r3, r0, #1
 8005476:	d102      	bne.n	800547e <_write_r+0x1e>
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	b103      	cbz	r3, 800547e <_write_r+0x1e>
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	20000b88 	.word	0x20000b88

08005484 <__errno>:
 8005484:	4b01      	ldr	r3, [pc, #4]	@ (800548c <__errno+0x8>)
 8005486:	6818      	ldr	r0, [r3, #0]
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	2000001c 	.word	0x2000001c

08005490 <__libc_init_array>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	4d0d      	ldr	r5, [pc, #52]	@ (80054c8 <__libc_init_array+0x38>)
 8005494:	4c0d      	ldr	r4, [pc, #52]	@ (80054cc <__libc_init_array+0x3c>)
 8005496:	1b64      	subs	r4, r4, r5
 8005498:	10a4      	asrs	r4, r4, #2
 800549a:	2600      	movs	r6, #0
 800549c:	42a6      	cmp	r6, r4
 800549e:	d109      	bne.n	80054b4 <__libc_init_array+0x24>
 80054a0:	4d0b      	ldr	r5, [pc, #44]	@ (80054d0 <__libc_init_array+0x40>)
 80054a2:	4c0c      	ldr	r4, [pc, #48]	@ (80054d4 <__libc_init_array+0x44>)
 80054a4:	f000 ff98 	bl	80063d8 <_init>
 80054a8:	1b64      	subs	r4, r4, r5
 80054aa:	10a4      	asrs	r4, r4, #2
 80054ac:	2600      	movs	r6, #0
 80054ae:	42a6      	cmp	r6, r4
 80054b0:	d105      	bne.n	80054be <__libc_init_array+0x2e>
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
 80054b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b8:	4798      	blx	r3
 80054ba:	3601      	adds	r6, #1
 80054bc:	e7ee      	b.n	800549c <__libc_init_array+0xc>
 80054be:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c2:	4798      	blx	r3
 80054c4:	3601      	adds	r6, #1
 80054c6:	e7f2      	b.n	80054ae <__libc_init_array+0x1e>
 80054c8:	08006918 	.word	0x08006918
 80054cc:	08006918 	.word	0x08006918
 80054d0:	08006918 	.word	0x08006918
 80054d4:	0800691c 	.word	0x0800691c

080054d8 <__retarget_lock_init_recursive>:
 80054d8:	4770      	bx	lr

080054da <__retarget_lock_acquire_recursive>:
 80054da:	4770      	bx	lr

080054dc <__retarget_lock_release_recursive>:
 80054dc:	4770      	bx	lr

080054de <strcpy>:
 80054de:	4603      	mov	r3, r0
 80054e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054e4:	f803 2b01 	strb.w	r2, [r3], #1
 80054e8:	2a00      	cmp	r2, #0
 80054ea:	d1f9      	bne.n	80054e0 <strcpy+0x2>
 80054ec:	4770      	bx	lr

080054ee <memcpy>:
 80054ee:	440a      	add	r2, r1
 80054f0:	4291      	cmp	r1, r2
 80054f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80054f6:	d100      	bne.n	80054fa <memcpy+0xc>
 80054f8:	4770      	bx	lr
 80054fa:	b510      	push	{r4, lr}
 80054fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005500:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005504:	4291      	cmp	r1, r2
 8005506:	d1f9      	bne.n	80054fc <memcpy+0xe>
 8005508:	bd10      	pop	{r4, pc}
	...

0800550c <__assert_func>:
 800550c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800550e:	4614      	mov	r4, r2
 8005510:	461a      	mov	r2, r3
 8005512:	4b09      	ldr	r3, [pc, #36]	@ (8005538 <__assert_func+0x2c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4605      	mov	r5, r0
 8005518:	68d8      	ldr	r0, [r3, #12]
 800551a:	b14c      	cbz	r4, 8005530 <__assert_func+0x24>
 800551c:	4b07      	ldr	r3, [pc, #28]	@ (800553c <__assert_func+0x30>)
 800551e:	9100      	str	r1, [sp, #0]
 8005520:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005524:	4906      	ldr	r1, [pc, #24]	@ (8005540 <__assert_func+0x34>)
 8005526:	462b      	mov	r3, r5
 8005528:	f000 fde0 	bl	80060ec <fiprintf>
 800552c:	f000 fed2 	bl	80062d4 <abort>
 8005530:	4b04      	ldr	r3, [pc, #16]	@ (8005544 <__assert_func+0x38>)
 8005532:	461c      	mov	r4, r3
 8005534:	e7f3      	b.n	800551e <__assert_func+0x12>
 8005536:	bf00      	nop
 8005538:	2000001c 	.word	0x2000001c
 800553c:	0800689e 	.word	0x0800689e
 8005540:	080068ab 	.word	0x080068ab
 8005544:	080068d9 	.word	0x080068d9

08005548 <_free_r>:
 8005548:	b538      	push	{r3, r4, r5, lr}
 800554a:	4605      	mov	r5, r0
 800554c:	2900      	cmp	r1, #0
 800554e:	d041      	beq.n	80055d4 <_free_r+0x8c>
 8005550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005554:	1f0c      	subs	r4, r1, #4
 8005556:	2b00      	cmp	r3, #0
 8005558:	bfb8      	it	lt
 800555a:	18e4      	addlt	r4, r4, r3
 800555c:	f000 f8e8 	bl	8005730 <__malloc_lock>
 8005560:	4a1d      	ldr	r2, [pc, #116]	@ (80055d8 <_free_r+0x90>)
 8005562:	6813      	ldr	r3, [r2, #0]
 8005564:	b933      	cbnz	r3, 8005574 <_free_r+0x2c>
 8005566:	6063      	str	r3, [r4, #4]
 8005568:	6014      	str	r4, [r2, #0]
 800556a:	4628      	mov	r0, r5
 800556c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005570:	f000 b8e4 	b.w	800573c <__malloc_unlock>
 8005574:	42a3      	cmp	r3, r4
 8005576:	d908      	bls.n	800558a <_free_r+0x42>
 8005578:	6820      	ldr	r0, [r4, #0]
 800557a:	1821      	adds	r1, r4, r0
 800557c:	428b      	cmp	r3, r1
 800557e:	bf01      	itttt	eq
 8005580:	6819      	ldreq	r1, [r3, #0]
 8005582:	685b      	ldreq	r3, [r3, #4]
 8005584:	1809      	addeq	r1, r1, r0
 8005586:	6021      	streq	r1, [r4, #0]
 8005588:	e7ed      	b.n	8005566 <_free_r+0x1e>
 800558a:	461a      	mov	r2, r3
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	b10b      	cbz	r3, 8005594 <_free_r+0x4c>
 8005590:	42a3      	cmp	r3, r4
 8005592:	d9fa      	bls.n	800558a <_free_r+0x42>
 8005594:	6811      	ldr	r1, [r2, #0]
 8005596:	1850      	adds	r0, r2, r1
 8005598:	42a0      	cmp	r0, r4
 800559a:	d10b      	bne.n	80055b4 <_free_r+0x6c>
 800559c:	6820      	ldr	r0, [r4, #0]
 800559e:	4401      	add	r1, r0
 80055a0:	1850      	adds	r0, r2, r1
 80055a2:	4283      	cmp	r3, r0
 80055a4:	6011      	str	r1, [r2, #0]
 80055a6:	d1e0      	bne.n	800556a <_free_r+0x22>
 80055a8:	6818      	ldr	r0, [r3, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	6053      	str	r3, [r2, #4]
 80055ae:	4408      	add	r0, r1
 80055b0:	6010      	str	r0, [r2, #0]
 80055b2:	e7da      	b.n	800556a <_free_r+0x22>
 80055b4:	d902      	bls.n	80055bc <_free_r+0x74>
 80055b6:	230c      	movs	r3, #12
 80055b8:	602b      	str	r3, [r5, #0]
 80055ba:	e7d6      	b.n	800556a <_free_r+0x22>
 80055bc:	6820      	ldr	r0, [r4, #0]
 80055be:	1821      	adds	r1, r4, r0
 80055c0:	428b      	cmp	r3, r1
 80055c2:	bf04      	itt	eq
 80055c4:	6819      	ldreq	r1, [r3, #0]
 80055c6:	685b      	ldreq	r3, [r3, #4]
 80055c8:	6063      	str	r3, [r4, #4]
 80055ca:	bf04      	itt	eq
 80055cc:	1809      	addeq	r1, r1, r0
 80055ce:	6021      	streq	r1, [r4, #0]
 80055d0:	6054      	str	r4, [r2, #4]
 80055d2:	e7ca      	b.n	800556a <_free_r+0x22>
 80055d4:	bd38      	pop	{r3, r4, r5, pc}
 80055d6:	bf00      	nop
 80055d8:	20000b94 	.word	0x20000b94

080055dc <malloc>:
 80055dc:	4b02      	ldr	r3, [pc, #8]	@ (80055e8 <malloc+0xc>)
 80055de:	4601      	mov	r1, r0
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	f000 b825 	b.w	8005630 <_malloc_r>
 80055e6:	bf00      	nop
 80055e8:	2000001c 	.word	0x2000001c

080055ec <sbrk_aligned>:
 80055ec:	b570      	push	{r4, r5, r6, lr}
 80055ee:	4e0f      	ldr	r6, [pc, #60]	@ (800562c <sbrk_aligned+0x40>)
 80055f0:	460c      	mov	r4, r1
 80055f2:	6831      	ldr	r1, [r6, #0]
 80055f4:	4605      	mov	r5, r0
 80055f6:	b911      	cbnz	r1, 80055fe <sbrk_aligned+0x12>
 80055f8:	f000 fe5c 	bl	80062b4 <_sbrk_r>
 80055fc:	6030      	str	r0, [r6, #0]
 80055fe:	4621      	mov	r1, r4
 8005600:	4628      	mov	r0, r5
 8005602:	f000 fe57 	bl	80062b4 <_sbrk_r>
 8005606:	1c43      	adds	r3, r0, #1
 8005608:	d103      	bne.n	8005612 <sbrk_aligned+0x26>
 800560a:	f04f 34ff 	mov.w	r4, #4294967295
 800560e:	4620      	mov	r0, r4
 8005610:	bd70      	pop	{r4, r5, r6, pc}
 8005612:	1cc4      	adds	r4, r0, #3
 8005614:	f024 0403 	bic.w	r4, r4, #3
 8005618:	42a0      	cmp	r0, r4
 800561a:	d0f8      	beq.n	800560e <sbrk_aligned+0x22>
 800561c:	1a21      	subs	r1, r4, r0
 800561e:	4628      	mov	r0, r5
 8005620:	f000 fe48 	bl	80062b4 <_sbrk_r>
 8005624:	3001      	adds	r0, #1
 8005626:	d1f2      	bne.n	800560e <sbrk_aligned+0x22>
 8005628:	e7ef      	b.n	800560a <sbrk_aligned+0x1e>
 800562a:	bf00      	nop
 800562c:	20000b90 	.word	0x20000b90

08005630 <_malloc_r>:
 8005630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005634:	1ccd      	adds	r5, r1, #3
 8005636:	f025 0503 	bic.w	r5, r5, #3
 800563a:	3508      	adds	r5, #8
 800563c:	2d0c      	cmp	r5, #12
 800563e:	bf38      	it	cc
 8005640:	250c      	movcc	r5, #12
 8005642:	2d00      	cmp	r5, #0
 8005644:	4606      	mov	r6, r0
 8005646:	db01      	blt.n	800564c <_malloc_r+0x1c>
 8005648:	42a9      	cmp	r1, r5
 800564a:	d904      	bls.n	8005656 <_malloc_r+0x26>
 800564c:	230c      	movs	r3, #12
 800564e:	6033      	str	r3, [r6, #0]
 8005650:	2000      	movs	r0, #0
 8005652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005656:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800572c <_malloc_r+0xfc>
 800565a:	f000 f869 	bl	8005730 <__malloc_lock>
 800565e:	f8d8 3000 	ldr.w	r3, [r8]
 8005662:	461c      	mov	r4, r3
 8005664:	bb44      	cbnz	r4, 80056b8 <_malloc_r+0x88>
 8005666:	4629      	mov	r1, r5
 8005668:	4630      	mov	r0, r6
 800566a:	f7ff ffbf 	bl	80055ec <sbrk_aligned>
 800566e:	1c43      	adds	r3, r0, #1
 8005670:	4604      	mov	r4, r0
 8005672:	d158      	bne.n	8005726 <_malloc_r+0xf6>
 8005674:	f8d8 4000 	ldr.w	r4, [r8]
 8005678:	4627      	mov	r7, r4
 800567a:	2f00      	cmp	r7, #0
 800567c:	d143      	bne.n	8005706 <_malloc_r+0xd6>
 800567e:	2c00      	cmp	r4, #0
 8005680:	d04b      	beq.n	800571a <_malloc_r+0xea>
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	4639      	mov	r1, r7
 8005686:	4630      	mov	r0, r6
 8005688:	eb04 0903 	add.w	r9, r4, r3
 800568c:	f000 fe12 	bl	80062b4 <_sbrk_r>
 8005690:	4581      	cmp	r9, r0
 8005692:	d142      	bne.n	800571a <_malloc_r+0xea>
 8005694:	6821      	ldr	r1, [r4, #0]
 8005696:	1a6d      	subs	r5, r5, r1
 8005698:	4629      	mov	r1, r5
 800569a:	4630      	mov	r0, r6
 800569c:	f7ff ffa6 	bl	80055ec <sbrk_aligned>
 80056a0:	3001      	adds	r0, #1
 80056a2:	d03a      	beq.n	800571a <_malloc_r+0xea>
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	442b      	add	r3, r5
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	f8d8 3000 	ldr.w	r3, [r8]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	bb62      	cbnz	r2, 800570c <_malloc_r+0xdc>
 80056b2:	f8c8 7000 	str.w	r7, [r8]
 80056b6:	e00f      	b.n	80056d8 <_malloc_r+0xa8>
 80056b8:	6822      	ldr	r2, [r4, #0]
 80056ba:	1b52      	subs	r2, r2, r5
 80056bc:	d420      	bmi.n	8005700 <_malloc_r+0xd0>
 80056be:	2a0b      	cmp	r2, #11
 80056c0:	d917      	bls.n	80056f2 <_malloc_r+0xc2>
 80056c2:	1961      	adds	r1, r4, r5
 80056c4:	42a3      	cmp	r3, r4
 80056c6:	6025      	str	r5, [r4, #0]
 80056c8:	bf18      	it	ne
 80056ca:	6059      	strne	r1, [r3, #4]
 80056cc:	6863      	ldr	r3, [r4, #4]
 80056ce:	bf08      	it	eq
 80056d0:	f8c8 1000 	streq.w	r1, [r8]
 80056d4:	5162      	str	r2, [r4, r5]
 80056d6:	604b      	str	r3, [r1, #4]
 80056d8:	4630      	mov	r0, r6
 80056da:	f000 f82f 	bl	800573c <__malloc_unlock>
 80056de:	f104 000b 	add.w	r0, r4, #11
 80056e2:	1d23      	adds	r3, r4, #4
 80056e4:	f020 0007 	bic.w	r0, r0, #7
 80056e8:	1ac2      	subs	r2, r0, r3
 80056ea:	bf1c      	itt	ne
 80056ec:	1a1b      	subne	r3, r3, r0
 80056ee:	50a3      	strne	r3, [r4, r2]
 80056f0:	e7af      	b.n	8005652 <_malloc_r+0x22>
 80056f2:	6862      	ldr	r2, [r4, #4]
 80056f4:	42a3      	cmp	r3, r4
 80056f6:	bf0c      	ite	eq
 80056f8:	f8c8 2000 	streq.w	r2, [r8]
 80056fc:	605a      	strne	r2, [r3, #4]
 80056fe:	e7eb      	b.n	80056d8 <_malloc_r+0xa8>
 8005700:	4623      	mov	r3, r4
 8005702:	6864      	ldr	r4, [r4, #4]
 8005704:	e7ae      	b.n	8005664 <_malloc_r+0x34>
 8005706:	463c      	mov	r4, r7
 8005708:	687f      	ldr	r7, [r7, #4]
 800570a:	e7b6      	b.n	800567a <_malloc_r+0x4a>
 800570c:	461a      	mov	r2, r3
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	42a3      	cmp	r3, r4
 8005712:	d1fb      	bne.n	800570c <_malloc_r+0xdc>
 8005714:	2300      	movs	r3, #0
 8005716:	6053      	str	r3, [r2, #4]
 8005718:	e7de      	b.n	80056d8 <_malloc_r+0xa8>
 800571a:	230c      	movs	r3, #12
 800571c:	6033      	str	r3, [r6, #0]
 800571e:	4630      	mov	r0, r6
 8005720:	f000 f80c 	bl	800573c <__malloc_unlock>
 8005724:	e794      	b.n	8005650 <_malloc_r+0x20>
 8005726:	6005      	str	r5, [r0, #0]
 8005728:	e7d6      	b.n	80056d8 <_malloc_r+0xa8>
 800572a:	bf00      	nop
 800572c:	20000b94 	.word	0x20000b94

08005730 <__malloc_lock>:
 8005730:	4801      	ldr	r0, [pc, #4]	@ (8005738 <__malloc_lock+0x8>)
 8005732:	f7ff bed2 	b.w	80054da <__retarget_lock_acquire_recursive>
 8005736:	bf00      	nop
 8005738:	20000b8c 	.word	0x20000b8c

0800573c <__malloc_unlock>:
 800573c:	4801      	ldr	r0, [pc, #4]	@ (8005744 <__malloc_unlock+0x8>)
 800573e:	f7ff becd 	b.w	80054dc <__retarget_lock_release_recursive>
 8005742:	bf00      	nop
 8005744:	20000b8c 	.word	0x20000b8c

08005748 <__ssputs_r>:
 8005748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800574c:	688e      	ldr	r6, [r1, #8]
 800574e:	461f      	mov	r7, r3
 8005750:	42be      	cmp	r6, r7
 8005752:	680b      	ldr	r3, [r1, #0]
 8005754:	4682      	mov	sl, r0
 8005756:	460c      	mov	r4, r1
 8005758:	4690      	mov	r8, r2
 800575a:	d82d      	bhi.n	80057b8 <__ssputs_r+0x70>
 800575c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005760:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005764:	d026      	beq.n	80057b4 <__ssputs_r+0x6c>
 8005766:	6965      	ldr	r5, [r4, #20]
 8005768:	6909      	ldr	r1, [r1, #16]
 800576a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800576e:	eba3 0901 	sub.w	r9, r3, r1
 8005772:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005776:	1c7b      	adds	r3, r7, #1
 8005778:	444b      	add	r3, r9
 800577a:	106d      	asrs	r5, r5, #1
 800577c:	429d      	cmp	r5, r3
 800577e:	bf38      	it	cc
 8005780:	461d      	movcc	r5, r3
 8005782:	0553      	lsls	r3, r2, #21
 8005784:	d527      	bpl.n	80057d6 <__ssputs_r+0x8e>
 8005786:	4629      	mov	r1, r5
 8005788:	f7ff ff52 	bl	8005630 <_malloc_r>
 800578c:	4606      	mov	r6, r0
 800578e:	b360      	cbz	r0, 80057ea <__ssputs_r+0xa2>
 8005790:	6921      	ldr	r1, [r4, #16]
 8005792:	464a      	mov	r2, r9
 8005794:	f7ff feab 	bl	80054ee <memcpy>
 8005798:	89a3      	ldrh	r3, [r4, #12]
 800579a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800579e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057a2:	81a3      	strh	r3, [r4, #12]
 80057a4:	6126      	str	r6, [r4, #16]
 80057a6:	6165      	str	r5, [r4, #20]
 80057a8:	444e      	add	r6, r9
 80057aa:	eba5 0509 	sub.w	r5, r5, r9
 80057ae:	6026      	str	r6, [r4, #0]
 80057b0:	60a5      	str	r5, [r4, #8]
 80057b2:	463e      	mov	r6, r7
 80057b4:	42be      	cmp	r6, r7
 80057b6:	d900      	bls.n	80057ba <__ssputs_r+0x72>
 80057b8:	463e      	mov	r6, r7
 80057ba:	6820      	ldr	r0, [r4, #0]
 80057bc:	4632      	mov	r2, r6
 80057be:	4641      	mov	r1, r8
 80057c0:	f000 fd3c 	bl	800623c <memmove>
 80057c4:	68a3      	ldr	r3, [r4, #8]
 80057c6:	1b9b      	subs	r3, r3, r6
 80057c8:	60a3      	str	r3, [r4, #8]
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	4433      	add	r3, r6
 80057ce:	6023      	str	r3, [r4, #0]
 80057d0:	2000      	movs	r0, #0
 80057d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d6:	462a      	mov	r2, r5
 80057d8:	f000 fd83 	bl	80062e2 <_realloc_r>
 80057dc:	4606      	mov	r6, r0
 80057de:	2800      	cmp	r0, #0
 80057e0:	d1e0      	bne.n	80057a4 <__ssputs_r+0x5c>
 80057e2:	6921      	ldr	r1, [r4, #16]
 80057e4:	4650      	mov	r0, sl
 80057e6:	f7ff feaf 	bl	8005548 <_free_r>
 80057ea:	230c      	movs	r3, #12
 80057ec:	f8ca 3000 	str.w	r3, [sl]
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057f6:	81a3      	strh	r3, [r4, #12]
 80057f8:	f04f 30ff 	mov.w	r0, #4294967295
 80057fc:	e7e9      	b.n	80057d2 <__ssputs_r+0x8a>
	...

08005800 <_svfiprintf_r>:
 8005800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005804:	4698      	mov	r8, r3
 8005806:	898b      	ldrh	r3, [r1, #12]
 8005808:	061b      	lsls	r3, r3, #24
 800580a:	b09d      	sub	sp, #116	@ 0x74
 800580c:	4607      	mov	r7, r0
 800580e:	460d      	mov	r5, r1
 8005810:	4614      	mov	r4, r2
 8005812:	d510      	bpl.n	8005836 <_svfiprintf_r+0x36>
 8005814:	690b      	ldr	r3, [r1, #16]
 8005816:	b973      	cbnz	r3, 8005836 <_svfiprintf_r+0x36>
 8005818:	2140      	movs	r1, #64	@ 0x40
 800581a:	f7ff ff09 	bl	8005630 <_malloc_r>
 800581e:	6028      	str	r0, [r5, #0]
 8005820:	6128      	str	r0, [r5, #16]
 8005822:	b930      	cbnz	r0, 8005832 <_svfiprintf_r+0x32>
 8005824:	230c      	movs	r3, #12
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	f04f 30ff 	mov.w	r0, #4294967295
 800582c:	b01d      	add	sp, #116	@ 0x74
 800582e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005832:	2340      	movs	r3, #64	@ 0x40
 8005834:	616b      	str	r3, [r5, #20]
 8005836:	2300      	movs	r3, #0
 8005838:	9309      	str	r3, [sp, #36]	@ 0x24
 800583a:	2320      	movs	r3, #32
 800583c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005840:	f8cd 800c 	str.w	r8, [sp, #12]
 8005844:	2330      	movs	r3, #48	@ 0x30
 8005846:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80059e4 <_svfiprintf_r+0x1e4>
 800584a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800584e:	f04f 0901 	mov.w	r9, #1
 8005852:	4623      	mov	r3, r4
 8005854:	469a      	mov	sl, r3
 8005856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800585a:	b10a      	cbz	r2, 8005860 <_svfiprintf_r+0x60>
 800585c:	2a25      	cmp	r2, #37	@ 0x25
 800585e:	d1f9      	bne.n	8005854 <_svfiprintf_r+0x54>
 8005860:	ebba 0b04 	subs.w	fp, sl, r4
 8005864:	d00b      	beq.n	800587e <_svfiprintf_r+0x7e>
 8005866:	465b      	mov	r3, fp
 8005868:	4622      	mov	r2, r4
 800586a:	4629      	mov	r1, r5
 800586c:	4638      	mov	r0, r7
 800586e:	f7ff ff6b 	bl	8005748 <__ssputs_r>
 8005872:	3001      	adds	r0, #1
 8005874:	f000 80a7 	beq.w	80059c6 <_svfiprintf_r+0x1c6>
 8005878:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800587a:	445a      	add	r2, fp
 800587c:	9209      	str	r2, [sp, #36]	@ 0x24
 800587e:	f89a 3000 	ldrb.w	r3, [sl]
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 809f 	beq.w	80059c6 <_svfiprintf_r+0x1c6>
 8005888:	2300      	movs	r3, #0
 800588a:	f04f 32ff 	mov.w	r2, #4294967295
 800588e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005892:	f10a 0a01 	add.w	sl, sl, #1
 8005896:	9304      	str	r3, [sp, #16]
 8005898:	9307      	str	r3, [sp, #28]
 800589a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800589e:	931a      	str	r3, [sp, #104]	@ 0x68
 80058a0:	4654      	mov	r4, sl
 80058a2:	2205      	movs	r2, #5
 80058a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058a8:	484e      	ldr	r0, [pc, #312]	@ (80059e4 <_svfiprintf_r+0x1e4>)
 80058aa:	f7fa fcb1 	bl	8000210 <memchr>
 80058ae:	9a04      	ldr	r2, [sp, #16]
 80058b0:	b9d8      	cbnz	r0, 80058ea <_svfiprintf_r+0xea>
 80058b2:	06d0      	lsls	r0, r2, #27
 80058b4:	bf44      	itt	mi
 80058b6:	2320      	movmi	r3, #32
 80058b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058bc:	0711      	lsls	r1, r2, #28
 80058be:	bf44      	itt	mi
 80058c0:	232b      	movmi	r3, #43	@ 0x2b
 80058c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058c6:	f89a 3000 	ldrb.w	r3, [sl]
 80058ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80058cc:	d015      	beq.n	80058fa <_svfiprintf_r+0xfa>
 80058ce:	9a07      	ldr	r2, [sp, #28]
 80058d0:	4654      	mov	r4, sl
 80058d2:	2000      	movs	r0, #0
 80058d4:	f04f 0c0a 	mov.w	ip, #10
 80058d8:	4621      	mov	r1, r4
 80058da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058de:	3b30      	subs	r3, #48	@ 0x30
 80058e0:	2b09      	cmp	r3, #9
 80058e2:	d94b      	bls.n	800597c <_svfiprintf_r+0x17c>
 80058e4:	b1b0      	cbz	r0, 8005914 <_svfiprintf_r+0x114>
 80058e6:	9207      	str	r2, [sp, #28]
 80058e8:	e014      	b.n	8005914 <_svfiprintf_r+0x114>
 80058ea:	eba0 0308 	sub.w	r3, r0, r8
 80058ee:	fa09 f303 	lsl.w	r3, r9, r3
 80058f2:	4313      	orrs	r3, r2
 80058f4:	9304      	str	r3, [sp, #16]
 80058f6:	46a2      	mov	sl, r4
 80058f8:	e7d2      	b.n	80058a0 <_svfiprintf_r+0xa0>
 80058fa:	9b03      	ldr	r3, [sp, #12]
 80058fc:	1d19      	adds	r1, r3, #4
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	9103      	str	r1, [sp, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	bfbb      	ittet	lt
 8005906:	425b      	neglt	r3, r3
 8005908:	f042 0202 	orrlt.w	r2, r2, #2
 800590c:	9307      	strge	r3, [sp, #28]
 800590e:	9307      	strlt	r3, [sp, #28]
 8005910:	bfb8      	it	lt
 8005912:	9204      	strlt	r2, [sp, #16]
 8005914:	7823      	ldrb	r3, [r4, #0]
 8005916:	2b2e      	cmp	r3, #46	@ 0x2e
 8005918:	d10a      	bne.n	8005930 <_svfiprintf_r+0x130>
 800591a:	7863      	ldrb	r3, [r4, #1]
 800591c:	2b2a      	cmp	r3, #42	@ 0x2a
 800591e:	d132      	bne.n	8005986 <_svfiprintf_r+0x186>
 8005920:	9b03      	ldr	r3, [sp, #12]
 8005922:	1d1a      	adds	r2, r3, #4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	9203      	str	r2, [sp, #12]
 8005928:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800592c:	3402      	adds	r4, #2
 800592e:	9305      	str	r3, [sp, #20]
 8005930:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80059f4 <_svfiprintf_r+0x1f4>
 8005934:	7821      	ldrb	r1, [r4, #0]
 8005936:	2203      	movs	r2, #3
 8005938:	4650      	mov	r0, sl
 800593a:	f7fa fc69 	bl	8000210 <memchr>
 800593e:	b138      	cbz	r0, 8005950 <_svfiprintf_r+0x150>
 8005940:	9b04      	ldr	r3, [sp, #16]
 8005942:	eba0 000a 	sub.w	r0, r0, sl
 8005946:	2240      	movs	r2, #64	@ 0x40
 8005948:	4082      	lsls	r2, r0
 800594a:	4313      	orrs	r3, r2
 800594c:	3401      	adds	r4, #1
 800594e:	9304      	str	r3, [sp, #16]
 8005950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005954:	4824      	ldr	r0, [pc, #144]	@ (80059e8 <_svfiprintf_r+0x1e8>)
 8005956:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800595a:	2206      	movs	r2, #6
 800595c:	f7fa fc58 	bl	8000210 <memchr>
 8005960:	2800      	cmp	r0, #0
 8005962:	d036      	beq.n	80059d2 <_svfiprintf_r+0x1d2>
 8005964:	4b21      	ldr	r3, [pc, #132]	@ (80059ec <_svfiprintf_r+0x1ec>)
 8005966:	bb1b      	cbnz	r3, 80059b0 <_svfiprintf_r+0x1b0>
 8005968:	9b03      	ldr	r3, [sp, #12]
 800596a:	3307      	adds	r3, #7
 800596c:	f023 0307 	bic.w	r3, r3, #7
 8005970:	3308      	adds	r3, #8
 8005972:	9303      	str	r3, [sp, #12]
 8005974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005976:	4433      	add	r3, r6
 8005978:	9309      	str	r3, [sp, #36]	@ 0x24
 800597a:	e76a      	b.n	8005852 <_svfiprintf_r+0x52>
 800597c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005980:	460c      	mov	r4, r1
 8005982:	2001      	movs	r0, #1
 8005984:	e7a8      	b.n	80058d8 <_svfiprintf_r+0xd8>
 8005986:	2300      	movs	r3, #0
 8005988:	3401      	adds	r4, #1
 800598a:	9305      	str	r3, [sp, #20]
 800598c:	4619      	mov	r1, r3
 800598e:	f04f 0c0a 	mov.w	ip, #10
 8005992:	4620      	mov	r0, r4
 8005994:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005998:	3a30      	subs	r2, #48	@ 0x30
 800599a:	2a09      	cmp	r2, #9
 800599c:	d903      	bls.n	80059a6 <_svfiprintf_r+0x1a6>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0c6      	beq.n	8005930 <_svfiprintf_r+0x130>
 80059a2:	9105      	str	r1, [sp, #20]
 80059a4:	e7c4      	b.n	8005930 <_svfiprintf_r+0x130>
 80059a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80059aa:	4604      	mov	r4, r0
 80059ac:	2301      	movs	r3, #1
 80059ae:	e7f0      	b.n	8005992 <_svfiprintf_r+0x192>
 80059b0:	ab03      	add	r3, sp, #12
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	462a      	mov	r2, r5
 80059b6:	4b0e      	ldr	r3, [pc, #56]	@ (80059f0 <_svfiprintf_r+0x1f0>)
 80059b8:	a904      	add	r1, sp, #16
 80059ba:	4638      	mov	r0, r7
 80059bc:	f3af 8000 	nop.w
 80059c0:	1c42      	adds	r2, r0, #1
 80059c2:	4606      	mov	r6, r0
 80059c4:	d1d6      	bne.n	8005974 <_svfiprintf_r+0x174>
 80059c6:	89ab      	ldrh	r3, [r5, #12]
 80059c8:	065b      	lsls	r3, r3, #25
 80059ca:	f53f af2d 	bmi.w	8005828 <_svfiprintf_r+0x28>
 80059ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059d0:	e72c      	b.n	800582c <_svfiprintf_r+0x2c>
 80059d2:	ab03      	add	r3, sp, #12
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	462a      	mov	r2, r5
 80059d8:	4b05      	ldr	r3, [pc, #20]	@ (80059f0 <_svfiprintf_r+0x1f0>)
 80059da:	a904      	add	r1, sp, #16
 80059dc:	4638      	mov	r0, r7
 80059de:	f000 f9bb 	bl	8005d58 <_printf_i>
 80059e2:	e7ed      	b.n	80059c0 <_svfiprintf_r+0x1c0>
 80059e4:	080068da 	.word	0x080068da
 80059e8:	080068e4 	.word	0x080068e4
 80059ec:	00000000 	.word	0x00000000
 80059f0:	08005749 	.word	0x08005749
 80059f4:	080068e0 	.word	0x080068e0

080059f8 <__sfputc_r>:
 80059f8:	6893      	ldr	r3, [r2, #8]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	b410      	push	{r4}
 8005a00:	6093      	str	r3, [r2, #8]
 8005a02:	da08      	bge.n	8005a16 <__sfputc_r+0x1e>
 8005a04:	6994      	ldr	r4, [r2, #24]
 8005a06:	42a3      	cmp	r3, r4
 8005a08:	db01      	blt.n	8005a0e <__sfputc_r+0x16>
 8005a0a:	290a      	cmp	r1, #10
 8005a0c:	d103      	bne.n	8005a16 <__sfputc_r+0x1e>
 8005a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a12:	f7ff bbc2 	b.w	800519a <__swbuf_r>
 8005a16:	6813      	ldr	r3, [r2, #0]
 8005a18:	1c58      	adds	r0, r3, #1
 8005a1a:	6010      	str	r0, [r2, #0]
 8005a1c:	7019      	strb	r1, [r3, #0]
 8005a1e:	4608      	mov	r0, r1
 8005a20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <__sfputs_r>:
 8005a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a28:	4606      	mov	r6, r0
 8005a2a:	460f      	mov	r7, r1
 8005a2c:	4614      	mov	r4, r2
 8005a2e:	18d5      	adds	r5, r2, r3
 8005a30:	42ac      	cmp	r4, r5
 8005a32:	d101      	bne.n	8005a38 <__sfputs_r+0x12>
 8005a34:	2000      	movs	r0, #0
 8005a36:	e007      	b.n	8005a48 <__sfputs_r+0x22>
 8005a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a3c:	463a      	mov	r2, r7
 8005a3e:	4630      	mov	r0, r6
 8005a40:	f7ff ffda 	bl	80059f8 <__sfputc_r>
 8005a44:	1c43      	adds	r3, r0, #1
 8005a46:	d1f3      	bne.n	8005a30 <__sfputs_r+0xa>
 8005a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a4c <_vfiprintf_r>:
 8005a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a50:	460d      	mov	r5, r1
 8005a52:	b09d      	sub	sp, #116	@ 0x74
 8005a54:	4614      	mov	r4, r2
 8005a56:	4698      	mov	r8, r3
 8005a58:	4606      	mov	r6, r0
 8005a5a:	b118      	cbz	r0, 8005a64 <_vfiprintf_r+0x18>
 8005a5c:	6a03      	ldr	r3, [r0, #32]
 8005a5e:	b90b      	cbnz	r3, 8005a64 <_vfiprintf_r+0x18>
 8005a60:	f7ff fa88 	bl	8004f74 <__sinit>
 8005a64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a66:	07d9      	lsls	r1, r3, #31
 8005a68:	d405      	bmi.n	8005a76 <_vfiprintf_r+0x2a>
 8005a6a:	89ab      	ldrh	r3, [r5, #12]
 8005a6c:	059a      	lsls	r2, r3, #22
 8005a6e:	d402      	bmi.n	8005a76 <_vfiprintf_r+0x2a>
 8005a70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a72:	f7ff fd32 	bl	80054da <__retarget_lock_acquire_recursive>
 8005a76:	89ab      	ldrh	r3, [r5, #12]
 8005a78:	071b      	lsls	r3, r3, #28
 8005a7a:	d501      	bpl.n	8005a80 <_vfiprintf_r+0x34>
 8005a7c:	692b      	ldr	r3, [r5, #16]
 8005a7e:	b99b      	cbnz	r3, 8005aa8 <_vfiprintf_r+0x5c>
 8005a80:	4629      	mov	r1, r5
 8005a82:	4630      	mov	r0, r6
 8005a84:	f7ff fbc8 	bl	8005218 <__swsetup_r>
 8005a88:	b170      	cbz	r0, 8005aa8 <_vfiprintf_r+0x5c>
 8005a8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a8c:	07dc      	lsls	r4, r3, #31
 8005a8e:	d504      	bpl.n	8005a9a <_vfiprintf_r+0x4e>
 8005a90:	f04f 30ff 	mov.w	r0, #4294967295
 8005a94:	b01d      	add	sp, #116	@ 0x74
 8005a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9a:	89ab      	ldrh	r3, [r5, #12]
 8005a9c:	0598      	lsls	r0, r3, #22
 8005a9e:	d4f7      	bmi.n	8005a90 <_vfiprintf_r+0x44>
 8005aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005aa2:	f7ff fd1b 	bl	80054dc <__retarget_lock_release_recursive>
 8005aa6:	e7f3      	b.n	8005a90 <_vfiprintf_r+0x44>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aac:	2320      	movs	r3, #32
 8005aae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ab2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ab6:	2330      	movs	r3, #48	@ 0x30
 8005ab8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005c68 <_vfiprintf_r+0x21c>
 8005abc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ac0:	f04f 0901 	mov.w	r9, #1
 8005ac4:	4623      	mov	r3, r4
 8005ac6:	469a      	mov	sl, r3
 8005ac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005acc:	b10a      	cbz	r2, 8005ad2 <_vfiprintf_r+0x86>
 8005ace:	2a25      	cmp	r2, #37	@ 0x25
 8005ad0:	d1f9      	bne.n	8005ac6 <_vfiprintf_r+0x7a>
 8005ad2:	ebba 0b04 	subs.w	fp, sl, r4
 8005ad6:	d00b      	beq.n	8005af0 <_vfiprintf_r+0xa4>
 8005ad8:	465b      	mov	r3, fp
 8005ada:	4622      	mov	r2, r4
 8005adc:	4629      	mov	r1, r5
 8005ade:	4630      	mov	r0, r6
 8005ae0:	f7ff ffa1 	bl	8005a26 <__sfputs_r>
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	f000 80a7 	beq.w	8005c38 <_vfiprintf_r+0x1ec>
 8005aea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005aec:	445a      	add	r2, fp
 8005aee:	9209      	str	r2, [sp, #36]	@ 0x24
 8005af0:	f89a 3000 	ldrb.w	r3, [sl]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 809f 	beq.w	8005c38 <_vfiprintf_r+0x1ec>
 8005afa:	2300      	movs	r3, #0
 8005afc:	f04f 32ff 	mov.w	r2, #4294967295
 8005b00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b04:	f10a 0a01 	add.w	sl, sl, #1
 8005b08:	9304      	str	r3, [sp, #16]
 8005b0a:	9307      	str	r3, [sp, #28]
 8005b0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b10:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b12:	4654      	mov	r4, sl
 8005b14:	2205      	movs	r2, #5
 8005b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b1a:	4853      	ldr	r0, [pc, #332]	@ (8005c68 <_vfiprintf_r+0x21c>)
 8005b1c:	f7fa fb78 	bl	8000210 <memchr>
 8005b20:	9a04      	ldr	r2, [sp, #16]
 8005b22:	b9d8      	cbnz	r0, 8005b5c <_vfiprintf_r+0x110>
 8005b24:	06d1      	lsls	r1, r2, #27
 8005b26:	bf44      	itt	mi
 8005b28:	2320      	movmi	r3, #32
 8005b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b2e:	0713      	lsls	r3, r2, #28
 8005b30:	bf44      	itt	mi
 8005b32:	232b      	movmi	r3, #43	@ 0x2b
 8005b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b38:	f89a 3000 	ldrb.w	r3, [sl]
 8005b3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b3e:	d015      	beq.n	8005b6c <_vfiprintf_r+0x120>
 8005b40:	9a07      	ldr	r2, [sp, #28]
 8005b42:	4654      	mov	r4, sl
 8005b44:	2000      	movs	r0, #0
 8005b46:	f04f 0c0a 	mov.w	ip, #10
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b50:	3b30      	subs	r3, #48	@ 0x30
 8005b52:	2b09      	cmp	r3, #9
 8005b54:	d94b      	bls.n	8005bee <_vfiprintf_r+0x1a2>
 8005b56:	b1b0      	cbz	r0, 8005b86 <_vfiprintf_r+0x13a>
 8005b58:	9207      	str	r2, [sp, #28]
 8005b5a:	e014      	b.n	8005b86 <_vfiprintf_r+0x13a>
 8005b5c:	eba0 0308 	sub.w	r3, r0, r8
 8005b60:	fa09 f303 	lsl.w	r3, r9, r3
 8005b64:	4313      	orrs	r3, r2
 8005b66:	9304      	str	r3, [sp, #16]
 8005b68:	46a2      	mov	sl, r4
 8005b6a:	e7d2      	b.n	8005b12 <_vfiprintf_r+0xc6>
 8005b6c:	9b03      	ldr	r3, [sp, #12]
 8005b6e:	1d19      	adds	r1, r3, #4
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	9103      	str	r1, [sp, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	bfbb      	ittet	lt
 8005b78:	425b      	neglt	r3, r3
 8005b7a:	f042 0202 	orrlt.w	r2, r2, #2
 8005b7e:	9307      	strge	r3, [sp, #28]
 8005b80:	9307      	strlt	r3, [sp, #28]
 8005b82:	bfb8      	it	lt
 8005b84:	9204      	strlt	r2, [sp, #16]
 8005b86:	7823      	ldrb	r3, [r4, #0]
 8005b88:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b8a:	d10a      	bne.n	8005ba2 <_vfiprintf_r+0x156>
 8005b8c:	7863      	ldrb	r3, [r4, #1]
 8005b8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b90:	d132      	bne.n	8005bf8 <_vfiprintf_r+0x1ac>
 8005b92:	9b03      	ldr	r3, [sp, #12]
 8005b94:	1d1a      	adds	r2, r3, #4
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	9203      	str	r2, [sp, #12]
 8005b9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b9e:	3402      	adds	r4, #2
 8005ba0:	9305      	str	r3, [sp, #20]
 8005ba2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005c78 <_vfiprintf_r+0x22c>
 8005ba6:	7821      	ldrb	r1, [r4, #0]
 8005ba8:	2203      	movs	r2, #3
 8005baa:	4650      	mov	r0, sl
 8005bac:	f7fa fb30 	bl	8000210 <memchr>
 8005bb0:	b138      	cbz	r0, 8005bc2 <_vfiprintf_r+0x176>
 8005bb2:	9b04      	ldr	r3, [sp, #16]
 8005bb4:	eba0 000a 	sub.w	r0, r0, sl
 8005bb8:	2240      	movs	r2, #64	@ 0x40
 8005bba:	4082      	lsls	r2, r0
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	3401      	adds	r4, #1
 8005bc0:	9304      	str	r3, [sp, #16]
 8005bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc6:	4829      	ldr	r0, [pc, #164]	@ (8005c6c <_vfiprintf_r+0x220>)
 8005bc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bcc:	2206      	movs	r2, #6
 8005bce:	f7fa fb1f 	bl	8000210 <memchr>
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	d03f      	beq.n	8005c56 <_vfiprintf_r+0x20a>
 8005bd6:	4b26      	ldr	r3, [pc, #152]	@ (8005c70 <_vfiprintf_r+0x224>)
 8005bd8:	bb1b      	cbnz	r3, 8005c22 <_vfiprintf_r+0x1d6>
 8005bda:	9b03      	ldr	r3, [sp, #12]
 8005bdc:	3307      	adds	r3, #7
 8005bde:	f023 0307 	bic.w	r3, r3, #7
 8005be2:	3308      	adds	r3, #8
 8005be4:	9303      	str	r3, [sp, #12]
 8005be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005be8:	443b      	add	r3, r7
 8005bea:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bec:	e76a      	b.n	8005ac4 <_vfiprintf_r+0x78>
 8005bee:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	2001      	movs	r0, #1
 8005bf6:	e7a8      	b.n	8005b4a <_vfiprintf_r+0xfe>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	3401      	adds	r4, #1
 8005bfc:	9305      	str	r3, [sp, #20]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	f04f 0c0a 	mov.w	ip, #10
 8005c04:	4620      	mov	r0, r4
 8005c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c0a:	3a30      	subs	r2, #48	@ 0x30
 8005c0c:	2a09      	cmp	r2, #9
 8005c0e:	d903      	bls.n	8005c18 <_vfiprintf_r+0x1cc>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0c6      	beq.n	8005ba2 <_vfiprintf_r+0x156>
 8005c14:	9105      	str	r1, [sp, #20]
 8005c16:	e7c4      	b.n	8005ba2 <_vfiprintf_r+0x156>
 8005c18:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e7f0      	b.n	8005c04 <_vfiprintf_r+0x1b8>
 8005c22:	ab03      	add	r3, sp, #12
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	462a      	mov	r2, r5
 8005c28:	4b12      	ldr	r3, [pc, #72]	@ (8005c74 <_vfiprintf_r+0x228>)
 8005c2a:	a904      	add	r1, sp, #16
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	f3af 8000 	nop.w
 8005c32:	4607      	mov	r7, r0
 8005c34:	1c78      	adds	r0, r7, #1
 8005c36:	d1d6      	bne.n	8005be6 <_vfiprintf_r+0x19a>
 8005c38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c3a:	07d9      	lsls	r1, r3, #31
 8005c3c:	d405      	bmi.n	8005c4a <_vfiprintf_r+0x1fe>
 8005c3e:	89ab      	ldrh	r3, [r5, #12]
 8005c40:	059a      	lsls	r2, r3, #22
 8005c42:	d402      	bmi.n	8005c4a <_vfiprintf_r+0x1fe>
 8005c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c46:	f7ff fc49 	bl	80054dc <__retarget_lock_release_recursive>
 8005c4a:	89ab      	ldrh	r3, [r5, #12]
 8005c4c:	065b      	lsls	r3, r3, #25
 8005c4e:	f53f af1f 	bmi.w	8005a90 <_vfiprintf_r+0x44>
 8005c52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c54:	e71e      	b.n	8005a94 <_vfiprintf_r+0x48>
 8005c56:	ab03      	add	r3, sp, #12
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	462a      	mov	r2, r5
 8005c5c:	4b05      	ldr	r3, [pc, #20]	@ (8005c74 <_vfiprintf_r+0x228>)
 8005c5e:	a904      	add	r1, sp, #16
 8005c60:	4630      	mov	r0, r6
 8005c62:	f000 f879 	bl	8005d58 <_printf_i>
 8005c66:	e7e4      	b.n	8005c32 <_vfiprintf_r+0x1e6>
 8005c68:	080068da 	.word	0x080068da
 8005c6c:	080068e4 	.word	0x080068e4
 8005c70:	00000000 	.word	0x00000000
 8005c74:	08005a27 	.word	0x08005a27
 8005c78:	080068e0 	.word	0x080068e0

08005c7c <_printf_common>:
 8005c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c80:	4616      	mov	r6, r2
 8005c82:	4698      	mov	r8, r3
 8005c84:	688a      	ldr	r2, [r1, #8]
 8005c86:	690b      	ldr	r3, [r1, #16]
 8005c88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	bfb8      	it	lt
 8005c90:	4613      	movlt	r3, r2
 8005c92:	6033      	str	r3, [r6, #0]
 8005c94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c98:	4607      	mov	r7, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	b10a      	cbz	r2, 8005ca2 <_printf_common+0x26>
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	6033      	str	r3, [r6, #0]
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	0699      	lsls	r1, r3, #26
 8005ca6:	bf42      	ittt	mi
 8005ca8:	6833      	ldrmi	r3, [r6, #0]
 8005caa:	3302      	addmi	r3, #2
 8005cac:	6033      	strmi	r3, [r6, #0]
 8005cae:	6825      	ldr	r5, [r4, #0]
 8005cb0:	f015 0506 	ands.w	r5, r5, #6
 8005cb4:	d106      	bne.n	8005cc4 <_printf_common+0x48>
 8005cb6:	f104 0a19 	add.w	sl, r4, #25
 8005cba:	68e3      	ldr	r3, [r4, #12]
 8005cbc:	6832      	ldr	r2, [r6, #0]
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	42ab      	cmp	r3, r5
 8005cc2:	dc26      	bgt.n	8005d12 <_printf_common+0x96>
 8005cc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cc8:	6822      	ldr	r2, [r4, #0]
 8005cca:	3b00      	subs	r3, #0
 8005ccc:	bf18      	it	ne
 8005cce:	2301      	movne	r3, #1
 8005cd0:	0692      	lsls	r2, r2, #26
 8005cd2:	d42b      	bmi.n	8005d2c <_printf_common+0xb0>
 8005cd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cd8:	4641      	mov	r1, r8
 8005cda:	4638      	mov	r0, r7
 8005cdc:	47c8      	blx	r9
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d01e      	beq.n	8005d20 <_printf_common+0xa4>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	6922      	ldr	r2, [r4, #16]
 8005ce6:	f003 0306 	and.w	r3, r3, #6
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	bf02      	ittt	eq
 8005cee:	68e5      	ldreq	r5, [r4, #12]
 8005cf0:	6833      	ldreq	r3, [r6, #0]
 8005cf2:	1aed      	subeq	r5, r5, r3
 8005cf4:	68a3      	ldr	r3, [r4, #8]
 8005cf6:	bf0c      	ite	eq
 8005cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cfc:	2500      	movne	r5, #0
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	bfc4      	itt	gt
 8005d02:	1a9b      	subgt	r3, r3, r2
 8005d04:	18ed      	addgt	r5, r5, r3
 8005d06:	2600      	movs	r6, #0
 8005d08:	341a      	adds	r4, #26
 8005d0a:	42b5      	cmp	r5, r6
 8005d0c:	d11a      	bne.n	8005d44 <_printf_common+0xc8>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	e008      	b.n	8005d24 <_printf_common+0xa8>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4652      	mov	r2, sl
 8005d16:	4641      	mov	r1, r8
 8005d18:	4638      	mov	r0, r7
 8005d1a:	47c8      	blx	r9
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d103      	bne.n	8005d28 <_printf_common+0xac>
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d28:	3501      	adds	r5, #1
 8005d2a:	e7c6      	b.n	8005cba <_printf_common+0x3e>
 8005d2c:	18e1      	adds	r1, r4, r3
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	2030      	movs	r0, #48	@ 0x30
 8005d32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d36:	4422      	add	r2, r4
 8005d38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d40:	3302      	adds	r3, #2
 8005d42:	e7c7      	b.n	8005cd4 <_printf_common+0x58>
 8005d44:	2301      	movs	r3, #1
 8005d46:	4622      	mov	r2, r4
 8005d48:	4641      	mov	r1, r8
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	47c8      	blx	r9
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d0e6      	beq.n	8005d20 <_printf_common+0xa4>
 8005d52:	3601      	adds	r6, #1
 8005d54:	e7d9      	b.n	8005d0a <_printf_common+0x8e>
	...

08005d58 <_printf_i>:
 8005d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5c:	7e0f      	ldrb	r7, [r1, #24]
 8005d5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d60:	2f78      	cmp	r7, #120	@ 0x78
 8005d62:	4691      	mov	r9, r2
 8005d64:	4680      	mov	r8, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	469a      	mov	sl, r3
 8005d6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d6e:	d807      	bhi.n	8005d80 <_printf_i+0x28>
 8005d70:	2f62      	cmp	r7, #98	@ 0x62
 8005d72:	d80a      	bhi.n	8005d8a <_printf_i+0x32>
 8005d74:	2f00      	cmp	r7, #0
 8005d76:	f000 80d1 	beq.w	8005f1c <_printf_i+0x1c4>
 8005d7a:	2f58      	cmp	r7, #88	@ 0x58
 8005d7c:	f000 80b8 	beq.w	8005ef0 <_printf_i+0x198>
 8005d80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d88:	e03a      	b.n	8005e00 <_printf_i+0xa8>
 8005d8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d8e:	2b15      	cmp	r3, #21
 8005d90:	d8f6      	bhi.n	8005d80 <_printf_i+0x28>
 8005d92:	a101      	add	r1, pc, #4	@ (adr r1, 8005d98 <_printf_i+0x40>)
 8005d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d98:	08005df1 	.word	0x08005df1
 8005d9c:	08005e05 	.word	0x08005e05
 8005da0:	08005d81 	.word	0x08005d81
 8005da4:	08005d81 	.word	0x08005d81
 8005da8:	08005d81 	.word	0x08005d81
 8005dac:	08005d81 	.word	0x08005d81
 8005db0:	08005e05 	.word	0x08005e05
 8005db4:	08005d81 	.word	0x08005d81
 8005db8:	08005d81 	.word	0x08005d81
 8005dbc:	08005d81 	.word	0x08005d81
 8005dc0:	08005d81 	.word	0x08005d81
 8005dc4:	08005f03 	.word	0x08005f03
 8005dc8:	08005e2f 	.word	0x08005e2f
 8005dcc:	08005ebd 	.word	0x08005ebd
 8005dd0:	08005d81 	.word	0x08005d81
 8005dd4:	08005d81 	.word	0x08005d81
 8005dd8:	08005f25 	.word	0x08005f25
 8005ddc:	08005d81 	.word	0x08005d81
 8005de0:	08005e2f 	.word	0x08005e2f
 8005de4:	08005d81 	.word	0x08005d81
 8005de8:	08005d81 	.word	0x08005d81
 8005dec:	08005ec5 	.word	0x08005ec5
 8005df0:	6833      	ldr	r3, [r6, #0]
 8005df2:	1d1a      	adds	r2, r3, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6032      	str	r2, [r6, #0]
 8005df8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e00:	2301      	movs	r3, #1
 8005e02:	e09c      	b.n	8005f3e <_printf_i+0x1e6>
 8005e04:	6833      	ldr	r3, [r6, #0]
 8005e06:	6820      	ldr	r0, [r4, #0]
 8005e08:	1d19      	adds	r1, r3, #4
 8005e0a:	6031      	str	r1, [r6, #0]
 8005e0c:	0606      	lsls	r6, r0, #24
 8005e0e:	d501      	bpl.n	8005e14 <_printf_i+0xbc>
 8005e10:	681d      	ldr	r5, [r3, #0]
 8005e12:	e003      	b.n	8005e1c <_printf_i+0xc4>
 8005e14:	0645      	lsls	r5, r0, #25
 8005e16:	d5fb      	bpl.n	8005e10 <_printf_i+0xb8>
 8005e18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e1c:	2d00      	cmp	r5, #0
 8005e1e:	da03      	bge.n	8005e28 <_printf_i+0xd0>
 8005e20:	232d      	movs	r3, #45	@ 0x2d
 8005e22:	426d      	negs	r5, r5
 8005e24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e28:	4858      	ldr	r0, [pc, #352]	@ (8005f8c <_printf_i+0x234>)
 8005e2a:	230a      	movs	r3, #10
 8005e2c:	e011      	b.n	8005e52 <_printf_i+0xfa>
 8005e2e:	6821      	ldr	r1, [r4, #0]
 8005e30:	6833      	ldr	r3, [r6, #0]
 8005e32:	0608      	lsls	r0, r1, #24
 8005e34:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e38:	d402      	bmi.n	8005e40 <_printf_i+0xe8>
 8005e3a:	0649      	lsls	r1, r1, #25
 8005e3c:	bf48      	it	mi
 8005e3e:	b2ad      	uxthmi	r5, r5
 8005e40:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e42:	4852      	ldr	r0, [pc, #328]	@ (8005f8c <_printf_i+0x234>)
 8005e44:	6033      	str	r3, [r6, #0]
 8005e46:	bf14      	ite	ne
 8005e48:	230a      	movne	r3, #10
 8005e4a:	2308      	moveq	r3, #8
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e52:	6866      	ldr	r6, [r4, #4]
 8005e54:	60a6      	str	r6, [r4, #8]
 8005e56:	2e00      	cmp	r6, #0
 8005e58:	db05      	blt.n	8005e66 <_printf_i+0x10e>
 8005e5a:	6821      	ldr	r1, [r4, #0]
 8005e5c:	432e      	orrs	r6, r5
 8005e5e:	f021 0104 	bic.w	r1, r1, #4
 8005e62:	6021      	str	r1, [r4, #0]
 8005e64:	d04b      	beq.n	8005efe <_printf_i+0x1a6>
 8005e66:	4616      	mov	r6, r2
 8005e68:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e6c:	fb03 5711 	mls	r7, r3, r1, r5
 8005e70:	5dc7      	ldrb	r7, [r0, r7]
 8005e72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e76:	462f      	mov	r7, r5
 8005e78:	42bb      	cmp	r3, r7
 8005e7a:	460d      	mov	r5, r1
 8005e7c:	d9f4      	bls.n	8005e68 <_printf_i+0x110>
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d10b      	bne.n	8005e9a <_printf_i+0x142>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	07df      	lsls	r7, r3, #31
 8005e86:	d508      	bpl.n	8005e9a <_printf_i+0x142>
 8005e88:	6923      	ldr	r3, [r4, #16]
 8005e8a:	6861      	ldr	r1, [r4, #4]
 8005e8c:	4299      	cmp	r1, r3
 8005e8e:	bfde      	ittt	le
 8005e90:	2330      	movle	r3, #48	@ 0x30
 8005e92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e9a:	1b92      	subs	r2, r2, r6
 8005e9c:	6122      	str	r2, [r4, #16]
 8005e9e:	f8cd a000 	str.w	sl, [sp]
 8005ea2:	464b      	mov	r3, r9
 8005ea4:	aa03      	add	r2, sp, #12
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	4640      	mov	r0, r8
 8005eaa:	f7ff fee7 	bl	8005c7c <_printf_common>
 8005eae:	3001      	adds	r0, #1
 8005eb0:	d14a      	bne.n	8005f48 <_printf_i+0x1f0>
 8005eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb6:	b004      	add	sp, #16
 8005eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ebc:	6823      	ldr	r3, [r4, #0]
 8005ebe:	f043 0320 	orr.w	r3, r3, #32
 8005ec2:	6023      	str	r3, [r4, #0]
 8005ec4:	4832      	ldr	r0, [pc, #200]	@ (8005f90 <_printf_i+0x238>)
 8005ec6:	2778      	movs	r7, #120	@ 0x78
 8005ec8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	6831      	ldr	r1, [r6, #0]
 8005ed0:	061f      	lsls	r7, r3, #24
 8005ed2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ed6:	d402      	bmi.n	8005ede <_printf_i+0x186>
 8005ed8:	065f      	lsls	r7, r3, #25
 8005eda:	bf48      	it	mi
 8005edc:	b2ad      	uxthmi	r5, r5
 8005ede:	6031      	str	r1, [r6, #0]
 8005ee0:	07d9      	lsls	r1, r3, #31
 8005ee2:	bf44      	itt	mi
 8005ee4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ee8:	6023      	strmi	r3, [r4, #0]
 8005eea:	b11d      	cbz	r5, 8005ef4 <_printf_i+0x19c>
 8005eec:	2310      	movs	r3, #16
 8005eee:	e7ad      	b.n	8005e4c <_printf_i+0xf4>
 8005ef0:	4826      	ldr	r0, [pc, #152]	@ (8005f8c <_printf_i+0x234>)
 8005ef2:	e7e9      	b.n	8005ec8 <_printf_i+0x170>
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	f023 0320 	bic.w	r3, r3, #32
 8005efa:	6023      	str	r3, [r4, #0]
 8005efc:	e7f6      	b.n	8005eec <_printf_i+0x194>
 8005efe:	4616      	mov	r6, r2
 8005f00:	e7bd      	b.n	8005e7e <_printf_i+0x126>
 8005f02:	6833      	ldr	r3, [r6, #0]
 8005f04:	6825      	ldr	r5, [r4, #0]
 8005f06:	6961      	ldr	r1, [r4, #20]
 8005f08:	1d18      	adds	r0, r3, #4
 8005f0a:	6030      	str	r0, [r6, #0]
 8005f0c:	062e      	lsls	r6, r5, #24
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	d501      	bpl.n	8005f16 <_printf_i+0x1be>
 8005f12:	6019      	str	r1, [r3, #0]
 8005f14:	e002      	b.n	8005f1c <_printf_i+0x1c4>
 8005f16:	0668      	lsls	r0, r5, #25
 8005f18:	d5fb      	bpl.n	8005f12 <_printf_i+0x1ba>
 8005f1a:	8019      	strh	r1, [r3, #0]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	6123      	str	r3, [r4, #16]
 8005f20:	4616      	mov	r6, r2
 8005f22:	e7bc      	b.n	8005e9e <_printf_i+0x146>
 8005f24:	6833      	ldr	r3, [r6, #0]
 8005f26:	1d1a      	adds	r2, r3, #4
 8005f28:	6032      	str	r2, [r6, #0]
 8005f2a:	681e      	ldr	r6, [r3, #0]
 8005f2c:	6862      	ldr	r2, [r4, #4]
 8005f2e:	2100      	movs	r1, #0
 8005f30:	4630      	mov	r0, r6
 8005f32:	f7fa f96d 	bl	8000210 <memchr>
 8005f36:	b108      	cbz	r0, 8005f3c <_printf_i+0x1e4>
 8005f38:	1b80      	subs	r0, r0, r6
 8005f3a:	6060      	str	r0, [r4, #4]
 8005f3c:	6863      	ldr	r3, [r4, #4]
 8005f3e:	6123      	str	r3, [r4, #16]
 8005f40:	2300      	movs	r3, #0
 8005f42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f46:	e7aa      	b.n	8005e9e <_printf_i+0x146>
 8005f48:	6923      	ldr	r3, [r4, #16]
 8005f4a:	4632      	mov	r2, r6
 8005f4c:	4649      	mov	r1, r9
 8005f4e:	4640      	mov	r0, r8
 8005f50:	47d0      	blx	sl
 8005f52:	3001      	adds	r0, #1
 8005f54:	d0ad      	beq.n	8005eb2 <_printf_i+0x15a>
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	079b      	lsls	r3, r3, #30
 8005f5a:	d413      	bmi.n	8005f84 <_printf_i+0x22c>
 8005f5c:	68e0      	ldr	r0, [r4, #12]
 8005f5e:	9b03      	ldr	r3, [sp, #12]
 8005f60:	4298      	cmp	r0, r3
 8005f62:	bfb8      	it	lt
 8005f64:	4618      	movlt	r0, r3
 8005f66:	e7a6      	b.n	8005eb6 <_printf_i+0x15e>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	4632      	mov	r2, r6
 8005f6c:	4649      	mov	r1, r9
 8005f6e:	4640      	mov	r0, r8
 8005f70:	47d0      	blx	sl
 8005f72:	3001      	adds	r0, #1
 8005f74:	d09d      	beq.n	8005eb2 <_printf_i+0x15a>
 8005f76:	3501      	adds	r5, #1
 8005f78:	68e3      	ldr	r3, [r4, #12]
 8005f7a:	9903      	ldr	r1, [sp, #12]
 8005f7c:	1a5b      	subs	r3, r3, r1
 8005f7e:	42ab      	cmp	r3, r5
 8005f80:	dcf2      	bgt.n	8005f68 <_printf_i+0x210>
 8005f82:	e7eb      	b.n	8005f5c <_printf_i+0x204>
 8005f84:	2500      	movs	r5, #0
 8005f86:	f104 0619 	add.w	r6, r4, #25
 8005f8a:	e7f5      	b.n	8005f78 <_printf_i+0x220>
 8005f8c:	080068eb 	.word	0x080068eb
 8005f90:	080068fc 	.word	0x080068fc

08005f94 <__sflush_r>:
 8005f94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f9c:	0716      	lsls	r6, r2, #28
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	d454      	bmi.n	800604e <__sflush_r+0xba>
 8005fa4:	684b      	ldr	r3, [r1, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	dc02      	bgt.n	8005fb0 <__sflush_r+0x1c>
 8005faa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	dd48      	ble.n	8006042 <__sflush_r+0xae>
 8005fb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	d045      	beq.n	8006042 <__sflush_r+0xae>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fbc:	682f      	ldr	r7, [r5, #0]
 8005fbe:	6a21      	ldr	r1, [r4, #32]
 8005fc0:	602b      	str	r3, [r5, #0]
 8005fc2:	d030      	beq.n	8006026 <__sflush_r+0x92>
 8005fc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	0759      	lsls	r1, r3, #29
 8005fca:	d505      	bpl.n	8005fd8 <__sflush_r+0x44>
 8005fcc:	6863      	ldr	r3, [r4, #4]
 8005fce:	1ad2      	subs	r2, r2, r3
 8005fd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fd2:	b10b      	cbz	r3, 8005fd8 <__sflush_r+0x44>
 8005fd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fd6:	1ad2      	subs	r2, r2, r3
 8005fd8:	2300      	movs	r3, #0
 8005fda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fdc:	6a21      	ldr	r1, [r4, #32]
 8005fde:	4628      	mov	r0, r5
 8005fe0:	47b0      	blx	r6
 8005fe2:	1c43      	adds	r3, r0, #1
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	d106      	bne.n	8005ff6 <__sflush_r+0x62>
 8005fe8:	6829      	ldr	r1, [r5, #0]
 8005fea:	291d      	cmp	r1, #29
 8005fec:	d82b      	bhi.n	8006046 <__sflush_r+0xb2>
 8005fee:	4a2a      	ldr	r2, [pc, #168]	@ (8006098 <__sflush_r+0x104>)
 8005ff0:	40ca      	lsrs	r2, r1
 8005ff2:	07d6      	lsls	r6, r2, #31
 8005ff4:	d527      	bpl.n	8006046 <__sflush_r+0xb2>
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	6062      	str	r2, [r4, #4]
 8005ffa:	04d9      	lsls	r1, r3, #19
 8005ffc:	6922      	ldr	r2, [r4, #16]
 8005ffe:	6022      	str	r2, [r4, #0]
 8006000:	d504      	bpl.n	800600c <__sflush_r+0x78>
 8006002:	1c42      	adds	r2, r0, #1
 8006004:	d101      	bne.n	800600a <__sflush_r+0x76>
 8006006:	682b      	ldr	r3, [r5, #0]
 8006008:	b903      	cbnz	r3, 800600c <__sflush_r+0x78>
 800600a:	6560      	str	r0, [r4, #84]	@ 0x54
 800600c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800600e:	602f      	str	r7, [r5, #0]
 8006010:	b1b9      	cbz	r1, 8006042 <__sflush_r+0xae>
 8006012:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006016:	4299      	cmp	r1, r3
 8006018:	d002      	beq.n	8006020 <__sflush_r+0x8c>
 800601a:	4628      	mov	r0, r5
 800601c:	f7ff fa94 	bl	8005548 <_free_r>
 8006020:	2300      	movs	r3, #0
 8006022:	6363      	str	r3, [r4, #52]	@ 0x34
 8006024:	e00d      	b.n	8006042 <__sflush_r+0xae>
 8006026:	2301      	movs	r3, #1
 8006028:	4628      	mov	r0, r5
 800602a:	47b0      	blx	r6
 800602c:	4602      	mov	r2, r0
 800602e:	1c50      	adds	r0, r2, #1
 8006030:	d1c9      	bne.n	8005fc6 <__sflush_r+0x32>
 8006032:	682b      	ldr	r3, [r5, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0c6      	beq.n	8005fc6 <__sflush_r+0x32>
 8006038:	2b1d      	cmp	r3, #29
 800603a:	d001      	beq.n	8006040 <__sflush_r+0xac>
 800603c:	2b16      	cmp	r3, #22
 800603e:	d11e      	bne.n	800607e <__sflush_r+0xea>
 8006040:	602f      	str	r7, [r5, #0]
 8006042:	2000      	movs	r0, #0
 8006044:	e022      	b.n	800608c <__sflush_r+0xf8>
 8006046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800604a:	b21b      	sxth	r3, r3
 800604c:	e01b      	b.n	8006086 <__sflush_r+0xf2>
 800604e:	690f      	ldr	r7, [r1, #16]
 8006050:	2f00      	cmp	r7, #0
 8006052:	d0f6      	beq.n	8006042 <__sflush_r+0xae>
 8006054:	0793      	lsls	r3, r2, #30
 8006056:	680e      	ldr	r6, [r1, #0]
 8006058:	bf08      	it	eq
 800605a:	694b      	ldreq	r3, [r1, #20]
 800605c:	600f      	str	r7, [r1, #0]
 800605e:	bf18      	it	ne
 8006060:	2300      	movne	r3, #0
 8006062:	eba6 0807 	sub.w	r8, r6, r7
 8006066:	608b      	str	r3, [r1, #8]
 8006068:	f1b8 0f00 	cmp.w	r8, #0
 800606c:	dde9      	ble.n	8006042 <__sflush_r+0xae>
 800606e:	6a21      	ldr	r1, [r4, #32]
 8006070:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006072:	4643      	mov	r3, r8
 8006074:	463a      	mov	r2, r7
 8006076:	4628      	mov	r0, r5
 8006078:	47b0      	blx	r6
 800607a:	2800      	cmp	r0, #0
 800607c:	dc08      	bgt.n	8006090 <__sflush_r+0xfc>
 800607e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006086:	81a3      	strh	r3, [r4, #12]
 8006088:	f04f 30ff 	mov.w	r0, #4294967295
 800608c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006090:	4407      	add	r7, r0
 8006092:	eba8 0800 	sub.w	r8, r8, r0
 8006096:	e7e7      	b.n	8006068 <__sflush_r+0xd4>
 8006098:	20400001 	.word	0x20400001

0800609c <_fflush_r>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	690b      	ldr	r3, [r1, #16]
 80060a0:	4605      	mov	r5, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	b913      	cbnz	r3, 80060ac <_fflush_r+0x10>
 80060a6:	2500      	movs	r5, #0
 80060a8:	4628      	mov	r0, r5
 80060aa:	bd38      	pop	{r3, r4, r5, pc}
 80060ac:	b118      	cbz	r0, 80060b6 <_fflush_r+0x1a>
 80060ae:	6a03      	ldr	r3, [r0, #32]
 80060b0:	b90b      	cbnz	r3, 80060b6 <_fflush_r+0x1a>
 80060b2:	f7fe ff5f 	bl	8004f74 <__sinit>
 80060b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0f3      	beq.n	80060a6 <_fflush_r+0xa>
 80060be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060c0:	07d0      	lsls	r0, r2, #31
 80060c2:	d404      	bmi.n	80060ce <_fflush_r+0x32>
 80060c4:	0599      	lsls	r1, r3, #22
 80060c6:	d402      	bmi.n	80060ce <_fflush_r+0x32>
 80060c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060ca:	f7ff fa06 	bl	80054da <__retarget_lock_acquire_recursive>
 80060ce:	4628      	mov	r0, r5
 80060d0:	4621      	mov	r1, r4
 80060d2:	f7ff ff5f 	bl	8005f94 <__sflush_r>
 80060d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060d8:	07da      	lsls	r2, r3, #31
 80060da:	4605      	mov	r5, r0
 80060dc:	d4e4      	bmi.n	80060a8 <_fflush_r+0xc>
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	059b      	lsls	r3, r3, #22
 80060e2:	d4e1      	bmi.n	80060a8 <_fflush_r+0xc>
 80060e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060e6:	f7ff f9f9 	bl	80054dc <__retarget_lock_release_recursive>
 80060ea:	e7dd      	b.n	80060a8 <_fflush_r+0xc>

080060ec <fiprintf>:
 80060ec:	b40e      	push	{r1, r2, r3}
 80060ee:	b503      	push	{r0, r1, lr}
 80060f0:	4601      	mov	r1, r0
 80060f2:	ab03      	add	r3, sp, #12
 80060f4:	4805      	ldr	r0, [pc, #20]	@ (800610c <fiprintf+0x20>)
 80060f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80060fa:	6800      	ldr	r0, [r0, #0]
 80060fc:	9301      	str	r3, [sp, #4]
 80060fe:	f7ff fca5 	bl	8005a4c <_vfiprintf_r>
 8006102:	b002      	add	sp, #8
 8006104:	f85d eb04 	ldr.w	lr, [sp], #4
 8006108:	b003      	add	sp, #12
 800610a:	4770      	bx	lr
 800610c:	2000001c 	.word	0x2000001c

08006110 <__swhatbuf_r>:
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	460c      	mov	r4, r1
 8006114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006118:	2900      	cmp	r1, #0
 800611a:	b096      	sub	sp, #88	@ 0x58
 800611c:	4615      	mov	r5, r2
 800611e:	461e      	mov	r6, r3
 8006120:	da0d      	bge.n	800613e <__swhatbuf_r+0x2e>
 8006122:	89a3      	ldrh	r3, [r4, #12]
 8006124:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006128:	f04f 0100 	mov.w	r1, #0
 800612c:	bf14      	ite	ne
 800612e:	2340      	movne	r3, #64	@ 0x40
 8006130:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006134:	2000      	movs	r0, #0
 8006136:	6031      	str	r1, [r6, #0]
 8006138:	602b      	str	r3, [r5, #0]
 800613a:	b016      	add	sp, #88	@ 0x58
 800613c:	bd70      	pop	{r4, r5, r6, pc}
 800613e:	466a      	mov	r2, sp
 8006140:	f000 f896 	bl	8006270 <_fstat_r>
 8006144:	2800      	cmp	r0, #0
 8006146:	dbec      	blt.n	8006122 <__swhatbuf_r+0x12>
 8006148:	9901      	ldr	r1, [sp, #4]
 800614a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800614e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006152:	4259      	negs	r1, r3
 8006154:	4159      	adcs	r1, r3
 8006156:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800615a:	e7eb      	b.n	8006134 <__swhatbuf_r+0x24>

0800615c <__smakebuf_r>:
 800615c:	898b      	ldrh	r3, [r1, #12]
 800615e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006160:	079d      	lsls	r5, r3, #30
 8006162:	4606      	mov	r6, r0
 8006164:	460c      	mov	r4, r1
 8006166:	d507      	bpl.n	8006178 <__smakebuf_r+0x1c>
 8006168:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	6123      	str	r3, [r4, #16]
 8006170:	2301      	movs	r3, #1
 8006172:	6163      	str	r3, [r4, #20]
 8006174:	b003      	add	sp, #12
 8006176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006178:	ab01      	add	r3, sp, #4
 800617a:	466a      	mov	r2, sp
 800617c:	f7ff ffc8 	bl	8006110 <__swhatbuf_r>
 8006180:	9f00      	ldr	r7, [sp, #0]
 8006182:	4605      	mov	r5, r0
 8006184:	4639      	mov	r1, r7
 8006186:	4630      	mov	r0, r6
 8006188:	f7ff fa52 	bl	8005630 <_malloc_r>
 800618c:	b948      	cbnz	r0, 80061a2 <__smakebuf_r+0x46>
 800618e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006192:	059a      	lsls	r2, r3, #22
 8006194:	d4ee      	bmi.n	8006174 <__smakebuf_r+0x18>
 8006196:	f023 0303 	bic.w	r3, r3, #3
 800619a:	f043 0302 	orr.w	r3, r3, #2
 800619e:	81a3      	strh	r3, [r4, #12]
 80061a0:	e7e2      	b.n	8006168 <__smakebuf_r+0xc>
 80061a2:	89a3      	ldrh	r3, [r4, #12]
 80061a4:	6020      	str	r0, [r4, #0]
 80061a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061aa:	81a3      	strh	r3, [r4, #12]
 80061ac:	9b01      	ldr	r3, [sp, #4]
 80061ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80061b2:	b15b      	cbz	r3, 80061cc <__smakebuf_r+0x70>
 80061b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061b8:	4630      	mov	r0, r6
 80061ba:	f000 f86b 	bl	8006294 <_isatty_r>
 80061be:	b128      	cbz	r0, 80061cc <__smakebuf_r+0x70>
 80061c0:	89a3      	ldrh	r3, [r4, #12]
 80061c2:	f023 0303 	bic.w	r3, r3, #3
 80061c6:	f043 0301 	orr.w	r3, r3, #1
 80061ca:	81a3      	strh	r3, [r4, #12]
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	431d      	orrs	r5, r3
 80061d0:	81a5      	strh	r5, [r4, #12]
 80061d2:	e7cf      	b.n	8006174 <__smakebuf_r+0x18>

080061d4 <_putc_r>:
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	460d      	mov	r5, r1
 80061d8:	4614      	mov	r4, r2
 80061da:	4606      	mov	r6, r0
 80061dc:	b118      	cbz	r0, 80061e6 <_putc_r+0x12>
 80061de:	6a03      	ldr	r3, [r0, #32]
 80061e0:	b90b      	cbnz	r3, 80061e6 <_putc_r+0x12>
 80061e2:	f7fe fec7 	bl	8004f74 <__sinit>
 80061e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061e8:	07d8      	lsls	r0, r3, #31
 80061ea:	d405      	bmi.n	80061f8 <_putc_r+0x24>
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	0599      	lsls	r1, r3, #22
 80061f0:	d402      	bmi.n	80061f8 <_putc_r+0x24>
 80061f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061f4:	f7ff f971 	bl	80054da <__retarget_lock_acquire_recursive>
 80061f8:	68a3      	ldr	r3, [r4, #8]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	60a3      	str	r3, [r4, #8]
 8006200:	da05      	bge.n	800620e <_putc_r+0x3a>
 8006202:	69a2      	ldr	r2, [r4, #24]
 8006204:	4293      	cmp	r3, r2
 8006206:	db12      	blt.n	800622e <_putc_r+0x5a>
 8006208:	b2eb      	uxtb	r3, r5
 800620a:	2b0a      	cmp	r3, #10
 800620c:	d00f      	beq.n	800622e <_putc_r+0x5a>
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	6022      	str	r2, [r4, #0]
 8006214:	701d      	strb	r5, [r3, #0]
 8006216:	b2ed      	uxtb	r5, r5
 8006218:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800621a:	07da      	lsls	r2, r3, #31
 800621c:	d405      	bmi.n	800622a <_putc_r+0x56>
 800621e:	89a3      	ldrh	r3, [r4, #12]
 8006220:	059b      	lsls	r3, r3, #22
 8006222:	d402      	bmi.n	800622a <_putc_r+0x56>
 8006224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006226:	f7ff f959 	bl	80054dc <__retarget_lock_release_recursive>
 800622a:	4628      	mov	r0, r5
 800622c:	bd70      	pop	{r4, r5, r6, pc}
 800622e:	4629      	mov	r1, r5
 8006230:	4622      	mov	r2, r4
 8006232:	4630      	mov	r0, r6
 8006234:	f7fe ffb1 	bl	800519a <__swbuf_r>
 8006238:	4605      	mov	r5, r0
 800623a:	e7ed      	b.n	8006218 <_putc_r+0x44>

0800623c <memmove>:
 800623c:	4288      	cmp	r0, r1
 800623e:	b510      	push	{r4, lr}
 8006240:	eb01 0402 	add.w	r4, r1, r2
 8006244:	d902      	bls.n	800624c <memmove+0x10>
 8006246:	4284      	cmp	r4, r0
 8006248:	4623      	mov	r3, r4
 800624a:	d807      	bhi.n	800625c <memmove+0x20>
 800624c:	1e43      	subs	r3, r0, #1
 800624e:	42a1      	cmp	r1, r4
 8006250:	d008      	beq.n	8006264 <memmove+0x28>
 8006252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006256:	f803 2f01 	strb.w	r2, [r3, #1]!
 800625a:	e7f8      	b.n	800624e <memmove+0x12>
 800625c:	4402      	add	r2, r0
 800625e:	4601      	mov	r1, r0
 8006260:	428a      	cmp	r2, r1
 8006262:	d100      	bne.n	8006266 <memmove+0x2a>
 8006264:	bd10      	pop	{r4, pc}
 8006266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800626a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800626e:	e7f7      	b.n	8006260 <memmove+0x24>

08006270 <_fstat_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	4d07      	ldr	r5, [pc, #28]	@ (8006290 <_fstat_r+0x20>)
 8006274:	2300      	movs	r3, #0
 8006276:	4604      	mov	r4, r0
 8006278:	4608      	mov	r0, r1
 800627a:	4611      	mov	r1, r2
 800627c:	602b      	str	r3, [r5, #0]
 800627e:	f7fb fc0d 	bl	8001a9c <_fstat>
 8006282:	1c43      	adds	r3, r0, #1
 8006284:	d102      	bne.n	800628c <_fstat_r+0x1c>
 8006286:	682b      	ldr	r3, [r5, #0]
 8006288:	b103      	cbz	r3, 800628c <_fstat_r+0x1c>
 800628a:	6023      	str	r3, [r4, #0]
 800628c:	bd38      	pop	{r3, r4, r5, pc}
 800628e:	bf00      	nop
 8006290:	20000b88 	.word	0x20000b88

08006294 <_isatty_r>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	4d06      	ldr	r5, [pc, #24]	@ (80062b0 <_isatty_r+0x1c>)
 8006298:	2300      	movs	r3, #0
 800629a:	4604      	mov	r4, r0
 800629c:	4608      	mov	r0, r1
 800629e:	602b      	str	r3, [r5, #0]
 80062a0:	f7fb fc0c 	bl	8001abc <_isatty>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_isatty_r+0x1a>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_isatty_r+0x1a>
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	20000b88 	.word	0x20000b88

080062b4 <_sbrk_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4d06      	ldr	r5, [pc, #24]	@ (80062d0 <_sbrk_r+0x1c>)
 80062b8:	2300      	movs	r3, #0
 80062ba:	4604      	mov	r4, r0
 80062bc:	4608      	mov	r0, r1
 80062be:	602b      	str	r3, [r5, #0]
 80062c0:	f7fb fc14 	bl	8001aec <_sbrk>
 80062c4:	1c43      	adds	r3, r0, #1
 80062c6:	d102      	bne.n	80062ce <_sbrk_r+0x1a>
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	b103      	cbz	r3, 80062ce <_sbrk_r+0x1a>
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	bd38      	pop	{r3, r4, r5, pc}
 80062d0:	20000b88 	.word	0x20000b88

080062d4 <abort>:
 80062d4:	b508      	push	{r3, lr}
 80062d6:	2006      	movs	r0, #6
 80062d8:	f000 f85a 	bl	8006390 <raise>
 80062dc:	2001      	movs	r0, #1
 80062de:	f7fb fb8d 	bl	80019fc <_exit>

080062e2 <_realloc_r>:
 80062e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e6:	4607      	mov	r7, r0
 80062e8:	4614      	mov	r4, r2
 80062ea:	460d      	mov	r5, r1
 80062ec:	b921      	cbnz	r1, 80062f8 <_realloc_r+0x16>
 80062ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062f2:	4611      	mov	r1, r2
 80062f4:	f7ff b99c 	b.w	8005630 <_malloc_r>
 80062f8:	b92a      	cbnz	r2, 8006306 <_realloc_r+0x24>
 80062fa:	f7ff f925 	bl	8005548 <_free_r>
 80062fe:	4625      	mov	r5, r4
 8006300:	4628      	mov	r0, r5
 8006302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006306:	f000 f85f 	bl	80063c8 <_malloc_usable_size_r>
 800630a:	4284      	cmp	r4, r0
 800630c:	4606      	mov	r6, r0
 800630e:	d802      	bhi.n	8006316 <_realloc_r+0x34>
 8006310:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006314:	d8f4      	bhi.n	8006300 <_realloc_r+0x1e>
 8006316:	4621      	mov	r1, r4
 8006318:	4638      	mov	r0, r7
 800631a:	f7ff f989 	bl	8005630 <_malloc_r>
 800631e:	4680      	mov	r8, r0
 8006320:	b908      	cbnz	r0, 8006326 <_realloc_r+0x44>
 8006322:	4645      	mov	r5, r8
 8006324:	e7ec      	b.n	8006300 <_realloc_r+0x1e>
 8006326:	42b4      	cmp	r4, r6
 8006328:	4622      	mov	r2, r4
 800632a:	4629      	mov	r1, r5
 800632c:	bf28      	it	cs
 800632e:	4632      	movcs	r2, r6
 8006330:	f7ff f8dd 	bl	80054ee <memcpy>
 8006334:	4629      	mov	r1, r5
 8006336:	4638      	mov	r0, r7
 8006338:	f7ff f906 	bl	8005548 <_free_r>
 800633c:	e7f1      	b.n	8006322 <_realloc_r+0x40>

0800633e <_raise_r>:
 800633e:	291f      	cmp	r1, #31
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4605      	mov	r5, r0
 8006344:	460c      	mov	r4, r1
 8006346:	d904      	bls.n	8006352 <_raise_r+0x14>
 8006348:	2316      	movs	r3, #22
 800634a:	6003      	str	r3, [r0, #0]
 800634c:	f04f 30ff 	mov.w	r0, #4294967295
 8006350:	bd38      	pop	{r3, r4, r5, pc}
 8006352:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006354:	b112      	cbz	r2, 800635c <_raise_r+0x1e>
 8006356:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800635a:	b94b      	cbnz	r3, 8006370 <_raise_r+0x32>
 800635c:	4628      	mov	r0, r5
 800635e:	f000 f831 	bl	80063c4 <_getpid_r>
 8006362:	4622      	mov	r2, r4
 8006364:	4601      	mov	r1, r0
 8006366:	4628      	mov	r0, r5
 8006368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800636c:	f000 b818 	b.w	80063a0 <_kill_r>
 8006370:	2b01      	cmp	r3, #1
 8006372:	d00a      	beq.n	800638a <_raise_r+0x4c>
 8006374:	1c59      	adds	r1, r3, #1
 8006376:	d103      	bne.n	8006380 <_raise_r+0x42>
 8006378:	2316      	movs	r3, #22
 800637a:	6003      	str	r3, [r0, #0]
 800637c:	2001      	movs	r0, #1
 800637e:	e7e7      	b.n	8006350 <_raise_r+0x12>
 8006380:	2100      	movs	r1, #0
 8006382:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006386:	4620      	mov	r0, r4
 8006388:	4798      	blx	r3
 800638a:	2000      	movs	r0, #0
 800638c:	e7e0      	b.n	8006350 <_raise_r+0x12>
	...

08006390 <raise>:
 8006390:	4b02      	ldr	r3, [pc, #8]	@ (800639c <raise+0xc>)
 8006392:	4601      	mov	r1, r0
 8006394:	6818      	ldr	r0, [r3, #0]
 8006396:	f7ff bfd2 	b.w	800633e <_raise_r>
 800639a:	bf00      	nop
 800639c:	2000001c 	.word	0x2000001c

080063a0 <_kill_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4d07      	ldr	r5, [pc, #28]	@ (80063c0 <_kill_r+0x20>)
 80063a4:	2300      	movs	r3, #0
 80063a6:	4604      	mov	r4, r0
 80063a8:	4608      	mov	r0, r1
 80063aa:	4611      	mov	r1, r2
 80063ac:	602b      	str	r3, [r5, #0]
 80063ae:	f7fb fb15 	bl	80019dc <_kill>
 80063b2:	1c43      	adds	r3, r0, #1
 80063b4:	d102      	bne.n	80063bc <_kill_r+0x1c>
 80063b6:	682b      	ldr	r3, [r5, #0]
 80063b8:	b103      	cbz	r3, 80063bc <_kill_r+0x1c>
 80063ba:	6023      	str	r3, [r4, #0]
 80063bc:	bd38      	pop	{r3, r4, r5, pc}
 80063be:	bf00      	nop
 80063c0:	20000b88 	.word	0x20000b88

080063c4 <_getpid_r>:
 80063c4:	f7fb bb02 	b.w	80019cc <_getpid>

080063c8 <_malloc_usable_size_r>:
 80063c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063cc:	1f18      	subs	r0, r3, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	bfbc      	itt	lt
 80063d2:	580b      	ldrlt	r3, [r1, r0]
 80063d4:	18c0      	addlt	r0, r0, r3
 80063d6:	4770      	bx	lr

080063d8 <_init>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	bf00      	nop
 80063dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063de:	bc08      	pop	{r3}
 80063e0:	469e      	mov	lr, r3
 80063e2:	4770      	bx	lr

080063e4 <_fini>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	bf00      	nop
 80063e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ea:	bc08      	pop	{r3}
 80063ec:	469e      	mov	lr, r3
 80063ee:	4770      	bx	lr
