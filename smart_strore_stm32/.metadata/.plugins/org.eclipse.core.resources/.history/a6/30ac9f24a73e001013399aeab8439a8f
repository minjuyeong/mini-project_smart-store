
nucleo_f411re_uart2_printf_uart6_wifi_clcd_dht11_tim4pwm1_servo_tim3rgbLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  08007490  08007490  00008490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079f0  080079f0  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080079f0  080079f0  000089f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079f8  080079f8  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079f8  080079f8  000089f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080079fc  080079fc  000089fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007a00  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b8c  2000006c  08007a6c  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bf8  08007a6c  00009bf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012168  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000299b  00000000  00000000  0001b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  0001dba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dde  00000000  00000000  0001ed48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183d6  00000000  00000000  0001fb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014865  00000000  00000000  00037efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009320a  00000000  00000000  0004c761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df96b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005824  00000000  00000000  000df9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b5  00000000  00000000  000e51d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007478 	.word	0x08007478

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08007478 	.word	0x08007478

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <LCD_init>:
#include "clcd.h"

uint8_t lcdData = 0;
I2C_HandleTypeDef *phLcdI2C;

void LCD_init(I2C_HandleTypeDef *phI2C) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	phLcdI2C = phI2C;
 80005e4:	4a18      	ldr	r2, [pc, #96]	@ (8000648 <LCD_init+0x6c>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6013      	str	r3, [r2, #0]

	HAL_Delay(50);
 80005ea:	2032      	movs	r0, #50	@ 0x32
 80005ec:	f001 ff14 	bl	8002418 <HAL_Delay>
	LCD_cmdMode();
 80005f0:	f000 f89a 	bl	8000728 <LCD_cmdMode>
	LCD_writeMode();
 80005f4:	f000 f8b8 	bl	8000768 <LCD_writeMode>
	LCD_sendData(0x30);
 80005f8:	2030      	movs	r0, #48	@ 0x30
 80005fa:	f000 f849 	bl	8000690 <LCD_sendData>
	HAL_Delay(5);
 80005fe:	2005      	movs	r0, #5
 8000600:	f001 ff0a 	bl	8002418 <HAL_Delay>
	LCD_sendData(0x30);
 8000604:	2030      	movs	r0, #48	@ 0x30
 8000606:	f000 f843 	bl	8000690 <LCD_sendData>
	HAL_Delay(1);
 800060a:	2001      	movs	r0, #1
 800060c:	f001 ff04 	bl	8002418 <HAL_Delay>
	LCD_sendData(0x30);
 8000610:	2030      	movs	r0, #48	@ 0x30
 8000612:	f000 f83d 	bl	8000690 <LCD_sendData>
	LCD_sendData(0x20);
 8000616:	2020      	movs	r0, #32
 8000618:	f000 f83a 	bl	8000690 <LCD_sendData>
	LCD_sendByte(LCD_4BIT_FUNC_SET);
 800061c:	2028      	movs	r0, #40	@ 0x28
 800061e:	f000 f85f 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_OFF);
 8000622:	2008      	movs	r0, #8
 8000624:	f000 f85c 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_CLEAR);
 8000628:	2001      	movs	r0, #1
 800062a:	f000 f859 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_ENTRY_MODE_SET);
 800062e:	2006      	movs	r0, #6
 8000630:	f000 f856 	bl	80006e0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_ON);
 8000634:	200c      	movs	r0, #12
 8000636:	f000 f853 	bl	80006e0 <LCD_sendByte>
	LCD_backLightOn();
 800063a:	f000 f865 	bl	8000708 <LCD_backLightOn>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	2000008c 	.word	0x2000008c

0800064c <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();			// RS pin Low
 8000656:	f000 f867 	bl	8000728 <LCD_cmdMode>
	LCD_writeMode();		// R/W pin Low
 800065a:	f000 f885 	bl	8000768 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f83d 	bl	80006e0 <LCD_sendByte>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data) {
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	4603      	mov	r3, r0
 8000676:	71fb      	strb	r3, [r7, #7]
	LCD_charMode(); 		// RS pin High
 8000678:	f000 f866 	bl	8000748 <LCD_charMode>
	LCD_writeMode(); 		// R/W pin Low
 800067c:	f000 f874 	bl	8000768 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f82c 	bl	80006e0 <LCD_sendByte>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <LCD_sendData>:
void LCD_sendData(uint8_t data) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	LCD_enableHigh();		// E pin High
 800069a:	f000 f875 	bl	8000788 <LCD_enableHigh>
	HAL_Delay(2);			// LCD need delay
 800069e:	2002      	movs	r0, #2
 80006a0:	f001 feba 	bl	8002418 <HAL_Delay>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);
 80006a4:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <LCD_sendData+0x4c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	b25a      	sxtb	r2, r3
 80006b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <LCD_sendData+0x4c>)
 80006c2:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80006c4:	f000 f880 	bl	80007c8 <LCD_sendDataToInterface>
	LCD_enableLow();		// E pin Low
 80006c8:	f000 f86e 	bl	80007a8 <LCD_enableLow>
	HAL_Delay(2);			// LCD delay
 80006cc:	2002      	movs	r0, #2
 80006ce:	f001 fea3 	bl	8002418 <HAL_Delay>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000088 	.word	0x20000088

080006e0 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send upper data
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ffcf 	bl	8000690 <LCD_sendData>
	data = data << 4;		// 4bit data shift (move to upper bit)
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send lower data
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ffc8 	bl	8000690 <LCD_sendData>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <LCD_backLightOn>:
void LCD_backLightOn() {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_BL);
 800070c:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <LCD_backLightOn+0x1c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f043 0308 	orr.w	r3, r3, #8
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b03      	ldr	r3, [pc, #12]	@ (8000724 <LCD_backLightOn+0x1c>)
 8000718:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800071a:	f000 f855 	bl	80007c8 <LCD_sendDataToInterface>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000088 	.word	0x20000088

08000728 <LCD_cmdMode>:
void LCD_backLightOff() {
	lcdData &= ~(1 << LCD_BL);
	LCD_sendDataToInterface();
}

void LCD_cmdMode() {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RS); // 0 bit low
 800072c:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <LCD_cmdMode+0x1c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	f023 0301 	bic.w	r3, r3, #1
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b03      	ldr	r3, [pc, #12]	@ (8000744 <LCD_cmdMode+0x1c>)
 8000738:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800073a:	f000 f845 	bl	80007c8 <LCD_sendDataToInterface>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000088 	.word	0x20000088

08000748 <LCD_charMode>:

void LCD_charMode() {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_RS); // 0 bit high
 800074c:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <LCD_charMode+0x1c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b03      	ldr	r3, [pc, #12]	@ (8000764 <LCD_charMode+0x1c>)
 8000758:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800075a:	f000 f835 	bl	80007c8 <LCD_sendDataToInterface>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000088 	.word	0x20000088

08000768 <LCD_writeMode>:

void LCD_writeMode() {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RW); // 1 bit low
 800076c:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <LCD_writeMode+0x1c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	f023 0302 	bic.w	r3, r3, #2
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b03      	ldr	r3, [pc, #12]	@ (8000784 <LCD_writeMode+0x1c>)
 8000778:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800077a:	f000 f825 	bl	80007c8 <LCD_sendDataToInterface>
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000088 	.word	0x20000088

08000788 <LCD_enableHigh>:

void LCD_enableHigh() {
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_E); // 2 bit high
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <LCD_enableHigh+0x1c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b03      	ldr	r3, [pc, #12]	@ (80007a4 <LCD_enableHigh+0x1c>)
 8000798:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800079a:	f000 f815 	bl	80007c8 <LCD_sendDataToInterface>
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000088 	.word	0x20000088

080007a8 <LCD_enableLow>:

void LCD_enableLow() {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_E); // 2 bit low
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <LCD_enableLow+0x1c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	f023 0304 	bic.w	r3, r3, #4
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <LCD_enableLow+0x1c>)
 80007b8:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80007ba:	f000 f805 	bl	80007c8 <LCD_sendDataToInterface>
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000088 	.word	0x20000088

080007c8 <LCD_sendDataToInterface>:


void LCD_sendDataToInterface() {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(phLcdI2C, LCD_DEV_ADDR << 1, &lcdData, 1, 100);
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <LCD_sendDataToInterface+0x20>)
 80007d0:	6818      	ldr	r0, [r3, #0]
 80007d2:	2364      	movs	r3, #100	@ 0x64
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2301      	movs	r3, #1
 80007d8:	4a04      	ldr	r2, [pc, #16]	@ (80007ec <LCD_sendDataToInterface+0x24>)
 80007da:	214e      	movs	r1, #78	@ 0x4e
 80007dc:	f002 faf6 	bl	8002dcc <HAL_I2C_Master_Transmit>
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000008c 	.word	0x2000008c
 80007ec:	20000088 	.word	0x20000088

080007f0 <LCD_writeString>:

void LCD_writeString(char *str) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	e009      	b.n	8000812 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff31 	bl	800066e <LCD_writeCharData>
	for (int i = 0; str[i]; i++) {
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	3301      	adds	r3, #1
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	4413      	add	r3, r2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1ef      	bne.n	80007fe <LCD_writeString+0xe>
	}
}
 800081e:	bf00      	nop
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	460a      	mov	r2, r1
 8000832:	71fb      	strb	r3, [r7, #7]
 8000834:	4613      	mov	r3, r2
 8000836:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8000838:	79bb      	ldrb	r3, [r7, #6]
 800083a:	f003 030f 	and.w	r3, r3, #15
 800083e:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = ((0x40 * row) + col);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	019b      	lsls	r3, r3, #6
 800084c:	b2da      	uxtb	r2, r3
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	4413      	add	r3, r2
 8000852:	73fb      	strb	r3, [r7, #15]
	uint8_t command = (0x80 + lcdRegAddr);
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	3b80      	subs	r3, #128	@ 0x80
 8000858:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fef5 	bl	800064c <LCD_writeCmdData>
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str) {
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	603a      	str	r2, [r7, #0]
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	460b      	mov	r3, r1
 8000878:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 800087a:	79ba      	ldrb	r2, [r7, #6]
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ffd1 	bl	8000828 <LCD_gotoXY>
	LCD_writeString(str);
 8000886:	6838      	ldr	r0, [r7, #0]
 8000888:	f7ff ffb2 	bl	80007f0 <LCD_writeString>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <DWT_Delay_Init>:
 *      Author: IoT Main
 */

#include "DHT.h"
uint32_t DWT_Delay_Init(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <DWT_Delay_Init+0x58>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	4a13      	ldr	r2, [pc, #76]	@ (80008ec <DWT_Delay_Init+0x58>)
 800089e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80008a2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <DWT_Delay_Init+0x58>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <DWT_Delay_Init+0x58>)
 80008aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008ae:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008b6:	f023 0301 	bic.w	r3, r3, #1
 80008ba:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0b      	ldr	r2, [pc, #44]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80008ce:	bf00      	nop
  __ASM volatile ("NOP");
 80008d0:	bf00      	nop
  __ASM volatile ("NOP");
 80008d2:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <DWT_Delay_Init+0x5c>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 80008dc:	2300      	movs	r3, #0
 80008de:	e000      	b.n	80008e2 <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 80008e0:	2301      	movs	r3, #1
  }

}
 80008e2:	4618      	mov	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000edf0 	.word	0xe000edf0
 80008f0:	e0001000 	.word	0xe0001000

080008f4 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80008fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <DWT_Delay_us+0x40>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000902:	f003 fa21 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8000906:	4603      	mov	r3, r0
 8000908:	4a0b      	ldr	r2, [pc, #44]	@ (8000938 <DWT_Delay_us+0x44>)
 800090a:	fba2 2303 	umull	r2, r3, r2, r3
 800090e:	0c9b      	lsrs	r3, r3, #18
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	fb02 f303 	mul.w	r3, r2, r3
 8000916:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000918:	bf00      	nop
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <DWT_Delay_us+0x40>)
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	1ad2      	subs	r2, r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	429a      	cmp	r2, r3
 8000926:	d3f8      	bcc.n	800091a <DWT_Delay_us+0x26>
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	e0001000 	.word	0xe0001000
 8000938:	431bde83 	.word	0x431bde83

0800093c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000958:	887b      	ldrh	r3, [r7, #2]
 800095a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	4619      	mov	r1, r3
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f001 ff1c 	bl	80027a8 <HAL_GPIO_Init>
}
 8000970:	bf00      	nop
 8000972:	3720      	adds	r7, #32
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	460b      	mov	r3, r1
 8000982:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000994:	887b      	ldrh	r3, [r7, #2]
 8000996:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	4619      	mov	r1, r3
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f001 ff00 	bl	80027a8 <HAL_GPIO_Init>
}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <DHT11_Init>:

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80009b4:	f7ff ff6e 	bl	8000894 <DWT_Delay_Init>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80009b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009bc:	4807      	ldr	r0, [pc, #28]	@ (80009dc <DHT11_Init+0x2c>)
 80009be:	f7ff ffbd 	bl	800093c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009c8:	4804      	ldr	r0, [pc, #16]	@ (80009dc <DHT11_Init+0x2c>)
 80009ca:	f002 f889 	bl	8002ae0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80009ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d2:	f001 fd21 	bl	8002418 <HAL_Delay>
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40020800 	.word	0x40020800

080009e0 <DHT11_Start>:

void DHT11_Start (void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80009e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009e8:	4811      	ldr	r0, [pc, #68]	@ (8000a30 <DHT11_Start+0x50>)
 80009ea:	f7ff ffa7 	bl	800093c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009f4:	480e      	ldr	r0, [pc, #56]	@ (8000a30 <DHT11_Start+0x50>)
 80009f6:	f002 f873 	bl	8002ae0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a00:	480b      	ldr	r0, [pc, #44]	@ (8000a30 <DHT11_Start+0x50>)
 8000a02:	f002 f86d 	bl	8002ae0 <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);
 8000a06:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000a0a:	f7ff ff73 	bl	80008f4 <DWT_Delay_us>
	//delay_us (18000);   // wait for 18ms
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a14:	4806      	ldr	r0, [pc, #24]	@ (8000a30 <DHT11_Start+0x50>)
 8000a16:	f002 f863 	bl	8002ae0 <HAL_GPIO_WritePin>
	DWT_Delay_us(20);
 8000a1a:	2014      	movs	r0, #20
 8000a1c:	f7ff ff6a 	bl	80008f4 <DWT_Delay_us>
	//delay_us (20);   // wait for 20us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000a20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <DHT11_Start+0x50>)
 8000a26:	f7ff ffa7 	bl	8000978 <Set_Pin_Input>
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40020800 	.word	0x40020800

08000a34 <DHT11_Stop>:

void DHT11_Stop (void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000a38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a3c:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <DHT11_Stop+0x20>)
 8000a3e:	f7ff ff7d 	bl	800093c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a48:	4802      	ldr	r0, [pc, #8]	@ (8000a54 <DHT11_Stop+0x20>)
 8000a4a:	f002 f849 	bl	8002ae0 <HAL_GPIO_WritePin>
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40020800 	.word	0x40020800

08000a58 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	71fb      	strb	r3, [r7, #7]

	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000a62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a66:	4812      	ldr	r0, [pc, #72]	@ (8000ab0 <DHT11_Check_Response+0x58>)
 8000a68:	f002 f822 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d10f      	bne.n	8000a92 <DHT11_Check_Response+0x3a>
	{
		DWT_Delay_us(80);
 8000a72:	2050      	movs	r0, #80	@ 0x50
 8000a74:	f7ff ff3e 	bl	80008f4 <DWT_Delay_us>
		//delay_us (80);
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000a78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <DHT11_Check_Response+0x58>)
 8000a7e:	f002 f817 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <DHT11_Check_Response+0x36>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	71fb      	strb	r3, [r7, #7]
 8000a8c:	e001      	b.n	8000a92 <DHT11_Check_Response+0x3a>
		else Response = -1; // 255
 8000a8e:	23ff      	movs	r3, #255	@ 0xff
 8000a90:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8000a92:	bf00      	nop
 8000a94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a98:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <DHT11_Check_Response+0x58>)
 8000a9a:	f002 f809 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d1f7      	bne.n	8000a94 <DHT11_Check_Response+0x3c>

	return Response;
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000aba:	2300      	movs	r3, #0
 8000abc:	71bb      	strb	r3, [r7, #6]
 8000abe:	e03a      	b.n	8000b36 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8000ac0:	bf00      	nop
 8000ac2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ac6:	4820      	ldr	r0, [pc, #128]	@ (8000b48 <DHT11_Read+0x94>)
 8000ac8:	f001 fff2 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0f7      	beq.n	8000ac2 <DHT11_Read+0xe>
		DWT_Delay_us(40);
 8000ad2:	2028      	movs	r0, #40	@ 0x28
 8000ad4:	f7ff ff0e 	bl	80008f4 <DWT_Delay_us>
		//delay_us (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000ad8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000adc:	481a      	ldr	r0, [pc, #104]	@ (8000b48 <DHT11_Read+0x94>)
 8000ade:	f001 ffe7 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10e      	bne.n	8000b06 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000ae8:	79bb      	ldrb	r3, [r7, #6]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2201      	movs	r2, #1
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	b25b      	sxtb	r3, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	b25a      	sxtb	r2, r3
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	4013      	ands	r3, r2
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	e00b      	b.n	8000b1e <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000b06:	79bb      	ldrb	r3, [r7, #6]
 8000b08:	f1c3 0307 	rsb	r3, r3, #7
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	b25a      	sxtb	r2, r3
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b25b      	sxtb	r3, r3
 8000b1c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8000b1e:	bf00      	nop
 8000b20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b24:	4808      	ldr	r0, [pc, #32]	@ (8000b48 <DHT11_Read+0x94>)
 8000b26:	f001 ffc3 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1f7      	bne.n	8000b20 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	3301      	adds	r3, #1
 8000b34:	71bb      	strb	r3, [r7, #6]
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	2b07      	cmp	r3, #7
 8000b3a:	d9c1      	bls.n	8000ac0 <DHT11_Read+0xc>
	}
	return i;
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40020800 	.word	0x40020800

08000b4c <DHT11_readData>:

DHT11_TypeDef DHT11_readData()
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	DHT11_TypeDef dht11;
	DHT11_Start();
 8000b54:	f7ff ff44 	bl	80009e0 <DHT11_Start>
	if ((dht11.status = DHT11_Check_Response()) < 0) return dht11;
 8000b58:	f7ff ff7e 	bl	8000a58 <DHT11_Check_Response>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	737b      	strb	r3, [r7, #13]
	dht11.rh_byte1 = DHT11_Read ();
 8000b60:	f7ff ffa8 	bl	8000ab4 <DHT11_Read>
 8000b64:	4603      	mov	r3, r0
 8000b66:	723b      	strb	r3, [r7, #8]
	dht11.rh_byte2 = DHT11_Read ();
 8000b68:	f7ff ffa4 	bl	8000ab4 <DHT11_Read>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	727b      	strb	r3, [r7, #9]
	dht11.temp_byte1 = DHT11_Read ();
 8000b70:	f7ff ffa0 	bl	8000ab4 <DHT11_Read>
 8000b74:	4603      	mov	r3, r0
 8000b76:	72bb      	strb	r3, [r7, #10]
	dht11.temp_byte2 = DHT11_Read ();
 8000b78:	f7ff ff9c 	bl	8000ab4 <DHT11_Read>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	72fb      	strb	r3, [r7, #11]
	dht11.checksum = DHT11_Read();
 8000b80:	f7ff ff98 	bl	8000ab4 <DHT11_Read>
 8000b84:	4603      	mov	r3, r0
 8000b86:	733b      	strb	r3, [r7, #12]
	DHT11_Stop();
 8000b88:	f7ff ff54 	bl	8000a34 <DHT11_Stop>
	return dht11;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	6010      	str	r0, [r2, #0]
 8000b98:	889b      	ldrh	r3, [r3, #4]
 8000b9a:	8093      	strh	r3, [r2, #4]
}
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	807b      	strh	r3, [r7, #2]
    *length = 0;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8000bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	68b8      	ldr	r0, [r7, #8]
 8000bc0:	f005 fbd0 	bl	8006364 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 8000bc4:	f240 4202 	movw	r2, #1026	@ 0x402
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4826      	ldr	r0, [pc, #152]	@ (8000c64 <esp_at_command+0xc0>)
 8000bcc:	f005 fbca 	bl	8006364 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8000bd0:	68f8      	ldr	r0, [r7, #12]
 8000bd2:	f7ff fb0f 	bl	80001f4 <strlen>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	2364      	movs	r3, #100	@ 0x64
 8000bdc:	68f9      	ldr	r1, [r7, #12]
 8000bde:	4822      	ldr	r0, [pc, #136]	@ (8000c68 <esp_at_command+0xc4>)
 8000be0:	f004 f8e8 	bl	8004db4 <HAL_UART_Transmit>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d032      	beq.n	8000c50 <esp_at_command+0xac>
        return -1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	e035      	b.n	8000c5c <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <esp_at_command+0xc0>)
 8000bf2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bfa:	d302      	bcc.n	8000c02 <esp_at_command+0x5e>
            return -2;
 8000bfc:	f06f 0301 	mvn.w	r3, #1
 8000c00:	e02c      	b.n	8000c5c <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 8000c02:	491a      	ldr	r1, [pc, #104]	@ (8000c6c <esp_at_command+0xc8>)
 8000c04:	4817      	ldr	r0, [pc, #92]	@ (8000c64 <esp_at_command+0xc0>)
 8000c06:	f005 fc31 	bl	800646c <strstr>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <esp_at_command+0x72>
            return -3;
 8000c10:	f06f 0302 	mvn.w	r3, #2
 8000c14:	e022      	b.n	8000c5c <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 8000c16:	4916      	ldr	r1, [pc, #88]	@ (8000c70 <esp_at_command+0xcc>)
 8000c18:	4812      	ldr	r0, [pc, #72]	@ (8000c64 <esp_at_command+0xc0>)
 8000c1a:	f005 fc27 	bl	800646c <strstr>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00e      	beq.n	8000c42 <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 8000c24:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <esp_at_command+0xc0>)
 8000c26:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	490d      	ldr	r1, [pc, #52]	@ (8000c64 <esp_at_command+0xc0>)
 8000c2e:	68b8      	ldr	r0, [r7, #8]
 8000c30:	f005 fcad 	bl	800658e <memcpy>
            *length = cb_data.length;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <esp_at_command+0xc0>)
 8000c36:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	801a      	strh	r2, [r3, #0]
            return 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e00c      	b.n	8000c5c <esp_at_command+0xb8>
        }
        time_out -= 10;
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	3b0a      	subs	r3, #10
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 8000c4a:	200a      	movs	r0, #10
 8000c4c:	f001 fbe4 	bl	8002418 <HAL_Delay>
    while(time_out > 0)
 8000c50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	dccb      	bgt.n	8000bf0 <esp_at_command+0x4c>
    }
    return -4;
 8000c58:	f06f 0303 	mvn.w	r3, #3
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200004d8 	.word	0x200004d8
 8000c68:	20000a0c 	.word	0x20000a0c
 8000c6c:	08007490 	.word	0x08007490
 8000c70:	08007498 	.word	0x08007498

08000c74 <esp_reset>:

static int esp_reset(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000c7e:	1dba      	adds	r2, r7, #6
 8000c80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c84:	4909      	ldr	r1, [pc, #36]	@ (8000cac <esp_reset+0x38>)
 8000c86:	480a      	ldr	r0, [pc, #40]	@ (8000cb0 <esp_reset+0x3c>)
 8000c88:	f7ff ff8c 	bl	8000ba4 <esp_at_command>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <esp_reset+0x24>
    {
    	return -1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e004      	b.n	8000ca2 <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 8000c98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c9c:	f001 fbbc 	bl	8002418 <HAL_Delay>
    return 0;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200000a0 	.word	0x200000a0
 8000cb0:	0800749c 	.word	0x0800749c

08000cb4 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000cc2:	f107 020a 	add.w	r2, r7, #10
 8000cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cca:	492d      	ldr	r1, [pc, #180]	@ (8000d80 <request_ip_addr+0xcc>)
 8000ccc:	482d      	ldr	r0, [pc, #180]	@ (8000d84 <request_ip_addr+0xd0>)
 8000cce:	f7ff ff69 	bl	8000ba4 <esp_at_command>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d003      	beq.n	8000ce0 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8000cd8:	482b      	ldr	r0, [pc, #172]	@ (8000d88 <request_ip_addr+0xd4>)
 8000cda:	f005 fa41 	bl	8006160 <puts>
 8000cde:	e049      	b.n	8000d74 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 8000ce0:	492a      	ldr	r1, [pc, #168]	@ (8000d8c <request_ip_addr+0xd8>)
 8000ce2:	4827      	ldr	r0, [pc, #156]	@ (8000d80 <request_ip_addr+0xcc>)
 8000ce4:	f005 fb66 	bl	80063b4 <strtok>
 8000ce8:	6178      	str	r0, [r7, #20]

        if(is_debug)
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d03e      	beq.n	8000d6e <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	e009      	b.n	8000d0a <request_ip_addr+0x56>
                printf("%c", response[i]);
 8000cf6:	4a22      	ldr	r2, [pc, #136]	@ (8000d80 <request_ip_addr+0xcc>)
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f005 f9d0 	bl	80060a4 <putchar>
            for(int i = 0 ; i < length ; i++)
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	3301      	adds	r3, #1
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	897b      	ldrh	r3, [r7, #10]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	4293      	cmp	r3, r2
 8000d12:	dbf0      	blt.n	8000cf6 <request_ip_addr+0x42>
        }

        while(line != NULL)
 8000d14:	e02b      	b.n	8000d6e <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 8000d16:	491e      	ldr	r1, [pc, #120]	@ (8000d90 <request_ip_addr+0xdc>)
 8000d18:	6978      	ldr	r0, [r7, #20]
 8000d1a:	f005 fba7 	bl	800646c <strstr>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d01f      	beq.n	8000d64 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 8000d24:	491b      	ldr	r1, [pc, #108]	@ (8000d94 <request_ip_addr+0xe0>)
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f005 fb44 	bl	80063b4 <strtok>
                ip = strtok(NULL, "\"");
 8000d2c:	4919      	ldr	r1, [pc, #100]	@ (8000d94 <request_ip_addr+0xe0>)
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f005 fb40 	bl	80063b4 <strtok>
 8000d34:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 8000d36:	4918      	ldr	r1, [pc, #96]	@ (8000d98 <request_ip_addr+0xe4>)
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f7ff fa51 	bl	80001e0 <strcmp>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d00f      	beq.n	8000d64 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000d44:	2210      	movs	r2, #16
 8000d46:	2100      	movs	r1, #0
 8000d48:	4814      	ldr	r0, [pc, #80]	@ (8000d9c <request_ip_addr+0xe8>)
 8000d4a:	f005 fb0b 	bl	8006364 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f7ff fa50 	bl	80001f4 <strlen>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	68f9      	ldr	r1, [r7, #12]
 8000d5a:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <request_ip_addr+0xe8>)
 8000d5c:	f005 fc17 	bl	800658e <memcpy>
                    return 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	e009      	b.n	8000d78 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8000d64:	4909      	ldr	r1, [pc, #36]	@ (8000d8c <request_ip_addr+0xd8>)
 8000d66:	2000      	movs	r0, #0
 8000d68:	f005 fb24 	bl	80063b4 <strtok>
 8000d6c:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1d0      	bne.n	8000d16 <request_ip_addr+0x62>
        }
    }
    return -1;
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200000a0 	.word	0x200000a0
 8000d84:	080074e4 	.word	0x080074e4
 8000d88:	080074f0 	.word	0x080074f0
 8000d8c:	080074d8 	.word	0x080074d8
 8000d90:	08007510 	.word	0x08007510
 8000d94:	080074e0 	.word	0x080074e0
 8000d98:	080074a8 	.word	0x080074a8
 8000d9c:	20000090 	.word	0x20000090

08000da0 <esp_client_conn>:
int esp_client_conn()
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b092      	sub	sp, #72	@ 0x48
 8000da4:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	2240      	movs	r2, #64	@ 0x40
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f005 fad8 	bl	8006364 <memset>
  uint16_t length = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 8000db8:	f107 0008 	add.w	r0, r7, #8
 8000dbc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000dc0:	4a09      	ldr	r2, [pc, #36]	@ (8000de8 <esp_client_conn+0x48>)
 8000dc2:	490a      	ldr	r1, [pc, #40]	@ (8000dec <esp_client_conn+0x4c>)
 8000dc4:	f005 f9d4 	bl	8006170 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8000dc8:	1dba      	adds	r2, r7, #6
 8000dca:	f107 0008 	add.w	r0, r7, #8
 8000dce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd2:	4907      	ldr	r1, [pc, #28]	@ (8000df0 <esp_client_conn+0x50>)
 8000dd4:	f7ff fee6 	bl	8000ba4 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8000dd8:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <esp_client_conn+0x54>)
 8000dda:	f000 f909 	bl	8000ff0 <esp_send_data>
	return 0;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3748      	adds	r7, #72	@ 0x48
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	0800751c 	.word	0x0800751c
 8000dec:	0800752c 	.word	0x0800752c
 8000df0:	200000a0 	.word	0x200000a0
 8000df4:	08007548 	.word	0x08007548

08000df8 <esp_get_status>:
int esp_get_status()
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 8000e02:	1dba      	adds	r2, r7, #6
 8000e04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e08:	4909      	ldr	r1, [pc, #36]	@ (8000e30 <esp_get_status+0x38>)
 8000e0a:	480a      	ldr	r0, [pc, #40]	@ (8000e34 <esp_get_status+0x3c>)
 8000e0c:	f7ff feca 	bl	8000ba4 <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 8000e10:	4909      	ldr	r1, [pc, #36]	@ (8000e38 <esp_get_status+0x40>)
 8000e12:	4807      	ldr	r0, [pc, #28]	@ (8000e30 <esp_get_status+0x38>)
 8000e14:	f005 fb2a 	bl	800646c <strstr>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <esp_get_status+0x2a>
    {
    	return 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e001      	b.n	8000e26 <esp_get_status+0x2e>
    }
	return -1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200000a0 	.word	0x200000a0
 8000e34:	0800755c 	.word	0x0800755c
 8000e38:	0800756c 	.word	0x0800756c

08000e3c <drv_esp_init>:
int drv_esp_init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000e40:	2210      	movs	r2, #16
 8000e42:	2100      	movs	r1, #0
 8000e44:	4806      	ldr	r0, [pc, #24]	@ (8000e60 <drv_esp_init+0x24>)
 8000e46:	f005 fa8d 	bl	8006364 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4905      	ldr	r1, [pc, #20]	@ (8000e64 <drv_esp_init+0x28>)
 8000e4e:	4806      	ldr	r0, [pc, #24]	@ (8000e68 <drv_esp_init+0x2c>)
 8000e50:	f004 f83b 	bl	8004eca <HAL_UART_Receive_IT>

    return esp_reset();
 8000e54:	f7ff ff0e 	bl	8000c74 <esp_reset>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000090 	.word	0x20000090
 8000e64:	200004d7 	.word	0x200004d7
 8000e68:	20000a0c 	.word	0x20000a0c

08000e6c <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b094      	sub	sp, #80	@ 0x50
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2240      	movs	r2, #64	@ 0x40
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f005 fa6d 	bl	8006364 <memset>
  if(ssid == NULL || passwd == NULL)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <ap_conn_func+0x2a>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d103      	bne.n	8000e9e <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8000e96:	4817      	ldr	r0, [pc, #92]	@ (8000ef4 <ap_conn_func+0x88>)
 8000e98:	f005 f962 	bl	8006160 <puts>
 8000e9c:	e026      	b.n	8000eec <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000e9e:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ea6:	4914      	ldr	r1, [pc, #80]	@ (8000ef8 <ap_conn_func+0x8c>)
 8000ea8:	4814      	ldr	r0, [pc, #80]	@ (8000efc <ap_conn_func+0x90>)
 8000eaa:	f7ff fe7b 	bl	8000ba4 <esp_at_command>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 8000eb4:	4812      	ldr	r0, [pc, #72]	@ (8000f00 <ap_conn_func+0x94>)
 8000eb6:	f005 f953 	bl	8006160 <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 8000eba:	f107 000c 	add.w	r0, r7, #12
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	4910      	ldr	r1, [pc, #64]	@ (8000f04 <ap_conn_func+0x98>)
 8000ec4:	f005 f954 	bl	8006170 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8000ec8:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000ecc:	f107 000c 	add.w	r0, r7, #12
 8000ed0:	f241 7370 	movw	r3, #6000	@ 0x1770
 8000ed4:	4908      	ldr	r1, [pc, #32]	@ (8000ef8 <ap_conn_func+0x8c>)
 8000ed6:	f7ff fe65 	bl	8000ba4 <esp_at_command>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4808      	ldr	r0, [pc, #32]	@ (8000f08 <ap_conn_func+0x9c>)
 8000ee8:	f005 f8ca 	bl	8006080 <iprintf>
}
 8000eec:	3750      	adds	r7, #80	@ 0x50
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	080075d0 	.word	0x080075d0
 8000ef8:	200000a0 	.word	0x200000a0
 8000efc:	080075fc 	.word	0x080075fc
 8000f00:	0800760c 	.word	0x0800760c
 8000f04:	08007620 	.word	0x08007620
 8000f08:	08007638 	.word	0x08007638

08000f0c <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a23      	ldr	r2, [pc, #140]	@ (8000fa8 <HAL_UART_RxCpltCallback+0x9c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d117      	bne.n	8000f4e <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 8000f1e:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <HAL_UART_RxCpltCallback+0xa0>)
 8000f20:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f28:	d20c      	bcs.n	8000f44 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 8000f2a:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <HAL_UART_RxCpltCallback+0xa0>)
 8000f2c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	b291      	uxth	r1, r2
 8000f34:	4a1d      	ldr	r2, [pc, #116]	@ (8000fac <HAL_UART_RxCpltCallback+0xa0>)
 8000f36:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <HAL_UART_RxCpltCallback+0xa4>)
 8000f3e:	7819      	ldrb	r1, [r3, #0]
 8000f40:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <HAL_UART_RxCpltCallback+0xa0>)
 8000f42:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	491a      	ldr	r1, [pc, #104]	@ (8000fb0 <HAL_UART_RxCpltCallback+0xa4>)
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f003 ffbe 	bl	8004eca <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a18      	ldr	r2, [pc, #96]	@ (8000fb4 <HAL_UART_RxCpltCallback+0xa8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d122      	bne.n	8000f9e <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8000f58:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <HAL_UART_RxCpltCallback+0xac>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a17      	ldr	r2, [pc, #92]	@ (8000fbc <HAL_UART_RxCpltCallback+0xb0>)
 8000f5e:	7811      	ldrb	r1, [r2, #0]
 8000f60:	4a17      	ldr	r2, [pc, #92]	@ (8000fc0 <HAL_UART_RxCpltCallback+0xb4>)
 8000f62:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 8000f64:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_UART_RxCpltCallback+0xac>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a15      	ldr	r2, [pc, #84]	@ (8000fc0 <HAL_UART_RxCpltCallback+0xb4>)
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b0d      	cmp	r3, #13
 8000f70:	d10b      	bne.n	8000f8a <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <HAL_UART_RxCpltCallback+0xac>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a12      	ldr	r2, [pc, #72]	@ (8000fc0 <HAL_UART_RxCpltCallback+0xb4>)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <HAL_UART_RxCpltCallback+0xb8>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <HAL_UART_RxCpltCallback+0xac>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e004      	b.n	8000f94 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <HAL_UART_RxCpltCallback+0xac>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a09      	ldr	r2, [pc, #36]	@ (8000fb8 <HAL_UART_RxCpltCallback+0xac>)
 8000f92:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 8000f94:	2201      	movs	r2, #1
 8000f96:	4909      	ldr	r1, [pc, #36]	@ (8000fbc <HAL_UART_RxCpltCallback+0xb0>)
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f003 ff96 	bl	8004eca <HAL_UART_Receive_IT>
    }
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40011400 	.word	0x40011400
 8000fac:	200004d8 	.word	0x200004d8
 8000fb0:	200004d7 	.word	0x200004d7
 8000fb4:	40004400 	.word	0x40004400
 8000fb8:	200008dc 	.word	0x200008dc
 8000fbc:	200004d6 	.word	0x200004d6
 8000fc0:	200004a4 	.word	0x200004a4
 8000fc4:	200004a0 	.word	0x200004a0

08000fc8 <AiotClient_Init>:


void AiotClient_Init()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 8000fcc:	4906      	ldr	r1, [pc, #24]	@ (8000fe8 <AiotClient_Init+0x20>)
 8000fce:	4807      	ldr	r0, [pc, #28]	@ (8000fec <AiotClient_Init+0x24>)
 8000fd0:	f7ff ff4c 	bl	8000e6c <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff fe6d 	bl	8000cb4 <request_ip_addr>
	esp_client_conn();
 8000fda:	f7ff fee1 	bl	8000da0 <esp_client_conn>
	esp_get_status();
 8000fde:	f7ff ff0b 	bl	8000df8 <esp_get_status>
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	08007698 	.word	0x08007698
 8000fec:	080076a4 	.word	0x080076a4

08000ff0 <esp_send_data>:

void esp_send_data(char *data)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b094      	sub	sp, #80	@ 0x50
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	2240      	movs	r2, #64	@ 0x40
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f005 f9af 	bl	8006364 <memset>
	uint16_t length = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff f8f2 	bl	80001f4 <strlen>
 8001010:	4602      	mov	r2, r0
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	490e      	ldr	r1, [pc, #56]	@ (8001050 <esp_send_data+0x60>)
 8001018:	4618      	mov	r0, r3
 800101a:	f005 f8a9 	bl	8006170 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 800101e:	f107 020e 	add.w	r2, r7, #14
 8001022:	f107 0010 	add.w	r0, r7, #16
 8001026:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102a:	490a      	ldr	r1, [pc, #40]	@ (8001054 <esp_send_data+0x64>)
 800102c:	f7ff fdba 	bl	8000ba4 <esp_at_command>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d107      	bne.n	8001046 <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8001036:	f107 020e 	add.w	r2, r7, #14
 800103a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800103e:	4905      	ldr	r1, [pc, #20]	@ (8001054 <esp_send_data+0x64>)
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff fdaf 	bl	8000ba4 <esp_at_command>
	}
}
 8001046:	bf00      	nop
 8001048:	3750      	adds	r7, #80	@ 0x50
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	080076ac 	.word	0x080076ac
 8001054:	200000a0 	.word	0x200000a0

08001058 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 800105c:	2201      	movs	r2, #1
 800105e:	4903      	ldr	r1, [pc, #12]	@ (800106c <drv_uart_init+0x14>)
 8001060:	4803      	ldr	r0, [pc, #12]	@ (8001070 <drv_uart_init+0x18>)
 8001062:	f003 ff32 	bl	8004eca <HAL_UART_Receive_IT>
    return 0;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200004d6 	.word	0x200004d6
 8001070:	200009c4 	.word	0x200009c4

08001074 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 800107c:	1d39      	adds	r1, r7, #4
 800107e:	230a      	movs	r3, #10
 8001080:	2201      	movs	r2, #1
 8001082:	4807      	ldr	r0, [pc, #28]	@ (80010a0 <__io_putchar+0x2c>)
 8001084:	f003 fe96 	bl	8004db4 <HAL_UART_Transmit>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <__io_putchar+0x1e>
        return ch;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	e001      	b.n	8001096 <__io_putchar+0x22>
    return -1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200009c4 	.word	0x200009c4

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b092      	sub	sp, #72	@ 0x48
 80010a8:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	int ret = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	DHT11_TypeDef dht11Data;
	char buff[30];
	int pluse = 500;
 80010ae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80010b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int red = 500;
 80010b4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80010b8:	63bb      	str	r3, [r7, #56]	@ 0x38
	int green = 500;
 80010ba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80010be:	637b      	str	r3, [r7, #52]	@ 0x34
	int blue = 500;
 80010c0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80010c4:	633b      	str	r3, [r7, #48]	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c6:	f001 f935 	bl	8002334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ca:	f000 f9a3 	bl	8001414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ce:	f000 fb9d 	bl	800180c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010d2:	f000 fb47 	bl	8001764 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80010d6:	f000 fb6f 	bl	80017b8 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 80010da:	f000 fa33 	bl	8001544 <MX_TIM3_Init>
  MX_I2C1_Init();
 80010de:	f000 fa03 	bl	80014e8 <MX_I2C1_Init>
  MX_TIM4_Init();
 80010e2:	f000 fac7 	bl	8001674 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  printf("Start main() - wifi\r\n");
 80010e6:	48a5      	ldr	r0, [pc, #660]	@ (800137c <main+0x2d8>)
 80010e8:	f005 f83a 	bl	8006160 <puts>
  ret |= drv_uart_init();
 80010ec:	f7ff ffb4 	bl	8001058 <drv_uart_init>
 80010f0:	4602      	mov	r2, r0
 80010f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010f4:	4313      	orrs	r3, r2
 80010f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ret |= drv_esp_init();
 80010f8:	f7ff fea0 	bl	8000e3c <drv_esp_init>
 80010fc:	4602      	mov	r2, r0
 80010fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001100:	4313      	orrs	r3, r2
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(ret != 0)
 8001104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001106:	2b00      	cmp	r3, #0
 8001108:	d004      	beq.n	8001114 <main+0x70>
  {
	  printf("Esp response error\r\n");
 800110a:	489d      	ldr	r0, [pc, #628]	@ (8001380 <main+0x2dc>)
 800110c:	f005 f828 	bl	8006160 <puts>
	  Error_Handler();
 8001110:	f000 fdf0 	bl	8001cf4 <Error_Handler>
  }

  AiotClient_Init();
 8001114:	f7ff ff58 	bl	8000fc8 <AiotClient_Init>

  DHT11_Init();
 8001118:	f7ff fc4a 	bl	80009b0 <DHT11_Init>
  LCD_init(&hi2c1);
 800111c:	4899      	ldr	r0, [pc, #612]	@ (8001384 <main+0x2e0>)
 800111e:	f7ff fa5d 	bl	80005dc <LCD_init>
  LCD_writeStringXY(0, 0, "hello lcd");
 8001122:	4a99      	ldr	r2, [pc, #612]	@ (8001388 <main+0x2e4>)
 8001124:	2100      	movs	r1, #0
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff fb9f 	bl	800086a <LCD_writeStringXY>

  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 800112c:	4897      	ldr	r0, [pc, #604]	@ (800138c <main+0x2e8>)
 800112e:	f002 fe8f 	bl	8003e50 <HAL_TIM_Base_Start_IT>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <main+0x98>
  {
	  Error_Handler();
 8001138:	f000 fddc 	bl	8001cf4 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 800113c:	2100      	movs	r1, #0
 800113e:	4894      	ldr	r0, [pc, #592]	@ (8001390 <main+0x2ec>)
 8001140:	f002 ff42 	bl	8003fc8 <HAL_TIM_PWM_Start>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <main+0xaa>
  {
	  Error_Handler();
 800114a:	f000 fdd3 	bl	8001cf4 <Error_Handler>
  }
  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1,(pluse-1)<0?0:pluse-1);
 800114e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001150:	2b01      	cmp	r3, #1
 8001152:	bfb8      	it	lt
 8001154:	2301      	movlt	r3, #1
 8001156:	1e5a      	subs	r2, r3, #1
 8001158:	4b8d      	ldr	r3, [pc, #564]	@ (8001390 <main+0x2ec>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	635a      	str	r2, [r3, #52]	@ 0x34


  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_2,(red-1)<0?0:red-1);
 800115e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001160:	2b01      	cmp	r3, #1
 8001162:	bfb8      	it	lt
 8001164:	2301      	movlt	r3, #1
 8001166:	1e5a      	subs	r2, r3, #1
 8001168:	4b88      	ldr	r3, [pc, #544]	@ (800138c <main+0x2e8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,(green-1)<0?0:green-1);
 800116e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001170:	2b01      	cmp	r3, #1
 8001172:	bfb8      	it	lt
 8001174:	2301      	movlt	r3, #1
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	4b84      	ldr	r3, [pc, #528]	@ (800138c <main+0x2e8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_4,(blue-1)<0?0:blue-1);
 800117e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001180:	2b01      	cmp	r3, #1
 8001182:	bfb8      	it	lt
 8001184:	2301      	movlt	r3, #1
 8001186:	1e5a      	subs	r2, r3, #1
 8001188:	4b80      	ldr	r3, [pc, #512]	@ (800138c <main+0x2e8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	641a      	str	r2, [r3, #64]	@ 0x40
  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 800118e:	2104      	movs	r1, #4
 8001190:	487e      	ldr	r0, [pc, #504]	@ (800138c <main+0x2e8>)
 8001192:	f002 ff19 	bl	8003fc8 <HAL_TIM_PWM_Start>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <main+0xfc>
  {
	  Error_Handler();
 800119c:	f000 fdaa 	bl	8001cf4 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 80011a0:	2108      	movs	r1, #8
 80011a2:	487a      	ldr	r0, [pc, #488]	@ (800138c <main+0x2e8>)
 80011a4:	f002 ff10 	bl	8003fc8 <HAL_TIM_PWM_Start>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <main+0x10e>
  {
	  Error_Handler();
 80011ae:	f000 fda1 	bl	8001cf4 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK)
 80011b2:	210c      	movs	r1, #12
 80011b4:	4875      	ldr	r0, [pc, #468]	@ (800138c <main+0x2e8>)
 80011b6:	f002 ff07 	bl	8003fc8 <HAL_TIM_PWM_Start>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <main+0x120>
  {
	  Error_Handler();
 80011c0:	f000 fd98 	bl	8001cf4 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 80011c4:	4973      	ldr	r1, [pc, #460]	@ (8001394 <main+0x2f0>)
 80011c6:	4874      	ldr	r0, [pc, #464]	@ (8001398 <main+0x2f4>)
 80011c8:	f005 f950 	bl	800646c <strstr>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d01d      	beq.n	800120e <main+0x16a>
 80011d2:	4b71      	ldr	r3, [pc, #452]	@ (8001398 <main+0x2f4>)
 80011d4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80011d8:	3b01      	subs	r3, #1
 80011da:	4a6f      	ldr	r2, [pc, #444]	@ (8001398 <main+0x2f4>)
 80011dc:	5cd3      	ldrb	r3, [r2, r3]
 80011de:	2b0a      	cmp	r3, #10
 80011e0:	d115      	bne.n	800120e <main+0x16a>
		{
			//?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 80011e2:	215b      	movs	r1, #91	@ 0x5b
 80011e4:	486c      	ldr	r0, [pc, #432]	@ (8001398 <main+0x2f4>)
 80011e6:	f005 f8c5 	bl	8006374 <strchr>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4619      	mov	r1, r3
 80011ee:	486b      	ldr	r0, [pc, #428]	@ (800139c <main+0x2f8>)
 80011f0:	f005 f9c5 	bl	800657e <strcpy>
			memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 80011f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011f8:	2100      	movs	r1, #0
 80011fa:	4867      	ldr	r0, [pc, #412]	@ (8001398 <main+0x2f4>)
 80011fc:	f005 f8b2 	bl	8006364 <memset>
			cb_data.length = 0;
 8001200:	4b65      	ldr	r3, [pc, #404]	@ (8001398 <main+0x2f4>)
 8001202:	2200      	movs	r2, #0
 8001204:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 8001208:	4864      	ldr	r0, [pc, #400]	@ (800139c <main+0x2f8>)
 800120a:	f000 fbc3 	bl	8001994 <esp_event>
		}
		if(rx2Flag)
 800120e:	4b64      	ldr	r3, [pc, #400]	@ (80013a0 <main+0x2fc>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d006      	beq.n	8001226 <main+0x182>
		{
			printf("recv2 : %s\r\n",rx2Data);
 8001218:	4962      	ldr	r1, [pc, #392]	@ (80013a4 <main+0x300>)
 800121a:	4863      	ldr	r0, [pc, #396]	@ (80013a8 <main+0x304>)
 800121c:	f004 ff30 	bl	8006080 <iprintf>
			rx2Flag =0;
 8001220:	4b5f      	ldr	r3, [pc, #380]	@ (80013a0 <main+0x2fc>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
		}
		if(keyNo != 0)
 8001226:	4b61      	ldr	r3, [pc, #388]	@ (80013ac <main+0x308>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d028      	beq.n	8001280 <main+0x1dc>
		{
		  if((keyNo == 1) && (pluse > 500))	//down
 800122e:	4b5f      	ldr	r3, [pc, #380]	@ (80013ac <main+0x308>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d106      	bne.n	8001244 <main+0x1a0>
 8001236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001238:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800123c:	dd02      	ble.n	8001244 <main+0x1a0>
		  {
			  pluse -= 200;
 800123e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001240:	3bc8      	subs	r3, #200	@ 0xc8
 8001242:	63fb      	str	r3, [r7, #60]	@ 0x3c
		  }
		  if((keyNo == 2) && (pluse < 2500))	//up
 8001244:	4b59      	ldr	r3, [pc, #356]	@ (80013ac <main+0x308>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d107      	bne.n	800125c <main+0x1b8>
 800124c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800124e:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001252:	4293      	cmp	r3, r2
 8001254:	dc02      	bgt.n	800125c <main+0x1b8>
		  {
			  pluse += 200;
 8001256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001258:	33c8      	adds	r3, #200	@ 0xc8
 800125a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		  }
		  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1,(pluse-1)<0?0:pluse-1);
 800125c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800125e:	2b01      	cmp	r3, #1
 8001260:	bfb8      	it	lt
 8001262:	2301      	movlt	r3, #1
 8001264:	1e5a      	subs	r2, r3, #1
 8001266:	4b4a      	ldr	r3, [pc, #296]	@ (8001390 <main+0x2ec>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	635a      	str	r2, [r3, #52]	@ 0x34
		  printf("keyNo : %u, pluse : %d\r\n",keyNo,pluse);
 800126c:	4b4f      	ldr	r3, [pc, #316]	@ (80013ac <main+0x308>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001272:	4619      	mov	r1, r3
 8001274:	484e      	ldr	r0, [pc, #312]	@ (80013b0 <main+0x30c>)
 8001276:	f004 ff03 	bl	8006080 <iprintf>
		  keyNo = 0;
 800127a:	4b4c      	ldr	r3, [pc, #304]	@ (80013ac <main+0x308>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
		}
		if(tim3Flag1Sec)	//1초에 한번
 8001280:	4b4c      	ldr	r3, [pc, #304]	@ (80013b4 <main+0x310>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d09d      	beq.n	80011c4 <main+0x120>
		{
			tim3Flag1Sec = 0;
 8001288:	4b4a      	ldr	r3, [pc, #296]	@ (80013b4 <main+0x310>)
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
			if(!(tim3Sec%10)) //10초에 한번
 800128e:	4b4a      	ldr	r3, [pc, #296]	@ (80013b8 <main+0x314>)
 8001290:	6819      	ldr	r1, [r3, #0]
 8001292:	4b4a      	ldr	r3, [pc, #296]	@ (80013bc <main+0x318>)
 8001294:	fba3 2301 	umull	r2, r3, r3, r1
 8001298:	08da      	lsrs	r2, r3, #3
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	1aca      	subs	r2, r1, r3
 80012a4:	2a00      	cmp	r2, #0
 80012a6:	d109      	bne.n	80012bc <main+0x218>
			{
				if(esp_get_status() != 0)
 80012a8:	f7ff fda6 	bl	8000df8 <esp_get_status>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d004      	beq.n	80012bc <main+0x218>
				{
					printf("server connecting ...\r\n");
 80012b2:	4843      	ldr	r0, [pc, #268]	@ (80013c0 <main+0x31c>)
 80012b4:	f004 ff54 	bl	8006160 <puts>
					esp_client_conn();
 80012b8:	f7ff fd72 	bl	8000da0 <esp_client_conn>
				}
			}
//			printf("tim3Sec : %d\r\n",tim3Sec);
			if(!(tim3Sec%5)) //5초에 한번
 80012bc:	4b3e      	ldr	r3, [pc, #248]	@ (80013b8 <main+0x314>)
 80012be:	6819      	ldr	r1, [r3, #0]
 80012c0:	4b3e      	ldr	r3, [pc, #248]	@ (80013bc <main+0x318>)
 80012c2:	fba3 2301 	umull	r2, r3, r3, r1
 80012c6:	089a      	lsrs	r2, r3, #2
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	1aca      	subs	r2, r1, r3
 80012d0:	2a00      	cmp	r2, #0
 80012d2:	d125      	bne.n	8001320 <main+0x27c>
			{
				dht11Data = DHT11_readData();
 80012d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fc37 	bl	8000b4c <DHT11_readData>
				if(dht11Data.rh_byte1 != 255)
 80012de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80012e2:	2bff      	cmp	r3, #255	@ 0xff
 80012e4:	d019      	beq.n	800131a <main+0x276>
				{
					sprintf(buff,"h: %d%% t: %d.%d'C", dht11Data.rh_byte1, dht11Data.temp_byte1, dht11Data.temp_byte2);
 80012e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80012ea:	461a      	mov	r2, r3
 80012ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80012f0:	4619      	mov	r1, r3
 80012f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012f6:	1d38      	adds	r0, r7, #4
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	460b      	mov	r3, r1
 80012fc:	4931      	ldr	r1, [pc, #196]	@ (80013c4 <main+0x320>)
 80012fe:	f004 ff37 	bl	8006170 <siprintf>
					printf("%s\r\n", buff);
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4619      	mov	r1, r3
 8001306:	4830      	ldr	r0, [pc, #192]	@ (80013c8 <main+0x324>)
 8001308:	f004 feba 	bl	8006080 <iprintf>
					LCD_writeStringXY(1, 0, buff);
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	461a      	mov	r2, r3
 8001310:	2100      	movs	r1, #0
 8001312:	2001      	movs	r0, #1
 8001314:	f7ff faa9 	bl	800086a <LCD_writeStringXY>
 8001318:	e002      	b.n	8001320 <main+0x27c>
				}
				else
					printf("DHT11 response error\r\n");
 800131a:	482c      	ldr	r0, [pc, #176]	@ (80013cc <main+0x328>)
 800131c:	f004 ff20 	bl	8006160 <puts>
			}
			if(rgbFlag == 0)
 8001320:	4b2b      	ldr	r3, [pc, #172]	@ (80013d0 <main+0x32c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	f47f af4d 	bne.w	80011c4 <main+0x120>
			{
				if(!(tim3Sec%3))
 800132a:	4b23      	ldr	r3, [pc, #140]	@ (80013b8 <main+0x314>)
 800132c:	6819      	ldr	r1, [r3, #0]
 800132e:	4b29      	ldr	r3, [pc, #164]	@ (80013d4 <main+0x330>)
 8001330:	fba3 2301 	umull	r2, r3, r3, r1
 8001334:	085a      	lsrs	r2, r3, #1
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	1aca      	subs	r2, r1, r3
 800133e:	2a00      	cmp	r2, #0
 8001340:	d107      	bne.n	8001352 <main+0x2ae>
				{
					red = 1000;
 8001342:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001346:	63bb      	str	r3, [r7, #56]	@ 0x38
					green = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	637b      	str	r3, [r7, #52]	@ 0x34
					blue = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001350:	e055      	b.n	80013fe <main+0x35a>
				}
				else if((tim3Sec%3)==1)
 8001352:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <main+0x314>)
 8001354:	6819      	ldr	r1, [r3, #0]
 8001356:	4b1f      	ldr	r3, [pc, #124]	@ (80013d4 <main+0x330>)
 8001358:	fba3 2301 	umull	r2, r3, r3, r1
 800135c:	085a      	lsrs	r2, r3, #1
 800135e:	4613      	mov	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4413      	add	r3, r2
 8001364:	1aca      	subs	r2, r1, r3
 8001366:	2a01      	cmp	r2, #1
 8001368:	d136      	bne.n	80013d8 <main+0x334>
				{
					red = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	63bb      	str	r3, [r7, #56]	@ 0x38
					green = 1000;
 800136e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001372:	637b      	str	r3, [r7, #52]	@ 0x34
					blue = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	633b      	str	r3, [r7, #48]	@ 0x30
 8001378:	e041      	b.n	80013fe <main+0x35a>
 800137a:	bf00      	nop
 800137c:	080076bc 	.word	0x080076bc
 8001380:	080076d4 	.word	0x080076d4
 8001384:	200008e0 	.word	0x200008e0
 8001388:	080076e8 	.word	0x080076e8
 800138c:	20000934 	.word	0x20000934
 8001390:	2000097c 	.word	0x2000097c
 8001394:	080076f4 	.word	0x080076f4
 8001398:	200004d8 	.word	0x200004d8
 800139c:	20000a60 	.word	0x20000a60
 80013a0:	200004a0 	.word	0x200004a0
 80013a4:	200004a4 	.word	0x200004a4
 80013a8:	080076fc 	.word	0x080076fc
 80013ac:	20000a58 	.word	0x20000a58
 80013b0:	0800770c 	.word	0x0800770c
 80013b4:	20000000 	.word	0x20000000
 80013b8:	20000a54 	.word	0x20000a54
 80013bc:	cccccccd 	.word	0xcccccccd
 80013c0:	08007728 	.word	0x08007728
 80013c4:	08007740 	.word	0x08007740
 80013c8:	08007754 	.word	0x08007754
 80013cc:	0800775c 	.word	0x0800775c
 80013d0:	20000a5c 	.word	0x20000a5c
 80013d4:	aaaaaaab 	.word	0xaaaaaaab
				}
				else if((tim3Sec%3)==2)
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <main+0x368>)
 80013da:	6819      	ldr	r1, [r3, #0]
 80013dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <main+0x36c>)
 80013de:	fba3 2301 	umull	r2, r3, r3, r1
 80013e2:	085a      	lsrs	r2, r3, #1
 80013e4:	4613      	mov	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4413      	add	r3, r2
 80013ea:	1aca      	subs	r2, r1, r3
 80013ec:	2a02      	cmp	r2, #2
 80013ee:	d106      	bne.n	80013fe <main+0x35a>
				{
					red = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	63bb      	str	r3, [r7, #56]	@ 0x38
					green = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	637b      	str	r3, [r7, #52]	@ 0x34
					blue = 1000;
 80013f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013fc:	633b      	str	r3, [r7, #48]	@ 0x30
				}
				set_rgb_led(red, green, blue);
 80013fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001400:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001402:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001404:	f000 fc50 	bl	8001ca8 <set_rgb_led>
		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8001408:	e6dc      	b.n	80011c4 <main+0x120>
 800140a:	bf00      	nop
 800140c:	20000a54 	.word	0x20000a54
 8001410:	aaaaaaab 	.word	0xaaaaaaab

08001414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b094      	sub	sp, #80	@ 0x50
 8001418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141a:	f107 0320 	add.w	r3, r7, #32
 800141e:	2230      	movs	r2, #48	@ 0x30
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f004 ff9e 	bl	8006364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	4b28      	ldr	r3, [pc, #160]	@ (80014e0 <SystemClock_Config+0xcc>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	4a27      	ldr	r2, [pc, #156]	@ (80014e0 <SystemClock_Config+0xcc>)
 8001442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001446:	6413      	str	r3, [r2, #64]	@ 0x40
 8001448:	4b25      	ldr	r3, [pc, #148]	@ (80014e0 <SystemClock_Config+0xcc>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001454:	2300      	movs	r3, #0
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <SystemClock_Config+0xd0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a21      	ldr	r2, [pc, #132]	@ (80014e4 <SystemClock_Config+0xd0>)
 800145e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <SystemClock_Config+0xd0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001470:	2301      	movs	r3, #1
 8001472:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001474:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147a:	2302      	movs	r3, #2
 800147c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800147e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001482:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001484:	2308      	movs	r3, #8
 8001486:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001488:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800148c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800148e:	2304      	movs	r3, #4
 8001490:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001492:	2304      	movs	r3, #4
 8001494:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001496:	f107 0320 	add.w	r3, r7, #32
 800149a:	4618      	mov	r0, r3
 800149c:	f001 fff0 	bl	8003480 <HAL_RCC_OscConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014a6:	f000 fc25 	bl	8001cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014aa:	230f      	movs	r3, #15
 80014ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ae:	2302      	movs	r3, #2
 80014b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	2102      	movs	r1, #2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f002 fa52 	bl	8003970 <HAL_RCC_ClockConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014d2:	f000 fc0f 	bl	8001cf4 <Error_Handler>
  }
}
 80014d6:	bf00      	nop
 80014d8:	3750      	adds	r7, #80	@ 0x50
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40007000 	.word	0x40007000

080014e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014ec:	4b13      	ldr	r3, [pc, #76]	@ (800153c <MX_I2C1_Init+0x54>)
 80014ee:	4a14      	ldr	r2, [pc, #80]	@ (8001540 <MX_I2C1_Init+0x58>)
 80014f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80014f2:	4b12      	ldr	r3, [pc, #72]	@ (800153c <MX_I2C1_Init+0x54>)
 80014f4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80014f8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <MX_I2C1_Init+0x54>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001500:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <MX_I2C1_Init+0x54>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001506:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <MX_I2C1_Init+0x54>)
 8001508:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800150c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <MX_I2C1_Init+0x54>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001514:	4b09      	ldr	r3, [pc, #36]	@ (800153c <MX_I2C1_Init+0x54>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800151a:	4b08      	ldr	r3, [pc, #32]	@ (800153c <MX_I2C1_Init+0x54>)
 800151c:	2200      	movs	r2, #0
 800151e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <MX_I2C1_Init+0x54>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	@ (800153c <MX_I2C1_Init+0x54>)
 8001528:	f001 fb0c 	bl	8002b44 <HAL_I2C_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001532:	f000 fbdf 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200008e0 	.word	0x200008e0
 8001540:	40005400 	.word	0x40005400

08001544 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08e      	sub	sp, #56	@ 0x38
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	f107 0320 	add.w	r3, r7, #32
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
 8001570:	615a      	str	r2, [r3, #20]
 8001572:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001574:	4b3d      	ldr	r3, [pc, #244]	@ (800166c <MX_TIM3_Init+0x128>)
 8001576:	4a3e      	ldr	r2, [pc, #248]	@ (8001670 <MX_TIM3_Init+0x12c>)
 8001578:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800157a:	4b3c      	ldr	r3, [pc, #240]	@ (800166c <MX_TIM3_Init+0x128>)
 800157c:	2253      	movs	r2, #83	@ 0x53
 800157e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001580:	4b3a      	ldr	r3, [pc, #232]	@ (800166c <MX_TIM3_Init+0x128>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001586:	4b39      	ldr	r3, [pc, #228]	@ (800166c <MX_TIM3_Init+0x128>)
 8001588:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800158c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158e:	4b37      	ldr	r3, [pc, #220]	@ (800166c <MX_TIM3_Init+0x128>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001594:	4b35      	ldr	r3, [pc, #212]	@ (800166c <MX_TIM3_Init+0x128>)
 8001596:	2280      	movs	r2, #128	@ 0x80
 8001598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800159a:	4834      	ldr	r0, [pc, #208]	@ (800166c <MX_TIM3_Init+0x128>)
 800159c:	f002 fc08 	bl	8003db0 <HAL_TIM_Base_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80015a6:	f000 fba5 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015b4:	4619      	mov	r1, r3
 80015b6:	482d      	ldr	r0, [pc, #180]	@ (800166c <MX_TIM3_Init+0x128>)
 80015b8:	f002 ff68 	bl	800448c <HAL_TIM_ConfigClockSource>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80015c2:	f000 fb97 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015c6:	4829      	ldr	r0, [pc, #164]	@ (800166c <MX_TIM3_Init+0x128>)
 80015c8:	f002 fca4 	bl	8003f14 <HAL_TIM_PWM_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015d2:	f000 fb8f 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	4619      	mov	r1, r3
 80015e4:	4821      	ldr	r0, [pc, #132]	@ (800166c <MX_TIM3_Init+0x128>)
 80015e6:	f003 fb13 	bl	8004c10 <HAL_TIMEx_MasterConfigSynchronization>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80015f0:	f000 fb80 	bl	8001cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f4:	2360      	movs	r3, #96	@ 0x60
 80015f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2200      	movs	r2, #0
 8001608:	4619      	mov	r1, r3
 800160a:	4818      	ldr	r0, [pc, #96]	@ (800166c <MX_TIM3_Init+0x128>)
 800160c:	f002 fe7c 	bl	8004308 <HAL_TIM_PWM_ConfigChannel>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001616:	f000 fb6d 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2204      	movs	r2, #4
 800161e:	4619      	mov	r1, r3
 8001620:	4812      	ldr	r0, [pc, #72]	@ (800166c <MX_TIM3_Init+0x128>)
 8001622:	f002 fe71 	bl	8004308 <HAL_TIM_PWM_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800162c:	f000 fb62 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2208      	movs	r2, #8
 8001634:	4619      	mov	r1, r3
 8001636:	480d      	ldr	r0, [pc, #52]	@ (800166c <MX_TIM3_Init+0x128>)
 8001638:	f002 fe66 	bl	8004308 <HAL_TIM_PWM_ConfigChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001642:	f000 fb57 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	220c      	movs	r2, #12
 800164a:	4619      	mov	r1, r3
 800164c:	4807      	ldr	r0, [pc, #28]	@ (800166c <MX_TIM3_Init+0x128>)
 800164e:	f002 fe5b 	bl	8004308 <HAL_TIM_PWM_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001658:	f000 fb4c 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800165c:	4803      	ldr	r0, [pc, #12]	@ (800166c <MX_TIM3_Init+0x128>)
 800165e:	f000 fbfd 	bl	8001e5c <HAL_TIM_MspPostInit>

}
 8001662:	bf00      	nop
 8001664:	3738      	adds	r7, #56	@ 0x38
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000934 	.word	0x20000934
 8001670:	40000400 	.word	0x40000400

08001674 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08e      	sub	sp, #56	@ 0x38
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001688:	f107 0320 	add.w	r3, r7, #32
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
 80016a0:	615a      	str	r2, [r3, #20]
 80016a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016a4:	4b2d      	ldr	r3, [pc, #180]	@ (800175c <MX_TIM4_Init+0xe8>)
 80016a6:	4a2e      	ldr	r2, [pc, #184]	@ (8001760 <MX_TIM4_Init+0xec>)
 80016a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80016aa:	4b2c      	ldr	r3, [pc, #176]	@ (800175c <MX_TIM4_Init+0xe8>)
 80016ac:	2253      	movs	r2, #83	@ 0x53
 80016ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b2a      	ldr	r3, [pc, #168]	@ (800175c <MX_TIM4_Init+0xe8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 80016b6:	4b29      	ldr	r3, [pc, #164]	@ (800175c <MX_TIM4_Init+0xe8>)
 80016b8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80016bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b27      	ldr	r3, [pc, #156]	@ (800175c <MX_TIM4_Init+0xe8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c4:	4b25      	ldr	r3, [pc, #148]	@ (800175c <MX_TIM4_Init+0xe8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016ca:	4824      	ldr	r0, [pc, #144]	@ (800175c <MX_TIM4_Init+0xe8>)
 80016cc:	f002 fb70 	bl	8003db0 <HAL_TIM_Base_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80016d6:	f000 fb0d 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016de:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016e4:	4619      	mov	r1, r3
 80016e6:	481d      	ldr	r0, [pc, #116]	@ (800175c <MX_TIM4_Init+0xe8>)
 80016e8:	f002 fed0 	bl	800448c <HAL_TIM_ConfigClockSource>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80016f2:	f000 faff 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016f6:	4819      	ldr	r0, [pc, #100]	@ (800175c <MX_TIM4_Init+0xe8>)
 80016f8:	f002 fc0c 	bl	8003f14 <HAL_TIM_PWM_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001702:	f000 faf7 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800170e:	f107 0320 	add.w	r3, r7, #32
 8001712:	4619      	mov	r1, r3
 8001714:	4811      	ldr	r0, [pc, #68]	@ (800175c <MX_TIM4_Init+0xe8>)
 8001716:	f003 fa7b 	bl	8004c10 <HAL_TIMEx_MasterConfigSynchronization>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001720:	f000 fae8 	bl	8001cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001724:	2360      	movs	r3, #96	@ 0x60
 8001726:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001728:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800172c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2200      	movs	r2, #0
 800173a:	4619      	mov	r1, r3
 800173c:	4807      	ldr	r0, [pc, #28]	@ (800175c <MX_TIM4_Init+0xe8>)
 800173e:	f002 fde3 	bl	8004308 <HAL_TIM_PWM_ConfigChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001748:	f000 fad4 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800174c:	4803      	ldr	r0, [pc, #12]	@ (800175c <MX_TIM4_Init+0xe8>)
 800174e:	f000 fb85 	bl	8001e5c <HAL_TIM_MspPostInit>

}
 8001752:	bf00      	nop
 8001754:	3738      	adds	r7, #56	@ 0x38
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000097c 	.word	0x2000097c
 8001760:	40000800 	.word	0x40000800

08001764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_USART2_UART_Init+0x4c>)
 800176a:	4a12      	ldr	r2, [pc, #72]	@ (80017b4 <MX_USART2_UART_Init+0x50>)
 800176c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <MX_USART2_UART_Init+0x4c>)
 8001770:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <MX_USART2_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <MX_USART2_UART_Init+0x4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <MX_USART2_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001788:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <MX_USART2_UART_Init+0x4c>)
 800178a:	220c      	movs	r2, #12
 800178c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <MX_USART2_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <MX_USART2_UART_Init+0x4c>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <MX_USART2_UART_Init+0x4c>)
 800179c:	f003 faba 	bl	8004d14 <HAL_UART_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017a6:	f000 faa5 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200009c4 	.word	0x200009c4
 80017b4:	40004400 	.word	0x40004400

080017b8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <MX_USART6_UART_Init+0x4c>)
 80017be:	4a12      	ldr	r2, [pc, #72]	@ (8001808 <MX_USART6_UART_Init+0x50>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <MX_USART6_UART_Init+0x4c>)
 80017c4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80017c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <MX_USART6_UART_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <MX_USART6_UART_Init+0x4c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <MX_USART6_UART_Init+0x4c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <MX_USART6_UART_Init+0x4c>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <MX_USART6_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <MX_USART6_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	@ (8001804 <MX_USART6_UART_Init+0x4c>)
 80017f0:	f003 fa90 	bl	8004d14 <HAL_UART_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017fa:	f000 fa7b 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000a0c 	.word	0x20000a0c
 8001808:	40011400 	.word	0x40011400

0800180c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	@ 0x28
 8001810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b46      	ldr	r3, [pc, #280]	@ (8001940 <MX_GPIO_Init+0x134>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a45      	ldr	r2, [pc, #276]	@ (8001940 <MX_GPIO_Init+0x134>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b43      	ldr	r3, [pc, #268]	@ (8001940 <MX_GPIO_Init+0x134>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b3f      	ldr	r3, [pc, #252]	@ (8001940 <MX_GPIO_Init+0x134>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a3e      	ldr	r2, [pc, #248]	@ (8001940 <MX_GPIO_Init+0x134>)
 8001848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b3c      	ldr	r3, [pc, #240]	@ (8001940 <MX_GPIO_Init+0x134>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	4b38      	ldr	r3, [pc, #224]	@ (8001940 <MX_GPIO_Init+0x134>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4a37      	ldr	r2, [pc, #220]	@ (8001940 <MX_GPIO_Init+0x134>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4b35      	ldr	r3, [pc, #212]	@ (8001940 <MX_GPIO_Init+0x134>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4b31      	ldr	r3, [pc, #196]	@ (8001940 <MX_GPIO_Init+0x134>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	4a30      	ldr	r2, [pc, #192]	@ (8001940 <MX_GPIO_Init+0x134>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6313      	str	r3, [r2, #48]	@ 0x30
 8001886:	4b2e      	ldr	r3, [pc, #184]	@ (8001940 <MX_GPIO_Init+0x134>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2120      	movs	r1, #32
 8001896:	482b      	ldr	r0, [pc, #172]	@ (8001944 <MX_GPIO_Init+0x138>)
 8001898:	f001 f922 	bl	8002ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018a2:	4829      	ldr	r0, [pc, #164]	@ (8001948 <MX_GPIO_Init+0x13c>)
 80018a4:	f001 f91c 	bl	8002ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	4822      	ldr	r0, [pc, #136]	@ (8001948 <MX_GPIO_Init+0x13c>)
 80018c0:	f000 ff72 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0_EXTI0_BUTTON_Pin */
  GPIO_InitStruct.Pin = PC0_EXTI0_BUTTON_Pin;
 80018c4:	2301      	movs	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PC0_EXTI0_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	481b      	ldr	r0, [pc, #108]	@ (8001948 <MX_GPIO_Init+0x13c>)
 80018da:	f000 ff65 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018de:	2320      	movs	r3, #32
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	4813      	ldr	r0, [pc, #76]	@ (8001944 <MX_GPIO_Init+0x138>)
 80018f6:	f000 ff57 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80018fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001900:	2301      	movs	r3, #1
 8001902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	480d      	ldr	r0, [pc, #52]	@ (8001948 <MX_GPIO_Init+0x13c>)
 8001914:	f000 ff48 	bl	80027a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	2006      	movs	r0, #6
 800191e:	f000 fe7a 	bl	8002616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001922:	2006      	movs	r0, #6
 8001924:	f000 fe93 	bl	800264e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001928:	2200      	movs	r2, #0
 800192a:	2100      	movs	r1, #0
 800192c:	2028      	movs	r0, #40	@ 0x28
 800192e:	f000 fe72 	bl	8002616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001932:	2028      	movs	r0, #40	@ 0x28
 8001934:	f000 fe8b 	bl	800264e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001938:	bf00      	nop
 800193a:	3728      	adds	r7, #40	@ 0x28
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	40020000 	.word	0x40020000
 8001948:	40020800 	.word	0x40020800

0800194c <MX_GPIO_LED_ON>:

/* USER CODE BEGIN 4 */
void MX_GPIO_LED_ON(int pin)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	b29b      	uxth	r3, r3
 8001958:	2201      	movs	r2, #1
 800195a:	4619      	mov	r1, r3
 800195c:	4803      	ldr	r0, [pc, #12]	@ (800196c <MX_GPIO_LED_ON+0x20>)
 800195e:	f001 f8bf 	bl	8002ae0 <HAL_GPIO_WritePin>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40020000 	.word	0x40020000

08001970 <MX_GPIO_LED_OFF>:
void MX_GPIO_LED_OFF(int pin)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	b29b      	uxth	r3, r3
 800197c:	2200      	movs	r2, #0
 800197e:	4619      	mov	r1, r3
 8001980:	4803      	ldr	r0, [pc, #12]	@ (8001990 <MX_GPIO_LED_OFF+0x20>)
 8001982:	f001 f8ad 	bl	8002ae0 <HAL_GPIO_WritePin>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40020000 	.word	0x40020000

08001994 <esp_event>:
void esp_event(char * recvBuf)
{
 8001994:	b5b0      	push	{r4, r5, r7, lr}
 8001996:	b0a2      	sub	sp, #136	@ 0x88
 8001998:	af04      	add	r7, sp, #16
 800199a:	6078      	str	r0, [r7, #4]
  int i=0;
 800199c:	2300      	movs	r3, #0
 800199e:	677b      	str	r3, [r7, #116]	@ 0x74
  char * pToken;
  char * pArray[ARR_CNT]={0};
 80019a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	2240      	movs	r2, #64	@ 0x40
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f004 fcd3 	bl	8006364 <memset>

  strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7fe fc18 	bl	80001f4 <strlen>
 80019c4:	4603      	mov	r3, r0
 80019c6:	3b01      	subs	r3, #1
 80019c8:	4a79      	ldr	r2, [pc, #484]	@ (8001bb0 <esp_event+0x21c>)
 80019ca:	2100      	movs	r1, #0
 80019cc:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4878      	ldr	r0, [pc, #480]	@ (8001bb4 <esp_event+0x220>)
 80019d2:	f004 fb55 	bl	8006080 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 80019d6:	4978      	ldr	r1, [pc, #480]	@ (8001bb8 <esp_event+0x224>)
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f004 fceb 	bl	80063b4 <strtok>
 80019de:	6738      	str	r0, [r7, #112]	@ 0x70
  while(pToken != NULL)
 80019e0:	e011      	b.n	8001a06 <esp_event+0x72>
  {
    pArray[i] = pToken;
 80019e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	3378      	adds	r3, #120	@ 0x78
 80019e8:	443b      	add	r3, r7
 80019ea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80019ec:	f843 2c2c 	str.w	r2, [r3, #-44]
    if(++i >= ARR_CNT)
 80019f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019f2:	3301      	adds	r3, #1
 80019f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80019f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	dc08      	bgt.n	8001a0e <esp_event+0x7a>
      break;
    pToken = strtok(NULL,"[@]");
 80019fc:	496e      	ldr	r1, [pc, #440]	@ (8001bb8 <esp_event+0x224>)
 80019fe:	2000      	movs	r0, #0
 8001a00:	f004 fcd8 	bl	80063b4 <strtok>
 8001a04:	6738      	str	r0, [r7, #112]	@ 0x70
  while(pToken != NULL)
 8001a06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1ea      	bne.n	80019e2 <esp_event+0x4e>
 8001a0c:	e000      	b.n	8001a10 <esp_event+0x7c>
      break;
 8001a0e:	bf00      	nop
  }

  if(!strcmp(pArray[1],"LED"))
 8001a10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a12:	496a      	ldr	r1, [pc, #424]	@ (8001bbc <esp_event+0x228>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fbe3 	bl	80001e0 <strcmp>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d121      	bne.n	8001a64 <esp_event+0xd0>
  {
  	if(!strcmp(pArray[2],"ON"))
 8001a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a22:	4967      	ldr	r1, [pc, #412]	@ (8001bc0 <esp_event+0x22c>)
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fbdb 	bl	80001e0 <strcmp>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d103      	bne.n	8001a38 <esp_event+0xa4>
  	{
  		MX_GPIO_LED_ON(LD2_Pin);
 8001a30:	2020      	movs	r0, #32
 8001a32:	f7ff ff8b 	bl	800194c <MX_GPIO_LED_ON>
 8001a36:	e00a      	b.n	8001a4e <esp_event+0xba>
  	}
	else if(!strcmp(pArray[2],"OFF"))
 8001a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a3a:	4962      	ldr	r1, [pc, #392]	@ (8001bc4 <esp_event+0x230>)
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fbcf 	bl	80001e0 <strcmp>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d102      	bne.n	8001a4e <esp_event+0xba>
	{
		MX_GPIO_LED_OFF(LD2_Pin);
 8001a48:	2020      	movs	r0, #32
 8001a4a:	f7ff ff91 	bl	8001970 <MX_GPIO_LED_OFF>
	}
	sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 8001a4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a50:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a54:	f107 000c 	add.w	r0, r7, #12
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	495a      	ldr	r1, [pc, #360]	@ (8001bc8 <esp_event+0x234>)
 8001a5e:	f004 fb87 	bl	8006170 <siprintf>
 8001a62:	e093      	b.n	8001b8c <esp_event+0x1f8>
  }
  else if(!strcmp(pArray[1],"SERVO"))
 8001a64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a66:	4959      	ldr	r1, [pc, #356]	@ (8001bcc <esp_event+0x238>)
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fbb9 	bl	80001e0 <strcmp>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d122      	bne.n	8001aba <esp_event+0x126>
  {
	int value = atoi(pArray[2]);
 8001a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a76:	4618      	mov	r0, r3
 8001a78:	f004 f9b8 	bl	8005dec <atoi>
 8001a7c:	6638      	str	r0, [r7, #96]	@ 0x60
	value = map(value, 0, 180, 500, 2500);
 8001a7e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001a88:	22b4      	movs	r2, #180	@ 0xb4
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001a8e:	f000 f8ef 	bl	8001c70 <map>
 8001a92:	6638      	str	r0, [r7, #96]	@ 0x60
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1,(value-1)<0?0:value-1);
 8001a94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	bfb8      	it	lt
 8001a9a:	2301      	movlt	r3, #1
 8001a9c:	1e5a      	subs	r2, r3, #1
 8001a9e:	4b4c      	ldr	r3, [pc, #304]	@ (8001bd0 <esp_event+0x23c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	635a      	str	r2, [r3, #52]	@ 0x34
	sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 8001aa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001aa6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aaa:	f107 000c 	add.w	r0, r7, #12
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4945      	ldr	r1, [pc, #276]	@ (8001bc8 <esp_event+0x234>)
 8001ab4:	f004 fb5c 	bl	8006170 <siprintf>
 8001ab8:	e068      	b.n	8001b8c <esp_event+0x1f8>
  }
  else if(!strcmp(pArray[1],"RGB"))
 8001aba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001abc:	4945      	ldr	r1, [pc, #276]	@ (8001bd4 <esp_event+0x240>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fb8e 	bl	80001e0 <strcmp>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d14b      	bne.n	8001b62 <esp_event+0x1ce>
  {

	if(!strcmp(pArray[2],"OFF"))
 8001aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001acc:	493d      	ldr	r1, [pc, #244]	@ (8001bc4 <esp_event+0x230>)
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fb86 	bl	80001e0 <strcmp>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10d      	bne.n	8001af6 <esp_event+0x162>
	{
		rgbFlag = 0;
 8001ada:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd8 <esp_event+0x244>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
		sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 8001ae0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ae2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae6:	f107 000c 	add.w	r0, r7, #12
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	460b      	mov	r3, r1
 8001aee:	4936      	ldr	r1, [pc, #216]	@ (8001bc8 <esp_event+0x234>)
 8001af0:	f004 fb3e 	bl	8006170 <siprintf>
 8001af4:	e04a      	b.n	8001b8c <esp_event+0x1f8>
	}
	else
	{
		rgbFlag = 1;
 8001af6:	4b38      	ldr	r3, [pc, #224]	@ (8001bd8 <esp_event+0x244>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
		int red = atoi(pArray[2]) * 10;
 8001afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 f974 	bl	8005dec <atoi>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
		int green = atoi(pArray[3]) * 10;
 8001b10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b12:	4618      	mov	r0, r3
 8001b14:	f004 f96a 	bl	8005dec <atoi>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	66bb      	str	r3, [r7, #104]	@ 0x68
		int blue = atoi(pArray[4]) *10;
 8001b24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b26:	4618      	mov	r0, r3
 8001b28:	f004 f960 	bl	8005dec <atoi>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	667b      	str	r3, [r7, #100]	@ 0x64
		set_rgb_led(red,green,blue);
 8001b38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001b3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001b3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001b3e:	f000 f8b3 	bl	8001ca8 <set_rgb_led>
		sprintf(sendBuf,"[%s]%s@%s@%s@%s\n",pArray[0],pArray[1],pArray[2],pArray[3],pArray[4]);
 8001b42:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8001b44:	6d3d      	ldr	r5, [r7, #80]	@ 0x50
 8001b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001b4a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001b4c:	f107 000c 	add.w	r0, r7, #12
 8001b50:	9102      	str	r1, [sp, #8]
 8001b52:	9201      	str	r2, [sp, #4]
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	462b      	mov	r3, r5
 8001b58:	4622      	mov	r2, r4
 8001b5a:	4920      	ldr	r1, [pc, #128]	@ (8001bdc <esp_event+0x248>)
 8001b5c:	f004 fb08 	bl	8006170 <siprintf>
 8001b60:	e014      	b.n	8001b8c <esp_event+0x1f8>
	}
  }
  else if(!strncmp(pArray[1]," New conn",8))
 8001b62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b64:	2208      	movs	r2, #8
 8001b66:	491e      	ldr	r1, [pc, #120]	@ (8001be0 <esp_event+0x24c>)
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f004 fc10 	bl	800638e <strncmp>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d017      	beq.n	8001ba4 <esp_event+0x210>
  {
//	   printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
     return;
  }
  else if(!strncmp(pArray[1]," Already log",8))
 8001b74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b76:	2208      	movs	r2, #8
 8001b78:	491a      	ldr	r1, [pc, #104]	@ (8001be4 <esp_event+0x250>)
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f004 fc07 	bl	800638e <strncmp>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d110      	bne.n	8001ba8 <esp_event+0x214>
  {
// 	    printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
	  esp_client_conn();
 8001b86:	f7ff f90b 	bl	8000da0 <esp_client_conn>
      return;
 8001b8a:	e00e      	b.n	8001baa <esp_event+0x216>
  }
  else
      return;

  esp_send_data(sendBuf);
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fa2d 	bl	8000ff0 <esp_send_data>
  printf("Debug send : %s\r\n",sendBuf);
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4812      	ldr	r0, [pc, #72]	@ (8001be8 <esp_event+0x254>)
 8001b9e:	f004 fa6f 	bl	8006080 <iprintf>
 8001ba2:	e002      	b.n	8001baa <esp_event+0x216>
     return;
 8001ba4:	bf00      	nop
 8001ba6:	e000      	b.n	8001baa <esp_event+0x216>
      return;
 8001ba8:	bf00      	nop
}
 8001baa:	3778      	adds	r7, #120	@ 0x78
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb0:	20000a60 	.word	0x20000a60
 8001bb4:	08007774 	.word	0x08007774
 8001bb8:	08007788 	.word	0x08007788
 8001bbc:	0800778c 	.word	0x0800778c
 8001bc0:	08007790 	.word	0x08007790
 8001bc4:	08007794 	.word	0x08007794
 8001bc8:	08007798 	.word	0x08007798
 8001bcc:	080077a4 	.word	0x080077a4
 8001bd0:	2000097c 	.word	0x2000097c
 8001bd4:	080077ac 	.word	0x080077ac
 8001bd8:	20000a5c 	.word	0x20000a5c
 8001bdc:	080077b0 	.word	0x080077b0
 8001be0:	080077c4 	.word	0x080077c4
 8001be4:	080077d0 	.word	0x080077d0
 8001be8:	080077e0 	.word	0x080077e0

08001bec <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		//1ms 마다 호출
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001bfc:	6013      	str	r3, [r2, #0]
	if(tim3Cnt >= 1000) //1ms * 1000 = 1Sec
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c06:	db0a      	blt.n	8001c1e <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 8001c08:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	4a07      	ldr	r2, [pc, #28]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001c16:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 8001c18:	4b04      	ldr	r3, [pc, #16]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
	}
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000aa0 	.word	0x20000aa0
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000a54 	.word	0x20000a54

08001c38 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
//	printf("EXTI %d\r\n",GPIO_Pin);
	switch(GPIO_Pin)
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_EXTI_Callback+0x18>
 8001c48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c4c:	d004      	beq.n	8001c58 <HAL_GPIO_EXTI_Callback+0x20>
			break;
		case GPIO_PIN_13:
			keyNo = 2;
			break;
	}
}
 8001c4e:	e007      	b.n	8001c60 <HAL_GPIO_EXTI_Callback+0x28>
			keyNo = 1;
 8001c50:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_GPIO_EXTI_Callback+0x34>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]
			break;
 8001c56:	e003      	b.n	8001c60 <HAL_GPIO_EXTI_Callback+0x28>
			keyNo = 2;
 8001c58:	4b04      	ldr	r3, [pc, #16]	@ (8001c6c <HAL_GPIO_EXTI_Callback+0x34>)
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	601a      	str	r2, [r3, #0]
			break;
 8001c5e:	bf00      	nop
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	20000a58 	.word	0x20000a58

08001c70 <map>:
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	69b9      	ldr	r1, [r7, #24]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	1a8a      	subs	r2, r1, r2
 8001c8a:	fb03 f202 	mul.w	r2, r3, r2
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	1acb      	subs	r3, r1, r3
 8001c94:	fb92 f2f3 	sdiv	r2, r2, r3
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	4413      	add	r3, r2
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <set_rgb_led>:
void set_rgb_led(int red, int green, int blue)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_2,(red-1)<0?0:red-1);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	bfb8      	it	lt
 8001cba:	2301      	movlt	r3, #1
 8001cbc:	1e5a      	subs	r2, r3, #1
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <set_rgb_led+0x48>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	639a      	str	r2, [r3, #56]	@ 0x38
__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,(green-1)<0?0:green-1);
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	bfb8      	it	lt
 8001cca:	2301      	movlt	r3, #1
 8001ccc:	1e5a      	subs	r2, r3, #1
 8001cce:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <set_rgb_led+0x48>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	63da      	str	r2, [r3, #60]	@ 0x3c
__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_4,(blue-1)<0?0:blue-1);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	bfb8      	it	lt
 8001cda:	2301      	movlt	r3, #1
 8001cdc:	1e5a      	subs	r2, r3, #1
 8001cde:	4b04      	ldr	r3, [pc, #16]	@ (8001cf0 <set_rgb_led+0x48>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	20000934 	.word	0x20000934

08001cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf8:	b672      	cpsid	i
}
 8001cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <Error_Handler+0x8>

08001d00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d16:	4b0d      	ldr	r3, [pc, #52]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	603b      	str	r3, [r7, #0]
 8001d26:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	4a08      	ldr	r2, [pc, #32]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d3e:	2007      	movs	r0, #7
 8001d40:	f000 fc5e 	bl	8002600 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40023800 	.word	0x40023800

08001d50 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	@ 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a19      	ldr	r2, [pc, #100]	@ (8001dd4 <HAL_I2C_MspInit+0x84>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d12c      	bne.n	8001dcc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b18      	ldr	r3, [pc, #96]	@ (8001dd8 <HAL_I2C_MspInit+0x88>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	4a17      	ldr	r2, [pc, #92]	@ (8001dd8 <HAL_I2C_MspInit+0x88>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d82:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <HAL_I2C_MspInit+0x88>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d94:	2312      	movs	r3, #18
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001da0:	2304      	movs	r3, #4
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <HAL_I2C_MspInit+0x8c>)
 8001dac:	f000 fcfc 	bl	80027a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <HAL_I2C_MspInit+0x88>)
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	4a07      	ldr	r2, [pc, #28]	@ (8001dd8 <HAL_I2C_MspInit+0x88>)
 8001dba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc0:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <HAL_I2C_MspInit+0x88>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	@ 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40005400 	.word	0x40005400
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020400 	.word	0x40020400

08001de0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a18      	ldr	r2, [pc, #96]	@ (8001e50 <HAL_TIM_Base_MspInit+0x70>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d116      	bne.n	8001e20 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b17      	ldr	r3, [pc, #92]	@ (8001e54 <HAL_TIM_Base_MspInit+0x74>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	4a16      	ldr	r2, [pc, #88]	@ (8001e54 <HAL_TIM_Base_MspInit+0x74>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e02:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <HAL_TIM_Base_MspInit+0x74>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	201d      	movs	r0, #29
 8001e14:	f000 fbff 	bl	8002616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e18:	201d      	movs	r0, #29
 8001e1a:	f000 fc18 	bl	800264e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e1e:	e012      	b.n	8001e46 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0c      	ldr	r2, [pc, #48]	@ (8001e58 <HAL_TIM_Base_MspInit+0x78>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d10d      	bne.n	8001e46 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <HAL_TIM_Base_MspInit+0x74>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	4a08      	ldr	r2, [pc, #32]	@ (8001e54 <HAL_TIM_Base_MspInit+0x74>)
 8001e34:	f043 0304 	orr.w	r3, r3, #4
 8001e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e3a:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <HAL_TIM_Base_MspInit+0x74>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40000400 	.word	0x40000400
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40000800 	.word	0x40000800

08001e5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	@ 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a33      	ldr	r2, [pc, #204]	@ (8001f48 <HAL_TIM_MspPostInit+0xec>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d13c      	bne.n	8001ef8 <HAL_TIM_MspPostInit+0x9c>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	4b32      	ldr	r3, [pc, #200]	@ (8001f4c <HAL_TIM_MspPostInit+0xf0>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	4a31      	ldr	r2, [pc, #196]	@ (8001f4c <HAL_TIM_MspPostInit+0xf0>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f4c <HAL_TIM_MspPostInit+0xf0>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f4c <HAL_TIM_MspPostInit+0xf0>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8001f4c <HAL_TIM_MspPostInit+0xf0>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eaa:	4b28      	ldr	r3, [pc, #160]	@ (8001f4c <HAL_TIM_MspPostInit+0xf0>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eb6:	23c0      	movs	r3, #192	@ 0xc0
 8001eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	481f      	ldr	r0, [pc, #124]	@ (8001f50 <HAL_TIM_MspPostInit+0xf4>)
 8001ed2:	f000 fc69 	bl	80027a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4818      	ldr	r0, [pc, #96]	@ (8001f54 <HAL_TIM_MspPostInit+0xf8>)
 8001ef2:	f000 fc59 	bl	80027a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ef6:	e022      	b.n	8001f3e <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM4)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a16      	ldr	r2, [pc, #88]	@ (8001f58 <HAL_TIM_MspPostInit+0xfc>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d11d      	bne.n	8001f3e <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <HAL_TIM_MspPostInit+0xf0>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	4a10      	ldr	r2, [pc, #64]	@ (8001f4c <HAL_TIM_MspPostInit+0xf0>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f12:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <HAL_TIM_MspPostInit+0xf0>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f1e:	2340      	movs	r3, #64	@ 0x40
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4619      	mov	r1, r3
 8001f38:	4806      	ldr	r0, [pc, #24]	@ (8001f54 <HAL_TIM_MspPostInit+0xf8>)
 8001f3a:	f000 fc35 	bl	80027a8 <HAL_GPIO_Init>
}
 8001f3e:	bf00      	nop
 8001f40:	3728      	adds	r7, #40	@ 0x28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40000400 	.word	0x40000400
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020000 	.word	0x40020000
 8001f54:	40020400 	.word	0x40020400
 8001f58:	40000800 	.word	0x40000800

08001f5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08c      	sub	sp, #48	@ 0x30
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a3a      	ldr	r2, [pc, #232]	@ (8002064 <HAL_UART_MspInit+0x108>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d134      	bne.n	8001fe8 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	4b39      	ldr	r3, [pc, #228]	@ (8002068 <HAL_UART_MspInit+0x10c>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	4a38      	ldr	r2, [pc, #224]	@ (8002068 <HAL_UART_MspInit+0x10c>)
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8e:	4b36      	ldr	r3, [pc, #216]	@ (8002068 <HAL_UART_MspInit+0x10c>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	61bb      	str	r3, [r7, #24]
 8001f98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	4b32      	ldr	r3, [pc, #200]	@ (8002068 <HAL_UART_MspInit+0x10c>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	4a31      	ldr	r2, [pc, #196]	@ (8002068 <HAL_UART_MspInit+0x10c>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001faa:	4b2f      	ldr	r3, [pc, #188]	@ (8002068 <HAL_UART_MspInit+0x10c>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fb6:	230c      	movs	r3, #12
 8001fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fca:	f107 031c 	add.w	r3, r7, #28
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4826      	ldr	r0, [pc, #152]	@ (800206c <HAL_UART_MspInit+0x110>)
 8001fd2:	f000 fbe9 	bl	80027a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2026      	movs	r0, #38	@ 0x26
 8001fdc:	f000 fb1b 	bl	8002616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fe0:	2026      	movs	r0, #38	@ 0x26
 8001fe2:	f000 fb34 	bl	800264e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001fe6:	e038      	b.n	800205a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a20      	ldr	r2, [pc, #128]	@ (8002070 <HAL_UART_MspInit+0x114>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d133      	bne.n	800205a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8002068 <HAL_UART_MspInit+0x10c>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffa:	4a1b      	ldr	r2, [pc, #108]	@ (8002068 <HAL_UART_MspInit+0x10c>)
 8001ffc:	f043 0320 	orr.w	r3, r3, #32
 8002000:	6453      	str	r3, [r2, #68]	@ 0x44
 8002002:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <HAL_UART_MspInit+0x10c>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002006:	f003 0320 	and.w	r3, r3, #32
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <HAL_UART_MspInit+0x10c>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	4a14      	ldr	r2, [pc, #80]	@ (8002068 <HAL_UART_MspInit+0x10c>)
 8002018:	f043 0304 	orr.w	r3, r3, #4
 800201c:	6313      	str	r3, [r2, #48]	@ 0x30
 800201e:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <HAL_UART_MspInit+0x10c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800202a:	23c0      	movs	r3, #192	@ 0xc0
 800202c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002036:	2303      	movs	r3, #3
 8002038:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800203a:	2308      	movs	r3, #8
 800203c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	4619      	mov	r1, r3
 8002044:	480b      	ldr	r0, [pc, #44]	@ (8002074 <HAL_UART_MspInit+0x118>)
 8002046:	f000 fbaf 	bl	80027a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	2047      	movs	r0, #71	@ 0x47
 8002050:	f000 fae1 	bl	8002616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002054:	2047      	movs	r0, #71	@ 0x47
 8002056:	f000 fafa 	bl	800264e <HAL_NVIC_EnableIRQ>
}
 800205a:	bf00      	nop
 800205c:	3730      	adds	r7, #48	@ 0x30
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40004400 	.word	0x40004400
 8002068:	40023800 	.word	0x40023800
 800206c:	40020000 	.word	0x40020000
 8002070:	40011400 	.word	0x40011400
 8002074:	40020800 	.word	0x40020800

08002078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <NMI_Handler+0x4>

08002080 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <HardFault_Handler+0x4>

08002088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <MemManage_Handler+0x4>

08002090 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <BusFault_Handler+0x4>

08002098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <UsageFault_Handler+0x4>

080020a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ce:	f000 f983 	bl	80023d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC0_EXTI0_BUTTON_Pin);
 80020da:	2001      	movs	r0, #1
 80020dc:	f000 fd1a 	bl	8002b14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020e8:	4802      	ldr	r0, [pc, #8]	@ (80020f4 <TIM3_IRQHandler+0x10>)
 80020ea:	f002 f81d 	bl	8004128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000934 	.word	0x20000934

080020f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020fc:	4802      	ldr	r0, [pc, #8]	@ (8002108 <USART2_IRQHandler+0x10>)
 80020fe:	f002 ff09 	bl	8004f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200009c4 	.word	0x200009c4

0800210c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002110:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002114:	f000 fcfe 	bl	8002b14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}

0800211c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002120:	4802      	ldr	r0, [pc, #8]	@ (800212c <USART6_IRQHandler+0x10>)
 8002122:	f002 fef7 	bl	8004f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000a0c 	.word	0x20000a0c

08002130 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return 1;
 8002134:	2301      	movs	r3, #1
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <_kill>:

int _kill(int pid, int sig)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800214a:	f004 f9eb 	bl	8006524 <__errno>
 800214e:	4603      	mov	r3, r0
 8002150:	2216      	movs	r2, #22
 8002152:	601a      	str	r2, [r3, #0]
  return -1;
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_exit>:

void _exit (int status)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002168:	f04f 31ff 	mov.w	r1, #4294967295
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ffe7 	bl	8002140 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002172:	bf00      	nop
 8002174:	e7fd      	b.n	8002172 <_exit+0x12>

08002176 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e00a      	b.n	800219e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002188:	f3af 8000 	nop.w
 800218c:	4601      	mov	r1, r0
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	60ba      	str	r2, [r7, #8]
 8002194:	b2ca      	uxtb	r2, r1
 8002196:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3301      	adds	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	dbf0      	blt.n	8002188 <_read+0x12>
  }

  return len;
 80021a6:	687b      	ldr	r3, [r7, #4]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	e009      	b.n	80021d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	60ba      	str	r2, [r7, #8]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe ff52 	bl	8001074 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	3301      	adds	r3, #1
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	429a      	cmp	r2, r3
 80021dc:	dbf1      	blt.n	80021c2 <_write+0x12>
  }
  return len;
 80021de:	687b      	ldr	r3, [r7, #4]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_close>:

int _close(int file)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002210:	605a      	str	r2, [r3, #4]
  return 0;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_isatty>:

int _isatty(int file)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002228:	2301      	movs	r3, #1
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002236:	b480      	push	{r7}
 8002238:	b085      	sub	sp, #20
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002258:	4a14      	ldr	r2, [pc, #80]	@ (80022ac <_sbrk+0x5c>)
 800225a:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <_sbrk+0x60>)
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002264:	4b13      	ldr	r3, [pc, #76]	@ (80022b4 <_sbrk+0x64>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800226c:	4b11      	ldr	r3, [pc, #68]	@ (80022b4 <_sbrk+0x64>)
 800226e:	4a12      	ldr	r2, [pc, #72]	@ (80022b8 <_sbrk+0x68>)
 8002270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002272:	4b10      	ldr	r3, [pc, #64]	@ (80022b4 <_sbrk+0x64>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	429a      	cmp	r2, r3
 800227e:	d207      	bcs.n	8002290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002280:	f004 f950 	bl	8006524 <__errno>
 8002284:	4603      	mov	r3, r0
 8002286:	220c      	movs	r2, #12
 8002288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
 800228e:	e009      	b.n	80022a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002290:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <_sbrk+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002296:	4b07      	ldr	r3, [pc, #28]	@ (80022b4 <_sbrk+0x64>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	4a05      	ldr	r2, [pc, #20]	@ (80022b4 <_sbrk+0x64>)
 80022a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022a2:	68fb      	ldr	r3, [r7, #12]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20020000 	.word	0x20020000
 80022b0:	00000400 	.word	0x00000400
 80022b4:	20000aa4 	.word	0x20000aa4
 80022b8:	20000bf8 	.word	0x20000bf8

080022bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c0:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <SystemInit+0x20>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c6:	4a05      	ldr	r2, [pc, #20]	@ (80022dc <SystemInit+0x20>)
 80022c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 80022e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002318 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022e4:	f7ff ffea 	bl	80022bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022e8:	480c      	ldr	r0, [pc, #48]	@ (800231c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022ea:	490d      	ldr	r1, [pc, #52]	@ (8002320 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002324 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f0:	e002      	b.n	80022f8 <LoopCopyDataInit>

080022f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f6:	3304      	adds	r3, #4

080022f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022fc:	d3f9      	bcc.n	80022f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002328 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002300:	4c0a      	ldr	r4, [pc, #40]	@ (800232c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002304:	e001      	b.n	800230a <LoopFillZerobss>

08002306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002308:	3204      	adds	r2, #4

0800230a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800230c:	d3fb      	bcc.n	8002306 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800230e:	f004 f90f 	bl	8006530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002312:	f7fe fec7 	bl	80010a4 <main>
  bx  lr    
 8002316:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8002318:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800231c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002320:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002324:	08007a00 	.word	0x08007a00
  ldr r2, =_sbss
 8002328:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800232c:	20000bf8 	.word	0x20000bf8

08002330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002330:	e7fe      	b.n	8002330 <ADC_IRQHandler>
	...

08002334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002338:	4b0e      	ldr	r3, [pc, #56]	@ (8002374 <HAL_Init+0x40>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0d      	ldr	r2, [pc, #52]	@ (8002374 <HAL_Init+0x40>)
 800233e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002342:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002344:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <HAL_Init+0x40>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <HAL_Init+0x40>)
 800234a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800234e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002350:	4b08      	ldr	r3, [pc, #32]	@ (8002374 <HAL_Init+0x40>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a07      	ldr	r2, [pc, #28]	@ (8002374 <HAL_Init+0x40>)
 8002356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800235a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800235c:	2003      	movs	r0, #3
 800235e:	f000 f94f 	bl	8002600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002362:	2000      	movs	r0, #0
 8002364:	f000 f808 	bl	8002378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002368:	f7ff fcca 	bl	8001d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40023c00 	.word	0x40023c00

08002378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002380:	4b12      	ldr	r3, [pc, #72]	@ (80023cc <HAL_InitTick+0x54>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <HAL_InitTick+0x58>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4619      	mov	r1, r3
 800238a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800238e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f967 	bl	800266a <HAL_SYSTICK_Config>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00e      	b.n	80023c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b0f      	cmp	r3, #15
 80023aa:	d80a      	bhi.n	80023c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ac:	2200      	movs	r2, #0
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295
 80023b4:	f000 f92f 	bl	8002616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023b8:	4a06      	ldr	r2, [pc, #24]	@ (80023d4 <HAL_InitTick+0x5c>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	e000      	b.n	80023c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000004 	.word	0x20000004
 80023d0:	2000000c 	.word	0x2000000c
 80023d4:	20000008 	.word	0x20000008

080023d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_IncTick+0x20>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <HAL_IncTick+0x24>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <HAL_IncTick+0x24>)
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	2000000c 	.word	0x2000000c
 80023fc:	20000aa8 	.word	0x20000aa8

08002400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return uwTick;
 8002404:	4b03      	ldr	r3, [pc, #12]	@ (8002414 <HAL_GetTick+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000aa8 	.word	0x20000aa8

08002418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002420:	f7ff ffee 	bl	8002400 <HAL_GetTick>
 8002424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d005      	beq.n	800243e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002432:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <HAL_Delay+0x44>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4413      	add	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800243e:	bf00      	nop
 8002440:	f7ff ffde 	bl	8002400 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	429a      	cmp	r2, r3
 800244e:	d8f7      	bhi.n	8002440 <HAL_Delay+0x28>
  {
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	2000000c 	.word	0x2000000c

08002460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002470:	4b0c      	ldr	r3, [pc, #48]	@ (80024a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800247c:	4013      	ands	r3, r2
 800247e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002488:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800248c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002492:	4a04      	ldr	r2, [pc, #16]	@ (80024a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	60d3      	str	r3, [r2, #12]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024ac:	4b04      	ldr	r3, [pc, #16]	@ (80024c0 <__NVIC_GetPriorityGrouping+0x18>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	0a1b      	lsrs	r3, r3, #8
 80024b2:	f003 0307 	and.w	r3, r3, #7
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	db0b      	blt.n	80024ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	f003 021f 	and.w	r2, r3, #31
 80024dc:	4907      	ldr	r1, [pc, #28]	@ (80024fc <__NVIC_EnableIRQ+0x38>)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	2001      	movs	r0, #1
 80024e6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000e100 	.word	0xe000e100

08002500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	2b00      	cmp	r3, #0
 8002512:	db0a      	blt.n	800252a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	490c      	ldr	r1, [pc, #48]	@ (800254c <__NVIC_SetPriority+0x4c>)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	0112      	lsls	r2, r2, #4
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	440b      	add	r3, r1
 8002524:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002528:	e00a      	b.n	8002540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4908      	ldr	r1, [pc, #32]	@ (8002550 <__NVIC_SetPriority+0x50>)
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	3b04      	subs	r3, #4
 8002538:	0112      	lsls	r2, r2, #4
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	440b      	add	r3, r1
 800253e:	761a      	strb	r2, [r3, #24]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000e100 	.word	0xe000e100
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	@ 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f1c3 0307 	rsb	r3, r3, #7
 800256e:	2b04      	cmp	r3, #4
 8002570:	bf28      	it	cs
 8002572:	2304      	movcs	r3, #4
 8002574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3304      	adds	r3, #4
 800257a:	2b06      	cmp	r3, #6
 800257c:	d902      	bls.n	8002584 <NVIC_EncodePriority+0x30>
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3b03      	subs	r3, #3
 8002582:	e000      	b.n	8002586 <NVIC_EncodePriority+0x32>
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002588:	f04f 32ff 	mov.w	r2, #4294967295
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43da      	mvns	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	401a      	ands	r2, r3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800259c:	f04f 31ff 	mov.w	r1, #4294967295
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	43d9      	mvns	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	4313      	orrs	r3, r2
         );
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3724      	adds	r7, #36	@ 0x24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025cc:	d301      	bcc.n	80025d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ce:	2301      	movs	r3, #1
 80025d0:	e00f      	b.n	80025f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025d2:	4a0a      	ldr	r2, [pc, #40]	@ (80025fc <SysTick_Config+0x40>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025da:	210f      	movs	r1, #15
 80025dc:	f04f 30ff 	mov.w	r0, #4294967295
 80025e0:	f7ff ff8e 	bl	8002500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e4:	4b05      	ldr	r3, [pc, #20]	@ (80025fc <SysTick_Config+0x40>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ea:	4b04      	ldr	r3, [pc, #16]	@ (80025fc <SysTick_Config+0x40>)
 80025ec:	2207      	movs	r2, #7
 80025ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	e000e010 	.word	0xe000e010

08002600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff ff29 	bl	8002460 <__NVIC_SetPriorityGrouping>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002628:	f7ff ff3e 	bl	80024a8 <__NVIC_GetPriorityGrouping>
 800262c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	6978      	ldr	r0, [r7, #20]
 8002634:	f7ff ff8e 	bl	8002554 <NVIC_EncodePriority>
 8002638:	4602      	mov	r2, r0
 800263a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff5d 	bl	8002500 <__NVIC_SetPriority>
}
 8002646:	bf00      	nop
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	4603      	mov	r3, r0
 8002656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff31 	bl	80024c4 <__NVIC_EnableIRQ>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff ffa2 	bl	80025bc <SysTick_Config>
 8002678:	4603      	mov	r3, r0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002690:	f7ff feb6 	bl	8002400 <HAL_GetTick>
 8002694:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d008      	beq.n	80026b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2280      	movs	r2, #128	@ 0x80
 80026a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e052      	b.n	800275a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0216 	bic.w	r2, r2, #22
 80026c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d103      	bne.n	80026e4 <HAL_DMA_Abort+0x62>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d007      	beq.n	80026f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0208 	bic.w	r2, r2, #8
 80026f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0201 	bic.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002704:	e013      	b.n	800272e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002706:	f7ff fe7b 	bl	8002400 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b05      	cmp	r3, #5
 8002712:	d90c      	bls.n	800272e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2203      	movs	r2, #3
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e015      	b.n	800275a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1e4      	bne.n	8002706 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002740:	223f      	movs	r2, #63	@ 0x3f
 8002742:	409a      	lsls	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d004      	beq.n	8002780 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2280      	movs	r2, #128	@ 0x80
 800277a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e00c      	b.n	800279a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2205      	movs	r2, #5
 8002784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0201 	bic.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b089      	sub	sp, #36	@ 0x24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	e159      	b.n	8002a78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027c4:	2201      	movs	r2, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	429a      	cmp	r2, r3
 80027de:	f040 8148 	bne.w	8002a72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d005      	beq.n	80027fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d130      	bne.n	800285c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	2203      	movs	r2, #3
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002830:	2201      	movs	r2, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	f003 0201 	and.w	r2, r3, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b03      	cmp	r3, #3
 8002866:	d017      	beq.n	8002898 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d123      	bne.n	80028ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	08da      	lsrs	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3208      	adds	r2, #8
 80028ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	220f      	movs	r2, #15
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	08da      	lsrs	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3208      	adds	r2, #8
 80028e6:	69b9      	ldr	r1, [r7, #24]
 80028e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0203 	and.w	r2, r3, #3
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80a2 	beq.w	8002a72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4b57      	ldr	r3, [pc, #348]	@ (8002a90 <HAL_GPIO_Init+0x2e8>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002936:	4a56      	ldr	r2, [pc, #344]	@ (8002a90 <HAL_GPIO_Init+0x2e8>)
 8002938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800293c:	6453      	str	r3, [r2, #68]	@ 0x44
 800293e:	4b54      	ldr	r3, [pc, #336]	@ (8002a90 <HAL_GPIO_Init+0x2e8>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800294a:	4a52      	ldr	r2, [pc, #328]	@ (8002a94 <HAL_GPIO_Init+0x2ec>)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	3302      	adds	r3, #2
 8002952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	220f      	movs	r2, #15
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a49      	ldr	r2, [pc, #292]	@ (8002a98 <HAL_GPIO_Init+0x2f0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d019      	beq.n	80029aa <HAL_GPIO_Init+0x202>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a48      	ldr	r2, [pc, #288]	@ (8002a9c <HAL_GPIO_Init+0x2f4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_GPIO_Init+0x1fe>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a47      	ldr	r2, [pc, #284]	@ (8002aa0 <HAL_GPIO_Init+0x2f8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00d      	beq.n	80029a2 <HAL_GPIO_Init+0x1fa>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a46      	ldr	r2, [pc, #280]	@ (8002aa4 <HAL_GPIO_Init+0x2fc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d007      	beq.n	800299e <HAL_GPIO_Init+0x1f6>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a45      	ldr	r2, [pc, #276]	@ (8002aa8 <HAL_GPIO_Init+0x300>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d101      	bne.n	800299a <HAL_GPIO_Init+0x1f2>
 8002996:	2304      	movs	r3, #4
 8002998:	e008      	b.n	80029ac <HAL_GPIO_Init+0x204>
 800299a:	2307      	movs	r3, #7
 800299c:	e006      	b.n	80029ac <HAL_GPIO_Init+0x204>
 800299e:	2303      	movs	r3, #3
 80029a0:	e004      	b.n	80029ac <HAL_GPIO_Init+0x204>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e002      	b.n	80029ac <HAL_GPIO_Init+0x204>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_GPIO_Init+0x204>
 80029aa:	2300      	movs	r3, #0
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	f002 0203 	and.w	r2, r2, #3
 80029b2:	0092      	lsls	r2, r2, #2
 80029b4:	4093      	lsls	r3, r2
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029bc:	4935      	ldr	r1, [pc, #212]	@ (8002a94 <HAL_GPIO_Init+0x2ec>)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	3302      	adds	r3, #2
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ca:	4b38      	ldr	r3, [pc, #224]	@ (8002aac <HAL_GPIO_Init+0x304>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ee:	4a2f      	ldr	r2, [pc, #188]	@ (8002aac <HAL_GPIO_Init+0x304>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029f4:	4b2d      	ldr	r3, [pc, #180]	@ (8002aac <HAL_GPIO_Init+0x304>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a18:	4a24      	ldr	r2, [pc, #144]	@ (8002aac <HAL_GPIO_Init+0x304>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a1e:	4b23      	ldr	r3, [pc, #140]	@ (8002aac <HAL_GPIO_Init+0x304>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a42:	4a1a      	ldr	r2, [pc, #104]	@ (8002aac <HAL_GPIO_Init+0x304>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a48:	4b18      	ldr	r3, [pc, #96]	@ (8002aac <HAL_GPIO_Init+0x304>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a6c:	4a0f      	ldr	r2, [pc, #60]	@ (8002aac <HAL_GPIO_Init+0x304>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3301      	adds	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	2b0f      	cmp	r3, #15
 8002a7c:	f67f aea2 	bls.w	80027c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3724      	adds	r7, #36	@ 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40013800 	.word	0x40013800
 8002a98:	40020000 	.word	0x40020000
 8002a9c:	40020400 	.word	0x40020400
 8002aa0:	40020800 	.word	0x40020800
 8002aa4:	40020c00 	.word	0x40020c00
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40013c00 	.word	0x40013c00

08002ab0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	887b      	ldrh	r3, [r7, #2]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
 8002acc:	e001      	b.n	8002ad2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]
 8002aec:	4613      	mov	r3, r2
 8002aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002af0:	787b      	ldrb	r3, [r7, #1]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002af6:	887a      	ldrh	r2, [r7, #2]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002afc:	e003      	b.n	8002b06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002afe:	887b      	ldrh	r3, [r7, #2]
 8002b00:	041a      	lsls	r2, r3, #16
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	619a      	str	r2, [r3, #24]
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b1e:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d006      	beq.n	8002b38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b2a:	4a05      	ldr	r2, [pc, #20]	@ (8002b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff f880 	bl	8001c38 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40013c00 	.word	0x40013c00

08002b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e12b      	b.n	8002dae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff f8f0 	bl	8001d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2224      	movs	r2, #36	@ 0x24
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ba6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ba8:	f001 f8da 	bl	8003d60 <HAL_RCC_GetPCLK1Freq>
 8002bac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4a81      	ldr	r2, [pc, #516]	@ (8002db8 <HAL_I2C_Init+0x274>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d807      	bhi.n	8002bc8 <HAL_I2C_Init+0x84>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4a80      	ldr	r2, [pc, #512]	@ (8002dbc <HAL_I2C_Init+0x278>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	bf94      	ite	ls
 8002bc0:	2301      	movls	r3, #1
 8002bc2:	2300      	movhi	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e006      	b.n	8002bd6 <HAL_I2C_Init+0x92>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4a7d      	ldr	r2, [pc, #500]	@ (8002dc0 <HAL_I2C_Init+0x27c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	bf94      	ite	ls
 8002bd0:	2301      	movls	r3, #1
 8002bd2:	2300      	movhi	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0e7      	b.n	8002dae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4a78      	ldr	r2, [pc, #480]	@ (8002dc4 <HAL_I2C_Init+0x280>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	0c9b      	lsrs	r3, r3, #18
 8002be8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	4a6a      	ldr	r2, [pc, #424]	@ (8002db8 <HAL_I2C_Init+0x274>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d802      	bhi.n	8002c18 <HAL_I2C_Init+0xd4>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	3301      	adds	r3, #1
 8002c16:	e009      	b.n	8002c2c <HAL_I2C_Init+0xe8>
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c1e:	fb02 f303 	mul.w	r3, r2, r3
 8002c22:	4a69      	ldr	r2, [pc, #420]	@ (8002dc8 <HAL_I2C_Init+0x284>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	099b      	lsrs	r3, r3, #6
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	430b      	orrs	r3, r1
 8002c32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	495c      	ldr	r1, [pc, #368]	@ (8002db8 <HAL_I2C_Init+0x274>)
 8002c48:	428b      	cmp	r3, r1
 8002c4a:	d819      	bhi.n	8002c80 <HAL_I2C_Init+0x13c>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1e59      	subs	r1, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c5a:	1c59      	adds	r1, r3, #1
 8002c5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c60:	400b      	ands	r3, r1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_I2C_Init+0x138>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1e59      	subs	r1, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c74:	3301      	adds	r3, #1
 8002c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7a:	e051      	b.n	8002d20 <HAL_I2C_Init+0x1dc>
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	e04f      	b.n	8002d20 <HAL_I2C_Init+0x1dc>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d111      	bne.n	8002cac <HAL_I2C_Init+0x168>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1e58      	subs	r0, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	440b      	add	r3, r1
 8002c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf0c      	ite	eq
 8002ca4:	2301      	moveq	r3, #1
 8002ca6:	2300      	movne	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	e012      	b.n	8002cd2 <HAL_I2C_Init+0x18e>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	1e58      	subs	r0, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	0099      	lsls	r1, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_Init+0x196>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e022      	b.n	8002d20 <HAL_I2C_Init+0x1dc>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10e      	bne.n	8002d00 <HAL_I2C_Init+0x1bc>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1e58      	subs	r0, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6859      	ldr	r1, [r3, #4]
 8002cea:	460b      	mov	r3, r1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	440b      	add	r3, r1
 8002cf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cfe:	e00f      	b.n	8002d20 <HAL_I2C_Init+0x1dc>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1e58      	subs	r0, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	0099      	lsls	r1, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d16:	3301      	adds	r3, #1
 8002d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	6809      	ldr	r1, [r1, #0]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69da      	ldr	r2, [r3, #28]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6911      	ldr	r1, [r2, #16]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68d2      	ldr	r2, [r2, #12]
 8002d5a:	4311      	orrs	r1, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	430b      	orrs	r3, r1
 8002d62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	000186a0 	.word	0x000186a0
 8002dbc:	001e847f 	.word	0x001e847f
 8002dc0:	003d08ff 	.word	0x003d08ff
 8002dc4:	431bde83 	.word	0x431bde83
 8002dc8:	10624dd3 	.word	0x10624dd3

08002dcc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	460b      	mov	r3, r1
 8002dda:	817b      	strh	r3, [r7, #10]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002de0:	f7ff fb0e 	bl	8002400 <HAL_GetTick>
 8002de4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	f040 80e0 	bne.w	8002fb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	2319      	movs	r3, #25
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	4970      	ldr	r1, [pc, #448]	@ (8002fc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f964 	bl	80030cc <I2C_WaitOnFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e0d3      	b.n	8002fb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_I2C_Master_Transmit+0x50>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e0cc      	b.n	8002fb6 <HAL_I2C_Master_Transmit+0x1ea>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d007      	beq.n	8002e42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2221      	movs	r2, #33	@ 0x21
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2210      	movs	r2, #16
 8002e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	893a      	ldrh	r2, [r7, #8]
 8002e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4a50      	ldr	r2, [pc, #320]	@ (8002fc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e84:	8979      	ldrh	r1, [r7, #10]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	6a3a      	ldr	r2, [r7, #32]
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f89c 	bl	8002fc8 <I2C_MasterRequestWrite>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e08d      	b.n	8002fb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002eb0:	e066      	b.n	8002f80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	6a39      	ldr	r1, [r7, #32]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fa22 	bl	8003300 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00d      	beq.n	8002ede <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d107      	bne.n	8002eda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ed8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e06b      	b.n	8002fb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee2:	781a      	ldrb	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d11b      	bne.n	8002f54 <HAL_I2C_Master_Transmit+0x188>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d017      	beq.n	8002f54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f28:	781a      	ldrb	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	6a39      	ldr	r1, [r7, #32]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 fa19 	bl	8003390 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00d      	beq.n	8002f80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d107      	bne.n	8002f7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e01a      	b.n	8002fb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d194      	bne.n	8002eb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	e000      	b.n	8002fb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fb4:	2302      	movs	r3, #2
  }
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	00100002 	.word	0x00100002
 8002fc4:	ffff0000 	.word	0xffff0000

08002fc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d006      	beq.n	8002ff2 <I2C_MasterRequestWrite+0x2a>
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d003      	beq.n	8002ff2 <I2C_MasterRequestWrite+0x2a>
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ff0:	d108      	bne.n	8003004 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	e00b      	b.n	800301c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003008:	2b12      	cmp	r3, #18
 800300a:	d107      	bne.n	800301c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800301a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f84f 	bl	80030cc <I2C_WaitOnFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00d      	beq.n	8003050 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003042:	d103      	bne.n	800304c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800304a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e035      	b.n	80030bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003058:	d108      	bne.n	800306c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800305a:	897b      	ldrh	r3, [r7, #10]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	461a      	mov	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003068:	611a      	str	r2, [r3, #16]
 800306a:	e01b      	b.n	80030a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800306c:	897b      	ldrh	r3, [r7, #10]
 800306e:	11db      	asrs	r3, r3, #7
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f003 0306 	and.w	r3, r3, #6
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f063 030f 	orn	r3, r3, #15
 800307c:	b2da      	uxtb	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	490e      	ldr	r1, [pc, #56]	@ (80030c4 <I2C_MasterRequestWrite+0xfc>)
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f898 	bl	80031c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e010      	b.n	80030bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800309a:	897b      	ldrh	r3, [r7, #10]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	4907      	ldr	r1, [pc, #28]	@ (80030c8 <I2C_MasterRequestWrite+0x100>)
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f888 	bl	80031c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	00010008 	.word	0x00010008
 80030c8:	00010002 	.word	0x00010002

080030cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030dc:	e048      	b.n	8003170 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d044      	beq.n	8003170 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e6:	f7ff f98b 	bl	8002400 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d302      	bcc.n	80030fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d139      	bne.n	8003170 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	0c1b      	lsrs	r3, r3, #16
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b01      	cmp	r3, #1
 8003104:	d10d      	bne.n	8003122 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	43da      	mvns	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4013      	ands	r3, r2
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	e00c      	b.n	800313c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	43da      	mvns	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	4013      	ands	r3, r2
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf0c      	ite	eq
 8003134:	2301      	moveq	r3, #1
 8003136:	2300      	movne	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	429a      	cmp	r2, r3
 8003140:	d116      	bne.n	8003170 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315c:	f043 0220 	orr.w	r2, r3, #32
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e023      	b.n	80031b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	0c1b      	lsrs	r3, r3, #16
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d10d      	bne.n	8003196 <I2C_WaitOnFlagUntilTimeout+0xca>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	43da      	mvns	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	e00c      	b.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	43da      	mvns	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4013      	ands	r3, r2
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d093      	beq.n	80030de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031ce:	e071      	b.n	80032b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031de:	d123      	bne.n	8003228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003214:	f043 0204 	orr.w	r2, r3, #4
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e067      	b.n	80032f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322e:	d041      	beq.n	80032b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003230:	f7ff f8e6 	bl	8002400 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	d302      	bcc.n	8003246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d136      	bne.n	80032b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	0c1b      	lsrs	r3, r3, #16
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d10c      	bne.n	800326a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	43da      	mvns	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4013      	ands	r3, r2
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	bf14      	ite	ne
 8003262:	2301      	movne	r3, #1
 8003264:	2300      	moveq	r3, #0
 8003266:	b2db      	uxtb	r3, r3
 8003268:	e00b      	b.n	8003282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	43da      	mvns	r2, r3
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	4013      	ands	r3, r2
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d016      	beq.n	80032b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a0:	f043 0220 	orr.w	r2, r3, #32
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e021      	b.n	80032f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	0c1b      	lsrs	r3, r3, #16
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d10c      	bne.n	80032d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	43da      	mvns	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	4013      	ands	r3, r2
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	e00b      	b.n	80032f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	43da      	mvns	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4013      	ands	r3, r2
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	bf14      	ite	ne
 80032ea:	2301      	movne	r3, #1
 80032ec:	2300      	moveq	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f47f af6d 	bne.w	80031d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800330c:	e034      	b.n	8003378 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f886 	bl	8003420 <I2C_IsAcknowledgeFailed>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e034      	b.n	8003388 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003324:	d028      	beq.n	8003378 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003326:	f7ff f86b 	bl	8002400 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	429a      	cmp	r2, r3
 8003334:	d302      	bcc.n	800333c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d11d      	bne.n	8003378 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003346:	2b80      	cmp	r3, #128	@ 0x80
 8003348:	d016      	beq.n	8003378 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003364:	f043 0220 	orr.w	r2, r3, #32
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e007      	b.n	8003388 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003382:	2b80      	cmp	r3, #128	@ 0x80
 8003384:	d1c3      	bne.n	800330e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800339c:	e034      	b.n	8003408 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f83e 	bl	8003420 <I2C_IsAcknowledgeFailed>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e034      	b.n	8003418 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d028      	beq.n	8003408 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b6:	f7ff f823 	bl	8002400 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d302      	bcc.n	80033cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d11d      	bne.n	8003408 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d016      	beq.n	8003408 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	f043 0220 	orr.w	r2, r3, #32
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e007      	b.n	8003418 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b04      	cmp	r3, #4
 8003414:	d1c3      	bne.n	800339e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003436:	d11b      	bne.n	8003470 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003440:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345c:	f043 0204 	orr.w	r2, r3, #4
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e267      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d075      	beq.n	800358a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800349e:	4b88      	ldr	r3, [pc, #544]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d00c      	beq.n	80034c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034aa:	4b85      	ldr	r3, [pc, #532]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d112      	bne.n	80034dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034b6:	4b82      	ldr	r3, [pc, #520]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034c2:	d10b      	bne.n	80034dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c4:	4b7e      	ldr	r3, [pc, #504]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d05b      	beq.n	8003588 <HAL_RCC_OscConfig+0x108>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d157      	bne.n	8003588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e242      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e4:	d106      	bne.n	80034f4 <HAL_RCC_OscConfig+0x74>
 80034e6:	4b76      	ldr	r3, [pc, #472]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a75      	ldr	r2, [pc, #468]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	e01d      	b.n	8003530 <HAL_RCC_OscConfig+0xb0>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034fc:	d10c      	bne.n	8003518 <HAL_RCC_OscConfig+0x98>
 80034fe:	4b70      	ldr	r3, [pc, #448]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a6f      	ldr	r2, [pc, #444]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 8003504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	4b6d      	ldr	r3, [pc, #436]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a6c      	ldr	r2, [pc, #432]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 8003510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e00b      	b.n	8003530 <HAL_RCC_OscConfig+0xb0>
 8003518:	4b69      	ldr	r3, [pc, #420]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a68      	ldr	r2, [pc, #416]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 800351e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	4b66      	ldr	r3, [pc, #408]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a65      	ldr	r2, [pc, #404]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 800352a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800352e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d013      	beq.n	8003560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003538:	f7fe ff62 	bl	8002400 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003540:	f7fe ff5e 	bl	8002400 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	@ 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e207      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003552:	4b5b      	ldr	r3, [pc, #364]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0xc0>
 800355e:	e014      	b.n	800358a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003560:	f7fe ff4e 	bl	8002400 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003568:	f7fe ff4a 	bl	8002400 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b64      	cmp	r3, #100	@ 0x64
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e1f3      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357a:	4b51      	ldr	r3, [pc, #324]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0xe8>
 8003586:	e000      	b.n	800358a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d063      	beq.n	800365e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003596:	4b4a      	ldr	r3, [pc, #296]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00b      	beq.n	80035ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035a2:	4b47      	ldr	r3, [pc, #284]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d11c      	bne.n	80035e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ae:	4b44      	ldr	r3, [pc, #272]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d116      	bne.n	80035e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ba:	4b41      	ldr	r3, [pc, #260]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_RCC_OscConfig+0x152>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d001      	beq.n	80035d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e1c7      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d2:	4b3b      	ldr	r3, [pc, #236]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4937      	ldr	r1, [pc, #220]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e6:	e03a      	b.n	800365e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f0:	4b34      	ldr	r3, [pc, #208]	@ (80036c4 <HAL_RCC_OscConfig+0x244>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7fe ff03 	bl	8002400 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035fe:	f7fe feff 	bl	8002400 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e1a8      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003610:	4b2b      	ldr	r3, [pc, #172]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361c:	4b28      	ldr	r3, [pc, #160]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4925      	ldr	r1, [pc, #148]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 800362c:	4313      	orrs	r3, r2
 800362e:	600b      	str	r3, [r1, #0]
 8003630:	e015      	b.n	800365e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003632:	4b24      	ldr	r3, [pc, #144]	@ (80036c4 <HAL_RCC_OscConfig+0x244>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe fee2 	bl	8002400 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003640:	f7fe fede 	bl	8002400 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e187      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003652:	4b1b      	ldr	r3, [pc, #108]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d036      	beq.n	80036d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d016      	beq.n	80036a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003672:	4b15      	ldr	r3, [pc, #84]	@ (80036c8 <HAL_RCC_OscConfig+0x248>)
 8003674:	2201      	movs	r2, #1
 8003676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003678:	f7fe fec2 	bl	8002400 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003680:	f7fe febe 	bl	8002400 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e167      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003692:	4b0b      	ldr	r3, [pc, #44]	@ (80036c0 <HAL_RCC_OscConfig+0x240>)
 8003694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x200>
 800369e:	e01b      	b.n	80036d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a0:	4b09      	ldr	r3, [pc, #36]	@ (80036c8 <HAL_RCC_OscConfig+0x248>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a6:	f7fe feab 	bl	8002400 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ac:	e00e      	b.n	80036cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ae:	f7fe fea7 	bl	8002400 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d907      	bls.n	80036cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e150      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
 80036c0:	40023800 	.word	0x40023800
 80036c4:	42470000 	.word	0x42470000
 80036c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036cc:	4b88      	ldr	r3, [pc, #544]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 80036ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1ea      	bne.n	80036ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 8097 	beq.w	8003814 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e6:	2300      	movs	r3, #0
 80036e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ea:	4b81      	ldr	r3, [pc, #516]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10f      	bne.n	8003716 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	4b7d      	ldr	r3, [pc, #500]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	4a7c      	ldr	r2, [pc, #496]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003704:	6413      	str	r3, [r2, #64]	@ 0x40
 8003706:	4b7a      	ldr	r3, [pc, #488]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800370e:	60bb      	str	r3, [r7, #8]
 8003710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003712:	2301      	movs	r3, #1
 8003714:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003716:	4b77      	ldr	r3, [pc, #476]	@ (80038f4 <HAL_RCC_OscConfig+0x474>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d118      	bne.n	8003754 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003722:	4b74      	ldr	r3, [pc, #464]	@ (80038f4 <HAL_RCC_OscConfig+0x474>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a73      	ldr	r2, [pc, #460]	@ (80038f4 <HAL_RCC_OscConfig+0x474>)
 8003728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800372c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372e:	f7fe fe67 	bl	8002400 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003736:	f7fe fe63 	bl	8002400 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e10c      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003748:	4b6a      	ldr	r3, [pc, #424]	@ (80038f4 <HAL_RCC_OscConfig+0x474>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d106      	bne.n	800376a <HAL_RCC_OscConfig+0x2ea>
 800375c:	4b64      	ldr	r3, [pc, #400]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003760:	4a63      	ldr	r2, [pc, #396]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	6713      	str	r3, [r2, #112]	@ 0x70
 8003768:	e01c      	b.n	80037a4 <HAL_RCC_OscConfig+0x324>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b05      	cmp	r3, #5
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0x30c>
 8003772:	4b5f      	ldr	r3, [pc, #380]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003776:	4a5e      	ldr	r2, [pc, #376]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003778:	f043 0304 	orr.w	r3, r3, #4
 800377c:	6713      	str	r3, [r2, #112]	@ 0x70
 800377e:	4b5c      	ldr	r3, [pc, #368]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003782:	4a5b      	ldr	r2, [pc, #364]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6713      	str	r3, [r2, #112]	@ 0x70
 800378a:	e00b      	b.n	80037a4 <HAL_RCC_OscConfig+0x324>
 800378c:	4b58      	ldr	r3, [pc, #352]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003790:	4a57      	ldr	r2, [pc, #348]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003792:	f023 0301 	bic.w	r3, r3, #1
 8003796:	6713      	str	r3, [r2, #112]	@ 0x70
 8003798:	4b55      	ldr	r3, [pc, #340]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 800379a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379c:	4a54      	ldr	r2, [pc, #336]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 800379e:	f023 0304 	bic.w	r3, r3, #4
 80037a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d015      	beq.n	80037d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ac:	f7fe fe28 	bl	8002400 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b4:	f7fe fe24 	bl	8002400 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e0cb      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ca:	4b49      	ldr	r3, [pc, #292]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0ee      	beq.n	80037b4 <HAL_RCC_OscConfig+0x334>
 80037d6:	e014      	b.n	8003802 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d8:	f7fe fe12 	bl	8002400 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e0:	f7fe fe0e 	bl	8002400 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e0b5      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f6:	4b3e      	ldr	r3, [pc, #248]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1ee      	bne.n	80037e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003802:	7dfb      	ldrb	r3, [r7, #23]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d105      	bne.n	8003814 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003808:	4b39      	ldr	r3, [pc, #228]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 800380a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380c:	4a38      	ldr	r2, [pc, #224]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 800380e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003812:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80a1 	beq.w	8003960 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800381e:	4b34      	ldr	r3, [pc, #208]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	2b08      	cmp	r3, #8
 8003828:	d05c      	beq.n	80038e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d141      	bne.n	80038b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003832:	4b31      	ldr	r3, [pc, #196]	@ (80038f8 <HAL_RCC_OscConfig+0x478>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7fe fde2 	bl	8002400 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003840:	f7fe fdde 	bl	8002400 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e087      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003852:	4b27      	ldr	r3, [pc, #156]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	019b      	lsls	r3, r3, #6
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003874:	085b      	lsrs	r3, r3, #1
 8003876:	3b01      	subs	r3, #1
 8003878:	041b      	lsls	r3, r3, #16
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	491b      	ldr	r1, [pc, #108]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003888:	4b1b      	ldr	r3, [pc, #108]	@ (80038f8 <HAL_RCC_OscConfig+0x478>)
 800388a:	2201      	movs	r2, #1
 800388c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388e:	f7fe fdb7 	bl	8002400 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003896:	f7fe fdb3 	bl	8002400 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e05c      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a8:	4b11      	ldr	r3, [pc, #68]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0f0      	beq.n	8003896 <HAL_RCC_OscConfig+0x416>
 80038b4:	e054      	b.n	8003960 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b6:	4b10      	ldr	r3, [pc, #64]	@ (80038f8 <HAL_RCC_OscConfig+0x478>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038bc:	f7fe fda0 	bl	8002400 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c4:	f7fe fd9c 	bl	8002400 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e045      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d6:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <HAL_RCC_OscConfig+0x470>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x444>
 80038e2:	e03d      	b.n	8003960 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d107      	bne.n	80038fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e038      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40007000 	.word	0x40007000
 80038f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038fc:	4b1b      	ldr	r3, [pc, #108]	@ (800396c <HAL_RCC_OscConfig+0x4ec>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d028      	beq.n	800395c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003914:	429a      	cmp	r2, r3
 8003916:	d121      	bne.n	800395c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003922:	429a      	cmp	r2, r3
 8003924:	d11a      	bne.n	800395c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800392c:	4013      	ands	r3, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003932:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003934:	4293      	cmp	r3, r2
 8003936:	d111      	bne.n	800395c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003942:	085b      	lsrs	r3, r3, #1
 8003944:	3b01      	subs	r3, #1
 8003946:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003948:	429a      	cmp	r2, r3
 800394a:	d107      	bne.n	800395c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003956:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003958:	429a      	cmp	r2, r3
 800395a:	d001      	beq.n	8003960 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800

08003970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0cc      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003984:	4b68      	ldr	r3, [pc, #416]	@ (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d90c      	bls.n	80039ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003992:	4b65      	ldr	r3, [pc, #404]	@ (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399a:	4b63      	ldr	r3, [pc, #396]	@ (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0b8      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d020      	beq.n	80039fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c4:	4b59      	ldr	r3, [pc, #356]	@ (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	4a58      	ldr	r2, [pc, #352]	@ (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039dc:	4b53      	ldr	r3, [pc, #332]	@ (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a52      	ldr	r2, [pc, #328]	@ (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e8:	4b50      	ldr	r3, [pc, #320]	@ (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	494d      	ldr	r1, [pc, #308]	@ (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d044      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d107      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0e:	4b47      	ldr	r3, [pc, #284]	@ (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d119      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e07f      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d003      	beq.n	8003a2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e06f      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e067      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a4e:	4b37      	ldr	r3, [pc, #220]	@ (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f023 0203 	bic.w	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	4934      	ldr	r1, [pc, #208]	@ (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a60:	f7fe fcce 	bl	8002400 <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a66:	e00a      	b.n	8003a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a68:	f7fe fcca 	bl	8002400 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e04f      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 020c 	and.w	r2, r3, #12
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d1eb      	bne.n	8003a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a90:	4b25      	ldr	r3, [pc, #148]	@ (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d20c      	bcs.n	8003ab8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b22      	ldr	r3, [pc, #136]	@ (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b20      	ldr	r3, [pc, #128]	@ (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e032      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac4:	4b19      	ldr	r3, [pc, #100]	@ (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4916      	ldr	r1, [pc, #88]	@ (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d009      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ae2:	4b12      	ldr	r3, [pc, #72]	@ (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	490e      	ldr	r1, [pc, #56]	@ (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003af6:	f000 f821 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 8003afa:	4602      	mov	r2, r0
 8003afc:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	490a      	ldr	r1, [pc, #40]	@ (8003b30 <HAL_RCC_ClockConfig+0x1c0>)
 8003b08:	5ccb      	ldrb	r3, [r1, r3]
 8003b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0e:	4a09      	ldr	r2, [pc, #36]	@ (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 8003b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b12:	4b09      	ldr	r3, [pc, #36]	@ (8003b38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe fc2e 	bl	8002378 <HAL_InitTick>

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40023c00 	.word	0x40023c00
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	080077f4 	.word	0x080077f4
 8003b34:	20000004 	.word	0x20000004
 8003b38:	20000008 	.word	0x20000008

08003b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b40:	b094      	sub	sp, #80	@ 0x50
 8003b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b54:	4b79      	ldr	r3, [pc, #484]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 030c 	and.w	r3, r3, #12
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d00d      	beq.n	8003b7c <HAL_RCC_GetSysClockFreq+0x40>
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	f200 80e1 	bhi.w	8003d28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0x34>
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d003      	beq.n	8003b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b6e:	e0db      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b70:	4b73      	ldr	r3, [pc, #460]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b74:	e0db      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b76:	4b73      	ldr	r3, [pc, #460]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b7a:	e0d8      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b7c:	4b6f      	ldr	r3, [pc, #444]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b84:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b86:	4b6d      	ldr	r3, [pc, #436]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d063      	beq.n	8003c5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b92:	4b6a      	ldr	r3, [pc, #424]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	099b      	lsrs	r3, r3, #6
 8003b98:	2200      	movs	r2, #0
 8003b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003baa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003bae:	4622      	mov	r2, r4
 8003bb0:	462b      	mov	r3, r5
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f04f 0100 	mov.w	r1, #0
 8003bba:	0159      	lsls	r1, r3, #5
 8003bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bc0:	0150      	lsls	r0, r2, #5
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	1a51      	subs	r1, r2, r1
 8003bca:	6139      	str	r1, [r7, #16]
 8003bcc:	4629      	mov	r1, r5
 8003bce:	eb63 0301 	sbc.w	r3, r3, r1
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003be0:	4659      	mov	r1, fp
 8003be2:	018b      	lsls	r3, r1, #6
 8003be4:	4651      	mov	r1, sl
 8003be6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bea:	4651      	mov	r1, sl
 8003bec:	018a      	lsls	r2, r1, #6
 8003bee:	4651      	mov	r1, sl
 8003bf0:	ebb2 0801 	subs.w	r8, r2, r1
 8003bf4:	4659      	mov	r1, fp
 8003bf6:	eb63 0901 	sbc.w	r9, r3, r1
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c0e:	4690      	mov	r8, r2
 8003c10:	4699      	mov	r9, r3
 8003c12:	4623      	mov	r3, r4
 8003c14:	eb18 0303 	adds.w	r3, r8, r3
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	462b      	mov	r3, r5
 8003c1c:	eb49 0303 	adc.w	r3, r9, r3
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c2e:	4629      	mov	r1, r5
 8003c30:	024b      	lsls	r3, r1, #9
 8003c32:	4621      	mov	r1, r4
 8003c34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c38:	4621      	mov	r1, r4
 8003c3a:	024a      	lsls	r2, r1, #9
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4619      	mov	r1, r3
 8003c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c42:	2200      	movs	r2, #0
 8003c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c4c:	f7fc fb30 	bl	80002b0 <__aeabi_uldivmod>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4613      	mov	r3, r2
 8003c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c58:	e058      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c5a:	4b38      	ldr	r3, [pc, #224]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	099b      	lsrs	r3, r3, #6
 8003c60:	2200      	movs	r2, #0
 8003c62:	4618      	mov	r0, r3
 8003c64:	4611      	mov	r1, r2
 8003c66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c6a:	623b      	str	r3, [r7, #32]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c74:	4642      	mov	r2, r8
 8003c76:	464b      	mov	r3, r9
 8003c78:	f04f 0000 	mov.w	r0, #0
 8003c7c:	f04f 0100 	mov.w	r1, #0
 8003c80:	0159      	lsls	r1, r3, #5
 8003c82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c86:	0150      	lsls	r0, r2, #5
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4641      	mov	r1, r8
 8003c8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c92:	4649      	mov	r1, r9
 8003c94:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ca4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ca8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cac:	ebb2 040a 	subs.w	r4, r2, sl
 8003cb0:	eb63 050b 	sbc.w	r5, r3, fp
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	00eb      	lsls	r3, r5, #3
 8003cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cc2:	00e2      	lsls	r2, r4, #3
 8003cc4:	4614      	mov	r4, r2
 8003cc6:	461d      	mov	r5, r3
 8003cc8:	4643      	mov	r3, r8
 8003cca:	18e3      	adds	r3, r4, r3
 8003ccc:	603b      	str	r3, [r7, #0]
 8003cce:	464b      	mov	r3, r9
 8003cd0:	eb45 0303 	adc.w	r3, r5, r3
 8003cd4:	607b      	str	r3, [r7, #4]
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	028b      	lsls	r3, r1, #10
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cec:	4621      	mov	r1, r4
 8003cee:	028a      	lsls	r2, r1, #10
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	61fa      	str	r2, [r7, #28]
 8003cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d00:	f7fc fad6 	bl	80002b0 <__aeabi_uldivmod>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4613      	mov	r3, r2
 8003d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	3301      	adds	r3, #1
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d26:	e002      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d28:	4b05      	ldr	r3, [pc, #20]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3750      	adds	r7, #80	@ 0x50
 8003d34:	46bd      	mov	sp, r7
 8003d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	00f42400 	.word	0x00f42400
 8003d44:	007a1200 	.word	0x007a1200

08003d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d4c:	4b03      	ldr	r3, [pc, #12]	@ (8003d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	20000004 	.word	0x20000004

08003d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d64:	f7ff fff0 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	4b05      	ldr	r3, [pc, #20]	@ (8003d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	0a9b      	lsrs	r3, r3, #10
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	4903      	ldr	r1, [pc, #12]	@ (8003d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d76:	5ccb      	ldrb	r3, [r1, r3]
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40023800 	.word	0x40023800
 8003d84:	08007804 	.word	0x08007804

08003d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d8c:	f7ff ffdc 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003d90:	4602      	mov	r2, r0
 8003d92:	4b05      	ldr	r3, [pc, #20]	@ (8003da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	0b5b      	lsrs	r3, r3, #13
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	4903      	ldr	r1, [pc, #12]	@ (8003dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d9e:	5ccb      	ldrb	r3, [r1, r3]
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40023800 	.word	0x40023800
 8003dac:	08007804 	.word	0x08007804

08003db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e041      	b.n	8003e46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fe f802 	bl	8001de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3304      	adds	r3, #4
 8003dec:	4619      	mov	r1, r3
 8003dee:	4610      	mov	r0, r2
 8003df0:	f000 fc3c 	bl	800466c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d001      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e044      	b.n	8003ef2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a1e      	ldr	r2, [pc, #120]	@ (8003f00 <HAL_TIM_Base_Start_IT+0xb0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d018      	beq.n	8003ebc <HAL_TIM_Base_Start_IT+0x6c>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e92:	d013      	beq.n	8003ebc <HAL_TIM_Base_Start_IT+0x6c>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1a      	ldr	r2, [pc, #104]	@ (8003f04 <HAL_TIM_Base_Start_IT+0xb4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00e      	beq.n	8003ebc <HAL_TIM_Base_Start_IT+0x6c>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a19      	ldr	r2, [pc, #100]	@ (8003f08 <HAL_TIM_Base_Start_IT+0xb8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d009      	beq.n	8003ebc <HAL_TIM_Base_Start_IT+0x6c>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a17      	ldr	r2, [pc, #92]	@ (8003f0c <HAL_TIM_Base_Start_IT+0xbc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d004      	beq.n	8003ebc <HAL_TIM_Base_Start_IT+0x6c>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a16      	ldr	r2, [pc, #88]	@ (8003f10 <HAL_TIM_Base_Start_IT+0xc0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d111      	bne.n	8003ee0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b06      	cmp	r3, #6
 8003ecc:	d010      	beq.n	8003ef0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0201 	orr.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ede:	e007      	b.n	8003ef0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40010000 	.word	0x40010000
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40000800 	.word	0x40000800
 8003f0c:	40000c00 	.word	0x40000c00
 8003f10:	40014000 	.word	0x40014000

08003f14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e041      	b.n	8003faa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f839 	bl	8003fb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	4619      	mov	r1, r3
 8003f52:	4610      	mov	r0, r2
 8003f54:	f000 fb8a 	bl	800466c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
	...

08003fc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <HAL_TIM_PWM_Start+0x24>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	bf14      	ite	ne
 8003fe4:	2301      	movne	r3, #1
 8003fe6:	2300      	moveq	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	e022      	b.n	8004032 <HAL_TIM_PWM_Start+0x6a>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d109      	bne.n	8004006 <HAL_TIM_PWM_Start+0x3e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	bf14      	ite	ne
 8003ffe:	2301      	movne	r3, #1
 8004000:	2300      	moveq	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	e015      	b.n	8004032 <HAL_TIM_PWM_Start+0x6a>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d109      	bne.n	8004020 <HAL_TIM_PWM_Start+0x58>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	bf14      	ite	ne
 8004018:	2301      	movne	r3, #1
 800401a:	2300      	moveq	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	e008      	b.n	8004032 <HAL_TIM_PWM_Start+0x6a>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b01      	cmp	r3, #1
 800402a:	bf14      	ite	ne
 800402c:	2301      	movne	r3, #1
 800402e:	2300      	moveq	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e068      	b.n	800410c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d104      	bne.n	800404a <HAL_TIM_PWM_Start+0x82>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004048:	e013      	b.n	8004072 <HAL_TIM_PWM_Start+0xaa>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b04      	cmp	r3, #4
 800404e:	d104      	bne.n	800405a <HAL_TIM_PWM_Start+0x92>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004058:	e00b      	b.n	8004072 <HAL_TIM_PWM_Start+0xaa>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b08      	cmp	r3, #8
 800405e:	d104      	bne.n	800406a <HAL_TIM_PWM_Start+0xa2>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004068:	e003      	b.n	8004072 <HAL_TIM_PWM_Start+0xaa>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2202      	movs	r2, #2
 800406e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2201      	movs	r2, #1
 8004078:	6839      	ldr	r1, [r7, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fda2 	bl	8004bc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a23      	ldr	r2, [pc, #140]	@ (8004114 <HAL_TIM_PWM_Start+0x14c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d107      	bne.n	800409a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004098:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1d      	ldr	r2, [pc, #116]	@ (8004114 <HAL_TIM_PWM_Start+0x14c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d018      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x10e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ac:	d013      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x10e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a19      	ldr	r2, [pc, #100]	@ (8004118 <HAL_TIM_PWM_Start+0x150>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00e      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x10e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a17      	ldr	r2, [pc, #92]	@ (800411c <HAL_TIM_PWM_Start+0x154>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d009      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x10e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a16      	ldr	r2, [pc, #88]	@ (8004120 <HAL_TIM_PWM_Start+0x158>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d004      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x10e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a14      	ldr	r2, [pc, #80]	@ (8004124 <HAL_TIM_PWM_Start+0x15c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d111      	bne.n	80040fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b06      	cmp	r3, #6
 80040e6:	d010      	beq.n	800410a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f8:	e007      	b.n	800410a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0201 	orr.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40010000 	.word	0x40010000
 8004118:	40000400 	.word	0x40000400
 800411c:	40000800 	.word	0x40000800
 8004120:	40000c00 	.word	0x40000c00
 8004124:	40014000 	.word	0x40014000

08004128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d020      	beq.n	800418c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01b      	beq.n	800418c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0202 	mvn.w	r2, #2
 800415c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fa5b 	bl	800462e <HAL_TIM_IC_CaptureCallback>
 8004178:	e005      	b.n	8004186 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fa4d 	bl	800461a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fa5e 	bl	8004642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d020      	beq.n	80041d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01b      	beq.n	80041d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0204 	mvn.w	r2, #4
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fa35 	bl	800462e <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fa27 	bl	800461a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fa38 	bl	8004642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d020      	beq.n	8004224 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01b      	beq.n	8004224 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f06f 0208 	mvn.w	r2, #8
 80041f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2204      	movs	r2, #4
 80041fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fa0f 	bl	800462e <HAL_TIM_IC_CaptureCallback>
 8004210:	e005      	b.n	800421e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa01 	bl	800461a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fa12 	bl	8004642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b00      	cmp	r3, #0
 800422c:	d020      	beq.n	8004270 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01b      	beq.n	8004270 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f06f 0210 	mvn.w	r2, #16
 8004240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2208      	movs	r2, #8
 8004246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f9e9 	bl	800462e <HAL_TIM_IC_CaptureCallback>
 800425c:	e005      	b.n	800426a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f9db 	bl	800461a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f9ec 	bl	8004642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00c      	beq.n	8004294 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0201 	mvn.w	r2, #1
 800428c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fd fcac 	bl	8001bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00c      	beq.n	80042b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d007      	beq.n	80042b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80042b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fd24 	bl	8004d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00c      	beq.n	80042dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f9bd 	bl	8004656 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00c      	beq.n	8004300 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 0320 	and.w	r3, r3, #32
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d007      	beq.n	8004300 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f06f 0220 	mvn.w	r2, #32
 80042f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fcf6 	bl	8004cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004300:	bf00      	nop
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004322:	2302      	movs	r3, #2
 8004324:	e0ae      	b.n	8004484 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b0c      	cmp	r3, #12
 8004332:	f200 809f 	bhi.w	8004474 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004336:	a201      	add	r2, pc, #4	@ (adr r2, 800433c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433c:	08004371 	.word	0x08004371
 8004340:	08004475 	.word	0x08004475
 8004344:	08004475 	.word	0x08004475
 8004348:	08004475 	.word	0x08004475
 800434c:	080043b1 	.word	0x080043b1
 8004350:	08004475 	.word	0x08004475
 8004354:	08004475 	.word	0x08004475
 8004358:	08004475 	.word	0x08004475
 800435c:	080043f3 	.word	0x080043f3
 8004360:	08004475 	.word	0x08004475
 8004364:	08004475 	.word	0x08004475
 8004368:	08004475 	.word	0x08004475
 800436c:	08004433 	.word	0x08004433
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68b9      	ldr	r1, [r7, #8]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 f9fe 	bl	8004778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0208 	orr.w	r2, r2, #8
 800438a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699a      	ldr	r2, [r3, #24]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0204 	bic.w	r2, r2, #4
 800439a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6999      	ldr	r1, [r3, #24]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	619a      	str	r2, [r3, #24]
      break;
 80043ae:	e064      	b.n	800447a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fa44 	bl	8004844 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6999      	ldr	r1, [r3, #24]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	021a      	lsls	r2, r3, #8
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	619a      	str	r2, [r3, #24]
      break;
 80043f0:	e043      	b.n	800447a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68b9      	ldr	r1, [r7, #8]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fa8f 	bl	800491c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69da      	ldr	r2, [r3, #28]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0208 	orr.w	r2, r2, #8
 800440c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69da      	ldr	r2, [r3, #28]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0204 	bic.w	r2, r2, #4
 800441c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69d9      	ldr	r1, [r3, #28]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	61da      	str	r2, [r3, #28]
      break;
 8004430:	e023      	b.n	800447a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68b9      	ldr	r1, [r7, #8]
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fad9 	bl	80049f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69da      	ldr	r2, [r3, #28]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800444c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69da      	ldr	r2, [r3, #28]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800445c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69d9      	ldr	r1, [r3, #28]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	021a      	lsls	r2, r3, #8
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	61da      	str	r2, [r3, #28]
      break;
 8004472:	e002      	b.n	800447a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	75fb      	strb	r3, [r7, #23]
      break;
 8004478:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004482:	7dfb      	ldrb	r3, [r7, #23]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_TIM_ConfigClockSource+0x1c>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e0b4      	b.n	8004612 <HAL_TIM_ConfigClockSource+0x186>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044e0:	d03e      	beq.n	8004560 <HAL_TIM_ConfigClockSource+0xd4>
 80044e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044e6:	f200 8087 	bhi.w	80045f8 <HAL_TIM_ConfigClockSource+0x16c>
 80044ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ee:	f000 8086 	beq.w	80045fe <HAL_TIM_ConfigClockSource+0x172>
 80044f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f6:	d87f      	bhi.n	80045f8 <HAL_TIM_ConfigClockSource+0x16c>
 80044f8:	2b70      	cmp	r3, #112	@ 0x70
 80044fa:	d01a      	beq.n	8004532 <HAL_TIM_ConfigClockSource+0xa6>
 80044fc:	2b70      	cmp	r3, #112	@ 0x70
 80044fe:	d87b      	bhi.n	80045f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004500:	2b60      	cmp	r3, #96	@ 0x60
 8004502:	d050      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0x11a>
 8004504:	2b60      	cmp	r3, #96	@ 0x60
 8004506:	d877      	bhi.n	80045f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004508:	2b50      	cmp	r3, #80	@ 0x50
 800450a:	d03c      	beq.n	8004586 <HAL_TIM_ConfigClockSource+0xfa>
 800450c:	2b50      	cmp	r3, #80	@ 0x50
 800450e:	d873      	bhi.n	80045f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004510:	2b40      	cmp	r3, #64	@ 0x40
 8004512:	d058      	beq.n	80045c6 <HAL_TIM_ConfigClockSource+0x13a>
 8004514:	2b40      	cmp	r3, #64	@ 0x40
 8004516:	d86f      	bhi.n	80045f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004518:	2b30      	cmp	r3, #48	@ 0x30
 800451a:	d064      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0x15a>
 800451c:	2b30      	cmp	r3, #48	@ 0x30
 800451e:	d86b      	bhi.n	80045f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004520:	2b20      	cmp	r3, #32
 8004522:	d060      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004524:	2b20      	cmp	r3, #32
 8004526:	d867      	bhi.n	80045f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d05c      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0x15a>
 800452c:	2b10      	cmp	r3, #16
 800452e:	d05a      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004530:	e062      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004542:	f000 fb1f 	bl	8004b84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004554:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	609a      	str	r2, [r3, #8]
      break;
 800455e:	e04f      	b.n	8004600 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004570:	f000 fb08 	bl	8004b84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004582:	609a      	str	r2, [r3, #8]
      break;
 8004584:	e03c      	b.n	8004600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004592:	461a      	mov	r2, r3
 8004594:	f000 fa7c 	bl	8004a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2150      	movs	r1, #80	@ 0x50
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fad5 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 80045a4:	e02c      	b.n	8004600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045b2:	461a      	mov	r2, r3
 80045b4:	f000 fa9b 	bl	8004aee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2160      	movs	r1, #96	@ 0x60
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fac5 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 80045c4:	e01c      	b.n	8004600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045d2:	461a      	mov	r2, r3
 80045d4:	f000 fa5c 	bl	8004a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2140      	movs	r1, #64	@ 0x40
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fab5 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 80045e4:	e00c      	b.n	8004600 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4619      	mov	r1, r3
 80045f0:	4610      	mov	r0, r2
 80045f2:	f000 faac 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 80045f6:	e003      	b.n	8004600 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
      break;
 80045fc:	e000      	b.n	8004600 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004610:	7bfb      	ldrb	r3, [r7, #15]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
	...

0800466c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a37      	ldr	r2, [pc, #220]	@ (800475c <TIM_Base_SetConfig+0xf0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00f      	beq.n	80046a4 <TIM_Base_SetConfig+0x38>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800468a:	d00b      	beq.n	80046a4 <TIM_Base_SetConfig+0x38>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a34      	ldr	r2, [pc, #208]	@ (8004760 <TIM_Base_SetConfig+0xf4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d007      	beq.n	80046a4 <TIM_Base_SetConfig+0x38>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a33      	ldr	r2, [pc, #204]	@ (8004764 <TIM_Base_SetConfig+0xf8>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d003      	beq.n	80046a4 <TIM_Base_SetConfig+0x38>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a32      	ldr	r2, [pc, #200]	@ (8004768 <TIM_Base_SetConfig+0xfc>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d108      	bne.n	80046b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a28      	ldr	r2, [pc, #160]	@ (800475c <TIM_Base_SetConfig+0xf0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d01b      	beq.n	80046f6 <TIM_Base_SetConfig+0x8a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c4:	d017      	beq.n	80046f6 <TIM_Base_SetConfig+0x8a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a25      	ldr	r2, [pc, #148]	@ (8004760 <TIM_Base_SetConfig+0xf4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d013      	beq.n	80046f6 <TIM_Base_SetConfig+0x8a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a24      	ldr	r2, [pc, #144]	@ (8004764 <TIM_Base_SetConfig+0xf8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00f      	beq.n	80046f6 <TIM_Base_SetConfig+0x8a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a23      	ldr	r2, [pc, #140]	@ (8004768 <TIM_Base_SetConfig+0xfc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00b      	beq.n	80046f6 <TIM_Base_SetConfig+0x8a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a22      	ldr	r2, [pc, #136]	@ (800476c <TIM_Base_SetConfig+0x100>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d007      	beq.n	80046f6 <TIM_Base_SetConfig+0x8a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a21      	ldr	r2, [pc, #132]	@ (8004770 <TIM_Base_SetConfig+0x104>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d003      	beq.n	80046f6 <TIM_Base_SetConfig+0x8a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a20      	ldr	r2, [pc, #128]	@ (8004774 <TIM_Base_SetConfig+0x108>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d108      	bne.n	8004708 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a0c      	ldr	r2, [pc, #48]	@ (800475c <TIM_Base_SetConfig+0xf0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d103      	bne.n	8004736 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f043 0204 	orr.w	r2, r3, #4
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	601a      	str	r2, [r3, #0]
}
 800474e:	bf00      	nop
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40010000 	.word	0x40010000
 8004760:	40000400 	.word	0x40000400
 8004764:	40000800 	.word	0x40000800
 8004768:	40000c00 	.word	0x40000c00
 800476c:	40014000 	.word	0x40014000
 8004770:	40014400 	.word	0x40014400
 8004774:	40014800 	.word	0x40014800

08004778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f023 0201 	bic.w	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0303 	bic.w	r3, r3, #3
 80047ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f023 0302 	bic.w	r3, r3, #2
 80047c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004840 <TIM_OC1_SetConfig+0xc8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d10c      	bne.n	80047ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f023 0308 	bic.w	r3, r3, #8
 80047da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f023 0304 	bic.w	r3, r3, #4
 80047ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a13      	ldr	r2, [pc, #76]	@ (8004840 <TIM_OC1_SetConfig+0xc8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d111      	bne.n	800481a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	621a      	str	r2, [r3, #32]
}
 8004834:	bf00      	nop
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	40010000 	.word	0x40010000

08004844 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f023 0210 	bic.w	r2, r3, #16
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800487a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	021b      	lsls	r3, r3, #8
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f023 0320 	bic.w	r3, r3, #32
 800488e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a1e      	ldr	r2, [pc, #120]	@ (8004918 <TIM_OC2_SetConfig+0xd4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d10d      	bne.n	80048c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a15      	ldr	r2, [pc, #84]	@ (8004918 <TIM_OC2_SetConfig+0xd4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d113      	bne.n	80048f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	621a      	str	r2, [r3, #32]
}
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40010000 	.word	0x40010000

0800491c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800494a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0303 	bic.w	r3, r3, #3
 8004952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a1d      	ldr	r2, [pc, #116]	@ (80049ec <TIM_OC3_SetConfig+0xd0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d10d      	bne.n	8004996 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004980:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	021b      	lsls	r3, r3, #8
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a14      	ldr	r2, [pc, #80]	@ (80049ec <TIM_OC3_SetConfig+0xd0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d113      	bne.n	80049c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	621a      	str	r2, [r3, #32]
}
 80049e0:	bf00      	nop
 80049e2:	371c      	adds	r7, #28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	40010000 	.word	0x40010000

080049f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	031b      	lsls	r3, r3, #12
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a10      	ldr	r2, [pc, #64]	@ (8004a8c <TIM_OC4_SetConfig+0x9c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d109      	bne.n	8004a64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	019b      	lsls	r3, r3, #6
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	bf00      	nop
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40010000 	.word	0x40010000

08004a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f023 0201 	bic.w	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f023 030a 	bic.w	r3, r3, #10
 8004acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	621a      	str	r2, [r3, #32]
}
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b087      	sub	sp, #28
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	f023 0210 	bic.w	r2, r3, #16
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	031b      	lsls	r3, r3, #12
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f043 0307 	orr.w	r3, r3, #7
 8004b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	609a      	str	r2, [r3, #8]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	021a      	lsls	r2, r3, #8
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	609a      	str	r2, [r3, #8]
}
 8004bb8:	bf00      	nop
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 031f 	and.w	r3, r3, #31
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a1a      	ldr	r2, [r3, #32]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	43db      	mvns	r3, r3
 8004be6:	401a      	ands	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a1a      	ldr	r2, [r3, #32]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 031f 	and.w	r3, r3, #31
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	621a      	str	r2, [r3, #32]
}
 8004c02:	bf00      	nop
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e050      	b.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d018      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c74:	d013      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a18      	ldr	r2, [pc, #96]	@ (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00e      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a16      	ldr	r2, [pc, #88]	@ (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d009      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a15      	ldr	r2, [pc, #84]	@ (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d004      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a13      	ldr	r2, [pc, #76]	@ (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800
 8004ce4:	40000c00 	.word	0x40000c00
 8004ce8:	40014000 	.word	0x40014000

08004cec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e042      	b.n	8004dac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fd f90e 	bl	8001f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2224      	movs	r2, #36	@ 0x24
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fdd3 	bl	8005904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695a      	ldr	r2, [r3, #20]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08a      	sub	sp, #40	@ 0x28
 8004db8:	af02      	add	r7, sp, #8
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	603b      	str	r3, [r7, #0]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d175      	bne.n	8004ec0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_UART_Transmit+0x2c>
 8004dda:	88fb      	ldrh	r3, [r7, #6]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e06e      	b.n	8004ec2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2221      	movs	r2, #33	@ 0x21
 8004dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004df2:	f7fd fb05 	bl	8002400 <HAL_GetTick>
 8004df6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	88fa      	ldrh	r2, [r7, #6]
 8004dfc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	88fa      	ldrh	r2, [r7, #6]
 8004e02:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e0c:	d108      	bne.n	8004e20 <HAL_UART_Transmit+0x6c>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d104      	bne.n	8004e20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	e003      	b.n	8004e28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e28:	e02e      	b.n	8004e88 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2200      	movs	r2, #0
 8004e32:	2180      	movs	r1, #128	@ 0x80
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 fb37 	bl	80054a8 <UART_WaitOnFlagUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e03a      	b.n	8004ec2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10b      	bne.n	8004e6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	3302      	adds	r3, #2
 8004e66:	61bb      	str	r3, [r7, #24]
 8004e68:	e007      	b.n	8004e7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	781a      	ldrb	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	3301      	adds	r3, #1
 8004e78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1cb      	bne.n	8004e2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2140      	movs	r1, #64	@ 0x40
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 fb03 	bl	80054a8 <UART_WaitOnFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e006      	b.n	8004ec2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	e000      	b.n	8004ec2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ec0:	2302      	movs	r3, #2
  }
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d112      	bne.n	8004f0a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_UART_Receive_IT+0x26>
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e00b      	b.n	8004f0c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	461a      	mov	r2, r3
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fb2a 	bl	800555a <UART_Start_Receive_IT>
 8004f06:	4603      	mov	r3, r0
 8004f08:	e000      	b.n	8004f0c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004f0a:	2302      	movs	r3, #2
  }
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b0ba      	sub	sp, #232	@ 0xe8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004f52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10f      	bne.n	8004f7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d009      	beq.n	8004f7a <HAL_UART_IRQHandler+0x66>
 8004f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fc07 	bl	8005786 <UART_Receive_IT>
      return;
 8004f78:	e273      	b.n	8005462 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 80de 	beq.w	8005140 <HAL_UART_IRQHandler+0x22c>
 8004f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f94:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80d1 	beq.w	8005140 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00b      	beq.n	8004fc2 <HAL_UART_IRQHandler+0xae>
 8004faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fba:	f043 0201 	orr.w	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00b      	beq.n	8004fe6 <HAL_UART_IRQHandler+0xd2>
 8004fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fde:	f043 0202 	orr.w	r2, r3, #2
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00b      	beq.n	800500a <HAL_UART_IRQHandler+0xf6>
 8004ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005002:	f043 0204 	orr.w	r2, r3, #4
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800500a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d011      	beq.n	800503a <HAL_UART_IRQHandler+0x126>
 8005016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d105      	bne.n	800502e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005032:	f043 0208 	orr.w	r2, r3, #8
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 820a 	beq.w	8005458 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d008      	beq.n	8005062 <HAL_UART_IRQHandler+0x14e>
 8005050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fb92 	bl	8005786 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800506c:	2b40      	cmp	r3, #64	@ 0x40
 800506e:	bf0c      	ite	eq
 8005070:	2301      	moveq	r3, #1
 8005072:	2300      	movne	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b00      	cmp	r3, #0
 8005084:	d103      	bne.n	800508e <HAL_UART_IRQHandler+0x17a>
 8005086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800508a:	2b00      	cmp	r3, #0
 800508c:	d04f      	beq.n	800512e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fa9d 	bl	80055ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509e:	2b40      	cmp	r3, #64	@ 0x40
 80050a0:	d141      	bne.n	8005126 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3314      	adds	r3, #20
 80050a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050b0:	e853 3f00 	ldrex	r3, [r3]
 80050b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80050b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3314      	adds	r3, #20
 80050ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80050ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80050d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80050da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80050de:	e841 2300 	strex	r3, r2, [r1]
 80050e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80050e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1d9      	bne.n	80050a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d013      	beq.n	800511e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050fa:	4a8a      	ldr	r2, [pc, #552]	@ (8005324 <HAL_UART_IRQHandler+0x410>)
 80050fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005102:	4618      	mov	r0, r3
 8005104:	f7fd fb2d 	bl	8002762 <HAL_DMA_Abort_IT>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d016      	beq.n	800513c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005118:	4610      	mov	r0, r2
 800511a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511c:	e00e      	b.n	800513c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f9ac 	bl	800547c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005124:	e00a      	b.n	800513c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f9a8 	bl	800547c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512c:	e006      	b.n	800513c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f9a4 	bl	800547c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800513a:	e18d      	b.n	8005458 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513c:	bf00      	nop
    return;
 800513e:	e18b      	b.n	8005458 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005144:	2b01      	cmp	r3, #1
 8005146:	f040 8167 	bne.w	8005418 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800514a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 8160 	beq.w	8005418 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 8159 	beq.w	8005418 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005166:	2300      	movs	r3, #0
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60bb      	str	r3, [r7, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005186:	2b40      	cmp	r3, #64	@ 0x40
 8005188:	f040 80ce 	bne.w	8005328 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005198:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80a9 	beq.w	80052f4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051aa:	429a      	cmp	r2, r3
 80051ac:	f080 80a2 	bcs.w	80052f4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051c2:	f000 8088 	beq.w	80052d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	330c      	adds	r3, #12
 80051cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80051dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	330c      	adds	r3, #12
 80051ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80051f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80051fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005202:	e841 2300 	strex	r3, r2, [r1]
 8005206:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800520a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1d9      	bne.n	80051c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3314      	adds	r3, #20
 8005218:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800521c:	e853 3f00 	ldrex	r3, [r3]
 8005220:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005222:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005224:	f023 0301 	bic.w	r3, r3, #1
 8005228:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3314      	adds	r3, #20
 8005232:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005236:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800523a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800523e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005248:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e1      	bne.n	8005212 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3314      	adds	r3, #20
 8005254:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005256:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800525e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005264:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3314      	adds	r3, #20
 800526e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005272:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005274:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005278:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005280:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e3      	bne.n	800524e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2220      	movs	r2, #32
 800528a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	330c      	adds	r3, #12
 800529a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052a6:	f023 0310 	bic.w	r3, r3, #16
 80052aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	330c      	adds	r3, #12
 80052b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80052b8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80052ba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e3      	bne.n	8005294 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fd f9d6 	bl	8002682 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2202      	movs	r2, #2
 80052da:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	4619      	mov	r1, r3
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f8cf 	bl	8005490 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80052f2:	e0b3      	b.n	800545c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052fc:	429a      	cmp	r2, r3
 80052fe:	f040 80ad 	bne.w	800545c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800530c:	f040 80a6 	bne.w	800545c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800531a:	4619      	mov	r1, r3
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f8b7 	bl	8005490 <HAL_UARTEx_RxEventCallback>
      return;
 8005322:	e09b      	b.n	800545c <HAL_UART_IRQHandler+0x548>
 8005324:	08005695 	.word	0x08005695
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005330:	b29b      	uxth	r3, r3
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 808e 	beq.w	8005460 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005344:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 8089 	beq.w	8005460 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	330c      	adds	r3, #12
 8005354:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800535e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005360:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005364:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	330c      	adds	r3, #12
 800536e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005372:	647a      	str	r2, [r7, #68]	@ 0x44
 8005374:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005378:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e3      	bne.n	800534e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3314      	adds	r3, #20
 800538c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	623b      	str	r3, [r7, #32]
   return(result);
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3314      	adds	r3, #20
 80053a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80053ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e3      	bne.n	8005386 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	330c      	adds	r3, #12
 80053d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	e853 3f00 	ldrex	r3, [r3]
 80053da:	60fb      	str	r3, [r7, #12]
   return(result);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0310 	bic.w	r3, r3, #16
 80053e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	330c      	adds	r3, #12
 80053ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80053f0:	61fa      	str	r2, [r7, #28]
 80053f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	69b9      	ldr	r1, [r7, #24]
 80053f6:	69fa      	ldr	r2, [r7, #28]
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	617b      	str	r3, [r7, #20]
   return(result);
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e3      	bne.n	80053cc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800540a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800540e:	4619      	mov	r1, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f83d 	bl	8005490 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005416:	e023      	b.n	8005460 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800541c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005420:	2b00      	cmp	r3, #0
 8005422:	d009      	beq.n	8005438 <HAL_UART_IRQHandler+0x524>
 8005424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f940 	bl	80056b6 <UART_Transmit_IT>
    return;
 8005436:	e014      	b.n	8005462 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800543c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00e      	beq.n	8005462 <HAL_UART_IRQHandler+0x54e>
 8005444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f980 	bl	8005756 <UART_EndTransmit_IT>
    return;
 8005456:	e004      	b.n	8005462 <HAL_UART_IRQHandler+0x54e>
    return;
 8005458:	bf00      	nop
 800545a:	e002      	b.n	8005462 <HAL_UART_IRQHandler+0x54e>
      return;
 800545c:	bf00      	nop
 800545e:	e000      	b.n	8005462 <HAL_UART_IRQHandler+0x54e>
      return;
 8005460:	bf00      	nop
  }
}
 8005462:	37e8      	adds	r7, #232	@ 0xe8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	4613      	mov	r3, r2
 80054b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b8:	e03b      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c0:	d037      	beq.n	8005532 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c2:	f7fc ff9d 	bl	8002400 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	6a3a      	ldr	r2, [r7, #32]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d302      	bcc.n	80054d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e03a      	b.n	8005552 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d023      	beq.n	8005532 <UART_WaitOnFlagUntilTimeout+0x8a>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2b80      	cmp	r3, #128	@ 0x80
 80054ee:	d020      	beq.n	8005532 <UART_WaitOnFlagUntilTimeout+0x8a>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b40      	cmp	r3, #64	@ 0x40
 80054f4:	d01d      	beq.n	8005532 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0308 	and.w	r3, r3, #8
 8005500:	2b08      	cmp	r3, #8
 8005502:	d116      	bne.n	8005532 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005504:	2300      	movs	r3, #0
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 f857 	bl	80055ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2208      	movs	r2, #8
 8005524:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e00f      	b.n	8005552 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4013      	ands	r3, r2
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	429a      	cmp	r2, r3
 8005540:	bf0c      	ite	eq
 8005542:	2301      	moveq	r3, #1
 8005544:	2300      	movne	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	429a      	cmp	r2, r3
 800554e:	d0b4      	beq.n	80054ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	4613      	mov	r3, r2
 8005566:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	88fa      	ldrh	r2, [r7, #6]
 8005572:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	88fa      	ldrh	r2, [r7, #6]
 8005578:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2222      	movs	r2, #34	@ 0x22
 8005584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d007      	beq.n	80055a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800559e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695a      	ldr	r2, [r3, #20]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0201 	orr.w	r2, r2, #1
 80055ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0220 	orr.w	r2, r2, #32
 80055be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b095      	sub	sp, #84	@ 0x54
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	330c      	adds	r3, #12
 80055dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	330c      	adds	r3, #12
 80055f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80055f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e5      	bne.n	80055d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3314      	adds	r3, #20
 8005610:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	e853 3f00 	ldrex	r3, [r3]
 8005618:	61fb      	str	r3, [r7, #28]
   return(result);
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	f023 0301 	bic.w	r3, r3, #1
 8005620:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3314      	adds	r3, #20
 8005628:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800562a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800562c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005630:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e5      	bne.n	800560a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005642:	2b01      	cmp	r3, #1
 8005644:	d119      	bne.n	800567a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	330c      	adds	r3, #12
 800564c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	60bb      	str	r3, [r7, #8]
   return(result);
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f023 0310 	bic.w	r3, r3, #16
 800565c:	647b      	str	r3, [r7, #68]	@ 0x44
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	330c      	adds	r3, #12
 8005664:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005666:	61ba      	str	r2, [r7, #24]
 8005668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566a:	6979      	ldr	r1, [r7, #20]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	e841 2300 	strex	r3, r2, [r1]
 8005672:	613b      	str	r3, [r7, #16]
   return(result);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1e5      	bne.n	8005646 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005688:	bf00      	nop
 800568a:	3754      	adds	r7, #84	@ 0x54
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f7ff fee7 	bl	800547c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ae:	bf00      	nop
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b085      	sub	sp, #20
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b21      	cmp	r3, #33	@ 0x21
 80056c8:	d13e      	bne.n	8005748 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056d2:	d114      	bne.n	80056fe <UART_Transmit_IT+0x48>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d110      	bne.n	80056fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	1c9a      	adds	r2, r3, #2
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	621a      	str	r2, [r3, #32]
 80056fc:	e008      	b.n	8005710 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	1c59      	adds	r1, r3, #1
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6211      	str	r1, [r2, #32]
 8005708:	781a      	ldrb	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29b      	uxth	r3, r3
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	4619      	mov	r1, r3
 800571e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10f      	bne.n	8005744 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005732:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005742:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	e000      	b.n	800574a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005748:	2302      	movs	r3, #2
  }
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800576c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff fe76 	bl	8005468 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b08c      	sub	sp, #48	@ 0x30
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800578e:	2300      	movs	r3, #0
 8005790:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005792:	2300      	movs	r3, #0
 8005794:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b22      	cmp	r3, #34	@ 0x22
 80057a0:	f040 80aa 	bne.w	80058f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ac:	d115      	bne.n	80057da <UART_Receive_IT+0x54>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d111      	bne.n	80057da <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d2:	1c9a      	adds	r2, r3, #2
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80057d8:	e024      	b.n	8005824 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057e8:	d007      	beq.n	80057fa <UART_Receive_IT+0x74>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10a      	bne.n	8005808 <UART_Receive_IT+0x82>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	b2da      	uxtb	r2, r3
 8005802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005804:	701a      	strb	r2, [r3, #0]
 8005806:	e008      	b.n	800581a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005814:	b2da      	uxtb	r2, r3
 8005816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005818:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005828:	b29b      	uxth	r3, r3
 800582a:	3b01      	subs	r3, #1
 800582c:	b29b      	uxth	r3, r3
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	4619      	mov	r1, r3
 8005832:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005834:	2b00      	cmp	r3, #0
 8005836:	d15d      	bne.n	80058f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0220 	bic.w	r2, r2, #32
 8005846:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695a      	ldr	r2, [r3, #20]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0201 	bic.w	r2, r2, #1
 8005866:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587a:	2b01      	cmp	r3, #1
 800587c:	d135      	bne.n	80058ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	330c      	adds	r3, #12
 800588a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	613b      	str	r3, [r7, #16]
   return(result);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f023 0310 	bic.w	r3, r3, #16
 800589a:	627b      	str	r3, [r7, #36]	@ 0x24
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	330c      	adds	r3, #12
 80058a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a4:	623a      	str	r2, [r7, #32]
 80058a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	69f9      	ldr	r1, [r7, #28]
 80058aa:	6a3a      	ldr	r2, [r7, #32]
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e5      	bne.n	8005884 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0310 	and.w	r3, r3, #16
 80058c2:	2b10      	cmp	r3, #16
 80058c4:	d10a      	bne.n	80058dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff fdd4 	bl	8005490 <HAL_UARTEx_RxEventCallback>
 80058e8:	e002      	b.n	80058f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fb fb0e 	bl	8000f0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	e002      	b.n	80058fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	e000      	b.n	80058fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80058f8:	2302      	movs	r3, #2
  }
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3730      	adds	r7, #48	@ 0x30
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005908:	b0c0      	sub	sp, #256	@ 0x100
 800590a:	af00      	add	r7, sp, #0
 800590c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800591c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005920:	68d9      	ldr	r1, [r3, #12]
 8005922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	ea40 0301 	orr.w	r3, r0, r1
 800592c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800592e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	431a      	orrs	r2, r3
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	431a      	orrs	r2, r3
 8005944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800595c:	f021 010c 	bic.w	r1, r1, #12
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800596a:	430b      	orrs	r3, r1
 800596c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800596e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800597a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800597e:	6999      	ldr	r1, [r3, #24]
 8005980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	ea40 0301 	orr.w	r3, r0, r1
 800598a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	4b8f      	ldr	r3, [pc, #572]	@ (8005bd0 <UART_SetConfig+0x2cc>)
 8005994:	429a      	cmp	r2, r3
 8005996:	d005      	beq.n	80059a4 <UART_SetConfig+0xa0>
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b8d      	ldr	r3, [pc, #564]	@ (8005bd4 <UART_SetConfig+0x2d0>)
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d104      	bne.n	80059ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059a4:	f7fe f9f0 	bl	8003d88 <HAL_RCC_GetPCLK2Freq>
 80059a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80059ac:	e003      	b.n	80059b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059ae:	f7fe f9d7 	bl	8003d60 <HAL_RCC_GetPCLK1Freq>
 80059b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059c0:	f040 810c 	bne.w	8005bdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059c8:	2200      	movs	r2, #0
 80059ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80059d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80059d6:	4622      	mov	r2, r4
 80059d8:	462b      	mov	r3, r5
 80059da:	1891      	adds	r1, r2, r2
 80059dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059de:	415b      	adcs	r3, r3
 80059e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059e6:	4621      	mov	r1, r4
 80059e8:	eb12 0801 	adds.w	r8, r2, r1
 80059ec:	4629      	mov	r1, r5
 80059ee:	eb43 0901 	adc.w	r9, r3, r1
 80059f2:	f04f 0200 	mov.w	r2, #0
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a06:	4690      	mov	r8, r2
 8005a08:	4699      	mov	r9, r3
 8005a0a:	4623      	mov	r3, r4
 8005a0c:	eb18 0303 	adds.w	r3, r8, r3
 8005a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a14:	462b      	mov	r3, r5
 8005a16:	eb49 0303 	adc.w	r3, r9, r3
 8005a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a32:	460b      	mov	r3, r1
 8005a34:	18db      	adds	r3, r3, r3
 8005a36:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a38:	4613      	mov	r3, r2
 8005a3a:	eb42 0303 	adc.w	r3, r2, r3
 8005a3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a48:	f7fa fc32 	bl	80002b0 <__aeabi_uldivmod>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4b61      	ldr	r3, [pc, #388]	@ (8005bd8 <UART_SetConfig+0x2d4>)
 8005a52:	fba3 2302 	umull	r2, r3, r3, r2
 8005a56:	095b      	lsrs	r3, r3, #5
 8005a58:	011c      	lsls	r4, r3, #4
 8005a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	464b      	mov	r3, r9
 8005a70:	1891      	adds	r1, r2, r2
 8005a72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a74:	415b      	adcs	r3, r3
 8005a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	eb12 0a01 	adds.w	sl, r2, r1
 8005a82:	4649      	mov	r1, r9
 8005a84:	eb43 0b01 	adc.w	fp, r3, r1
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a9c:	4692      	mov	sl, r2
 8005a9e:	469b      	mov	fp, r3
 8005aa0:	4643      	mov	r3, r8
 8005aa2:	eb1a 0303 	adds.w	r3, sl, r3
 8005aa6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005aaa:	464b      	mov	r3, r9
 8005aac:	eb4b 0303 	adc.w	r3, fp, r3
 8005ab0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ac0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ac4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	18db      	adds	r3, r3, r3
 8005acc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ace:	4613      	mov	r3, r2
 8005ad0:	eb42 0303 	adc.w	r3, r2, r3
 8005ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ad6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005ada:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ade:	f7fa fbe7 	bl	80002b0 <__aeabi_uldivmod>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8005bd8 <UART_SetConfig+0x2d4>)
 8005aea:	fba3 2301 	umull	r2, r3, r3, r1
 8005aee:	095b      	lsrs	r3, r3, #5
 8005af0:	2264      	movs	r2, #100	@ 0x64
 8005af2:	fb02 f303 	mul.w	r3, r2, r3
 8005af6:	1acb      	subs	r3, r1, r3
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005afe:	4b36      	ldr	r3, [pc, #216]	@ (8005bd8 <UART_SetConfig+0x2d4>)
 8005b00:	fba3 2302 	umull	r2, r3, r3, r2
 8005b04:	095b      	lsrs	r3, r3, #5
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b0c:	441c      	add	r4, r3
 8005b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b12:	2200      	movs	r2, #0
 8005b14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b20:	4642      	mov	r2, r8
 8005b22:	464b      	mov	r3, r9
 8005b24:	1891      	adds	r1, r2, r2
 8005b26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b28:	415b      	adcs	r3, r3
 8005b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b30:	4641      	mov	r1, r8
 8005b32:	1851      	adds	r1, r2, r1
 8005b34:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b36:	4649      	mov	r1, r9
 8005b38:	414b      	adcs	r3, r1
 8005b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	f04f 0300 	mov.w	r3, #0
 8005b44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b48:	4659      	mov	r1, fp
 8005b4a:	00cb      	lsls	r3, r1, #3
 8005b4c:	4651      	mov	r1, sl
 8005b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b52:	4651      	mov	r1, sl
 8005b54:	00ca      	lsls	r2, r1, #3
 8005b56:	4610      	mov	r0, r2
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	4642      	mov	r2, r8
 8005b5e:	189b      	adds	r3, r3, r2
 8005b60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b64:	464b      	mov	r3, r9
 8005b66:	460a      	mov	r2, r1
 8005b68:	eb42 0303 	adc.w	r3, r2, r3
 8005b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b84:	460b      	mov	r3, r1
 8005b86:	18db      	adds	r3, r3, r3
 8005b88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	eb42 0303 	adc.w	r3, r2, r3
 8005b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b9a:	f7fa fb89 	bl	80002b0 <__aeabi_uldivmod>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd8 <UART_SetConfig+0x2d4>)
 8005ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	2164      	movs	r1, #100	@ 0x64
 8005bac:	fb01 f303 	mul.w	r3, r1, r3
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	3332      	adds	r3, #50	@ 0x32
 8005bb6:	4a08      	ldr	r2, [pc, #32]	@ (8005bd8 <UART_SetConfig+0x2d4>)
 8005bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	f003 0207 	and.w	r2, r3, #7
 8005bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4422      	add	r2, r4
 8005bca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bcc:	e106      	b.n	8005ddc <UART_SetConfig+0x4d8>
 8005bce:	bf00      	nop
 8005bd0:	40011000 	.word	0x40011000
 8005bd4:	40011400 	.word	0x40011400
 8005bd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005be6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005bea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005bee:	4642      	mov	r2, r8
 8005bf0:	464b      	mov	r3, r9
 8005bf2:	1891      	adds	r1, r2, r2
 8005bf4:	6239      	str	r1, [r7, #32]
 8005bf6:	415b      	adcs	r3, r3
 8005bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bfe:	4641      	mov	r1, r8
 8005c00:	1854      	adds	r4, r2, r1
 8005c02:	4649      	mov	r1, r9
 8005c04:	eb43 0501 	adc.w	r5, r3, r1
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	00eb      	lsls	r3, r5, #3
 8005c12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c16:	00e2      	lsls	r2, r4, #3
 8005c18:	4614      	mov	r4, r2
 8005c1a:	461d      	mov	r5, r3
 8005c1c:	4643      	mov	r3, r8
 8005c1e:	18e3      	adds	r3, r4, r3
 8005c20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c24:	464b      	mov	r3, r9
 8005c26:	eb45 0303 	adc.w	r3, r5, r3
 8005c2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c3e:	f04f 0200 	mov.w	r2, #0
 8005c42:	f04f 0300 	mov.w	r3, #0
 8005c46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	008b      	lsls	r3, r1, #2
 8005c4e:	4621      	mov	r1, r4
 8005c50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c54:	4621      	mov	r1, r4
 8005c56:	008a      	lsls	r2, r1, #2
 8005c58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c5c:	f7fa fb28 	bl	80002b0 <__aeabi_uldivmod>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4b60      	ldr	r3, [pc, #384]	@ (8005de8 <UART_SetConfig+0x4e4>)
 8005c66:	fba3 2302 	umull	r2, r3, r3, r2
 8005c6a:	095b      	lsrs	r3, r3, #5
 8005c6c:	011c      	lsls	r4, r3, #4
 8005c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c72:	2200      	movs	r2, #0
 8005c74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c80:	4642      	mov	r2, r8
 8005c82:	464b      	mov	r3, r9
 8005c84:	1891      	adds	r1, r2, r2
 8005c86:	61b9      	str	r1, [r7, #24]
 8005c88:	415b      	adcs	r3, r3
 8005c8a:	61fb      	str	r3, [r7, #28]
 8005c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c90:	4641      	mov	r1, r8
 8005c92:	1851      	adds	r1, r2, r1
 8005c94:	6139      	str	r1, [r7, #16]
 8005c96:	4649      	mov	r1, r9
 8005c98:	414b      	adcs	r3, r1
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ca8:	4659      	mov	r1, fp
 8005caa:	00cb      	lsls	r3, r1, #3
 8005cac:	4651      	mov	r1, sl
 8005cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cb2:	4651      	mov	r1, sl
 8005cb4:	00ca      	lsls	r2, r1, #3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4603      	mov	r3, r0
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	189b      	adds	r3, r3, r2
 8005cc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cc4:	464b      	mov	r3, r9
 8005cc6:	460a      	mov	r2, r1
 8005cc8:	eb42 0303 	adc.w	r3, r2, r3
 8005ccc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ce8:	4649      	mov	r1, r9
 8005cea:	008b      	lsls	r3, r1, #2
 8005cec:	4641      	mov	r1, r8
 8005cee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cf2:	4641      	mov	r1, r8
 8005cf4:	008a      	lsls	r2, r1, #2
 8005cf6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005cfa:	f7fa fad9 	bl	80002b0 <__aeabi_uldivmod>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4611      	mov	r1, r2
 8005d04:	4b38      	ldr	r3, [pc, #224]	@ (8005de8 <UART_SetConfig+0x4e4>)
 8005d06:	fba3 2301 	umull	r2, r3, r3, r1
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	2264      	movs	r2, #100	@ 0x64
 8005d0e:	fb02 f303 	mul.w	r3, r2, r3
 8005d12:	1acb      	subs	r3, r1, r3
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	3332      	adds	r3, #50	@ 0x32
 8005d18:	4a33      	ldr	r2, [pc, #204]	@ (8005de8 <UART_SetConfig+0x4e4>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d24:	441c      	add	r4, r3
 8005d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d34:	4642      	mov	r2, r8
 8005d36:	464b      	mov	r3, r9
 8005d38:	1891      	adds	r1, r2, r2
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	415b      	adcs	r3, r3
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d44:	4641      	mov	r1, r8
 8005d46:	1851      	adds	r1, r2, r1
 8005d48:	6039      	str	r1, [r7, #0]
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	414b      	adcs	r3, r1
 8005d4e:	607b      	str	r3, [r7, #4]
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	f04f 0300 	mov.w	r3, #0
 8005d58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d5c:	4659      	mov	r1, fp
 8005d5e:	00cb      	lsls	r3, r1, #3
 8005d60:	4651      	mov	r1, sl
 8005d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d66:	4651      	mov	r1, sl
 8005d68:	00ca      	lsls	r2, r1, #3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4603      	mov	r3, r0
 8005d70:	4642      	mov	r2, r8
 8005d72:	189b      	adds	r3, r3, r2
 8005d74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d76:	464b      	mov	r3, r9
 8005d78:	460a      	mov	r2, r1
 8005d7a:	eb42 0303 	adc.w	r3, r2, r3
 8005d7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d8c:	f04f 0200 	mov.w	r2, #0
 8005d90:	f04f 0300 	mov.w	r3, #0
 8005d94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d98:	4649      	mov	r1, r9
 8005d9a:	008b      	lsls	r3, r1, #2
 8005d9c:	4641      	mov	r1, r8
 8005d9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005da2:	4641      	mov	r1, r8
 8005da4:	008a      	lsls	r2, r1, #2
 8005da6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005daa:	f7fa fa81 	bl	80002b0 <__aeabi_uldivmod>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4b0d      	ldr	r3, [pc, #52]	@ (8005de8 <UART_SetConfig+0x4e4>)
 8005db4:	fba3 1302 	umull	r1, r3, r3, r2
 8005db8:	095b      	lsrs	r3, r3, #5
 8005dba:	2164      	movs	r1, #100	@ 0x64
 8005dbc:	fb01 f303 	mul.w	r3, r1, r3
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	3332      	adds	r3, #50	@ 0x32
 8005dc6:	4a08      	ldr	r2, [pc, #32]	@ (8005de8 <UART_SetConfig+0x4e4>)
 8005dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dcc:	095b      	lsrs	r3, r3, #5
 8005dce:	f003 020f 	and.w	r2, r3, #15
 8005dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4422      	add	r2, r4
 8005dda:	609a      	str	r2, [r3, #8]
}
 8005ddc:	bf00      	nop
 8005dde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005de2:	46bd      	mov	sp, r7
 8005de4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005de8:	51eb851f 	.word	0x51eb851f

08005dec <atoi>:
 8005dec:	220a      	movs	r2, #10
 8005dee:	2100      	movs	r1, #0
 8005df0:	f000 b87a 	b.w	8005ee8 <strtol>

08005df4 <_strtol_l.isra.0>:
 8005df4:	2b24      	cmp	r3, #36	@ 0x24
 8005df6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dfa:	4686      	mov	lr, r0
 8005dfc:	4690      	mov	r8, r2
 8005dfe:	d801      	bhi.n	8005e04 <_strtol_l.isra.0+0x10>
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d106      	bne.n	8005e12 <_strtol_l.isra.0+0x1e>
 8005e04:	f000 fb8e 	bl	8006524 <__errno>
 8005e08:	2316      	movs	r3, #22
 8005e0a:	6003      	str	r3, [r0, #0]
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e12:	4834      	ldr	r0, [pc, #208]	@ (8005ee4 <_strtol_l.isra.0+0xf0>)
 8005e14:	460d      	mov	r5, r1
 8005e16:	462a      	mov	r2, r5
 8005e18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e1c:	5d06      	ldrb	r6, [r0, r4]
 8005e1e:	f016 0608 	ands.w	r6, r6, #8
 8005e22:	d1f8      	bne.n	8005e16 <_strtol_l.isra.0+0x22>
 8005e24:	2c2d      	cmp	r4, #45	@ 0x2d
 8005e26:	d110      	bne.n	8005e4a <_strtol_l.isra.0+0x56>
 8005e28:	782c      	ldrb	r4, [r5, #0]
 8005e2a:	2601      	movs	r6, #1
 8005e2c:	1c95      	adds	r5, r2, #2
 8005e2e:	f033 0210 	bics.w	r2, r3, #16
 8005e32:	d115      	bne.n	8005e60 <_strtol_l.isra.0+0x6c>
 8005e34:	2c30      	cmp	r4, #48	@ 0x30
 8005e36:	d10d      	bne.n	8005e54 <_strtol_l.isra.0+0x60>
 8005e38:	782a      	ldrb	r2, [r5, #0]
 8005e3a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005e3e:	2a58      	cmp	r2, #88	@ 0x58
 8005e40:	d108      	bne.n	8005e54 <_strtol_l.isra.0+0x60>
 8005e42:	786c      	ldrb	r4, [r5, #1]
 8005e44:	3502      	adds	r5, #2
 8005e46:	2310      	movs	r3, #16
 8005e48:	e00a      	b.n	8005e60 <_strtol_l.isra.0+0x6c>
 8005e4a:	2c2b      	cmp	r4, #43	@ 0x2b
 8005e4c:	bf04      	itt	eq
 8005e4e:	782c      	ldrbeq	r4, [r5, #0]
 8005e50:	1c95      	addeq	r5, r2, #2
 8005e52:	e7ec      	b.n	8005e2e <_strtol_l.isra.0+0x3a>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1f6      	bne.n	8005e46 <_strtol_l.isra.0+0x52>
 8005e58:	2c30      	cmp	r4, #48	@ 0x30
 8005e5a:	bf14      	ite	ne
 8005e5c:	230a      	movne	r3, #10
 8005e5e:	2308      	moveq	r3, #8
 8005e60:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005e64:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005e68:	2200      	movs	r2, #0
 8005e6a:	fbbc f9f3 	udiv	r9, ip, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	fb03 ca19 	mls	sl, r3, r9, ip
 8005e74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005e78:	2f09      	cmp	r7, #9
 8005e7a:	d80f      	bhi.n	8005e9c <_strtol_l.isra.0+0xa8>
 8005e7c:	463c      	mov	r4, r7
 8005e7e:	42a3      	cmp	r3, r4
 8005e80:	dd1b      	ble.n	8005eba <_strtol_l.isra.0+0xc6>
 8005e82:	1c57      	adds	r7, r2, #1
 8005e84:	d007      	beq.n	8005e96 <_strtol_l.isra.0+0xa2>
 8005e86:	4581      	cmp	r9, r0
 8005e88:	d314      	bcc.n	8005eb4 <_strtol_l.isra.0+0xc0>
 8005e8a:	d101      	bne.n	8005e90 <_strtol_l.isra.0+0x9c>
 8005e8c:	45a2      	cmp	sl, r4
 8005e8e:	db11      	blt.n	8005eb4 <_strtol_l.isra.0+0xc0>
 8005e90:	fb00 4003 	mla	r0, r0, r3, r4
 8005e94:	2201      	movs	r2, #1
 8005e96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e9a:	e7eb      	b.n	8005e74 <_strtol_l.isra.0+0x80>
 8005e9c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005ea0:	2f19      	cmp	r7, #25
 8005ea2:	d801      	bhi.n	8005ea8 <_strtol_l.isra.0+0xb4>
 8005ea4:	3c37      	subs	r4, #55	@ 0x37
 8005ea6:	e7ea      	b.n	8005e7e <_strtol_l.isra.0+0x8a>
 8005ea8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005eac:	2f19      	cmp	r7, #25
 8005eae:	d804      	bhi.n	8005eba <_strtol_l.isra.0+0xc6>
 8005eb0:	3c57      	subs	r4, #87	@ 0x57
 8005eb2:	e7e4      	b.n	8005e7e <_strtol_l.isra.0+0x8a>
 8005eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb8:	e7ed      	b.n	8005e96 <_strtol_l.isra.0+0xa2>
 8005eba:	1c53      	adds	r3, r2, #1
 8005ebc:	d108      	bne.n	8005ed0 <_strtol_l.isra.0+0xdc>
 8005ebe:	2322      	movs	r3, #34	@ 0x22
 8005ec0:	f8ce 3000 	str.w	r3, [lr]
 8005ec4:	4660      	mov	r0, ip
 8005ec6:	f1b8 0f00 	cmp.w	r8, #0
 8005eca:	d0a0      	beq.n	8005e0e <_strtol_l.isra.0+0x1a>
 8005ecc:	1e69      	subs	r1, r5, #1
 8005ece:	e006      	b.n	8005ede <_strtol_l.isra.0+0xea>
 8005ed0:	b106      	cbz	r6, 8005ed4 <_strtol_l.isra.0+0xe0>
 8005ed2:	4240      	negs	r0, r0
 8005ed4:	f1b8 0f00 	cmp.w	r8, #0
 8005ed8:	d099      	beq.n	8005e0e <_strtol_l.isra.0+0x1a>
 8005eda:	2a00      	cmp	r2, #0
 8005edc:	d1f6      	bne.n	8005ecc <_strtol_l.isra.0+0xd8>
 8005ede:	f8c8 1000 	str.w	r1, [r8]
 8005ee2:	e794      	b.n	8005e0e <_strtol_l.isra.0+0x1a>
 8005ee4:	0800780d 	.word	0x0800780d

08005ee8 <strtol>:
 8005ee8:	4613      	mov	r3, r2
 8005eea:	460a      	mov	r2, r1
 8005eec:	4601      	mov	r1, r0
 8005eee:	4802      	ldr	r0, [pc, #8]	@ (8005ef8 <strtol+0x10>)
 8005ef0:	6800      	ldr	r0, [r0, #0]
 8005ef2:	f7ff bf7f 	b.w	8005df4 <_strtol_l.isra.0>
 8005ef6:	bf00      	nop
 8005ef8:	2000001c 	.word	0x2000001c

08005efc <std>:
 8005efc:	2300      	movs	r3, #0
 8005efe:	b510      	push	{r4, lr}
 8005f00:	4604      	mov	r4, r0
 8005f02:	e9c0 3300 	strd	r3, r3, [r0]
 8005f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f0a:	6083      	str	r3, [r0, #8]
 8005f0c:	8181      	strh	r1, [r0, #12]
 8005f0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f10:	81c2      	strh	r2, [r0, #14]
 8005f12:	6183      	str	r3, [r0, #24]
 8005f14:	4619      	mov	r1, r3
 8005f16:	2208      	movs	r2, #8
 8005f18:	305c      	adds	r0, #92	@ 0x5c
 8005f1a:	f000 fa23 	bl	8006364 <memset>
 8005f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f54 <std+0x58>)
 8005f20:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f22:	4b0d      	ldr	r3, [pc, #52]	@ (8005f58 <std+0x5c>)
 8005f24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f26:	4b0d      	ldr	r3, [pc, #52]	@ (8005f5c <std+0x60>)
 8005f28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f60 <std+0x64>)
 8005f2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f64 <std+0x68>)
 8005f30:	6224      	str	r4, [r4, #32]
 8005f32:	429c      	cmp	r4, r3
 8005f34:	d006      	beq.n	8005f44 <std+0x48>
 8005f36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f3a:	4294      	cmp	r4, r2
 8005f3c:	d002      	beq.n	8005f44 <std+0x48>
 8005f3e:	33d0      	adds	r3, #208	@ 0xd0
 8005f40:	429c      	cmp	r4, r3
 8005f42:	d105      	bne.n	8005f50 <std+0x54>
 8005f44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f4c:	f000 bb14 	b.w	8006578 <__retarget_lock_init_recursive>
 8005f50:	bd10      	pop	{r4, pc}
 8005f52:	bf00      	nop
 8005f54:	080061b5 	.word	0x080061b5
 8005f58:	080061d7 	.word	0x080061d7
 8005f5c:	0800620f 	.word	0x0800620f
 8005f60:	08006233 	.word	0x08006233
 8005f64:	20000aac 	.word	0x20000aac

08005f68 <stdio_exit_handler>:
 8005f68:	4a02      	ldr	r2, [pc, #8]	@ (8005f74 <stdio_exit_handler+0xc>)
 8005f6a:	4903      	ldr	r1, [pc, #12]	@ (8005f78 <stdio_exit_handler+0x10>)
 8005f6c:	4803      	ldr	r0, [pc, #12]	@ (8005f7c <stdio_exit_handler+0x14>)
 8005f6e:	f000 b869 	b.w	8006044 <_fwalk_sglue>
 8005f72:	bf00      	nop
 8005f74:	20000010 	.word	0x20000010
 8005f78:	0800713d 	.word	0x0800713d
 8005f7c:	20000020 	.word	0x20000020

08005f80 <cleanup_stdio>:
 8005f80:	6841      	ldr	r1, [r0, #4]
 8005f82:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb4 <cleanup_stdio+0x34>)
 8005f84:	4299      	cmp	r1, r3
 8005f86:	b510      	push	{r4, lr}
 8005f88:	4604      	mov	r4, r0
 8005f8a:	d001      	beq.n	8005f90 <cleanup_stdio+0x10>
 8005f8c:	f001 f8d6 	bl	800713c <_fflush_r>
 8005f90:	68a1      	ldr	r1, [r4, #8]
 8005f92:	4b09      	ldr	r3, [pc, #36]	@ (8005fb8 <cleanup_stdio+0x38>)
 8005f94:	4299      	cmp	r1, r3
 8005f96:	d002      	beq.n	8005f9e <cleanup_stdio+0x1e>
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f001 f8cf 	bl	800713c <_fflush_r>
 8005f9e:	68e1      	ldr	r1, [r4, #12]
 8005fa0:	4b06      	ldr	r3, [pc, #24]	@ (8005fbc <cleanup_stdio+0x3c>)
 8005fa2:	4299      	cmp	r1, r3
 8005fa4:	d004      	beq.n	8005fb0 <cleanup_stdio+0x30>
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fac:	f001 b8c6 	b.w	800713c <_fflush_r>
 8005fb0:	bd10      	pop	{r4, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000aac 	.word	0x20000aac
 8005fb8:	20000b14 	.word	0x20000b14
 8005fbc:	20000b7c 	.word	0x20000b7c

08005fc0 <global_stdio_init.part.0>:
 8005fc0:	b510      	push	{r4, lr}
 8005fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff0 <global_stdio_init.part.0+0x30>)
 8005fc4:	4c0b      	ldr	r4, [pc, #44]	@ (8005ff4 <global_stdio_init.part.0+0x34>)
 8005fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8005ff8 <global_stdio_init.part.0+0x38>)
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	4620      	mov	r0, r4
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2104      	movs	r1, #4
 8005fd0:	f7ff ff94 	bl	8005efc <std>
 8005fd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005fd8:	2201      	movs	r2, #1
 8005fda:	2109      	movs	r1, #9
 8005fdc:	f7ff ff8e 	bl	8005efc <std>
 8005fe0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fea:	2112      	movs	r1, #18
 8005fec:	f7ff bf86 	b.w	8005efc <std>
 8005ff0:	20000be4 	.word	0x20000be4
 8005ff4:	20000aac 	.word	0x20000aac
 8005ff8:	08005f69 	.word	0x08005f69

08005ffc <__sfp_lock_acquire>:
 8005ffc:	4801      	ldr	r0, [pc, #4]	@ (8006004 <__sfp_lock_acquire+0x8>)
 8005ffe:	f000 babc 	b.w	800657a <__retarget_lock_acquire_recursive>
 8006002:	bf00      	nop
 8006004:	20000bed 	.word	0x20000bed

08006008 <__sfp_lock_release>:
 8006008:	4801      	ldr	r0, [pc, #4]	@ (8006010 <__sfp_lock_release+0x8>)
 800600a:	f000 bab7 	b.w	800657c <__retarget_lock_release_recursive>
 800600e:	bf00      	nop
 8006010:	20000bed 	.word	0x20000bed

08006014 <__sinit>:
 8006014:	b510      	push	{r4, lr}
 8006016:	4604      	mov	r4, r0
 8006018:	f7ff fff0 	bl	8005ffc <__sfp_lock_acquire>
 800601c:	6a23      	ldr	r3, [r4, #32]
 800601e:	b11b      	cbz	r3, 8006028 <__sinit+0x14>
 8006020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006024:	f7ff bff0 	b.w	8006008 <__sfp_lock_release>
 8006028:	4b04      	ldr	r3, [pc, #16]	@ (800603c <__sinit+0x28>)
 800602a:	6223      	str	r3, [r4, #32]
 800602c:	4b04      	ldr	r3, [pc, #16]	@ (8006040 <__sinit+0x2c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1f5      	bne.n	8006020 <__sinit+0xc>
 8006034:	f7ff ffc4 	bl	8005fc0 <global_stdio_init.part.0>
 8006038:	e7f2      	b.n	8006020 <__sinit+0xc>
 800603a:	bf00      	nop
 800603c:	08005f81 	.word	0x08005f81
 8006040:	20000be4 	.word	0x20000be4

08006044 <_fwalk_sglue>:
 8006044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006048:	4607      	mov	r7, r0
 800604a:	4688      	mov	r8, r1
 800604c:	4614      	mov	r4, r2
 800604e:	2600      	movs	r6, #0
 8006050:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006054:	f1b9 0901 	subs.w	r9, r9, #1
 8006058:	d505      	bpl.n	8006066 <_fwalk_sglue+0x22>
 800605a:	6824      	ldr	r4, [r4, #0]
 800605c:	2c00      	cmp	r4, #0
 800605e:	d1f7      	bne.n	8006050 <_fwalk_sglue+0xc>
 8006060:	4630      	mov	r0, r6
 8006062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006066:	89ab      	ldrh	r3, [r5, #12]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d907      	bls.n	800607c <_fwalk_sglue+0x38>
 800606c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006070:	3301      	adds	r3, #1
 8006072:	d003      	beq.n	800607c <_fwalk_sglue+0x38>
 8006074:	4629      	mov	r1, r5
 8006076:	4638      	mov	r0, r7
 8006078:	47c0      	blx	r8
 800607a:	4306      	orrs	r6, r0
 800607c:	3568      	adds	r5, #104	@ 0x68
 800607e:	e7e9      	b.n	8006054 <_fwalk_sglue+0x10>

08006080 <iprintf>:
 8006080:	b40f      	push	{r0, r1, r2, r3}
 8006082:	b507      	push	{r0, r1, r2, lr}
 8006084:	4906      	ldr	r1, [pc, #24]	@ (80060a0 <iprintf+0x20>)
 8006086:	ab04      	add	r3, sp, #16
 8006088:	6808      	ldr	r0, [r1, #0]
 800608a:	f853 2b04 	ldr.w	r2, [r3], #4
 800608e:	6881      	ldr	r1, [r0, #8]
 8006090:	9301      	str	r3, [sp, #4]
 8006092:	f000 fd2b 	bl	8006aec <_vfiprintf_r>
 8006096:	b003      	add	sp, #12
 8006098:	f85d eb04 	ldr.w	lr, [sp], #4
 800609c:	b004      	add	sp, #16
 800609e:	4770      	bx	lr
 80060a0:	2000001c 	.word	0x2000001c

080060a4 <putchar>:
 80060a4:	4b02      	ldr	r3, [pc, #8]	@ (80060b0 <putchar+0xc>)
 80060a6:	4601      	mov	r1, r0
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	6882      	ldr	r2, [r0, #8]
 80060ac:	f001 b8e2 	b.w	8007274 <_putc_r>
 80060b0:	2000001c 	.word	0x2000001c

080060b4 <_puts_r>:
 80060b4:	6a03      	ldr	r3, [r0, #32]
 80060b6:	b570      	push	{r4, r5, r6, lr}
 80060b8:	6884      	ldr	r4, [r0, #8]
 80060ba:	4605      	mov	r5, r0
 80060bc:	460e      	mov	r6, r1
 80060be:	b90b      	cbnz	r3, 80060c4 <_puts_r+0x10>
 80060c0:	f7ff ffa8 	bl	8006014 <__sinit>
 80060c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060c6:	07db      	lsls	r3, r3, #31
 80060c8:	d405      	bmi.n	80060d6 <_puts_r+0x22>
 80060ca:	89a3      	ldrh	r3, [r4, #12]
 80060cc:	0598      	lsls	r0, r3, #22
 80060ce:	d402      	bmi.n	80060d6 <_puts_r+0x22>
 80060d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060d2:	f000 fa52 	bl	800657a <__retarget_lock_acquire_recursive>
 80060d6:	89a3      	ldrh	r3, [r4, #12]
 80060d8:	0719      	lsls	r1, r3, #28
 80060da:	d502      	bpl.n	80060e2 <_puts_r+0x2e>
 80060dc:	6923      	ldr	r3, [r4, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d135      	bne.n	800614e <_puts_r+0x9a>
 80060e2:	4621      	mov	r1, r4
 80060e4:	4628      	mov	r0, r5
 80060e6:	f000 f8e7 	bl	80062b8 <__swsetup_r>
 80060ea:	b380      	cbz	r0, 800614e <_puts_r+0x9a>
 80060ec:	f04f 35ff 	mov.w	r5, #4294967295
 80060f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060f2:	07da      	lsls	r2, r3, #31
 80060f4:	d405      	bmi.n	8006102 <_puts_r+0x4e>
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	059b      	lsls	r3, r3, #22
 80060fa:	d402      	bmi.n	8006102 <_puts_r+0x4e>
 80060fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060fe:	f000 fa3d 	bl	800657c <__retarget_lock_release_recursive>
 8006102:	4628      	mov	r0, r5
 8006104:	bd70      	pop	{r4, r5, r6, pc}
 8006106:	2b00      	cmp	r3, #0
 8006108:	da04      	bge.n	8006114 <_puts_r+0x60>
 800610a:	69a2      	ldr	r2, [r4, #24]
 800610c:	429a      	cmp	r2, r3
 800610e:	dc17      	bgt.n	8006140 <_puts_r+0x8c>
 8006110:	290a      	cmp	r1, #10
 8006112:	d015      	beq.n	8006140 <_puts_r+0x8c>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	6022      	str	r2, [r4, #0]
 800611a:	7019      	strb	r1, [r3, #0]
 800611c:	68a3      	ldr	r3, [r4, #8]
 800611e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006122:	3b01      	subs	r3, #1
 8006124:	60a3      	str	r3, [r4, #8]
 8006126:	2900      	cmp	r1, #0
 8006128:	d1ed      	bne.n	8006106 <_puts_r+0x52>
 800612a:	2b00      	cmp	r3, #0
 800612c:	da11      	bge.n	8006152 <_puts_r+0x9e>
 800612e:	4622      	mov	r2, r4
 8006130:	210a      	movs	r1, #10
 8006132:	4628      	mov	r0, r5
 8006134:	f000 f881 	bl	800623a <__swbuf_r>
 8006138:	3001      	adds	r0, #1
 800613a:	d0d7      	beq.n	80060ec <_puts_r+0x38>
 800613c:	250a      	movs	r5, #10
 800613e:	e7d7      	b.n	80060f0 <_puts_r+0x3c>
 8006140:	4622      	mov	r2, r4
 8006142:	4628      	mov	r0, r5
 8006144:	f000 f879 	bl	800623a <__swbuf_r>
 8006148:	3001      	adds	r0, #1
 800614a:	d1e7      	bne.n	800611c <_puts_r+0x68>
 800614c:	e7ce      	b.n	80060ec <_puts_r+0x38>
 800614e:	3e01      	subs	r6, #1
 8006150:	e7e4      	b.n	800611c <_puts_r+0x68>
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	6022      	str	r2, [r4, #0]
 8006158:	220a      	movs	r2, #10
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	e7ee      	b.n	800613c <_puts_r+0x88>
	...

08006160 <puts>:
 8006160:	4b02      	ldr	r3, [pc, #8]	@ (800616c <puts+0xc>)
 8006162:	4601      	mov	r1, r0
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	f7ff bfa5 	b.w	80060b4 <_puts_r>
 800616a:	bf00      	nop
 800616c:	2000001c 	.word	0x2000001c

08006170 <siprintf>:
 8006170:	b40e      	push	{r1, r2, r3}
 8006172:	b510      	push	{r4, lr}
 8006174:	b09d      	sub	sp, #116	@ 0x74
 8006176:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006178:	9002      	str	r0, [sp, #8]
 800617a:	9006      	str	r0, [sp, #24]
 800617c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006180:	480a      	ldr	r0, [pc, #40]	@ (80061ac <siprintf+0x3c>)
 8006182:	9107      	str	r1, [sp, #28]
 8006184:	9104      	str	r1, [sp, #16]
 8006186:	490a      	ldr	r1, [pc, #40]	@ (80061b0 <siprintf+0x40>)
 8006188:	f853 2b04 	ldr.w	r2, [r3], #4
 800618c:	9105      	str	r1, [sp, #20]
 800618e:	2400      	movs	r4, #0
 8006190:	a902      	add	r1, sp, #8
 8006192:	6800      	ldr	r0, [r0, #0]
 8006194:	9301      	str	r3, [sp, #4]
 8006196:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006198:	f000 fb82 	bl	80068a0 <_svfiprintf_r>
 800619c:	9b02      	ldr	r3, [sp, #8]
 800619e:	701c      	strb	r4, [r3, #0]
 80061a0:	b01d      	add	sp, #116	@ 0x74
 80061a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a6:	b003      	add	sp, #12
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	2000001c 	.word	0x2000001c
 80061b0:	ffff0208 	.word	0xffff0208

080061b4 <__sread>:
 80061b4:	b510      	push	{r4, lr}
 80061b6:	460c      	mov	r4, r1
 80061b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061bc:	f000 f98e 	bl	80064dc <_read_r>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	bfab      	itete	ge
 80061c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80061c6:	89a3      	ldrhlt	r3, [r4, #12]
 80061c8:	181b      	addge	r3, r3, r0
 80061ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80061ce:	bfac      	ite	ge
 80061d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80061d2:	81a3      	strhlt	r3, [r4, #12]
 80061d4:	bd10      	pop	{r4, pc}

080061d6 <__swrite>:
 80061d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061da:	461f      	mov	r7, r3
 80061dc:	898b      	ldrh	r3, [r1, #12]
 80061de:	05db      	lsls	r3, r3, #23
 80061e0:	4605      	mov	r5, r0
 80061e2:	460c      	mov	r4, r1
 80061e4:	4616      	mov	r6, r2
 80061e6:	d505      	bpl.n	80061f4 <__swrite+0x1e>
 80061e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ec:	2302      	movs	r3, #2
 80061ee:	2200      	movs	r2, #0
 80061f0:	f000 f962 	bl	80064b8 <_lseek_r>
 80061f4:	89a3      	ldrh	r3, [r4, #12]
 80061f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061fe:	81a3      	strh	r3, [r4, #12]
 8006200:	4632      	mov	r2, r6
 8006202:	463b      	mov	r3, r7
 8006204:	4628      	mov	r0, r5
 8006206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800620a:	f000 b979 	b.w	8006500 <_write_r>

0800620e <__sseek>:
 800620e:	b510      	push	{r4, lr}
 8006210:	460c      	mov	r4, r1
 8006212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006216:	f000 f94f 	bl	80064b8 <_lseek_r>
 800621a:	1c43      	adds	r3, r0, #1
 800621c:	89a3      	ldrh	r3, [r4, #12]
 800621e:	bf15      	itete	ne
 8006220:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006222:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006226:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800622a:	81a3      	strheq	r3, [r4, #12]
 800622c:	bf18      	it	ne
 800622e:	81a3      	strhne	r3, [r4, #12]
 8006230:	bd10      	pop	{r4, pc}

08006232 <__sclose>:
 8006232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006236:	f000 b92f 	b.w	8006498 <_close_r>

0800623a <__swbuf_r>:
 800623a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623c:	460e      	mov	r6, r1
 800623e:	4614      	mov	r4, r2
 8006240:	4605      	mov	r5, r0
 8006242:	b118      	cbz	r0, 800624c <__swbuf_r+0x12>
 8006244:	6a03      	ldr	r3, [r0, #32]
 8006246:	b90b      	cbnz	r3, 800624c <__swbuf_r+0x12>
 8006248:	f7ff fee4 	bl	8006014 <__sinit>
 800624c:	69a3      	ldr	r3, [r4, #24]
 800624e:	60a3      	str	r3, [r4, #8]
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	071a      	lsls	r2, r3, #28
 8006254:	d501      	bpl.n	800625a <__swbuf_r+0x20>
 8006256:	6923      	ldr	r3, [r4, #16]
 8006258:	b943      	cbnz	r3, 800626c <__swbuf_r+0x32>
 800625a:	4621      	mov	r1, r4
 800625c:	4628      	mov	r0, r5
 800625e:	f000 f82b 	bl	80062b8 <__swsetup_r>
 8006262:	b118      	cbz	r0, 800626c <__swbuf_r+0x32>
 8006264:	f04f 37ff 	mov.w	r7, #4294967295
 8006268:	4638      	mov	r0, r7
 800626a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	6922      	ldr	r2, [r4, #16]
 8006270:	1a98      	subs	r0, r3, r2
 8006272:	6963      	ldr	r3, [r4, #20]
 8006274:	b2f6      	uxtb	r6, r6
 8006276:	4283      	cmp	r3, r0
 8006278:	4637      	mov	r7, r6
 800627a:	dc05      	bgt.n	8006288 <__swbuf_r+0x4e>
 800627c:	4621      	mov	r1, r4
 800627e:	4628      	mov	r0, r5
 8006280:	f000 ff5c 	bl	800713c <_fflush_r>
 8006284:	2800      	cmp	r0, #0
 8006286:	d1ed      	bne.n	8006264 <__swbuf_r+0x2a>
 8006288:	68a3      	ldr	r3, [r4, #8]
 800628a:	3b01      	subs	r3, #1
 800628c:	60a3      	str	r3, [r4, #8]
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	6022      	str	r2, [r4, #0]
 8006294:	701e      	strb	r6, [r3, #0]
 8006296:	6962      	ldr	r2, [r4, #20]
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	429a      	cmp	r2, r3
 800629c:	d004      	beq.n	80062a8 <__swbuf_r+0x6e>
 800629e:	89a3      	ldrh	r3, [r4, #12]
 80062a0:	07db      	lsls	r3, r3, #31
 80062a2:	d5e1      	bpl.n	8006268 <__swbuf_r+0x2e>
 80062a4:	2e0a      	cmp	r6, #10
 80062a6:	d1df      	bne.n	8006268 <__swbuf_r+0x2e>
 80062a8:	4621      	mov	r1, r4
 80062aa:	4628      	mov	r0, r5
 80062ac:	f000 ff46 	bl	800713c <_fflush_r>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d0d9      	beq.n	8006268 <__swbuf_r+0x2e>
 80062b4:	e7d6      	b.n	8006264 <__swbuf_r+0x2a>
	...

080062b8 <__swsetup_r>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	4b29      	ldr	r3, [pc, #164]	@ (8006360 <__swsetup_r+0xa8>)
 80062bc:	4605      	mov	r5, r0
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	460c      	mov	r4, r1
 80062c2:	b118      	cbz	r0, 80062cc <__swsetup_r+0x14>
 80062c4:	6a03      	ldr	r3, [r0, #32]
 80062c6:	b90b      	cbnz	r3, 80062cc <__swsetup_r+0x14>
 80062c8:	f7ff fea4 	bl	8006014 <__sinit>
 80062cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062d0:	0719      	lsls	r1, r3, #28
 80062d2:	d422      	bmi.n	800631a <__swsetup_r+0x62>
 80062d4:	06da      	lsls	r2, r3, #27
 80062d6:	d407      	bmi.n	80062e8 <__swsetup_r+0x30>
 80062d8:	2209      	movs	r2, #9
 80062da:	602a      	str	r2, [r5, #0]
 80062dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062e0:	81a3      	strh	r3, [r4, #12]
 80062e2:	f04f 30ff 	mov.w	r0, #4294967295
 80062e6:	e033      	b.n	8006350 <__swsetup_r+0x98>
 80062e8:	0758      	lsls	r0, r3, #29
 80062ea:	d512      	bpl.n	8006312 <__swsetup_r+0x5a>
 80062ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062ee:	b141      	cbz	r1, 8006302 <__swsetup_r+0x4a>
 80062f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062f4:	4299      	cmp	r1, r3
 80062f6:	d002      	beq.n	80062fe <__swsetup_r+0x46>
 80062f8:	4628      	mov	r0, r5
 80062fa:	f000 f975 	bl	80065e8 <_free_r>
 80062fe:	2300      	movs	r3, #0
 8006300:	6363      	str	r3, [r4, #52]	@ 0x34
 8006302:	89a3      	ldrh	r3, [r4, #12]
 8006304:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006308:	81a3      	strh	r3, [r4, #12]
 800630a:	2300      	movs	r3, #0
 800630c:	6063      	str	r3, [r4, #4]
 800630e:	6923      	ldr	r3, [r4, #16]
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	89a3      	ldrh	r3, [r4, #12]
 8006314:	f043 0308 	orr.w	r3, r3, #8
 8006318:	81a3      	strh	r3, [r4, #12]
 800631a:	6923      	ldr	r3, [r4, #16]
 800631c:	b94b      	cbnz	r3, 8006332 <__swsetup_r+0x7a>
 800631e:	89a3      	ldrh	r3, [r4, #12]
 8006320:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006328:	d003      	beq.n	8006332 <__swsetup_r+0x7a>
 800632a:	4621      	mov	r1, r4
 800632c:	4628      	mov	r0, r5
 800632e:	f000 ff65 	bl	80071fc <__smakebuf_r>
 8006332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006336:	f013 0201 	ands.w	r2, r3, #1
 800633a:	d00a      	beq.n	8006352 <__swsetup_r+0x9a>
 800633c:	2200      	movs	r2, #0
 800633e:	60a2      	str	r2, [r4, #8]
 8006340:	6962      	ldr	r2, [r4, #20]
 8006342:	4252      	negs	r2, r2
 8006344:	61a2      	str	r2, [r4, #24]
 8006346:	6922      	ldr	r2, [r4, #16]
 8006348:	b942      	cbnz	r2, 800635c <__swsetup_r+0xa4>
 800634a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800634e:	d1c5      	bne.n	80062dc <__swsetup_r+0x24>
 8006350:	bd38      	pop	{r3, r4, r5, pc}
 8006352:	0799      	lsls	r1, r3, #30
 8006354:	bf58      	it	pl
 8006356:	6962      	ldrpl	r2, [r4, #20]
 8006358:	60a2      	str	r2, [r4, #8]
 800635a:	e7f4      	b.n	8006346 <__swsetup_r+0x8e>
 800635c:	2000      	movs	r0, #0
 800635e:	e7f7      	b.n	8006350 <__swsetup_r+0x98>
 8006360:	2000001c 	.word	0x2000001c

08006364 <memset>:
 8006364:	4402      	add	r2, r0
 8006366:	4603      	mov	r3, r0
 8006368:	4293      	cmp	r3, r2
 800636a:	d100      	bne.n	800636e <memset+0xa>
 800636c:	4770      	bx	lr
 800636e:	f803 1b01 	strb.w	r1, [r3], #1
 8006372:	e7f9      	b.n	8006368 <memset+0x4>

08006374 <strchr>:
 8006374:	b2c9      	uxtb	r1, r1
 8006376:	4603      	mov	r3, r0
 8006378:	4618      	mov	r0, r3
 800637a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800637e:	b112      	cbz	r2, 8006386 <strchr+0x12>
 8006380:	428a      	cmp	r2, r1
 8006382:	d1f9      	bne.n	8006378 <strchr+0x4>
 8006384:	4770      	bx	lr
 8006386:	2900      	cmp	r1, #0
 8006388:	bf18      	it	ne
 800638a:	2000      	movne	r0, #0
 800638c:	4770      	bx	lr

0800638e <strncmp>:
 800638e:	b510      	push	{r4, lr}
 8006390:	b16a      	cbz	r2, 80063ae <strncmp+0x20>
 8006392:	3901      	subs	r1, #1
 8006394:	1884      	adds	r4, r0, r2
 8006396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800639a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800639e:	429a      	cmp	r2, r3
 80063a0:	d103      	bne.n	80063aa <strncmp+0x1c>
 80063a2:	42a0      	cmp	r0, r4
 80063a4:	d001      	beq.n	80063aa <strncmp+0x1c>
 80063a6:	2a00      	cmp	r2, #0
 80063a8:	d1f5      	bne.n	8006396 <strncmp+0x8>
 80063aa:	1ad0      	subs	r0, r2, r3
 80063ac:	bd10      	pop	{r4, pc}
 80063ae:	4610      	mov	r0, r2
 80063b0:	e7fc      	b.n	80063ac <strncmp+0x1e>
	...

080063b4 <strtok>:
 80063b4:	4b16      	ldr	r3, [pc, #88]	@ (8006410 <strtok+0x5c>)
 80063b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ba:	681f      	ldr	r7, [r3, #0]
 80063bc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80063be:	4605      	mov	r5, r0
 80063c0:	460e      	mov	r6, r1
 80063c2:	b9ec      	cbnz	r4, 8006400 <strtok+0x4c>
 80063c4:	2050      	movs	r0, #80	@ 0x50
 80063c6:	f000 f959 	bl	800667c <malloc>
 80063ca:	4602      	mov	r2, r0
 80063cc:	6478      	str	r0, [r7, #68]	@ 0x44
 80063ce:	b920      	cbnz	r0, 80063da <strtok+0x26>
 80063d0:	4b10      	ldr	r3, [pc, #64]	@ (8006414 <strtok+0x60>)
 80063d2:	4811      	ldr	r0, [pc, #68]	@ (8006418 <strtok+0x64>)
 80063d4:	215b      	movs	r1, #91	@ 0x5b
 80063d6:	f000 f8e9 	bl	80065ac <__assert_func>
 80063da:	e9c0 4400 	strd	r4, r4, [r0]
 80063de:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80063e2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80063e6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80063ea:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80063ee:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80063f2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80063f6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80063fa:	6184      	str	r4, [r0, #24]
 80063fc:	7704      	strb	r4, [r0, #28]
 80063fe:	6244      	str	r4, [r0, #36]	@ 0x24
 8006400:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006402:	4631      	mov	r1, r6
 8006404:	4628      	mov	r0, r5
 8006406:	2301      	movs	r3, #1
 8006408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800640c:	f000 b806 	b.w	800641c <__strtok_r>
 8006410:	2000001c 	.word	0x2000001c
 8006414:	0800790d 	.word	0x0800790d
 8006418:	08007924 	.word	0x08007924

0800641c <__strtok_r>:
 800641c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800641e:	4604      	mov	r4, r0
 8006420:	b908      	cbnz	r0, 8006426 <__strtok_r+0xa>
 8006422:	6814      	ldr	r4, [r2, #0]
 8006424:	b144      	cbz	r4, 8006438 <__strtok_r+0x1c>
 8006426:	4620      	mov	r0, r4
 8006428:	f814 5b01 	ldrb.w	r5, [r4], #1
 800642c:	460f      	mov	r7, r1
 800642e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006432:	b91e      	cbnz	r6, 800643c <__strtok_r+0x20>
 8006434:	b965      	cbnz	r5, 8006450 <__strtok_r+0x34>
 8006436:	6015      	str	r5, [r2, #0]
 8006438:	2000      	movs	r0, #0
 800643a:	e005      	b.n	8006448 <__strtok_r+0x2c>
 800643c:	42b5      	cmp	r5, r6
 800643e:	d1f6      	bne.n	800642e <__strtok_r+0x12>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1f0      	bne.n	8006426 <__strtok_r+0xa>
 8006444:	6014      	str	r4, [r2, #0]
 8006446:	7003      	strb	r3, [r0, #0]
 8006448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800644a:	461c      	mov	r4, r3
 800644c:	e00c      	b.n	8006468 <__strtok_r+0x4c>
 800644e:	b91d      	cbnz	r5, 8006458 <__strtok_r+0x3c>
 8006450:	4627      	mov	r7, r4
 8006452:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006456:	460e      	mov	r6, r1
 8006458:	f816 5b01 	ldrb.w	r5, [r6], #1
 800645c:	42ab      	cmp	r3, r5
 800645e:	d1f6      	bne.n	800644e <__strtok_r+0x32>
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0f2      	beq.n	800644a <__strtok_r+0x2e>
 8006464:	2300      	movs	r3, #0
 8006466:	703b      	strb	r3, [r7, #0]
 8006468:	6014      	str	r4, [r2, #0]
 800646a:	e7ed      	b.n	8006448 <__strtok_r+0x2c>

0800646c <strstr>:
 800646c:	780a      	ldrb	r2, [r1, #0]
 800646e:	b570      	push	{r4, r5, r6, lr}
 8006470:	b96a      	cbnz	r2, 800648e <strstr+0x22>
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	429a      	cmp	r2, r3
 8006476:	d109      	bne.n	800648c <strstr+0x20>
 8006478:	460c      	mov	r4, r1
 800647a:	4605      	mov	r5, r0
 800647c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0f6      	beq.n	8006472 <strstr+0x6>
 8006484:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006488:	429e      	cmp	r6, r3
 800648a:	d0f7      	beq.n	800647c <strstr+0x10>
 800648c:	3001      	adds	r0, #1
 800648e:	7803      	ldrb	r3, [r0, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1ef      	bne.n	8006474 <strstr+0x8>
 8006494:	4618      	mov	r0, r3
 8006496:	e7ec      	b.n	8006472 <strstr+0x6>

08006498 <_close_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	4d06      	ldr	r5, [pc, #24]	@ (80064b4 <_close_r+0x1c>)
 800649c:	2300      	movs	r3, #0
 800649e:	4604      	mov	r4, r0
 80064a0:	4608      	mov	r0, r1
 80064a2:	602b      	str	r3, [r5, #0]
 80064a4:	f7fb fea0 	bl	80021e8 <_close>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d102      	bne.n	80064b2 <_close_r+0x1a>
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	b103      	cbz	r3, 80064b2 <_close_r+0x1a>
 80064b0:	6023      	str	r3, [r4, #0]
 80064b2:	bd38      	pop	{r3, r4, r5, pc}
 80064b4:	20000be8 	.word	0x20000be8

080064b8 <_lseek_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4d07      	ldr	r5, [pc, #28]	@ (80064d8 <_lseek_r+0x20>)
 80064bc:	4604      	mov	r4, r0
 80064be:	4608      	mov	r0, r1
 80064c0:	4611      	mov	r1, r2
 80064c2:	2200      	movs	r2, #0
 80064c4:	602a      	str	r2, [r5, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	f7fb feb5 	bl	8002236 <_lseek>
 80064cc:	1c43      	adds	r3, r0, #1
 80064ce:	d102      	bne.n	80064d6 <_lseek_r+0x1e>
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	b103      	cbz	r3, 80064d6 <_lseek_r+0x1e>
 80064d4:	6023      	str	r3, [r4, #0]
 80064d6:	bd38      	pop	{r3, r4, r5, pc}
 80064d8:	20000be8 	.word	0x20000be8

080064dc <_read_r>:
 80064dc:	b538      	push	{r3, r4, r5, lr}
 80064de:	4d07      	ldr	r5, [pc, #28]	@ (80064fc <_read_r+0x20>)
 80064e0:	4604      	mov	r4, r0
 80064e2:	4608      	mov	r0, r1
 80064e4:	4611      	mov	r1, r2
 80064e6:	2200      	movs	r2, #0
 80064e8:	602a      	str	r2, [r5, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	f7fb fe43 	bl	8002176 <_read>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d102      	bne.n	80064fa <_read_r+0x1e>
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	b103      	cbz	r3, 80064fa <_read_r+0x1e>
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	bd38      	pop	{r3, r4, r5, pc}
 80064fc:	20000be8 	.word	0x20000be8

08006500 <_write_r>:
 8006500:	b538      	push	{r3, r4, r5, lr}
 8006502:	4d07      	ldr	r5, [pc, #28]	@ (8006520 <_write_r+0x20>)
 8006504:	4604      	mov	r4, r0
 8006506:	4608      	mov	r0, r1
 8006508:	4611      	mov	r1, r2
 800650a:	2200      	movs	r2, #0
 800650c:	602a      	str	r2, [r5, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	f7fb fe4e 	bl	80021b0 <_write>
 8006514:	1c43      	adds	r3, r0, #1
 8006516:	d102      	bne.n	800651e <_write_r+0x1e>
 8006518:	682b      	ldr	r3, [r5, #0]
 800651a:	b103      	cbz	r3, 800651e <_write_r+0x1e>
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	bd38      	pop	{r3, r4, r5, pc}
 8006520:	20000be8 	.word	0x20000be8

08006524 <__errno>:
 8006524:	4b01      	ldr	r3, [pc, #4]	@ (800652c <__errno+0x8>)
 8006526:	6818      	ldr	r0, [r3, #0]
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	2000001c 	.word	0x2000001c

08006530 <__libc_init_array>:
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	4d0d      	ldr	r5, [pc, #52]	@ (8006568 <__libc_init_array+0x38>)
 8006534:	4c0d      	ldr	r4, [pc, #52]	@ (800656c <__libc_init_array+0x3c>)
 8006536:	1b64      	subs	r4, r4, r5
 8006538:	10a4      	asrs	r4, r4, #2
 800653a:	2600      	movs	r6, #0
 800653c:	42a6      	cmp	r6, r4
 800653e:	d109      	bne.n	8006554 <__libc_init_array+0x24>
 8006540:	4d0b      	ldr	r5, [pc, #44]	@ (8006570 <__libc_init_array+0x40>)
 8006542:	4c0c      	ldr	r4, [pc, #48]	@ (8006574 <__libc_init_array+0x44>)
 8006544:	f000 ff98 	bl	8007478 <_init>
 8006548:	1b64      	subs	r4, r4, r5
 800654a:	10a4      	asrs	r4, r4, #2
 800654c:	2600      	movs	r6, #0
 800654e:	42a6      	cmp	r6, r4
 8006550:	d105      	bne.n	800655e <__libc_init_array+0x2e>
 8006552:	bd70      	pop	{r4, r5, r6, pc}
 8006554:	f855 3b04 	ldr.w	r3, [r5], #4
 8006558:	4798      	blx	r3
 800655a:	3601      	adds	r6, #1
 800655c:	e7ee      	b.n	800653c <__libc_init_array+0xc>
 800655e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006562:	4798      	blx	r3
 8006564:	3601      	adds	r6, #1
 8006566:	e7f2      	b.n	800654e <__libc_init_array+0x1e>
 8006568:	080079f8 	.word	0x080079f8
 800656c:	080079f8 	.word	0x080079f8
 8006570:	080079f8 	.word	0x080079f8
 8006574:	080079fc 	.word	0x080079fc

08006578 <__retarget_lock_init_recursive>:
 8006578:	4770      	bx	lr

0800657a <__retarget_lock_acquire_recursive>:
 800657a:	4770      	bx	lr

0800657c <__retarget_lock_release_recursive>:
 800657c:	4770      	bx	lr

0800657e <strcpy>:
 800657e:	4603      	mov	r3, r0
 8006580:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006584:	f803 2b01 	strb.w	r2, [r3], #1
 8006588:	2a00      	cmp	r2, #0
 800658a:	d1f9      	bne.n	8006580 <strcpy+0x2>
 800658c:	4770      	bx	lr

0800658e <memcpy>:
 800658e:	440a      	add	r2, r1
 8006590:	4291      	cmp	r1, r2
 8006592:	f100 33ff 	add.w	r3, r0, #4294967295
 8006596:	d100      	bne.n	800659a <memcpy+0xc>
 8006598:	4770      	bx	lr
 800659a:	b510      	push	{r4, lr}
 800659c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065a4:	4291      	cmp	r1, r2
 80065a6:	d1f9      	bne.n	800659c <memcpy+0xe>
 80065a8:	bd10      	pop	{r4, pc}
	...

080065ac <__assert_func>:
 80065ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065ae:	4614      	mov	r4, r2
 80065b0:	461a      	mov	r2, r3
 80065b2:	4b09      	ldr	r3, [pc, #36]	@ (80065d8 <__assert_func+0x2c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4605      	mov	r5, r0
 80065b8:	68d8      	ldr	r0, [r3, #12]
 80065ba:	b14c      	cbz	r4, 80065d0 <__assert_func+0x24>
 80065bc:	4b07      	ldr	r3, [pc, #28]	@ (80065dc <__assert_func+0x30>)
 80065be:	9100      	str	r1, [sp, #0]
 80065c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80065c4:	4906      	ldr	r1, [pc, #24]	@ (80065e0 <__assert_func+0x34>)
 80065c6:	462b      	mov	r3, r5
 80065c8:	f000 fde0 	bl	800718c <fiprintf>
 80065cc:	f000 fed2 	bl	8007374 <abort>
 80065d0:	4b04      	ldr	r3, [pc, #16]	@ (80065e4 <__assert_func+0x38>)
 80065d2:	461c      	mov	r4, r3
 80065d4:	e7f3      	b.n	80065be <__assert_func+0x12>
 80065d6:	bf00      	nop
 80065d8:	2000001c 	.word	0x2000001c
 80065dc:	0800797e 	.word	0x0800797e
 80065e0:	0800798b 	.word	0x0800798b
 80065e4:	080079b9 	.word	0x080079b9

080065e8 <_free_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4605      	mov	r5, r0
 80065ec:	2900      	cmp	r1, #0
 80065ee:	d041      	beq.n	8006674 <_free_r+0x8c>
 80065f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065f4:	1f0c      	subs	r4, r1, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	bfb8      	it	lt
 80065fa:	18e4      	addlt	r4, r4, r3
 80065fc:	f000 f8e8 	bl	80067d0 <__malloc_lock>
 8006600:	4a1d      	ldr	r2, [pc, #116]	@ (8006678 <_free_r+0x90>)
 8006602:	6813      	ldr	r3, [r2, #0]
 8006604:	b933      	cbnz	r3, 8006614 <_free_r+0x2c>
 8006606:	6063      	str	r3, [r4, #4]
 8006608:	6014      	str	r4, [r2, #0]
 800660a:	4628      	mov	r0, r5
 800660c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006610:	f000 b8e4 	b.w	80067dc <__malloc_unlock>
 8006614:	42a3      	cmp	r3, r4
 8006616:	d908      	bls.n	800662a <_free_r+0x42>
 8006618:	6820      	ldr	r0, [r4, #0]
 800661a:	1821      	adds	r1, r4, r0
 800661c:	428b      	cmp	r3, r1
 800661e:	bf01      	itttt	eq
 8006620:	6819      	ldreq	r1, [r3, #0]
 8006622:	685b      	ldreq	r3, [r3, #4]
 8006624:	1809      	addeq	r1, r1, r0
 8006626:	6021      	streq	r1, [r4, #0]
 8006628:	e7ed      	b.n	8006606 <_free_r+0x1e>
 800662a:	461a      	mov	r2, r3
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	b10b      	cbz	r3, 8006634 <_free_r+0x4c>
 8006630:	42a3      	cmp	r3, r4
 8006632:	d9fa      	bls.n	800662a <_free_r+0x42>
 8006634:	6811      	ldr	r1, [r2, #0]
 8006636:	1850      	adds	r0, r2, r1
 8006638:	42a0      	cmp	r0, r4
 800663a:	d10b      	bne.n	8006654 <_free_r+0x6c>
 800663c:	6820      	ldr	r0, [r4, #0]
 800663e:	4401      	add	r1, r0
 8006640:	1850      	adds	r0, r2, r1
 8006642:	4283      	cmp	r3, r0
 8006644:	6011      	str	r1, [r2, #0]
 8006646:	d1e0      	bne.n	800660a <_free_r+0x22>
 8006648:	6818      	ldr	r0, [r3, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	6053      	str	r3, [r2, #4]
 800664e:	4408      	add	r0, r1
 8006650:	6010      	str	r0, [r2, #0]
 8006652:	e7da      	b.n	800660a <_free_r+0x22>
 8006654:	d902      	bls.n	800665c <_free_r+0x74>
 8006656:	230c      	movs	r3, #12
 8006658:	602b      	str	r3, [r5, #0]
 800665a:	e7d6      	b.n	800660a <_free_r+0x22>
 800665c:	6820      	ldr	r0, [r4, #0]
 800665e:	1821      	adds	r1, r4, r0
 8006660:	428b      	cmp	r3, r1
 8006662:	bf04      	itt	eq
 8006664:	6819      	ldreq	r1, [r3, #0]
 8006666:	685b      	ldreq	r3, [r3, #4]
 8006668:	6063      	str	r3, [r4, #4]
 800666a:	bf04      	itt	eq
 800666c:	1809      	addeq	r1, r1, r0
 800666e:	6021      	streq	r1, [r4, #0]
 8006670:	6054      	str	r4, [r2, #4]
 8006672:	e7ca      	b.n	800660a <_free_r+0x22>
 8006674:	bd38      	pop	{r3, r4, r5, pc}
 8006676:	bf00      	nop
 8006678:	20000bf4 	.word	0x20000bf4

0800667c <malloc>:
 800667c:	4b02      	ldr	r3, [pc, #8]	@ (8006688 <malloc+0xc>)
 800667e:	4601      	mov	r1, r0
 8006680:	6818      	ldr	r0, [r3, #0]
 8006682:	f000 b825 	b.w	80066d0 <_malloc_r>
 8006686:	bf00      	nop
 8006688:	2000001c 	.word	0x2000001c

0800668c <sbrk_aligned>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	4e0f      	ldr	r6, [pc, #60]	@ (80066cc <sbrk_aligned+0x40>)
 8006690:	460c      	mov	r4, r1
 8006692:	6831      	ldr	r1, [r6, #0]
 8006694:	4605      	mov	r5, r0
 8006696:	b911      	cbnz	r1, 800669e <sbrk_aligned+0x12>
 8006698:	f000 fe5c 	bl	8007354 <_sbrk_r>
 800669c:	6030      	str	r0, [r6, #0]
 800669e:	4621      	mov	r1, r4
 80066a0:	4628      	mov	r0, r5
 80066a2:	f000 fe57 	bl	8007354 <_sbrk_r>
 80066a6:	1c43      	adds	r3, r0, #1
 80066a8:	d103      	bne.n	80066b2 <sbrk_aligned+0x26>
 80066aa:	f04f 34ff 	mov.w	r4, #4294967295
 80066ae:	4620      	mov	r0, r4
 80066b0:	bd70      	pop	{r4, r5, r6, pc}
 80066b2:	1cc4      	adds	r4, r0, #3
 80066b4:	f024 0403 	bic.w	r4, r4, #3
 80066b8:	42a0      	cmp	r0, r4
 80066ba:	d0f8      	beq.n	80066ae <sbrk_aligned+0x22>
 80066bc:	1a21      	subs	r1, r4, r0
 80066be:	4628      	mov	r0, r5
 80066c0:	f000 fe48 	bl	8007354 <_sbrk_r>
 80066c4:	3001      	adds	r0, #1
 80066c6:	d1f2      	bne.n	80066ae <sbrk_aligned+0x22>
 80066c8:	e7ef      	b.n	80066aa <sbrk_aligned+0x1e>
 80066ca:	bf00      	nop
 80066cc:	20000bf0 	.word	0x20000bf0

080066d0 <_malloc_r>:
 80066d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066d4:	1ccd      	adds	r5, r1, #3
 80066d6:	f025 0503 	bic.w	r5, r5, #3
 80066da:	3508      	adds	r5, #8
 80066dc:	2d0c      	cmp	r5, #12
 80066de:	bf38      	it	cc
 80066e0:	250c      	movcc	r5, #12
 80066e2:	2d00      	cmp	r5, #0
 80066e4:	4606      	mov	r6, r0
 80066e6:	db01      	blt.n	80066ec <_malloc_r+0x1c>
 80066e8:	42a9      	cmp	r1, r5
 80066ea:	d904      	bls.n	80066f6 <_malloc_r+0x26>
 80066ec:	230c      	movs	r3, #12
 80066ee:	6033      	str	r3, [r6, #0]
 80066f0:	2000      	movs	r0, #0
 80066f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067cc <_malloc_r+0xfc>
 80066fa:	f000 f869 	bl	80067d0 <__malloc_lock>
 80066fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006702:	461c      	mov	r4, r3
 8006704:	bb44      	cbnz	r4, 8006758 <_malloc_r+0x88>
 8006706:	4629      	mov	r1, r5
 8006708:	4630      	mov	r0, r6
 800670a:	f7ff ffbf 	bl	800668c <sbrk_aligned>
 800670e:	1c43      	adds	r3, r0, #1
 8006710:	4604      	mov	r4, r0
 8006712:	d158      	bne.n	80067c6 <_malloc_r+0xf6>
 8006714:	f8d8 4000 	ldr.w	r4, [r8]
 8006718:	4627      	mov	r7, r4
 800671a:	2f00      	cmp	r7, #0
 800671c:	d143      	bne.n	80067a6 <_malloc_r+0xd6>
 800671e:	2c00      	cmp	r4, #0
 8006720:	d04b      	beq.n	80067ba <_malloc_r+0xea>
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	4639      	mov	r1, r7
 8006726:	4630      	mov	r0, r6
 8006728:	eb04 0903 	add.w	r9, r4, r3
 800672c:	f000 fe12 	bl	8007354 <_sbrk_r>
 8006730:	4581      	cmp	r9, r0
 8006732:	d142      	bne.n	80067ba <_malloc_r+0xea>
 8006734:	6821      	ldr	r1, [r4, #0]
 8006736:	1a6d      	subs	r5, r5, r1
 8006738:	4629      	mov	r1, r5
 800673a:	4630      	mov	r0, r6
 800673c:	f7ff ffa6 	bl	800668c <sbrk_aligned>
 8006740:	3001      	adds	r0, #1
 8006742:	d03a      	beq.n	80067ba <_malloc_r+0xea>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	442b      	add	r3, r5
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	f8d8 3000 	ldr.w	r3, [r8]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	bb62      	cbnz	r2, 80067ac <_malloc_r+0xdc>
 8006752:	f8c8 7000 	str.w	r7, [r8]
 8006756:	e00f      	b.n	8006778 <_malloc_r+0xa8>
 8006758:	6822      	ldr	r2, [r4, #0]
 800675a:	1b52      	subs	r2, r2, r5
 800675c:	d420      	bmi.n	80067a0 <_malloc_r+0xd0>
 800675e:	2a0b      	cmp	r2, #11
 8006760:	d917      	bls.n	8006792 <_malloc_r+0xc2>
 8006762:	1961      	adds	r1, r4, r5
 8006764:	42a3      	cmp	r3, r4
 8006766:	6025      	str	r5, [r4, #0]
 8006768:	bf18      	it	ne
 800676a:	6059      	strne	r1, [r3, #4]
 800676c:	6863      	ldr	r3, [r4, #4]
 800676e:	bf08      	it	eq
 8006770:	f8c8 1000 	streq.w	r1, [r8]
 8006774:	5162      	str	r2, [r4, r5]
 8006776:	604b      	str	r3, [r1, #4]
 8006778:	4630      	mov	r0, r6
 800677a:	f000 f82f 	bl	80067dc <__malloc_unlock>
 800677e:	f104 000b 	add.w	r0, r4, #11
 8006782:	1d23      	adds	r3, r4, #4
 8006784:	f020 0007 	bic.w	r0, r0, #7
 8006788:	1ac2      	subs	r2, r0, r3
 800678a:	bf1c      	itt	ne
 800678c:	1a1b      	subne	r3, r3, r0
 800678e:	50a3      	strne	r3, [r4, r2]
 8006790:	e7af      	b.n	80066f2 <_malloc_r+0x22>
 8006792:	6862      	ldr	r2, [r4, #4]
 8006794:	42a3      	cmp	r3, r4
 8006796:	bf0c      	ite	eq
 8006798:	f8c8 2000 	streq.w	r2, [r8]
 800679c:	605a      	strne	r2, [r3, #4]
 800679e:	e7eb      	b.n	8006778 <_malloc_r+0xa8>
 80067a0:	4623      	mov	r3, r4
 80067a2:	6864      	ldr	r4, [r4, #4]
 80067a4:	e7ae      	b.n	8006704 <_malloc_r+0x34>
 80067a6:	463c      	mov	r4, r7
 80067a8:	687f      	ldr	r7, [r7, #4]
 80067aa:	e7b6      	b.n	800671a <_malloc_r+0x4a>
 80067ac:	461a      	mov	r2, r3
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	42a3      	cmp	r3, r4
 80067b2:	d1fb      	bne.n	80067ac <_malloc_r+0xdc>
 80067b4:	2300      	movs	r3, #0
 80067b6:	6053      	str	r3, [r2, #4]
 80067b8:	e7de      	b.n	8006778 <_malloc_r+0xa8>
 80067ba:	230c      	movs	r3, #12
 80067bc:	6033      	str	r3, [r6, #0]
 80067be:	4630      	mov	r0, r6
 80067c0:	f000 f80c 	bl	80067dc <__malloc_unlock>
 80067c4:	e794      	b.n	80066f0 <_malloc_r+0x20>
 80067c6:	6005      	str	r5, [r0, #0]
 80067c8:	e7d6      	b.n	8006778 <_malloc_r+0xa8>
 80067ca:	bf00      	nop
 80067cc:	20000bf4 	.word	0x20000bf4

080067d0 <__malloc_lock>:
 80067d0:	4801      	ldr	r0, [pc, #4]	@ (80067d8 <__malloc_lock+0x8>)
 80067d2:	f7ff bed2 	b.w	800657a <__retarget_lock_acquire_recursive>
 80067d6:	bf00      	nop
 80067d8:	20000bec 	.word	0x20000bec

080067dc <__malloc_unlock>:
 80067dc:	4801      	ldr	r0, [pc, #4]	@ (80067e4 <__malloc_unlock+0x8>)
 80067de:	f7ff becd 	b.w	800657c <__retarget_lock_release_recursive>
 80067e2:	bf00      	nop
 80067e4:	20000bec 	.word	0x20000bec

080067e8 <__ssputs_r>:
 80067e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067ec:	688e      	ldr	r6, [r1, #8]
 80067ee:	461f      	mov	r7, r3
 80067f0:	42be      	cmp	r6, r7
 80067f2:	680b      	ldr	r3, [r1, #0]
 80067f4:	4682      	mov	sl, r0
 80067f6:	460c      	mov	r4, r1
 80067f8:	4690      	mov	r8, r2
 80067fa:	d82d      	bhi.n	8006858 <__ssputs_r+0x70>
 80067fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006800:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006804:	d026      	beq.n	8006854 <__ssputs_r+0x6c>
 8006806:	6965      	ldr	r5, [r4, #20]
 8006808:	6909      	ldr	r1, [r1, #16]
 800680a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800680e:	eba3 0901 	sub.w	r9, r3, r1
 8006812:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006816:	1c7b      	adds	r3, r7, #1
 8006818:	444b      	add	r3, r9
 800681a:	106d      	asrs	r5, r5, #1
 800681c:	429d      	cmp	r5, r3
 800681e:	bf38      	it	cc
 8006820:	461d      	movcc	r5, r3
 8006822:	0553      	lsls	r3, r2, #21
 8006824:	d527      	bpl.n	8006876 <__ssputs_r+0x8e>
 8006826:	4629      	mov	r1, r5
 8006828:	f7ff ff52 	bl	80066d0 <_malloc_r>
 800682c:	4606      	mov	r6, r0
 800682e:	b360      	cbz	r0, 800688a <__ssputs_r+0xa2>
 8006830:	6921      	ldr	r1, [r4, #16]
 8006832:	464a      	mov	r2, r9
 8006834:	f7ff feab 	bl	800658e <memcpy>
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800683e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006842:	81a3      	strh	r3, [r4, #12]
 8006844:	6126      	str	r6, [r4, #16]
 8006846:	6165      	str	r5, [r4, #20]
 8006848:	444e      	add	r6, r9
 800684a:	eba5 0509 	sub.w	r5, r5, r9
 800684e:	6026      	str	r6, [r4, #0]
 8006850:	60a5      	str	r5, [r4, #8]
 8006852:	463e      	mov	r6, r7
 8006854:	42be      	cmp	r6, r7
 8006856:	d900      	bls.n	800685a <__ssputs_r+0x72>
 8006858:	463e      	mov	r6, r7
 800685a:	6820      	ldr	r0, [r4, #0]
 800685c:	4632      	mov	r2, r6
 800685e:	4641      	mov	r1, r8
 8006860:	f000 fd3c 	bl	80072dc <memmove>
 8006864:	68a3      	ldr	r3, [r4, #8]
 8006866:	1b9b      	subs	r3, r3, r6
 8006868:	60a3      	str	r3, [r4, #8]
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	4433      	add	r3, r6
 800686e:	6023      	str	r3, [r4, #0]
 8006870:	2000      	movs	r0, #0
 8006872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006876:	462a      	mov	r2, r5
 8006878:	f000 fd83 	bl	8007382 <_realloc_r>
 800687c:	4606      	mov	r6, r0
 800687e:	2800      	cmp	r0, #0
 8006880:	d1e0      	bne.n	8006844 <__ssputs_r+0x5c>
 8006882:	6921      	ldr	r1, [r4, #16]
 8006884:	4650      	mov	r0, sl
 8006886:	f7ff feaf 	bl	80065e8 <_free_r>
 800688a:	230c      	movs	r3, #12
 800688c:	f8ca 3000 	str.w	r3, [sl]
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006896:	81a3      	strh	r3, [r4, #12]
 8006898:	f04f 30ff 	mov.w	r0, #4294967295
 800689c:	e7e9      	b.n	8006872 <__ssputs_r+0x8a>
	...

080068a0 <_svfiprintf_r>:
 80068a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a4:	4698      	mov	r8, r3
 80068a6:	898b      	ldrh	r3, [r1, #12]
 80068a8:	061b      	lsls	r3, r3, #24
 80068aa:	b09d      	sub	sp, #116	@ 0x74
 80068ac:	4607      	mov	r7, r0
 80068ae:	460d      	mov	r5, r1
 80068b0:	4614      	mov	r4, r2
 80068b2:	d510      	bpl.n	80068d6 <_svfiprintf_r+0x36>
 80068b4:	690b      	ldr	r3, [r1, #16]
 80068b6:	b973      	cbnz	r3, 80068d6 <_svfiprintf_r+0x36>
 80068b8:	2140      	movs	r1, #64	@ 0x40
 80068ba:	f7ff ff09 	bl	80066d0 <_malloc_r>
 80068be:	6028      	str	r0, [r5, #0]
 80068c0:	6128      	str	r0, [r5, #16]
 80068c2:	b930      	cbnz	r0, 80068d2 <_svfiprintf_r+0x32>
 80068c4:	230c      	movs	r3, #12
 80068c6:	603b      	str	r3, [r7, #0]
 80068c8:	f04f 30ff 	mov.w	r0, #4294967295
 80068cc:	b01d      	add	sp, #116	@ 0x74
 80068ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d2:	2340      	movs	r3, #64	@ 0x40
 80068d4:	616b      	str	r3, [r5, #20]
 80068d6:	2300      	movs	r3, #0
 80068d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80068da:	2320      	movs	r3, #32
 80068dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80068e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80068e4:	2330      	movs	r3, #48	@ 0x30
 80068e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006a84 <_svfiprintf_r+0x1e4>
 80068ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80068ee:	f04f 0901 	mov.w	r9, #1
 80068f2:	4623      	mov	r3, r4
 80068f4:	469a      	mov	sl, r3
 80068f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068fa:	b10a      	cbz	r2, 8006900 <_svfiprintf_r+0x60>
 80068fc:	2a25      	cmp	r2, #37	@ 0x25
 80068fe:	d1f9      	bne.n	80068f4 <_svfiprintf_r+0x54>
 8006900:	ebba 0b04 	subs.w	fp, sl, r4
 8006904:	d00b      	beq.n	800691e <_svfiprintf_r+0x7e>
 8006906:	465b      	mov	r3, fp
 8006908:	4622      	mov	r2, r4
 800690a:	4629      	mov	r1, r5
 800690c:	4638      	mov	r0, r7
 800690e:	f7ff ff6b 	bl	80067e8 <__ssputs_r>
 8006912:	3001      	adds	r0, #1
 8006914:	f000 80a7 	beq.w	8006a66 <_svfiprintf_r+0x1c6>
 8006918:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800691a:	445a      	add	r2, fp
 800691c:	9209      	str	r2, [sp, #36]	@ 0x24
 800691e:	f89a 3000 	ldrb.w	r3, [sl]
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 809f 	beq.w	8006a66 <_svfiprintf_r+0x1c6>
 8006928:	2300      	movs	r3, #0
 800692a:	f04f 32ff 	mov.w	r2, #4294967295
 800692e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006932:	f10a 0a01 	add.w	sl, sl, #1
 8006936:	9304      	str	r3, [sp, #16]
 8006938:	9307      	str	r3, [sp, #28]
 800693a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800693e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006940:	4654      	mov	r4, sl
 8006942:	2205      	movs	r2, #5
 8006944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006948:	484e      	ldr	r0, [pc, #312]	@ (8006a84 <_svfiprintf_r+0x1e4>)
 800694a:	f7f9 fc61 	bl	8000210 <memchr>
 800694e:	9a04      	ldr	r2, [sp, #16]
 8006950:	b9d8      	cbnz	r0, 800698a <_svfiprintf_r+0xea>
 8006952:	06d0      	lsls	r0, r2, #27
 8006954:	bf44      	itt	mi
 8006956:	2320      	movmi	r3, #32
 8006958:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800695c:	0711      	lsls	r1, r2, #28
 800695e:	bf44      	itt	mi
 8006960:	232b      	movmi	r3, #43	@ 0x2b
 8006962:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006966:	f89a 3000 	ldrb.w	r3, [sl]
 800696a:	2b2a      	cmp	r3, #42	@ 0x2a
 800696c:	d015      	beq.n	800699a <_svfiprintf_r+0xfa>
 800696e:	9a07      	ldr	r2, [sp, #28]
 8006970:	4654      	mov	r4, sl
 8006972:	2000      	movs	r0, #0
 8006974:	f04f 0c0a 	mov.w	ip, #10
 8006978:	4621      	mov	r1, r4
 800697a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800697e:	3b30      	subs	r3, #48	@ 0x30
 8006980:	2b09      	cmp	r3, #9
 8006982:	d94b      	bls.n	8006a1c <_svfiprintf_r+0x17c>
 8006984:	b1b0      	cbz	r0, 80069b4 <_svfiprintf_r+0x114>
 8006986:	9207      	str	r2, [sp, #28]
 8006988:	e014      	b.n	80069b4 <_svfiprintf_r+0x114>
 800698a:	eba0 0308 	sub.w	r3, r0, r8
 800698e:	fa09 f303 	lsl.w	r3, r9, r3
 8006992:	4313      	orrs	r3, r2
 8006994:	9304      	str	r3, [sp, #16]
 8006996:	46a2      	mov	sl, r4
 8006998:	e7d2      	b.n	8006940 <_svfiprintf_r+0xa0>
 800699a:	9b03      	ldr	r3, [sp, #12]
 800699c:	1d19      	adds	r1, r3, #4
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	9103      	str	r1, [sp, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	bfbb      	ittet	lt
 80069a6:	425b      	neglt	r3, r3
 80069a8:	f042 0202 	orrlt.w	r2, r2, #2
 80069ac:	9307      	strge	r3, [sp, #28]
 80069ae:	9307      	strlt	r3, [sp, #28]
 80069b0:	bfb8      	it	lt
 80069b2:	9204      	strlt	r2, [sp, #16]
 80069b4:	7823      	ldrb	r3, [r4, #0]
 80069b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80069b8:	d10a      	bne.n	80069d0 <_svfiprintf_r+0x130>
 80069ba:	7863      	ldrb	r3, [r4, #1]
 80069bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80069be:	d132      	bne.n	8006a26 <_svfiprintf_r+0x186>
 80069c0:	9b03      	ldr	r3, [sp, #12]
 80069c2:	1d1a      	adds	r2, r3, #4
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	9203      	str	r2, [sp, #12]
 80069c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80069cc:	3402      	adds	r4, #2
 80069ce:	9305      	str	r3, [sp, #20]
 80069d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006a94 <_svfiprintf_r+0x1f4>
 80069d4:	7821      	ldrb	r1, [r4, #0]
 80069d6:	2203      	movs	r2, #3
 80069d8:	4650      	mov	r0, sl
 80069da:	f7f9 fc19 	bl	8000210 <memchr>
 80069de:	b138      	cbz	r0, 80069f0 <_svfiprintf_r+0x150>
 80069e0:	9b04      	ldr	r3, [sp, #16]
 80069e2:	eba0 000a 	sub.w	r0, r0, sl
 80069e6:	2240      	movs	r2, #64	@ 0x40
 80069e8:	4082      	lsls	r2, r0
 80069ea:	4313      	orrs	r3, r2
 80069ec:	3401      	adds	r4, #1
 80069ee:	9304      	str	r3, [sp, #16]
 80069f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069f4:	4824      	ldr	r0, [pc, #144]	@ (8006a88 <_svfiprintf_r+0x1e8>)
 80069f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80069fa:	2206      	movs	r2, #6
 80069fc:	f7f9 fc08 	bl	8000210 <memchr>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d036      	beq.n	8006a72 <_svfiprintf_r+0x1d2>
 8006a04:	4b21      	ldr	r3, [pc, #132]	@ (8006a8c <_svfiprintf_r+0x1ec>)
 8006a06:	bb1b      	cbnz	r3, 8006a50 <_svfiprintf_r+0x1b0>
 8006a08:	9b03      	ldr	r3, [sp, #12]
 8006a0a:	3307      	adds	r3, #7
 8006a0c:	f023 0307 	bic.w	r3, r3, #7
 8006a10:	3308      	adds	r3, #8
 8006a12:	9303      	str	r3, [sp, #12]
 8006a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a16:	4433      	add	r3, r6
 8006a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a1a:	e76a      	b.n	80068f2 <_svfiprintf_r+0x52>
 8006a1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a20:	460c      	mov	r4, r1
 8006a22:	2001      	movs	r0, #1
 8006a24:	e7a8      	b.n	8006978 <_svfiprintf_r+0xd8>
 8006a26:	2300      	movs	r3, #0
 8006a28:	3401      	adds	r4, #1
 8006a2a:	9305      	str	r3, [sp, #20]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	f04f 0c0a 	mov.w	ip, #10
 8006a32:	4620      	mov	r0, r4
 8006a34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a38:	3a30      	subs	r2, #48	@ 0x30
 8006a3a:	2a09      	cmp	r2, #9
 8006a3c:	d903      	bls.n	8006a46 <_svfiprintf_r+0x1a6>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0c6      	beq.n	80069d0 <_svfiprintf_r+0x130>
 8006a42:	9105      	str	r1, [sp, #20]
 8006a44:	e7c4      	b.n	80069d0 <_svfiprintf_r+0x130>
 8006a46:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e7f0      	b.n	8006a32 <_svfiprintf_r+0x192>
 8006a50:	ab03      	add	r3, sp, #12
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	462a      	mov	r2, r5
 8006a56:	4b0e      	ldr	r3, [pc, #56]	@ (8006a90 <_svfiprintf_r+0x1f0>)
 8006a58:	a904      	add	r1, sp, #16
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	f3af 8000 	nop.w
 8006a60:	1c42      	adds	r2, r0, #1
 8006a62:	4606      	mov	r6, r0
 8006a64:	d1d6      	bne.n	8006a14 <_svfiprintf_r+0x174>
 8006a66:	89ab      	ldrh	r3, [r5, #12]
 8006a68:	065b      	lsls	r3, r3, #25
 8006a6a:	f53f af2d 	bmi.w	80068c8 <_svfiprintf_r+0x28>
 8006a6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a70:	e72c      	b.n	80068cc <_svfiprintf_r+0x2c>
 8006a72:	ab03      	add	r3, sp, #12
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	462a      	mov	r2, r5
 8006a78:	4b05      	ldr	r3, [pc, #20]	@ (8006a90 <_svfiprintf_r+0x1f0>)
 8006a7a:	a904      	add	r1, sp, #16
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	f000 f9bb 	bl	8006df8 <_printf_i>
 8006a82:	e7ed      	b.n	8006a60 <_svfiprintf_r+0x1c0>
 8006a84:	080079ba 	.word	0x080079ba
 8006a88:	080079c4 	.word	0x080079c4
 8006a8c:	00000000 	.word	0x00000000
 8006a90:	080067e9 	.word	0x080067e9
 8006a94:	080079c0 	.word	0x080079c0

08006a98 <__sfputc_r>:
 8006a98:	6893      	ldr	r3, [r2, #8]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	b410      	push	{r4}
 8006aa0:	6093      	str	r3, [r2, #8]
 8006aa2:	da08      	bge.n	8006ab6 <__sfputc_r+0x1e>
 8006aa4:	6994      	ldr	r4, [r2, #24]
 8006aa6:	42a3      	cmp	r3, r4
 8006aa8:	db01      	blt.n	8006aae <__sfputc_r+0x16>
 8006aaa:	290a      	cmp	r1, #10
 8006aac:	d103      	bne.n	8006ab6 <__sfputc_r+0x1e>
 8006aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ab2:	f7ff bbc2 	b.w	800623a <__swbuf_r>
 8006ab6:	6813      	ldr	r3, [r2, #0]
 8006ab8:	1c58      	adds	r0, r3, #1
 8006aba:	6010      	str	r0, [r2, #0]
 8006abc:	7019      	strb	r1, [r3, #0]
 8006abe:	4608      	mov	r0, r1
 8006ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <__sfputs_r>:
 8006ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac8:	4606      	mov	r6, r0
 8006aca:	460f      	mov	r7, r1
 8006acc:	4614      	mov	r4, r2
 8006ace:	18d5      	adds	r5, r2, r3
 8006ad0:	42ac      	cmp	r4, r5
 8006ad2:	d101      	bne.n	8006ad8 <__sfputs_r+0x12>
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	e007      	b.n	8006ae8 <__sfputs_r+0x22>
 8006ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006adc:	463a      	mov	r2, r7
 8006ade:	4630      	mov	r0, r6
 8006ae0:	f7ff ffda 	bl	8006a98 <__sfputc_r>
 8006ae4:	1c43      	adds	r3, r0, #1
 8006ae6:	d1f3      	bne.n	8006ad0 <__sfputs_r+0xa>
 8006ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006aec <_vfiprintf_r>:
 8006aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af0:	460d      	mov	r5, r1
 8006af2:	b09d      	sub	sp, #116	@ 0x74
 8006af4:	4614      	mov	r4, r2
 8006af6:	4698      	mov	r8, r3
 8006af8:	4606      	mov	r6, r0
 8006afa:	b118      	cbz	r0, 8006b04 <_vfiprintf_r+0x18>
 8006afc:	6a03      	ldr	r3, [r0, #32]
 8006afe:	b90b      	cbnz	r3, 8006b04 <_vfiprintf_r+0x18>
 8006b00:	f7ff fa88 	bl	8006014 <__sinit>
 8006b04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b06:	07d9      	lsls	r1, r3, #31
 8006b08:	d405      	bmi.n	8006b16 <_vfiprintf_r+0x2a>
 8006b0a:	89ab      	ldrh	r3, [r5, #12]
 8006b0c:	059a      	lsls	r2, r3, #22
 8006b0e:	d402      	bmi.n	8006b16 <_vfiprintf_r+0x2a>
 8006b10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b12:	f7ff fd32 	bl	800657a <__retarget_lock_acquire_recursive>
 8006b16:	89ab      	ldrh	r3, [r5, #12]
 8006b18:	071b      	lsls	r3, r3, #28
 8006b1a:	d501      	bpl.n	8006b20 <_vfiprintf_r+0x34>
 8006b1c:	692b      	ldr	r3, [r5, #16]
 8006b1e:	b99b      	cbnz	r3, 8006b48 <_vfiprintf_r+0x5c>
 8006b20:	4629      	mov	r1, r5
 8006b22:	4630      	mov	r0, r6
 8006b24:	f7ff fbc8 	bl	80062b8 <__swsetup_r>
 8006b28:	b170      	cbz	r0, 8006b48 <_vfiprintf_r+0x5c>
 8006b2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b2c:	07dc      	lsls	r4, r3, #31
 8006b2e:	d504      	bpl.n	8006b3a <_vfiprintf_r+0x4e>
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295
 8006b34:	b01d      	add	sp, #116	@ 0x74
 8006b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3a:	89ab      	ldrh	r3, [r5, #12]
 8006b3c:	0598      	lsls	r0, r3, #22
 8006b3e:	d4f7      	bmi.n	8006b30 <_vfiprintf_r+0x44>
 8006b40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b42:	f7ff fd1b 	bl	800657c <__retarget_lock_release_recursive>
 8006b46:	e7f3      	b.n	8006b30 <_vfiprintf_r+0x44>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b4c:	2320      	movs	r3, #32
 8006b4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b52:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b56:	2330      	movs	r3, #48	@ 0x30
 8006b58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006d08 <_vfiprintf_r+0x21c>
 8006b5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b60:	f04f 0901 	mov.w	r9, #1
 8006b64:	4623      	mov	r3, r4
 8006b66:	469a      	mov	sl, r3
 8006b68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b6c:	b10a      	cbz	r2, 8006b72 <_vfiprintf_r+0x86>
 8006b6e:	2a25      	cmp	r2, #37	@ 0x25
 8006b70:	d1f9      	bne.n	8006b66 <_vfiprintf_r+0x7a>
 8006b72:	ebba 0b04 	subs.w	fp, sl, r4
 8006b76:	d00b      	beq.n	8006b90 <_vfiprintf_r+0xa4>
 8006b78:	465b      	mov	r3, fp
 8006b7a:	4622      	mov	r2, r4
 8006b7c:	4629      	mov	r1, r5
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f7ff ffa1 	bl	8006ac6 <__sfputs_r>
 8006b84:	3001      	adds	r0, #1
 8006b86:	f000 80a7 	beq.w	8006cd8 <_vfiprintf_r+0x1ec>
 8006b8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b8c:	445a      	add	r2, fp
 8006b8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b90:	f89a 3000 	ldrb.w	r3, [sl]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 809f 	beq.w	8006cd8 <_vfiprintf_r+0x1ec>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ba4:	f10a 0a01 	add.w	sl, sl, #1
 8006ba8:	9304      	str	r3, [sp, #16]
 8006baa:	9307      	str	r3, [sp, #28]
 8006bac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006bb0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bb2:	4654      	mov	r4, sl
 8006bb4:	2205      	movs	r2, #5
 8006bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bba:	4853      	ldr	r0, [pc, #332]	@ (8006d08 <_vfiprintf_r+0x21c>)
 8006bbc:	f7f9 fb28 	bl	8000210 <memchr>
 8006bc0:	9a04      	ldr	r2, [sp, #16]
 8006bc2:	b9d8      	cbnz	r0, 8006bfc <_vfiprintf_r+0x110>
 8006bc4:	06d1      	lsls	r1, r2, #27
 8006bc6:	bf44      	itt	mi
 8006bc8:	2320      	movmi	r3, #32
 8006bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bce:	0713      	lsls	r3, r2, #28
 8006bd0:	bf44      	itt	mi
 8006bd2:	232b      	movmi	r3, #43	@ 0x2b
 8006bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8006bdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bde:	d015      	beq.n	8006c0c <_vfiprintf_r+0x120>
 8006be0:	9a07      	ldr	r2, [sp, #28]
 8006be2:	4654      	mov	r4, sl
 8006be4:	2000      	movs	r0, #0
 8006be6:	f04f 0c0a 	mov.w	ip, #10
 8006bea:	4621      	mov	r1, r4
 8006bec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bf0:	3b30      	subs	r3, #48	@ 0x30
 8006bf2:	2b09      	cmp	r3, #9
 8006bf4:	d94b      	bls.n	8006c8e <_vfiprintf_r+0x1a2>
 8006bf6:	b1b0      	cbz	r0, 8006c26 <_vfiprintf_r+0x13a>
 8006bf8:	9207      	str	r2, [sp, #28]
 8006bfa:	e014      	b.n	8006c26 <_vfiprintf_r+0x13a>
 8006bfc:	eba0 0308 	sub.w	r3, r0, r8
 8006c00:	fa09 f303 	lsl.w	r3, r9, r3
 8006c04:	4313      	orrs	r3, r2
 8006c06:	9304      	str	r3, [sp, #16]
 8006c08:	46a2      	mov	sl, r4
 8006c0a:	e7d2      	b.n	8006bb2 <_vfiprintf_r+0xc6>
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	1d19      	adds	r1, r3, #4
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	9103      	str	r1, [sp, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	bfbb      	ittet	lt
 8006c18:	425b      	neglt	r3, r3
 8006c1a:	f042 0202 	orrlt.w	r2, r2, #2
 8006c1e:	9307      	strge	r3, [sp, #28]
 8006c20:	9307      	strlt	r3, [sp, #28]
 8006c22:	bfb8      	it	lt
 8006c24:	9204      	strlt	r2, [sp, #16]
 8006c26:	7823      	ldrb	r3, [r4, #0]
 8006c28:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c2a:	d10a      	bne.n	8006c42 <_vfiprintf_r+0x156>
 8006c2c:	7863      	ldrb	r3, [r4, #1]
 8006c2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c30:	d132      	bne.n	8006c98 <_vfiprintf_r+0x1ac>
 8006c32:	9b03      	ldr	r3, [sp, #12]
 8006c34:	1d1a      	adds	r2, r3, #4
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	9203      	str	r2, [sp, #12]
 8006c3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c3e:	3402      	adds	r4, #2
 8006c40:	9305      	str	r3, [sp, #20]
 8006c42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d18 <_vfiprintf_r+0x22c>
 8006c46:	7821      	ldrb	r1, [r4, #0]
 8006c48:	2203      	movs	r2, #3
 8006c4a:	4650      	mov	r0, sl
 8006c4c:	f7f9 fae0 	bl	8000210 <memchr>
 8006c50:	b138      	cbz	r0, 8006c62 <_vfiprintf_r+0x176>
 8006c52:	9b04      	ldr	r3, [sp, #16]
 8006c54:	eba0 000a 	sub.w	r0, r0, sl
 8006c58:	2240      	movs	r2, #64	@ 0x40
 8006c5a:	4082      	lsls	r2, r0
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	3401      	adds	r4, #1
 8006c60:	9304      	str	r3, [sp, #16]
 8006c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c66:	4829      	ldr	r0, [pc, #164]	@ (8006d0c <_vfiprintf_r+0x220>)
 8006c68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c6c:	2206      	movs	r2, #6
 8006c6e:	f7f9 facf 	bl	8000210 <memchr>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d03f      	beq.n	8006cf6 <_vfiprintf_r+0x20a>
 8006c76:	4b26      	ldr	r3, [pc, #152]	@ (8006d10 <_vfiprintf_r+0x224>)
 8006c78:	bb1b      	cbnz	r3, 8006cc2 <_vfiprintf_r+0x1d6>
 8006c7a:	9b03      	ldr	r3, [sp, #12]
 8006c7c:	3307      	adds	r3, #7
 8006c7e:	f023 0307 	bic.w	r3, r3, #7
 8006c82:	3308      	adds	r3, #8
 8006c84:	9303      	str	r3, [sp, #12]
 8006c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c88:	443b      	add	r3, r7
 8006c8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c8c:	e76a      	b.n	8006b64 <_vfiprintf_r+0x78>
 8006c8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c92:	460c      	mov	r4, r1
 8006c94:	2001      	movs	r0, #1
 8006c96:	e7a8      	b.n	8006bea <_vfiprintf_r+0xfe>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	3401      	adds	r4, #1
 8006c9c:	9305      	str	r3, [sp, #20]
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	f04f 0c0a 	mov.w	ip, #10
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006caa:	3a30      	subs	r2, #48	@ 0x30
 8006cac:	2a09      	cmp	r2, #9
 8006cae:	d903      	bls.n	8006cb8 <_vfiprintf_r+0x1cc>
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0c6      	beq.n	8006c42 <_vfiprintf_r+0x156>
 8006cb4:	9105      	str	r1, [sp, #20]
 8006cb6:	e7c4      	b.n	8006c42 <_vfiprintf_r+0x156>
 8006cb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e7f0      	b.n	8006ca4 <_vfiprintf_r+0x1b8>
 8006cc2:	ab03      	add	r3, sp, #12
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	462a      	mov	r2, r5
 8006cc8:	4b12      	ldr	r3, [pc, #72]	@ (8006d14 <_vfiprintf_r+0x228>)
 8006cca:	a904      	add	r1, sp, #16
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f3af 8000 	nop.w
 8006cd2:	4607      	mov	r7, r0
 8006cd4:	1c78      	adds	r0, r7, #1
 8006cd6:	d1d6      	bne.n	8006c86 <_vfiprintf_r+0x19a>
 8006cd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cda:	07d9      	lsls	r1, r3, #31
 8006cdc:	d405      	bmi.n	8006cea <_vfiprintf_r+0x1fe>
 8006cde:	89ab      	ldrh	r3, [r5, #12]
 8006ce0:	059a      	lsls	r2, r3, #22
 8006ce2:	d402      	bmi.n	8006cea <_vfiprintf_r+0x1fe>
 8006ce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ce6:	f7ff fc49 	bl	800657c <__retarget_lock_release_recursive>
 8006cea:	89ab      	ldrh	r3, [r5, #12]
 8006cec:	065b      	lsls	r3, r3, #25
 8006cee:	f53f af1f 	bmi.w	8006b30 <_vfiprintf_r+0x44>
 8006cf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cf4:	e71e      	b.n	8006b34 <_vfiprintf_r+0x48>
 8006cf6:	ab03      	add	r3, sp, #12
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	462a      	mov	r2, r5
 8006cfc:	4b05      	ldr	r3, [pc, #20]	@ (8006d14 <_vfiprintf_r+0x228>)
 8006cfe:	a904      	add	r1, sp, #16
 8006d00:	4630      	mov	r0, r6
 8006d02:	f000 f879 	bl	8006df8 <_printf_i>
 8006d06:	e7e4      	b.n	8006cd2 <_vfiprintf_r+0x1e6>
 8006d08:	080079ba 	.word	0x080079ba
 8006d0c:	080079c4 	.word	0x080079c4
 8006d10:	00000000 	.word	0x00000000
 8006d14:	08006ac7 	.word	0x08006ac7
 8006d18:	080079c0 	.word	0x080079c0

08006d1c <_printf_common>:
 8006d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d20:	4616      	mov	r6, r2
 8006d22:	4698      	mov	r8, r3
 8006d24:	688a      	ldr	r2, [r1, #8]
 8006d26:	690b      	ldr	r3, [r1, #16]
 8006d28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	bfb8      	it	lt
 8006d30:	4613      	movlt	r3, r2
 8006d32:	6033      	str	r3, [r6, #0]
 8006d34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d38:	4607      	mov	r7, r0
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	b10a      	cbz	r2, 8006d42 <_printf_common+0x26>
 8006d3e:	3301      	adds	r3, #1
 8006d40:	6033      	str	r3, [r6, #0]
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	0699      	lsls	r1, r3, #26
 8006d46:	bf42      	ittt	mi
 8006d48:	6833      	ldrmi	r3, [r6, #0]
 8006d4a:	3302      	addmi	r3, #2
 8006d4c:	6033      	strmi	r3, [r6, #0]
 8006d4e:	6825      	ldr	r5, [r4, #0]
 8006d50:	f015 0506 	ands.w	r5, r5, #6
 8006d54:	d106      	bne.n	8006d64 <_printf_common+0x48>
 8006d56:	f104 0a19 	add.w	sl, r4, #25
 8006d5a:	68e3      	ldr	r3, [r4, #12]
 8006d5c:	6832      	ldr	r2, [r6, #0]
 8006d5e:	1a9b      	subs	r3, r3, r2
 8006d60:	42ab      	cmp	r3, r5
 8006d62:	dc26      	bgt.n	8006db2 <_printf_common+0x96>
 8006d64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d68:	6822      	ldr	r2, [r4, #0]
 8006d6a:	3b00      	subs	r3, #0
 8006d6c:	bf18      	it	ne
 8006d6e:	2301      	movne	r3, #1
 8006d70:	0692      	lsls	r2, r2, #26
 8006d72:	d42b      	bmi.n	8006dcc <_printf_common+0xb0>
 8006d74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d78:	4641      	mov	r1, r8
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	47c8      	blx	r9
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d01e      	beq.n	8006dc0 <_printf_common+0xa4>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	6922      	ldr	r2, [r4, #16]
 8006d86:	f003 0306 	and.w	r3, r3, #6
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	bf02      	ittt	eq
 8006d8e:	68e5      	ldreq	r5, [r4, #12]
 8006d90:	6833      	ldreq	r3, [r6, #0]
 8006d92:	1aed      	subeq	r5, r5, r3
 8006d94:	68a3      	ldr	r3, [r4, #8]
 8006d96:	bf0c      	ite	eq
 8006d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d9c:	2500      	movne	r5, #0
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	bfc4      	itt	gt
 8006da2:	1a9b      	subgt	r3, r3, r2
 8006da4:	18ed      	addgt	r5, r5, r3
 8006da6:	2600      	movs	r6, #0
 8006da8:	341a      	adds	r4, #26
 8006daa:	42b5      	cmp	r5, r6
 8006dac:	d11a      	bne.n	8006de4 <_printf_common+0xc8>
 8006dae:	2000      	movs	r0, #0
 8006db0:	e008      	b.n	8006dc4 <_printf_common+0xa8>
 8006db2:	2301      	movs	r3, #1
 8006db4:	4652      	mov	r2, sl
 8006db6:	4641      	mov	r1, r8
 8006db8:	4638      	mov	r0, r7
 8006dba:	47c8      	blx	r9
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	d103      	bne.n	8006dc8 <_printf_common+0xac>
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc8:	3501      	adds	r5, #1
 8006dca:	e7c6      	b.n	8006d5a <_printf_common+0x3e>
 8006dcc:	18e1      	adds	r1, r4, r3
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	2030      	movs	r0, #48	@ 0x30
 8006dd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006dd6:	4422      	add	r2, r4
 8006dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ddc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006de0:	3302      	adds	r3, #2
 8006de2:	e7c7      	b.n	8006d74 <_printf_common+0x58>
 8006de4:	2301      	movs	r3, #1
 8006de6:	4622      	mov	r2, r4
 8006de8:	4641      	mov	r1, r8
 8006dea:	4638      	mov	r0, r7
 8006dec:	47c8      	blx	r9
 8006dee:	3001      	adds	r0, #1
 8006df0:	d0e6      	beq.n	8006dc0 <_printf_common+0xa4>
 8006df2:	3601      	adds	r6, #1
 8006df4:	e7d9      	b.n	8006daa <_printf_common+0x8e>
	...

08006df8 <_printf_i>:
 8006df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dfc:	7e0f      	ldrb	r7, [r1, #24]
 8006dfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e00:	2f78      	cmp	r7, #120	@ 0x78
 8006e02:	4691      	mov	r9, r2
 8006e04:	4680      	mov	r8, r0
 8006e06:	460c      	mov	r4, r1
 8006e08:	469a      	mov	sl, r3
 8006e0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e0e:	d807      	bhi.n	8006e20 <_printf_i+0x28>
 8006e10:	2f62      	cmp	r7, #98	@ 0x62
 8006e12:	d80a      	bhi.n	8006e2a <_printf_i+0x32>
 8006e14:	2f00      	cmp	r7, #0
 8006e16:	f000 80d1 	beq.w	8006fbc <_printf_i+0x1c4>
 8006e1a:	2f58      	cmp	r7, #88	@ 0x58
 8006e1c:	f000 80b8 	beq.w	8006f90 <_printf_i+0x198>
 8006e20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e28:	e03a      	b.n	8006ea0 <_printf_i+0xa8>
 8006e2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e2e:	2b15      	cmp	r3, #21
 8006e30:	d8f6      	bhi.n	8006e20 <_printf_i+0x28>
 8006e32:	a101      	add	r1, pc, #4	@ (adr r1, 8006e38 <_printf_i+0x40>)
 8006e34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e38:	08006e91 	.word	0x08006e91
 8006e3c:	08006ea5 	.word	0x08006ea5
 8006e40:	08006e21 	.word	0x08006e21
 8006e44:	08006e21 	.word	0x08006e21
 8006e48:	08006e21 	.word	0x08006e21
 8006e4c:	08006e21 	.word	0x08006e21
 8006e50:	08006ea5 	.word	0x08006ea5
 8006e54:	08006e21 	.word	0x08006e21
 8006e58:	08006e21 	.word	0x08006e21
 8006e5c:	08006e21 	.word	0x08006e21
 8006e60:	08006e21 	.word	0x08006e21
 8006e64:	08006fa3 	.word	0x08006fa3
 8006e68:	08006ecf 	.word	0x08006ecf
 8006e6c:	08006f5d 	.word	0x08006f5d
 8006e70:	08006e21 	.word	0x08006e21
 8006e74:	08006e21 	.word	0x08006e21
 8006e78:	08006fc5 	.word	0x08006fc5
 8006e7c:	08006e21 	.word	0x08006e21
 8006e80:	08006ecf 	.word	0x08006ecf
 8006e84:	08006e21 	.word	0x08006e21
 8006e88:	08006e21 	.word	0x08006e21
 8006e8c:	08006f65 	.word	0x08006f65
 8006e90:	6833      	ldr	r3, [r6, #0]
 8006e92:	1d1a      	adds	r2, r3, #4
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6032      	str	r2, [r6, #0]
 8006e98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e09c      	b.n	8006fde <_printf_i+0x1e6>
 8006ea4:	6833      	ldr	r3, [r6, #0]
 8006ea6:	6820      	ldr	r0, [r4, #0]
 8006ea8:	1d19      	adds	r1, r3, #4
 8006eaa:	6031      	str	r1, [r6, #0]
 8006eac:	0606      	lsls	r6, r0, #24
 8006eae:	d501      	bpl.n	8006eb4 <_printf_i+0xbc>
 8006eb0:	681d      	ldr	r5, [r3, #0]
 8006eb2:	e003      	b.n	8006ebc <_printf_i+0xc4>
 8006eb4:	0645      	lsls	r5, r0, #25
 8006eb6:	d5fb      	bpl.n	8006eb0 <_printf_i+0xb8>
 8006eb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ebc:	2d00      	cmp	r5, #0
 8006ebe:	da03      	bge.n	8006ec8 <_printf_i+0xd0>
 8006ec0:	232d      	movs	r3, #45	@ 0x2d
 8006ec2:	426d      	negs	r5, r5
 8006ec4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ec8:	4858      	ldr	r0, [pc, #352]	@ (800702c <_printf_i+0x234>)
 8006eca:	230a      	movs	r3, #10
 8006ecc:	e011      	b.n	8006ef2 <_printf_i+0xfa>
 8006ece:	6821      	ldr	r1, [r4, #0]
 8006ed0:	6833      	ldr	r3, [r6, #0]
 8006ed2:	0608      	lsls	r0, r1, #24
 8006ed4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ed8:	d402      	bmi.n	8006ee0 <_printf_i+0xe8>
 8006eda:	0649      	lsls	r1, r1, #25
 8006edc:	bf48      	it	mi
 8006ede:	b2ad      	uxthmi	r5, r5
 8006ee0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ee2:	4852      	ldr	r0, [pc, #328]	@ (800702c <_printf_i+0x234>)
 8006ee4:	6033      	str	r3, [r6, #0]
 8006ee6:	bf14      	ite	ne
 8006ee8:	230a      	movne	r3, #10
 8006eea:	2308      	moveq	r3, #8
 8006eec:	2100      	movs	r1, #0
 8006eee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ef2:	6866      	ldr	r6, [r4, #4]
 8006ef4:	60a6      	str	r6, [r4, #8]
 8006ef6:	2e00      	cmp	r6, #0
 8006ef8:	db05      	blt.n	8006f06 <_printf_i+0x10e>
 8006efa:	6821      	ldr	r1, [r4, #0]
 8006efc:	432e      	orrs	r6, r5
 8006efe:	f021 0104 	bic.w	r1, r1, #4
 8006f02:	6021      	str	r1, [r4, #0]
 8006f04:	d04b      	beq.n	8006f9e <_printf_i+0x1a6>
 8006f06:	4616      	mov	r6, r2
 8006f08:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f0c:	fb03 5711 	mls	r7, r3, r1, r5
 8006f10:	5dc7      	ldrb	r7, [r0, r7]
 8006f12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f16:	462f      	mov	r7, r5
 8006f18:	42bb      	cmp	r3, r7
 8006f1a:	460d      	mov	r5, r1
 8006f1c:	d9f4      	bls.n	8006f08 <_printf_i+0x110>
 8006f1e:	2b08      	cmp	r3, #8
 8006f20:	d10b      	bne.n	8006f3a <_printf_i+0x142>
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	07df      	lsls	r7, r3, #31
 8006f26:	d508      	bpl.n	8006f3a <_printf_i+0x142>
 8006f28:	6923      	ldr	r3, [r4, #16]
 8006f2a:	6861      	ldr	r1, [r4, #4]
 8006f2c:	4299      	cmp	r1, r3
 8006f2e:	bfde      	ittt	le
 8006f30:	2330      	movle	r3, #48	@ 0x30
 8006f32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f36:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f3a:	1b92      	subs	r2, r2, r6
 8006f3c:	6122      	str	r2, [r4, #16]
 8006f3e:	f8cd a000 	str.w	sl, [sp]
 8006f42:	464b      	mov	r3, r9
 8006f44:	aa03      	add	r2, sp, #12
 8006f46:	4621      	mov	r1, r4
 8006f48:	4640      	mov	r0, r8
 8006f4a:	f7ff fee7 	bl	8006d1c <_printf_common>
 8006f4e:	3001      	adds	r0, #1
 8006f50:	d14a      	bne.n	8006fe8 <_printf_i+0x1f0>
 8006f52:	f04f 30ff 	mov.w	r0, #4294967295
 8006f56:	b004      	add	sp, #16
 8006f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	f043 0320 	orr.w	r3, r3, #32
 8006f62:	6023      	str	r3, [r4, #0]
 8006f64:	4832      	ldr	r0, [pc, #200]	@ (8007030 <_printf_i+0x238>)
 8006f66:	2778      	movs	r7, #120	@ 0x78
 8006f68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	6831      	ldr	r1, [r6, #0]
 8006f70:	061f      	lsls	r7, r3, #24
 8006f72:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f76:	d402      	bmi.n	8006f7e <_printf_i+0x186>
 8006f78:	065f      	lsls	r7, r3, #25
 8006f7a:	bf48      	it	mi
 8006f7c:	b2ad      	uxthmi	r5, r5
 8006f7e:	6031      	str	r1, [r6, #0]
 8006f80:	07d9      	lsls	r1, r3, #31
 8006f82:	bf44      	itt	mi
 8006f84:	f043 0320 	orrmi.w	r3, r3, #32
 8006f88:	6023      	strmi	r3, [r4, #0]
 8006f8a:	b11d      	cbz	r5, 8006f94 <_printf_i+0x19c>
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	e7ad      	b.n	8006eec <_printf_i+0xf4>
 8006f90:	4826      	ldr	r0, [pc, #152]	@ (800702c <_printf_i+0x234>)
 8006f92:	e7e9      	b.n	8006f68 <_printf_i+0x170>
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	f023 0320 	bic.w	r3, r3, #32
 8006f9a:	6023      	str	r3, [r4, #0]
 8006f9c:	e7f6      	b.n	8006f8c <_printf_i+0x194>
 8006f9e:	4616      	mov	r6, r2
 8006fa0:	e7bd      	b.n	8006f1e <_printf_i+0x126>
 8006fa2:	6833      	ldr	r3, [r6, #0]
 8006fa4:	6825      	ldr	r5, [r4, #0]
 8006fa6:	6961      	ldr	r1, [r4, #20]
 8006fa8:	1d18      	adds	r0, r3, #4
 8006faa:	6030      	str	r0, [r6, #0]
 8006fac:	062e      	lsls	r6, r5, #24
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	d501      	bpl.n	8006fb6 <_printf_i+0x1be>
 8006fb2:	6019      	str	r1, [r3, #0]
 8006fb4:	e002      	b.n	8006fbc <_printf_i+0x1c4>
 8006fb6:	0668      	lsls	r0, r5, #25
 8006fb8:	d5fb      	bpl.n	8006fb2 <_printf_i+0x1ba>
 8006fba:	8019      	strh	r1, [r3, #0]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	6123      	str	r3, [r4, #16]
 8006fc0:	4616      	mov	r6, r2
 8006fc2:	e7bc      	b.n	8006f3e <_printf_i+0x146>
 8006fc4:	6833      	ldr	r3, [r6, #0]
 8006fc6:	1d1a      	adds	r2, r3, #4
 8006fc8:	6032      	str	r2, [r6, #0]
 8006fca:	681e      	ldr	r6, [r3, #0]
 8006fcc:	6862      	ldr	r2, [r4, #4]
 8006fce:	2100      	movs	r1, #0
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	f7f9 f91d 	bl	8000210 <memchr>
 8006fd6:	b108      	cbz	r0, 8006fdc <_printf_i+0x1e4>
 8006fd8:	1b80      	subs	r0, r0, r6
 8006fda:	6060      	str	r0, [r4, #4]
 8006fdc:	6863      	ldr	r3, [r4, #4]
 8006fde:	6123      	str	r3, [r4, #16]
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fe6:	e7aa      	b.n	8006f3e <_printf_i+0x146>
 8006fe8:	6923      	ldr	r3, [r4, #16]
 8006fea:	4632      	mov	r2, r6
 8006fec:	4649      	mov	r1, r9
 8006fee:	4640      	mov	r0, r8
 8006ff0:	47d0      	blx	sl
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	d0ad      	beq.n	8006f52 <_printf_i+0x15a>
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	079b      	lsls	r3, r3, #30
 8006ffa:	d413      	bmi.n	8007024 <_printf_i+0x22c>
 8006ffc:	68e0      	ldr	r0, [r4, #12]
 8006ffe:	9b03      	ldr	r3, [sp, #12]
 8007000:	4298      	cmp	r0, r3
 8007002:	bfb8      	it	lt
 8007004:	4618      	movlt	r0, r3
 8007006:	e7a6      	b.n	8006f56 <_printf_i+0x15e>
 8007008:	2301      	movs	r3, #1
 800700a:	4632      	mov	r2, r6
 800700c:	4649      	mov	r1, r9
 800700e:	4640      	mov	r0, r8
 8007010:	47d0      	blx	sl
 8007012:	3001      	adds	r0, #1
 8007014:	d09d      	beq.n	8006f52 <_printf_i+0x15a>
 8007016:	3501      	adds	r5, #1
 8007018:	68e3      	ldr	r3, [r4, #12]
 800701a:	9903      	ldr	r1, [sp, #12]
 800701c:	1a5b      	subs	r3, r3, r1
 800701e:	42ab      	cmp	r3, r5
 8007020:	dcf2      	bgt.n	8007008 <_printf_i+0x210>
 8007022:	e7eb      	b.n	8006ffc <_printf_i+0x204>
 8007024:	2500      	movs	r5, #0
 8007026:	f104 0619 	add.w	r6, r4, #25
 800702a:	e7f5      	b.n	8007018 <_printf_i+0x220>
 800702c:	080079cb 	.word	0x080079cb
 8007030:	080079dc 	.word	0x080079dc

08007034 <__sflush_r>:
 8007034:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800703c:	0716      	lsls	r6, r2, #28
 800703e:	4605      	mov	r5, r0
 8007040:	460c      	mov	r4, r1
 8007042:	d454      	bmi.n	80070ee <__sflush_r+0xba>
 8007044:	684b      	ldr	r3, [r1, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	dc02      	bgt.n	8007050 <__sflush_r+0x1c>
 800704a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800704c:	2b00      	cmp	r3, #0
 800704e:	dd48      	ble.n	80070e2 <__sflush_r+0xae>
 8007050:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007052:	2e00      	cmp	r6, #0
 8007054:	d045      	beq.n	80070e2 <__sflush_r+0xae>
 8007056:	2300      	movs	r3, #0
 8007058:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800705c:	682f      	ldr	r7, [r5, #0]
 800705e:	6a21      	ldr	r1, [r4, #32]
 8007060:	602b      	str	r3, [r5, #0]
 8007062:	d030      	beq.n	80070c6 <__sflush_r+0x92>
 8007064:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	0759      	lsls	r1, r3, #29
 800706a:	d505      	bpl.n	8007078 <__sflush_r+0x44>
 800706c:	6863      	ldr	r3, [r4, #4]
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007072:	b10b      	cbz	r3, 8007078 <__sflush_r+0x44>
 8007074:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007076:	1ad2      	subs	r2, r2, r3
 8007078:	2300      	movs	r3, #0
 800707a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800707c:	6a21      	ldr	r1, [r4, #32]
 800707e:	4628      	mov	r0, r5
 8007080:	47b0      	blx	r6
 8007082:	1c43      	adds	r3, r0, #1
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	d106      	bne.n	8007096 <__sflush_r+0x62>
 8007088:	6829      	ldr	r1, [r5, #0]
 800708a:	291d      	cmp	r1, #29
 800708c:	d82b      	bhi.n	80070e6 <__sflush_r+0xb2>
 800708e:	4a2a      	ldr	r2, [pc, #168]	@ (8007138 <__sflush_r+0x104>)
 8007090:	40ca      	lsrs	r2, r1
 8007092:	07d6      	lsls	r6, r2, #31
 8007094:	d527      	bpl.n	80070e6 <__sflush_r+0xb2>
 8007096:	2200      	movs	r2, #0
 8007098:	6062      	str	r2, [r4, #4]
 800709a:	04d9      	lsls	r1, r3, #19
 800709c:	6922      	ldr	r2, [r4, #16]
 800709e:	6022      	str	r2, [r4, #0]
 80070a0:	d504      	bpl.n	80070ac <__sflush_r+0x78>
 80070a2:	1c42      	adds	r2, r0, #1
 80070a4:	d101      	bne.n	80070aa <__sflush_r+0x76>
 80070a6:	682b      	ldr	r3, [r5, #0]
 80070a8:	b903      	cbnz	r3, 80070ac <__sflush_r+0x78>
 80070aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80070ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070ae:	602f      	str	r7, [r5, #0]
 80070b0:	b1b9      	cbz	r1, 80070e2 <__sflush_r+0xae>
 80070b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070b6:	4299      	cmp	r1, r3
 80070b8:	d002      	beq.n	80070c0 <__sflush_r+0x8c>
 80070ba:	4628      	mov	r0, r5
 80070bc:	f7ff fa94 	bl	80065e8 <_free_r>
 80070c0:	2300      	movs	r3, #0
 80070c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80070c4:	e00d      	b.n	80070e2 <__sflush_r+0xae>
 80070c6:	2301      	movs	r3, #1
 80070c8:	4628      	mov	r0, r5
 80070ca:	47b0      	blx	r6
 80070cc:	4602      	mov	r2, r0
 80070ce:	1c50      	adds	r0, r2, #1
 80070d0:	d1c9      	bne.n	8007066 <__sflush_r+0x32>
 80070d2:	682b      	ldr	r3, [r5, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d0c6      	beq.n	8007066 <__sflush_r+0x32>
 80070d8:	2b1d      	cmp	r3, #29
 80070da:	d001      	beq.n	80070e0 <__sflush_r+0xac>
 80070dc:	2b16      	cmp	r3, #22
 80070de:	d11e      	bne.n	800711e <__sflush_r+0xea>
 80070e0:	602f      	str	r7, [r5, #0]
 80070e2:	2000      	movs	r0, #0
 80070e4:	e022      	b.n	800712c <__sflush_r+0xf8>
 80070e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070ea:	b21b      	sxth	r3, r3
 80070ec:	e01b      	b.n	8007126 <__sflush_r+0xf2>
 80070ee:	690f      	ldr	r7, [r1, #16]
 80070f0:	2f00      	cmp	r7, #0
 80070f2:	d0f6      	beq.n	80070e2 <__sflush_r+0xae>
 80070f4:	0793      	lsls	r3, r2, #30
 80070f6:	680e      	ldr	r6, [r1, #0]
 80070f8:	bf08      	it	eq
 80070fa:	694b      	ldreq	r3, [r1, #20]
 80070fc:	600f      	str	r7, [r1, #0]
 80070fe:	bf18      	it	ne
 8007100:	2300      	movne	r3, #0
 8007102:	eba6 0807 	sub.w	r8, r6, r7
 8007106:	608b      	str	r3, [r1, #8]
 8007108:	f1b8 0f00 	cmp.w	r8, #0
 800710c:	dde9      	ble.n	80070e2 <__sflush_r+0xae>
 800710e:	6a21      	ldr	r1, [r4, #32]
 8007110:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007112:	4643      	mov	r3, r8
 8007114:	463a      	mov	r2, r7
 8007116:	4628      	mov	r0, r5
 8007118:	47b0      	blx	r6
 800711a:	2800      	cmp	r0, #0
 800711c:	dc08      	bgt.n	8007130 <__sflush_r+0xfc>
 800711e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007126:	81a3      	strh	r3, [r4, #12]
 8007128:	f04f 30ff 	mov.w	r0, #4294967295
 800712c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007130:	4407      	add	r7, r0
 8007132:	eba8 0800 	sub.w	r8, r8, r0
 8007136:	e7e7      	b.n	8007108 <__sflush_r+0xd4>
 8007138:	20400001 	.word	0x20400001

0800713c <_fflush_r>:
 800713c:	b538      	push	{r3, r4, r5, lr}
 800713e:	690b      	ldr	r3, [r1, #16]
 8007140:	4605      	mov	r5, r0
 8007142:	460c      	mov	r4, r1
 8007144:	b913      	cbnz	r3, 800714c <_fflush_r+0x10>
 8007146:	2500      	movs	r5, #0
 8007148:	4628      	mov	r0, r5
 800714a:	bd38      	pop	{r3, r4, r5, pc}
 800714c:	b118      	cbz	r0, 8007156 <_fflush_r+0x1a>
 800714e:	6a03      	ldr	r3, [r0, #32]
 8007150:	b90b      	cbnz	r3, 8007156 <_fflush_r+0x1a>
 8007152:	f7fe ff5f 	bl	8006014 <__sinit>
 8007156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0f3      	beq.n	8007146 <_fflush_r+0xa>
 800715e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007160:	07d0      	lsls	r0, r2, #31
 8007162:	d404      	bmi.n	800716e <_fflush_r+0x32>
 8007164:	0599      	lsls	r1, r3, #22
 8007166:	d402      	bmi.n	800716e <_fflush_r+0x32>
 8007168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800716a:	f7ff fa06 	bl	800657a <__retarget_lock_acquire_recursive>
 800716e:	4628      	mov	r0, r5
 8007170:	4621      	mov	r1, r4
 8007172:	f7ff ff5f 	bl	8007034 <__sflush_r>
 8007176:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007178:	07da      	lsls	r2, r3, #31
 800717a:	4605      	mov	r5, r0
 800717c:	d4e4      	bmi.n	8007148 <_fflush_r+0xc>
 800717e:	89a3      	ldrh	r3, [r4, #12]
 8007180:	059b      	lsls	r3, r3, #22
 8007182:	d4e1      	bmi.n	8007148 <_fflush_r+0xc>
 8007184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007186:	f7ff f9f9 	bl	800657c <__retarget_lock_release_recursive>
 800718a:	e7dd      	b.n	8007148 <_fflush_r+0xc>

0800718c <fiprintf>:
 800718c:	b40e      	push	{r1, r2, r3}
 800718e:	b503      	push	{r0, r1, lr}
 8007190:	4601      	mov	r1, r0
 8007192:	ab03      	add	r3, sp, #12
 8007194:	4805      	ldr	r0, [pc, #20]	@ (80071ac <fiprintf+0x20>)
 8007196:	f853 2b04 	ldr.w	r2, [r3], #4
 800719a:	6800      	ldr	r0, [r0, #0]
 800719c:	9301      	str	r3, [sp, #4]
 800719e:	f7ff fca5 	bl	8006aec <_vfiprintf_r>
 80071a2:	b002      	add	sp, #8
 80071a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071a8:	b003      	add	sp, #12
 80071aa:	4770      	bx	lr
 80071ac:	2000001c 	.word	0x2000001c

080071b0 <__swhatbuf_r>:
 80071b0:	b570      	push	{r4, r5, r6, lr}
 80071b2:	460c      	mov	r4, r1
 80071b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071b8:	2900      	cmp	r1, #0
 80071ba:	b096      	sub	sp, #88	@ 0x58
 80071bc:	4615      	mov	r5, r2
 80071be:	461e      	mov	r6, r3
 80071c0:	da0d      	bge.n	80071de <__swhatbuf_r+0x2e>
 80071c2:	89a3      	ldrh	r3, [r4, #12]
 80071c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80071c8:	f04f 0100 	mov.w	r1, #0
 80071cc:	bf14      	ite	ne
 80071ce:	2340      	movne	r3, #64	@ 0x40
 80071d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80071d4:	2000      	movs	r0, #0
 80071d6:	6031      	str	r1, [r6, #0]
 80071d8:	602b      	str	r3, [r5, #0]
 80071da:	b016      	add	sp, #88	@ 0x58
 80071dc:	bd70      	pop	{r4, r5, r6, pc}
 80071de:	466a      	mov	r2, sp
 80071e0:	f000 f896 	bl	8007310 <_fstat_r>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	dbec      	blt.n	80071c2 <__swhatbuf_r+0x12>
 80071e8:	9901      	ldr	r1, [sp, #4]
 80071ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80071ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80071f2:	4259      	negs	r1, r3
 80071f4:	4159      	adcs	r1, r3
 80071f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071fa:	e7eb      	b.n	80071d4 <__swhatbuf_r+0x24>

080071fc <__smakebuf_r>:
 80071fc:	898b      	ldrh	r3, [r1, #12]
 80071fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007200:	079d      	lsls	r5, r3, #30
 8007202:	4606      	mov	r6, r0
 8007204:	460c      	mov	r4, r1
 8007206:	d507      	bpl.n	8007218 <__smakebuf_r+0x1c>
 8007208:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800720c:	6023      	str	r3, [r4, #0]
 800720e:	6123      	str	r3, [r4, #16]
 8007210:	2301      	movs	r3, #1
 8007212:	6163      	str	r3, [r4, #20]
 8007214:	b003      	add	sp, #12
 8007216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007218:	ab01      	add	r3, sp, #4
 800721a:	466a      	mov	r2, sp
 800721c:	f7ff ffc8 	bl	80071b0 <__swhatbuf_r>
 8007220:	9f00      	ldr	r7, [sp, #0]
 8007222:	4605      	mov	r5, r0
 8007224:	4639      	mov	r1, r7
 8007226:	4630      	mov	r0, r6
 8007228:	f7ff fa52 	bl	80066d0 <_malloc_r>
 800722c:	b948      	cbnz	r0, 8007242 <__smakebuf_r+0x46>
 800722e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007232:	059a      	lsls	r2, r3, #22
 8007234:	d4ee      	bmi.n	8007214 <__smakebuf_r+0x18>
 8007236:	f023 0303 	bic.w	r3, r3, #3
 800723a:	f043 0302 	orr.w	r3, r3, #2
 800723e:	81a3      	strh	r3, [r4, #12]
 8007240:	e7e2      	b.n	8007208 <__smakebuf_r+0xc>
 8007242:	89a3      	ldrh	r3, [r4, #12]
 8007244:	6020      	str	r0, [r4, #0]
 8007246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800724a:	81a3      	strh	r3, [r4, #12]
 800724c:	9b01      	ldr	r3, [sp, #4]
 800724e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007252:	b15b      	cbz	r3, 800726c <__smakebuf_r+0x70>
 8007254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007258:	4630      	mov	r0, r6
 800725a:	f000 f86b 	bl	8007334 <_isatty_r>
 800725e:	b128      	cbz	r0, 800726c <__smakebuf_r+0x70>
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	f023 0303 	bic.w	r3, r3, #3
 8007266:	f043 0301 	orr.w	r3, r3, #1
 800726a:	81a3      	strh	r3, [r4, #12]
 800726c:	89a3      	ldrh	r3, [r4, #12]
 800726e:	431d      	orrs	r5, r3
 8007270:	81a5      	strh	r5, [r4, #12]
 8007272:	e7cf      	b.n	8007214 <__smakebuf_r+0x18>

08007274 <_putc_r>:
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	460d      	mov	r5, r1
 8007278:	4614      	mov	r4, r2
 800727a:	4606      	mov	r6, r0
 800727c:	b118      	cbz	r0, 8007286 <_putc_r+0x12>
 800727e:	6a03      	ldr	r3, [r0, #32]
 8007280:	b90b      	cbnz	r3, 8007286 <_putc_r+0x12>
 8007282:	f7fe fec7 	bl	8006014 <__sinit>
 8007286:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007288:	07d8      	lsls	r0, r3, #31
 800728a:	d405      	bmi.n	8007298 <_putc_r+0x24>
 800728c:	89a3      	ldrh	r3, [r4, #12]
 800728e:	0599      	lsls	r1, r3, #22
 8007290:	d402      	bmi.n	8007298 <_putc_r+0x24>
 8007292:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007294:	f7ff f971 	bl	800657a <__retarget_lock_acquire_recursive>
 8007298:	68a3      	ldr	r3, [r4, #8]
 800729a:	3b01      	subs	r3, #1
 800729c:	2b00      	cmp	r3, #0
 800729e:	60a3      	str	r3, [r4, #8]
 80072a0:	da05      	bge.n	80072ae <_putc_r+0x3a>
 80072a2:	69a2      	ldr	r2, [r4, #24]
 80072a4:	4293      	cmp	r3, r2
 80072a6:	db12      	blt.n	80072ce <_putc_r+0x5a>
 80072a8:	b2eb      	uxtb	r3, r5
 80072aa:	2b0a      	cmp	r3, #10
 80072ac:	d00f      	beq.n	80072ce <_putc_r+0x5a>
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	1c5a      	adds	r2, r3, #1
 80072b2:	6022      	str	r2, [r4, #0]
 80072b4:	701d      	strb	r5, [r3, #0]
 80072b6:	b2ed      	uxtb	r5, r5
 80072b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072ba:	07da      	lsls	r2, r3, #31
 80072bc:	d405      	bmi.n	80072ca <_putc_r+0x56>
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	059b      	lsls	r3, r3, #22
 80072c2:	d402      	bmi.n	80072ca <_putc_r+0x56>
 80072c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072c6:	f7ff f959 	bl	800657c <__retarget_lock_release_recursive>
 80072ca:	4628      	mov	r0, r5
 80072cc:	bd70      	pop	{r4, r5, r6, pc}
 80072ce:	4629      	mov	r1, r5
 80072d0:	4622      	mov	r2, r4
 80072d2:	4630      	mov	r0, r6
 80072d4:	f7fe ffb1 	bl	800623a <__swbuf_r>
 80072d8:	4605      	mov	r5, r0
 80072da:	e7ed      	b.n	80072b8 <_putc_r+0x44>

080072dc <memmove>:
 80072dc:	4288      	cmp	r0, r1
 80072de:	b510      	push	{r4, lr}
 80072e0:	eb01 0402 	add.w	r4, r1, r2
 80072e4:	d902      	bls.n	80072ec <memmove+0x10>
 80072e6:	4284      	cmp	r4, r0
 80072e8:	4623      	mov	r3, r4
 80072ea:	d807      	bhi.n	80072fc <memmove+0x20>
 80072ec:	1e43      	subs	r3, r0, #1
 80072ee:	42a1      	cmp	r1, r4
 80072f0:	d008      	beq.n	8007304 <memmove+0x28>
 80072f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072fa:	e7f8      	b.n	80072ee <memmove+0x12>
 80072fc:	4402      	add	r2, r0
 80072fe:	4601      	mov	r1, r0
 8007300:	428a      	cmp	r2, r1
 8007302:	d100      	bne.n	8007306 <memmove+0x2a>
 8007304:	bd10      	pop	{r4, pc}
 8007306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800730a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800730e:	e7f7      	b.n	8007300 <memmove+0x24>

08007310 <_fstat_r>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	4d07      	ldr	r5, [pc, #28]	@ (8007330 <_fstat_r+0x20>)
 8007314:	2300      	movs	r3, #0
 8007316:	4604      	mov	r4, r0
 8007318:	4608      	mov	r0, r1
 800731a:	4611      	mov	r1, r2
 800731c:	602b      	str	r3, [r5, #0]
 800731e:	f7fa ff6f 	bl	8002200 <_fstat>
 8007322:	1c43      	adds	r3, r0, #1
 8007324:	d102      	bne.n	800732c <_fstat_r+0x1c>
 8007326:	682b      	ldr	r3, [r5, #0]
 8007328:	b103      	cbz	r3, 800732c <_fstat_r+0x1c>
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	bd38      	pop	{r3, r4, r5, pc}
 800732e:	bf00      	nop
 8007330:	20000be8 	.word	0x20000be8

08007334 <_isatty_r>:
 8007334:	b538      	push	{r3, r4, r5, lr}
 8007336:	4d06      	ldr	r5, [pc, #24]	@ (8007350 <_isatty_r+0x1c>)
 8007338:	2300      	movs	r3, #0
 800733a:	4604      	mov	r4, r0
 800733c:	4608      	mov	r0, r1
 800733e:	602b      	str	r3, [r5, #0]
 8007340:	f7fa ff6e 	bl	8002220 <_isatty>
 8007344:	1c43      	adds	r3, r0, #1
 8007346:	d102      	bne.n	800734e <_isatty_r+0x1a>
 8007348:	682b      	ldr	r3, [r5, #0]
 800734a:	b103      	cbz	r3, 800734e <_isatty_r+0x1a>
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	bd38      	pop	{r3, r4, r5, pc}
 8007350:	20000be8 	.word	0x20000be8

08007354 <_sbrk_r>:
 8007354:	b538      	push	{r3, r4, r5, lr}
 8007356:	4d06      	ldr	r5, [pc, #24]	@ (8007370 <_sbrk_r+0x1c>)
 8007358:	2300      	movs	r3, #0
 800735a:	4604      	mov	r4, r0
 800735c:	4608      	mov	r0, r1
 800735e:	602b      	str	r3, [r5, #0]
 8007360:	f7fa ff76 	bl	8002250 <_sbrk>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d102      	bne.n	800736e <_sbrk_r+0x1a>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	b103      	cbz	r3, 800736e <_sbrk_r+0x1a>
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	20000be8 	.word	0x20000be8

08007374 <abort>:
 8007374:	b508      	push	{r3, lr}
 8007376:	2006      	movs	r0, #6
 8007378:	f000 f85a 	bl	8007430 <raise>
 800737c:	2001      	movs	r0, #1
 800737e:	f7fa feef 	bl	8002160 <_exit>

08007382 <_realloc_r>:
 8007382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007386:	4607      	mov	r7, r0
 8007388:	4614      	mov	r4, r2
 800738a:	460d      	mov	r5, r1
 800738c:	b921      	cbnz	r1, 8007398 <_realloc_r+0x16>
 800738e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007392:	4611      	mov	r1, r2
 8007394:	f7ff b99c 	b.w	80066d0 <_malloc_r>
 8007398:	b92a      	cbnz	r2, 80073a6 <_realloc_r+0x24>
 800739a:	f7ff f925 	bl	80065e8 <_free_r>
 800739e:	4625      	mov	r5, r4
 80073a0:	4628      	mov	r0, r5
 80073a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a6:	f000 f85f 	bl	8007468 <_malloc_usable_size_r>
 80073aa:	4284      	cmp	r4, r0
 80073ac:	4606      	mov	r6, r0
 80073ae:	d802      	bhi.n	80073b6 <_realloc_r+0x34>
 80073b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073b4:	d8f4      	bhi.n	80073a0 <_realloc_r+0x1e>
 80073b6:	4621      	mov	r1, r4
 80073b8:	4638      	mov	r0, r7
 80073ba:	f7ff f989 	bl	80066d0 <_malloc_r>
 80073be:	4680      	mov	r8, r0
 80073c0:	b908      	cbnz	r0, 80073c6 <_realloc_r+0x44>
 80073c2:	4645      	mov	r5, r8
 80073c4:	e7ec      	b.n	80073a0 <_realloc_r+0x1e>
 80073c6:	42b4      	cmp	r4, r6
 80073c8:	4622      	mov	r2, r4
 80073ca:	4629      	mov	r1, r5
 80073cc:	bf28      	it	cs
 80073ce:	4632      	movcs	r2, r6
 80073d0:	f7ff f8dd 	bl	800658e <memcpy>
 80073d4:	4629      	mov	r1, r5
 80073d6:	4638      	mov	r0, r7
 80073d8:	f7ff f906 	bl	80065e8 <_free_r>
 80073dc:	e7f1      	b.n	80073c2 <_realloc_r+0x40>

080073de <_raise_r>:
 80073de:	291f      	cmp	r1, #31
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	4605      	mov	r5, r0
 80073e4:	460c      	mov	r4, r1
 80073e6:	d904      	bls.n	80073f2 <_raise_r+0x14>
 80073e8:	2316      	movs	r3, #22
 80073ea:	6003      	str	r3, [r0, #0]
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295
 80073f0:	bd38      	pop	{r3, r4, r5, pc}
 80073f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80073f4:	b112      	cbz	r2, 80073fc <_raise_r+0x1e>
 80073f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073fa:	b94b      	cbnz	r3, 8007410 <_raise_r+0x32>
 80073fc:	4628      	mov	r0, r5
 80073fe:	f000 f831 	bl	8007464 <_getpid_r>
 8007402:	4622      	mov	r2, r4
 8007404:	4601      	mov	r1, r0
 8007406:	4628      	mov	r0, r5
 8007408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800740c:	f000 b818 	b.w	8007440 <_kill_r>
 8007410:	2b01      	cmp	r3, #1
 8007412:	d00a      	beq.n	800742a <_raise_r+0x4c>
 8007414:	1c59      	adds	r1, r3, #1
 8007416:	d103      	bne.n	8007420 <_raise_r+0x42>
 8007418:	2316      	movs	r3, #22
 800741a:	6003      	str	r3, [r0, #0]
 800741c:	2001      	movs	r0, #1
 800741e:	e7e7      	b.n	80073f0 <_raise_r+0x12>
 8007420:	2100      	movs	r1, #0
 8007422:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007426:	4620      	mov	r0, r4
 8007428:	4798      	blx	r3
 800742a:	2000      	movs	r0, #0
 800742c:	e7e0      	b.n	80073f0 <_raise_r+0x12>
	...

08007430 <raise>:
 8007430:	4b02      	ldr	r3, [pc, #8]	@ (800743c <raise+0xc>)
 8007432:	4601      	mov	r1, r0
 8007434:	6818      	ldr	r0, [r3, #0]
 8007436:	f7ff bfd2 	b.w	80073de <_raise_r>
 800743a:	bf00      	nop
 800743c:	2000001c 	.word	0x2000001c

08007440 <_kill_r>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	4d07      	ldr	r5, [pc, #28]	@ (8007460 <_kill_r+0x20>)
 8007444:	2300      	movs	r3, #0
 8007446:	4604      	mov	r4, r0
 8007448:	4608      	mov	r0, r1
 800744a:	4611      	mov	r1, r2
 800744c:	602b      	str	r3, [r5, #0]
 800744e:	f7fa fe77 	bl	8002140 <_kill>
 8007452:	1c43      	adds	r3, r0, #1
 8007454:	d102      	bne.n	800745c <_kill_r+0x1c>
 8007456:	682b      	ldr	r3, [r5, #0]
 8007458:	b103      	cbz	r3, 800745c <_kill_r+0x1c>
 800745a:	6023      	str	r3, [r4, #0]
 800745c:	bd38      	pop	{r3, r4, r5, pc}
 800745e:	bf00      	nop
 8007460:	20000be8 	.word	0x20000be8

08007464 <_getpid_r>:
 8007464:	f7fa be64 	b.w	8002130 <_getpid>

08007468 <_malloc_usable_size_r>:
 8007468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800746c:	1f18      	subs	r0, r3, #4
 800746e:	2b00      	cmp	r3, #0
 8007470:	bfbc      	itt	lt
 8007472:	580b      	ldrlt	r3, [r1, r0]
 8007474:	18c0      	addlt	r0, r0, r3
 8007476:	4770      	bx	lr

08007478 <_init>:
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	bf00      	nop
 800747c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747e:	bc08      	pop	{r3}
 8007480:	469e      	mov	lr, r3
 8007482:	4770      	bx	lr

08007484 <_fini>:
 8007484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007486:	bf00      	nop
 8007488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748a:	bc08      	pop	{r3}
 800748c:	469e      	mov	lr, r3
 800748e:	4770      	bx	lr
