
smart_store_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  08009248  08009248  0000a248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099b0  080099b0  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080099b0  080099b0  0000a9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099b8  080099b8  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099b8  080099b8  0000a9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099bc  080099bc  0000a9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080099c0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c24  200001d8  08009b98  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dfc  08009b98  0000bdfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010509  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002731  00000000  00000000  0001b711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  0001de48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c14  00000000  00000000  0001edc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019123  00000000  00000000  0001f9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001197d  00000000  00000000  00038aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cf93  00000000  00000000  0004a47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e740f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054f0  00000000  00000000  000e7454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000ec944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009230 	.word	0x08009230

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08009230 	.word	0x08009230

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b988 	b.w	8000f00 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	468e      	mov	lr, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	4688      	mov	r8, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d962      	bls.n	8000ce4 <__udivmoddi4+0xdc>
 8000c1e:	fab2 f682 	clz	r6, r2
 8000c22:	b14e      	cbz	r6, 8000c38 <__udivmoddi4+0x30>
 8000c24:	f1c6 0320 	rsb	r3, r6, #32
 8000c28:	fa01 f806 	lsl.w	r8, r1, r6
 8000c2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c30:	40b7      	lsls	r7, r6
 8000c32:	ea43 0808 	orr.w	r8, r3, r8
 8000c36:	40b4      	lsls	r4, r6
 8000c38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c44:	0c23      	lsrs	r3, r4, #16
 8000c46:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c5c:	f080 80ea 	bcs.w	8000e34 <__udivmoddi4+0x22c>
 8000c60:	429a      	cmp	r2, r3
 8000c62:	f240 80e7 	bls.w	8000e34 <__udivmoddi4+0x22c>
 8000c66:	3902      	subs	r1, #2
 8000c68:	443b      	add	r3, r7
 8000c6a:	1a9a      	subs	r2, r3, r2
 8000c6c:	b2a3      	uxth	r3, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c7a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c7e:	459c      	cmp	ip, r3
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0x8e>
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c88:	f080 80d6 	bcs.w	8000e38 <__udivmoddi4+0x230>
 8000c8c:	459c      	cmp	ip, r3
 8000c8e:	f240 80d3 	bls.w	8000e38 <__udivmoddi4+0x230>
 8000c92:	443b      	add	r3, r7
 8000c94:	3802      	subs	r0, #2
 8000c96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9a:	eba3 030c 	sub.w	r3, r3, ip
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11d      	cbz	r5, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40f3      	lsrs	r3, r6
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	e9c5 3200 	strd	r3, r2, [r5]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d905      	bls.n	8000cbe <__udivmoddi4+0xb6>
 8000cb2:	b10d      	cbz	r5, 8000cb8 <__udivmoddi4+0xb0>
 8000cb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e7f5      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cbe:	fab3 f183 	clz	r1, r3
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	d146      	bne.n	8000d54 <__udivmoddi4+0x14c>
 8000cc6:	4573      	cmp	r3, lr
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xc8>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 8105 	bhi.w	8000eda <__udivmoddi4+0x2d2>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	4690      	mov	r8, r2
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d0e5      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000cde:	e9c5 4800 	strd	r4, r8, [r5]
 8000ce2:	e7e2      	b.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f000 8090 	beq.w	8000e0a <__udivmoddi4+0x202>
 8000cea:	fab2 f682 	clz	r6, r2
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	f040 80a4 	bne.w	8000e3c <__udivmoddi4+0x234>
 8000cf4:	1a8a      	subs	r2, r1, r2
 8000cf6:	0c03      	lsrs	r3, r0, #16
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	b280      	uxth	r0, r0
 8000cfe:	b2bc      	uxth	r4, r7
 8000d00:	2101      	movs	r1, #1
 8000d02:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d06:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x11e>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x11c>
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	f200 80e0 	bhi.w	8000ee4 <__udivmoddi4+0x2dc>
 8000d24:	46c4      	mov	ip, r8
 8000d26:	1a9b      	subs	r3, r3, r2
 8000d28:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d2c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d30:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d34:	fb02 f404 	mul.w	r4, r2, r4
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x144>
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x142>
 8000d44:	429c      	cmp	r4, r3
 8000d46:	f200 80ca 	bhi.w	8000ede <__udivmoddi4+0x2d6>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	1b1b      	subs	r3, r3, r4
 8000d4e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d52:	e7a5      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	fa0e f401 	lsl.w	r4, lr, r1
 8000d64:	fa20 f306 	lsr.w	r3, r0, r6
 8000d68:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d6c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d70:	4323      	orrs	r3, r4
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	fa1f fc87 	uxth.w	ip, r7
 8000d7a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d7e:	0c1c      	lsrs	r4, r3, #16
 8000d80:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d84:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d88:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x1a0>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d9a:	f080 809c 	bcs.w	8000ed6 <__udivmoddi4+0x2ce>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f240 8099 	bls.w	8000ed6 <__udivmoddi4+0x2ce>
 8000da4:	3802      	subs	r0, #2
 8000da6:	443c      	add	r4, r7
 8000da8:	eba4 040e 	sub.w	r4, r4, lr
 8000dac:	fa1f fe83 	uxth.w	lr, r3
 8000db0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db4:	fb09 4413 	mls	r4, r9, r3, r4
 8000db8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dbc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc0:	45a4      	cmp	ip, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x1ce>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dca:	f080 8082 	bcs.w	8000ed2 <__udivmoddi4+0x2ca>
 8000dce:	45a4      	cmp	ip, r4
 8000dd0:	d97f      	bls.n	8000ed2 <__udivmoddi4+0x2ca>
 8000dd2:	3b02      	subs	r3, #2
 8000dd4:	443c      	add	r4, r7
 8000dd6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	fba0 ec02 	umull	lr, ip, r0, r2
 8000de2:	4564      	cmp	r4, ip
 8000de4:	4673      	mov	r3, lr
 8000de6:	46e1      	mov	r9, ip
 8000de8:	d362      	bcc.n	8000eb0 <__udivmoddi4+0x2a8>
 8000dea:	d05f      	beq.n	8000eac <__udivmoddi4+0x2a4>
 8000dec:	b15d      	cbz	r5, 8000e06 <__udivmoddi4+0x1fe>
 8000dee:	ebb8 0203 	subs.w	r2, r8, r3
 8000df2:	eb64 0409 	sbc.w	r4, r4, r9
 8000df6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfa:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfe:	431e      	orrs	r6, r3
 8000e00:	40cc      	lsrs	r4, r1
 8000e02:	e9c5 6400 	strd	r6, r4, [r5]
 8000e06:	2100      	movs	r1, #0
 8000e08:	e74f      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e0a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e0e:	0c01      	lsrs	r1, r0, #16
 8000e10:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e14:	b280      	uxth	r0, r0
 8000e16:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4638      	mov	r0, r7
 8000e1e:	463c      	mov	r4, r7
 8000e20:	46b8      	mov	r8, r7
 8000e22:	46be      	mov	lr, r7
 8000e24:	2620      	movs	r6, #32
 8000e26:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e2a:	eba2 0208 	sub.w	r2, r2, r8
 8000e2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e32:	e766      	b.n	8000d02 <__udivmoddi4+0xfa>
 8000e34:	4601      	mov	r1, r0
 8000e36:	e718      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e38:	4610      	mov	r0, r2
 8000e3a:	e72c      	b.n	8000c96 <__udivmoddi4+0x8e>
 8000e3c:	f1c6 0220 	rsb	r2, r6, #32
 8000e40:	fa2e f302 	lsr.w	r3, lr, r2
 8000e44:	40b7      	lsls	r7, r6
 8000e46:	40b1      	lsls	r1, r6
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e50:	430a      	orrs	r2, r1
 8000e52:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e56:	b2bc      	uxth	r4, r7
 8000e58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb08 f904 	mul.w	r9, r8, r4
 8000e66:	40b0      	lsls	r0, r6
 8000e68:	4589      	cmp	r9, r1
 8000e6a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e6e:	b280      	uxth	r0, r0
 8000e70:	d93e      	bls.n	8000ef0 <__udivmoddi4+0x2e8>
 8000e72:	1879      	adds	r1, r7, r1
 8000e74:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e78:	d201      	bcs.n	8000e7e <__udivmoddi4+0x276>
 8000e7a:	4589      	cmp	r9, r1
 8000e7c:	d81f      	bhi.n	8000ebe <__udivmoddi4+0x2b6>
 8000e7e:	eba1 0109 	sub.w	r1, r1, r9
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	4542      	cmp	r2, r8
 8000e96:	d229      	bcs.n	8000eec <__udivmoddi4+0x2e4>
 8000e98:	18ba      	adds	r2, r7, r2
 8000e9a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e9e:	d2c4      	bcs.n	8000e2a <__udivmoddi4+0x222>
 8000ea0:	4542      	cmp	r2, r8
 8000ea2:	d2c2      	bcs.n	8000e2a <__udivmoddi4+0x222>
 8000ea4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ea8:	443a      	add	r2, r7
 8000eaa:	e7be      	b.n	8000e2a <__udivmoddi4+0x222>
 8000eac:	45f0      	cmp	r8, lr
 8000eae:	d29d      	bcs.n	8000dec <__udivmoddi4+0x1e4>
 8000eb0:	ebbe 0302 	subs.w	r3, lr, r2
 8000eb4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000eb8:	3801      	subs	r0, #1
 8000eba:	46e1      	mov	r9, ip
 8000ebc:	e796      	b.n	8000dec <__udivmoddi4+0x1e4>
 8000ebe:	eba7 0909 	sub.w	r9, r7, r9
 8000ec2:	4449      	add	r1, r9
 8000ec4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ec8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ecc:	fb09 f804 	mul.w	r8, r9, r4
 8000ed0:	e7db      	b.n	8000e8a <__udivmoddi4+0x282>
 8000ed2:	4673      	mov	r3, lr
 8000ed4:	e77f      	b.n	8000dd6 <__udivmoddi4+0x1ce>
 8000ed6:	4650      	mov	r0, sl
 8000ed8:	e766      	b.n	8000da8 <__udivmoddi4+0x1a0>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e6fd      	b.n	8000cda <__udivmoddi4+0xd2>
 8000ede:	443b      	add	r3, r7
 8000ee0:	3a02      	subs	r2, #2
 8000ee2:	e733      	b.n	8000d4c <__udivmoddi4+0x144>
 8000ee4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee8:	443b      	add	r3, r7
 8000eea:	e71c      	b.n	8000d26 <__udivmoddi4+0x11e>
 8000eec:	4649      	mov	r1, r9
 8000eee:	e79c      	b.n	8000e2a <__udivmoddi4+0x222>
 8000ef0:	eba1 0109 	sub.w	r1, r1, r9
 8000ef4:	46c4      	mov	ip, r8
 8000ef6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efa:	fb09 f804 	mul.w	r8, r9, r4
 8000efe:	e7c4      	b.n	8000e8a <__udivmoddi4+0x282>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <DWT_Delay_Init>:
 *      Author: IoT Main
 */

#include "DHT.h"
uint32_t DWT_Delay_Init(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f08:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <DWT_Delay_Init+0x58>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	4a13      	ldr	r2, [pc, #76]	@ (8000f5c <DWT_Delay_Init+0x58>)
 8000f0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000f12:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f14:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <DWT_Delay_Init+0x58>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	4a10      	ldr	r2, [pc, #64]	@ (8000f5c <DWT_Delay_Init+0x58>)
 8000f1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f1e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <DWT_Delay_Init+0x5c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0e      	ldr	r2, [pc, #56]	@ (8000f60 <DWT_Delay_Init+0x5c>)
 8000f26:	f023 0301 	bic.w	r3, r3, #1
 8000f2a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <DWT_Delay_Init+0x5c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0b      	ldr	r2, [pc, #44]	@ (8000f60 <DWT_Delay_Init+0x5c>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000f38:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <DWT_Delay_Init+0x5c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000f3e:	bf00      	nop
  __ASM volatile ("NOP");
 8000f40:	bf00      	nop
  __ASM volatile ("NOP");
 8000f42:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <DWT_Delay_Init+0x5c>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e000      	b.n	8000f52 <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 8000f50:	2301      	movs	r3, #1
  }

}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000edf0 	.word	0xe000edf0
 8000f60:	e0001000 	.word	0xe0001000

08000f64 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <DWT_Delay_us+0x40>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f72:	f003 f903 	bl	800417c <HAL_RCC_GetHCLKFreq>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa8 <DWT_Delay_us+0x44>)
 8000f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7e:	0c9b      	lsrs	r3, r3, #18
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	fb02 f303 	mul.w	r3, r2, r3
 8000f86:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000f88:	bf00      	nop
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <DWT_Delay_us+0x40>)
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	1ad2      	subs	r2, r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3f8      	bcc.n	8000f8a <DWT_Delay_us+0x26>
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	e0001000 	.word	0xe0001000
 8000fa8:	431bde83 	.word	0x431bde83

08000fac <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f002 fa90 	bl	8003500 <HAL_GPIO_Init>
}
 8000fe0:	bf00      	nop
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	4619      	mov	r1, r3
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f002 fa74 	bl	8003500 <HAL_GPIO_Init>
}
 8001018:	bf00      	nop
 800101a:	3720      	adds	r7, #32
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <DHT11_Init>:

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001024:	f7ff ff6e 	bl	8000f04 <DWT_Delay_Init>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001028:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800102c:	4807      	ldr	r0, [pc, #28]	@ (800104c <DHT11_Init+0x2c>)
 800102e:	f7ff ffbd 	bl	8000fac <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001038:	4804      	ldr	r0, [pc, #16]	@ (800104c <DHT11_Init+0x2c>)
 800103a:	f002 fbfd 	bl	8003838 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800103e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001042:	f001 fe23 	bl	8002c8c <HAL_Delay>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40020800 	.word	0x40020800

08001050 <DHT11_Start>:

void DHT11_Start (void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001054:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001058:	4811      	ldr	r0, [pc, #68]	@ (80010a0 <DHT11_Start+0x50>)
 800105a:	f7ff ffa7 	bl	8000fac <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001064:	480e      	ldr	r0, [pc, #56]	@ (80010a0 <DHT11_Start+0x50>)
 8001066:	f002 fbe7 	bl	8003838 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001070:	480b      	ldr	r0, [pc, #44]	@ (80010a0 <DHT11_Start+0x50>)
 8001072:	f002 fbe1 	bl	8003838 <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);
 8001076:	f244 6050 	movw	r0, #18000	@ 0x4650
 800107a:	f7ff ff73 	bl	8000f64 <DWT_Delay_us>
	//delay_us (18000);   // wait for 18ms
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800107e:	2201      	movs	r2, #1
 8001080:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001084:	4806      	ldr	r0, [pc, #24]	@ (80010a0 <DHT11_Start+0x50>)
 8001086:	f002 fbd7 	bl	8003838 <HAL_GPIO_WritePin>
	DWT_Delay_us(20);
 800108a:	2014      	movs	r0, #20
 800108c:	f7ff ff6a 	bl	8000f64 <DWT_Delay_us>
	//delay_us (20);   // wait for 20us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8001090:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <DHT11_Start+0x50>)
 8001096:	f7ff ffa7 	bl	8000fe8 <Set_Pin_Input>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40020800 	.word	0x40020800

080010a4 <DHT11_Stop>:

void DHT11_Stop (void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80010a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010ac:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <DHT11_Stop+0x20>)
 80010ae:	f7ff ff7d 	bl	8000fac <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010b8:	4802      	ldr	r0, [pc, #8]	@ (80010c4 <DHT11_Stop+0x20>)
 80010ba:	f002 fbbd 	bl	8003838 <HAL_GPIO_WritePin>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020800 	.word	0x40020800

080010c8 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	71fb      	strb	r3, [r7, #7]

	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80010d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010d6:	4812      	ldr	r0, [pc, #72]	@ (8001120 <DHT11_Check_Response+0x58>)
 80010d8:	f002 fb96 	bl	8003808 <HAL_GPIO_ReadPin>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10f      	bne.n	8001102 <DHT11_Check_Response+0x3a>
	{
		DWT_Delay_us(80);
 80010e2:	2050      	movs	r0, #80	@ 0x50
 80010e4:	f7ff ff3e 	bl	8000f64 <DWT_Delay_us>
		//delay_us (80);
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80010e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010ec:	480c      	ldr	r0, [pc, #48]	@ (8001120 <DHT11_Check_Response+0x58>)
 80010ee:	f002 fb8b 	bl	8003808 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <DHT11_Check_Response+0x36>
 80010f8:	2301      	movs	r3, #1
 80010fa:	71fb      	strb	r3, [r7, #7]
 80010fc:	e001      	b.n	8001102 <DHT11_Check_Response+0x3a>
		else Response = -1; // 255
 80010fe:	23ff      	movs	r3, #255	@ 0xff
 8001100:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8001102:	bf00      	nop
 8001104:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001108:	4805      	ldr	r0, [pc, #20]	@ (8001120 <DHT11_Check_Response+0x58>)
 800110a:	f002 fb7d 	bl	8003808 <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f7      	bne.n	8001104 <DHT11_Check_Response+0x3c>

	return Response;
 8001114:	79fb      	ldrb	r3, [r7, #7]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40020800 	.word	0x40020800

08001124 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800112a:	2300      	movs	r3, #0
 800112c:	71bb      	strb	r3, [r7, #6]
 800112e:	e03a      	b.n	80011a6 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8001130:	bf00      	nop
 8001132:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001136:	4820      	ldr	r0, [pc, #128]	@ (80011b8 <DHT11_Read+0x94>)
 8001138:	f002 fb66 	bl	8003808 <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0f7      	beq.n	8001132 <DHT11_Read+0xe>
		DWT_Delay_us(40);
 8001142:	2028      	movs	r0, #40	@ 0x28
 8001144:	f7ff ff0e 	bl	8000f64 <DWT_Delay_us>
		//delay_us (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001148:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800114c:	481a      	ldr	r0, [pc, #104]	@ (80011b8 <DHT11_Read+0x94>)
 800114e:	f002 fb5b 	bl	8003808 <HAL_GPIO_ReadPin>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10e      	bne.n	8001176 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8001158:	79bb      	ldrb	r3, [r7, #6]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2201      	movs	r2, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	b25b      	sxtb	r3, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	b25a      	sxtb	r2, r3
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	4013      	ands	r3, r2
 8001170:	b25b      	sxtb	r3, r3
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	e00b      	b.n	800118e <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	f1c3 0307 	rsb	r3, r3, #7
 800117c:	2201      	movs	r2, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	b25a      	sxtb	r2, r3
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	4313      	orrs	r3, r2
 800118a:	b25b      	sxtb	r3, r3
 800118c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 800118e:	bf00      	nop
 8001190:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001194:	4808      	ldr	r0, [pc, #32]	@ (80011b8 <DHT11_Read+0x94>)
 8001196:	f002 fb37 	bl	8003808 <HAL_GPIO_ReadPin>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1f7      	bne.n	8001190 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 80011a0:	79bb      	ldrb	r3, [r7, #6]
 80011a2:	3301      	adds	r3, #1
 80011a4:	71bb      	strb	r3, [r7, #6]
 80011a6:	79bb      	ldrb	r3, [r7, #6]
 80011a8:	2b07      	cmp	r3, #7
 80011aa:	d9c1      	bls.n	8001130 <DHT11_Read+0xc>
	}
	return i;
 80011ac:	79fb      	ldrb	r3, [r7, #7]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40020800 	.word	0x40020800

080011bc <DHT11_readData>:

DHT11_TypeDef DHT11_readData()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	DHT11_TypeDef dht11;
	DHT11_Start();
 80011c4:	f7ff ff44 	bl	8001050 <DHT11_Start>
	if ((dht11.status = DHT11_Check_Response()) < 0) return dht11;
 80011c8:	f7ff ff7e 	bl	80010c8 <DHT11_Check_Response>
 80011cc:	4603      	mov	r3, r0
 80011ce:	737b      	strb	r3, [r7, #13]
	dht11.rh_byte1 = DHT11_Read ();
 80011d0:	f7ff ffa8 	bl	8001124 <DHT11_Read>
 80011d4:	4603      	mov	r3, r0
 80011d6:	723b      	strb	r3, [r7, #8]
	dht11.rh_byte2 = DHT11_Read ();
 80011d8:	f7ff ffa4 	bl	8001124 <DHT11_Read>
 80011dc:	4603      	mov	r3, r0
 80011de:	727b      	strb	r3, [r7, #9]
	dht11.temp_byte1 = DHT11_Read ();
 80011e0:	f7ff ffa0 	bl	8001124 <DHT11_Read>
 80011e4:	4603      	mov	r3, r0
 80011e6:	72bb      	strb	r3, [r7, #10]
	dht11.temp_byte2 = DHT11_Read ();
 80011e8:	f7ff ff9c 	bl	8001124 <DHT11_Read>
 80011ec:	4603      	mov	r3, r0
 80011ee:	72fb      	strb	r3, [r7, #11]
	dht11.checksum = DHT11_Read();
 80011f0:	f7ff ff98 	bl	8001124 <DHT11_Read>
 80011f4:	4603      	mov	r3, r0
 80011f6:	733b      	strb	r3, [r7, #12]
	DHT11_Stop();
 80011f8:	f7ff ff54 	bl	80010a4 <DHT11_Stop>
	return dht11;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	461a      	mov	r2, r3
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	6010      	str	r0, [r2, #0]
 8001208:	889b      	ldrh	r3, [r3, #4]
 800120a:	8093      	strh	r3, [r2, #4]
}
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	807b      	strh	r3, [r7, #2]
    *length = 0;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8001228:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800122c:	2100      	movs	r1, #0
 800122e:	68b8      	ldr	r0, [r7, #8]
 8001230:	f005 fef6 	bl	8007020 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 8001234:	f240 4202 	movw	r2, #1026	@ 0x402
 8001238:	2100      	movs	r1, #0
 800123a:	4826      	ldr	r0, [pc, #152]	@ (80012d4 <esp_at_command+0xc0>)
 800123c:	f005 fef0 	bl	8007020 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f7ff f82d 	bl	80002a0 <strlen>
 8001246:	4603      	mov	r3, r0
 8001248:	b29a      	uxth	r2, r3
 800124a:	2364      	movs	r3, #100	@ 0x64
 800124c:	68f9      	ldr	r1, [r7, #12]
 800124e:	4822      	ldr	r0, [pc, #136]	@ (80012d8 <esp_at_command+0xc4>)
 8001250:	f003 ffb8 	bl	80051c4 <HAL_UART_Transmit>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d032      	beq.n	80012c0 <esp_at_command+0xac>
        return -1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e035      	b.n	80012cc <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 8001260:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <esp_at_command+0xc0>)
 8001262:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800126a:	d302      	bcc.n	8001272 <esp_at_command+0x5e>
            return -2;
 800126c:	f06f 0301 	mvn.w	r3, #1
 8001270:	e02c      	b.n	80012cc <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 8001272:	491a      	ldr	r1, [pc, #104]	@ (80012dc <esp_at_command+0xc8>)
 8001274:	4817      	ldr	r0, [pc, #92]	@ (80012d4 <esp_at_command+0xc0>)
 8001276:	f005 ff57 	bl	8007128 <strstr>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <esp_at_command+0x72>
            return -3;
 8001280:	f06f 0302 	mvn.w	r3, #2
 8001284:	e022      	b.n	80012cc <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 8001286:	4916      	ldr	r1, [pc, #88]	@ (80012e0 <esp_at_command+0xcc>)
 8001288:	4812      	ldr	r0, [pc, #72]	@ (80012d4 <esp_at_command+0xc0>)
 800128a:	f005 ff4d 	bl	8007128 <strstr>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00e      	beq.n	80012b2 <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 8001294:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <esp_at_command+0xc0>)
 8001296:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800129a:	461a      	mov	r2, r3
 800129c:	490d      	ldr	r1, [pc, #52]	@ (80012d4 <esp_at_command+0xc0>)
 800129e:	68b8      	ldr	r0, [r7, #8]
 80012a0:	f005 ffd7 	bl	8007252 <memcpy>
            *length = cb_data.length;
 80012a4:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <esp_at_command+0xc0>)
 80012a6:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	801a      	strh	r2, [r3, #0]
            return 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e00c      	b.n	80012cc <esp_at_command+0xb8>
        }
        time_out -= 10;
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	3b0a      	subs	r3, #10
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 80012ba:	200a      	movs	r0, #10
 80012bc:	f001 fce6 	bl	8002c8c <HAL_Delay>
    while(time_out > 0)
 80012c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	dccb      	bgt.n	8001260 <esp_at_command+0x4c>
    }
    return -4;
 80012c8:	f06f 0303 	mvn.w	r3, #3
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000063c 	.word	0x2000063c
 80012d8:	20000bf4 	.word	0x20000bf4
 80012dc:	08009248 	.word	0x08009248
 80012e0:	08009250 	.word	0x08009250

080012e4 <esp_reset>:

static int esp_reset(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 80012ee:	1dba      	adds	r2, r7, #6
 80012f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f4:	4909      	ldr	r1, [pc, #36]	@ (800131c <esp_reset+0x38>)
 80012f6:	480a      	ldr	r0, [pc, #40]	@ (8001320 <esp_reset+0x3c>)
 80012f8:	f7ff ff8c 	bl	8001214 <esp_at_command>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <esp_reset+0x24>
    {
    	return -1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e004      	b.n	8001312 <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 8001308:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800130c:	f001 fcbe 	bl	8002c8c <HAL_Delay>
    return 0;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000204 	.word	0x20000204
 8001320:	08009254 	.word	0x08009254

08001324 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 8001332:	f107 020a 	add.w	r2, r7, #10
 8001336:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800133a:	492d      	ldr	r1, [pc, #180]	@ (80013f0 <request_ip_addr+0xcc>)
 800133c:	482d      	ldr	r0, [pc, #180]	@ (80013f4 <request_ip_addr+0xd0>)
 800133e:	f7ff ff69 	bl	8001214 <esp_at_command>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8001348:	482b      	ldr	r0, [pc, #172]	@ (80013f8 <request_ip_addr+0xd4>)
 800134a:	f005 fd67 	bl	8006e1c <puts>
 800134e:	e049      	b.n	80013e4 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 8001350:	492a      	ldr	r1, [pc, #168]	@ (80013fc <request_ip_addr+0xd8>)
 8001352:	4827      	ldr	r0, [pc, #156]	@ (80013f0 <request_ip_addr+0xcc>)
 8001354:	f005 fe8c 	bl	8007070 <strtok>
 8001358:	6178      	str	r0, [r7, #20]

        if(is_debug)
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d03e      	beq.n	80013de <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	e009      	b.n	800137a <request_ip_addr+0x56>
                printf("%c", response[i]);
 8001366:	4a22      	ldr	r2, [pc, #136]	@ (80013f0 <request_ip_addr+0xcc>)
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4413      	add	r3, r2
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f005 fcf6 	bl	8006d60 <putchar>
            for(int i = 0 ; i < length ; i++)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	3301      	adds	r3, #1
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	897b      	ldrh	r3, [r7, #10]
 800137c:	461a      	mov	r2, r3
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4293      	cmp	r3, r2
 8001382:	dbf0      	blt.n	8001366 <request_ip_addr+0x42>
        }

        while(line != NULL)
 8001384:	e02b      	b.n	80013de <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 8001386:	491e      	ldr	r1, [pc, #120]	@ (8001400 <request_ip_addr+0xdc>)
 8001388:	6978      	ldr	r0, [r7, #20]
 800138a:	f005 fecd 	bl	8007128 <strstr>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d01f      	beq.n	80013d4 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 8001394:	491b      	ldr	r1, [pc, #108]	@ (8001404 <request_ip_addr+0xe0>)
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f005 fe6a 	bl	8007070 <strtok>
                ip = strtok(NULL, "\"");
 800139c:	4919      	ldr	r1, [pc, #100]	@ (8001404 <request_ip_addr+0xe0>)
 800139e:	2000      	movs	r0, #0
 80013a0:	f005 fe66 	bl	8007070 <strtok>
 80013a4:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 80013a6:	4918      	ldr	r1, [pc, #96]	@ (8001408 <request_ip_addr+0xe4>)
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7fe ff19 	bl	80001e0 <strcmp>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00f      	beq.n	80013d4 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 80013b4:	2210      	movs	r2, #16
 80013b6:	2100      	movs	r1, #0
 80013b8:	4814      	ldr	r0, [pc, #80]	@ (800140c <request_ip_addr+0xe8>)
 80013ba:	f005 fe31 	bl	8007020 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f7fe ff6e 	bl	80002a0 <strlen>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	68f9      	ldr	r1, [r7, #12]
 80013ca:	4810      	ldr	r0, [pc, #64]	@ (800140c <request_ip_addr+0xe8>)
 80013cc:	f005 ff41 	bl	8007252 <memcpy>
                    return 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e009      	b.n	80013e8 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 80013d4:	4909      	ldr	r1, [pc, #36]	@ (80013fc <request_ip_addr+0xd8>)
 80013d6:	2000      	movs	r0, #0
 80013d8:	f005 fe4a 	bl	8007070 <strtok>
 80013dc:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1d0      	bne.n	8001386 <request_ip_addr+0x62>
        }
    }
    return -1;
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000204 	.word	0x20000204
 80013f4:	0800929c 	.word	0x0800929c
 80013f8:	080092a8 	.word	0x080092a8
 80013fc:	08009290 	.word	0x08009290
 8001400:	080092c8 	.word	0x080092c8
 8001404:	08009298 	.word	0x08009298
 8001408:	08009260 	.word	0x08009260
 800140c:	200001f4 	.word	0x200001f4

08001410 <esp_client_conn>:
int esp_client_conn()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b092      	sub	sp, #72	@ 0x48
 8001414:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	2240      	movs	r2, #64	@ 0x40
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f005 fdfe 	bl	8007020 <memset>
  uint16_t length = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 8001428:	f107 0008 	add.w	r0, r7, #8
 800142c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001430:	4a09      	ldr	r2, [pc, #36]	@ (8001458 <esp_client_conn+0x48>)
 8001432:	490a      	ldr	r1, [pc, #40]	@ (800145c <esp_client_conn+0x4c>)
 8001434:	f005 fcfa 	bl	8006e2c <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8001438:	1dba      	adds	r2, r7, #6
 800143a:	f107 0008 	add.w	r0, r7, #8
 800143e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001442:	4907      	ldr	r1, [pc, #28]	@ (8001460 <esp_client_conn+0x50>)
 8001444:	f7ff fee6 	bl	8001214 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8001448:	4806      	ldr	r0, [pc, #24]	@ (8001464 <esp_client_conn+0x54>)
 800144a:	f000 f909 	bl	8001660 <esp_send_data>
	return 0;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3748      	adds	r7, #72	@ 0x48
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	080092d4 	.word	0x080092d4
 800145c:	080092e4 	.word	0x080092e4
 8001460:	20000204 	.word	0x20000204
 8001464:	08009300 	.word	0x08009300

08001468 <esp_get_status>:
int esp_get_status()
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 8001472:	1dba      	adds	r2, r7, #6
 8001474:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001478:	4909      	ldr	r1, [pc, #36]	@ (80014a0 <esp_get_status+0x38>)
 800147a:	480a      	ldr	r0, [pc, #40]	@ (80014a4 <esp_get_status+0x3c>)
 800147c:	f7ff feca 	bl	8001214 <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 8001480:	4909      	ldr	r1, [pc, #36]	@ (80014a8 <esp_get_status+0x40>)
 8001482:	4807      	ldr	r0, [pc, #28]	@ (80014a0 <esp_get_status+0x38>)
 8001484:	f005 fe50 	bl	8007128 <strstr>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <esp_get_status+0x2a>
    {
    	return 0;
 800148e:	2300      	movs	r3, #0
 8001490:	e001      	b.n	8001496 <esp_get_status+0x2e>
    }
	return -1;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000204 	.word	0x20000204
 80014a4:	0800930c 	.word	0x0800930c
 80014a8:	0800931c 	.word	0x0800931c

080014ac <drv_esp_init>:
int drv_esp_init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 80014b0:	2210      	movs	r2, #16
 80014b2:	2100      	movs	r1, #0
 80014b4:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <drv_esp_init+0x24>)
 80014b6:	f005 fdb3 	bl	8007020 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 80014ba:	2201      	movs	r2, #1
 80014bc:	4905      	ldr	r1, [pc, #20]	@ (80014d4 <drv_esp_init+0x28>)
 80014be:	4806      	ldr	r0, [pc, #24]	@ (80014d8 <drv_esp_init+0x2c>)
 80014c0:	f003 ff0b 	bl	80052da <HAL_UART_Receive_IT>

    return esp_reset();
 80014c4:	f7ff ff0e 	bl	80012e4 <esp_reset>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200001f4 	.word	0x200001f4
 80014d4:	2000063b 	.word	0x2000063b
 80014d8:	20000bf4 	.word	0x20000bf4

080014dc <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b094      	sub	sp, #80	@ 0x50
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	2240      	movs	r2, #64	@ 0x40
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f005 fd93 	bl	8007020 <memset>
  if(ssid == NULL || passwd == NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d002      	beq.n	8001506 <ap_conn_func+0x2a>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d103      	bne.n	800150e <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8001506:	4817      	ldr	r0, [pc, #92]	@ (8001564 <ap_conn_func+0x88>)
 8001508:	f005 fc88 	bl	8006e1c <puts>
 800150c:	e026      	b.n	800155c <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 800150e:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8001512:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001516:	4914      	ldr	r1, [pc, #80]	@ (8001568 <ap_conn_func+0x8c>)
 8001518:	4814      	ldr	r0, [pc, #80]	@ (800156c <ap_conn_func+0x90>)
 800151a:	f7ff fe7b 	bl	8001214 <esp_at_command>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 8001524:	4812      	ldr	r0, [pc, #72]	@ (8001570 <ap_conn_func+0x94>)
 8001526:	f005 fc79 	bl	8006e1c <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 800152a:	f107 000c 	add.w	r0, r7, #12
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4910      	ldr	r1, [pc, #64]	@ (8001574 <ap_conn_func+0x98>)
 8001534:	f005 fc7a 	bl	8006e2c <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8001538:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 800153c:	f107 000c 	add.w	r0, r7, #12
 8001540:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001544:	4908      	ldr	r1, [pc, #32]	@ (8001568 <ap_conn_func+0x8c>)
 8001546:	f7ff fe65 	bl	8001214 <esp_at_command>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	4619      	mov	r1, r3
 8001556:	4808      	ldr	r0, [pc, #32]	@ (8001578 <ap_conn_func+0x9c>)
 8001558:	f005 fbf0 	bl	8006d3c <iprintf>
}
 800155c:	3750      	adds	r7, #80	@ 0x50
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	08009380 	.word	0x08009380
 8001568:	20000204 	.word	0x20000204
 800156c:	080093ac 	.word	0x080093ac
 8001570:	080093bc 	.word	0x080093bc
 8001574:	080093d0 	.word	0x080093d0
 8001578:	080093e8 	.word	0x080093e8

0800157c <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a23      	ldr	r2, [pc, #140]	@ (8001618 <HAL_UART_RxCpltCallback+0x9c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d117      	bne.n	80015be <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 800158e:	4b23      	ldr	r3, [pc, #140]	@ (800161c <HAL_UART_RxCpltCallback+0xa0>)
 8001590:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001598:	d20c      	bcs.n	80015b4 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 800159a:	4b20      	ldr	r3, [pc, #128]	@ (800161c <HAL_UART_RxCpltCallback+0xa0>)
 800159c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	b291      	uxth	r1, r2
 80015a4:	4a1d      	ldr	r2, [pc, #116]	@ (800161c <HAL_UART_RxCpltCallback+0xa0>)
 80015a6:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <HAL_UART_RxCpltCallback+0xa4>)
 80015ae:	7819      	ldrb	r1, [r3, #0]
 80015b0:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <HAL_UART_RxCpltCallback+0xa0>)
 80015b2:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	491a      	ldr	r1, [pc, #104]	@ (8001620 <HAL_UART_RxCpltCallback+0xa4>)
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f003 fe8e 	bl	80052da <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a18      	ldr	r2, [pc, #96]	@ (8001624 <HAL_UART_RxCpltCallback+0xa8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d122      	bne.n	800160e <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 80015c8:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <HAL_UART_RxCpltCallback+0xac>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a17      	ldr	r2, [pc, #92]	@ (800162c <HAL_UART_RxCpltCallback+0xb0>)
 80015ce:	7811      	ldrb	r1, [r2, #0]
 80015d0:	4a17      	ldr	r2, [pc, #92]	@ (8001630 <HAL_UART_RxCpltCallback+0xb4>)
 80015d2:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <HAL_UART_RxCpltCallback+0xac>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a15      	ldr	r2, [pc, #84]	@ (8001630 <HAL_UART_RxCpltCallback+0xb4>)
 80015da:	5cd3      	ldrb	r3, [r2, r3]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b0d      	cmp	r3, #13
 80015e0:	d10b      	bne.n	80015fa <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <HAL_UART_RxCpltCallback+0xac>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a12      	ldr	r2, [pc, #72]	@ (8001630 <HAL_UART_RxCpltCallback+0xb4>)
 80015e8:	2100      	movs	r1, #0
 80015ea:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_UART_RxCpltCallback+0xb8>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
    		i = 0;
 80015f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <HAL_UART_RxCpltCallback+0xac>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	e004      	b.n	8001604 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <HAL_UART_RxCpltCallback+0xac>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	4a09      	ldr	r2, [pc, #36]	@ (8001628 <HAL_UART_RxCpltCallback+0xac>)
 8001602:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 8001604:	2201      	movs	r2, #1
 8001606:	4909      	ldr	r1, [pc, #36]	@ (800162c <HAL_UART_RxCpltCallback+0xb0>)
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f003 fe66 	bl	80052da <HAL_UART_Receive_IT>
    }
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40011400 	.word	0x40011400
 800161c:	2000063c 	.word	0x2000063c
 8001620:	2000063b 	.word	0x2000063b
 8001624:	40004400 	.word	0x40004400
 8001628:	20000a40 	.word	0x20000a40
 800162c:	2000063a 	.word	0x2000063a
 8001630:	20000608 	.word	0x20000608
 8001634:	20000604 	.word	0x20000604

08001638 <AiotClient_Init>:


void AiotClient_Init()
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 800163c:	4906      	ldr	r1, [pc, #24]	@ (8001658 <AiotClient_Init+0x20>)
 800163e:	4807      	ldr	r0, [pc, #28]	@ (800165c <AiotClient_Init+0x24>)
 8001640:	f7ff ff4c 	bl	80014dc <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 8001644:	2001      	movs	r0, #1
 8001646:	f7ff fe6d 	bl	8001324 <request_ip_addr>
	esp_client_conn();
 800164a:	f7ff fee1 	bl	8001410 <esp_client_conn>
	esp_get_status();
 800164e:	f7ff ff0b 	bl	8001468 <esp_get_status>
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	08009448 	.word	0x08009448
 800165c:	08009454 	.word	0x08009454

08001660 <esp_send_data>:

void esp_send_data(char *data)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b094      	sub	sp, #80	@ 0x50
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	2240      	movs	r2, #64	@ 0x40
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f005 fcd5 	bl	8007020 <memset>
	uint16_t length = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7fe fe10 	bl	80002a0 <strlen>
 8001680:	4602      	mov	r2, r0
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	490e      	ldr	r1, [pc, #56]	@ (80016c0 <esp_send_data+0x60>)
 8001688:	4618      	mov	r0, r3
 800168a:	f005 fbcf 	bl	8006e2c <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 800168e:	f107 020e 	add.w	r2, r7, #14
 8001692:	f107 0010 	add.w	r0, r7, #16
 8001696:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800169a:	490a      	ldr	r1, [pc, #40]	@ (80016c4 <esp_send_data+0x64>)
 800169c:	f7ff fdba 	bl	8001214 <esp_at_command>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d107      	bne.n	80016b6 <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 80016a6:	f107 020e 	add.w	r2, r7, #14
 80016aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ae:	4905      	ldr	r1, [pc, #20]	@ (80016c4 <esp_send_data+0x64>)
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fdaf 	bl	8001214 <esp_at_command>
	}
}
 80016b6:	bf00      	nop
 80016b8:	3750      	adds	r7, #80	@ 0x50
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	0800945c 	.word	0x0800945c
 80016c4:	20000204 	.word	0x20000204

080016c8 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 80016cc:	2201      	movs	r2, #1
 80016ce:	4903      	ldr	r1, [pc, #12]	@ (80016dc <drv_uart_init+0x14>)
 80016d0:	4803      	ldr	r0, [pc, #12]	@ (80016e0 <drv_uart_init+0x18>)
 80016d2:	f003 fe02 	bl	80052da <HAL_UART_Receive_IT>
    return 0;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000063a 	.word	0x2000063a
 80016e0:	20000bac 	.word	0x20000bac

080016e4 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 80016ec:	1d39      	adds	r1, r7, #4
 80016ee:	230a      	movs	r3, #10
 80016f0:	2201      	movs	r2, #1
 80016f2:	4807      	ldr	r0, [pc, #28]	@ (8001710 <__io_putchar+0x2c>)
 80016f4:	f003 fd66 	bl	80051c4 <HAL_UART_Transmit>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <__io_putchar+0x1e>
        return ch;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	e001      	b.n	8001706 <__io_putchar+0x22>
    return -1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000bac 	.word	0x20000bac

08001714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int ret = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800171e:	f001 fa43 	bl	8002ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001722:	f000 f8f9 	bl	8001918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001726:	f000 fc1b 	bl	8001f60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800172a:	f000 fbc5 	bl	8001eb8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800172e:	f000 fbed 	bl	8001f0c <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8001732:	f000 fb49 	bl	8001dc8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001736:	f000 fad1 	bl	8001cdc <MX_TIM3_Init>
  MX_TIM1_Init();
 800173a:	f000 f9b9 	bl	8001ab0 <MX_TIM1_Init>
  MX_ADC1_Init();
 800173e:	f000 f955 	bl	80019ec <MX_ADC1_Init>
  MX_TIM2_Init();
 8001742:	f000 fa55 	bl	8001bf0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf("Start main() - wifi\r\n");
 8001746:	485e      	ldr	r0, [pc, #376]	@ (80018c0 <main+0x1ac>)
 8001748:	f005 fb68 	bl	8006e1c <puts>
  ret |= drv_uart_init();
 800174c:	f7ff ffbc 	bl	80016c8 <drv_uart_init>
 8001750:	4602      	mov	r2, r0
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
  ret |= drv_esp_init();
 8001758:	f7ff fea8 	bl	80014ac <drv_esp_init>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4313      	orrs	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
  if(ret != 0)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d004      	beq.n	8001774 <main+0x60>
  {
	  printf("Esp response error\r\n");
 800176a:	4856      	ldr	r0, [pc, #344]	@ (80018c4 <main+0x1b0>)
 800176c:	f005 fb56 	bl	8006e1c <puts>
	  Error_Handler();
 8001770:	f000 fe82 	bl	8002478 <Error_Handler>
  }

  AiotClient_Init();
 8001774:	f7ff ff60 	bl	8001638 <AiotClient_Init>

  DHT11_Init();
 8001778:	f7ff fc52 	bl	8001020 <DHT11_Init>

  if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 800177c:	2100      	movs	r1, #0
 800177e:	4852      	ldr	r0, [pc, #328]	@ (80018c8 <main+0x1b4>)
 8001780:	f002 fdd8 	bl	8004334 <HAL_TIM_PWM_Start>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <main+0x7a>
	  Error_Handler();
 800178a:	f000 fe75 	bl	8002478 <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 800178e:	2100      	movs	r1, #0
 8001790:	484e      	ldr	r0, [pc, #312]	@ (80018cc <main+0x1b8>)
 8001792:	f002 fdcf 	bl	8004334 <HAL_TIM_PWM_Start>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <main+0x8c>
	  Error_Handler();
 800179c:	f000 fe6c 	bl	8002478 <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 80017a0:	2100      	movs	r1, #0
 80017a2:	484b      	ldr	r0, [pc, #300]	@ (80018d0 <main+0x1bc>)
 80017a4:	f002 fdc6 	bl	8004334 <HAL_TIM_PWM_Start>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <main+0x9e>
	  Error_Handler();
 80017ae:	f000 fe63 	bl	8002478 <Error_Handler>

  if(HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1) != HAL_OK)
 80017b2:	2100      	movs	r1, #0
 80017b4:	4847      	ldr	r0, [pc, #284]	@ (80018d4 <main+0x1c0>)
 80017b6:	f002 fdbd 	bl	8004334 <HAL_TIM_PWM_Start>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <main+0xb0>
	  Error_Handler();
 80017c0:	f000 fe5a 	bl	8002478 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lastDebounceTime = HAL_GetTick();
 80017c4:	f001 fa56 	bl	8002c74 <HAL_GetTick>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4a43      	ldr	r2, [pc, #268]	@ (80018d8 <main+0x1c4>)
 80017cc:	6013      	str	r3, [r2, #0]
  while (1)
  {
//	    int infraredSensorData = infraredSensor();	//출입문 적외선센서 값

		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 80017ce:	4943      	ldr	r1, [pc, #268]	@ (80018dc <main+0x1c8>)
 80017d0:	4843      	ldr	r0, [pc, #268]	@ (80018e0 <main+0x1cc>)
 80017d2:	f005 fca9 	bl	8007128 <strstr>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d01d      	beq.n	8001818 <main+0x104>
 80017dc:	4b40      	ldr	r3, [pc, #256]	@ (80018e0 <main+0x1cc>)
 80017de:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80017e2:	3b01      	subs	r3, #1
 80017e4:	4a3e      	ldr	r2, [pc, #248]	@ (80018e0 <main+0x1cc>)
 80017e6:	5cd3      	ldrb	r3, [r2, r3]
 80017e8:	2b0a      	cmp	r3, #10
 80017ea:	d115      	bne.n	8001818 <main+0x104>
		{
			//?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 80017ec:	215b      	movs	r1, #91	@ 0x5b
 80017ee:	483c      	ldr	r0, [pc, #240]	@ (80018e0 <main+0x1cc>)
 80017f0:	f005 fc1e 	bl	8007030 <strchr>
 80017f4:	4603      	mov	r3, r0
 80017f6:	4619      	mov	r1, r3
 80017f8:	483a      	ldr	r0, [pc, #232]	@ (80018e4 <main+0x1d0>)
 80017fa:	f005 fd22 	bl	8007242 <strcpy>
			memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 80017fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001802:	2100      	movs	r1, #0
 8001804:	4836      	ldr	r0, [pc, #216]	@ (80018e0 <main+0x1cc>)
 8001806:	f005 fc0b 	bl	8007020 <memset>
			cb_data.length = 0;
 800180a:	4b35      	ldr	r3, [pc, #212]	@ (80018e0 <main+0x1cc>)
 800180c:	2200      	movs	r2, #0
 800180e:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 8001812:	4834      	ldr	r0, [pc, #208]	@ (80018e4 <main+0x1d0>)
 8001814:	f000 fc44 	bl	80020a0 <esp_event>
		}
		if(rx2Flag)
 8001818:	4b33      	ldr	r3, [pc, #204]	@ (80018e8 <main+0x1d4>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <main+0x11c>
		{
			printf("recv2 : %s\r\n",rx2Data);
 8001822:	4932      	ldr	r1, [pc, #200]	@ (80018ec <main+0x1d8>)
 8001824:	4832      	ldr	r0, [pc, #200]	@ (80018f0 <main+0x1dc>)
 8001826:	f005 fa89 	bl	8006d3c <iprintf>
			rx2Flag =0;
 800182a:	4b2f      	ldr	r3, [pc, #188]	@ (80018e8 <main+0x1d4>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
		}
		if(tim3Flag1Sec)	//1초에 한번
 8001830:	4b30      	ldr	r3, [pc, #192]	@ (80018f4 <main+0x1e0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0ca      	beq.n	80017ce <main+0xba>
		{
			tim3Flag1Sec = 0;
 8001838:	4b2e      	ldr	r3, [pc, #184]	@ (80018f4 <main+0x1e0>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
			if(!(tim3Sec%10)) //10초에 한번
 800183e:	4b2e      	ldr	r3, [pc, #184]	@ (80018f8 <main+0x1e4>)
 8001840:	6819      	ldr	r1, [r3, #0]
 8001842:	4b2e      	ldr	r3, [pc, #184]	@ (80018fc <main+0x1e8>)
 8001844:	fba3 2301 	umull	r2, r3, r3, r1
 8001848:	08da      	lsrs	r2, r3, #3
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	1aca      	subs	r2, r1, r3
 8001854:	2a00      	cmp	r2, #0
 8001856:	d109      	bne.n	800186c <main+0x158>
			{
				if(esp_get_status() != 0)
 8001858:	f7ff fe06 	bl	8001468 <esp_get_status>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d004      	beq.n	800186c <main+0x158>
				{
					printf("server connecting ...\r\n");
 8001862:	4827      	ldr	r0, [pc, #156]	@ (8001900 <main+0x1ec>)
 8001864:	f005 fada 	bl	8006e1c <puts>
					esp_client_conn();
 8001868:	f7ff fdd2 	bl	8001410 <esp_client_conn>
				}
			}
			printf("tim3Sec : %d\r\n",tim3Sec);
 800186c:	4b22      	ldr	r3, [pc, #136]	@ (80018f8 <main+0x1e4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	4824      	ldr	r0, [pc, #144]	@ (8001904 <main+0x1f0>)
 8001874:	f005 fa62 	bl	8006d3c <iprintf>
			if(!(tim3Sec%5)) //5초에 한번
 8001878:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <main+0x1e4>)
 800187a:	6819      	ldr	r1, [r3, #0]
 800187c:	4b1f      	ldr	r3, [pc, #124]	@ (80018fc <main+0x1e8>)
 800187e:	fba3 2301 	umull	r2, r3, r3, r1
 8001882:	089a      	lsrs	r2, r3, #2
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	1aca      	subs	r2, r1, r3
 800188c:	2a00      	cmp	r2, #0
 800188e:	d19e      	bne.n	80017ce <main+0xba>
			{
				//dht11에서 값 읽어오기
				dht11Data = DHT11_readData();
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fc92 	bl	80011bc <DHT11_readData>
				if(dht11Data.rh_byte1 != 255)
 8001898:	793b      	ldrb	r3, [r7, #4]
 800189a:	2bff      	cmp	r3, #255	@ 0xff
 800189c:	d00b      	beq.n	80018b6 <main+0x1a2>
				{
					//온도 데이터 전역변수 temp에 저장
					sprintf(temp, "%d.%d", dht11Data.temp_byte1, dht11Data.temp_byte2);
 800189e:	79bb      	ldrb	r3, [r7, #6]
 80018a0:	461a      	mov	r2, r3
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	4918      	ldr	r1, [pc, #96]	@ (8001908 <main+0x1f4>)
 80018a6:	4819      	ldr	r0, [pc, #100]	@ (800190c <main+0x1f8>)
 80018a8:	f005 fac0 	bl	8006e2c <siprintf>
					//습도 데이터 전역변수 humi 에 저장
					humi = dht11Data.rh_byte1;
 80018ac:	793b      	ldrb	r3, [r7, #4]
 80018ae:	461a      	mov	r2, r3
 80018b0:	4b17      	ldr	r3, [pc, #92]	@ (8001910 <main+0x1fc>)
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e78b      	b.n	80017ce <main+0xba>
				}
				else
					printf("DHT11 response error\r\n");
 80018b6:	4817      	ldr	r0, [pc, #92]	@ (8001914 <main+0x200>)
 80018b8:	f005 fab0 	bl	8006e1c <puts>
		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 80018bc:	e787      	b.n	80017ce <main+0xba>
 80018be:	bf00      	nop
 80018c0:	0800946c 	.word	0x0800946c
 80018c4:	08009484 	.word	0x08009484
 80018c8:	20000a8c 	.word	0x20000a8c
 80018cc:	20000ad4 	.word	0x20000ad4
 80018d0:	20000b1c 	.word	0x20000b1c
 80018d4:	20000b64 	.word	0x20000b64
 80018d8:	20000c60 	.word	0x20000c60
 80018dc:	08009498 	.word	0x08009498
 80018e0:	2000063c 	.word	0x2000063c
 80018e4:	20000c64 	.word	0x20000c64
 80018e8:	20000604 	.word	0x20000604
 80018ec:	20000608 	.word	0x20000608
 80018f0:	080094a0 	.word	0x080094a0
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000c3c 	.word	0x20000c3c
 80018fc:	cccccccd 	.word	0xcccccccd
 8001900:	080094b0 	.word	0x080094b0
 8001904:	080094c8 	.word	0x080094c8
 8001908:	080094d8 	.word	0x080094d8
 800190c:	20000c44 	.word	0x20000c44
 8001910:	20000c40 	.word	0x20000c40
 8001914:	080094e0 	.word	0x080094e0

08001918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b094      	sub	sp, #80	@ 0x50
 800191c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191e:	f107 0320 	add.w	r3, r7, #32
 8001922:	2230      	movs	r2, #48	@ 0x30
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f005 fb7a 	bl	8007020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	4b28      	ldr	r3, [pc, #160]	@ (80019e4 <SystemClock_Config+0xcc>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	4a27      	ldr	r2, [pc, #156]	@ (80019e4 <SystemClock_Config+0xcc>)
 8001946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800194a:	6413      	str	r3, [r2, #64]	@ 0x40
 800194c:	4b25      	ldr	r3, [pc, #148]	@ (80019e4 <SystemClock_Config+0xcc>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001958:	2300      	movs	r3, #0
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	4b22      	ldr	r3, [pc, #136]	@ (80019e8 <SystemClock_Config+0xd0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a21      	ldr	r2, [pc, #132]	@ (80019e8 <SystemClock_Config+0xd0>)
 8001962:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b1f      	ldr	r3, [pc, #124]	@ (80019e8 <SystemClock_Config+0xd0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001974:	2301      	movs	r3, #1
 8001976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001978:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197e:	2302      	movs	r3, #2
 8001980:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001982:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001988:	2308      	movs	r3, #8
 800198a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800198c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001990:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001992:	2304      	movs	r3, #4
 8001994:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001996:	2304      	movs	r3, #4
 8001998:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199a:	f107 0320 	add.w	r3, r7, #32
 800199e:	4618      	mov	r0, r3
 80019a0:	f001 ff88 	bl	80038b4 <HAL_RCC_OscConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019aa:	f000 fd65 	bl	8002478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ae:	230f      	movs	r3, #15
 80019b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b2:	2302      	movs	r3, #2
 80019b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	2102      	movs	r1, #2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 f9ea 	bl	8003da4 <HAL_RCC_ClockConfig>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019d6:	f000 fd4f 	bl	8002478 <Error_Handler>
  }
}
 80019da:	bf00      	nop
 80019dc:	3750      	adds	r7, #80	@ 0x50
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40007000 	.word	0x40007000

080019ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019f2:	463b      	mov	r3, r7
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019fe:	4b29      	ldr	r3, [pc, #164]	@ (8001aa4 <MX_ADC1_Init+0xb8>)
 8001a00:	4a29      	ldr	r2, [pc, #164]	@ (8001aa8 <MX_ADC1_Init+0xbc>)
 8001a02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a04:	4b27      	ldr	r3, [pc, #156]	@ (8001aa4 <MX_ADC1_Init+0xb8>)
 8001a06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a0c:	4b25      	ldr	r3, [pc, #148]	@ (8001aa4 <MX_ADC1_Init+0xb8>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a12:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <MX_ADC1_Init+0xb8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a18:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <MX_ADC1_Init+0xb8>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a1e:	4b21      	ldr	r3, [pc, #132]	@ (8001aa4 <MX_ADC1_Init+0xb8>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a26:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <MX_ADC1_Init+0xb8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <MX_ADC1_Init+0xb8>)
 8001a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001aac <MX_ADC1_Init+0xc0>)
 8001a30:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <MX_ADC1_Init+0xb8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <MX_ADC1_Init+0xb8>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a3e:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <MX_ADC1_Init+0xb8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a46:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <MX_ADC1_Init+0xb8>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a4c:	4815      	ldr	r0, [pc, #84]	@ (8001aa4 <MX_ADC1_Init+0xb8>)
 8001a4e:	f001 f941 	bl	8002cd4 <HAL_ADC_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a58:	f000 fd0e 	bl	8002478 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a60:	2301      	movs	r3, #1
 8001a62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a68:	463b      	mov	r3, r7
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	480d      	ldr	r0, [pc, #52]	@ (8001aa4 <MX_ADC1_Init+0xb8>)
 8001a6e:	f001 f975 	bl	8002d5c <HAL_ADC_ConfigChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a78:	f000 fcfe 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a88:	463b      	mov	r3, r7
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	@ (8001aa4 <MX_ADC1_Init+0xb8>)
 8001a8e:	f001 f965 	bl	8002d5c <HAL_ADC_ConfigChannel>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001a98:	f000 fcee 	bl	8002478 <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000a44 	.word	0x20000a44
 8001aa8:	40012000 	.word	0x40012000
 8001aac:	0f000001 	.word	0x0f000001

08001ab0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b096      	sub	sp, #88	@ 0x58
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]
 8001ade:	615a      	str	r2, [r3, #20]
 8001ae0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f005 fa99 	bl	8007020 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aee:	4b3e      	ldr	r3, [pc, #248]	@ (8001be8 <MX_TIM1_Init+0x138>)
 8001af0:	4a3e      	ldr	r2, [pc, #248]	@ (8001bec <MX_TIM1_Init+0x13c>)
 8001af2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001af4:	4b3c      	ldr	r3, [pc, #240]	@ (8001be8 <MX_TIM1_Init+0x138>)
 8001af6:	2253      	movs	r2, #83	@ 0x53
 8001af8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afa:	4b3b      	ldr	r3, [pc, #236]	@ (8001be8 <MX_TIM1_Init+0x138>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001b00:	4b39      	ldr	r3, [pc, #228]	@ (8001be8 <MX_TIM1_Init+0x138>)
 8001b02:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b08:	4b37      	ldr	r3, [pc, #220]	@ (8001be8 <MX_TIM1_Init+0x138>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b0e:	4b36      	ldr	r3, [pc, #216]	@ (8001be8 <MX_TIM1_Init+0x138>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b14:	4b34      	ldr	r3, [pc, #208]	@ (8001be8 <MX_TIM1_Init+0x138>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b1a:	4833      	ldr	r0, [pc, #204]	@ (8001be8 <MX_TIM1_Init+0x138>)
 8001b1c:	f002 fb62 	bl	80041e4 <HAL_TIM_Base_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b26:	f000 fca7 	bl	8002478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b30:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b34:	4619      	mov	r1, r3
 8001b36:	482c      	ldr	r0, [pc, #176]	@ (8001be8 <MX_TIM1_Init+0x138>)
 8001b38:	f002 fe5e 	bl	80047f8 <HAL_TIM_ConfigClockSource>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b42:	f000 fc99 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b46:	4828      	ldr	r0, [pc, #160]	@ (8001be8 <MX_TIM1_Init+0x138>)
 8001b48:	f002 fb9b 	bl	8004282 <HAL_TIM_PWM_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b52:	f000 fc91 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b5e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b62:	4619      	mov	r1, r3
 8001b64:	4820      	ldr	r0, [pc, #128]	@ (8001be8 <MX_TIM1_Init+0x138>)
 8001b66:	f003 fa09 	bl	8004f7c <HAL_TIMEx_MasterConfigSynchronization>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b70:	f000 fc82 	bl	8002478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b74:	2360      	movs	r3, #96	@ 0x60
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b80:	2300      	movs	r3, #0
 8001b82:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b94:	2200      	movs	r2, #0
 8001b96:	4619      	mov	r1, r3
 8001b98:	4813      	ldr	r0, [pc, #76]	@ (8001be8 <MX_TIM1_Init+0x138>)
 8001b9a:	f002 fd6b 	bl	8004674 <HAL_TIM_PWM_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001ba4:	f000 fc68 	bl	8002478 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bc0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4807      	ldr	r0, [pc, #28]	@ (8001be8 <MX_TIM1_Init+0x138>)
 8001bcc:	f003 fa44 	bl	8005058 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001bd6:	f000 fc4f 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bda:	4803      	ldr	r0, [pc, #12]	@ (8001be8 <MX_TIM1_Init+0x138>)
 8001bdc:	f000 fd36 	bl	800264c <HAL_TIM_MspPostInit>

}
 8001be0:	bf00      	nop
 8001be2:	3758      	adds	r7, #88	@ 0x58
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000a8c 	.word	0x20000a8c
 8001bec:	40010000 	.word	0x40010000

08001bf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08e      	sub	sp, #56	@ 0x38
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c04:	f107 0320 	add.w	r3, r7, #32
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
 8001c1c:	615a      	str	r2, [r3, #20]
 8001c1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c20:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001c28:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c2a:	2253      	movs	r2, #83	@ 0x53
 8001c2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001c34:	4b28      	ldr	r3, [pc, #160]	@ (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c36:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001c3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3c:	4b26      	ldr	r3, [pc, #152]	@ (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c42:	4b25      	ldr	r3, [pc, #148]	@ (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c44:	2280      	movs	r2, #128	@ 0x80
 8001c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c48:	4823      	ldr	r0, [pc, #140]	@ (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c4a:	f002 facb 	bl	80041e4 <HAL_TIM_Base_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c54:	f000 fc10 	bl	8002478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c62:	4619      	mov	r1, r3
 8001c64:	481c      	ldr	r0, [pc, #112]	@ (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c66:	f002 fdc7 	bl	80047f8 <HAL_TIM_ConfigClockSource>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c70:	f000 fc02 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c74:	4818      	ldr	r0, [pc, #96]	@ (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c76:	f002 fb04 	bl	8004282 <HAL_TIM_PWM_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c80:	f000 fbfa 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c8c:	f107 0320 	add.w	r3, r7, #32
 8001c90:	4619      	mov	r1, r3
 8001c92:	4811      	ldr	r0, [pc, #68]	@ (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c94:	f003 f972 	bl	8004f7c <HAL_TIMEx_MasterConfigSynchronization>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001c9e:	f000 fbeb 	bl	8002478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca2:	2360      	movs	r3, #96	@ 0x60
 8001ca4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4807      	ldr	r0, [pc, #28]	@ (8001cd8 <MX_TIM2_Init+0xe8>)
 8001cba:	f002 fcdb 	bl	8004674 <HAL_TIM_PWM_ConfigChannel>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001cc4:	f000 fbd8 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cc8:	4803      	ldr	r0, [pc, #12]	@ (8001cd8 <MX_TIM2_Init+0xe8>)
 8001cca:	f000 fcbf 	bl	800264c <HAL_TIM_MspPostInit>

}
 8001cce:	bf00      	nop
 8001cd0:	3738      	adds	r7, #56	@ 0x38
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000ad4 	.word	0x20000ad4

08001cdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08e      	sub	sp, #56	@ 0x38
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf0:	f107 0320 	add.w	r3, r7, #32
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
 8001d08:	615a      	str	r2, [r3, #20]
 8001d0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc0 <MX_TIM3_Init+0xe4>)
 8001d0e:	4a2d      	ldr	r2, [pc, #180]	@ (8001dc4 <MX_TIM3_Init+0xe8>)
 8001d10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001d12:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc0 <MX_TIM3_Init+0xe4>)
 8001d14:	2253      	movs	r2, #83	@ 0x53
 8001d16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d18:	4b29      	ldr	r3, [pc, #164]	@ (8001dc0 <MX_TIM3_Init+0xe4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001d1e:	4b28      	ldr	r3, [pc, #160]	@ (8001dc0 <MX_TIM3_Init+0xe4>)
 8001d20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d26:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <MX_TIM3_Init+0xe4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d2c:	4b24      	ldr	r3, [pc, #144]	@ (8001dc0 <MX_TIM3_Init+0xe4>)
 8001d2e:	2280      	movs	r2, #128	@ 0x80
 8001d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d32:	4823      	ldr	r0, [pc, #140]	@ (8001dc0 <MX_TIM3_Init+0xe4>)
 8001d34:	f002 fa56 	bl	80041e4 <HAL_TIM_Base_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d3e:	f000 fb9b 	bl	8002478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	481c      	ldr	r0, [pc, #112]	@ (8001dc0 <MX_TIM3_Init+0xe4>)
 8001d50:	f002 fd52 	bl	80047f8 <HAL_TIM_ConfigClockSource>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d5a:	f000 fb8d 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d5e:	4818      	ldr	r0, [pc, #96]	@ (8001dc0 <MX_TIM3_Init+0xe4>)
 8001d60:	f002 fa8f 	bl	8004282 <HAL_TIM_PWM_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d6a:	f000 fb85 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d76:	f107 0320 	add.w	r3, r7, #32
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4810      	ldr	r0, [pc, #64]	@ (8001dc0 <MX_TIM3_Init+0xe4>)
 8001d7e:	f003 f8fd 	bl	8004f7c <HAL_TIMEx_MasterConfigSynchronization>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d88:	f000 fb76 	bl	8002478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d8c:	2360      	movs	r3, #96	@ 0x60
 8001d8e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	2200      	movs	r2, #0
 8001da0:	4619      	mov	r1, r3
 8001da2:	4807      	ldr	r0, [pc, #28]	@ (8001dc0 <MX_TIM3_Init+0xe4>)
 8001da4:	f002 fc66 	bl	8004674 <HAL_TIM_PWM_ConfigChannel>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001dae:	f000 fb63 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001db2:	4803      	ldr	r0, [pc, #12]	@ (8001dc0 <MX_TIM3_Init+0xe4>)
 8001db4:	f000 fc4a 	bl	800264c <HAL_TIM_MspPostInit>

}
 8001db8:	bf00      	nop
 8001dba:	3738      	adds	r7, #56	@ 0x38
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000b1c 	.word	0x20000b1c
 8001dc4:	40000400 	.word	0x40000400

08001dc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08e      	sub	sp, #56	@ 0x38
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ddc:	f107 0320 	add.w	r3, r7, #32
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
 8001df4:	615a      	str	r2, [r3, #20]
 8001df6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001df8:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb0 <MX_TIM4_Init+0xe8>)
 8001dfa:	4a2e      	ldr	r2, [pc, #184]	@ (8001eb4 <MX_TIM4_Init+0xec>)
 8001dfc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8001eb0 <MX_TIM4_Init+0xe8>)
 8001e00:	2253      	movs	r2, #83	@ 0x53
 8001e02:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e04:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb0 <MX_TIM4_Init+0xe8>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001e0a:	4b29      	ldr	r3, [pc, #164]	@ (8001eb0 <MX_TIM4_Init+0xe8>)
 8001e0c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e10:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e12:	4b27      	ldr	r3, [pc, #156]	@ (8001eb0 <MX_TIM4_Init+0xe8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e18:	4b25      	ldr	r3, [pc, #148]	@ (8001eb0 <MX_TIM4_Init+0xe8>)
 8001e1a:	2280      	movs	r2, #128	@ 0x80
 8001e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e1e:	4824      	ldr	r0, [pc, #144]	@ (8001eb0 <MX_TIM4_Init+0xe8>)
 8001e20:	f002 f9e0 	bl	80041e4 <HAL_TIM_Base_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001e2a:	f000 fb25 	bl	8002478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e32:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e38:	4619      	mov	r1, r3
 8001e3a:	481d      	ldr	r0, [pc, #116]	@ (8001eb0 <MX_TIM4_Init+0xe8>)
 8001e3c:	f002 fcdc 	bl	80047f8 <HAL_TIM_ConfigClockSource>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001e46:	f000 fb17 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e4a:	4819      	ldr	r0, [pc, #100]	@ (8001eb0 <MX_TIM4_Init+0xe8>)
 8001e4c:	f002 fa19 	bl	8004282 <HAL_TIM_PWM_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001e56:	f000 fb0f 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e62:	f107 0320 	add.w	r3, r7, #32
 8001e66:	4619      	mov	r1, r3
 8001e68:	4811      	ldr	r0, [pc, #68]	@ (8001eb0 <MX_TIM4_Init+0xe8>)
 8001e6a:	f003 f887 	bl	8004f7c <HAL_TIMEx_MasterConfigSynchronization>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001e74:	f000 fb00 	bl	8002478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e78:	2360      	movs	r3, #96	@ 0x60
 8001e7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001e7c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001e80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4807      	ldr	r0, [pc, #28]	@ (8001eb0 <MX_TIM4_Init+0xe8>)
 8001e92:	f002 fbef 	bl	8004674 <HAL_TIM_PWM_ConfigChannel>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001e9c:	f000 faec 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ea0:	4803      	ldr	r0, [pc, #12]	@ (8001eb0 <MX_TIM4_Init+0xe8>)
 8001ea2:	f000 fbd3 	bl	800264c <HAL_TIM_MspPostInit>

}
 8001ea6:	bf00      	nop
 8001ea8:	3738      	adds	r7, #56	@ 0x38
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000b64 	.word	0x20000b64
 8001eb4:	40000800 	.word	0x40000800

08001eb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <MX_USART2_UART_Init+0x4c>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	@ (8001f08 <MX_USART2_UART_Init+0x50>)
 8001ec0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ec2:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <MX_USART2_UART_Init+0x4c>)
 8001ec4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ec8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <MX_USART2_UART_Init+0x4c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <MX_USART2_UART_Init+0x4c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <MX_USART2_UART_Init+0x4c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001edc:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <MX_USART2_UART_Init+0x4c>)
 8001ede:	220c      	movs	r2, #12
 8001ee0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee2:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <MX_USART2_UART_Init+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <MX_USART2_UART_Init+0x4c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eee:	4805      	ldr	r0, [pc, #20]	@ (8001f04 <MX_USART2_UART_Init+0x4c>)
 8001ef0:	f003 f918 	bl	8005124 <HAL_UART_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001efa:	f000 fabd 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000bac 	.word	0x20000bac
 8001f08:	40004400 	.word	0x40004400

08001f0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f10:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <MX_USART6_UART_Init+0x4c>)
 8001f12:	4a12      	ldr	r2, [pc, #72]	@ (8001f5c <MX_USART6_UART_Init+0x50>)
 8001f14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <MX_USART6_UART_Init+0x4c>)
 8001f18:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001f1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <MX_USART6_UART_Init+0x4c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <MX_USART6_UART_Init+0x4c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <MX_USART6_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f30:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <MX_USART6_UART_Init+0x4c>)
 8001f32:	220c      	movs	r2, #12
 8001f34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f36:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <MX_USART6_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <MX_USART6_UART_Init+0x4c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f42:	4805      	ldr	r0, [pc, #20]	@ (8001f58 <MX_USART6_UART_Init+0x4c>)
 8001f44:	f003 f8ee 	bl	8005124 <HAL_UART_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f4e:	f000 fa93 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000bf4 	.word	0x20000bf4
 8001f5c:	40011400 	.word	0x40011400

08001f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	@ 0x28
 8001f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
 8001f74:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	4b46      	ldr	r3, [pc, #280]	@ (8002094 <MX_GPIO_Init+0x134>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	4a45      	ldr	r2, [pc, #276]	@ (8002094 <MX_GPIO_Init+0x134>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f86:	4b43      	ldr	r3, [pc, #268]	@ (8002094 <MX_GPIO_Init+0x134>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b3f      	ldr	r3, [pc, #252]	@ (8002094 <MX_GPIO_Init+0x134>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a3e      	ldr	r2, [pc, #248]	@ (8002094 <MX_GPIO_Init+0x134>)
 8001f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b3c      	ldr	r3, [pc, #240]	@ (8002094 <MX_GPIO_Init+0x134>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	4b38      	ldr	r3, [pc, #224]	@ (8002094 <MX_GPIO_Init+0x134>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	4a37      	ldr	r2, [pc, #220]	@ (8002094 <MX_GPIO_Init+0x134>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fbe:	4b35      	ldr	r3, [pc, #212]	@ (8002094 <MX_GPIO_Init+0x134>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	4b31      	ldr	r3, [pc, #196]	@ (8002094 <MX_GPIO_Init+0x134>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a30      	ldr	r2, [pc, #192]	@ (8002094 <MX_GPIO_Init+0x134>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b2e      	ldr	r3, [pc, #184]	@ (8002094 <MX_GPIO_Init+0x134>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2120      	movs	r1, #32
 8001fea:	482b      	ldr	r0, [pc, #172]	@ (8002098 <MX_GPIO_Init+0x138>)
 8001fec:	f001 fc24 	bl	8003838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ff6:	4829      	ldr	r0, [pc, #164]	@ (800209c <MX_GPIO_Init+0x13c>)
 8001ff8:	f001 fc1e 	bl	8003838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ffc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002002:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4619      	mov	r1, r3
 8002012:	4822      	ldr	r0, [pc, #136]	@ (800209c <MX_GPIO_Init+0x13c>)
 8002014:	f001 fa74 	bl	8003500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0_EXTI0_BUTTON_Pin */
  GPIO_InitStruct.Pin = PC0_EXTI0_BUTTON_Pin;
 8002018:	2301      	movs	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800201c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PC0_EXTI0_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4619      	mov	r1, r3
 800202c:	481b      	ldr	r0, [pc, #108]	@ (800209c <MX_GPIO_Init+0x13c>)
 800202e:	f001 fa67 	bl	8003500 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002032:	2320      	movs	r3, #32
 8002034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002036:	2301      	movs	r3, #1
 8002038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	4813      	ldr	r0, [pc, #76]	@ (8002098 <MX_GPIO_Init+0x138>)
 800204a:	f001 fa59 	bl	8003500 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800204e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002054:	2301      	movs	r3, #1
 8002056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	4619      	mov	r1, r3
 8002066:	480d      	ldr	r0, [pc, #52]	@ (800209c <MX_GPIO_Init+0x13c>)
 8002068:	f001 fa4a 	bl	8003500 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	2100      	movs	r1, #0
 8002070:	2006      	movs	r0, #6
 8002072:	f001 f97c 	bl	800336e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002076:	2006      	movs	r0, #6
 8002078:	f001 f995 	bl	80033a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800207c:	2200      	movs	r2, #0
 800207e:	2100      	movs	r1, #0
 8002080:	2028      	movs	r0, #40	@ 0x28
 8002082:	f001 f974 	bl	800336e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002086:	2028      	movs	r0, #40	@ 0x28
 8002088:	f001 f98d 	bl	80033a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800208c:	bf00      	nop
 800208e:	3728      	adds	r7, #40	@ 0x28
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40023800 	.word	0x40023800
 8002098:	40020000 	.word	0x40020000
 800209c:	40020800 	.word	0x40020800

080020a0 <esp_event>:
void MX_GPIO_LED_OFF(int pin)
{
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
}
void esp_event(char * recvBuf)
{
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a2:	b0a1      	sub	sp, #132	@ 0x84
 80020a4:	af06      	add	r7, sp, #24
 80020a6:	6078      	str	r0, [r7, #4]
  int i=0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	667b      	str	r3, [r7, #100]	@ 0x64
  char * pToken;
  char * pArray[ARR_CNT]={0};
 80020ac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	2240      	movs	r2, #64	@ 0x40
 80020c2:	2100      	movs	r1, #0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f004 ffab 	bl	8007020 <memset>

  strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7fe f8e8 	bl	80002a0 <strlen>
 80020d0:	4603      	mov	r3, r0
 80020d2:	3b01      	subs	r3, #1
 80020d4:	4a93      	ldr	r2, [pc, #588]	@ (8002324 <esp_event+0x284>)
 80020d6:	2100      	movs	r1, #0
 80020d8:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4892      	ldr	r0, [pc, #584]	@ (8002328 <esp_event+0x288>)
 80020de:	f004 fe2d 	bl	8006d3c <iprintf>

  pToken = strtok(recvBuf,"[@]");
 80020e2:	4992      	ldr	r1, [pc, #584]	@ (800232c <esp_event+0x28c>)
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f004 ffc3 	bl	8007070 <strtok>
 80020ea:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 80020ec:	e011      	b.n	8002112 <esp_event+0x72>
  {
    pArray[i] = pToken;
 80020ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	3368      	adds	r3, #104	@ 0x68
 80020f4:	443b      	add	r3, r7
 80020f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80020f8:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 80020fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020fe:	3301      	adds	r3, #1
 8002100:	667b      	str	r3, [r7, #100]	@ 0x64
 8002102:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002104:	2b04      	cmp	r3, #4
 8002106:	dc08      	bgt.n	800211a <esp_event+0x7a>
      break;
    pToken = strtok(NULL,"[@]");
 8002108:	4988      	ldr	r1, [pc, #544]	@ (800232c <esp_event+0x28c>)
 800210a:	2000      	movs	r0, #0
 800210c:	f004 ffb0 	bl	8007070 <strtok>
 8002110:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8002112:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1ea      	bne.n	80020ee <esp_event+0x4e>
 8002118:	e000      	b.n	800211c <esp_event+0x7c>
      break;
 800211a:	bf00      	nop
  }

  if(!strcmp(pArray[1], "ALLSTOP"))
 800211c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800211e:	4984      	ldr	r1, [pc, #528]	@ (8002330 <esp_event+0x290>)
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f85d 	bl	80001e0 <strcmp>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10e      	bne.n	800214a <esp_event+0xaa>
  {
	  if(!strcmp(pArray[2], "ON"))
 800212c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800212e:	4981      	ldr	r1, [pc, #516]	@ (8002334 <esp_event+0x294>)
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe f855 	bl	80001e0 <strcmp>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 80e6 	beq.w	800230a <esp_event+0x26a>
	  {
		  //모든 장치 정지 명령 내리기(모든 플래그 True로)
	  }
	  else if(!strcmp(pArray[2], "OFF"))
 800213e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002140:	497d      	ldr	r1, [pc, #500]	@ (8002338 <esp_event+0x298>)
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe f84c 	bl	80001e0 <strcmp>
 8002148:	e0df      	b.n	800230a <esp_event+0x26a>
	  {
		  //모든 장치 정지 명령 취소(모든 플래그 false로)
	  }
  }
  else if(!strcmp(pArray[1], "STATE"))
 800214a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800214c:	497b      	ldr	r1, [pc, #492]	@ (800233c <esp_event+0x29c>)
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe f846 	bl	80001e0 <strcmp>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d11d      	bne.n	8002196 <esp_event+0xf6>
  {
	  //현재 매장의 상태 전송하기
	 sprintf(sendBuf, "[%s]%s@%s@%d@%d@%d@%d@%d\n", pArray[0], pArray[1], temp, humi, ledState, lockState, customerCount, fanSpeed);
 800215a:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 800215c:	6d3e      	ldr	r6, [r7, #80]	@ 0x50
 800215e:	4b78      	ldr	r3, [pc, #480]	@ (8002340 <esp_event+0x2a0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a78      	ldr	r2, [pc, #480]	@ (8002344 <esp_event+0x2a4>)
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	4978      	ldr	r1, [pc, #480]	@ (8002348 <esp_event+0x2a8>)
 8002168:	7809      	ldrb	r1, [r1, #0]
 800216a:	6039      	str	r1, [r7, #0]
 800216c:	4977      	ldr	r1, [pc, #476]	@ (800234c <esp_event+0x2ac>)
 800216e:	6809      	ldr	r1, [r1, #0]
 8002170:	4877      	ldr	r0, [pc, #476]	@ (8002350 <esp_event+0x2b0>)
 8002172:	6800      	ldr	r0, [r0, #0]
 8002174:	f107 040c 	add.w	r4, r7, #12
 8002178:	9005      	str	r0, [sp, #20]
 800217a:	9104      	str	r1, [sp, #16]
 800217c:	6839      	ldr	r1, [r7, #0]
 800217e:	9103      	str	r1, [sp, #12]
 8002180:	9202      	str	r2, [sp, #8]
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	4b73      	ldr	r3, [pc, #460]	@ (8002354 <esp_event+0x2b4>)
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	4633      	mov	r3, r6
 800218a:	462a      	mov	r2, r5
 800218c:	4972      	ldr	r1, [pc, #456]	@ (8002358 <esp_event+0x2b8>)
 800218e:	4620      	mov	r0, r4
 8002190:	f004 fe4c 	bl	8006e2c <siprintf>
 8002194:	e0b9      	b.n	800230a <esp_event+0x26a>
  }
  else if(!strcmp(pArray[1], "FAN"))	//팬 회전수 0~1000
 8002196:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002198:	4970      	ldr	r1, [pc, #448]	@ (800235c <esp_event+0x2bc>)
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe f820 	bl	80001e0 <strcmp>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d117      	bne.n	80021d6 <esp_event+0x136>
  {
	  fanSpeed = atoi(pArray[2]);
 80021a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a8:	4618      	mov	r0, r3
 80021aa:	f004 f827 	bl	80061fc <atoi>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4a67      	ldr	r2, [pc, #412]	@ (8002350 <esp_event+0x2b0>)
 80021b2:	6013      	str	r3, [r2, #0]
	  fanControl(fanSpeed);
 80021b4:	4b66      	ldr	r3, [pc, #408]	@ (8002350 <esp_event+0x2b0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 f925 	bl	8002408 <fanControl>
	  sprintf(sendBuf, "[%s]%s@%d\n", pArray[0], pArray[1], fanSpeed);
 80021be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80021c2:	4b63      	ldr	r3, [pc, #396]	@ (8002350 <esp_event+0x2b0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f107 000c 	add.w	r0, r7, #12
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	460b      	mov	r3, r1
 80021ce:	4964      	ldr	r1, [pc, #400]	@ (8002360 <esp_event+0x2c0>)
 80021d0:	f004 fe2c 	bl	8006e2c <siprintf>
 80021d4:	e099      	b.n	800230a <esp_event+0x26a>
  }
  else if(!strcmp(pArray[1], "DHTSTATE"))	//온습도 보내기
 80021d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021d8:	4962      	ldr	r1, [pc, #392]	@ (8002364 <esp_event+0x2c4>)
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe f800 	bl	80001e0 <strcmp>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10d      	bne.n	8002202 <esp_event+0x162>
  {
	  sprintf(sendBuf, "[%s]%s@%s@%d\n", pArray[0], pArray[1], temp, humi);
 80021e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021e8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80021ea:	4b55      	ldr	r3, [pc, #340]	@ (8002340 <esp_event+0x2a0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f107 000c 	add.w	r0, r7, #12
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	4b57      	ldr	r3, [pc, #348]	@ (8002354 <esp_event+0x2b4>)
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	460b      	mov	r3, r1
 80021fa:	495b      	ldr	r1, [pc, #364]	@ (8002368 <esp_event+0x2c8>)
 80021fc:	f004 fe16 	bl	8006e2c <siprintf>
 8002200:	e083      	b.n	800230a <esp_event+0x26a>
  }
  else if(!strcmp(pArray[1], "LED"))	//[매장명]LED@pArray[2]or[State]@
 8002202:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002204:	4959      	ldr	r1, [pc, #356]	@ (800236c <esp_event+0x2cc>)
 8002206:	4618      	mov	r0, r3
 8002208:	f7fd ffea 	bl	80001e0 <strcmp>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d12e      	bne.n	8002270 <esp_event+0x1d0>
  {
	  if(!strcmp(pArray[2], "STATE"))
 8002212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002214:	4949      	ldr	r1, [pc, #292]	@ (800233c <esp_event+0x29c>)
 8002216:	4618      	mov	r0, r3
 8002218:	f7fd ffe2 	bl	80001e0 <strcmp>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10e      	bne.n	8002240 <esp_event+0x1a0>
	  {
		  sprintf(sendBuf, "[%s]%s@%s@%d\n", pArray[0], pArray[1], pArray[2], ledState);
 8002222:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002224:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8002226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002228:	4a46      	ldr	r2, [pc, #280]	@ (8002344 <esp_event+0x2a4>)
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	f107 000c 	add.w	r0, r7, #12
 8002230:	9201      	str	r2, [sp, #4]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	4623      	mov	r3, r4
 8002236:	460a      	mov	r2, r1
 8002238:	494b      	ldr	r1, [pc, #300]	@ (8002368 <esp_event+0x2c8>)
 800223a:	f004 fdf7 	bl	8006e2c <siprintf>
 800223e:	e064      	b.n	800230a <esp_event+0x26a>
	  }
	  else
	  {
		  ledControl(atoi(pArray[2]));
 8002240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002242:	4618      	mov	r0, r3
 8002244:	f003 ffda 	bl	80061fc <atoi>
 8002248:	4603      	mov	r3, r0
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f8f6 	bl	800243c <ledControl>
		  sprintf(sendBuf, "[%s]%s@%d\n", pArray[0], pArray[1], atoi(pArray[2]));
 8002250:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8002252:	6d3d      	ldr	r5, [r7, #80]	@ 0x50
 8002254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002256:	4618      	mov	r0, r3
 8002258:	f003 ffd0 	bl	80061fc <atoi>
 800225c:	4603      	mov	r3, r0
 800225e:	f107 000c 	add.w	r0, r7, #12
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	462b      	mov	r3, r5
 8002266:	4622      	mov	r2, r4
 8002268:	493d      	ldr	r1, [pc, #244]	@ (8002360 <esp_event+0x2c0>)
 800226a:	f004 fddf 	bl	8006e2c <siprintf>
 800226e:	e04c      	b.n	800230a <esp_event+0x26a>
	  }
  }
  else if (!strcmp(pArray[1], "SERVO"))
 8002270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002272:	493f      	ldr	r1, [pc, #252]	@ (8002370 <esp_event+0x2d0>)
 8002274:	4618      	mov	r0, r3
 8002276:	f7fd ffb3 	bl	80001e0 <strcmp>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d12f      	bne.n	80022e0 <esp_event+0x240>
  {
	  if (!strcmp(pArray[2], "ON"))
 8002280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002282:	492c      	ldr	r1, [pc, #176]	@ (8002334 <esp_event+0x294>)
 8002284:	4618      	mov	r0, r3
 8002286:	f7fd ffab 	bl	80001e0 <strcmp>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10f      	bne.n	80022b0 <esp_event+0x210>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2500-1);
 8002290:	4b38      	ldr	r3, [pc, #224]	@ (8002374 <esp_event+0x2d4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8002298:	635a      	str	r2, [r3, #52]	@ 0x34
		  sprintf(sendBuf, "[%s]%s@%s\n", pArray[0], pArray[1], pArray[2]);
 800229a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800229c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800229e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022a0:	f107 000c 	add.w	r0, r7, #12
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	460b      	mov	r3, r1
 80022a8:	4933      	ldr	r1, [pc, #204]	@ (8002378 <esp_event+0x2d8>)
 80022aa:	f004 fdbf 	bl	8006e2c <siprintf>
 80022ae:	e02c      	b.n	800230a <esp_event+0x26a>
	  }
	  else if(!strcmp(pArray[2], "OFF"))
 80022b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022b2:	4921      	ldr	r1, [pc, #132]	@ (8002338 <esp_event+0x298>)
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fd ff93 	bl	80001e0 <strcmp>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d124      	bne.n	800230a <esp_event+0x26a>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500-1);
 80022c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002374 <esp_event+0x2d4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f240 52db 	movw	r2, #1499	@ 0x5db
 80022c8:	635a      	str	r2, [r3, #52]	@ 0x34
		  sprintf(sendBuf, "[%s]%s@%s\n", pArray[0], pArray[1], pArray[2]);
 80022ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80022ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d0:	f107 000c 	add.w	r0, r7, #12
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	460b      	mov	r3, r1
 80022d8:	4927      	ldr	r1, [pc, #156]	@ (8002378 <esp_event+0x2d8>)
 80022da:	f004 fda7 	bl	8006e2c <siprintf>
 80022de:	e014      	b.n	800230a <esp_event+0x26a>
	  }
  }
  else if(!strncmp(pArray[1]," New conn",8))
 80022e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022e2:	2208      	movs	r2, #8
 80022e4:	4925      	ldr	r1, [pc, #148]	@ (800237c <esp_event+0x2dc>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f004 feaf 	bl	800704a <strncmp>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d011      	beq.n	8002316 <esp_event+0x276>
  {
//	   printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
     return;
  }
  else if(!strncmp(pArray[1]," Already log",8))
 80022f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022f4:	2208      	movs	r2, #8
 80022f6:	4922      	ldr	r1, [pc, #136]	@ (8002380 <esp_event+0x2e0>)
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 fea6 	bl	800704a <strncmp>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10a      	bne.n	800231a <esp_event+0x27a>
  {
// 	    printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
	  esp_client_conn();
 8002304:	f7ff f884 	bl	8001410 <esp_client_conn>
      return;
 8002308:	e008      	b.n	800231c <esp_event+0x27c>
  }
  else
      return;

  esp_send_data(sendBuf);
 800230a:	f107 030c 	add.w	r3, r7, #12
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff f9a6 	bl	8001660 <esp_send_data>
 8002314:	e002      	b.n	800231c <esp_event+0x27c>
     return;
 8002316:	bf00      	nop
 8002318:	e000      	b.n	800231c <esp_event+0x27c>
      return;
 800231a:	bf00      	nop
//  printf("Debug send : %s\r\n",sendBuf);
}
 800231c:	376c      	adds	r7, #108	@ 0x6c
 800231e:	46bd      	mov	sp, r7
 8002320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002322:	bf00      	nop
 8002324:	20000c64 	.word	0x20000c64
 8002328:	080094f8 	.word	0x080094f8
 800232c:	0800950c 	.word	0x0800950c
 8002330:	08009510 	.word	0x08009510
 8002334:	08009518 	.word	0x08009518
 8002338:	0800951c 	.word	0x0800951c
 800233c:	08009520 	.word	0x08009520
 8002340:	20000c40 	.word	0x20000c40
 8002344:	20000c54 	.word	0x20000c54
 8002348:	20000c5c 	.word	0x20000c5c
 800234c:	20000c50 	.word	0x20000c50
 8002350:	20000c58 	.word	0x20000c58
 8002354:	20000c44 	.word	0x20000c44
 8002358:	08009528 	.word	0x08009528
 800235c:	08009544 	.word	0x08009544
 8002360:	08009548 	.word	0x08009548
 8002364:	08009554 	.word	0x08009554
 8002368:	08009560 	.word	0x08009560
 800236c:	08009570 	.word	0x08009570
 8002370:	08009574 	.word	0x08009574
 8002374:	20000ad4 	.word	0x20000ad4
 8002378:	0800957c 	.word	0x0800957c
 800237c:	08009588 	.word	0x08009588
 8002380:	08009594 	.word	0x08009594

08002384 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		//1ms 마다 호출
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 800238c:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	3301      	adds	r3, #1
 8002392:	4a0c      	ldr	r2, [pc, #48]	@ (80023c4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002394:	6013      	str	r3, [r2, #0]
	if(tim3Cnt >= 1000) //1ms * 1000 = 1Sec
 8002396:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800239e:	db0a      	blt.n	80023b6 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 80023a0:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 80023a6:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3301      	adds	r3, #1
 80023ac:	4a07      	ldr	r2, [pc, #28]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023ae:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 80023b0:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
	}
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000ca4 	.word	0x20000ca4
 80023c8:	20000000 	.word	0x20000000
 80023cc:	20000c3c 	.word	0x20000c3c

080023d0 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	69b9      	ldr	r1, [r7, #24]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	1a8a      	subs	r2, r1, r2
 80023ea:	fb03 f202 	mul.w	r2, r3, r2
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	1acb      	subs	r3, r1, r3
 80023f4:	fb92 f2f3 	sdiv	r2, r2, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	4413      	add	r3, r2
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <fanControl>:

void fanControl(int fanSpeed)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	if (!fanFlag)	//플래그들은 0일 때만 동작을 의미함.
 8002410:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <fanControl+0x2c>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	f083 0301 	eor.w	r3, r3, #1
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <fanControl+0x1e>
	{
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1, fanSpeed);
 800241e:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <fanControl+0x30>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000c5d 	.word	0x20000c5d
 8002438:	20000b64 	.word	0x20000b64

0800243c <ledControl>:

void ledControl(int bright)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af02      	add	r7, sp, #8
 8002442:	6078      	str	r0, [r7, #4]
	ledState = bright;	//전역변수에 저장
 8002444:	4a0a      	ldr	r2, [pc, #40]	@ (8002470 <ledControl+0x34>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6013      	str	r3, [r2, #0]
	int realLedState = map(bright, 0, 100, 0, 1000);	//써지는 실제값
 800244a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2300      	movs	r3, #0
 8002452:	2264      	movs	r2, #100	@ 0x64
 8002454:	2100      	movs	r1, #0
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ffba 	bl	80023d0 <map>
 800245c:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1, realLedState);
 800245e:	4b05      	ldr	r3, [pc, #20]	@ (8002474 <ledControl+0x38>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000c54 	.word	0x20000c54
 8002474:	20000a8c 	.word	0x20000a8c

08002478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800247c:	b672      	cpsid	i
}
 800247e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002480:	bf00      	nop
 8002482:	e7fd      	b.n	8002480 <Error_Handler+0x8>

08002484 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <HAL_MspInit+0x4c>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002492:	4a0f      	ldr	r2, [pc, #60]	@ (80024d0 <HAL_MspInit+0x4c>)
 8002494:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002498:	6453      	str	r3, [r2, #68]	@ 0x44
 800249a:	4b0d      	ldr	r3, [pc, #52]	@ (80024d0 <HAL_MspInit+0x4c>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024a2:	607b      	str	r3, [r7, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	603b      	str	r3, [r7, #0]
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <HAL_MspInit+0x4c>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	4a08      	ldr	r2, [pc, #32]	@ (80024d0 <HAL_MspInit+0x4c>)
 80024b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_MspInit+0x4c>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024c2:	2007      	movs	r0, #7
 80024c4:	f000 ff48 	bl	8003358 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40023800 	.word	0x40023800

080024d4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	@ 0x28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a17      	ldr	r2, [pc, #92]	@ (8002550 <HAL_ADC_MspInit+0x7c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d127      	bne.n	8002546 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	4b16      	ldr	r3, [pc, #88]	@ (8002554 <HAL_ADC_MspInit+0x80>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	4a15      	ldr	r2, [pc, #84]	@ (8002554 <HAL_ADC_MspInit+0x80>)
 8002500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002504:	6453      	str	r3, [r2, #68]	@ 0x44
 8002506:	4b13      	ldr	r3, [pc, #76]	@ (8002554 <HAL_ADC_MspInit+0x80>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	4b0f      	ldr	r3, [pc, #60]	@ (8002554 <HAL_ADC_MspInit+0x80>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	4a0e      	ldr	r2, [pc, #56]	@ (8002554 <HAL_ADC_MspInit+0x80>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6313      	str	r3, [r2, #48]	@ 0x30
 8002522:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <HAL_ADC_MspInit+0x80>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800252e:	2303      	movs	r3, #3
 8002530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002532:	2303      	movs	r3, #3
 8002534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253a:	f107 0314 	add.w	r3, r7, #20
 800253e:	4619      	mov	r1, r3
 8002540:	4805      	ldr	r0, [pc, #20]	@ (8002558 <HAL_ADC_MspInit+0x84>)
 8002542:	f000 ffdd 	bl	8003500 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002546:	bf00      	nop
 8002548:	3728      	adds	r7, #40	@ 0x28
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40012000 	.word	0x40012000
 8002554:	40023800 	.word	0x40023800
 8002558:	40020000 	.word	0x40020000

0800255c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a34      	ldr	r2, [pc, #208]	@ (800263c <HAL_TIM_Base_MspInit+0xe0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d10e      	bne.n	800258c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	4b33      	ldr	r3, [pc, #204]	@ (8002640 <HAL_TIM_Base_MspInit+0xe4>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	4a32      	ldr	r2, [pc, #200]	@ (8002640 <HAL_TIM_Base_MspInit+0xe4>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6453      	str	r3, [r2, #68]	@ 0x44
 800257e:	4b30      	ldr	r3, [pc, #192]	@ (8002640 <HAL_TIM_Base_MspInit+0xe4>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800258a:	e052      	b.n	8002632 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002594:	d116      	bne.n	80025c4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	4b29      	ldr	r3, [pc, #164]	@ (8002640 <HAL_TIM_Base_MspInit+0xe4>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	4a28      	ldr	r2, [pc, #160]	@ (8002640 <HAL_TIM_Base_MspInit+0xe4>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a6:	4b26      	ldr	r3, [pc, #152]	@ (8002640 <HAL_TIM_Base_MspInit+0xe4>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	201c      	movs	r0, #28
 80025b8:	f000 fed9 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025bc:	201c      	movs	r0, #28
 80025be:	f000 fef2 	bl	80033a6 <HAL_NVIC_EnableIRQ>
}
 80025c2:	e036      	b.n	8002632 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002644 <HAL_TIM_Base_MspInit+0xe8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d116      	bne.n	80025fc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002640 <HAL_TIM_Base_MspInit+0xe4>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002640 <HAL_TIM_Base_MspInit+0xe4>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025de:	4b18      	ldr	r3, [pc, #96]	@ (8002640 <HAL_TIM_Base_MspInit+0xe4>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	201d      	movs	r0, #29
 80025f0:	f000 febd 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025f4:	201d      	movs	r0, #29
 80025f6:	f000 fed6 	bl	80033a6 <HAL_NVIC_EnableIRQ>
}
 80025fa:	e01a      	b.n	8002632 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a11      	ldr	r2, [pc, #68]	@ (8002648 <HAL_TIM_Base_MspInit+0xec>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d115      	bne.n	8002632 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	4b0d      	ldr	r3, [pc, #52]	@ (8002640 <HAL_TIM_Base_MspInit+0xe4>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	4a0c      	ldr	r2, [pc, #48]	@ (8002640 <HAL_TIM_Base_MspInit+0xe4>)
 8002610:	f043 0304 	orr.w	r3, r3, #4
 8002614:	6413      	str	r3, [r2, #64]	@ 0x40
 8002616:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <HAL_TIM_Base_MspInit+0xe4>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	201e      	movs	r0, #30
 8002628:	f000 fea1 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800262c:	201e      	movs	r0, #30
 800262e:	f000 feba 	bl	80033a6 <HAL_NVIC_EnableIRQ>
}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40010000 	.word	0x40010000
 8002640:	40023800 	.word	0x40023800
 8002644:	40000400 	.word	0x40000400
 8002648:	40000800 	.word	0x40000800

0800264c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	@ 0x30
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 031c 	add.w	r3, r7, #28
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a49      	ldr	r2, [pc, #292]	@ (8002790 <HAL_TIM_MspPostInit+0x144>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d11f      	bne.n	80026ae <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	4b48      	ldr	r3, [pc, #288]	@ (8002794 <HAL_TIM_MspPostInit+0x148>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	4a47      	ldr	r2, [pc, #284]	@ (8002794 <HAL_TIM_MspPostInit+0x148>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6313      	str	r3, [r2, #48]	@ 0x30
 800267e:	4b45      	ldr	r3, [pc, #276]	@ (8002794 <HAL_TIM_MspPostInit+0x148>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800268a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800268e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002698:	2300      	movs	r3, #0
 800269a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800269c:	2301      	movs	r3, #1
 800269e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a0:	f107 031c 	add.w	r3, r7, #28
 80026a4:	4619      	mov	r1, r3
 80026a6:	483c      	ldr	r0, [pc, #240]	@ (8002798 <HAL_TIM_MspPostInit+0x14c>)
 80026a8:	f000 ff2a 	bl	8003500 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80026ac:	e06b      	b.n	8002786 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026b6:	d11f      	bne.n	80026f8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	4b35      	ldr	r3, [pc, #212]	@ (8002794 <HAL_TIM_MspPostInit+0x148>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c0:	4a34      	ldr	r2, [pc, #208]	@ (8002794 <HAL_TIM_MspPostInit+0x148>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c8:	4b32      	ldr	r3, [pc, #200]	@ (8002794 <HAL_TIM_MspPostInit+0x148>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SERVO_Pin;
 80026d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e2:	2300      	movs	r3, #0
 80026e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026e6:	2301      	movs	r3, #1
 80026e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 80026ea:	f107 031c 	add.w	r3, r7, #28
 80026ee:	4619      	mov	r1, r3
 80026f0:	4829      	ldr	r0, [pc, #164]	@ (8002798 <HAL_TIM_MspPostInit+0x14c>)
 80026f2:	f000 ff05 	bl	8003500 <HAL_GPIO_Init>
}
 80026f6:	e046      	b.n	8002786 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a27      	ldr	r2, [pc, #156]	@ (800279c <HAL_TIM_MspPostInit+0x150>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d11e      	bne.n	8002740 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	4b23      	ldr	r3, [pc, #140]	@ (8002794 <HAL_TIM_MspPostInit+0x148>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	4a22      	ldr	r2, [pc, #136]	@ (8002794 <HAL_TIM_MspPostInit+0x148>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6313      	str	r3, [r2, #48]	@ 0x30
 8002712:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <HAL_TIM_MspPostInit+0x148>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800271e:	2340      	movs	r3, #64	@ 0x40
 8002720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272a:	2300      	movs	r3, #0
 800272c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800272e:	2302      	movs	r3, #2
 8002730:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002732:	f107 031c 	add.w	r3, r7, #28
 8002736:	4619      	mov	r1, r3
 8002738:	4817      	ldr	r0, [pc, #92]	@ (8002798 <HAL_TIM_MspPostInit+0x14c>)
 800273a:	f000 fee1 	bl	8003500 <HAL_GPIO_Init>
}
 800273e:	e022      	b.n	8002786 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a16      	ldr	r2, [pc, #88]	@ (80027a0 <HAL_TIM_MspPostInit+0x154>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d11d      	bne.n	8002786 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <HAL_TIM_MspPostInit+0x148>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	4a10      	ldr	r2, [pc, #64]	@ (8002794 <HAL_TIM_MspPostInit+0x148>)
 8002754:	f043 0302 	orr.w	r3, r3, #2
 8002758:	6313      	str	r3, [r2, #48]	@ 0x30
 800275a:	4b0e      	ldr	r3, [pc, #56]	@ (8002794 <HAL_TIM_MspPostInit+0x148>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_fanMotor_Pin;
 8002766:	2340      	movs	r3, #64	@ 0x40
 8002768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	2300      	movs	r3, #0
 8002774:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002776:	2302      	movs	r3, #2
 8002778:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM4_fanMotor_GPIO_Port, &GPIO_InitStruct);
 800277a:	f107 031c 	add.w	r3, r7, #28
 800277e:	4619      	mov	r1, r3
 8002780:	4808      	ldr	r0, [pc, #32]	@ (80027a4 <HAL_TIM_MspPostInit+0x158>)
 8002782:	f000 febd 	bl	8003500 <HAL_GPIO_Init>
}
 8002786:	bf00      	nop
 8002788:	3730      	adds	r7, #48	@ 0x30
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40010000 	.word	0x40010000
 8002794:	40023800 	.word	0x40023800
 8002798:	40020000 	.word	0x40020000
 800279c:	40000400 	.word	0x40000400
 80027a0:	40000800 	.word	0x40000800
 80027a4:	40020400 	.word	0x40020400

080027a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08c      	sub	sp, #48	@ 0x30
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a3a      	ldr	r2, [pc, #232]	@ (80028b0 <HAL_UART_MspInit+0x108>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d134      	bne.n	8002834 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	4b39      	ldr	r3, [pc, #228]	@ (80028b4 <HAL_UART_MspInit+0x10c>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	4a38      	ldr	r2, [pc, #224]	@ (80028b4 <HAL_UART_MspInit+0x10c>)
 80027d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027da:	4b36      	ldr	r3, [pc, #216]	@ (80028b4 <HAL_UART_MspInit+0x10c>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e2:	61bb      	str	r3, [r7, #24]
 80027e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	4b32      	ldr	r3, [pc, #200]	@ (80028b4 <HAL_UART_MspInit+0x10c>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	4a31      	ldr	r2, [pc, #196]	@ (80028b4 <HAL_UART_MspInit+0x10c>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f6:	4b2f      	ldr	r3, [pc, #188]	@ (80028b4 <HAL_UART_MspInit+0x10c>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002802:	230c      	movs	r3, #12
 8002804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	2302      	movs	r3, #2
 8002808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280e:	2303      	movs	r3, #3
 8002810:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002812:	2307      	movs	r3, #7
 8002814:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002816:	f107 031c 	add.w	r3, r7, #28
 800281a:	4619      	mov	r1, r3
 800281c:	4826      	ldr	r0, [pc, #152]	@ (80028b8 <HAL_UART_MspInit+0x110>)
 800281e:	f000 fe6f 	bl	8003500 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2100      	movs	r1, #0
 8002826:	2026      	movs	r0, #38	@ 0x26
 8002828:	f000 fda1 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800282c:	2026      	movs	r0, #38	@ 0x26
 800282e:	f000 fdba 	bl	80033a6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002832:	e038      	b.n	80028a6 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a20      	ldr	r2, [pc, #128]	@ (80028bc <HAL_UART_MspInit+0x114>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d133      	bne.n	80028a6 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	4b1c      	ldr	r3, [pc, #112]	@ (80028b4 <HAL_UART_MspInit+0x10c>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002846:	4a1b      	ldr	r2, [pc, #108]	@ (80028b4 <HAL_UART_MspInit+0x10c>)
 8002848:	f043 0320 	orr.w	r3, r3, #32
 800284c:	6453      	str	r3, [r2, #68]	@ 0x44
 800284e:	4b19      	ldr	r3, [pc, #100]	@ (80028b4 <HAL_UART_MspInit+0x10c>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4b15      	ldr	r3, [pc, #84]	@ (80028b4 <HAL_UART_MspInit+0x10c>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	4a14      	ldr	r2, [pc, #80]	@ (80028b4 <HAL_UART_MspInit+0x10c>)
 8002864:	f043 0304 	orr.w	r3, r3, #4
 8002868:	6313      	str	r3, [r2, #48]	@ 0x30
 800286a:	4b12      	ldr	r3, [pc, #72]	@ (80028b4 <HAL_UART_MspInit+0x10c>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_bluetooh_Pin|RX_bluetooh_Pin;
 8002876:	23c0      	movs	r3, #192	@ 0xc0
 8002878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002882:	2303      	movs	r3, #3
 8002884:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002886:	2308      	movs	r3, #8
 8002888:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288a:	f107 031c 	add.w	r3, r7, #28
 800288e:	4619      	mov	r1, r3
 8002890:	480b      	ldr	r0, [pc, #44]	@ (80028c0 <HAL_UART_MspInit+0x118>)
 8002892:	f000 fe35 	bl	8003500 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	2047      	movs	r0, #71	@ 0x47
 800289c:	f000 fd67 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80028a0:	2047      	movs	r0, #71	@ 0x47
 80028a2:	f000 fd80 	bl	80033a6 <HAL_NVIC_EnableIRQ>
}
 80028a6:	bf00      	nop
 80028a8:	3730      	adds	r7, #48	@ 0x30
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40004400 	.word	0x40004400
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40020000 	.word	0x40020000
 80028bc:	40011400 	.word	0x40011400
 80028c0:	40020800 	.word	0x40020800

080028c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <NMI_Handler+0x4>

080028cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <HardFault_Handler+0x4>

080028d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <MemManage_Handler+0x4>

080028dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <BusFault_Handler+0x4>

080028e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <UsageFault_Handler+0x4>

080028ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800291a:	f000 f997 	bl	8002c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}

08002922 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC0_EXTI0_BUTTON_Pin);
 8002926:	2001      	movs	r0, #1
 8002928:	f000 ffa0 	bl	800386c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}

08002930 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002934:	4802      	ldr	r0, [pc, #8]	@ (8002940 <TIM2_IRQHandler+0x10>)
 8002936:	f001 fdad 	bl	8004494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000ad4 	.word	0x20000ad4

08002944 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002948:	4802      	ldr	r0, [pc, #8]	@ (8002954 <TIM3_IRQHandler+0x10>)
 800294a:	f001 fda3 	bl	8004494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000b1c 	.word	0x20000b1c

08002958 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800295c:	4802      	ldr	r0, [pc, #8]	@ (8002968 <TIM4_IRQHandler+0x10>)
 800295e:	f001 fd99 	bl	8004494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000b64 	.word	0x20000b64

0800296c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002970:	4802      	ldr	r0, [pc, #8]	@ (800297c <USART2_IRQHandler+0x10>)
 8002972:	f002 fcd7 	bl	8005324 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000bac 	.word	0x20000bac

08002980 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002984:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002988:	f000 ff70 	bl	800386c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}

08002990 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002994:	4802      	ldr	r0, [pc, #8]	@ (80029a0 <USART6_IRQHandler+0x10>)
 8002996:	f002 fcc5 	bl	8005324 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000bf4 	.word	0x20000bf4

080029a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return 1;
 80029a8:	2301      	movs	r3, #1
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <_kill>:

int _kill(int pid, int sig)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029be:	f004 fc13 	bl	80071e8 <__errno>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2216      	movs	r2, #22
 80029c6:	601a      	str	r2, [r3, #0]
  return -1;
 80029c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_exit>:

void _exit (int status)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029dc:	f04f 31ff 	mov.w	r1, #4294967295
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ffe7 	bl	80029b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029e6:	bf00      	nop
 80029e8:	e7fd      	b.n	80029e6 <_exit+0x12>

080029ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	e00a      	b.n	8002a12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029fc:	f3af 8000 	nop.w
 8002a00:	4601      	mov	r1, r0
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	60ba      	str	r2, [r7, #8]
 8002a08:	b2ca      	uxtb	r2, r1
 8002a0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	dbf0      	blt.n	80029fc <_read+0x12>
  }

  return len;
 8002a1a:	687b      	ldr	r3, [r7, #4]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	e009      	b.n	8002a4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	60ba      	str	r2, [r7, #8]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fe50 	bl	80016e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	3301      	adds	r3, #1
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	dbf1      	blt.n	8002a36 <_write+0x12>
  }
  return len;
 8002a52:	687b      	ldr	r3, [r7, #4]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <_close>:

int _close(int file)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a84:	605a      	str	r2, [r3, #4]
  return 0;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <_isatty>:

int _isatty(int file)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a9c:	2301      	movs	r3, #1
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002acc:	4a14      	ldr	r2, [pc, #80]	@ (8002b20 <_sbrk+0x5c>)
 8002ace:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <_sbrk+0x60>)
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ad8:	4b13      	ldr	r3, [pc, #76]	@ (8002b28 <_sbrk+0x64>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ae0:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <_sbrk+0x64>)
 8002ae2:	4a12      	ldr	r2, [pc, #72]	@ (8002b2c <_sbrk+0x68>)
 8002ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ae6:	4b10      	ldr	r3, [pc, #64]	@ (8002b28 <_sbrk+0x64>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d207      	bcs.n	8002b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002af4:	f004 fb78 	bl	80071e8 <__errno>
 8002af8:	4603      	mov	r3, r0
 8002afa:	220c      	movs	r2, #12
 8002afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
 8002b02:	e009      	b.n	8002b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b04:	4b08      	ldr	r3, [pc, #32]	@ (8002b28 <_sbrk+0x64>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b0a:	4b07      	ldr	r3, [pc, #28]	@ (8002b28 <_sbrk+0x64>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	4a05      	ldr	r2, [pc, #20]	@ (8002b28 <_sbrk+0x64>)
 8002b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b16:	68fb      	ldr	r3, [r7, #12]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20020000 	.word	0x20020000
 8002b24:	00000400 	.word	0x00000400
 8002b28:	20000ca8 	.word	0x20000ca8
 8002b2c:	20000e00 	.word	0x20000e00

08002b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b34:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <SystemInit+0x20>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3a:	4a05      	ldr	r2, [pc, #20]	@ (8002b50 <SystemInit+0x20>)
 8002b3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8002b54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b58:	f7ff ffea 	bl	8002b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b5c:	480c      	ldr	r0, [pc, #48]	@ (8002b90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b5e:	490d      	ldr	r1, [pc, #52]	@ (8002b94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b60:	4a0d      	ldr	r2, [pc, #52]	@ (8002b98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b64:	e002      	b.n	8002b6c <LoopCopyDataInit>

08002b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b6a:	3304      	adds	r3, #4

08002b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b70:	d3f9      	bcc.n	8002b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b72:	4a0a      	ldr	r2, [pc, #40]	@ (8002b9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b74:	4c0a      	ldr	r4, [pc, #40]	@ (8002ba0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b78:	e001      	b.n	8002b7e <LoopFillZerobss>

08002b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b7c:	3204      	adds	r2, #4

08002b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b80:	d3fb      	bcc.n	8002b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b82:	f004 fb37 	bl	80071f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b86:	f7fe fdc5 	bl	8001714 <main>
  bx  lr    
 8002b8a:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8002b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b94:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002b98:	080099c0 	.word	0x080099c0
  ldr r2, =_sbss
 8002b9c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002ba0:	20000dfc 	.word	0x20000dfc

08002ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ba4:	e7fe      	b.n	8002ba4 <ADC_IRQHandler>
	...

08002ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bac:	4b0e      	ldr	r3, [pc, #56]	@ (8002be8 <HAL_Init+0x40>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002be8 <HAL_Init+0x40>)
 8002bb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <HAL_Init+0x40>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8002be8 <HAL_Init+0x40>)
 8002bbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bc4:	4b08      	ldr	r3, [pc, #32]	@ (8002be8 <HAL_Init+0x40>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a07      	ldr	r2, [pc, #28]	@ (8002be8 <HAL_Init+0x40>)
 8002bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd0:	2003      	movs	r0, #3
 8002bd2:	f000 fbc1 	bl	8003358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f000 f808 	bl	8002bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bdc:	f7ff fc52 	bl	8002484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40023c00 	.word	0x40023c00

08002bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bf4:	4b12      	ldr	r3, [pc, #72]	@ (8002c40 <HAL_InitTick+0x54>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <HAL_InitTick+0x58>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fbd9 	bl	80033c2 <HAL_SYSTICK_Config>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e00e      	b.n	8002c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b0f      	cmp	r3, #15
 8002c1e:	d80a      	bhi.n	8002c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c20:	2200      	movs	r2, #0
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295
 8002c28:	f000 fba1 	bl	800336e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c2c:	4a06      	ldr	r2, [pc, #24]	@ (8002c48 <HAL_InitTick+0x5c>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e000      	b.n	8002c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000004 	.word	0x20000004
 8002c44:	2000000c 	.word	0x2000000c
 8002c48:	20000008 	.word	0x20000008

08002c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c50:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <HAL_IncTick+0x20>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <HAL_IncTick+0x24>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	4a04      	ldr	r2, [pc, #16]	@ (8002c70 <HAL_IncTick+0x24>)
 8002c5e:	6013      	str	r3, [r2, #0]
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	2000000c 	.word	0x2000000c
 8002c70:	20000cac 	.word	0x20000cac

08002c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return uwTick;
 8002c78:	4b03      	ldr	r3, [pc, #12]	@ (8002c88 <HAL_GetTick+0x14>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	20000cac 	.word	0x20000cac

08002c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c94:	f7ff ffee 	bl	8002c74 <HAL_GetTick>
 8002c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca4:	d005      	beq.n	8002cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd0 <HAL_Delay+0x44>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4413      	add	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cb2:	bf00      	nop
 8002cb4:	f7ff ffde 	bl	8002c74 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d8f7      	bhi.n	8002cb4 <HAL_Delay+0x28>
  {
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	2000000c 	.word	0x2000000c

08002cd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e033      	b.n	8002d52 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d109      	bne.n	8002d06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff fbee 	bl	80024d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d118      	bne.n	8002d44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d1a:	f023 0302 	bic.w	r3, r3, #2
 8002d1e:	f043 0202 	orr.w	r2, r3, #2
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f94a 	bl	8002fc0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	f023 0303 	bic.w	r3, r3, #3
 8002d3a:	f043 0201 	orr.w	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d42:	e001      	b.n	8002d48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x1c>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e113      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x244>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b09      	cmp	r3, #9
 8002d86:	d925      	bls.n	8002dd4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68d9      	ldr	r1, [r3, #12]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	4613      	mov	r3, r2
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3b1e      	subs	r3, #30
 8002d9e:	2207      	movs	r2, #7
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43da      	mvns	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	400a      	ands	r2, r1
 8002dac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68d9      	ldr	r1, [r3, #12]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4403      	add	r3, r0
 8002dc6:	3b1e      	subs	r3, #30
 8002dc8:	409a      	lsls	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	e022      	b.n	8002e1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6919      	ldr	r1, [r3, #16]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	2207      	movs	r2, #7
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	400a      	ands	r2, r1
 8002df6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6919      	ldr	r1, [r3, #16]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	4618      	mov	r0, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4403      	add	r3, r0
 8002e10:	409a      	lsls	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d824      	bhi.n	8002e6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	3b05      	subs	r3, #5
 8002e34:	221f      	movs	r2, #31
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	400a      	ands	r2, r1
 8002e42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	4618      	mov	r0, r3
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3b05      	subs	r3, #5
 8002e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e6a:	e04c      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b0c      	cmp	r3, #12
 8002e72:	d824      	bhi.n	8002ebe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	3b23      	subs	r3, #35	@ 0x23
 8002e86:	221f      	movs	r2, #31
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43da      	mvns	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	400a      	ands	r2, r1
 8002e94:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	3b23      	subs	r3, #35	@ 0x23
 8002eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ebc:	e023      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	3b41      	subs	r3, #65	@ 0x41
 8002ed0:	221f      	movs	r2, #31
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	400a      	ands	r2, r1
 8002ede:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	4618      	mov	r0, r3
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3b41      	subs	r3, #65	@ 0x41
 8002efa:	fa00 f203 	lsl.w	r2, r0, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f06:	4b29      	ldr	r3, [pc, #164]	@ (8002fac <HAL_ADC_ConfigChannel+0x250>)
 8002f08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a28      	ldr	r2, [pc, #160]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x254>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d10f      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x1d8>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b12      	cmp	r3, #18
 8002f1a:	d10b      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x254>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d12b      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x23a>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x258>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d003      	beq.n	8002f50 <HAL_ADC_ConfigChannel+0x1f4>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b11      	cmp	r3, #17
 8002f4e:	d122      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a11      	ldr	r2, [pc, #68]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x258>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d111      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f72:	4b11      	ldr	r3, [pc, #68]	@ (8002fb8 <HAL_ADC_ConfigChannel+0x25c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a11      	ldr	r2, [pc, #68]	@ (8002fbc <HAL_ADC_ConfigChannel+0x260>)
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	0c9a      	lsrs	r2, r3, #18
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f88:	e002      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f9      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40012300 	.word	0x40012300
 8002fb0:	40012000 	.word	0x40012000
 8002fb4:	10000012 	.word	0x10000012
 8002fb8:	20000004 	.word	0x20000004
 8002fbc:	431bde83 	.word	0x431bde83

08002fc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fc8:	4b79      	ldr	r3, [pc, #484]	@ (80031b0 <ADC_Init+0x1f0>)
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ff4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	021a      	lsls	r2, r3, #8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003018:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6859      	ldr	r1, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800303a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6899      	ldr	r1, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003052:	4a58      	ldr	r2, [pc, #352]	@ (80031b4 <ADC_Init+0x1f4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d022      	beq.n	800309e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003066:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6899      	ldr	r1, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003088:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6899      	ldr	r1, [r3, #8]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	e00f      	b.n	80030be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030bc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0202 	bic.w	r2, r2, #2
 80030cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6899      	ldr	r1, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	7e1b      	ldrb	r3, [r3, #24]
 80030d8:	005a      	lsls	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01b      	beq.n	8003124 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030fa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800310a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6859      	ldr	r1, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	3b01      	subs	r3, #1
 8003118:	035a      	lsls	r2, r3, #13
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	e007      	b.n	8003134 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003132:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003142:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	3b01      	subs	r3, #1
 8003150:	051a      	lsls	r2, r3, #20
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003168:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6899      	ldr	r1, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003176:	025a      	lsls	r2, r3, #9
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800318e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6899      	ldr	r1, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	029a      	lsls	r2, r3, #10
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	609a      	str	r2, [r3, #8]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	40012300 	.word	0x40012300
 80031b4:	0f000001 	.word	0x0f000001

080031b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c8:	4b0c      	ldr	r3, [pc, #48]	@ (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031d4:	4013      	ands	r3, r2
 80031d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ea:	4a04      	ldr	r2, [pc, #16]	@ (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	60d3      	str	r3, [r2, #12]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003204:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <__NVIC_GetPriorityGrouping+0x18>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	f003 0307 	and.w	r3, r3, #7
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	2b00      	cmp	r3, #0
 800322c:	db0b      	blt.n	8003246 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	f003 021f 	and.w	r2, r3, #31
 8003234:	4907      	ldr	r1, [pc, #28]	@ (8003254 <__NVIC_EnableIRQ+0x38>)
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	2001      	movs	r0, #1
 800323e:	fa00 f202 	lsl.w	r2, r0, r2
 8003242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000e100 	.word	0xe000e100

08003258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	6039      	str	r1, [r7, #0]
 8003262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003268:	2b00      	cmp	r3, #0
 800326a:	db0a      	blt.n	8003282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	490c      	ldr	r1, [pc, #48]	@ (80032a4 <__NVIC_SetPriority+0x4c>)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	0112      	lsls	r2, r2, #4
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	440b      	add	r3, r1
 800327c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003280:	e00a      	b.n	8003298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	b2da      	uxtb	r2, r3
 8003286:	4908      	ldr	r1, [pc, #32]	@ (80032a8 <__NVIC_SetPriority+0x50>)
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	3b04      	subs	r3, #4
 8003290:	0112      	lsls	r2, r2, #4
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	440b      	add	r3, r1
 8003296:	761a      	strb	r2, [r3, #24]
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000e100 	.word	0xe000e100
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b089      	sub	sp, #36	@ 0x24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f1c3 0307 	rsb	r3, r3, #7
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	bf28      	it	cs
 80032ca:	2304      	movcs	r3, #4
 80032cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3304      	adds	r3, #4
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d902      	bls.n	80032dc <NVIC_EncodePriority+0x30>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3b03      	subs	r3, #3
 80032da:	e000      	b.n	80032de <NVIC_EncodePriority+0x32>
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e0:	f04f 32ff 	mov.w	r2, #4294967295
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43da      	mvns	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	401a      	ands	r2, r3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f4:	f04f 31ff 	mov.w	r1, #4294967295
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	fa01 f303 	lsl.w	r3, r1, r3
 80032fe:	43d9      	mvns	r1, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003304:	4313      	orrs	r3, r2
         );
}
 8003306:	4618      	mov	r0, r3
 8003308:	3724      	adds	r7, #36	@ 0x24
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3b01      	subs	r3, #1
 8003320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003324:	d301      	bcc.n	800332a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003326:	2301      	movs	r3, #1
 8003328:	e00f      	b.n	800334a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800332a:	4a0a      	ldr	r2, [pc, #40]	@ (8003354 <SysTick_Config+0x40>)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3b01      	subs	r3, #1
 8003330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003332:	210f      	movs	r1, #15
 8003334:	f04f 30ff 	mov.w	r0, #4294967295
 8003338:	f7ff ff8e 	bl	8003258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800333c:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <SysTick_Config+0x40>)
 800333e:	2200      	movs	r2, #0
 8003340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003342:	4b04      	ldr	r3, [pc, #16]	@ (8003354 <SysTick_Config+0x40>)
 8003344:	2207      	movs	r2, #7
 8003346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	e000e010 	.word	0xe000e010

08003358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ff29 	bl	80031b8 <__NVIC_SetPriorityGrouping>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800336e:	b580      	push	{r7, lr}
 8003370:	b086      	sub	sp, #24
 8003372:	af00      	add	r7, sp, #0
 8003374:	4603      	mov	r3, r0
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
 800337a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003380:	f7ff ff3e 	bl	8003200 <__NVIC_GetPriorityGrouping>
 8003384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68b9      	ldr	r1, [r7, #8]
 800338a:	6978      	ldr	r0, [r7, #20]
 800338c:	f7ff ff8e 	bl	80032ac <NVIC_EncodePriority>
 8003390:	4602      	mov	r2, r0
 8003392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff5d 	bl	8003258 <__NVIC_SetPriority>
}
 800339e:	bf00      	nop
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	4603      	mov	r3, r0
 80033ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff31 	bl	800321c <__NVIC_EnableIRQ>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff ffa2 	bl	8003314 <SysTick_Config>
 80033d0:	4603      	mov	r3, r0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033e8:	f7ff fc44 	bl	8002c74 <HAL_GetTick>
 80033ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d008      	beq.n	800340c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2280      	movs	r2, #128	@ 0x80
 80033fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e052      	b.n	80034b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0216 	bic.w	r2, r2, #22
 800341a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695a      	ldr	r2, [r3, #20]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800342a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d103      	bne.n	800343c <HAL_DMA_Abort+0x62>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003438:	2b00      	cmp	r3, #0
 800343a:	d007      	beq.n	800344c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0208 	bic.w	r2, r2, #8
 800344a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0201 	bic.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800345c:	e013      	b.n	8003486 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800345e:	f7ff fc09 	bl	8002c74 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b05      	cmp	r3, #5
 800346a:	d90c      	bls.n	8003486 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2203      	movs	r2, #3
 8003476:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e015      	b.n	80034b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e4      	bne.n	800345e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003498:	223f      	movs	r2, #63	@ 0x3f
 800349a:	409a      	lsls	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d004      	beq.n	80034d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2280      	movs	r2, #128	@ 0x80
 80034d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e00c      	b.n	80034f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2205      	movs	r2, #5
 80034dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003500:	b480      	push	{r7}
 8003502:	b089      	sub	sp, #36	@ 0x24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800350e:	2300      	movs	r3, #0
 8003510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003512:	2300      	movs	r3, #0
 8003514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
 800351a:	e159      	b.n	80037d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800351c:	2201      	movs	r2, #1
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4013      	ands	r3, r2
 800352e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	429a      	cmp	r2, r3
 8003536:	f040 8148 	bne.w	80037ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	2b01      	cmp	r3, #1
 8003544:	d005      	beq.n	8003552 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800354e:	2b02      	cmp	r3, #2
 8003550:	d130      	bne.n	80035b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	2203      	movs	r2, #3
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4013      	ands	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003588:	2201      	movs	r2, #1
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4013      	ands	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	f003 0201 	and.w	r2, r3, #1
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d017      	beq.n	80035f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	2203      	movs	r2, #3
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d123      	bne.n	8003644 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	08da      	lsrs	r2, r3, #3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3208      	adds	r2, #8
 8003604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003608:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	220f      	movs	r2, #15
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	08da      	lsrs	r2, r3, #3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3208      	adds	r2, #8
 800363e:	69b9      	ldr	r1, [r7, #24]
 8003640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	2203      	movs	r2, #3
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0203 	and.w	r2, r3, #3
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 80a2 	beq.w	80037ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	4b57      	ldr	r3, [pc, #348]	@ (80037e8 <HAL_GPIO_Init+0x2e8>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	4a56      	ldr	r2, [pc, #344]	@ (80037e8 <HAL_GPIO_Init+0x2e8>)
 8003690:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003694:	6453      	str	r3, [r2, #68]	@ 0x44
 8003696:	4b54      	ldr	r3, [pc, #336]	@ (80037e8 <HAL_GPIO_Init+0x2e8>)
 8003698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036a2:	4a52      	ldr	r2, [pc, #328]	@ (80037ec <HAL_GPIO_Init+0x2ec>)
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	089b      	lsrs	r3, r3, #2
 80036a8:	3302      	adds	r3, #2
 80036aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	220f      	movs	r2, #15
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	43db      	mvns	r3, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4013      	ands	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a49      	ldr	r2, [pc, #292]	@ (80037f0 <HAL_GPIO_Init+0x2f0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d019      	beq.n	8003702 <HAL_GPIO_Init+0x202>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a48      	ldr	r2, [pc, #288]	@ (80037f4 <HAL_GPIO_Init+0x2f4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <HAL_GPIO_Init+0x1fe>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a47      	ldr	r2, [pc, #284]	@ (80037f8 <HAL_GPIO_Init+0x2f8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00d      	beq.n	80036fa <HAL_GPIO_Init+0x1fa>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a46      	ldr	r2, [pc, #280]	@ (80037fc <HAL_GPIO_Init+0x2fc>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d007      	beq.n	80036f6 <HAL_GPIO_Init+0x1f6>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a45      	ldr	r2, [pc, #276]	@ (8003800 <HAL_GPIO_Init+0x300>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d101      	bne.n	80036f2 <HAL_GPIO_Init+0x1f2>
 80036ee:	2304      	movs	r3, #4
 80036f0:	e008      	b.n	8003704 <HAL_GPIO_Init+0x204>
 80036f2:	2307      	movs	r3, #7
 80036f4:	e006      	b.n	8003704 <HAL_GPIO_Init+0x204>
 80036f6:	2303      	movs	r3, #3
 80036f8:	e004      	b.n	8003704 <HAL_GPIO_Init+0x204>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e002      	b.n	8003704 <HAL_GPIO_Init+0x204>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <HAL_GPIO_Init+0x204>
 8003702:	2300      	movs	r3, #0
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	f002 0203 	and.w	r2, r2, #3
 800370a:	0092      	lsls	r2, r2, #2
 800370c:	4093      	lsls	r3, r2
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4313      	orrs	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003714:	4935      	ldr	r1, [pc, #212]	@ (80037ec <HAL_GPIO_Init+0x2ec>)
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	3302      	adds	r3, #2
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003722:	4b38      	ldr	r3, [pc, #224]	@ (8003804 <HAL_GPIO_Init+0x304>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003746:	4a2f      	ldr	r2, [pc, #188]	@ (8003804 <HAL_GPIO_Init+0x304>)
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800374c:	4b2d      	ldr	r3, [pc, #180]	@ (8003804 <HAL_GPIO_Init+0x304>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003770:	4a24      	ldr	r2, [pc, #144]	@ (8003804 <HAL_GPIO_Init+0x304>)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003776:	4b23      	ldr	r3, [pc, #140]	@ (8003804 <HAL_GPIO_Init+0x304>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	43db      	mvns	r3, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4013      	ands	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800379a:	4a1a      	ldr	r2, [pc, #104]	@ (8003804 <HAL_GPIO_Init+0x304>)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037a0:	4b18      	ldr	r3, [pc, #96]	@ (8003804 <HAL_GPIO_Init+0x304>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003804 <HAL_GPIO_Init+0x304>)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3301      	adds	r3, #1
 80037ce:	61fb      	str	r3, [r7, #28]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2b0f      	cmp	r3, #15
 80037d4:	f67f aea2 	bls.w	800351c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	3724      	adds	r7, #36	@ 0x24
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40013800 	.word	0x40013800
 80037f0:	40020000 	.word	0x40020000
 80037f4:	40020400 	.word	0x40020400
 80037f8:	40020800 	.word	0x40020800
 80037fc:	40020c00 	.word	0x40020c00
 8003800:	40021000 	.word	0x40021000
 8003804:	40013c00 	.word	0x40013c00

08003808 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	887b      	ldrh	r3, [r7, #2]
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003820:	2301      	movs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
 8003824:	e001      	b.n	800382a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800382a:	7bfb      	ldrb	r3, [r7, #15]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	807b      	strh	r3, [r7, #2]
 8003844:	4613      	mov	r3, r2
 8003846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003848:	787b      	ldrb	r3, [r7, #1]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800384e:	887a      	ldrh	r2, [r7, #2]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003854:	e003      	b.n	800385e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003856:	887b      	ldrh	r3, [r7, #2]
 8003858:	041a      	lsls	r2, r3, #16
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	619a      	str	r2, [r3, #24]
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003876:	4b08      	ldr	r3, [pc, #32]	@ (8003898 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	4013      	ands	r3, r2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d006      	beq.n	8003890 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003882:	4a05      	ldr	r2, [pc, #20]	@ (8003898 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f806 	bl	800389c <HAL_GPIO_EXTI_Callback>
  }
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40013c00 	.word	0x40013c00

0800389c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e267      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d075      	beq.n	80039be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038d2:	4b88      	ldr	r3, [pc, #544]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d00c      	beq.n	80038f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038de:	4b85      	ldr	r3, [pc, #532]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d112      	bne.n	8003910 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ea:	4b82      	ldr	r3, [pc, #520]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038f6:	d10b      	bne.n	8003910 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f8:	4b7e      	ldr	r3, [pc, #504]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d05b      	beq.n	80039bc <HAL_RCC_OscConfig+0x108>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d157      	bne.n	80039bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e242      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003918:	d106      	bne.n	8003928 <HAL_RCC_OscConfig+0x74>
 800391a:	4b76      	ldr	r3, [pc, #472]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a75      	ldr	r2, [pc, #468]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e01d      	b.n	8003964 <HAL_RCC_OscConfig+0xb0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0x98>
 8003932:	4b70      	ldr	r3, [pc, #448]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a6f      	ldr	r2, [pc, #444]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	4b6d      	ldr	r3, [pc, #436]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a6c      	ldr	r2, [pc, #432]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e00b      	b.n	8003964 <HAL_RCC_OscConfig+0xb0>
 800394c:	4b69      	ldr	r3, [pc, #420]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a68      	ldr	r2, [pc, #416]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	4b66      	ldr	r3, [pc, #408]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a65      	ldr	r2, [pc, #404]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 800395e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7ff f982 	bl	8002c74 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003974:	f7ff f97e 	bl	8002c74 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	@ 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e207      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	4b5b      	ldr	r3, [pc, #364]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0xc0>
 8003992:	e014      	b.n	80039be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7ff f96e 	bl	8002c74 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800399c:	f7ff f96a 	bl	8002c74 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	@ 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e1f3      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	4b51      	ldr	r3, [pc, #324]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0xe8>
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d063      	beq.n	8003a92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039ca:	4b4a      	ldr	r3, [pc, #296]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d6:	4b47      	ldr	r3, [pc, #284]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d11c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e2:	4b44      	ldr	r3, [pc, #272]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d116      	bne.n	8003a1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	4b41      	ldr	r3, [pc, #260]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_RCC_OscConfig+0x152>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e1c7      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a06:	4b3b      	ldr	r3, [pc, #236]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4937      	ldr	r1, [pc, #220]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	e03a      	b.n	8003a92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a24:	4b34      	ldr	r3, [pc, #208]	@ (8003af8 <HAL_RCC_OscConfig+0x244>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7ff f923 	bl	8002c74 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a32:	f7ff f91f 	bl	8002c74 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e1a8      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a44:	4b2b      	ldr	r3, [pc, #172]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a50:	4b28      	ldr	r3, [pc, #160]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4925      	ldr	r1, [pc, #148]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]
 8003a64:	e015      	b.n	8003a92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a66:	4b24      	ldr	r3, [pc, #144]	@ (8003af8 <HAL_RCC_OscConfig+0x244>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7ff f902 	bl	8002c74 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a74:	f7ff f8fe 	bl	8002c74 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e187      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a86:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d036      	beq.n	8003b0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa6:	4b15      	ldr	r3, [pc, #84]	@ (8003afc <HAL_RCC_OscConfig+0x248>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7ff f8e2 	bl	8002c74 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab4:	f7ff f8de 	bl	8002c74 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e167      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x200>
 8003ad2:	e01b      	b.n	8003b0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad4:	4b09      	ldr	r3, [pc, #36]	@ (8003afc <HAL_RCC_OscConfig+0x248>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ada:	f7ff f8cb 	bl	8002c74 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae0:	e00e      	b.n	8003b00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae2:	f7ff f8c7 	bl	8002c74 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d907      	bls.n	8003b00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e150      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
 8003af4:	40023800 	.word	0x40023800
 8003af8:	42470000 	.word	0x42470000
 8003afc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b00:	4b88      	ldr	r3, [pc, #544]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ea      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8097 	beq.w	8003c48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b1e:	4b81      	ldr	r3, [pc, #516]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10f      	bne.n	8003b4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	4a7c      	ldr	r2, [pc, #496]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b3a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b46:	2301      	movs	r3, #1
 8003b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4a:	4b77      	ldr	r3, [pc, #476]	@ (8003d28 <HAL_RCC_OscConfig+0x474>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d118      	bne.n	8003b88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b56:	4b74      	ldr	r3, [pc, #464]	@ (8003d28 <HAL_RCC_OscConfig+0x474>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a73      	ldr	r2, [pc, #460]	@ (8003d28 <HAL_RCC_OscConfig+0x474>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b62:	f7ff f887 	bl	8002c74 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6a:	f7ff f883 	bl	8002c74 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e10c      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	4b6a      	ldr	r3, [pc, #424]	@ (8003d28 <HAL_RCC_OscConfig+0x474>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d106      	bne.n	8003b9e <HAL_RCC_OscConfig+0x2ea>
 8003b90:	4b64      	ldr	r3, [pc, #400]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b94:	4a63      	ldr	r2, [pc, #396]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b9c:	e01c      	b.n	8003bd8 <HAL_RCC_OscConfig+0x324>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b05      	cmp	r3, #5
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x30c>
 8003ba6:	4b5f      	ldr	r3, [pc, #380]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003baa:	4a5e      	ldr	r2, [pc, #376]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bac:	f043 0304 	orr.w	r3, r3, #4
 8003bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb6:	4a5b      	ldr	r2, [pc, #364]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCC_OscConfig+0x324>
 8003bc0:	4b58      	ldr	r3, [pc, #352]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc4:	4a57      	ldr	r2, [pc, #348]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bcc:	4b55      	ldr	r3, [pc, #340]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd0:	4a54      	ldr	r2, [pc, #336]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	f023 0304 	bic.w	r3, r3, #4
 8003bd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d015      	beq.n	8003c0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be0:	f7ff f848 	bl	8002c74 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be6:	e00a      	b.n	8003bfe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be8:	f7ff f844 	bl	8002c74 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e0cb      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfe:	4b49      	ldr	r3, [pc, #292]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ee      	beq.n	8003be8 <HAL_RCC_OscConfig+0x334>
 8003c0a:	e014      	b.n	8003c36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0c:	f7ff f832 	bl	8002c74 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c14:	f7ff f82e 	bl	8002c74 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0b5      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1ee      	bne.n	8003c14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d105      	bne.n	8003c48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3c:	4b39      	ldr	r3, [pc, #228]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	4a38      	ldr	r2, [pc, #224]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80a1 	beq.w	8003d94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c52:	4b34      	ldr	r3, [pc, #208]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d05c      	beq.n	8003d18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d141      	bne.n	8003cea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c66:	4b31      	ldr	r3, [pc, #196]	@ (8003d2c <HAL_RCC_OscConfig+0x478>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6c:	f7ff f802 	bl	8002c74 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fe fffe 	bl	8002c74 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e087      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	4b27      	ldr	r3, [pc, #156]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69da      	ldr	r2, [r3, #28]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	019b      	lsls	r3, r3, #6
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	3b01      	subs	r3, #1
 8003cac:	041b      	lsls	r3, r3, #16
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	061b      	lsls	r3, r3, #24
 8003cb6:	491b      	ldr	r1, [pc, #108]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d2c <HAL_RCC_OscConfig+0x478>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc2:	f7fe ffd7 	bl	8002c74 <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cca:	f7fe ffd3 	bl	8002c74 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e05c      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cdc:	4b11      	ldr	r3, [pc, #68]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f0      	beq.n	8003cca <HAL_RCC_OscConfig+0x416>
 8003ce8:	e054      	b.n	8003d94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cea:	4b10      	ldr	r3, [pc, #64]	@ (8003d2c <HAL_RCC_OscConfig+0x478>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fe ffc0 	bl	8002c74 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf8:	f7fe ffbc 	bl	8002c74 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e045      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0a:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x444>
 8003d16:	e03d      	b.n	8003d94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d107      	bne.n	8003d30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e038      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d30:	4b1b      	ldr	r3, [pc, #108]	@ (8003da0 <HAL_RCC_OscConfig+0x4ec>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d028      	beq.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d121      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d11a      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d60:	4013      	ands	r3, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d111      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d107      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800

08003da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0cc      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003db8:	4b68      	ldr	r3, [pc, #416]	@ (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d90c      	bls.n	8003de0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b65      	ldr	r3, [pc, #404]	@ (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b63      	ldr	r3, [pc, #396]	@ (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0b8      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d020      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003df8:	4b59      	ldr	r3, [pc, #356]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	4a58      	ldr	r2, [pc, #352]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e10:	4b53      	ldr	r3, [pc, #332]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	4a52      	ldr	r2, [pc, #328]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e1c:	4b50      	ldr	r3, [pc, #320]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	494d      	ldr	r1, [pc, #308]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d044      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d107      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e42:	4b47      	ldr	r3, [pc, #284]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d119      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e07f      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d003      	beq.n	8003e62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d107      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e62:	4b3f      	ldr	r3, [pc, #252]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e06f      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e72:	4b3b      	ldr	r3, [pc, #236]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e067      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e82:	4b37      	ldr	r3, [pc, #220]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f023 0203 	bic.w	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	4934      	ldr	r1, [pc, #208]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e94:	f7fe feee 	bl	8002c74 <HAL_GetTick>
 8003e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e9c:	f7fe feea 	bl	8002c74 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e04f      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 020c 	and.w	r2, r3, #12
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d1eb      	bne.n	8003e9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec4:	4b25      	ldr	r3, [pc, #148]	@ (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d20c      	bcs.n	8003eec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed2:	4b22      	ldr	r3, [pc, #136]	@ (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b20      	ldr	r3, [pc, #128]	@ (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e032      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef8:	4b19      	ldr	r3, [pc, #100]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4916      	ldr	r1, [pc, #88]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f16:	4b12      	ldr	r3, [pc, #72]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	490e      	ldr	r1, [pc, #56]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f2a:	f000 f821 	bl	8003f70 <HAL_RCC_GetSysClockFreq>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	490a      	ldr	r1, [pc, #40]	@ (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003f3c:	5ccb      	ldrb	r3, [r1, r3]
 8003f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f42:	4a09      	ldr	r2, [pc, #36]	@ (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f46:	4b09      	ldr	r3, [pc, #36]	@ (8003f6c <HAL_RCC_ClockConfig+0x1c8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fe fe4e 	bl	8002bec <HAL_InitTick>

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40023c00 	.word	0x40023c00
 8003f60:	40023800 	.word	0x40023800
 8003f64:	080095d0 	.word	0x080095d0
 8003f68:	20000004 	.word	0x20000004
 8003f6c:	20000008 	.word	0x20000008

08003f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f74:	b094      	sub	sp, #80	@ 0x50
 8003f76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f88:	4b79      	ldr	r3, [pc, #484]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d00d      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x40>
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	f200 80e1 	bhi.w	800415c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d003      	beq.n	8003faa <HAL_RCC_GetSysClockFreq+0x3a>
 8003fa2:	e0db      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fa4:	4b73      	ldr	r3, [pc, #460]	@ (8004174 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fa8:	e0db      	b.n	8004162 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003faa:	4b73      	ldr	r3, [pc, #460]	@ (8004178 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fae:	e0d8      	b.n	8004162 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fb0:	4b6f      	ldr	r3, [pc, #444]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fba:	4b6d      	ldr	r3, [pc, #436]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d063      	beq.n	800408e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc6:	4b6a      	ldr	r3, [pc, #424]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	099b      	lsrs	r3, r3, #6
 8003fcc:	2200      	movs	r2, #0
 8003fce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fda:	2300      	movs	r3, #0
 8003fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003fe2:	4622      	mov	r2, r4
 8003fe4:	462b      	mov	r3, r5
 8003fe6:	f04f 0000 	mov.w	r0, #0
 8003fea:	f04f 0100 	mov.w	r1, #0
 8003fee:	0159      	lsls	r1, r3, #5
 8003ff0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ff4:	0150      	lsls	r0, r2, #5
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	1a51      	subs	r1, r2, r1
 8003ffe:	6139      	str	r1, [r7, #16]
 8004000:	4629      	mov	r1, r5
 8004002:	eb63 0301 	sbc.w	r3, r3, r1
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004014:	4659      	mov	r1, fp
 8004016:	018b      	lsls	r3, r1, #6
 8004018:	4651      	mov	r1, sl
 800401a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800401e:	4651      	mov	r1, sl
 8004020:	018a      	lsls	r2, r1, #6
 8004022:	4651      	mov	r1, sl
 8004024:	ebb2 0801 	subs.w	r8, r2, r1
 8004028:	4659      	mov	r1, fp
 800402a:	eb63 0901 	sbc.w	r9, r3, r1
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800403a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800403e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004042:	4690      	mov	r8, r2
 8004044:	4699      	mov	r9, r3
 8004046:	4623      	mov	r3, r4
 8004048:	eb18 0303 	adds.w	r3, r8, r3
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	462b      	mov	r3, r5
 8004050:	eb49 0303 	adc.w	r3, r9, r3
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004062:	4629      	mov	r1, r5
 8004064:	024b      	lsls	r3, r1, #9
 8004066:	4621      	mov	r1, r4
 8004068:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800406c:	4621      	mov	r1, r4
 800406e:	024a      	lsls	r2, r1, #9
 8004070:	4610      	mov	r0, r2
 8004072:	4619      	mov	r1, r3
 8004074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004076:	2200      	movs	r2, #0
 8004078:	62bb      	str	r3, [r7, #40]	@ 0x28
 800407a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800407c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004080:	f7fc fdaa 	bl	8000bd8 <__aeabi_uldivmod>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4613      	mov	r3, r2
 800408a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800408c:	e058      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800408e:	4b38      	ldr	r3, [pc, #224]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x200>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	099b      	lsrs	r3, r3, #6
 8004094:	2200      	movs	r2, #0
 8004096:	4618      	mov	r0, r3
 8004098:	4611      	mov	r1, r2
 800409a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800409e:	623b      	str	r3, [r7, #32]
 80040a0:	2300      	movs	r3, #0
 80040a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040a8:	4642      	mov	r2, r8
 80040aa:	464b      	mov	r3, r9
 80040ac:	f04f 0000 	mov.w	r0, #0
 80040b0:	f04f 0100 	mov.w	r1, #0
 80040b4:	0159      	lsls	r1, r3, #5
 80040b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ba:	0150      	lsls	r0, r2, #5
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	4641      	mov	r1, r8
 80040c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80040c6:	4649      	mov	r1, r9
 80040c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040e0:	ebb2 040a 	subs.w	r4, r2, sl
 80040e4:	eb63 050b 	sbc.w	r5, r3, fp
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	00eb      	lsls	r3, r5, #3
 80040f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040f6:	00e2      	lsls	r2, r4, #3
 80040f8:	4614      	mov	r4, r2
 80040fa:	461d      	mov	r5, r3
 80040fc:	4643      	mov	r3, r8
 80040fe:	18e3      	adds	r3, r4, r3
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	464b      	mov	r3, r9
 8004104:	eb45 0303 	adc.w	r3, r5, r3
 8004108:	607b      	str	r3, [r7, #4]
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004116:	4629      	mov	r1, r5
 8004118:	028b      	lsls	r3, r1, #10
 800411a:	4621      	mov	r1, r4
 800411c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004120:	4621      	mov	r1, r4
 8004122:	028a      	lsls	r2, r1, #10
 8004124:	4610      	mov	r0, r2
 8004126:	4619      	mov	r1, r3
 8004128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800412a:	2200      	movs	r2, #0
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	61fa      	str	r2, [r7, #28]
 8004130:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004134:	f7fc fd50 	bl	8000bd8 <__aeabi_uldivmod>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4613      	mov	r3, r2
 800413e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004140:	4b0b      	ldr	r3, [pc, #44]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x200>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	3301      	adds	r3, #1
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004150:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004154:	fbb2 f3f3 	udiv	r3, r2, r3
 8004158:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800415a:	e002      	b.n	8004162 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800415c:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <HAL_RCC_GetSysClockFreq+0x204>)
 800415e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004164:	4618      	mov	r0, r3
 8004166:	3750      	adds	r7, #80	@ 0x50
 8004168:	46bd      	mov	sp, r7
 800416a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800416e:	bf00      	nop
 8004170:	40023800 	.word	0x40023800
 8004174:	00f42400 	.word	0x00f42400
 8004178:	007a1200 	.word	0x007a1200

0800417c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004180:	4b03      	ldr	r3, [pc, #12]	@ (8004190 <HAL_RCC_GetHCLKFreq+0x14>)
 8004182:	681b      	ldr	r3, [r3, #0]
}
 8004184:	4618      	mov	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	20000004 	.word	0x20000004

08004194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004198:	f7ff fff0 	bl	800417c <HAL_RCC_GetHCLKFreq>
 800419c:	4602      	mov	r2, r0
 800419e:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	0a9b      	lsrs	r3, r3, #10
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	4903      	ldr	r1, [pc, #12]	@ (80041b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041aa:	5ccb      	ldrb	r3, [r1, r3]
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40023800 	.word	0x40023800
 80041b8:	080095e0 	.word	0x080095e0

080041bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041c0:	f7ff ffdc 	bl	800417c <HAL_RCC_GetHCLKFreq>
 80041c4:	4602      	mov	r2, r0
 80041c6:	4b05      	ldr	r3, [pc, #20]	@ (80041dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	0b5b      	lsrs	r3, r3, #13
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	4903      	ldr	r1, [pc, #12]	@ (80041e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041d2:	5ccb      	ldrb	r3, [r1, r3]
 80041d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d8:	4618      	mov	r0, r3
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40023800 	.word	0x40023800
 80041e0:	080095e0 	.word	0x080095e0

080041e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e041      	b.n	800427a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fe f9a6 	bl	800255c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3304      	adds	r3, #4
 8004220:	4619      	mov	r1, r3
 8004222:	4610      	mov	r0, r2
 8004224:	f000 fbd8 	bl	80049d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b082      	sub	sp, #8
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e041      	b.n	8004318 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f839 	bl	8004320 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2202      	movs	r2, #2
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3304      	adds	r3, #4
 80042be:	4619      	mov	r1, r3
 80042c0:	4610      	mov	r0, r2
 80042c2:	f000 fb89 	bl	80049d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d109      	bne.n	8004358 <HAL_TIM_PWM_Start+0x24>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	bf14      	ite	ne
 8004350:	2301      	movne	r3, #1
 8004352:	2300      	moveq	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	e022      	b.n	800439e <HAL_TIM_PWM_Start+0x6a>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b04      	cmp	r3, #4
 800435c:	d109      	bne.n	8004372 <HAL_TIM_PWM_Start+0x3e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	bf14      	ite	ne
 800436a:	2301      	movne	r3, #1
 800436c:	2300      	moveq	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	e015      	b.n	800439e <HAL_TIM_PWM_Start+0x6a>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d109      	bne.n	800438c <HAL_TIM_PWM_Start+0x58>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	bf14      	ite	ne
 8004384:	2301      	movne	r3, #1
 8004386:	2300      	moveq	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	e008      	b.n	800439e <HAL_TIM_PWM_Start+0x6a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e068      	b.n	8004478 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d104      	bne.n	80043b6 <HAL_TIM_PWM_Start+0x82>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043b4:	e013      	b.n	80043de <HAL_TIM_PWM_Start+0xaa>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d104      	bne.n	80043c6 <HAL_TIM_PWM_Start+0x92>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043c4:	e00b      	b.n	80043de <HAL_TIM_PWM_Start+0xaa>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d104      	bne.n	80043d6 <HAL_TIM_PWM_Start+0xa2>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043d4:	e003      	b.n	80043de <HAL_TIM_PWM_Start+0xaa>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2201      	movs	r2, #1
 80043e4:	6839      	ldr	r1, [r7, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fda2 	bl	8004f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a23      	ldr	r2, [pc, #140]	@ (8004480 <HAL_TIM_PWM_Start+0x14c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d107      	bne.n	8004406 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004404:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1d      	ldr	r2, [pc, #116]	@ (8004480 <HAL_TIM_PWM_Start+0x14c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d018      	beq.n	8004442 <HAL_TIM_PWM_Start+0x10e>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004418:	d013      	beq.n	8004442 <HAL_TIM_PWM_Start+0x10e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a19      	ldr	r2, [pc, #100]	@ (8004484 <HAL_TIM_PWM_Start+0x150>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00e      	beq.n	8004442 <HAL_TIM_PWM_Start+0x10e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a17      	ldr	r2, [pc, #92]	@ (8004488 <HAL_TIM_PWM_Start+0x154>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d009      	beq.n	8004442 <HAL_TIM_PWM_Start+0x10e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a16      	ldr	r2, [pc, #88]	@ (800448c <HAL_TIM_PWM_Start+0x158>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d004      	beq.n	8004442 <HAL_TIM_PWM_Start+0x10e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a14      	ldr	r2, [pc, #80]	@ (8004490 <HAL_TIM_PWM_Start+0x15c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d111      	bne.n	8004466 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b06      	cmp	r3, #6
 8004452:	d010      	beq.n	8004476 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004464:	e007      	b.n	8004476 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0201 	orr.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40010000 	.word	0x40010000
 8004484:	40000400 	.word	0x40000400
 8004488:	40000800 	.word	0x40000800
 800448c:	40000c00 	.word	0x40000c00
 8004490:	40014000 	.word	0x40014000

08004494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d020      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01b      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0202 	mvn.w	r2, #2
 80044c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fa5b 	bl	800499a <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fa4d 	bl	8004986 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fa5e 	bl	80049ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d020      	beq.n	8004544 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01b      	beq.n	8004544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0204 	mvn.w	r2, #4
 8004514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2202      	movs	r2, #2
 800451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa35 	bl	800499a <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fa27 	bl	8004986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fa38 	bl	80049ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d020      	beq.n	8004590 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01b      	beq.n	8004590 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0208 	mvn.w	r2, #8
 8004560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2204      	movs	r2, #4
 8004566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fa0f 	bl	800499a <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa01 	bl	8004986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fa12 	bl	80049ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	d020      	beq.n	80045dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01b      	beq.n	80045dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0210 	mvn.w	r2, #16
 80045ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2208      	movs	r2, #8
 80045b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f9e9 	bl	800499a <HAL_TIM_IC_CaptureCallback>
 80045c8:	e005      	b.n	80045d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f9db 	bl	8004986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f9ec 	bl	80049ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00c      	beq.n	8004600 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0201 	mvn.w	r2, #1
 80045f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fd fec2 	bl	8002384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00c      	beq.n	8004624 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fd76 	bl	8005110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f9bd 	bl	80049c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00c      	beq.n	800466c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d007      	beq.n	800466c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0220 	mvn.w	r2, #32
 8004664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fd48 	bl	80050fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800466c:	bf00      	nop
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800468e:	2302      	movs	r3, #2
 8004690:	e0ae      	b.n	80047f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b0c      	cmp	r3, #12
 800469e:	f200 809f 	bhi.w	80047e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046a2:	a201      	add	r2, pc, #4	@ (adr r2, 80046a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046dd 	.word	0x080046dd
 80046ac:	080047e1 	.word	0x080047e1
 80046b0:	080047e1 	.word	0x080047e1
 80046b4:	080047e1 	.word	0x080047e1
 80046b8:	0800471d 	.word	0x0800471d
 80046bc:	080047e1 	.word	0x080047e1
 80046c0:	080047e1 	.word	0x080047e1
 80046c4:	080047e1 	.word	0x080047e1
 80046c8:	0800475f 	.word	0x0800475f
 80046cc:	080047e1 	.word	0x080047e1
 80046d0:	080047e1 	.word	0x080047e1
 80046d4:	080047e1 	.word	0x080047e1
 80046d8:	0800479f 	.word	0x0800479f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 f9fe 	bl	8004ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0208 	orr.w	r2, r2, #8
 80046f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0204 	bic.w	r2, r2, #4
 8004706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6999      	ldr	r1, [r3, #24]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	619a      	str	r2, [r3, #24]
      break;
 800471a:	e064      	b.n	80047e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fa44 	bl	8004bb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6999      	ldr	r1, [r3, #24]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	021a      	lsls	r2, r3, #8
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	619a      	str	r2, [r3, #24]
      break;
 800475c:	e043      	b.n	80047e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fa8f 	bl	8004c88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0208 	orr.w	r2, r2, #8
 8004778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0204 	bic.w	r2, r2, #4
 8004788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69d9      	ldr	r1, [r3, #28]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	61da      	str	r2, [r3, #28]
      break;
 800479c:	e023      	b.n	80047e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fad9 	bl	8004d5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69d9      	ldr	r1, [r3, #28]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	021a      	lsls	r2, r3, #8
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	61da      	str	r2, [r3, #28]
      break;
 80047de:	e002      	b.n	80047e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	75fb      	strb	r3, [r7, #23]
      break;
 80047e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_TIM_ConfigClockSource+0x1c>
 8004810:	2302      	movs	r3, #2
 8004812:	e0b4      	b.n	800497e <HAL_TIM_ConfigClockSource+0x186>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800483a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800484c:	d03e      	beq.n	80048cc <HAL_TIM_ConfigClockSource+0xd4>
 800484e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004852:	f200 8087 	bhi.w	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 8004856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800485a:	f000 8086 	beq.w	800496a <HAL_TIM_ConfigClockSource+0x172>
 800485e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004862:	d87f      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 8004864:	2b70      	cmp	r3, #112	@ 0x70
 8004866:	d01a      	beq.n	800489e <HAL_TIM_ConfigClockSource+0xa6>
 8004868:	2b70      	cmp	r3, #112	@ 0x70
 800486a:	d87b      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 800486c:	2b60      	cmp	r3, #96	@ 0x60
 800486e:	d050      	beq.n	8004912 <HAL_TIM_ConfigClockSource+0x11a>
 8004870:	2b60      	cmp	r3, #96	@ 0x60
 8004872:	d877      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 8004874:	2b50      	cmp	r3, #80	@ 0x50
 8004876:	d03c      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0xfa>
 8004878:	2b50      	cmp	r3, #80	@ 0x50
 800487a:	d873      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 800487c:	2b40      	cmp	r3, #64	@ 0x40
 800487e:	d058      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x13a>
 8004880:	2b40      	cmp	r3, #64	@ 0x40
 8004882:	d86f      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 8004884:	2b30      	cmp	r3, #48	@ 0x30
 8004886:	d064      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x15a>
 8004888:	2b30      	cmp	r3, #48	@ 0x30
 800488a:	d86b      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 800488c:	2b20      	cmp	r3, #32
 800488e:	d060      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x15a>
 8004890:	2b20      	cmp	r3, #32
 8004892:	d867      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d05c      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x15a>
 8004898:	2b10      	cmp	r3, #16
 800489a:	d05a      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x15a>
 800489c:	e062      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048ae:	f000 fb1f 	bl	8004ef0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	609a      	str	r2, [r3, #8]
      break;
 80048ca:	e04f      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048dc:	f000 fb08 	bl	8004ef0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048ee:	609a      	str	r2, [r3, #8]
      break;
 80048f0:	e03c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048fe:	461a      	mov	r2, r3
 8004900:	f000 fa7c 	bl	8004dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2150      	movs	r1, #80	@ 0x50
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fad5 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004910:	e02c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800491e:	461a      	mov	r2, r3
 8004920:	f000 fa9b 	bl	8004e5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2160      	movs	r1, #96	@ 0x60
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fac5 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004930:	e01c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800493e:	461a      	mov	r2, r3
 8004940:	f000 fa5c 	bl	8004dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2140      	movs	r1, #64	@ 0x40
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fab5 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004950:	e00c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f000 faac 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004962:	e003      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	73fb      	strb	r3, [r7, #15]
      break;
 8004968:	e000      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800496a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800497c:	7bfb      	ldrb	r3, [r7, #15]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
	...

080049d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a37      	ldr	r2, [pc, #220]	@ (8004ac8 <TIM_Base_SetConfig+0xf0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00f      	beq.n	8004a10 <TIM_Base_SetConfig+0x38>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f6:	d00b      	beq.n	8004a10 <TIM_Base_SetConfig+0x38>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a34      	ldr	r2, [pc, #208]	@ (8004acc <TIM_Base_SetConfig+0xf4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d007      	beq.n	8004a10 <TIM_Base_SetConfig+0x38>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a33      	ldr	r2, [pc, #204]	@ (8004ad0 <TIM_Base_SetConfig+0xf8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d003      	beq.n	8004a10 <TIM_Base_SetConfig+0x38>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a32      	ldr	r2, [pc, #200]	@ (8004ad4 <TIM_Base_SetConfig+0xfc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d108      	bne.n	8004a22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a28      	ldr	r2, [pc, #160]	@ (8004ac8 <TIM_Base_SetConfig+0xf0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d01b      	beq.n	8004a62 <TIM_Base_SetConfig+0x8a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a30:	d017      	beq.n	8004a62 <TIM_Base_SetConfig+0x8a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a25      	ldr	r2, [pc, #148]	@ (8004acc <TIM_Base_SetConfig+0xf4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <TIM_Base_SetConfig+0x8a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a24      	ldr	r2, [pc, #144]	@ (8004ad0 <TIM_Base_SetConfig+0xf8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00f      	beq.n	8004a62 <TIM_Base_SetConfig+0x8a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a23      	ldr	r2, [pc, #140]	@ (8004ad4 <TIM_Base_SetConfig+0xfc>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00b      	beq.n	8004a62 <TIM_Base_SetConfig+0x8a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a22      	ldr	r2, [pc, #136]	@ (8004ad8 <TIM_Base_SetConfig+0x100>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d007      	beq.n	8004a62 <TIM_Base_SetConfig+0x8a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a21      	ldr	r2, [pc, #132]	@ (8004adc <TIM_Base_SetConfig+0x104>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d003      	beq.n	8004a62 <TIM_Base_SetConfig+0x8a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a20      	ldr	r2, [pc, #128]	@ (8004ae0 <TIM_Base_SetConfig+0x108>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d108      	bne.n	8004a74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a0c      	ldr	r2, [pc, #48]	@ (8004ac8 <TIM_Base_SetConfig+0xf0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d103      	bne.n	8004aa2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f043 0204 	orr.w	r2, r3, #4
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	601a      	str	r2, [r3, #0]
}
 8004aba:	bf00      	nop
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	40000400 	.word	0x40000400
 8004ad0:	40000800 	.word	0x40000800
 8004ad4:	40000c00 	.word	0x40000c00
 8004ad8:	40014000 	.word	0x40014000
 8004adc:	40014400 	.word	0x40014400
 8004ae0:	40014800 	.word	0x40014800

08004ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	f023 0201 	bic.w	r2, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0303 	bic.w	r3, r3, #3
 8004b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f023 0302 	bic.w	r3, r3, #2
 8004b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8004bac <TIM_OC1_SetConfig+0xc8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d10c      	bne.n	8004b5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f023 0308 	bic.w	r3, r3, #8
 8004b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f023 0304 	bic.w	r3, r3, #4
 8004b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a13      	ldr	r2, [pc, #76]	@ (8004bac <TIM_OC1_SetConfig+0xc8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d111      	bne.n	8004b86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	621a      	str	r2, [r3, #32]
}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	40010000 	.word	0x40010000

08004bb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	f023 0210 	bic.w	r2, r3, #16
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f023 0320 	bic.w	r3, r3, #32
 8004bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c84 <TIM_OC2_SetConfig+0xd4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d10d      	bne.n	8004c2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a15      	ldr	r2, [pc, #84]	@ (8004c84 <TIM_OC2_SetConfig+0xd4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d113      	bne.n	8004c5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	621a      	str	r2, [r3, #32]
}
 8004c76:	bf00      	nop
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40010000 	.word	0x40010000

08004c88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	021b      	lsls	r3, r3, #8
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d58 <TIM_OC3_SetConfig+0xd0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d10d      	bne.n	8004d02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a14      	ldr	r2, [pc, #80]	@ (8004d58 <TIM_OC3_SetConfig+0xd0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d113      	bne.n	8004d32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	621a      	str	r2, [r3, #32]
}
 8004d4c:	bf00      	nop
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	40010000 	.word	0x40010000

08004d5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	021b      	lsls	r3, r3, #8
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	031b      	lsls	r3, r3, #12
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a10      	ldr	r2, [pc, #64]	@ (8004df8 <TIM_OC4_SetConfig+0x9c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d109      	bne.n	8004dd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	019b      	lsls	r3, r3, #6
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40010000 	.word	0x40010000

08004dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f023 0201 	bic.w	r2, r3, #1
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 030a 	bic.w	r3, r3, #10
 8004e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b087      	sub	sp, #28
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f023 0210 	bic.w	r2, r3, #16
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	031b      	lsls	r3, r3, #12
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	621a      	str	r2, [r3, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f043 0307 	orr.w	r3, r3, #7
 8004edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	609a      	str	r2, [r3, #8]
}
 8004ee4:	bf00      	nop
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	021a      	lsls	r2, r3, #8
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	609a      	str	r2, [r3, #8]
}
 8004f24:	bf00      	nop
 8004f26:	371c      	adds	r7, #28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f003 031f 	and.w	r3, r3, #31
 8004f42:	2201      	movs	r2, #1
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a1a      	ldr	r2, [r3, #32]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	43db      	mvns	r3, r3
 8004f52:	401a      	ands	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a1a      	ldr	r2, [r3, #32]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f003 031f 	and.w	r3, r3, #31
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	fa01 f303 	lsl.w	r3, r1, r3
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
	...

08004f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e050      	b.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8005044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d018      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe0:	d013      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a18      	ldr	r2, [pc, #96]	@ (8005048 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00e      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a16      	ldr	r2, [pc, #88]	@ (800504c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d009      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a15      	ldr	r2, [pc, #84]	@ (8005050 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d004      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a13      	ldr	r2, [pc, #76]	@ (8005054 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d10c      	bne.n	8005024 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	4313      	orrs	r3, r2
 800501a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40010000 	.word	0x40010000
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40000c00 	.word	0x40000c00
 8005054:	40014000 	.word	0x40014000

08005058 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005070:	2302      	movs	r3, #2
 8005072:	e03d      	b.n	80050f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e042      	b.n	80051bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fd fb2c 	bl	80027a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2224      	movs	r2, #36	@ 0x24
 8005154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005166:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fdd3 	bl	8005d14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800517c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695a      	ldr	r2, [r3, #20]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800518c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800519c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08a      	sub	sp, #40	@ 0x28
 80051c8:	af02      	add	r7, sp, #8
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	603b      	str	r3, [r7, #0]
 80051d0:	4613      	mov	r3, r2
 80051d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d175      	bne.n	80052d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <HAL_UART_Transmit+0x2c>
 80051ea:	88fb      	ldrh	r3, [r7, #6]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e06e      	b.n	80052d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2221      	movs	r2, #33	@ 0x21
 80051fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005202:	f7fd fd37 	bl	8002c74 <HAL_GetTick>
 8005206:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	88fa      	ldrh	r2, [r7, #6]
 800520c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	88fa      	ldrh	r2, [r7, #6]
 8005212:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800521c:	d108      	bne.n	8005230 <HAL_UART_Transmit+0x6c>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d104      	bne.n	8005230 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	61bb      	str	r3, [r7, #24]
 800522e:	e003      	b.n	8005238 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005234:	2300      	movs	r3, #0
 8005236:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005238:	e02e      	b.n	8005298 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2200      	movs	r2, #0
 8005242:	2180      	movs	r1, #128	@ 0x80
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 fb37 	bl	80058b8 <UART_WaitOnFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e03a      	b.n	80052d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10b      	bne.n	800527a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005270:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	3302      	adds	r3, #2
 8005276:	61bb      	str	r3, [r7, #24]
 8005278:	e007      	b.n	800528a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	781a      	ldrb	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	3301      	adds	r3, #1
 8005288:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800528e:	b29b      	uxth	r3, r3
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1cb      	bne.n	800523a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2200      	movs	r2, #0
 80052aa:	2140      	movs	r1, #64	@ 0x40
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 fb03 	bl	80058b8 <UART_WaitOnFlagUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e006      	b.n	80052d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	e000      	b.n	80052d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80052d0:	2302      	movs	r3, #2
  }
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3720      	adds	r7, #32
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	4613      	mov	r3, r2
 80052e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d112      	bne.n	800531a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <HAL_UART_Receive_IT+0x26>
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e00b      	b.n	800531c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800530a:	88fb      	ldrh	r3, [r7, #6]
 800530c:	461a      	mov	r2, r3
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 fb2a 	bl	800596a <UART_Start_Receive_IT>
 8005316:	4603      	mov	r3, r0
 8005318:	e000      	b.n	800531c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800531a:	2302      	movs	r3, #2
  }
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b0ba      	sub	sp, #232	@ 0xe8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800534a:	2300      	movs	r3, #0
 800534c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005350:	2300      	movs	r3, #0
 8005352:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10f      	bne.n	800538a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800536a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d009      	beq.n	800538a <HAL_UART_IRQHandler+0x66>
 8005376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fc07 	bl	8005b96 <UART_Receive_IT>
      return;
 8005388:	e273      	b.n	8005872 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800538a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 80de 	beq.w	8005550 <HAL_UART_IRQHandler+0x22c>
 8005394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d106      	bne.n	80053ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 80d1 	beq.w	8005550 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00b      	beq.n	80053d2 <HAL_UART_IRQHandler+0xae>
 80053ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d005      	beq.n	80053d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ca:	f043 0201 	orr.w	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <HAL_UART_IRQHandler+0xd2>
 80053de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d005      	beq.n	80053f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ee:	f043 0202 	orr.w	r2, r3, #2
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00b      	beq.n	800541a <HAL_UART_IRQHandler+0xf6>
 8005402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005412:	f043 0204 	orr.w	r2, r3, #4
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800541a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d011      	beq.n	800544a <HAL_UART_IRQHandler+0x126>
 8005426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d105      	bne.n	800543e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d005      	beq.n	800544a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005442:	f043 0208 	orr.w	r2, r3, #8
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 820a 	beq.w	8005868 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005458:	f003 0320 	and.w	r3, r3, #32
 800545c:	2b00      	cmp	r3, #0
 800545e:	d008      	beq.n	8005472 <HAL_UART_IRQHandler+0x14e>
 8005460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005464:	f003 0320 	and.w	r3, r3, #32
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fb92 	bl	8005b96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800547c:	2b40      	cmp	r3, #64	@ 0x40
 800547e:	bf0c      	ite	eq
 8005480:	2301      	moveq	r3, #1
 8005482:	2300      	movne	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d103      	bne.n	800549e <HAL_UART_IRQHandler+0x17a>
 8005496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800549a:	2b00      	cmp	r3, #0
 800549c:	d04f      	beq.n	800553e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fa9d 	bl	80059de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ae:	2b40      	cmp	r3, #64	@ 0x40
 80054b0:	d141      	bne.n	8005536 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3314      	adds	r3, #20
 80054b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054c0:	e853 3f00 	ldrex	r3, [r3]
 80054c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80054c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3314      	adds	r3, #20
 80054da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80054de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80054e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80054ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80054ee:	e841 2300 	strex	r3, r2, [r1]
 80054f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1d9      	bne.n	80054b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d013      	beq.n	800552e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550a:	4a8a      	ldr	r2, [pc, #552]	@ (8005734 <HAL_UART_IRQHandler+0x410>)
 800550c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005512:	4618      	mov	r0, r3
 8005514:	f7fd ffd1 	bl	80034ba <HAL_DMA_Abort_IT>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d016      	beq.n	800554c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005528:	4610      	mov	r0, r2
 800552a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800552c:	e00e      	b.n	800554c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f9ac 	bl	800588c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005534:	e00a      	b.n	800554c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f9a8 	bl	800588c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553c:	e006      	b.n	800554c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f9a4 	bl	800588c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800554a:	e18d      	b.n	8005868 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800554c:	bf00      	nop
    return;
 800554e:	e18b      	b.n	8005868 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005554:	2b01      	cmp	r3, #1
 8005556:	f040 8167 	bne.w	8005828 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800555a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800555e:	f003 0310 	and.w	r3, r3, #16
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 8160 	beq.w	8005828 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 8159 	beq.w	8005828 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005576:	2300      	movs	r3, #0
 8005578:	60bb      	str	r3, [r7, #8]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60bb      	str	r3, [r7, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005596:	2b40      	cmp	r3, #64	@ 0x40
 8005598:	f040 80ce 	bne.w	8005738 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 80a9 	beq.w	8005704 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055ba:	429a      	cmp	r2, r3
 80055bc:	f080 80a2 	bcs.w	8005704 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055d2:	f000 8088 	beq.w	80056e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	330c      	adds	r3, #12
 80055dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	330c      	adds	r3, #12
 80055fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005602:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005606:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800560e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800561a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1d9      	bne.n	80055d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3314      	adds	r3, #20
 8005628:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005632:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005634:	f023 0301 	bic.w	r3, r3, #1
 8005638:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3314      	adds	r3, #20
 8005642:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005646:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800564a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800564e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005658:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e1      	bne.n	8005622 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3314      	adds	r3, #20
 8005664:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800566e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005674:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3314      	adds	r3, #20
 800567e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005682:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005684:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005688:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005690:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e3      	bne.n	800565e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2220      	movs	r2, #32
 800569a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	330c      	adds	r3, #12
 80056aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056ae:	e853 3f00 	ldrex	r3, [r3]
 80056b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056b6:	f023 0310 	bic.w	r3, r3, #16
 80056ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	330c      	adds	r3, #12
 80056c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80056c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80056ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056d0:	e841 2300 	strex	r3, r2, [r1]
 80056d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e3      	bne.n	80056a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fd fe7a 	bl	80033da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2202      	movs	r2, #2
 80056ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f8cf 	bl	80058a0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005702:	e0b3      	b.n	800586c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005708:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800570c:	429a      	cmp	r2, r3
 800570e:	f040 80ad 	bne.w	800586c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800571c:	f040 80a6 	bne.w	800586c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800572a:	4619      	mov	r1, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f8b7 	bl	80058a0 <HAL_UARTEx_RxEventCallback>
      return;
 8005732:	e09b      	b.n	800586c <HAL_UART_IRQHandler+0x548>
 8005734:	08005aa5 	.word	0x08005aa5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005740:	b29b      	uxth	r3, r3
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800574c:	b29b      	uxth	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 808e 	beq.w	8005870 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005754:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8089 	beq.w	8005870 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	330c      	adds	r3, #12
 8005764:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800576e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005770:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005774:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	330c      	adds	r3, #12
 800577e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005782:	647a      	str	r2, [r7, #68]	@ 0x44
 8005784:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005788:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e3      	bne.n	800575e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3314      	adds	r3, #20
 800579c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	623b      	str	r3, [r7, #32]
   return(result);
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	f023 0301 	bic.w	r3, r3, #1
 80057ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3314      	adds	r3, #20
 80057b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80057bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e3      	bne.n	8005796 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	330c      	adds	r3, #12
 80057e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	e853 3f00 	ldrex	r3, [r3]
 80057ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0310 	bic.w	r3, r3, #16
 80057f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	330c      	adds	r3, #12
 80057fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005800:	61fa      	str	r2, [r7, #28]
 8005802:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	69b9      	ldr	r1, [r7, #24]
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	617b      	str	r3, [r7, #20]
   return(result);
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e3      	bne.n	80057dc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800581a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f83d 	bl	80058a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005826:	e023      	b.n	8005870 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800582c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005830:	2b00      	cmp	r3, #0
 8005832:	d009      	beq.n	8005848 <HAL_UART_IRQHandler+0x524>
 8005834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f940 	bl	8005ac6 <UART_Transmit_IT>
    return;
 8005846:	e014      	b.n	8005872 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800584c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00e      	beq.n	8005872 <HAL_UART_IRQHandler+0x54e>
 8005854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800585c:	2b00      	cmp	r3, #0
 800585e:	d008      	beq.n	8005872 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f980 	bl	8005b66 <UART_EndTransmit_IT>
    return;
 8005866:	e004      	b.n	8005872 <HAL_UART_IRQHandler+0x54e>
    return;
 8005868:	bf00      	nop
 800586a:	e002      	b.n	8005872 <HAL_UART_IRQHandler+0x54e>
      return;
 800586c:	bf00      	nop
 800586e:	e000      	b.n	8005872 <HAL_UART_IRQHandler+0x54e>
      return;
 8005870:	bf00      	nop
  }
}
 8005872:	37e8      	adds	r7, #232	@ 0xe8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	460b      	mov	r3, r1
 80058aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	4613      	mov	r3, r2
 80058c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c8:	e03b      	b.n	8005942 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d0:	d037      	beq.n	8005942 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058d2:	f7fd f9cf 	bl	8002c74 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	6a3a      	ldr	r2, [r7, #32]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d302      	bcc.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e03a      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f003 0304 	and.w	r3, r3, #4
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d023      	beq.n	8005942 <UART_WaitOnFlagUntilTimeout+0x8a>
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2b80      	cmp	r3, #128	@ 0x80
 80058fe:	d020      	beq.n	8005942 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b40      	cmp	r3, #64	@ 0x40
 8005904:	d01d      	beq.n	8005942 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b08      	cmp	r3, #8
 8005912:	d116      	bne.n	8005942 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005914:	2300      	movs	r3, #0
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 f857 	bl	80059de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2208      	movs	r2, #8
 8005934:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e00f      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	4013      	ands	r3, r2
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	429a      	cmp	r2, r3
 8005950:	bf0c      	ite	eq
 8005952:	2301      	moveq	r3, #1
 8005954:	2300      	movne	r3, #0
 8005956:	b2db      	uxtb	r3, r3
 8005958:	461a      	mov	r2, r3
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	429a      	cmp	r2, r3
 800595e:	d0b4      	beq.n	80058ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800596a:	b480      	push	{r7}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	4613      	mov	r3, r2
 8005976:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	88fa      	ldrh	r2, [r7, #6]
 8005982:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	88fa      	ldrh	r2, [r7, #6]
 8005988:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2222      	movs	r2, #34	@ 0x22
 8005994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d007      	beq.n	80059b0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059ae:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695a      	ldr	r2, [r3, #20]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0220 	orr.w	r2, r2, #32
 80059ce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059de:	b480      	push	{r7}
 80059e0:	b095      	sub	sp, #84	@ 0x54
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	330c      	adds	r3, #12
 8005a04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a06:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e5      	bne.n	80059e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3314      	adds	r3, #20
 8005a20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	e853 3f00 	ldrex	r3, [r3]
 8005a28:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	f023 0301 	bic.w	r3, r3, #1
 8005a30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3314      	adds	r3, #20
 8005a38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e5      	bne.n	8005a1a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d119      	bne.n	8005a8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	330c      	adds	r3, #12
 8005a5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	e853 3f00 	ldrex	r3, [r3]
 8005a64:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f023 0310 	bic.w	r3, r3, #16
 8005a6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	330c      	adds	r3, #12
 8005a74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a76:	61ba      	str	r2, [r7, #24]
 8005a78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	6979      	ldr	r1, [r7, #20]
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	e841 2300 	strex	r3, r2, [r1]
 8005a82:	613b      	str	r3, [r7, #16]
   return(result);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1e5      	bne.n	8005a56 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a98:	bf00      	nop
 8005a9a:	3754      	adds	r7, #84	@ 0x54
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f7ff fee7 	bl	800588c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005abe:	bf00      	nop
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b085      	sub	sp, #20
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b21      	cmp	r3, #33	@ 0x21
 8005ad8:	d13e      	bne.n	8005b58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae2:	d114      	bne.n	8005b0e <UART_Transmit_IT+0x48>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d110      	bne.n	8005b0e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	461a      	mov	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	1c9a      	adds	r2, r3, #2
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	621a      	str	r2, [r3, #32]
 8005b0c:	e008      	b.n	8005b20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	1c59      	adds	r1, r3, #1
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6211      	str	r1, [r2, #32]
 8005b18:	781a      	ldrb	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10f      	bne.n	8005b54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	e000      	b.n	8005b5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b58:	2302      	movs	r3, #2
  }
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b082      	sub	sp, #8
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7ff fe76 	bl	8005878 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b08c      	sub	sp, #48	@ 0x30
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b22      	cmp	r3, #34	@ 0x22
 8005bb0:	f040 80aa 	bne.w	8005d08 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bbc:	d115      	bne.n	8005bea <UART_Receive_IT+0x54>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d111      	bne.n	8005bea <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bca:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be2:	1c9a      	adds	r2, r3, #2
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005be8:	e024      	b.n	8005c34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bf8:	d007      	beq.n	8005c0a <UART_Receive_IT+0x74>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10a      	bne.n	8005c18 <UART_Receive_IT+0x82>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c14:	701a      	strb	r2, [r3, #0]
 8005c16:	e008      	b.n	8005c2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	4619      	mov	r1, r3
 8005c42:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d15d      	bne.n	8005d04 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0220 	bic.w	r2, r2, #32
 8005c56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	695a      	ldr	r2, [r3, #20]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0201 	bic.w	r2, r2, #1
 8005c76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d135      	bne.n	8005cfa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	e853 3f00 	ldrex	r3, [r3]
 8005ca2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f023 0310 	bic.w	r3, r3, #16
 8005caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb4:	623a      	str	r2, [r7, #32]
 8005cb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb8:	69f9      	ldr	r1, [r7, #28]
 8005cba:	6a3a      	ldr	r2, [r7, #32]
 8005cbc:	e841 2300 	strex	r3, r2, [r1]
 8005cc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e5      	bne.n	8005c94 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0310 	and.w	r3, r3, #16
 8005cd2:	2b10      	cmp	r3, #16
 8005cd4:	d10a      	bne.n	8005cec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff fdd4 	bl	80058a0 <HAL_UARTEx_RxEventCallback>
 8005cf8:	e002      	b.n	8005d00 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7fb fc3e 	bl	800157c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	e002      	b.n	8005d0a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e000      	b.n	8005d0a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d08:	2302      	movs	r3, #2
  }
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3730      	adds	r7, #48	@ 0x30
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d18:	b0c0      	sub	sp, #256	@ 0x100
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d30:	68d9      	ldr	r1, [r3, #12]
 8005d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	ea40 0301 	orr.w	r3, r0, r1
 8005d3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	431a      	orrs	r2, r3
 8005d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d6c:	f021 010c 	bic.w	r1, r1, #12
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d7a:	430b      	orrs	r3, r1
 8005d7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d8e:	6999      	ldr	r1, [r3, #24]
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	ea40 0301 	orr.w	r3, r0, r1
 8005d9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4b8f      	ldr	r3, [pc, #572]	@ (8005fe0 <UART_SetConfig+0x2cc>)
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d005      	beq.n	8005db4 <UART_SetConfig+0xa0>
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	4b8d      	ldr	r3, [pc, #564]	@ (8005fe4 <UART_SetConfig+0x2d0>)
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d104      	bne.n	8005dbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005db4:	f7fe fa02 	bl	80041bc <HAL_RCC_GetPCLK2Freq>
 8005db8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005dbc:	e003      	b.n	8005dc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dbe:	f7fe f9e9 	bl	8004194 <HAL_RCC_GetPCLK1Freq>
 8005dc2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dd0:	f040 810c 	bne.w	8005fec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005dde:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005de2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005de6:	4622      	mov	r2, r4
 8005de8:	462b      	mov	r3, r5
 8005dea:	1891      	adds	r1, r2, r2
 8005dec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005dee:	415b      	adcs	r3, r3
 8005df0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005df2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005df6:	4621      	mov	r1, r4
 8005df8:	eb12 0801 	adds.w	r8, r2, r1
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	eb43 0901 	adc.w	r9, r3, r1
 8005e02:	f04f 0200 	mov.w	r2, #0
 8005e06:	f04f 0300 	mov.w	r3, #0
 8005e0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e16:	4690      	mov	r8, r2
 8005e18:	4699      	mov	r9, r3
 8005e1a:	4623      	mov	r3, r4
 8005e1c:	eb18 0303 	adds.w	r3, r8, r3
 8005e20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e24:	462b      	mov	r3, r5
 8005e26:	eb49 0303 	adc.w	r3, r9, r3
 8005e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e42:	460b      	mov	r3, r1
 8005e44:	18db      	adds	r3, r3, r3
 8005e46:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e48:	4613      	mov	r3, r2
 8005e4a:	eb42 0303 	adc.w	r3, r2, r3
 8005e4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e58:	f7fa febe 	bl	8000bd8 <__aeabi_uldivmod>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4b61      	ldr	r3, [pc, #388]	@ (8005fe8 <UART_SetConfig+0x2d4>)
 8005e62:	fba3 2302 	umull	r2, r3, r3, r2
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	011c      	lsls	r4, r3, #4
 8005e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005e7c:	4642      	mov	r2, r8
 8005e7e:	464b      	mov	r3, r9
 8005e80:	1891      	adds	r1, r2, r2
 8005e82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e84:	415b      	adcs	r3, r3
 8005e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e8c:	4641      	mov	r1, r8
 8005e8e:	eb12 0a01 	adds.w	sl, r2, r1
 8005e92:	4649      	mov	r1, r9
 8005e94:	eb43 0b01 	adc.w	fp, r3, r1
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ea4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ea8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005eac:	4692      	mov	sl, r2
 8005eae:	469b      	mov	fp, r3
 8005eb0:	4643      	mov	r3, r8
 8005eb2:	eb1a 0303 	adds.w	r3, sl, r3
 8005eb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005eba:	464b      	mov	r3, r9
 8005ebc:	eb4b 0303 	adc.w	r3, fp, r3
 8005ec0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ed0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ed4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	18db      	adds	r3, r3, r3
 8005edc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ede:	4613      	mov	r3, r2
 8005ee0:	eb42 0303 	adc.w	r3, r2, r3
 8005ee4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ee6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005eea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005eee:	f7fa fe73 	bl	8000bd8 <__aeabi_uldivmod>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4611      	mov	r1, r2
 8005ef8:	4b3b      	ldr	r3, [pc, #236]	@ (8005fe8 <UART_SetConfig+0x2d4>)
 8005efa:	fba3 2301 	umull	r2, r3, r3, r1
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	2264      	movs	r2, #100	@ 0x64
 8005f02:	fb02 f303 	mul.w	r3, r2, r3
 8005f06:	1acb      	subs	r3, r1, r3
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f0e:	4b36      	ldr	r3, [pc, #216]	@ (8005fe8 <UART_SetConfig+0x2d4>)
 8005f10:	fba3 2302 	umull	r2, r3, r3, r2
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f1c:	441c      	add	r4, r3
 8005f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f22:	2200      	movs	r2, #0
 8005f24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f30:	4642      	mov	r2, r8
 8005f32:	464b      	mov	r3, r9
 8005f34:	1891      	adds	r1, r2, r2
 8005f36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f38:	415b      	adcs	r3, r3
 8005f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f40:	4641      	mov	r1, r8
 8005f42:	1851      	adds	r1, r2, r1
 8005f44:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f46:	4649      	mov	r1, r9
 8005f48:	414b      	adcs	r3, r1
 8005f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f4c:	f04f 0200 	mov.w	r2, #0
 8005f50:	f04f 0300 	mov.w	r3, #0
 8005f54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f58:	4659      	mov	r1, fp
 8005f5a:	00cb      	lsls	r3, r1, #3
 8005f5c:	4651      	mov	r1, sl
 8005f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f62:	4651      	mov	r1, sl
 8005f64:	00ca      	lsls	r2, r1, #3
 8005f66:	4610      	mov	r0, r2
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	4642      	mov	r2, r8
 8005f6e:	189b      	adds	r3, r3, r2
 8005f70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f74:	464b      	mov	r3, r9
 8005f76:	460a      	mov	r2, r1
 8005f78:	eb42 0303 	adc.w	r3, r2, r3
 8005f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005f90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f94:	460b      	mov	r3, r1
 8005f96:	18db      	adds	r3, r3, r3
 8005f98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	eb42 0303 	adc.w	r3, r2, r3
 8005fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005faa:	f7fa fe15 	bl	8000bd8 <__aeabi_uldivmod>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005fe8 <UART_SetConfig+0x2d4>)
 8005fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fb8:	095b      	lsrs	r3, r3, #5
 8005fba:	2164      	movs	r1, #100	@ 0x64
 8005fbc:	fb01 f303 	mul.w	r3, r1, r3
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	3332      	adds	r3, #50	@ 0x32
 8005fc6:	4a08      	ldr	r2, [pc, #32]	@ (8005fe8 <UART_SetConfig+0x2d4>)
 8005fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fcc:	095b      	lsrs	r3, r3, #5
 8005fce:	f003 0207 	and.w	r2, r3, #7
 8005fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4422      	add	r2, r4
 8005fda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fdc:	e106      	b.n	80061ec <UART_SetConfig+0x4d8>
 8005fde:	bf00      	nop
 8005fe0:	40011000 	.word	0x40011000
 8005fe4:	40011400 	.word	0x40011400
 8005fe8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ff6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005ffa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005ffe:	4642      	mov	r2, r8
 8006000:	464b      	mov	r3, r9
 8006002:	1891      	adds	r1, r2, r2
 8006004:	6239      	str	r1, [r7, #32]
 8006006:	415b      	adcs	r3, r3
 8006008:	627b      	str	r3, [r7, #36]	@ 0x24
 800600a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800600e:	4641      	mov	r1, r8
 8006010:	1854      	adds	r4, r2, r1
 8006012:	4649      	mov	r1, r9
 8006014:	eb43 0501 	adc.w	r5, r3, r1
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	00eb      	lsls	r3, r5, #3
 8006022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006026:	00e2      	lsls	r2, r4, #3
 8006028:	4614      	mov	r4, r2
 800602a:	461d      	mov	r5, r3
 800602c:	4643      	mov	r3, r8
 800602e:	18e3      	adds	r3, r4, r3
 8006030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006034:	464b      	mov	r3, r9
 8006036:	eb45 0303 	adc.w	r3, r5, r3
 800603a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800603e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800604a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	f04f 0300 	mov.w	r3, #0
 8006056:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800605a:	4629      	mov	r1, r5
 800605c:	008b      	lsls	r3, r1, #2
 800605e:	4621      	mov	r1, r4
 8006060:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006064:	4621      	mov	r1, r4
 8006066:	008a      	lsls	r2, r1, #2
 8006068:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800606c:	f7fa fdb4 	bl	8000bd8 <__aeabi_uldivmod>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4b60      	ldr	r3, [pc, #384]	@ (80061f8 <UART_SetConfig+0x4e4>)
 8006076:	fba3 2302 	umull	r2, r3, r3, r2
 800607a:	095b      	lsrs	r3, r3, #5
 800607c:	011c      	lsls	r4, r3, #4
 800607e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006082:	2200      	movs	r2, #0
 8006084:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006088:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800608c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006090:	4642      	mov	r2, r8
 8006092:	464b      	mov	r3, r9
 8006094:	1891      	adds	r1, r2, r2
 8006096:	61b9      	str	r1, [r7, #24]
 8006098:	415b      	adcs	r3, r3
 800609a:	61fb      	str	r3, [r7, #28]
 800609c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060a0:	4641      	mov	r1, r8
 80060a2:	1851      	adds	r1, r2, r1
 80060a4:	6139      	str	r1, [r7, #16]
 80060a6:	4649      	mov	r1, r9
 80060a8:	414b      	adcs	r3, r1
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	f04f 0200 	mov.w	r2, #0
 80060b0:	f04f 0300 	mov.w	r3, #0
 80060b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060b8:	4659      	mov	r1, fp
 80060ba:	00cb      	lsls	r3, r1, #3
 80060bc:	4651      	mov	r1, sl
 80060be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060c2:	4651      	mov	r1, sl
 80060c4:	00ca      	lsls	r2, r1, #3
 80060c6:	4610      	mov	r0, r2
 80060c8:	4619      	mov	r1, r3
 80060ca:	4603      	mov	r3, r0
 80060cc:	4642      	mov	r2, r8
 80060ce:	189b      	adds	r3, r3, r2
 80060d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060d4:	464b      	mov	r3, r9
 80060d6:	460a      	mov	r2, r1
 80060d8:	eb42 0303 	adc.w	r3, r2, r3
 80060dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80060ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80060f8:	4649      	mov	r1, r9
 80060fa:	008b      	lsls	r3, r1, #2
 80060fc:	4641      	mov	r1, r8
 80060fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006102:	4641      	mov	r1, r8
 8006104:	008a      	lsls	r2, r1, #2
 8006106:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800610a:	f7fa fd65 	bl	8000bd8 <__aeabi_uldivmod>
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	4611      	mov	r1, r2
 8006114:	4b38      	ldr	r3, [pc, #224]	@ (80061f8 <UART_SetConfig+0x4e4>)
 8006116:	fba3 2301 	umull	r2, r3, r3, r1
 800611a:	095b      	lsrs	r3, r3, #5
 800611c:	2264      	movs	r2, #100	@ 0x64
 800611e:	fb02 f303 	mul.w	r3, r2, r3
 8006122:	1acb      	subs	r3, r1, r3
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	3332      	adds	r3, #50	@ 0x32
 8006128:	4a33      	ldr	r2, [pc, #204]	@ (80061f8 <UART_SetConfig+0x4e4>)
 800612a:	fba2 2303 	umull	r2, r3, r2, r3
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006134:	441c      	add	r4, r3
 8006136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800613a:	2200      	movs	r2, #0
 800613c:	673b      	str	r3, [r7, #112]	@ 0x70
 800613e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006140:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006144:	4642      	mov	r2, r8
 8006146:	464b      	mov	r3, r9
 8006148:	1891      	adds	r1, r2, r2
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	415b      	adcs	r3, r3
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006154:	4641      	mov	r1, r8
 8006156:	1851      	adds	r1, r2, r1
 8006158:	6039      	str	r1, [r7, #0]
 800615a:	4649      	mov	r1, r9
 800615c:	414b      	adcs	r3, r1
 800615e:	607b      	str	r3, [r7, #4]
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	f04f 0300 	mov.w	r3, #0
 8006168:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800616c:	4659      	mov	r1, fp
 800616e:	00cb      	lsls	r3, r1, #3
 8006170:	4651      	mov	r1, sl
 8006172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006176:	4651      	mov	r1, sl
 8006178:	00ca      	lsls	r2, r1, #3
 800617a:	4610      	mov	r0, r2
 800617c:	4619      	mov	r1, r3
 800617e:	4603      	mov	r3, r0
 8006180:	4642      	mov	r2, r8
 8006182:	189b      	adds	r3, r3, r2
 8006184:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006186:	464b      	mov	r3, r9
 8006188:	460a      	mov	r2, r1
 800618a:	eb42 0303 	adc.w	r3, r2, r3
 800618e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	663b      	str	r3, [r7, #96]	@ 0x60
 800619a:	667a      	str	r2, [r7, #100]	@ 0x64
 800619c:	f04f 0200 	mov.w	r2, #0
 80061a0:	f04f 0300 	mov.w	r3, #0
 80061a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061a8:	4649      	mov	r1, r9
 80061aa:	008b      	lsls	r3, r1, #2
 80061ac:	4641      	mov	r1, r8
 80061ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061b2:	4641      	mov	r1, r8
 80061b4:	008a      	lsls	r2, r1, #2
 80061b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80061ba:	f7fa fd0d 	bl	8000bd8 <__aeabi_uldivmod>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4b0d      	ldr	r3, [pc, #52]	@ (80061f8 <UART_SetConfig+0x4e4>)
 80061c4:	fba3 1302 	umull	r1, r3, r3, r2
 80061c8:	095b      	lsrs	r3, r3, #5
 80061ca:	2164      	movs	r1, #100	@ 0x64
 80061cc:	fb01 f303 	mul.w	r3, r1, r3
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	011b      	lsls	r3, r3, #4
 80061d4:	3332      	adds	r3, #50	@ 0x32
 80061d6:	4a08      	ldr	r2, [pc, #32]	@ (80061f8 <UART_SetConfig+0x4e4>)
 80061d8:	fba2 2303 	umull	r2, r3, r2, r3
 80061dc:	095b      	lsrs	r3, r3, #5
 80061de:	f003 020f 	and.w	r2, r3, #15
 80061e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4422      	add	r2, r4
 80061ea:	609a      	str	r2, [r3, #8]
}
 80061ec:	bf00      	nop
 80061ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80061f2:	46bd      	mov	sp, r7
 80061f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061f8:	51eb851f 	.word	0x51eb851f

080061fc <atoi>:
 80061fc:	220a      	movs	r2, #10
 80061fe:	2100      	movs	r1, #0
 8006200:	f000 b87a 	b.w	80062f8 <strtol>

08006204 <_strtol_l.isra.0>:
 8006204:	2b24      	cmp	r3, #36	@ 0x24
 8006206:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800620a:	4686      	mov	lr, r0
 800620c:	4690      	mov	r8, r2
 800620e:	d801      	bhi.n	8006214 <_strtol_l.isra.0+0x10>
 8006210:	2b01      	cmp	r3, #1
 8006212:	d106      	bne.n	8006222 <_strtol_l.isra.0+0x1e>
 8006214:	f000 ffe8 	bl	80071e8 <__errno>
 8006218:	2316      	movs	r3, #22
 800621a:	6003      	str	r3, [r0, #0]
 800621c:	2000      	movs	r0, #0
 800621e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006222:	4834      	ldr	r0, [pc, #208]	@ (80062f4 <_strtol_l.isra.0+0xf0>)
 8006224:	460d      	mov	r5, r1
 8006226:	462a      	mov	r2, r5
 8006228:	f815 4b01 	ldrb.w	r4, [r5], #1
 800622c:	5d06      	ldrb	r6, [r0, r4]
 800622e:	f016 0608 	ands.w	r6, r6, #8
 8006232:	d1f8      	bne.n	8006226 <_strtol_l.isra.0+0x22>
 8006234:	2c2d      	cmp	r4, #45	@ 0x2d
 8006236:	d110      	bne.n	800625a <_strtol_l.isra.0+0x56>
 8006238:	782c      	ldrb	r4, [r5, #0]
 800623a:	2601      	movs	r6, #1
 800623c:	1c95      	adds	r5, r2, #2
 800623e:	f033 0210 	bics.w	r2, r3, #16
 8006242:	d115      	bne.n	8006270 <_strtol_l.isra.0+0x6c>
 8006244:	2c30      	cmp	r4, #48	@ 0x30
 8006246:	d10d      	bne.n	8006264 <_strtol_l.isra.0+0x60>
 8006248:	782a      	ldrb	r2, [r5, #0]
 800624a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800624e:	2a58      	cmp	r2, #88	@ 0x58
 8006250:	d108      	bne.n	8006264 <_strtol_l.isra.0+0x60>
 8006252:	786c      	ldrb	r4, [r5, #1]
 8006254:	3502      	adds	r5, #2
 8006256:	2310      	movs	r3, #16
 8006258:	e00a      	b.n	8006270 <_strtol_l.isra.0+0x6c>
 800625a:	2c2b      	cmp	r4, #43	@ 0x2b
 800625c:	bf04      	itt	eq
 800625e:	782c      	ldrbeq	r4, [r5, #0]
 8006260:	1c95      	addeq	r5, r2, #2
 8006262:	e7ec      	b.n	800623e <_strtol_l.isra.0+0x3a>
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1f6      	bne.n	8006256 <_strtol_l.isra.0+0x52>
 8006268:	2c30      	cmp	r4, #48	@ 0x30
 800626a:	bf14      	ite	ne
 800626c:	230a      	movne	r3, #10
 800626e:	2308      	moveq	r3, #8
 8006270:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006274:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006278:	2200      	movs	r2, #0
 800627a:	fbbc f9f3 	udiv	r9, ip, r3
 800627e:	4610      	mov	r0, r2
 8006280:	fb03 ca19 	mls	sl, r3, r9, ip
 8006284:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006288:	2f09      	cmp	r7, #9
 800628a:	d80f      	bhi.n	80062ac <_strtol_l.isra.0+0xa8>
 800628c:	463c      	mov	r4, r7
 800628e:	42a3      	cmp	r3, r4
 8006290:	dd1b      	ble.n	80062ca <_strtol_l.isra.0+0xc6>
 8006292:	1c57      	adds	r7, r2, #1
 8006294:	d007      	beq.n	80062a6 <_strtol_l.isra.0+0xa2>
 8006296:	4581      	cmp	r9, r0
 8006298:	d314      	bcc.n	80062c4 <_strtol_l.isra.0+0xc0>
 800629a:	d101      	bne.n	80062a0 <_strtol_l.isra.0+0x9c>
 800629c:	45a2      	cmp	sl, r4
 800629e:	db11      	blt.n	80062c4 <_strtol_l.isra.0+0xc0>
 80062a0:	fb00 4003 	mla	r0, r0, r3, r4
 80062a4:	2201      	movs	r2, #1
 80062a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062aa:	e7eb      	b.n	8006284 <_strtol_l.isra.0+0x80>
 80062ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80062b0:	2f19      	cmp	r7, #25
 80062b2:	d801      	bhi.n	80062b8 <_strtol_l.isra.0+0xb4>
 80062b4:	3c37      	subs	r4, #55	@ 0x37
 80062b6:	e7ea      	b.n	800628e <_strtol_l.isra.0+0x8a>
 80062b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80062bc:	2f19      	cmp	r7, #25
 80062be:	d804      	bhi.n	80062ca <_strtol_l.isra.0+0xc6>
 80062c0:	3c57      	subs	r4, #87	@ 0x57
 80062c2:	e7e4      	b.n	800628e <_strtol_l.isra.0+0x8a>
 80062c4:	f04f 32ff 	mov.w	r2, #4294967295
 80062c8:	e7ed      	b.n	80062a6 <_strtol_l.isra.0+0xa2>
 80062ca:	1c53      	adds	r3, r2, #1
 80062cc:	d108      	bne.n	80062e0 <_strtol_l.isra.0+0xdc>
 80062ce:	2322      	movs	r3, #34	@ 0x22
 80062d0:	f8ce 3000 	str.w	r3, [lr]
 80062d4:	4660      	mov	r0, ip
 80062d6:	f1b8 0f00 	cmp.w	r8, #0
 80062da:	d0a0      	beq.n	800621e <_strtol_l.isra.0+0x1a>
 80062dc:	1e69      	subs	r1, r5, #1
 80062de:	e006      	b.n	80062ee <_strtol_l.isra.0+0xea>
 80062e0:	b106      	cbz	r6, 80062e4 <_strtol_l.isra.0+0xe0>
 80062e2:	4240      	negs	r0, r0
 80062e4:	f1b8 0f00 	cmp.w	r8, #0
 80062e8:	d099      	beq.n	800621e <_strtol_l.isra.0+0x1a>
 80062ea:	2a00      	cmp	r2, #0
 80062ec:	d1f6      	bne.n	80062dc <_strtol_l.isra.0+0xd8>
 80062ee:	f8c8 1000 	str.w	r1, [r8]
 80062f2:	e794      	b.n	800621e <_strtol_l.isra.0+0x1a>
 80062f4:	080095e9 	.word	0x080095e9

080062f8 <strtol>:
 80062f8:	4613      	mov	r3, r2
 80062fa:	460a      	mov	r2, r1
 80062fc:	4601      	mov	r1, r0
 80062fe:	4802      	ldr	r0, [pc, #8]	@ (8006308 <strtol+0x10>)
 8006300:	6800      	ldr	r0, [r0, #0]
 8006302:	f7ff bf7f 	b.w	8006204 <_strtol_l.isra.0>
 8006306:	bf00      	nop
 8006308:	2000001c 	.word	0x2000001c

0800630c <__cvt>:
 800630c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006310:	ec57 6b10 	vmov	r6, r7, d0
 8006314:	2f00      	cmp	r7, #0
 8006316:	460c      	mov	r4, r1
 8006318:	4619      	mov	r1, r3
 800631a:	463b      	mov	r3, r7
 800631c:	bfbb      	ittet	lt
 800631e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006322:	461f      	movlt	r7, r3
 8006324:	2300      	movge	r3, #0
 8006326:	232d      	movlt	r3, #45	@ 0x2d
 8006328:	700b      	strb	r3, [r1, #0]
 800632a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800632c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006330:	4691      	mov	r9, r2
 8006332:	f023 0820 	bic.w	r8, r3, #32
 8006336:	bfbc      	itt	lt
 8006338:	4632      	movlt	r2, r6
 800633a:	4616      	movlt	r6, r2
 800633c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006340:	d005      	beq.n	800634e <__cvt+0x42>
 8006342:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006346:	d100      	bne.n	800634a <__cvt+0x3e>
 8006348:	3401      	adds	r4, #1
 800634a:	2102      	movs	r1, #2
 800634c:	e000      	b.n	8006350 <__cvt+0x44>
 800634e:	2103      	movs	r1, #3
 8006350:	ab03      	add	r3, sp, #12
 8006352:	9301      	str	r3, [sp, #4]
 8006354:	ab02      	add	r3, sp, #8
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	ec47 6b10 	vmov	d0, r6, r7
 800635c:	4653      	mov	r3, sl
 800635e:	4622      	mov	r2, r4
 8006360:	f001 f82e 	bl	80073c0 <_dtoa_r>
 8006364:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006368:	4605      	mov	r5, r0
 800636a:	d119      	bne.n	80063a0 <__cvt+0x94>
 800636c:	f019 0f01 	tst.w	r9, #1
 8006370:	d00e      	beq.n	8006390 <__cvt+0x84>
 8006372:	eb00 0904 	add.w	r9, r0, r4
 8006376:	2200      	movs	r2, #0
 8006378:	2300      	movs	r3, #0
 800637a:	4630      	mov	r0, r6
 800637c:	4639      	mov	r1, r7
 800637e:	f7fa fbbb 	bl	8000af8 <__aeabi_dcmpeq>
 8006382:	b108      	cbz	r0, 8006388 <__cvt+0x7c>
 8006384:	f8cd 900c 	str.w	r9, [sp, #12]
 8006388:	2230      	movs	r2, #48	@ 0x30
 800638a:	9b03      	ldr	r3, [sp, #12]
 800638c:	454b      	cmp	r3, r9
 800638e:	d31e      	bcc.n	80063ce <__cvt+0xc2>
 8006390:	9b03      	ldr	r3, [sp, #12]
 8006392:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006394:	1b5b      	subs	r3, r3, r5
 8006396:	4628      	mov	r0, r5
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	b004      	add	sp, #16
 800639c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063a4:	eb00 0904 	add.w	r9, r0, r4
 80063a8:	d1e5      	bne.n	8006376 <__cvt+0x6a>
 80063aa:	7803      	ldrb	r3, [r0, #0]
 80063ac:	2b30      	cmp	r3, #48	@ 0x30
 80063ae:	d10a      	bne.n	80063c6 <__cvt+0xba>
 80063b0:	2200      	movs	r2, #0
 80063b2:	2300      	movs	r3, #0
 80063b4:	4630      	mov	r0, r6
 80063b6:	4639      	mov	r1, r7
 80063b8:	f7fa fb9e 	bl	8000af8 <__aeabi_dcmpeq>
 80063bc:	b918      	cbnz	r0, 80063c6 <__cvt+0xba>
 80063be:	f1c4 0401 	rsb	r4, r4, #1
 80063c2:	f8ca 4000 	str.w	r4, [sl]
 80063c6:	f8da 3000 	ldr.w	r3, [sl]
 80063ca:	4499      	add	r9, r3
 80063cc:	e7d3      	b.n	8006376 <__cvt+0x6a>
 80063ce:	1c59      	adds	r1, r3, #1
 80063d0:	9103      	str	r1, [sp, #12]
 80063d2:	701a      	strb	r2, [r3, #0]
 80063d4:	e7d9      	b.n	800638a <__cvt+0x7e>

080063d6 <__exponent>:
 80063d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063d8:	2900      	cmp	r1, #0
 80063da:	bfba      	itte	lt
 80063dc:	4249      	neglt	r1, r1
 80063de:	232d      	movlt	r3, #45	@ 0x2d
 80063e0:	232b      	movge	r3, #43	@ 0x2b
 80063e2:	2909      	cmp	r1, #9
 80063e4:	7002      	strb	r2, [r0, #0]
 80063e6:	7043      	strb	r3, [r0, #1]
 80063e8:	dd29      	ble.n	800643e <__exponent+0x68>
 80063ea:	f10d 0307 	add.w	r3, sp, #7
 80063ee:	461d      	mov	r5, r3
 80063f0:	270a      	movs	r7, #10
 80063f2:	461a      	mov	r2, r3
 80063f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80063f8:	fb07 1416 	mls	r4, r7, r6, r1
 80063fc:	3430      	adds	r4, #48	@ 0x30
 80063fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006402:	460c      	mov	r4, r1
 8006404:	2c63      	cmp	r4, #99	@ 0x63
 8006406:	f103 33ff 	add.w	r3, r3, #4294967295
 800640a:	4631      	mov	r1, r6
 800640c:	dcf1      	bgt.n	80063f2 <__exponent+0x1c>
 800640e:	3130      	adds	r1, #48	@ 0x30
 8006410:	1e94      	subs	r4, r2, #2
 8006412:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006416:	1c41      	adds	r1, r0, #1
 8006418:	4623      	mov	r3, r4
 800641a:	42ab      	cmp	r3, r5
 800641c:	d30a      	bcc.n	8006434 <__exponent+0x5e>
 800641e:	f10d 0309 	add.w	r3, sp, #9
 8006422:	1a9b      	subs	r3, r3, r2
 8006424:	42ac      	cmp	r4, r5
 8006426:	bf88      	it	hi
 8006428:	2300      	movhi	r3, #0
 800642a:	3302      	adds	r3, #2
 800642c:	4403      	add	r3, r0
 800642e:	1a18      	subs	r0, r3, r0
 8006430:	b003      	add	sp, #12
 8006432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006434:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006438:	f801 6f01 	strb.w	r6, [r1, #1]!
 800643c:	e7ed      	b.n	800641a <__exponent+0x44>
 800643e:	2330      	movs	r3, #48	@ 0x30
 8006440:	3130      	adds	r1, #48	@ 0x30
 8006442:	7083      	strb	r3, [r0, #2]
 8006444:	70c1      	strb	r1, [r0, #3]
 8006446:	1d03      	adds	r3, r0, #4
 8006448:	e7f1      	b.n	800642e <__exponent+0x58>
	...

0800644c <_printf_float>:
 800644c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006450:	b08d      	sub	sp, #52	@ 0x34
 8006452:	460c      	mov	r4, r1
 8006454:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006458:	4616      	mov	r6, r2
 800645a:	461f      	mov	r7, r3
 800645c:	4605      	mov	r5, r0
 800645e:	f000 fe79 	bl	8007154 <_localeconv_r>
 8006462:	6803      	ldr	r3, [r0, #0]
 8006464:	9304      	str	r3, [sp, #16]
 8006466:	4618      	mov	r0, r3
 8006468:	f7f9 ff1a 	bl	80002a0 <strlen>
 800646c:	2300      	movs	r3, #0
 800646e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006470:	f8d8 3000 	ldr.w	r3, [r8]
 8006474:	9005      	str	r0, [sp, #20]
 8006476:	3307      	adds	r3, #7
 8006478:	f023 0307 	bic.w	r3, r3, #7
 800647c:	f103 0208 	add.w	r2, r3, #8
 8006480:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006484:	f8d4 b000 	ldr.w	fp, [r4]
 8006488:	f8c8 2000 	str.w	r2, [r8]
 800648c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006490:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006494:	9307      	str	r3, [sp, #28]
 8006496:	f8cd 8018 	str.w	r8, [sp, #24]
 800649a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800649e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064a2:	4b9c      	ldr	r3, [pc, #624]	@ (8006714 <_printf_float+0x2c8>)
 80064a4:	f04f 32ff 	mov.w	r2, #4294967295
 80064a8:	f7fa fb58 	bl	8000b5c <__aeabi_dcmpun>
 80064ac:	bb70      	cbnz	r0, 800650c <_printf_float+0xc0>
 80064ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064b2:	4b98      	ldr	r3, [pc, #608]	@ (8006714 <_printf_float+0x2c8>)
 80064b4:	f04f 32ff 	mov.w	r2, #4294967295
 80064b8:	f7fa fb32 	bl	8000b20 <__aeabi_dcmple>
 80064bc:	bb30      	cbnz	r0, 800650c <_printf_float+0xc0>
 80064be:	2200      	movs	r2, #0
 80064c0:	2300      	movs	r3, #0
 80064c2:	4640      	mov	r0, r8
 80064c4:	4649      	mov	r1, r9
 80064c6:	f7fa fb21 	bl	8000b0c <__aeabi_dcmplt>
 80064ca:	b110      	cbz	r0, 80064d2 <_printf_float+0x86>
 80064cc:	232d      	movs	r3, #45	@ 0x2d
 80064ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064d2:	4a91      	ldr	r2, [pc, #580]	@ (8006718 <_printf_float+0x2cc>)
 80064d4:	4b91      	ldr	r3, [pc, #580]	@ (800671c <_printf_float+0x2d0>)
 80064d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80064da:	bf8c      	ite	hi
 80064dc:	4690      	movhi	r8, r2
 80064de:	4698      	movls	r8, r3
 80064e0:	2303      	movs	r3, #3
 80064e2:	6123      	str	r3, [r4, #16]
 80064e4:	f02b 0304 	bic.w	r3, fp, #4
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	f04f 0900 	mov.w	r9, #0
 80064ee:	9700      	str	r7, [sp, #0]
 80064f0:	4633      	mov	r3, r6
 80064f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80064f4:	4621      	mov	r1, r4
 80064f6:	4628      	mov	r0, r5
 80064f8:	f000 f9d2 	bl	80068a0 <_printf_common>
 80064fc:	3001      	adds	r0, #1
 80064fe:	f040 808d 	bne.w	800661c <_printf_float+0x1d0>
 8006502:	f04f 30ff 	mov.w	r0, #4294967295
 8006506:	b00d      	add	sp, #52	@ 0x34
 8006508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650c:	4642      	mov	r2, r8
 800650e:	464b      	mov	r3, r9
 8006510:	4640      	mov	r0, r8
 8006512:	4649      	mov	r1, r9
 8006514:	f7fa fb22 	bl	8000b5c <__aeabi_dcmpun>
 8006518:	b140      	cbz	r0, 800652c <_printf_float+0xe0>
 800651a:	464b      	mov	r3, r9
 800651c:	2b00      	cmp	r3, #0
 800651e:	bfbc      	itt	lt
 8006520:	232d      	movlt	r3, #45	@ 0x2d
 8006522:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006526:	4a7e      	ldr	r2, [pc, #504]	@ (8006720 <_printf_float+0x2d4>)
 8006528:	4b7e      	ldr	r3, [pc, #504]	@ (8006724 <_printf_float+0x2d8>)
 800652a:	e7d4      	b.n	80064d6 <_printf_float+0x8a>
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006532:	9206      	str	r2, [sp, #24]
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	d13b      	bne.n	80065b0 <_printf_float+0x164>
 8006538:	2306      	movs	r3, #6
 800653a:	6063      	str	r3, [r4, #4]
 800653c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006540:	2300      	movs	r3, #0
 8006542:	6022      	str	r2, [r4, #0]
 8006544:	9303      	str	r3, [sp, #12]
 8006546:	ab0a      	add	r3, sp, #40	@ 0x28
 8006548:	e9cd a301 	strd	sl, r3, [sp, #4]
 800654c:	ab09      	add	r3, sp, #36	@ 0x24
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	6861      	ldr	r1, [r4, #4]
 8006552:	ec49 8b10 	vmov	d0, r8, r9
 8006556:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800655a:	4628      	mov	r0, r5
 800655c:	f7ff fed6 	bl	800630c <__cvt>
 8006560:	9b06      	ldr	r3, [sp, #24]
 8006562:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006564:	2b47      	cmp	r3, #71	@ 0x47
 8006566:	4680      	mov	r8, r0
 8006568:	d129      	bne.n	80065be <_printf_float+0x172>
 800656a:	1cc8      	adds	r0, r1, #3
 800656c:	db02      	blt.n	8006574 <_printf_float+0x128>
 800656e:	6863      	ldr	r3, [r4, #4]
 8006570:	4299      	cmp	r1, r3
 8006572:	dd41      	ble.n	80065f8 <_printf_float+0x1ac>
 8006574:	f1aa 0a02 	sub.w	sl, sl, #2
 8006578:	fa5f fa8a 	uxtb.w	sl, sl
 800657c:	3901      	subs	r1, #1
 800657e:	4652      	mov	r2, sl
 8006580:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006584:	9109      	str	r1, [sp, #36]	@ 0x24
 8006586:	f7ff ff26 	bl	80063d6 <__exponent>
 800658a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800658c:	1813      	adds	r3, r2, r0
 800658e:	2a01      	cmp	r2, #1
 8006590:	4681      	mov	r9, r0
 8006592:	6123      	str	r3, [r4, #16]
 8006594:	dc02      	bgt.n	800659c <_printf_float+0x150>
 8006596:	6822      	ldr	r2, [r4, #0]
 8006598:	07d2      	lsls	r2, r2, #31
 800659a:	d501      	bpl.n	80065a0 <_printf_float+0x154>
 800659c:	3301      	adds	r3, #1
 800659e:	6123      	str	r3, [r4, #16]
 80065a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0a2      	beq.n	80064ee <_printf_float+0xa2>
 80065a8:	232d      	movs	r3, #45	@ 0x2d
 80065aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065ae:	e79e      	b.n	80064ee <_printf_float+0xa2>
 80065b0:	9a06      	ldr	r2, [sp, #24]
 80065b2:	2a47      	cmp	r2, #71	@ 0x47
 80065b4:	d1c2      	bne.n	800653c <_printf_float+0xf0>
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1c0      	bne.n	800653c <_printf_float+0xf0>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e7bd      	b.n	800653a <_printf_float+0xee>
 80065be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80065c2:	d9db      	bls.n	800657c <_printf_float+0x130>
 80065c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80065c8:	d118      	bne.n	80065fc <_printf_float+0x1b0>
 80065ca:	2900      	cmp	r1, #0
 80065cc:	6863      	ldr	r3, [r4, #4]
 80065ce:	dd0b      	ble.n	80065e8 <_printf_float+0x19c>
 80065d0:	6121      	str	r1, [r4, #16]
 80065d2:	b913      	cbnz	r3, 80065da <_printf_float+0x18e>
 80065d4:	6822      	ldr	r2, [r4, #0]
 80065d6:	07d0      	lsls	r0, r2, #31
 80065d8:	d502      	bpl.n	80065e0 <_printf_float+0x194>
 80065da:	3301      	adds	r3, #1
 80065dc:	440b      	add	r3, r1
 80065de:	6123      	str	r3, [r4, #16]
 80065e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80065e2:	f04f 0900 	mov.w	r9, #0
 80065e6:	e7db      	b.n	80065a0 <_printf_float+0x154>
 80065e8:	b913      	cbnz	r3, 80065f0 <_printf_float+0x1a4>
 80065ea:	6822      	ldr	r2, [r4, #0]
 80065ec:	07d2      	lsls	r2, r2, #31
 80065ee:	d501      	bpl.n	80065f4 <_printf_float+0x1a8>
 80065f0:	3302      	adds	r3, #2
 80065f2:	e7f4      	b.n	80065de <_printf_float+0x192>
 80065f4:	2301      	movs	r3, #1
 80065f6:	e7f2      	b.n	80065de <_printf_float+0x192>
 80065f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80065fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065fe:	4299      	cmp	r1, r3
 8006600:	db05      	blt.n	800660e <_printf_float+0x1c2>
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	6121      	str	r1, [r4, #16]
 8006606:	07d8      	lsls	r0, r3, #31
 8006608:	d5ea      	bpl.n	80065e0 <_printf_float+0x194>
 800660a:	1c4b      	adds	r3, r1, #1
 800660c:	e7e7      	b.n	80065de <_printf_float+0x192>
 800660e:	2900      	cmp	r1, #0
 8006610:	bfd4      	ite	le
 8006612:	f1c1 0202 	rsble	r2, r1, #2
 8006616:	2201      	movgt	r2, #1
 8006618:	4413      	add	r3, r2
 800661a:	e7e0      	b.n	80065de <_printf_float+0x192>
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	055a      	lsls	r2, r3, #21
 8006620:	d407      	bmi.n	8006632 <_printf_float+0x1e6>
 8006622:	6923      	ldr	r3, [r4, #16]
 8006624:	4642      	mov	r2, r8
 8006626:	4631      	mov	r1, r6
 8006628:	4628      	mov	r0, r5
 800662a:	47b8      	blx	r7
 800662c:	3001      	adds	r0, #1
 800662e:	d12b      	bne.n	8006688 <_printf_float+0x23c>
 8006630:	e767      	b.n	8006502 <_printf_float+0xb6>
 8006632:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006636:	f240 80dd 	bls.w	80067f4 <_printf_float+0x3a8>
 800663a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800663e:	2200      	movs	r2, #0
 8006640:	2300      	movs	r3, #0
 8006642:	f7fa fa59 	bl	8000af8 <__aeabi_dcmpeq>
 8006646:	2800      	cmp	r0, #0
 8006648:	d033      	beq.n	80066b2 <_printf_float+0x266>
 800664a:	4a37      	ldr	r2, [pc, #220]	@ (8006728 <_printf_float+0x2dc>)
 800664c:	2301      	movs	r3, #1
 800664e:	4631      	mov	r1, r6
 8006650:	4628      	mov	r0, r5
 8006652:	47b8      	blx	r7
 8006654:	3001      	adds	r0, #1
 8006656:	f43f af54 	beq.w	8006502 <_printf_float+0xb6>
 800665a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800665e:	4543      	cmp	r3, r8
 8006660:	db02      	blt.n	8006668 <_printf_float+0x21c>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	07d8      	lsls	r0, r3, #31
 8006666:	d50f      	bpl.n	8006688 <_printf_float+0x23c>
 8006668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800666c:	4631      	mov	r1, r6
 800666e:	4628      	mov	r0, r5
 8006670:	47b8      	blx	r7
 8006672:	3001      	adds	r0, #1
 8006674:	f43f af45 	beq.w	8006502 <_printf_float+0xb6>
 8006678:	f04f 0900 	mov.w	r9, #0
 800667c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006680:	f104 0a1a 	add.w	sl, r4, #26
 8006684:	45c8      	cmp	r8, r9
 8006686:	dc09      	bgt.n	800669c <_printf_float+0x250>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	079b      	lsls	r3, r3, #30
 800668c:	f100 8103 	bmi.w	8006896 <_printf_float+0x44a>
 8006690:	68e0      	ldr	r0, [r4, #12]
 8006692:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006694:	4298      	cmp	r0, r3
 8006696:	bfb8      	it	lt
 8006698:	4618      	movlt	r0, r3
 800669a:	e734      	b.n	8006506 <_printf_float+0xba>
 800669c:	2301      	movs	r3, #1
 800669e:	4652      	mov	r2, sl
 80066a0:	4631      	mov	r1, r6
 80066a2:	4628      	mov	r0, r5
 80066a4:	47b8      	blx	r7
 80066a6:	3001      	adds	r0, #1
 80066a8:	f43f af2b 	beq.w	8006502 <_printf_float+0xb6>
 80066ac:	f109 0901 	add.w	r9, r9, #1
 80066b0:	e7e8      	b.n	8006684 <_printf_float+0x238>
 80066b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	dc39      	bgt.n	800672c <_printf_float+0x2e0>
 80066b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006728 <_printf_float+0x2dc>)
 80066ba:	2301      	movs	r3, #1
 80066bc:	4631      	mov	r1, r6
 80066be:	4628      	mov	r0, r5
 80066c0:	47b8      	blx	r7
 80066c2:	3001      	adds	r0, #1
 80066c4:	f43f af1d 	beq.w	8006502 <_printf_float+0xb6>
 80066c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80066cc:	ea59 0303 	orrs.w	r3, r9, r3
 80066d0:	d102      	bne.n	80066d8 <_printf_float+0x28c>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	07d9      	lsls	r1, r3, #31
 80066d6:	d5d7      	bpl.n	8006688 <_printf_float+0x23c>
 80066d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066dc:	4631      	mov	r1, r6
 80066de:	4628      	mov	r0, r5
 80066e0:	47b8      	blx	r7
 80066e2:	3001      	adds	r0, #1
 80066e4:	f43f af0d 	beq.w	8006502 <_printf_float+0xb6>
 80066e8:	f04f 0a00 	mov.w	sl, #0
 80066ec:	f104 0b1a 	add.w	fp, r4, #26
 80066f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066f2:	425b      	negs	r3, r3
 80066f4:	4553      	cmp	r3, sl
 80066f6:	dc01      	bgt.n	80066fc <_printf_float+0x2b0>
 80066f8:	464b      	mov	r3, r9
 80066fa:	e793      	b.n	8006624 <_printf_float+0x1d8>
 80066fc:	2301      	movs	r3, #1
 80066fe:	465a      	mov	r2, fp
 8006700:	4631      	mov	r1, r6
 8006702:	4628      	mov	r0, r5
 8006704:	47b8      	blx	r7
 8006706:	3001      	adds	r0, #1
 8006708:	f43f aefb 	beq.w	8006502 <_printf_float+0xb6>
 800670c:	f10a 0a01 	add.w	sl, sl, #1
 8006710:	e7ee      	b.n	80066f0 <_printf_float+0x2a4>
 8006712:	bf00      	nop
 8006714:	7fefffff 	.word	0x7fefffff
 8006718:	080096ed 	.word	0x080096ed
 800671c:	080096e9 	.word	0x080096e9
 8006720:	080096f5 	.word	0x080096f5
 8006724:	080096f1 	.word	0x080096f1
 8006728:	080096f9 	.word	0x080096f9
 800672c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800672e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006732:	4553      	cmp	r3, sl
 8006734:	bfa8      	it	ge
 8006736:	4653      	movge	r3, sl
 8006738:	2b00      	cmp	r3, #0
 800673a:	4699      	mov	r9, r3
 800673c:	dc36      	bgt.n	80067ac <_printf_float+0x360>
 800673e:	f04f 0b00 	mov.w	fp, #0
 8006742:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006746:	f104 021a 	add.w	r2, r4, #26
 800674a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800674c:	9306      	str	r3, [sp, #24]
 800674e:	eba3 0309 	sub.w	r3, r3, r9
 8006752:	455b      	cmp	r3, fp
 8006754:	dc31      	bgt.n	80067ba <_printf_float+0x36e>
 8006756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006758:	459a      	cmp	sl, r3
 800675a:	dc3a      	bgt.n	80067d2 <_printf_float+0x386>
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	07da      	lsls	r2, r3, #31
 8006760:	d437      	bmi.n	80067d2 <_printf_float+0x386>
 8006762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006764:	ebaa 0903 	sub.w	r9, sl, r3
 8006768:	9b06      	ldr	r3, [sp, #24]
 800676a:	ebaa 0303 	sub.w	r3, sl, r3
 800676e:	4599      	cmp	r9, r3
 8006770:	bfa8      	it	ge
 8006772:	4699      	movge	r9, r3
 8006774:	f1b9 0f00 	cmp.w	r9, #0
 8006778:	dc33      	bgt.n	80067e2 <_printf_float+0x396>
 800677a:	f04f 0800 	mov.w	r8, #0
 800677e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006782:	f104 0b1a 	add.w	fp, r4, #26
 8006786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006788:	ebaa 0303 	sub.w	r3, sl, r3
 800678c:	eba3 0309 	sub.w	r3, r3, r9
 8006790:	4543      	cmp	r3, r8
 8006792:	f77f af79 	ble.w	8006688 <_printf_float+0x23c>
 8006796:	2301      	movs	r3, #1
 8006798:	465a      	mov	r2, fp
 800679a:	4631      	mov	r1, r6
 800679c:	4628      	mov	r0, r5
 800679e:	47b8      	blx	r7
 80067a0:	3001      	adds	r0, #1
 80067a2:	f43f aeae 	beq.w	8006502 <_printf_float+0xb6>
 80067a6:	f108 0801 	add.w	r8, r8, #1
 80067aa:	e7ec      	b.n	8006786 <_printf_float+0x33a>
 80067ac:	4642      	mov	r2, r8
 80067ae:	4631      	mov	r1, r6
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b8      	blx	r7
 80067b4:	3001      	adds	r0, #1
 80067b6:	d1c2      	bne.n	800673e <_printf_float+0x2f2>
 80067b8:	e6a3      	b.n	8006502 <_printf_float+0xb6>
 80067ba:	2301      	movs	r3, #1
 80067bc:	4631      	mov	r1, r6
 80067be:	4628      	mov	r0, r5
 80067c0:	9206      	str	r2, [sp, #24]
 80067c2:	47b8      	blx	r7
 80067c4:	3001      	adds	r0, #1
 80067c6:	f43f ae9c 	beq.w	8006502 <_printf_float+0xb6>
 80067ca:	9a06      	ldr	r2, [sp, #24]
 80067cc:	f10b 0b01 	add.w	fp, fp, #1
 80067d0:	e7bb      	b.n	800674a <_printf_float+0x2fe>
 80067d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067d6:	4631      	mov	r1, r6
 80067d8:	4628      	mov	r0, r5
 80067da:	47b8      	blx	r7
 80067dc:	3001      	adds	r0, #1
 80067de:	d1c0      	bne.n	8006762 <_printf_float+0x316>
 80067e0:	e68f      	b.n	8006502 <_printf_float+0xb6>
 80067e2:	9a06      	ldr	r2, [sp, #24]
 80067e4:	464b      	mov	r3, r9
 80067e6:	4442      	add	r2, r8
 80067e8:	4631      	mov	r1, r6
 80067ea:	4628      	mov	r0, r5
 80067ec:	47b8      	blx	r7
 80067ee:	3001      	adds	r0, #1
 80067f0:	d1c3      	bne.n	800677a <_printf_float+0x32e>
 80067f2:	e686      	b.n	8006502 <_printf_float+0xb6>
 80067f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067f8:	f1ba 0f01 	cmp.w	sl, #1
 80067fc:	dc01      	bgt.n	8006802 <_printf_float+0x3b6>
 80067fe:	07db      	lsls	r3, r3, #31
 8006800:	d536      	bpl.n	8006870 <_printf_float+0x424>
 8006802:	2301      	movs	r3, #1
 8006804:	4642      	mov	r2, r8
 8006806:	4631      	mov	r1, r6
 8006808:	4628      	mov	r0, r5
 800680a:	47b8      	blx	r7
 800680c:	3001      	adds	r0, #1
 800680e:	f43f ae78 	beq.w	8006502 <_printf_float+0xb6>
 8006812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006816:	4631      	mov	r1, r6
 8006818:	4628      	mov	r0, r5
 800681a:	47b8      	blx	r7
 800681c:	3001      	adds	r0, #1
 800681e:	f43f ae70 	beq.w	8006502 <_printf_float+0xb6>
 8006822:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006826:	2200      	movs	r2, #0
 8006828:	2300      	movs	r3, #0
 800682a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800682e:	f7fa f963 	bl	8000af8 <__aeabi_dcmpeq>
 8006832:	b9c0      	cbnz	r0, 8006866 <_printf_float+0x41a>
 8006834:	4653      	mov	r3, sl
 8006836:	f108 0201 	add.w	r2, r8, #1
 800683a:	4631      	mov	r1, r6
 800683c:	4628      	mov	r0, r5
 800683e:	47b8      	blx	r7
 8006840:	3001      	adds	r0, #1
 8006842:	d10c      	bne.n	800685e <_printf_float+0x412>
 8006844:	e65d      	b.n	8006502 <_printf_float+0xb6>
 8006846:	2301      	movs	r3, #1
 8006848:	465a      	mov	r2, fp
 800684a:	4631      	mov	r1, r6
 800684c:	4628      	mov	r0, r5
 800684e:	47b8      	blx	r7
 8006850:	3001      	adds	r0, #1
 8006852:	f43f ae56 	beq.w	8006502 <_printf_float+0xb6>
 8006856:	f108 0801 	add.w	r8, r8, #1
 800685a:	45d0      	cmp	r8, sl
 800685c:	dbf3      	blt.n	8006846 <_printf_float+0x3fa>
 800685e:	464b      	mov	r3, r9
 8006860:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006864:	e6df      	b.n	8006626 <_printf_float+0x1da>
 8006866:	f04f 0800 	mov.w	r8, #0
 800686a:	f104 0b1a 	add.w	fp, r4, #26
 800686e:	e7f4      	b.n	800685a <_printf_float+0x40e>
 8006870:	2301      	movs	r3, #1
 8006872:	4642      	mov	r2, r8
 8006874:	e7e1      	b.n	800683a <_printf_float+0x3ee>
 8006876:	2301      	movs	r3, #1
 8006878:	464a      	mov	r2, r9
 800687a:	4631      	mov	r1, r6
 800687c:	4628      	mov	r0, r5
 800687e:	47b8      	blx	r7
 8006880:	3001      	adds	r0, #1
 8006882:	f43f ae3e 	beq.w	8006502 <_printf_float+0xb6>
 8006886:	f108 0801 	add.w	r8, r8, #1
 800688a:	68e3      	ldr	r3, [r4, #12]
 800688c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800688e:	1a5b      	subs	r3, r3, r1
 8006890:	4543      	cmp	r3, r8
 8006892:	dcf0      	bgt.n	8006876 <_printf_float+0x42a>
 8006894:	e6fc      	b.n	8006690 <_printf_float+0x244>
 8006896:	f04f 0800 	mov.w	r8, #0
 800689a:	f104 0919 	add.w	r9, r4, #25
 800689e:	e7f4      	b.n	800688a <_printf_float+0x43e>

080068a0 <_printf_common>:
 80068a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a4:	4616      	mov	r6, r2
 80068a6:	4698      	mov	r8, r3
 80068a8:	688a      	ldr	r2, [r1, #8]
 80068aa:	690b      	ldr	r3, [r1, #16]
 80068ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068b0:	4293      	cmp	r3, r2
 80068b2:	bfb8      	it	lt
 80068b4:	4613      	movlt	r3, r2
 80068b6:	6033      	str	r3, [r6, #0]
 80068b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068bc:	4607      	mov	r7, r0
 80068be:	460c      	mov	r4, r1
 80068c0:	b10a      	cbz	r2, 80068c6 <_printf_common+0x26>
 80068c2:	3301      	adds	r3, #1
 80068c4:	6033      	str	r3, [r6, #0]
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	0699      	lsls	r1, r3, #26
 80068ca:	bf42      	ittt	mi
 80068cc:	6833      	ldrmi	r3, [r6, #0]
 80068ce:	3302      	addmi	r3, #2
 80068d0:	6033      	strmi	r3, [r6, #0]
 80068d2:	6825      	ldr	r5, [r4, #0]
 80068d4:	f015 0506 	ands.w	r5, r5, #6
 80068d8:	d106      	bne.n	80068e8 <_printf_common+0x48>
 80068da:	f104 0a19 	add.w	sl, r4, #25
 80068de:	68e3      	ldr	r3, [r4, #12]
 80068e0:	6832      	ldr	r2, [r6, #0]
 80068e2:	1a9b      	subs	r3, r3, r2
 80068e4:	42ab      	cmp	r3, r5
 80068e6:	dc26      	bgt.n	8006936 <_printf_common+0x96>
 80068e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068ec:	6822      	ldr	r2, [r4, #0]
 80068ee:	3b00      	subs	r3, #0
 80068f0:	bf18      	it	ne
 80068f2:	2301      	movne	r3, #1
 80068f4:	0692      	lsls	r2, r2, #26
 80068f6:	d42b      	bmi.n	8006950 <_printf_common+0xb0>
 80068f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068fc:	4641      	mov	r1, r8
 80068fe:	4638      	mov	r0, r7
 8006900:	47c8      	blx	r9
 8006902:	3001      	adds	r0, #1
 8006904:	d01e      	beq.n	8006944 <_printf_common+0xa4>
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	6922      	ldr	r2, [r4, #16]
 800690a:	f003 0306 	and.w	r3, r3, #6
 800690e:	2b04      	cmp	r3, #4
 8006910:	bf02      	ittt	eq
 8006912:	68e5      	ldreq	r5, [r4, #12]
 8006914:	6833      	ldreq	r3, [r6, #0]
 8006916:	1aed      	subeq	r5, r5, r3
 8006918:	68a3      	ldr	r3, [r4, #8]
 800691a:	bf0c      	ite	eq
 800691c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006920:	2500      	movne	r5, #0
 8006922:	4293      	cmp	r3, r2
 8006924:	bfc4      	itt	gt
 8006926:	1a9b      	subgt	r3, r3, r2
 8006928:	18ed      	addgt	r5, r5, r3
 800692a:	2600      	movs	r6, #0
 800692c:	341a      	adds	r4, #26
 800692e:	42b5      	cmp	r5, r6
 8006930:	d11a      	bne.n	8006968 <_printf_common+0xc8>
 8006932:	2000      	movs	r0, #0
 8006934:	e008      	b.n	8006948 <_printf_common+0xa8>
 8006936:	2301      	movs	r3, #1
 8006938:	4652      	mov	r2, sl
 800693a:	4641      	mov	r1, r8
 800693c:	4638      	mov	r0, r7
 800693e:	47c8      	blx	r9
 8006940:	3001      	adds	r0, #1
 8006942:	d103      	bne.n	800694c <_printf_common+0xac>
 8006944:	f04f 30ff 	mov.w	r0, #4294967295
 8006948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694c:	3501      	adds	r5, #1
 800694e:	e7c6      	b.n	80068de <_printf_common+0x3e>
 8006950:	18e1      	adds	r1, r4, r3
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	2030      	movs	r0, #48	@ 0x30
 8006956:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800695a:	4422      	add	r2, r4
 800695c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006960:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006964:	3302      	adds	r3, #2
 8006966:	e7c7      	b.n	80068f8 <_printf_common+0x58>
 8006968:	2301      	movs	r3, #1
 800696a:	4622      	mov	r2, r4
 800696c:	4641      	mov	r1, r8
 800696e:	4638      	mov	r0, r7
 8006970:	47c8      	blx	r9
 8006972:	3001      	adds	r0, #1
 8006974:	d0e6      	beq.n	8006944 <_printf_common+0xa4>
 8006976:	3601      	adds	r6, #1
 8006978:	e7d9      	b.n	800692e <_printf_common+0x8e>
	...

0800697c <_printf_i>:
 800697c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006980:	7e0f      	ldrb	r7, [r1, #24]
 8006982:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006984:	2f78      	cmp	r7, #120	@ 0x78
 8006986:	4691      	mov	r9, r2
 8006988:	4680      	mov	r8, r0
 800698a:	460c      	mov	r4, r1
 800698c:	469a      	mov	sl, r3
 800698e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006992:	d807      	bhi.n	80069a4 <_printf_i+0x28>
 8006994:	2f62      	cmp	r7, #98	@ 0x62
 8006996:	d80a      	bhi.n	80069ae <_printf_i+0x32>
 8006998:	2f00      	cmp	r7, #0
 800699a:	f000 80d1 	beq.w	8006b40 <_printf_i+0x1c4>
 800699e:	2f58      	cmp	r7, #88	@ 0x58
 80069a0:	f000 80b8 	beq.w	8006b14 <_printf_i+0x198>
 80069a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069ac:	e03a      	b.n	8006a24 <_printf_i+0xa8>
 80069ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069b2:	2b15      	cmp	r3, #21
 80069b4:	d8f6      	bhi.n	80069a4 <_printf_i+0x28>
 80069b6:	a101      	add	r1, pc, #4	@ (adr r1, 80069bc <_printf_i+0x40>)
 80069b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069bc:	08006a15 	.word	0x08006a15
 80069c0:	08006a29 	.word	0x08006a29
 80069c4:	080069a5 	.word	0x080069a5
 80069c8:	080069a5 	.word	0x080069a5
 80069cc:	080069a5 	.word	0x080069a5
 80069d0:	080069a5 	.word	0x080069a5
 80069d4:	08006a29 	.word	0x08006a29
 80069d8:	080069a5 	.word	0x080069a5
 80069dc:	080069a5 	.word	0x080069a5
 80069e0:	080069a5 	.word	0x080069a5
 80069e4:	080069a5 	.word	0x080069a5
 80069e8:	08006b27 	.word	0x08006b27
 80069ec:	08006a53 	.word	0x08006a53
 80069f0:	08006ae1 	.word	0x08006ae1
 80069f4:	080069a5 	.word	0x080069a5
 80069f8:	080069a5 	.word	0x080069a5
 80069fc:	08006b49 	.word	0x08006b49
 8006a00:	080069a5 	.word	0x080069a5
 8006a04:	08006a53 	.word	0x08006a53
 8006a08:	080069a5 	.word	0x080069a5
 8006a0c:	080069a5 	.word	0x080069a5
 8006a10:	08006ae9 	.word	0x08006ae9
 8006a14:	6833      	ldr	r3, [r6, #0]
 8006a16:	1d1a      	adds	r2, r3, #4
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6032      	str	r2, [r6, #0]
 8006a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a24:	2301      	movs	r3, #1
 8006a26:	e09c      	b.n	8006b62 <_printf_i+0x1e6>
 8006a28:	6833      	ldr	r3, [r6, #0]
 8006a2a:	6820      	ldr	r0, [r4, #0]
 8006a2c:	1d19      	adds	r1, r3, #4
 8006a2e:	6031      	str	r1, [r6, #0]
 8006a30:	0606      	lsls	r6, r0, #24
 8006a32:	d501      	bpl.n	8006a38 <_printf_i+0xbc>
 8006a34:	681d      	ldr	r5, [r3, #0]
 8006a36:	e003      	b.n	8006a40 <_printf_i+0xc4>
 8006a38:	0645      	lsls	r5, r0, #25
 8006a3a:	d5fb      	bpl.n	8006a34 <_printf_i+0xb8>
 8006a3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a40:	2d00      	cmp	r5, #0
 8006a42:	da03      	bge.n	8006a4c <_printf_i+0xd0>
 8006a44:	232d      	movs	r3, #45	@ 0x2d
 8006a46:	426d      	negs	r5, r5
 8006a48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a4c:	4858      	ldr	r0, [pc, #352]	@ (8006bb0 <_printf_i+0x234>)
 8006a4e:	230a      	movs	r3, #10
 8006a50:	e011      	b.n	8006a76 <_printf_i+0xfa>
 8006a52:	6821      	ldr	r1, [r4, #0]
 8006a54:	6833      	ldr	r3, [r6, #0]
 8006a56:	0608      	lsls	r0, r1, #24
 8006a58:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a5c:	d402      	bmi.n	8006a64 <_printf_i+0xe8>
 8006a5e:	0649      	lsls	r1, r1, #25
 8006a60:	bf48      	it	mi
 8006a62:	b2ad      	uxthmi	r5, r5
 8006a64:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a66:	4852      	ldr	r0, [pc, #328]	@ (8006bb0 <_printf_i+0x234>)
 8006a68:	6033      	str	r3, [r6, #0]
 8006a6a:	bf14      	ite	ne
 8006a6c:	230a      	movne	r3, #10
 8006a6e:	2308      	moveq	r3, #8
 8006a70:	2100      	movs	r1, #0
 8006a72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a76:	6866      	ldr	r6, [r4, #4]
 8006a78:	60a6      	str	r6, [r4, #8]
 8006a7a:	2e00      	cmp	r6, #0
 8006a7c:	db05      	blt.n	8006a8a <_printf_i+0x10e>
 8006a7e:	6821      	ldr	r1, [r4, #0]
 8006a80:	432e      	orrs	r6, r5
 8006a82:	f021 0104 	bic.w	r1, r1, #4
 8006a86:	6021      	str	r1, [r4, #0]
 8006a88:	d04b      	beq.n	8006b22 <_printf_i+0x1a6>
 8006a8a:	4616      	mov	r6, r2
 8006a8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a90:	fb03 5711 	mls	r7, r3, r1, r5
 8006a94:	5dc7      	ldrb	r7, [r0, r7]
 8006a96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a9a:	462f      	mov	r7, r5
 8006a9c:	42bb      	cmp	r3, r7
 8006a9e:	460d      	mov	r5, r1
 8006aa0:	d9f4      	bls.n	8006a8c <_printf_i+0x110>
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	d10b      	bne.n	8006abe <_printf_i+0x142>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	07df      	lsls	r7, r3, #31
 8006aaa:	d508      	bpl.n	8006abe <_printf_i+0x142>
 8006aac:	6923      	ldr	r3, [r4, #16]
 8006aae:	6861      	ldr	r1, [r4, #4]
 8006ab0:	4299      	cmp	r1, r3
 8006ab2:	bfde      	ittt	le
 8006ab4:	2330      	movle	r3, #48	@ 0x30
 8006ab6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006aba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006abe:	1b92      	subs	r2, r2, r6
 8006ac0:	6122      	str	r2, [r4, #16]
 8006ac2:	f8cd a000 	str.w	sl, [sp]
 8006ac6:	464b      	mov	r3, r9
 8006ac8:	aa03      	add	r2, sp, #12
 8006aca:	4621      	mov	r1, r4
 8006acc:	4640      	mov	r0, r8
 8006ace:	f7ff fee7 	bl	80068a0 <_printf_common>
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	d14a      	bne.n	8006b6c <_printf_i+0x1f0>
 8006ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8006ada:	b004      	add	sp, #16
 8006adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	f043 0320 	orr.w	r3, r3, #32
 8006ae6:	6023      	str	r3, [r4, #0]
 8006ae8:	4832      	ldr	r0, [pc, #200]	@ (8006bb4 <_printf_i+0x238>)
 8006aea:	2778      	movs	r7, #120	@ 0x78
 8006aec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	6831      	ldr	r1, [r6, #0]
 8006af4:	061f      	lsls	r7, r3, #24
 8006af6:	f851 5b04 	ldr.w	r5, [r1], #4
 8006afa:	d402      	bmi.n	8006b02 <_printf_i+0x186>
 8006afc:	065f      	lsls	r7, r3, #25
 8006afe:	bf48      	it	mi
 8006b00:	b2ad      	uxthmi	r5, r5
 8006b02:	6031      	str	r1, [r6, #0]
 8006b04:	07d9      	lsls	r1, r3, #31
 8006b06:	bf44      	itt	mi
 8006b08:	f043 0320 	orrmi.w	r3, r3, #32
 8006b0c:	6023      	strmi	r3, [r4, #0]
 8006b0e:	b11d      	cbz	r5, 8006b18 <_printf_i+0x19c>
 8006b10:	2310      	movs	r3, #16
 8006b12:	e7ad      	b.n	8006a70 <_printf_i+0xf4>
 8006b14:	4826      	ldr	r0, [pc, #152]	@ (8006bb0 <_printf_i+0x234>)
 8006b16:	e7e9      	b.n	8006aec <_printf_i+0x170>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	f023 0320 	bic.w	r3, r3, #32
 8006b1e:	6023      	str	r3, [r4, #0]
 8006b20:	e7f6      	b.n	8006b10 <_printf_i+0x194>
 8006b22:	4616      	mov	r6, r2
 8006b24:	e7bd      	b.n	8006aa2 <_printf_i+0x126>
 8006b26:	6833      	ldr	r3, [r6, #0]
 8006b28:	6825      	ldr	r5, [r4, #0]
 8006b2a:	6961      	ldr	r1, [r4, #20]
 8006b2c:	1d18      	adds	r0, r3, #4
 8006b2e:	6030      	str	r0, [r6, #0]
 8006b30:	062e      	lsls	r6, r5, #24
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	d501      	bpl.n	8006b3a <_printf_i+0x1be>
 8006b36:	6019      	str	r1, [r3, #0]
 8006b38:	e002      	b.n	8006b40 <_printf_i+0x1c4>
 8006b3a:	0668      	lsls	r0, r5, #25
 8006b3c:	d5fb      	bpl.n	8006b36 <_printf_i+0x1ba>
 8006b3e:	8019      	strh	r1, [r3, #0]
 8006b40:	2300      	movs	r3, #0
 8006b42:	6123      	str	r3, [r4, #16]
 8006b44:	4616      	mov	r6, r2
 8006b46:	e7bc      	b.n	8006ac2 <_printf_i+0x146>
 8006b48:	6833      	ldr	r3, [r6, #0]
 8006b4a:	1d1a      	adds	r2, r3, #4
 8006b4c:	6032      	str	r2, [r6, #0]
 8006b4e:	681e      	ldr	r6, [r3, #0]
 8006b50:	6862      	ldr	r2, [r4, #4]
 8006b52:	2100      	movs	r1, #0
 8006b54:	4630      	mov	r0, r6
 8006b56:	f7f9 fb53 	bl	8000200 <memchr>
 8006b5a:	b108      	cbz	r0, 8006b60 <_printf_i+0x1e4>
 8006b5c:	1b80      	subs	r0, r0, r6
 8006b5e:	6060      	str	r0, [r4, #4]
 8006b60:	6863      	ldr	r3, [r4, #4]
 8006b62:	6123      	str	r3, [r4, #16]
 8006b64:	2300      	movs	r3, #0
 8006b66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b6a:	e7aa      	b.n	8006ac2 <_printf_i+0x146>
 8006b6c:	6923      	ldr	r3, [r4, #16]
 8006b6e:	4632      	mov	r2, r6
 8006b70:	4649      	mov	r1, r9
 8006b72:	4640      	mov	r0, r8
 8006b74:	47d0      	blx	sl
 8006b76:	3001      	adds	r0, #1
 8006b78:	d0ad      	beq.n	8006ad6 <_printf_i+0x15a>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	079b      	lsls	r3, r3, #30
 8006b7e:	d413      	bmi.n	8006ba8 <_printf_i+0x22c>
 8006b80:	68e0      	ldr	r0, [r4, #12]
 8006b82:	9b03      	ldr	r3, [sp, #12]
 8006b84:	4298      	cmp	r0, r3
 8006b86:	bfb8      	it	lt
 8006b88:	4618      	movlt	r0, r3
 8006b8a:	e7a6      	b.n	8006ada <_printf_i+0x15e>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	4632      	mov	r2, r6
 8006b90:	4649      	mov	r1, r9
 8006b92:	4640      	mov	r0, r8
 8006b94:	47d0      	blx	sl
 8006b96:	3001      	adds	r0, #1
 8006b98:	d09d      	beq.n	8006ad6 <_printf_i+0x15a>
 8006b9a:	3501      	adds	r5, #1
 8006b9c:	68e3      	ldr	r3, [r4, #12]
 8006b9e:	9903      	ldr	r1, [sp, #12]
 8006ba0:	1a5b      	subs	r3, r3, r1
 8006ba2:	42ab      	cmp	r3, r5
 8006ba4:	dcf2      	bgt.n	8006b8c <_printf_i+0x210>
 8006ba6:	e7eb      	b.n	8006b80 <_printf_i+0x204>
 8006ba8:	2500      	movs	r5, #0
 8006baa:	f104 0619 	add.w	r6, r4, #25
 8006bae:	e7f5      	b.n	8006b9c <_printf_i+0x220>
 8006bb0:	080096fb 	.word	0x080096fb
 8006bb4:	0800970c 	.word	0x0800970c

08006bb8 <std>:
 8006bb8:	2300      	movs	r3, #0
 8006bba:	b510      	push	{r4, lr}
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	e9c0 3300 	strd	r3, r3, [r0]
 8006bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bc6:	6083      	str	r3, [r0, #8]
 8006bc8:	8181      	strh	r1, [r0, #12]
 8006bca:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bcc:	81c2      	strh	r2, [r0, #14]
 8006bce:	6183      	str	r3, [r0, #24]
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	2208      	movs	r2, #8
 8006bd4:	305c      	adds	r0, #92	@ 0x5c
 8006bd6:	f000 fa23 	bl	8007020 <memset>
 8006bda:	4b0d      	ldr	r3, [pc, #52]	@ (8006c10 <std+0x58>)
 8006bdc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bde:	4b0d      	ldr	r3, [pc, #52]	@ (8006c14 <std+0x5c>)
 8006be0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006be2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c18 <std+0x60>)
 8006be4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006be6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c1c <std+0x64>)
 8006be8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bea:	4b0d      	ldr	r3, [pc, #52]	@ (8006c20 <std+0x68>)
 8006bec:	6224      	str	r4, [r4, #32]
 8006bee:	429c      	cmp	r4, r3
 8006bf0:	d006      	beq.n	8006c00 <std+0x48>
 8006bf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bf6:	4294      	cmp	r4, r2
 8006bf8:	d002      	beq.n	8006c00 <std+0x48>
 8006bfa:	33d0      	adds	r3, #208	@ 0xd0
 8006bfc:	429c      	cmp	r4, r3
 8006bfe:	d105      	bne.n	8006c0c <std+0x54>
 8006c00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c08:	f000 bb18 	b.w	800723c <__retarget_lock_init_recursive>
 8006c0c:	bd10      	pop	{r4, pc}
 8006c0e:	bf00      	nop
 8006c10:	08006e71 	.word	0x08006e71
 8006c14:	08006e93 	.word	0x08006e93
 8006c18:	08006ecb 	.word	0x08006ecb
 8006c1c:	08006eef 	.word	0x08006eef
 8006c20:	20000cb0 	.word	0x20000cb0

08006c24 <stdio_exit_handler>:
 8006c24:	4a02      	ldr	r2, [pc, #8]	@ (8006c30 <stdio_exit_handler+0xc>)
 8006c26:	4903      	ldr	r1, [pc, #12]	@ (8006c34 <stdio_exit_handler+0x10>)
 8006c28:	4803      	ldr	r0, [pc, #12]	@ (8006c38 <stdio_exit_handler+0x14>)
 8006c2a:	f000 b869 	b.w	8006d00 <_fwalk_sglue>
 8006c2e:	bf00      	nop
 8006c30:	20000010 	.word	0x20000010
 8006c34:	08008e91 	.word	0x08008e91
 8006c38:	20000020 	.word	0x20000020

08006c3c <cleanup_stdio>:
 8006c3c:	6841      	ldr	r1, [r0, #4]
 8006c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c70 <cleanup_stdio+0x34>)
 8006c40:	4299      	cmp	r1, r3
 8006c42:	b510      	push	{r4, lr}
 8006c44:	4604      	mov	r4, r0
 8006c46:	d001      	beq.n	8006c4c <cleanup_stdio+0x10>
 8006c48:	f002 f922 	bl	8008e90 <_fflush_r>
 8006c4c:	68a1      	ldr	r1, [r4, #8]
 8006c4e:	4b09      	ldr	r3, [pc, #36]	@ (8006c74 <cleanup_stdio+0x38>)
 8006c50:	4299      	cmp	r1, r3
 8006c52:	d002      	beq.n	8006c5a <cleanup_stdio+0x1e>
 8006c54:	4620      	mov	r0, r4
 8006c56:	f002 f91b 	bl	8008e90 <_fflush_r>
 8006c5a:	68e1      	ldr	r1, [r4, #12]
 8006c5c:	4b06      	ldr	r3, [pc, #24]	@ (8006c78 <cleanup_stdio+0x3c>)
 8006c5e:	4299      	cmp	r1, r3
 8006c60:	d004      	beq.n	8006c6c <cleanup_stdio+0x30>
 8006c62:	4620      	mov	r0, r4
 8006c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c68:	f002 b912 	b.w	8008e90 <_fflush_r>
 8006c6c:	bd10      	pop	{r4, pc}
 8006c6e:	bf00      	nop
 8006c70:	20000cb0 	.word	0x20000cb0
 8006c74:	20000d18 	.word	0x20000d18
 8006c78:	20000d80 	.word	0x20000d80

08006c7c <global_stdio_init.part.0>:
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006cac <global_stdio_init.part.0+0x30>)
 8006c80:	4c0b      	ldr	r4, [pc, #44]	@ (8006cb0 <global_stdio_init.part.0+0x34>)
 8006c82:	4a0c      	ldr	r2, [pc, #48]	@ (8006cb4 <global_stdio_init.part.0+0x38>)
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	4620      	mov	r0, r4
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2104      	movs	r1, #4
 8006c8c:	f7ff ff94 	bl	8006bb8 <std>
 8006c90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c94:	2201      	movs	r2, #1
 8006c96:	2109      	movs	r1, #9
 8006c98:	f7ff ff8e 	bl	8006bb8 <std>
 8006c9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca6:	2112      	movs	r1, #18
 8006ca8:	f7ff bf86 	b.w	8006bb8 <std>
 8006cac:	20000de8 	.word	0x20000de8
 8006cb0:	20000cb0 	.word	0x20000cb0
 8006cb4:	08006c25 	.word	0x08006c25

08006cb8 <__sfp_lock_acquire>:
 8006cb8:	4801      	ldr	r0, [pc, #4]	@ (8006cc0 <__sfp_lock_acquire+0x8>)
 8006cba:	f000 bac0 	b.w	800723e <__retarget_lock_acquire_recursive>
 8006cbe:	bf00      	nop
 8006cc0:	20000df1 	.word	0x20000df1

08006cc4 <__sfp_lock_release>:
 8006cc4:	4801      	ldr	r0, [pc, #4]	@ (8006ccc <__sfp_lock_release+0x8>)
 8006cc6:	f000 babb 	b.w	8007240 <__retarget_lock_release_recursive>
 8006cca:	bf00      	nop
 8006ccc:	20000df1 	.word	0x20000df1

08006cd0 <__sinit>:
 8006cd0:	b510      	push	{r4, lr}
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	f7ff fff0 	bl	8006cb8 <__sfp_lock_acquire>
 8006cd8:	6a23      	ldr	r3, [r4, #32]
 8006cda:	b11b      	cbz	r3, 8006ce4 <__sinit+0x14>
 8006cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ce0:	f7ff bff0 	b.w	8006cc4 <__sfp_lock_release>
 8006ce4:	4b04      	ldr	r3, [pc, #16]	@ (8006cf8 <__sinit+0x28>)
 8006ce6:	6223      	str	r3, [r4, #32]
 8006ce8:	4b04      	ldr	r3, [pc, #16]	@ (8006cfc <__sinit+0x2c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1f5      	bne.n	8006cdc <__sinit+0xc>
 8006cf0:	f7ff ffc4 	bl	8006c7c <global_stdio_init.part.0>
 8006cf4:	e7f2      	b.n	8006cdc <__sinit+0xc>
 8006cf6:	bf00      	nop
 8006cf8:	08006c3d 	.word	0x08006c3d
 8006cfc:	20000de8 	.word	0x20000de8

08006d00 <_fwalk_sglue>:
 8006d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d04:	4607      	mov	r7, r0
 8006d06:	4688      	mov	r8, r1
 8006d08:	4614      	mov	r4, r2
 8006d0a:	2600      	movs	r6, #0
 8006d0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d10:	f1b9 0901 	subs.w	r9, r9, #1
 8006d14:	d505      	bpl.n	8006d22 <_fwalk_sglue+0x22>
 8006d16:	6824      	ldr	r4, [r4, #0]
 8006d18:	2c00      	cmp	r4, #0
 8006d1a:	d1f7      	bne.n	8006d0c <_fwalk_sglue+0xc>
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d22:	89ab      	ldrh	r3, [r5, #12]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d907      	bls.n	8006d38 <_fwalk_sglue+0x38>
 8006d28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	d003      	beq.n	8006d38 <_fwalk_sglue+0x38>
 8006d30:	4629      	mov	r1, r5
 8006d32:	4638      	mov	r0, r7
 8006d34:	47c0      	blx	r8
 8006d36:	4306      	orrs	r6, r0
 8006d38:	3568      	adds	r5, #104	@ 0x68
 8006d3a:	e7e9      	b.n	8006d10 <_fwalk_sglue+0x10>

08006d3c <iprintf>:
 8006d3c:	b40f      	push	{r0, r1, r2, r3}
 8006d3e:	b507      	push	{r0, r1, r2, lr}
 8006d40:	4906      	ldr	r1, [pc, #24]	@ (8006d5c <iprintf+0x20>)
 8006d42:	ab04      	add	r3, sp, #16
 8006d44:	6808      	ldr	r0, [r1, #0]
 8006d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d4a:	6881      	ldr	r1, [r0, #8]
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	f001 ff03 	bl	8008b58 <_vfiprintf_r>
 8006d52:	b003      	add	sp, #12
 8006d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d58:	b004      	add	sp, #16
 8006d5a:	4770      	bx	lr
 8006d5c:	2000001c 	.word	0x2000001c

08006d60 <putchar>:
 8006d60:	4b02      	ldr	r3, [pc, #8]	@ (8006d6c <putchar+0xc>)
 8006d62:	4601      	mov	r1, r0
 8006d64:	6818      	ldr	r0, [r3, #0]
 8006d66:	6882      	ldr	r2, [r0, #8]
 8006d68:	f002 b92e 	b.w	8008fc8 <_putc_r>
 8006d6c:	2000001c 	.word	0x2000001c

08006d70 <_puts_r>:
 8006d70:	6a03      	ldr	r3, [r0, #32]
 8006d72:	b570      	push	{r4, r5, r6, lr}
 8006d74:	6884      	ldr	r4, [r0, #8]
 8006d76:	4605      	mov	r5, r0
 8006d78:	460e      	mov	r6, r1
 8006d7a:	b90b      	cbnz	r3, 8006d80 <_puts_r+0x10>
 8006d7c:	f7ff ffa8 	bl	8006cd0 <__sinit>
 8006d80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d82:	07db      	lsls	r3, r3, #31
 8006d84:	d405      	bmi.n	8006d92 <_puts_r+0x22>
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	0598      	lsls	r0, r3, #22
 8006d8a:	d402      	bmi.n	8006d92 <_puts_r+0x22>
 8006d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d8e:	f000 fa56 	bl	800723e <__retarget_lock_acquire_recursive>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	0719      	lsls	r1, r3, #28
 8006d96:	d502      	bpl.n	8006d9e <_puts_r+0x2e>
 8006d98:	6923      	ldr	r3, [r4, #16]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d135      	bne.n	8006e0a <_puts_r+0x9a>
 8006d9e:	4621      	mov	r1, r4
 8006da0:	4628      	mov	r0, r5
 8006da2:	f000 f8e7 	bl	8006f74 <__swsetup_r>
 8006da6:	b380      	cbz	r0, 8006e0a <_puts_r+0x9a>
 8006da8:	f04f 35ff 	mov.w	r5, #4294967295
 8006dac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006dae:	07da      	lsls	r2, r3, #31
 8006db0:	d405      	bmi.n	8006dbe <_puts_r+0x4e>
 8006db2:	89a3      	ldrh	r3, [r4, #12]
 8006db4:	059b      	lsls	r3, r3, #22
 8006db6:	d402      	bmi.n	8006dbe <_puts_r+0x4e>
 8006db8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dba:	f000 fa41 	bl	8007240 <__retarget_lock_release_recursive>
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	bd70      	pop	{r4, r5, r6, pc}
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	da04      	bge.n	8006dd0 <_puts_r+0x60>
 8006dc6:	69a2      	ldr	r2, [r4, #24]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	dc17      	bgt.n	8006dfc <_puts_r+0x8c>
 8006dcc:	290a      	cmp	r1, #10
 8006dce:	d015      	beq.n	8006dfc <_puts_r+0x8c>
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	6022      	str	r2, [r4, #0]
 8006dd6:	7019      	strb	r1, [r3, #0]
 8006dd8:	68a3      	ldr	r3, [r4, #8]
 8006dda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006dde:	3b01      	subs	r3, #1
 8006de0:	60a3      	str	r3, [r4, #8]
 8006de2:	2900      	cmp	r1, #0
 8006de4:	d1ed      	bne.n	8006dc2 <_puts_r+0x52>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	da11      	bge.n	8006e0e <_puts_r+0x9e>
 8006dea:	4622      	mov	r2, r4
 8006dec:	210a      	movs	r1, #10
 8006dee:	4628      	mov	r0, r5
 8006df0:	f000 f881 	bl	8006ef6 <__swbuf_r>
 8006df4:	3001      	adds	r0, #1
 8006df6:	d0d7      	beq.n	8006da8 <_puts_r+0x38>
 8006df8:	250a      	movs	r5, #10
 8006dfa:	e7d7      	b.n	8006dac <_puts_r+0x3c>
 8006dfc:	4622      	mov	r2, r4
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f000 f879 	bl	8006ef6 <__swbuf_r>
 8006e04:	3001      	adds	r0, #1
 8006e06:	d1e7      	bne.n	8006dd8 <_puts_r+0x68>
 8006e08:	e7ce      	b.n	8006da8 <_puts_r+0x38>
 8006e0a:	3e01      	subs	r6, #1
 8006e0c:	e7e4      	b.n	8006dd8 <_puts_r+0x68>
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	6022      	str	r2, [r4, #0]
 8006e14:	220a      	movs	r2, #10
 8006e16:	701a      	strb	r2, [r3, #0]
 8006e18:	e7ee      	b.n	8006df8 <_puts_r+0x88>
	...

08006e1c <puts>:
 8006e1c:	4b02      	ldr	r3, [pc, #8]	@ (8006e28 <puts+0xc>)
 8006e1e:	4601      	mov	r1, r0
 8006e20:	6818      	ldr	r0, [r3, #0]
 8006e22:	f7ff bfa5 	b.w	8006d70 <_puts_r>
 8006e26:	bf00      	nop
 8006e28:	2000001c 	.word	0x2000001c

08006e2c <siprintf>:
 8006e2c:	b40e      	push	{r1, r2, r3}
 8006e2e:	b510      	push	{r4, lr}
 8006e30:	b09d      	sub	sp, #116	@ 0x74
 8006e32:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006e34:	9002      	str	r0, [sp, #8]
 8006e36:	9006      	str	r0, [sp, #24]
 8006e38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e3c:	480a      	ldr	r0, [pc, #40]	@ (8006e68 <siprintf+0x3c>)
 8006e3e:	9107      	str	r1, [sp, #28]
 8006e40:	9104      	str	r1, [sp, #16]
 8006e42:	490a      	ldr	r1, [pc, #40]	@ (8006e6c <siprintf+0x40>)
 8006e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e48:	9105      	str	r1, [sp, #20]
 8006e4a:	2400      	movs	r4, #0
 8006e4c:	a902      	add	r1, sp, #8
 8006e4e:	6800      	ldr	r0, [r0, #0]
 8006e50:	9301      	str	r3, [sp, #4]
 8006e52:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006e54:	f001 fd5a 	bl	800890c <_svfiprintf_r>
 8006e58:	9b02      	ldr	r3, [sp, #8]
 8006e5a:	701c      	strb	r4, [r3, #0]
 8006e5c:	b01d      	add	sp, #116	@ 0x74
 8006e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e62:	b003      	add	sp, #12
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	2000001c 	.word	0x2000001c
 8006e6c:	ffff0208 	.word	0xffff0208

08006e70 <__sread>:
 8006e70:	b510      	push	{r4, lr}
 8006e72:	460c      	mov	r4, r1
 8006e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e78:	f000 f992 	bl	80071a0 <_read_r>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	bfab      	itete	ge
 8006e80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e82:	89a3      	ldrhlt	r3, [r4, #12]
 8006e84:	181b      	addge	r3, r3, r0
 8006e86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e8a:	bfac      	ite	ge
 8006e8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e8e:	81a3      	strhlt	r3, [r4, #12]
 8006e90:	bd10      	pop	{r4, pc}

08006e92 <__swrite>:
 8006e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e96:	461f      	mov	r7, r3
 8006e98:	898b      	ldrh	r3, [r1, #12]
 8006e9a:	05db      	lsls	r3, r3, #23
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	4616      	mov	r6, r2
 8006ea2:	d505      	bpl.n	8006eb0 <__swrite+0x1e>
 8006ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f000 f966 	bl	800717c <_lseek_r>
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	4632      	mov	r2, r6
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec6:	f000 b97d 	b.w	80071c4 <_write_r>

08006eca <__sseek>:
 8006eca:	b510      	push	{r4, lr}
 8006ecc:	460c      	mov	r4, r1
 8006ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed2:	f000 f953 	bl	800717c <_lseek_r>
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	bf15      	itete	ne
 8006edc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ede:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ee2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ee6:	81a3      	strheq	r3, [r4, #12]
 8006ee8:	bf18      	it	ne
 8006eea:	81a3      	strhne	r3, [r4, #12]
 8006eec:	bd10      	pop	{r4, pc}

08006eee <__sclose>:
 8006eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef2:	f000 b933 	b.w	800715c <_close_r>

08006ef6 <__swbuf_r>:
 8006ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef8:	460e      	mov	r6, r1
 8006efa:	4614      	mov	r4, r2
 8006efc:	4605      	mov	r5, r0
 8006efe:	b118      	cbz	r0, 8006f08 <__swbuf_r+0x12>
 8006f00:	6a03      	ldr	r3, [r0, #32]
 8006f02:	b90b      	cbnz	r3, 8006f08 <__swbuf_r+0x12>
 8006f04:	f7ff fee4 	bl	8006cd0 <__sinit>
 8006f08:	69a3      	ldr	r3, [r4, #24]
 8006f0a:	60a3      	str	r3, [r4, #8]
 8006f0c:	89a3      	ldrh	r3, [r4, #12]
 8006f0e:	071a      	lsls	r2, r3, #28
 8006f10:	d501      	bpl.n	8006f16 <__swbuf_r+0x20>
 8006f12:	6923      	ldr	r3, [r4, #16]
 8006f14:	b943      	cbnz	r3, 8006f28 <__swbuf_r+0x32>
 8006f16:	4621      	mov	r1, r4
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f000 f82b 	bl	8006f74 <__swsetup_r>
 8006f1e:	b118      	cbz	r0, 8006f28 <__swbuf_r+0x32>
 8006f20:	f04f 37ff 	mov.w	r7, #4294967295
 8006f24:	4638      	mov	r0, r7
 8006f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	6922      	ldr	r2, [r4, #16]
 8006f2c:	1a98      	subs	r0, r3, r2
 8006f2e:	6963      	ldr	r3, [r4, #20]
 8006f30:	b2f6      	uxtb	r6, r6
 8006f32:	4283      	cmp	r3, r0
 8006f34:	4637      	mov	r7, r6
 8006f36:	dc05      	bgt.n	8006f44 <__swbuf_r+0x4e>
 8006f38:	4621      	mov	r1, r4
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	f001 ffa8 	bl	8008e90 <_fflush_r>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d1ed      	bne.n	8006f20 <__swbuf_r+0x2a>
 8006f44:	68a3      	ldr	r3, [r4, #8]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	60a3      	str	r3, [r4, #8]
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	6022      	str	r2, [r4, #0]
 8006f50:	701e      	strb	r6, [r3, #0]
 8006f52:	6962      	ldr	r2, [r4, #20]
 8006f54:	1c43      	adds	r3, r0, #1
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d004      	beq.n	8006f64 <__swbuf_r+0x6e>
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	07db      	lsls	r3, r3, #31
 8006f5e:	d5e1      	bpl.n	8006f24 <__swbuf_r+0x2e>
 8006f60:	2e0a      	cmp	r6, #10
 8006f62:	d1df      	bne.n	8006f24 <__swbuf_r+0x2e>
 8006f64:	4621      	mov	r1, r4
 8006f66:	4628      	mov	r0, r5
 8006f68:	f001 ff92 	bl	8008e90 <_fflush_r>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d0d9      	beq.n	8006f24 <__swbuf_r+0x2e>
 8006f70:	e7d6      	b.n	8006f20 <__swbuf_r+0x2a>
	...

08006f74 <__swsetup_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4b29      	ldr	r3, [pc, #164]	@ (800701c <__swsetup_r+0xa8>)
 8006f78:	4605      	mov	r5, r0
 8006f7a:	6818      	ldr	r0, [r3, #0]
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	b118      	cbz	r0, 8006f88 <__swsetup_r+0x14>
 8006f80:	6a03      	ldr	r3, [r0, #32]
 8006f82:	b90b      	cbnz	r3, 8006f88 <__swsetup_r+0x14>
 8006f84:	f7ff fea4 	bl	8006cd0 <__sinit>
 8006f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f8c:	0719      	lsls	r1, r3, #28
 8006f8e:	d422      	bmi.n	8006fd6 <__swsetup_r+0x62>
 8006f90:	06da      	lsls	r2, r3, #27
 8006f92:	d407      	bmi.n	8006fa4 <__swsetup_r+0x30>
 8006f94:	2209      	movs	r2, #9
 8006f96:	602a      	str	r2, [r5, #0]
 8006f98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f9c:	81a3      	strh	r3, [r4, #12]
 8006f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa2:	e033      	b.n	800700c <__swsetup_r+0x98>
 8006fa4:	0758      	lsls	r0, r3, #29
 8006fa6:	d512      	bpl.n	8006fce <__swsetup_r+0x5a>
 8006fa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006faa:	b141      	cbz	r1, 8006fbe <__swsetup_r+0x4a>
 8006fac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fb0:	4299      	cmp	r1, r3
 8006fb2:	d002      	beq.n	8006fba <__swsetup_r+0x46>
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	f000 ffd3 	bl	8007f60 <_free_r>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006fc4:	81a3      	strh	r3, [r4, #12]
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	6063      	str	r3, [r4, #4]
 8006fca:	6923      	ldr	r3, [r4, #16]
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	89a3      	ldrh	r3, [r4, #12]
 8006fd0:	f043 0308 	orr.w	r3, r3, #8
 8006fd4:	81a3      	strh	r3, [r4, #12]
 8006fd6:	6923      	ldr	r3, [r4, #16]
 8006fd8:	b94b      	cbnz	r3, 8006fee <__swsetup_r+0x7a>
 8006fda:	89a3      	ldrh	r3, [r4, #12]
 8006fdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fe4:	d003      	beq.n	8006fee <__swsetup_r+0x7a>
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f001 ffb1 	bl	8008f50 <__smakebuf_r>
 8006fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ff2:	f013 0201 	ands.w	r2, r3, #1
 8006ff6:	d00a      	beq.n	800700e <__swsetup_r+0x9a>
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	60a2      	str	r2, [r4, #8]
 8006ffc:	6962      	ldr	r2, [r4, #20]
 8006ffe:	4252      	negs	r2, r2
 8007000:	61a2      	str	r2, [r4, #24]
 8007002:	6922      	ldr	r2, [r4, #16]
 8007004:	b942      	cbnz	r2, 8007018 <__swsetup_r+0xa4>
 8007006:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800700a:	d1c5      	bne.n	8006f98 <__swsetup_r+0x24>
 800700c:	bd38      	pop	{r3, r4, r5, pc}
 800700e:	0799      	lsls	r1, r3, #30
 8007010:	bf58      	it	pl
 8007012:	6962      	ldrpl	r2, [r4, #20]
 8007014:	60a2      	str	r2, [r4, #8]
 8007016:	e7f4      	b.n	8007002 <__swsetup_r+0x8e>
 8007018:	2000      	movs	r0, #0
 800701a:	e7f7      	b.n	800700c <__swsetup_r+0x98>
 800701c:	2000001c 	.word	0x2000001c

08007020 <memset>:
 8007020:	4402      	add	r2, r0
 8007022:	4603      	mov	r3, r0
 8007024:	4293      	cmp	r3, r2
 8007026:	d100      	bne.n	800702a <memset+0xa>
 8007028:	4770      	bx	lr
 800702a:	f803 1b01 	strb.w	r1, [r3], #1
 800702e:	e7f9      	b.n	8007024 <memset+0x4>

08007030 <strchr>:
 8007030:	b2c9      	uxtb	r1, r1
 8007032:	4603      	mov	r3, r0
 8007034:	4618      	mov	r0, r3
 8007036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800703a:	b112      	cbz	r2, 8007042 <strchr+0x12>
 800703c:	428a      	cmp	r2, r1
 800703e:	d1f9      	bne.n	8007034 <strchr+0x4>
 8007040:	4770      	bx	lr
 8007042:	2900      	cmp	r1, #0
 8007044:	bf18      	it	ne
 8007046:	2000      	movne	r0, #0
 8007048:	4770      	bx	lr

0800704a <strncmp>:
 800704a:	b510      	push	{r4, lr}
 800704c:	b16a      	cbz	r2, 800706a <strncmp+0x20>
 800704e:	3901      	subs	r1, #1
 8007050:	1884      	adds	r4, r0, r2
 8007052:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007056:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800705a:	429a      	cmp	r2, r3
 800705c:	d103      	bne.n	8007066 <strncmp+0x1c>
 800705e:	42a0      	cmp	r0, r4
 8007060:	d001      	beq.n	8007066 <strncmp+0x1c>
 8007062:	2a00      	cmp	r2, #0
 8007064:	d1f5      	bne.n	8007052 <strncmp+0x8>
 8007066:	1ad0      	subs	r0, r2, r3
 8007068:	bd10      	pop	{r4, pc}
 800706a:	4610      	mov	r0, r2
 800706c:	e7fc      	b.n	8007068 <strncmp+0x1e>
	...

08007070 <strtok>:
 8007070:	4b16      	ldr	r3, [pc, #88]	@ (80070cc <strtok+0x5c>)
 8007072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007076:	681f      	ldr	r7, [r3, #0]
 8007078:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800707a:	4605      	mov	r5, r0
 800707c:	460e      	mov	r6, r1
 800707e:	b9ec      	cbnz	r4, 80070bc <strtok+0x4c>
 8007080:	2050      	movs	r0, #80	@ 0x50
 8007082:	f000 ffb7 	bl	8007ff4 <malloc>
 8007086:	4602      	mov	r2, r0
 8007088:	6478      	str	r0, [r7, #68]	@ 0x44
 800708a:	b920      	cbnz	r0, 8007096 <strtok+0x26>
 800708c:	4b10      	ldr	r3, [pc, #64]	@ (80070d0 <strtok+0x60>)
 800708e:	4811      	ldr	r0, [pc, #68]	@ (80070d4 <strtok+0x64>)
 8007090:	215b      	movs	r1, #91	@ 0x5b
 8007092:	f000 f8ed 	bl	8007270 <__assert_func>
 8007096:	e9c0 4400 	strd	r4, r4, [r0]
 800709a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800709e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80070a2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80070a6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80070aa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80070ae:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80070b2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80070b6:	6184      	str	r4, [r0, #24]
 80070b8:	7704      	strb	r4, [r0, #28]
 80070ba:	6244      	str	r4, [r0, #36]	@ 0x24
 80070bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070be:	4631      	mov	r1, r6
 80070c0:	4628      	mov	r0, r5
 80070c2:	2301      	movs	r3, #1
 80070c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070c8:	f000 b806 	b.w	80070d8 <__strtok_r>
 80070cc:	2000001c 	.word	0x2000001c
 80070d0:	0800971d 	.word	0x0800971d
 80070d4:	08009734 	.word	0x08009734

080070d8 <__strtok_r>:
 80070d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070da:	4604      	mov	r4, r0
 80070dc:	b908      	cbnz	r0, 80070e2 <__strtok_r+0xa>
 80070de:	6814      	ldr	r4, [r2, #0]
 80070e0:	b144      	cbz	r4, 80070f4 <__strtok_r+0x1c>
 80070e2:	4620      	mov	r0, r4
 80070e4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80070e8:	460f      	mov	r7, r1
 80070ea:	f817 6b01 	ldrb.w	r6, [r7], #1
 80070ee:	b91e      	cbnz	r6, 80070f8 <__strtok_r+0x20>
 80070f0:	b965      	cbnz	r5, 800710c <__strtok_r+0x34>
 80070f2:	6015      	str	r5, [r2, #0]
 80070f4:	2000      	movs	r0, #0
 80070f6:	e005      	b.n	8007104 <__strtok_r+0x2c>
 80070f8:	42b5      	cmp	r5, r6
 80070fa:	d1f6      	bne.n	80070ea <__strtok_r+0x12>
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1f0      	bne.n	80070e2 <__strtok_r+0xa>
 8007100:	6014      	str	r4, [r2, #0]
 8007102:	7003      	strb	r3, [r0, #0]
 8007104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007106:	461c      	mov	r4, r3
 8007108:	e00c      	b.n	8007124 <__strtok_r+0x4c>
 800710a:	b91d      	cbnz	r5, 8007114 <__strtok_r+0x3c>
 800710c:	4627      	mov	r7, r4
 800710e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007112:	460e      	mov	r6, r1
 8007114:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007118:	42ab      	cmp	r3, r5
 800711a:	d1f6      	bne.n	800710a <__strtok_r+0x32>
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0f2      	beq.n	8007106 <__strtok_r+0x2e>
 8007120:	2300      	movs	r3, #0
 8007122:	703b      	strb	r3, [r7, #0]
 8007124:	6014      	str	r4, [r2, #0]
 8007126:	e7ed      	b.n	8007104 <__strtok_r+0x2c>

08007128 <strstr>:
 8007128:	780a      	ldrb	r2, [r1, #0]
 800712a:	b570      	push	{r4, r5, r6, lr}
 800712c:	b96a      	cbnz	r2, 800714a <strstr+0x22>
 800712e:	bd70      	pop	{r4, r5, r6, pc}
 8007130:	429a      	cmp	r2, r3
 8007132:	d109      	bne.n	8007148 <strstr+0x20>
 8007134:	460c      	mov	r4, r1
 8007136:	4605      	mov	r5, r0
 8007138:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0f6      	beq.n	800712e <strstr+0x6>
 8007140:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007144:	429e      	cmp	r6, r3
 8007146:	d0f7      	beq.n	8007138 <strstr+0x10>
 8007148:	3001      	adds	r0, #1
 800714a:	7803      	ldrb	r3, [r0, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1ef      	bne.n	8007130 <strstr+0x8>
 8007150:	4618      	mov	r0, r3
 8007152:	e7ec      	b.n	800712e <strstr+0x6>

08007154 <_localeconv_r>:
 8007154:	4800      	ldr	r0, [pc, #0]	@ (8007158 <_localeconv_r+0x4>)
 8007156:	4770      	bx	lr
 8007158:	2000015c 	.word	0x2000015c

0800715c <_close_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4d06      	ldr	r5, [pc, #24]	@ (8007178 <_close_r+0x1c>)
 8007160:	2300      	movs	r3, #0
 8007162:	4604      	mov	r4, r0
 8007164:	4608      	mov	r0, r1
 8007166:	602b      	str	r3, [r5, #0]
 8007168:	f7fb fc78 	bl	8002a5c <_close>
 800716c:	1c43      	adds	r3, r0, #1
 800716e:	d102      	bne.n	8007176 <_close_r+0x1a>
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	b103      	cbz	r3, 8007176 <_close_r+0x1a>
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	bd38      	pop	{r3, r4, r5, pc}
 8007178:	20000dec 	.word	0x20000dec

0800717c <_lseek_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	4d07      	ldr	r5, [pc, #28]	@ (800719c <_lseek_r+0x20>)
 8007180:	4604      	mov	r4, r0
 8007182:	4608      	mov	r0, r1
 8007184:	4611      	mov	r1, r2
 8007186:	2200      	movs	r2, #0
 8007188:	602a      	str	r2, [r5, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	f7fb fc8d 	bl	8002aaa <_lseek>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	d102      	bne.n	800719a <_lseek_r+0x1e>
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	b103      	cbz	r3, 800719a <_lseek_r+0x1e>
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	bd38      	pop	{r3, r4, r5, pc}
 800719c:	20000dec 	.word	0x20000dec

080071a0 <_read_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4d07      	ldr	r5, [pc, #28]	@ (80071c0 <_read_r+0x20>)
 80071a4:	4604      	mov	r4, r0
 80071a6:	4608      	mov	r0, r1
 80071a8:	4611      	mov	r1, r2
 80071aa:	2200      	movs	r2, #0
 80071ac:	602a      	str	r2, [r5, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	f7fb fc1b 	bl	80029ea <_read>
 80071b4:	1c43      	adds	r3, r0, #1
 80071b6:	d102      	bne.n	80071be <_read_r+0x1e>
 80071b8:	682b      	ldr	r3, [r5, #0]
 80071ba:	b103      	cbz	r3, 80071be <_read_r+0x1e>
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	bd38      	pop	{r3, r4, r5, pc}
 80071c0:	20000dec 	.word	0x20000dec

080071c4 <_write_r>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	4d07      	ldr	r5, [pc, #28]	@ (80071e4 <_write_r+0x20>)
 80071c8:	4604      	mov	r4, r0
 80071ca:	4608      	mov	r0, r1
 80071cc:	4611      	mov	r1, r2
 80071ce:	2200      	movs	r2, #0
 80071d0:	602a      	str	r2, [r5, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	f7fb fc26 	bl	8002a24 <_write>
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	d102      	bne.n	80071e2 <_write_r+0x1e>
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	b103      	cbz	r3, 80071e2 <_write_r+0x1e>
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	bd38      	pop	{r3, r4, r5, pc}
 80071e4:	20000dec 	.word	0x20000dec

080071e8 <__errno>:
 80071e8:	4b01      	ldr	r3, [pc, #4]	@ (80071f0 <__errno+0x8>)
 80071ea:	6818      	ldr	r0, [r3, #0]
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	2000001c 	.word	0x2000001c

080071f4 <__libc_init_array>:
 80071f4:	b570      	push	{r4, r5, r6, lr}
 80071f6:	4d0d      	ldr	r5, [pc, #52]	@ (800722c <__libc_init_array+0x38>)
 80071f8:	4c0d      	ldr	r4, [pc, #52]	@ (8007230 <__libc_init_array+0x3c>)
 80071fa:	1b64      	subs	r4, r4, r5
 80071fc:	10a4      	asrs	r4, r4, #2
 80071fe:	2600      	movs	r6, #0
 8007200:	42a6      	cmp	r6, r4
 8007202:	d109      	bne.n	8007218 <__libc_init_array+0x24>
 8007204:	4d0b      	ldr	r5, [pc, #44]	@ (8007234 <__libc_init_array+0x40>)
 8007206:	4c0c      	ldr	r4, [pc, #48]	@ (8007238 <__libc_init_array+0x44>)
 8007208:	f002 f812 	bl	8009230 <_init>
 800720c:	1b64      	subs	r4, r4, r5
 800720e:	10a4      	asrs	r4, r4, #2
 8007210:	2600      	movs	r6, #0
 8007212:	42a6      	cmp	r6, r4
 8007214:	d105      	bne.n	8007222 <__libc_init_array+0x2e>
 8007216:	bd70      	pop	{r4, r5, r6, pc}
 8007218:	f855 3b04 	ldr.w	r3, [r5], #4
 800721c:	4798      	blx	r3
 800721e:	3601      	adds	r6, #1
 8007220:	e7ee      	b.n	8007200 <__libc_init_array+0xc>
 8007222:	f855 3b04 	ldr.w	r3, [r5], #4
 8007226:	4798      	blx	r3
 8007228:	3601      	adds	r6, #1
 800722a:	e7f2      	b.n	8007212 <__libc_init_array+0x1e>
 800722c:	080099b8 	.word	0x080099b8
 8007230:	080099b8 	.word	0x080099b8
 8007234:	080099b8 	.word	0x080099b8
 8007238:	080099bc 	.word	0x080099bc

0800723c <__retarget_lock_init_recursive>:
 800723c:	4770      	bx	lr

0800723e <__retarget_lock_acquire_recursive>:
 800723e:	4770      	bx	lr

08007240 <__retarget_lock_release_recursive>:
 8007240:	4770      	bx	lr

08007242 <strcpy>:
 8007242:	4603      	mov	r3, r0
 8007244:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007248:	f803 2b01 	strb.w	r2, [r3], #1
 800724c:	2a00      	cmp	r2, #0
 800724e:	d1f9      	bne.n	8007244 <strcpy+0x2>
 8007250:	4770      	bx	lr

08007252 <memcpy>:
 8007252:	440a      	add	r2, r1
 8007254:	4291      	cmp	r1, r2
 8007256:	f100 33ff 	add.w	r3, r0, #4294967295
 800725a:	d100      	bne.n	800725e <memcpy+0xc>
 800725c:	4770      	bx	lr
 800725e:	b510      	push	{r4, lr}
 8007260:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007264:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007268:	4291      	cmp	r1, r2
 800726a:	d1f9      	bne.n	8007260 <memcpy+0xe>
 800726c:	bd10      	pop	{r4, pc}
	...

08007270 <__assert_func>:
 8007270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007272:	4614      	mov	r4, r2
 8007274:	461a      	mov	r2, r3
 8007276:	4b09      	ldr	r3, [pc, #36]	@ (800729c <__assert_func+0x2c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4605      	mov	r5, r0
 800727c:	68d8      	ldr	r0, [r3, #12]
 800727e:	b14c      	cbz	r4, 8007294 <__assert_func+0x24>
 8007280:	4b07      	ldr	r3, [pc, #28]	@ (80072a0 <__assert_func+0x30>)
 8007282:	9100      	str	r1, [sp, #0]
 8007284:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007288:	4906      	ldr	r1, [pc, #24]	@ (80072a4 <__assert_func+0x34>)
 800728a:	462b      	mov	r3, r5
 800728c:	f001 fe28 	bl	8008ee0 <fiprintf>
 8007290:	f001 ff1a 	bl	80090c8 <abort>
 8007294:	4b04      	ldr	r3, [pc, #16]	@ (80072a8 <__assert_func+0x38>)
 8007296:	461c      	mov	r4, r3
 8007298:	e7f3      	b.n	8007282 <__assert_func+0x12>
 800729a:	bf00      	nop
 800729c:	2000001c 	.word	0x2000001c
 80072a0:	0800978e 	.word	0x0800978e
 80072a4:	0800979b 	.word	0x0800979b
 80072a8:	080097c9 	.word	0x080097c9

080072ac <quorem>:
 80072ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b0:	6903      	ldr	r3, [r0, #16]
 80072b2:	690c      	ldr	r4, [r1, #16]
 80072b4:	42a3      	cmp	r3, r4
 80072b6:	4607      	mov	r7, r0
 80072b8:	db7e      	blt.n	80073b8 <quorem+0x10c>
 80072ba:	3c01      	subs	r4, #1
 80072bc:	f101 0814 	add.w	r8, r1, #20
 80072c0:	00a3      	lsls	r3, r4, #2
 80072c2:	f100 0514 	add.w	r5, r0, #20
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072cc:	9301      	str	r3, [sp, #4]
 80072ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072d6:	3301      	adds	r3, #1
 80072d8:	429a      	cmp	r2, r3
 80072da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072de:	fbb2 f6f3 	udiv	r6, r2, r3
 80072e2:	d32e      	bcc.n	8007342 <quorem+0x96>
 80072e4:	f04f 0a00 	mov.w	sl, #0
 80072e8:	46c4      	mov	ip, r8
 80072ea:	46ae      	mov	lr, r5
 80072ec:	46d3      	mov	fp, sl
 80072ee:	f85c 3b04 	ldr.w	r3, [ip], #4
 80072f2:	b298      	uxth	r0, r3
 80072f4:	fb06 a000 	mla	r0, r6, r0, sl
 80072f8:	0c02      	lsrs	r2, r0, #16
 80072fa:	0c1b      	lsrs	r3, r3, #16
 80072fc:	fb06 2303 	mla	r3, r6, r3, r2
 8007300:	f8de 2000 	ldr.w	r2, [lr]
 8007304:	b280      	uxth	r0, r0
 8007306:	b292      	uxth	r2, r2
 8007308:	1a12      	subs	r2, r2, r0
 800730a:	445a      	add	r2, fp
 800730c:	f8de 0000 	ldr.w	r0, [lr]
 8007310:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007314:	b29b      	uxth	r3, r3
 8007316:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800731a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800731e:	b292      	uxth	r2, r2
 8007320:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007324:	45e1      	cmp	r9, ip
 8007326:	f84e 2b04 	str.w	r2, [lr], #4
 800732a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800732e:	d2de      	bcs.n	80072ee <quorem+0x42>
 8007330:	9b00      	ldr	r3, [sp, #0]
 8007332:	58eb      	ldr	r3, [r5, r3]
 8007334:	b92b      	cbnz	r3, 8007342 <quorem+0x96>
 8007336:	9b01      	ldr	r3, [sp, #4]
 8007338:	3b04      	subs	r3, #4
 800733a:	429d      	cmp	r5, r3
 800733c:	461a      	mov	r2, r3
 800733e:	d32f      	bcc.n	80073a0 <quorem+0xf4>
 8007340:	613c      	str	r4, [r7, #16]
 8007342:	4638      	mov	r0, r7
 8007344:	f001 f97e 	bl	8008644 <__mcmp>
 8007348:	2800      	cmp	r0, #0
 800734a:	db25      	blt.n	8007398 <quorem+0xec>
 800734c:	4629      	mov	r1, r5
 800734e:	2000      	movs	r0, #0
 8007350:	f858 2b04 	ldr.w	r2, [r8], #4
 8007354:	f8d1 c000 	ldr.w	ip, [r1]
 8007358:	fa1f fe82 	uxth.w	lr, r2
 800735c:	fa1f f38c 	uxth.w	r3, ip
 8007360:	eba3 030e 	sub.w	r3, r3, lr
 8007364:	4403      	add	r3, r0
 8007366:	0c12      	lsrs	r2, r2, #16
 8007368:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800736c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007370:	b29b      	uxth	r3, r3
 8007372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007376:	45c1      	cmp	r9, r8
 8007378:	f841 3b04 	str.w	r3, [r1], #4
 800737c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007380:	d2e6      	bcs.n	8007350 <quorem+0xa4>
 8007382:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007386:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800738a:	b922      	cbnz	r2, 8007396 <quorem+0xea>
 800738c:	3b04      	subs	r3, #4
 800738e:	429d      	cmp	r5, r3
 8007390:	461a      	mov	r2, r3
 8007392:	d30b      	bcc.n	80073ac <quorem+0x100>
 8007394:	613c      	str	r4, [r7, #16]
 8007396:	3601      	adds	r6, #1
 8007398:	4630      	mov	r0, r6
 800739a:	b003      	add	sp, #12
 800739c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a0:	6812      	ldr	r2, [r2, #0]
 80073a2:	3b04      	subs	r3, #4
 80073a4:	2a00      	cmp	r2, #0
 80073a6:	d1cb      	bne.n	8007340 <quorem+0x94>
 80073a8:	3c01      	subs	r4, #1
 80073aa:	e7c6      	b.n	800733a <quorem+0x8e>
 80073ac:	6812      	ldr	r2, [r2, #0]
 80073ae:	3b04      	subs	r3, #4
 80073b0:	2a00      	cmp	r2, #0
 80073b2:	d1ef      	bne.n	8007394 <quorem+0xe8>
 80073b4:	3c01      	subs	r4, #1
 80073b6:	e7ea      	b.n	800738e <quorem+0xe2>
 80073b8:	2000      	movs	r0, #0
 80073ba:	e7ee      	b.n	800739a <quorem+0xee>
 80073bc:	0000      	movs	r0, r0
	...

080073c0 <_dtoa_r>:
 80073c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	69c7      	ldr	r7, [r0, #28]
 80073c6:	b097      	sub	sp, #92	@ 0x5c
 80073c8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80073cc:	ec55 4b10 	vmov	r4, r5, d0
 80073d0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80073d2:	9107      	str	r1, [sp, #28]
 80073d4:	4681      	mov	r9, r0
 80073d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80073d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80073da:	b97f      	cbnz	r7, 80073fc <_dtoa_r+0x3c>
 80073dc:	2010      	movs	r0, #16
 80073de:	f000 fe09 	bl	8007ff4 <malloc>
 80073e2:	4602      	mov	r2, r0
 80073e4:	f8c9 001c 	str.w	r0, [r9, #28]
 80073e8:	b920      	cbnz	r0, 80073f4 <_dtoa_r+0x34>
 80073ea:	4ba9      	ldr	r3, [pc, #676]	@ (8007690 <_dtoa_r+0x2d0>)
 80073ec:	21ef      	movs	r1, #239	@ 0xef
 80073ee:	48a9      	ldr	r0, [pc, #676]	@ (8007694 <_dtoa_r+0x2d4>)
 80073f0:	f7ff ff3e 	bl	8007270 <__assert_func>
 80073f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80073f8:	6007      	str	r7, [r0, #0]
 80073fa:	60c7      	str	r7, [r0, #12]
 80073fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007400:	6819      	ldr	r1, [r3, #0]
 8007402:	b159      	cbz	r1, 800741c <_dtoa_r+0x5c>
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	604a      	str	r2, [r1, #4]
 8007408:	2301      	movs	r3, #1
 800740a:	4093      	lsls	r3, r2
 800740c:	608b      	str	r3, [r1, #8]
 800740e:	4648      	mov	r0, r9
 8007410:	f000 fee6 	bl	80081e0 <_Bfree>
 8007414:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	1e2b      	subs	r3, r5, #0
 800741e:	bfb9      	ittee	lt
 8007420:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007424:	9305      	strlt	r3, [sp, #20]
 8007426:	2300      	movge	r3, #0
 8007428:	6033      	strge	r3, [r6, #0]
 800742a:	9f05      	ldr	r7, [sp, #20]
 800742c:	4b9a      	ldr	r3, [pc, #616]	@ (8007698 <_dtoa_r+0x2d8>)
 800742e:	bfbc      	itt	lt
 8007430:	2201      	movlt	r2, #1
 8007432:	6032      	strlt	r2, [r6, #0]
 8007434:	43bb      	bics	r3, r7
 8007436:	d112      	bne.n	800745e <_dtoa_r+0x9e>
 8007438:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800743a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007444:	4323      	orrs	r3, r4
 8007446:	f000 855a 	beq.w	8007efe <_dtoa_r+0xb3e>
 800744a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800744c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80076ac <_dtoa_r+0x2ec>
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 855c 	beq.w	8007f0e <_dtoa_r+0xb4e>
 8007456:	f10a 0303 	add.w	r3, sl, #3
 800745a:	f000 bd56 	b.w	8007f0a <_dtoa_r+0xb4a>
 800745e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007462:	2200      	movs	r2, #0
 8007464:	ec51 0b17 	vmov	r0, r1, d7
 8007468:	2300      	movs	r3, #0
 800746a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800746e:	f7f9 fb43 	bl	8000af8 <__aeabi_dcmpeq>
 8007472:	4680      	mov	r8, r0
 8007474:	b158      	cbz	r0, 800748e <_dtoa_r+0xce>
 8007476:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007478:	2301      	movs	r3, #1
 800747a:	6013      	str	r3, [r2, #0]
 800747c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800747e:	b113      	cbz	r3, 8007486 <_dtoa_r+0xc6>
 8007480:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007482:	4b86      	ldr	r3, [pc, #536]	@ (800769c <_dtoa_r+0x2dc>)
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80076b0 <_dtoa_r+0x2f0>
 800748a:	f000 bd40 	b.w	8007f0e <_dtoa_r+0xb4e>
 800748e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007492:	aa14      	add	r2, sp, #80	@ 0x50
 8007494:	a915      	add	r1, sp, #84	@ 0x54
 8007496:	4648      	mov	r0, r9
 8007498:	f001 f984 	bl	80087a4 <__d2b>
 800749c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80074a0:	9002      	str	r0, [sp, #8]
 80074a2:	2e00      	cmp	r6, #0
 80074a4:	d078      	beq.n	8007598 <_dtoa_r+0x1d8>
 80074a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074a8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80074ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80074b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80074b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80074bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80074c0:	4619      	mov	r1, r3
 80074c2:	2200      	movs	r2, #0
 80074c4:	4b76      	ldr	r3, [pc, #472]	@ (80076a0 <_dtoa_r+0x2e0>)
 80074c6:	f7f8 fef7 	bl	80002b8 <__aeabi_dsub>
 80074ca:	a36b      	add	r3, pc, #428	@ (adr r3, 8007678 <_dtoa_r+0x2b8>)
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	f7f9 f8aa 	bl	8000628 <__aeabi_dmul>
 80074d4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007680 <_dtoa_r+0x2c0>)
 80074d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074da:	f7f8 feef 	bl	80002bc <__adddf3>
 80074de:	4604      	mov	r4, r0
 80074e0:	4630      	mov	r0, r6
 80074e2:	460d      	mov	r5, r1
 80074e4:	f7f9 f836 	bl	8000554 <__aeabi_i2d>
 80074e8:	a367      	add	r3, pc, #412	@ (adr r3, 8007688 <_dtoa_r+0x2c8>)
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	f7f9 f89b 	bl	8000628 <__aeabi_dmul>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4620      	mov	r0, r4
 80074f8:	4629      	mov	r1, r5
 80074fa:	f7f8 fedf 	bl	80002bc <__adddf3>
 80074fe:	4604      	mov	r4, r0
 8007500:	460d      	mov	r5, r1
 8007502:	f7f9 fb41 	bl	8000b88 <__aeabi_d2iz>
 8007506:	2200      	movs	r2, #0
 8007508:	4607      	mov	r7, r0
 800750a:	2300      	movs	r3, #0
 800750c:	4620      	mov	r0, r4
 800750e:	4629      	mov	r1, r5
 8007510:	f7f9 fafc 	bl	8000b0c <__aeabi_dcmplt>
 8007514:	b140      	cbz	r0, 8007528 <_dtoa_r+0x168>
 8007516:	4638      	mov	r0, r7
 8007518:	f7f9 f81c 	bl	8000554 <__aeabi_i2d>
 800751c:	4622      	mov	r2, r4
 800751e:	462b      	mov	r3, r5
 8007520:	f7f9 faea 	bl	8000af8 <__aeabi_dcmpeq>
 8007524:	b900      	cbnz	r0, 8007528 <_dtoa_r+0x168>
 8007526:	3f01      	subs	r7, #1
 8007528:	2f16      	cmp	r7, #22
 800752a:	d852      	bhi.n	80075d2 <_dtoa_r+0x212>
 800752c:	4b5d      	ldr	r3, [pc, #372]	@ (80076a4 <_dtoa_r+0x2e4>)
 800752e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007536:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800753a:	f7f9 fae7 	bl	8000b0c <__aeabi_dcmplt>
 800753e:	2800      	cmp	r0, #0
 8007540:	d049      	beq.n	80075d6 <_dtoa_r+0x216>
 8007542:	3f01      	subs	r7, #1
 8007544:	2300      	movs	r3, #0
 8007546:	9310      	str	r3, [sp, #64]	@ 0x40
 8007548:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800754a:	1b9b      	subs	r3, r3, r6
 800754c:	1e5a      	subs	r2, r3, #1
 800754e:	bf45      	ittet	mi
 8007550:	f1c3 0301 	rsbmi	r3, r3, #1
 8007554:	9300      	strmi	r3, [sp, #0]
 8007556:	2300      	movpl	r3, #0
 8007558:	2300      	movmi	r3, #0
 800755a:	9206      	str	r2, [sp, #24]
 800755c:	bf54      	ite	pl
 800755e:	9300      	strpl	r3, [sp, #0]
 8007560:	9306      	strmi	r3, [sp, #24]
 8007562:	2f00      	cmp	r7, #0
 8007564:	db39      	blt.n	80075da <_dtoa_r+0x21a>
 8007566:	9b06      	ldr	r3, [sp, #24]
 8007568:	970d      	str	r7, [sp, #52]	@ 0x34
 800756a:	443b      	add	r3, r7
 800756c:	9306      	str	r3, [sp, #24]
 800756e:	2300      	movs	r3, #0
 8007570:	9308      	str	r3, [sp, #32]
 8007572:	9b07      	ldr	r3, [sp, #28]
 8007574:	2b09      	cmp	r3, #9
 8007576:	d863      	bhi.n	8007640 <_dtoa_r+0x280>
 8007578:	2b05      	cmp	r3, #5
 800757a:	bfc4      	itt	gt
 800757c:	3b04      	subgt	r3, #4
 800757e:	9307      	strgt	r3, [sp, #28]
 8007580:	9b07      	ldr	r3, [sp, #28]
 8007582:	f1a3 0302 	sub.w	r3, r3, #2
 8007586:	bfcc      	ite	gt
 8007588:	2400      	movgt	r4, #0
 800758a:	2401      	movle	r4, #1
 800758c:	2b03      	cmp	r3, #3
 800758e:	d863      	bhi.n	8007658 <_dtoa_r+0x298>
 8007590:	e8df f003 	tbb	[pc, r3]
 8007594:	2b375452 	.word	0x2b375452
 8007598:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800759c:	441e      	add	r6, r3
 800759e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80075a2:	2b20      	cmp	r3, #32
 80075a4:	bfc1      	itttt	gt
 80075a6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80075aa:	409f      	lslgt	r7, r3
 80075ac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80075b0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80075b4:	bfd6      	itet	le
 80075b6:	f1c3 0320 	rsble	r3, r3, #32
 80075ba:	ea47 0003 	orrgt.w	r0, r7, r3
 80075be:	fa04 f003 	lslle.w	r0, r4, r3
 80075c2:	f7f8 ffb7 	bl	8000534 <__aeabi_ui2d>
 80075c6:	2201      	movs	r2, #1
 80075c8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80075cc:	3e01      	subs	r6, #1
 80075ce:	9212      	str	r2, [sp, #72]	@ 0x48
 80075d0:	e776      	b.n	80074c0 <_dtoa_r+0x100>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e7b7      	b.n	8007546 <_dtoa_r+0x186>
 80075d6:	9010      	str	r0, [sp, #64]	@ 0x40
 80075d8:	e7b6      	b.n	8007548 <_dtoa_r+0x188>
 80075da:	9b00      	ldr	r3, [sp, #0]
 80075dc:	1bdb      	subs	r3, r3, r7
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	427b      	negs	r3, r7
 80075e2:	9308      	str	r3, [sp, #32]
 80075e4:	2300      	movs	r3, #0
 80075e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80075e8:	e7c3      	b.n	8007572 <_dtoa_r+0x1b2>
 80075ea:	2301      	movs	r3, #1
 80075ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075f0:	eb07 0b03 	add.w	fp, r7, r3
 80075f4:	f10b 0301 	add.w	r3, fp, #1
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	9303      	str	r3, [sp, #12]
 80075fc:	bfb8      	it	lt
 80075fe:	2301      	movlt	r3, #1
 8007600:	e006      	b.n	8007610 <_dtoa_r+0x250>
 8007602:	2301      	movs	r3, #1
 8007604:	9309      	str	r3, [sp, #36]	@ 0x24
 8007606:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007608:	2b00      	cmp	r3, #0
 800760a:	dd28      	ble.n	800765e <_dtoa_r+0x29e>
 800760c:	469b      	mov	fp, r3
 800760e:	9303      	str	r3, [sp, #12]
 8007610:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007614:	2100      	movs	r1, #0
 8007616:	2204      	movs	r2, #4
 8007618:	f102 0514 	add.w	r5, r2, #20
 800761c:	429d      	cmp	r5, r3
 800761e:	d926      	bls.n	800766e <_dtoa_r+0x2ae>
 8007620:	6041      	str	r1, [r0, #4]
 8007622:	4648      	mov	r0, r9
 8007624:	f000 fd9c 	bl	8008160 <_Balloc>
 8007628:	4682      	mov	sl, r0
 800762a:	2800      	cmp	r0, #0
 800762c:	d142      	bne.n	80076b4 <_dtoa_r+0x2f4>
 800762e:	4b1e      	ldr	r3, [pc, #120]	@ (80076a8 <_dtoa_r+0x2e8>)
 8007630:	4602      	mov	r2, r0
 8007632:	f240 11af 	movw	r1, #431	@ 0x1af
 8007636:	e6da      	b.n	80073ee <_dtoa_r+0x2e>
 8007638:	2300      	movs	r3, #0
 800763a:	e7e3      	b.n	8007604 <_dtoa_r+0x244>
 800763c:	2300      	movs	r3, #0
 800763e:	e7d5      	b.n	80075ec <_dtoa_r+0x22c>
 8007640:	2401      	movs	r4, #1
 8007642:	2300      	movs	r3, #0
 8007644:	9307      	str	r3, [sp, #28]
 8007646:	9409      	str	r4, [sp, #36]	@ 0x24
 8007648:	f04f 3bff 	mov.w	fp, #4294967295
 800764c:	2200      	movs	r2, #0
 800764e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007652:	2312      	movs	r3, #18
 8007654:	920c      	str	r2, [sp, #48]	@ 0x30
 8007656:	e7db      	b.n	8007610 <_dtoa_r+0x250>
 8007658:	2301      	movs	r3, #1
 800765a:	9309      	str	r3, [sp, #36]	@ 0x24
 800765c:	e7f4      	b.n	8007648 <_dtoa_r+0x288>
 800765e:	f04f 0b01 	mov.w	fp, #1
 8007662:	f8cd b00c 	str.w	fp, [sp, #12]
 8007666:	465b      	mov	r3, fp
 8007668:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800766c:	e7d0      	b.n	8007610 <_dtoa_r+0x250>
 800766e:	3101      	adds	r1, #1
 8007670:	0052      	lsls	r2, r2, #1
 8007672:	e7d1      	b.n	8007618 <_dtoa_r+0x258>
 8007674:	f3af 8000 	nop.w
 8007678:	636f4361 	.word	0x636f4361
 800767c:	3fd287a7 	.word	0x3fd287a7
 8007680:	8b60c8b3 	.word	0x8b60c8b3
 8007684:	3fc68a28 	.word	0x3fc68a28
 8007688:	509f79fb 	.word	0x509f79fb
 800768c:	3fd34413 	.word	0x3fd34413
 8007690:	0800971d 	.word	0x0800971d
 8007694:	080097d7 	.word	0x080097d7
 8007698:	7ff00000 	.word	0x7ff00000
 800769c:	080096fa 	.word	0x080096fa
 80076a0:	3ff80000 	.word	0x3ff80000
 80076a4:	080098e8 	.word	0x080098e8
 80076a8:	0800982f 	.word	0x0800982f
 80076ac:	080097d3 	.word	0x080097d3
 80076b0:	080096f9 	.word	0x080096f9
 80076b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80076b8:	6018      	str	r0, [r3, #0]
 80076ba:	9b03      	ldr	r3, [sp, #12]
 80076bc:	2b0e      	cmp	r3, #14
 80076be:	f200 80a1 	bhi.w	8007804 <_dtoa_r+0x444>
 80076c2:	2c00      	cmp	r4, #0
 80076c4:	f000 809e 	beq.w	8007804 <_dtoa_r+0x444>
 80076c8:	2f00      	cmp	r7, #0
 80076ca:	dd33      	ble.n	8007734 <_dtoa_r+0x374>
 80076cc:	4b9c      	ldr	r3, [pc, #624]	@ (8007940 <_dtoa_r+0x580>)
 80076ce:	f007 020f 	and.w	r2, r7, #15
 80076d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076d6:	ed93 7b00 	vldr	d7, [r3]
 80076da:	05f8      	lsls	r0, r7, #23
 80076dc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80076e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80076e4:	d516      	bpl.n	8007714 <_dtoa_r+0x354>
 80076e6:	4b97      	ldr	r3, [pc, #604]	@ (8007944 <_dtoa_r+0x584>)
 80076e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80076ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076f0:	f7f9 f8c4 	bl	800087c <__aeabi_ddiv>
 80076f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076f8:	f004 040f 	and.w	r4, r4, #15
 80076fc:	2603      	movs	r6, #3
 80076fe:	4d91      	ldr	r5, [pc, #580]	@ (8007944 <_dtoa_r+0x584>)
 8007700:	b954      	cbnz	r4, 8007718 <_dtoa_r+0x358>
 8007702:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007706:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800770a:	f7f9 f8b7 	bl	800087c <__aeabi_ddiv>
 800770e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007712:	e028      	b.n	8007766 <_dtoa_r+0x3a6>
 8007714:	2602      	movs	r6, #2
 8007716:	e7f2      	b.n	80076fe <_dtoa_r+0x33e>
 8007718:	07e1      	lsls	r1, r4, #31
 800771a:	d508      	bpl.n	800772e <_dtoa_r+0x36e>
 800771c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007720:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007724:	f7f8 ff80 	bl	8000628 <__aeabi_dmul>
 8007728:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800772c:	3601      	adds	r6, #1
 800772e:	1064      	asrs	r4, r4, #1
 8007730:	3508      	adds	r5, #8
 8007732:	e7e5      	b.n	8007700 <_dtoa_r+0x340>
 8007734:	f000 80af 	beq.w	8007896 <_dtoa_r+0x4d6>
 8007738:	427c      	negs	r4, r7
 800773a:	4b81      	ldr	r3, [pc, #516]	@ (8007940 <_dtoa_r+0x580>)
 800773c:	4d81      	ldr	r5, [pc, #516]	@ (8007944 <_dtoa_r+0x584>)
 800773e:	f004 020f 	and.w	r2, r4, #15
 8007742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800774e:	f7f8 ff6b 	bl	8000628 <__aeabi_dmul>
 8007752:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007756:	1124      	asrs	r4, r4, #4
 8007758:	2300      	movs	r3, #0
 800775a:	2602      	movs	r6, #2
 800775c:	2c00      	cmp	r4, #0
 800775e:	f040 808f 	bne.w	8007880 <_dtoa_r+0x4c0>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1d3      	bne.n	800770e <_dtoa_r+0x34e>
 8007766:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007768:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 8094 	beq.w	800789a <_dtoa_r+0x4da>
 8007772:	4b75      	ldr	r3, [pc, #468]	@ (8007948 <_dtoa_r+0x588>)
 8007774:	2200      	movs	r2, #0
 8007776:	4620      	mov	r0, r4
 8007778:	4629      	mov	r1, r5
 800777a:	f7f9 f9c7 	bl	8000b0c <__aeabi_dcmplt>
 800777e:	2800      	cmp	r0, #0
 8007780:	f000 808b 	beq.w	800789a <_dtoa_r+0x4da>
 8007784:	9b03      	ldr	r3, [sp, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 8087 	beq.w	800789a <_dtoa_r+0x4da>
 800778c:	f1bb 0f00 	cmp.w	fp, #0
 8007790:	dd34      	ble.n	80077fc <_dtoa_r+0x43c>
 8007792:	4620      	mov	r0, r4
 8007794:	4b6d      	ldr	r3, [pc, #436]	@ (800794c <_dtoa_r+0x58c>)
 8007796:	2200      	movs	r2, #0
 8007798:	4629      	mov	r1, r5
 800779a:	f7f8 ff45 	bl	8000628 <__aeabi_dmul>
 800779e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077a2:	f107 38ff 	add.w	r8, r7, #4294967295
 80077a6:	3601      	adds	r6, #1
 80077a8:	465c      	mov	r4, fp
 80077aa:	4630      	mov	r0, r6
 80077ac:	f7f8 fed2 	bl	8000554 <__aeabi_i2d>
 80077b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077b4:	f7f8 ff38 	bl	8000628 <__aeabi_dmul>
 80077b8:	4b65      	ldr	r3, [pc, #404]	@ (8007950 <_dtoa_r+0x590>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	f7f8 fd7e 	bl	80002bc <__adddf3>
 80077c0:	4605      	mov	r5, r0
 80077c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80077c6:	2c00      	cmp	r4, #0
 80077c8:	d16a      	bne.n	80078a0 <_dtoa_r+0x4e0>
 80077ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077ce:	4b61      	ldr	r3, [pc, #388]	@ (8007954 <_dtoa_r+0x594>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	f7f8 fd71 	bl	80002b8 <__aeabi_dsub>
 80077d6:	4602      	mov	r2, r0
 80077d8:	460b      	mov	r3, r1
 80077da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077de:	462a      	mov	r2, r5
 80077e0:	4633      	mov	r3, r6
 80077e2:	f7f9 f9b1 	bl	8000b48 <__aeabi_dcmpgt>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	f040 8298 	bne.w	8007d1c <_dtoa_r+0x95c>
 80077ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077f0:	462a      	mov	r2, r5
 80077f2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80077f6:	f7f9 f989 	bl	8000b0c <__aeabi_dcmplt>
 80077fa:	bb38      	cbnz	r0, 800784c <_dtoa_r+0x48c>
 80077fc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007800:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007804:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007806:	2b00      	cmp	r3, #0
 8007808:	f2c0 8157 	blt.w	8007aba <_dtoa_r+0x6fa>
 800780c:	2f0e      	cmp	r7, #14
 800780e:	f300 8154 	bgt.w	8007aba <_dtoa_r+0x6fa>
 8007812:	4b4b      	ldr	r3, [pc, #300]	@ (8007940 <_dtoa_r+0x580>)
 8007814:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007818:	ed93 7b00 	vldr	d7, [r3]
 800781c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800781e:	2b00      	cmp	r3, #0
 8007820:	ed8d 7b00 	vstr	d7, [sp]
 8007824:	f280 80e5 	bge.w	80079f2 <_dtoa_r+0x632>
 8007828:	9b03      	ldr	r3, [sp, #12]
 800782a:	2b00      	cmp	r3, #0
 800782c:	f300 80e1 	bgt.w	80079f2 <_dtoa_r+0x632>
 8007830:	d10c      	bne.n	800784c <_dtoa_r+0x48c>
 8007832:	4b48      	ldr	r3, [pc, #288]	@ (8007954 <_dtoa_r+0x594>)
 8007834:	2200      	movs	r2, #0
 8007836:	ec51 0b17 	vmov	r0, r1, d7
 800783a:	f7f8 fef5 	bl	8000628 <__aeabi_dmul>
 800783e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007842:	f7f9 f977 	bl	8000b34 <__aeabi_dcmpge>
 8007846:	2800      	cmp	r0, #0
 8007848:	f000 8266 	beq.w	8007d18 <_dtoa_r+0x958>
 800784c:	2400      	movs	r4, #0
 800784e:	4625      	mov	r5, r4
 8007850:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007852:	4656      	mov	r6, sl
 8007854:	ea6f 0803 	mvn.w	r8, r3
 8007858:	2700      	movs	r7, #0
 800785a:	4621      	mov	r1, r4
 800785c:	4648      	mov	r0, r9
 800785e:	f000 fcbf 	bl	80081e0 <_Bfree>
 8007862:	2d00      	cmp	r5, #0
 8007864:	f000 80bd 	beq.w	80079e2 <_dtoa_r+0x622>
 8007868:	b12f      	cbz	r7, 8007876 <_dtoa_r+0x4b6>
 800786a:	42af      	cmp	r7, r5
 800786c:	d003      	beq.n	8007876 <_dtoa_r+0x4b6>
 800786e:	4639      	mov	r1, r7
 8007870:	4648      	mov	r0, r9
 8007872:	f000 fcb5 	bl	80081e0 <_Bfree>
 8007876:	4629      	mov	r1, r5
 8007878:	4648      	mov	r0, r9
 800787a:	f000 fcb1 	bl	80081e0 <_Bfree>
 800787e:	e0b0      	b.n	80079e2 <_dtoa_r+0x622>
 8007880:	07e2      	lsls	r2, r4, #31
 8007882:	d505      	bpl.n	8007890 <_dtoa_r+0x4d0>
 8007884:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007888:	f7f8 fece 	bl	8000628 <__aeabi_dmul>
 800788c:	3601      	adds	r6, #1
 800788e:	2301      	movs	r3, #1
 8007890:	1064      	asrs	r4, r4, #1
 8007892:	3508      	adds	r5, #8
 8007894:	e762      	b.n	800775c <_dtoa_r+0x39c>
 8007896:	2602      	movs	r6, #2
 8007898:	e765      	b.n	8007766 <_dtoa_r+0x3a6>
 800789a:	9c03      	ldr	r4, [sp, #12]
 800789c:	46b8      	mov	r8, r7
 800789e:	e784      	b.n	80077aa <_dtoa_r+0x3ea>
 80078a0:	4b27      	ldr	r3, [pc, #156]	@ (8007940 <_dtoa_r+0x580>)
 80078a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078ac:	4454      	add	r4, sl
 80078ae:	2900      	cmp	r1, #0
 80078b0:	d054      	beq.n	800795c <_dtoa_r+0x59c>
 80078b2:	4929      	ldr	r1, [pc, #164]	@ (8007958 <_dtoa_r+0x598>)
 80078b4:	2000      	movs	r0, #0
 80078b6:	f7f8 ffe1 	bl	800087c <__aeabi_ddiv>
 80078ba:	4633      	mov	r3, r6
 80078bc:	462a      	mov	r2, r5
 80078be:	f7f8 fcfb 	bl	80002b8 <__aeabi_dsub>
 80078c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80078c6:	4656      	mov	r6, sl
 80078c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078cc:	f7f9 f95c 	bl	8000b88 <__aeabi_d2iz>
 80078d0:	4605      	mov	r5, r0
 80078d2:	f7f8 fe3f 	bl	8000554 <__aeabi_i2d>
 80078d6:	4602      	mov	r2, r0
 80078d8:	460b      	mov	r3, r1
 80078da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078de:	f7f8 fceb 	bl	80002b8 <__aeabi_dsub>
 80078e2:	3530      	adds	r5, #48	@ 0x30
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078ec:	f806 5b01 	strb.w	r5, [r6], #1
 80078f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80078f4:	f7f9 f90a 	bl	8000b0c <__aeabi_dcmplt>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d172      	bne.n	80079e2 <_dtoa_r+0x622>
 80078fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007900:	4911      	ldr	r1, [pc, #68]	@ (8007948 <_dtoa_r+0x588>)
 8007902:	2000      	movs	r0, #0
 8007904:	f7f8 fcd8 	bl	80002b8 <__aeabi_dsub>
 8007908:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800790c:	f7f9 f8fe 	bl	8000b0c <__aeabi_dcmplt>
 8007910:	2800      	cmp	r0, #0
 8007912:	f040 80b4 	bne.w	8007a7e <_dtoa_r+0x6be>
 8007916:	42a6      	cmp	r6, r4
 8007918:	f43f af70 	beq.w	80077fc <_dtoa_r+0x43c>
 800791c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007920:	4b0a      	ldr	r3, [pc, #40]	@ (800794c <_dtoa_r+0x58c>)
 8007922:	2200      	movs	r2, #0
 8007924:	f7f8 fe80 	bl	8000628 <__aeabi_dmul>
 8007928:	4b08      	ldr	r3, [pc, #32]	@ (800794c <_dtoa_r+0x58c>)
 800792a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800792e:	2200      	movs	r2, #0
 8007930:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007934:	f7f8 fe78 	bl	8000628 <__aeabi_dmul>
 8007938:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800793c:	e7c4      	b.n	80078c8 <_dtoa_r+0x508>
 800793e:	bf00      	nop
 8007940:	080098e8 	.word	0x080098e8
 8007944:	080098c0 	.word	0x080098c0
 8007948:	3ff00000 	.word	0x3ff00000
 800794c:	40240000 	.word	0x40240000
 8007950:	401c0000 	.word	0x401c0000
 8007954:	40140000 	.word	0x40140000
 8007958:	3fe00000 	.word	0x3fe00000
 800795c:	4631      	mov	r1, r6
 800795e:	4628      	mov	r0, r5
 8007960:	f7f8 fe62 	bl	8000628 <__aeabi_dmul>
 8007964:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007968:	9413      	str	r4, [sp, #76]	@ 0x4c
 800796a:	4656      	mov	r6, sl
 800796c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007970:	f7f9 f90a 	bl	8000b88 <__aeabi_d2iz>
 8007974:	4605      	mov	r5, r0
 8007976:	f7f8 fded 	bl	8000554 <__aeabi_i2d>
 800797a:	4602      	mov	r2, r0
 800797c:	460b      	mov	r3, r1
 800797e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007982:	f7f8 fc99 	bl	80002b8 <__aeabi_dsub>
 8007986:	3530      	adds	r5, #48	@ 0x30
 8007988:	f806 5b01 	strb.w	r5, [r6], #1
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	42a6      	cmp	r6, r4
 8007992:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007996:	f04f 0200 	mov.w	r2, #0
 800799a:	d124      	bne.n	80079e6 <_dtoa_r+0x626>
 800799c:	4baf      	ldr	r3, [pc, #700]	@ (8007c5c <_dtoa_r+0x89c>)
 800799e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80079a2:	f7f8 fc8b 	bl	80002bc <__adddf3>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079ae:	f7f9 f8cb 	bl	8000b48 <__aeabi_dcmpgt>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d163      	bne.n	8007a7e <_dtoa_r+0x6be>
 80079b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80079ba:	49a8      	ldr	r1, [pc, #672]	@ (8007c5c <_dtoa_r+0x89c>)
 80079bc:	2000      	movs	r0, #0
 80079be:	f7f8 fc7b 	bl	80002b8 <__aeabi_dsub>
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079ca:	f7f9 f89f 	bl	8000b0c <__aeabi_dcmplt>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	f43f af14 	beq.w	80077fc <_dtoa_r+0x43c>
 80079d4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80079d6:	1e73      	subs	r3, r6, #1
 80079d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80079da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80079de:	2b30      	cmp	r3, #48	@ 0x30
 80079e0:	d0f8      	beq.n	80079d4 <_dtoa_r+0x614>
 80079e2:	4647      	mov	r7, r8
 80079e4:	e03b      	b.n	8007a5e <_dtoa_r+0x69e>
 80079e6:	4b9e      	ldr	r3, [pc, #632]	@ (8007c60 <_dtoa_r+0x8a0>)
 80079e8:	f7f8 fe1e 	bl	8000628 <__aeabi_dmul>
 80079ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079f0:	e7bc      	b.n	800796c <_dtoa_r+0x5ac>
 80079f2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80079f6:	4656      	mov	r6, sl
 80079f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079fc:	4620      	mov	r0, r4
 80079fe:	4629      	mov	r1, r5
 8007a00:	f7f8 ff3c 	bl	800087c <__aeabi_ddiv>
 8007a04:	f7f9 f8c0 	bl	8000b88 <__aeabi_d2iz>
 8007a08:	4680      	mov	r8, r0
 8007a0a:	f7f8 fda3 	bl	8000554 <__aeabi_i2d>
 8007a0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a12:	f7f8 fe09 	bl	8000628 <__aeabi_dmul>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007a22:	f7f8 fc49 	bl	80002b8 <__aeabi_dsub>
 8007a26:	f806 4b01 	strb.w	r4, [r6], #1
 8007a2a:	9d03      	ldr	r5, [sp, #12]
 8007a2c:	eba6 040a 	sub.w	r4, r6, sl
 8007a30:	42a5      	cmp	r5, r4
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	d133      	bne.n	8007aa0 <_dtoa_r+0x6e0>
 8007a38:	f7f8 fc40 	bl	80002bc <__adddf3>
 8007a3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a40:	4604      	mov	r4, r0
 8007a42:	460d      	mov	r5, r1
 8007a44:	f7f9 f880 	bl	8000b48 <__aeabi_dcmpgt>
 8007a48:	b9c0      	cbnz	r0, 8007a7c <_dtoa_r+0x6bc>
 8007a4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a4e:	4620      	mov	r0, r4
 8007a50:	4629      	mov	r1, r5
 8007a52:	f7f9 f851 	bl	8000af8 <__aeabi_dcmpeq>
 8007a56:	b110      	cbz	r0, 8007a5e <_dtoa_r+0x69e>
 8007a58:	f018 0f01 	tst.w	r8, #1
 8007a5c:	d10e      	bne.n	8007a7c <_dtoa_r+0x6bc>
 8007a5e:	9902      	ldr	r1, [sp, #8]
 8007a60:	4648      	mov	r0, r9
 8007a62:	f000 fbbd 	bl	80081e0 <_Bfree>
 8007a66:	2300      	movs	r3, #0
 8007a68:	7033      	strb	r3, [r6, #0]
 8007a6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007a6c:	3701      	adds	r7, #1
 8007a6e:	601f      	str	r7, [r3, #0]
 8007a70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f000 824b 	beq.w	8007f0e <_dtoa_r+0xb4e>
 8007a78:	601e      	str	r6, [r3, #0]
 8007a7a:	e248      	b.n	8007f0e <_dtoa_r+0xb4e>
 8007a7c:	46b8      	mov	r8, r7
 8007a7e:	4633      	mov	r3, r6
 8007a80:	461e      	mov	r6, r3
 8007a82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a86:	2a39      	cmp	r2, #57	@ 0x39
 8007a88:	d106      	bne.n	8007a98 <_dtoa_r+0x6d8>
 8007a8a:	459a      	cmp	sl, r3
 8007a8c:	d1f8      	bne.n	8007a80 <_dtoa_r+0x6c0>
 8007a8e:	2230      	movs	r2, #48	@ 0x30
 8007a90:	f108 0801 	add.w	r8, r8, #1
 8007a94:	f88a 2000 	strb.w	r2, [sl]
 8007a98:	781a      	ldrb	r2, [r3, #0]
 8007a9a:	3201      	adds	r2, #1
 8007a9c:	701a      	strb	r2, [r3, #0]
 8007a9e:	e7a0      	b.n	80079e2 <_dtoa_r+0x622>
 8007aa0:	4b6f      	ldr	r3, [pc, #444]	@ (8007c60 <_dtoa_r+0x8a0>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f7f8 fdc0 	bl	8000628 <__aeabi_dmul>
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2300      	movs	r3, #0
 8007aac:	4604      	mov	r4, r0
 8007aae:	460d      	mov	r5, r1
 8007ab0:	f7f9 f822 	bl	8000af8 <__aeabi_dcmpeq>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d09f      	beq.n	80079f8 <_dtoa_r+0x638>
 8007ab8:	e7d1      	b.n	8007a5e <_dtoa_r+0x69e>
 8007aba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007abc:	2a00      	cmp	r2, #0
 8007abe:	f000 80ea 	beq.w	8007c96 <_dtoa_r+0x8d6>
 8007ac2:	9a07      	ldr	r2, [sp, #28]
 8007ac4:	2a01      	cmp	r2, #1
 8007ac6:	f300 80cd 	bgt.w	8007c64 <_dtoa_r+0x8a4>
 8007aca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007acc:	2a00      	cmp	r2, #0
 8007ace:	f000 80c1 	beq.w	8007c54 <_dtoa_r+0x894>
 8007ad2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007ad6:	9c08      	ldr	r4, [sp, #32]
 8007ad8:	9e00      	ldr	r6, [sp, #0]
 8007ada:	9a00      	ldr	r2, [sp, #0]
 8007adc:	441a      	add	r2, r3
 8007ade:	9200      	str	r2, [sp, #0]
 8007ae0:	9a06      	ldr	r2, [sp, #24]
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	441a      	add	r2, r3
 8007ae6:	4648      	mov	r0, r9
 8007ae8:	9206      	str	r2, [sp, #24]
 8007aea:	f000 fc2d 	bl	8008348 <__i2b>
 8007aee:	4605      	mov	r5, r0
 8007af0:	b166      	cbz	r6, 8007b0c <_dtoa_r+0x74c>
 8007af2:	9b06      	ldr	r3, [sp, #24]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	dd09      	ble.n	8007b0c <_dtoa_r+0x74c>
 8007af8:	42b3      	cmp	r3, r6
 8007afa:	9a00      	ldr	r2, [sp, #0]
 8007afc:	bfa8      	it	ge
 8007afe:	4633      	movge	r3, r6
 8007b00:	1ad2      	subs	r2, r2, r3
 8007b02:	9200      	str	r2, [sp, #0]
 8007b04:	9a06      	ldr	r2, [sp, #24]
 8007b06:	1af6      	subs	r6, r6, r3
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	9306      	str	r3, [sp, #24]
 8007b0c:	9b08      	ldr	r3, [sp, #32]
 8007b0e:	b30b      	cbz	r3, 8007b54 <_dtoa_r+0x794>
 8007b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 80c6 	beq.w	8007ca4 <_dtoa_r+0x8e4>
 8007b18:	2c00      	cmp	r4, #0
 8007b1a:	f000 80c0 	beq.w	8007c9e <_dtoa_r+0x8de>
 8007b1e:	4629      	mov	r1, r5
 8007b20:	4622      	mov	r2, r4
 8007b22:	4648      	mov	r0, r9
 8007b24:	f000 fcc8 	bl	80084b8 <__pow5mult>
 8007b28:	9a02      	ldr	r2, [sp, #8]
 8007b2a:	4601      	mov	r1, r0
 8007b2c:	4605      	mov	r5, r0
 8007b2e:	4648      	mov	r0, r9
 8007b30:	f000 fc20 	bl	8008374 <__multiply>
 8007b34:	9902      	ldr	r1, [sp, #8]
 8007b36:	4680      	mov	r8, r0
 8007b38:	4648      	mov	r0, r9
 8007b3a:	f000 fb51 	bl	80081e0 <_Bfree>
 8007b3e:	9b08      	ldr	r3, [sp, #32]
 8007b40:	1b1b      	subs	r3, r3, r4
 8007b42:	9308      	str	r3, [sp, #32]
 8007b44:	f000 80b1 	beq.w	8007caa <_dtoa_r+0x8ea>
 8007b48:	9a08      	ldr	r2, [sp, #32]
 8007b4a:	4641      	mov	r1, r8
 8007b4c:	4648      	mov	r0, r9
 8007b4e:	f000 fcb3 	bl	80084b8 <__pow5mult>
 8007b52:	9002      	str	r0, [sp, #8]
 8007b54:	2101      	movs	r1, #1
 8007b56:	4648      	mov	r0, r9
 8007b58:	f000 fbf6 	bl	8008348 <__i2b>
 8007b5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b5e:	4604      	mov	r4, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 81d8 	beq.w	8007f16 <_dtoa_r+0xb56>
 8007b66:	461a      	mov	r2, r3
 8007b68:	4601      	mov	r1, r0
 8007b6a:	4648      	mov	r0, r9
 8007b6c:	f000 fca4 	bl	80084b8 <__pow5mult>
 8007b70:	9b07      	ldr	r3, [sp, #28]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	4604      	mov	r4, r0
 8007b76:	f300 809f 	bgt.w	8007cb8 <_dtoa_r+0x8f8>
 8007b7a:	9b04      	ldr	r3, [sp, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f040 8097 	bne.w	8007cb0 <_dtoa_r+0x8f0>
 8007b82:	9b05      	ldr	r3, [sp, #20]
 8007b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f040 8093 	bne.w	8007cb4 <_dtoa_r+0x8f4>
 8007b8e:	9b05      	ldr	r3, [sp, #20]
 8007b90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b94:	0d1b      	lsrs	r3, r3, #20
 8007b96:	051b      	lsls	r3, r3, #20
 8007b98:	b133      	cbz	r3, 8007ba8 <_dtoa_r+0x7e8>
 8007b9a:	9b00      	ldr	r3, [sp, #0]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	9b06      	ldr	r3, [sp, #24]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	9306      	str	r3, [sp, #24]
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	9308      	str	r3, [sp, #32]
 8007baa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 81b8 	beq.w	8007f22 <_dtoa_r+0xb62>
 8007bb2:	6923      	ldr	r3, [r4, #16]
 8007bb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007bb8:	6918      	ldr	r0, [r3, #16]
 8007bba:	f000 fb79 	bl	80082b0 <__hi0bits>
 8007bbe:	f1c0 0020 	rsb	r0, r0, #32
 8007bc2:	9b06      	ldr	r3, [sp, #24]
 8007bc4:	4418      	add	r0, r3
 8007bc6:	f010 001f 	ands.w	r0, r0, #31
 8007bca:	f000 8082 	beq.w	8007cd2 <_dtoa_r+0x912>
 8007bce:	f1c0 0320 	rsb	r3, r0, #32
 8007bd2:	2b04      	cmp	r3, #4
 8007bd4:	dd73      	ble.n	8007cbe <_dtoa_r+0x8fe>
 8007bd6:	9b00      	ldr	r3, [sp, #0]
 8007bd8:	f1c0 001c 	rsb	r0, r0, #28
 8007bdc:	4403      	add	r3, r0
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	9b06      	ldr	r3, [sp, #24]
 8007be2:	4403      	add	r3, r0
 8007be4:	4406      	add	r6, r0
 8007be6:	9306      	str	r3, [sp, #24]
 8007be8:	9b00      	ldr	r3, [sp, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	dd05      	ble.n	8007bfa <_dtoa_r+0x83a>
 8007bee:	9902      	ldr	r1, [sp, #8]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	4648      	mov	r0, r9
 8007bf4:	f000 fcba 	bl	800856c <__lshift>
 8007bf8:	9002      	str	r0, [sp, #8]
 8007bfa:	9b06      	ldr	r3, [sp, #24]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	dd05      	ble.n	8007c0c <_dtoa_r+0x84c>
 8007c00:	4621      	mov	r1, r4
 8007c02:	461a      	mov	r2, r3
 8007c04:	4648      	mov	r0, r9
 8007c06:	f000 fcb1 	bl	800856c <__lshift>
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d061      	beq.n	8007cd6 <_dtoa_r+0x916>
 8007c12:	9802      	ldr	r0, [sp, #8]
 8007c14:	4621      	mov	r1, r4
 8007c16:	f000 fd15 	bl	8008644 <__mcmp>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	da5b      	bge.n	8007cd6 <_dtoa_r+0x916>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9902      	ldr	r1, [sp, #8]
 8007c22:	220a      	movs	r2, #10
 8007c24:	4648      	mov	r0, r9
 8007c26:	f000 fafd 	bl	8008224 <__multadd>
 8007c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c2c:	9002      	str	r0, [sp, #8]
 8007c2e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 8177 	beq.w	8007f26 <_dtoa_r+0xb66>
 8007c38:	4629      	mov	r1, r5
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	220a      	movs	r2, #10
 8007c3e:	4648      	mov	r0, r9
 8007c40:	f000 faf0 	bl	8008224 <__multadd>
 8007c44:	f1bb 0f00 	cmp.w	fp, #0
 8007c48:	4605      	mov	r5, r0
 8007c4a:	dc6f      	bgt.n	8007d2c <_dtoa_r+0x96c>
 8007c4c:	9b07      	ldr	r3, [sp, #28]
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	dc49      	bgt.n	8007ce6 <_dtoa_r+0x926>
 8007c52:	e06b      	b.n	8007d2c <_dtoa_r+0x96c>
 8007c54:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007c5a:	e73c      	b.n	8007ad6 <_dtoa_r+0x716>
 8007c5c:	3fe00000 	.word	0x3fe00000
 8007c60:	40240000 	.word	0x40240000
 8007c64:	9b03      	ldr	r3, [sp, #12]
 8007c66:	1e5c      	subs	r4, r3, #1
 8007c68:	9b08      	ldr	r3, [sp, #32]
 8007c6a:	42a3      	cmp	r3, r4
 8007c6c:	db09      	blt.n	8007c82 <_dtoa_r+0x8c2>
 8007c6e:	1b1c      	subs	r4, r3, r4
 8007c70:	9b03      	ldr	r3, [sp, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f6bf af30 	bge.w	8007ad8 <_dtoa_r+0x718>
 8007c78:	9b00      	ldr	r3, [sp, #0]
 8007c7a:	9a03      	ldr	r2, [sp, #12]
 8007c7c:	1a9e      	subs	r6, r3, r2
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e72b      	b.n	8007ada <_dtoa_r+0x71a>
 8007c82:	9b08      	ldr	r3, [sp, #32]
 8007c84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007c86:	9408      	str	r4, [sp, #32]
 8007c88:	1ae3      	subs	r3, r4, r3
 8007c8a:	441a      	add	r2, r3
 8007c8c:	9e00      	ldr	r6, [sp, #0]
 8007c8e:	9b03      	ldr	r3, [sp, #12]
 8007c90:	920d      	str	r2, [sp, #52]	@ 0x34
 8007c92:	2400      	movs	r4, #0
 8007c94:	e721      	b.n	8007ada <_dtoa_r+0x71a>
 8007c96:	9c08      	ldr	r4, [sp, #32]
 8007c98:	9e00      	ldr	r6, [sp, #0]
 8007c9a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007c9c:	e728      	b.n	8007af0 <_dtoa_r+0x730>
 8007c9e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007ca2:	e751      	b.n	8007b48 <_dtoa_r+0x788>
 8007ca4:	9a08      	ldr	r2, [sp, #32]
 8007ca6:	9902      	ldr	r1, [sp, #8]
 8007ca8:	e750      	b.n	8007b4c <_dtoa_r+0x78c>
 8007caa:	f8cd 8008 	str.w	r8, [sp, #8]
 8007cae:	e751      	b.n	8007b54 <_dtoa_r+0x794>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	e779      	b.n	8007ba8 <_dtoa_r+0x7e8>
 8007cb4:	9b04      	ldr	r3, [sp, #16]
 8007cb6:	e777      	b.n	8007ba8 <_dtoa_r+0x7e8>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	9308      	str	r3, [sp, #32]
 8007cbc:	e779      	b.n	8007bb2 <_dtoa_r+0x7f2>
 8007cbe:	d093      	beq.n	8007be8 <_dtoa_r+0x828>
 8007cc0:	9a00      	ldr	r2, [sp, #0]
 8007cc2:	331c      	adds	r3, #28
 8007cc4:	441a      	add	r2, r3
 8007cc6:	9200      	str	r2, [sp, #0]
 8007cc8:	9a06      	ldr	r2, [sp, #24]
 8007cca:	441a      	add	r2, r3
 8007ccc:	441e      	add	r6, r3
 8007cce:	9206      	str	r2, [sp, #24]
 8007cd0:	e78a      	b.n	8007be8 <_dtoa_r+0x828>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	e7f4      	b.n	8007cc0 <_dtoa_r+0x900>
 8007cd6:	9b03      	ldr	r3, [sp, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	46b8      	mov	r8, r7
 8007cdc:	dc20      	bgt.n	8007d20 <_dtoa_r+0x960>
 8007cde:	469b      	mov	fp, r3
 8007ce0:	9b07      	ldr	r3, [sp, #28]
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	dd1e      	ble.n	8007d24 <_dtoa_r+0x964>
 8007ce6:	f1bb 0f00 	cmp.w	fp, #0
 8007cea:	f47f adb1 	bne.w	8007850 <_dtoa_r+0x490>
 8007cee:	4621      	mov	r1, r4
 8007cf0:	465b      	mov	r3, fp
 8007cf2:	2205      	movs	r2, #5
 8007cf4:	4648      	mov	r0, r9
 8007cf6:	f000 fa95 	bl	8008224 <__multadd>
 8007cfa:	4601      	mov	r1, r0
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	9802      	ldr	r0, [sp, #8]
 8007d00:	f000 fca0 	bl	8008644 <__mcmp>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	f77f ada3 	ble.w	8007850 <_dtoa_r+0x490>
 8007d0a:	4656      	mov	r6, sl
 8007d0c:	2331      	movs	r3, #49	@ 0x31
 8007d0e:	f806 3b01 	strb.w	r3, [r6], #1
 8007d12:	f108 0801 	add.w	r8, r8, #1
 8007d16:	e59f      	b.n	8007858 <_dtoa_r+0x498>
 8007d18:	9c03      	ldr	r4, [sp, #12]
 8007d1a:	46b8      	mov	r8, r7
 8007d1c:	4625      	mov	r5, r4
 8007d1e:	e7f4      	b.n	8007d0a <_dtoa_r+0x94a>
 8007d20:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 8101 	beq.w	8007f2e <_dtoa_r+0xb6e>
 8007d2c:	2e00      	cmp	r6, #0
 8007d2e:	dd05      	ble.n	8007d3c <_dtoa_r+0x97c>
 8007d30:	4629      	mov	r1, r5
 8007d32:	4632      	mov	r2, r6
 8007d34:	4648      	mov	r0, r9
 8007d36:	f000 fc19 	bl	800856c <__lshift>
 8007d3a:	4605      	mov	r5, r0
 8007d3c:	9b08      	ldr	r3, [sp, #32]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d05c      	beq.n	8007dfc <_dtoa_r+0xa3c>
 8007d42:	6869      	ldr	r1, [r5, #4]
 8007d44:	4648      	mov	r0, r9
 8007d46:	f000 fa0b 	bl	8008160 <_Balloc>
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	b928      	cbnz	r0, 8007d5a <_dtoa_r+0x99a>
 8007d4e:	4b82      	ldr	r3, [pc, #520]	@ (8007f58 <_dtoa_r+0xb98>)
 8007d50:	4602      	mov	r2, r0
 8007d52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007d56:	f7ff bb4a 	b.w	80073ee <_dtoa_r+0x2e>
 8007d5a:	692a      	ldr	r2, [r5, #16]
 8007d5c:	3202      	adds	r2, #2
 8007d5e:	0092      	lsls	r2, r2, #2
 8007d60:	f105 010c 	add.w	r1, r5, #12
 8007d64:	300c      	adds	r0, #12
 8007d66:	f7ff fa74 	bl	8007252 <memcpy>
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	4648      	mov	r0, r9
 8007d70:	f000 fbfc 	bl	800856c <__lshift>
 8007d74:	f10a 0301 	add.w	r3, sl, #1
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	eb0a 030b 	add.w	r3, sl, fp
 8007d7e:	9308      	str	r3, [sp, #32]
 8007d80:	9b04      	ldr	r3, [sp, #16]
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	462f      	mov	r7, r5
 8007d88:	9306      	str	r3, [sp, #24]
 8007d8a:	4605      	mov	r5, r0
 8007d8c:	9b00      	ldr	r3, [sp, #0]
 8007d8e:	9802      	ldr	r0, [sp, #8]
 8007d90:	4621      	mov	r1, r4
 8007d92:	f103 3bff 	add.w	fp, r3, #4294967295
 8007d96:	f7ff fa89 	bl	80072ac <quorem>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	3330      	adds	r3, #48	@ 0x30
 8007d9e:	9003      	str	r0, [sp, #12]
 8007da0:	4639      	mov	r1, r7
 8007da2:	9802      	ldr	r0, [sp, #8]
 8007da4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007da6:	f000 fc4d 	bl	8008644 <__mcmp>
 8007daa:	462a      	mov	r2, r5
 8007dac:	9004      	str	r0, [sp, #16]
 8007dae:	4621      	mov	r1, r4
 8007db0:	4648      	mov	r0, r9
 8007db2:	f000 fc63 	bl	800867c <__mdiff>
 8007db6:	68c2      	ldr	r2, [r0, #12]
 8007db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dba:	4606      	mov	r6, r0
 8007dbc:	bb02      	cbnz	r2, 8007e00 <_dtoa_r+0xa40>
 8007dbe:	4601      	mov	r1, r0
 8007dc0:	9802      	ldr	r0, [sp, #8]
 8007dc2:	f000 fc3f 	bl	8008644 <__mcmp>
 8007dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dc8:	4602      	mov	r2, r0
 8007dca:	4631      	mov	r1, r6
 8007dcc:	4648      	mov	r0, r9
 8007dce:	920c      	str	r2, [sp, #48]	@ 0x30
 8007dd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dd2:	f000 fa05 	bl	80081e0 <_Bfree>
 8007dd6:	9b07      	ldr	r3, [sp, #28]
 8007dd8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007dda:	9e00      	ldr	r6, [sp, #0]
 8007ddc:	ea42 0103 	orr.w	r1, r2, r3
 8007de0:	9b06      	ldr	r3, [sp, #24]
 8007de2:	4319      	orrs	r1, r3
 8007de4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007de6:	d10d      	bne.n	8007e04 <_dtoa_r+0xa44>
 8007de8:	2b39      	cmp	r3, #57	@ 0x39
 8007dea:	d027      	beq.n	8007e3c <_dtoa_r+0xa7c>
 8007dec:	9a04      	ldr	r2, [sp, #16]
 8007dee:	2a00      	cmp	r2, #0
 8007df0:	dd01      	ble.n	8007df6 <_dtoa_r+0xa36>
 8007df2:	9b03      	ldr	r3, [sp, #12]
 8007df4:	3331      	adds	r3, #49	@ 0x31
 8007df6:	f88b 3000 	strb.w	r3, [fp]
 8007dfa:	e52e      	b.n	800785a <_dtoa_r+0x49a>
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	e7b9      	b.n	8007d74 <_dtoa_r+0x9b4>
 8007e00:	2201      	movs	r2, #1
 8007e02:	e7e2      	b.n	8007dca <_dtoa_r+0xa0a>
 8007e04:	9904      	ldr	r1, [sp, #16]
 8007e06:	2900      	cmp	r1, #0
 8007e08:	db04      	blt.n	8007e14 <_dtoa_r+0xa54>
 8007e0a:	9807      	ldr	r0, [sp, #28]
 8007e0c:	4301      	orrs	r1, r0
 8007e0e:	9806      	ldr	r0, [sp, #24]
 8007e10:	4301      	orrs	r1, r0
 8007e12:	d120      	bne.n	8007e56 <_dtoa_r+0xa96>
 8007e14:	2a00      	cmp	r2, #0
 8007e16:	ddee      	ble.n	8007df6 <_dtoa_r+0xa36>
 8007e18:	9902      	ldr	r1, [sp, #8]
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	4648      	mov	r0, r9
 8007e20:	f000 fba4 	bl	800856c <__lshift>
 8007e24:	4621      	mov	r1, r4
 8007e26:	9002      	str	r0, [sp, #8]
 8007e28:	f000 fc0c 	bl	8008644 <__mcmp>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	9b00      	ldr	r3, [sp, #0]
 8007e30:	dc02      	bgt.n	8007e38 <_dtoa_r+0xa78>
 8007e32:	d1e0      	bne.n	8007df6 <_dtoa_r+0xa36>
 8007e34:	07da      	lsls	r2, r3, #31
 8007e36:	d5de      	bpl.n	8007df6 <_dtoa_r+0xa36>
 8007e38:	2b39      	cmp	r3, #57	@ 0x39
 8007e3a:	d1da      	bne.n	8007df2 <_dtoa_r+0xa32>
 8007e3c:	2339      	movs	r3, #57	@ 0x39
 8007e3e:	f88b 3000 	strb.w	r3, [fp]
 8007e42:	4633      	mov	r3, r6
 8007e44:	461e      	mov	r6, r3
 8007e46:	3b01      	subs	r3, #1
 8007e48:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007e4c:	2a39      	cmp	r2, #57	@ 0x39
 8007e4e:	d04e      	beq.n	8007eee <_dtoa_r+0xb2e>
 8007e50:	3201      	adds	r2, #1
 8007e52:	701a      	strb	r2, [r3, #0]
 8007e54:	e501      	b.n	800785a <_dtoa_r+0x49a>
 8007e56:	2a00      	cmp	r2, #0
 8007e58:	dd03      	ble.n	8007e62 <_dtoa_r+0xaa2>
 8007e5a:	2b39      	cmp	r3, #57	@ 0x39
 8007e5c:	d0ee      	beq.n	8007e3c <_dtoa_r+0xa7c>
 8007e5e:	3301      	adds	r3, #1
 8007e60:	e7c9      	b.n	8007df6 <_dtoa_r+0xa36>
 8007e62:	9a00      	ldr	r2, [sp, #0]
 8007e64:	9908      	ldr	r1, [sp, #32]
 8007e66:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007e6a:	428a      	cmp	r2, r1
 8007e6c:	d028      	beq.n	8007ec0 <_dtoa_r+0xb00>
 8007e6e:	9902      	ldr	r1, [sp, #8]
 8007e70:	2300      	movs	r3, #0
 8007e72:	220a      	movs	r2, #10
 8007e74:	4648      	mov	r0, r9
 8007e76:	f000 f9d5 	bl	8008224 <__multadd>
 8007e7a:	42af      	cmp	r7, r5
 8007e7c:	9002      	str	r0, [sp, #8]
 8007e7e:	f04f 0300 	mov.w	r3, #0
 8007e82:	f04f 020a 	mov.w	r2, #10
 8007e86:	4639      	mov	r1, r7
 8007e88:	4648      	mov	r0, r9
 8007e8a:	d107      	bne.n	8007e9c <_dtoa_r+0xadc>
 8007e8c:	f000 f9ca 	bl	8008224 <__multadd>
 8007e90:	4607      	mov	r7, r0
 8007e92:	4605      	mov	r5, r0
 8007e94:	9b00      	ldr	r3, [sp, #0]
 8007e96:	3301      	adds	r3, #1
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	e777      	b.n	8007d8c <_dtoa_r+0x9cc>
 8007e9c:	f000 f9c2 	bl	8008224 <__multadd>
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	4607      	mov	r7, r0
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	220a      	movs	r2, #10
 8007ea8:	4648      	mov	r0, r9
 8007eaa:	f000 f9bb 	bl	8008224 <__multadd>
 8007eae:	4605      	mov	r5, r0
 8007eb0:	e7f0      	b.n	8007e94 <_dtoa_r+0xad4>
 8007eb2:	f1bb 0f00 	cmp.w	fp, #0
 8007eb6:	bfcc      	ite	gt
 8007eb8:	465e      	movgt	r6, fp
 8007eba:	2601      	movle	r6, #1
 8007ebc:	4456      	add	r6, sl
 8007ebe:	2700      	movs	r7, #0
 8007ec0:	9902      	ldr	r1, [sp, #8]
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	4648      	mov	r0, r9
 8007ec8:	f000 fb50 	bl	800856c <__lshift>
 8007ecc:	4621      	mov	r1, r4
 8007ece:	9002      	str	r0, [sp, #8]
 8007ed0:	f000 fbb8 	bl	8008644 <__mcmp>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	dcb4      	bgt.n	8007e42 <_dtoa_r+0xa82>
 8007ed8:	d102      	bne.n	8007ee0 <_dtoa_r+0xb20>
 8007eda:	9b00      	ldr	r3, [sp, #0]
 8007edc:	07db      	lsls	r3, r3, #31
 8007ede:	d4b0      	bmi.n	8007e42 <_dtoa_r+0xa82>
 8007ee0:	4633      	mov	r3, r6
 8007ee2:	461e      	mov	r6, r3
 8007ee4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ee8:	2a30      	cmp	r2, #48	@ 0x30
 8007eea:	d0fa      	beq.n	8007ee2 <_dtoa_r+0xb22>
 8007eec:	e4b5      	b.n	800785a <_dtoa_r+0x49a>
 8007eee:	459a      	cmp	sl, r3
 8007ef0:	d1a8      	bne.n	8007e44 <_dtoa_r+0xa84>
 8007ef2:	2331      	movs	r3, #49	@ 0x31
 8007ef4:	f108 0801 	add.w	r8, r8, #1
 8007ef8:	f88a 3000 	strb.w	r3, [sl]
 8007efc:	e4ad      	b.n	800785a <_dtoa_r+0x49a>
 8007efe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f00:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007f5c <_dtoa_r+0xb9c>
 8007f04:	b11b      	cbz	r3, 8007f0e <_dtoa_r+0xb4e>
 8007f06:	f10a 0308 	add.w	r3, sl, #8
 8007f0a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	4650      	mov	r0, sl
 8007f10:	b017      	add	sp, #92	@ 0x5c
 8007f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f16:	9b07      	ldr	r3, [sp, #28]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	f77f ae2e 	ble.w	8007b7a <_dtoa_r+0x7ba>
 8007f1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f20:	9308      	str	r3, [sp, #32]
 8007f22:	2001      	movs	r0, #1
 8007f24:	e64d      	b.n	8007bc2 <_dtoa_r+0x802>
 8007f26:	f1bb 0f00 	cmp.w	fp, #0
 8007f2a:	f77f aed9 	ble.w	8007ce0 <_dtoa_r+0x920>
 8007f2e:	4656      	mov	r6, sl
 8007f30:	9802      	ldr	r0, [sp, #8]
 8007f32:	4621      	mov	r1, r4
 8007f34:	f7ff f9ba 	bl	80072ac <quorem>
 8007f38:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007f3c:	f806 3b01 	strb.w	r3, [r6], #1
 8007f40:	eba6 020a 	sub.w	r2, r6, sl
 8007f44:	4593      	cmp	fp, r2
 8007f46:	ddb4      	ble.n	8007eb2 <_dtoa_r+0xaf2>
 8007f48:	9902      	ldr	r1, [sp, #8]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	220a      	movs	r2, #10
 8007f4e:	4648      	mov	r0, r9
 8007f50:	f000 f968 	bl	8008224 <__multadd>
 8007f54:	9002      	str	r0, [sp, #8]
 8007f56:	e7eb      	b.n	8007f30 <_dtoa_r+0xb70>
 8007f58:	0800982f 	.word	0x0800982f
 8007f5c:	080097ca 	.word	0x080097ca

08007f60 <_free_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4605      	mov	r5, r0
 8007f64:	2900      	cmp	r1, #0
 8007f66:	d041      	beq.n	8007fec <_free_r+0x8c>
 8007f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f6c:	1f0c      	subs	r4, r1, #4
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	bfb8      	it	lt
 8007f72:	18e4      	addlt	r4, r4, r3
 8007f74:	f000 f8e8 	bl	8008148 <__malloc_lock>
 8007f78:	4a1d      	ldr	r2, [pc, #116]	@ (8007ff0 <_free_r+0x90>)
 8007f7a:	6813      	ldr	r3, [r2, #0]
 8007f7c:	b933      	cbnz	r3, 8007f8c <_free_r+0x2c>
 8007f7e:	6063      	str	r3, [r4, #4]
 8007f80:	6014      	str	r4, [r2, #0]
 8007f82:	4628      	mov	r0, r5
 8007f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f88:	f000 b8e4 	b.w	8008154 <__malloc_unlock>
 8007f8c:	42a3      	cmp	r3, r4
 8007f8e:	d908      	bls.n	8007fa2 <_free_r+0x42>
 8007f90:	6820      	ldr	r0, [r4, #0]
 8007f92:	1821      	adds	r1, r4, r0
 8007f94:	428b      	cmp	r3, r1
 8007f96:	bf01      	itttt	eq
 8007f98:	6819      	ldreq	r1, [r3, #0]
 8007f9a:	685b      	ldreq	r3, [r3, #4]
 8007f9c:	1809      	addeq	r1, r1, r0
 8007f9e:	6021      	streq	r1, [r4, #0]
 8007fa0:	e7ed      	b.n	8007f7e <_free_r+0x1e>
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	b10b      	cbz	r3, 8007fac <_free_r+0x4c>
 8007fa8:	42a3      	cmp	r3, r4
 8007faa:	d9fa      	bls.n	8007fa2 <_free_r+0x42>
 8007fac:	6811      	ldr	r1, [r2, #0]
 8007fae:	1850      	adds	r0, r2, r1
 8007fb0:	42a0      	cmp	r0, r4
 8007fb2:	d10b      	bne.n	8007fcc <_free_r+0x6c>
 8007fb4:	6820      	ldr	r0, [r4, #0]
 8007fb6:	4401      	add	r1, r0
 8007fb8:	1850      	adds	r0, r2, r1
 8007fba:	4283      	cmp	r3, r0
 8007fbc:	6011      	str	r1, [r2, #0]
 8007fbe:	d1e0      	bne.n	8007f82 <_free_r+0x22>
 8007fc0:	6818      	ldr	r0, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	6053      	str	r3, [r2, #4]
 8007fc6:	4408      	add	r0, r1
 8007fc8:	6010      	str	r0, [r2, #0]
 8007fca:	e7da      	b.n	8007f82 <_free_r+0x22>
 8007fcc:	d902      	bls.n	8007fd4 <_free_r+0x74>
 8007fce:	230c      	movs	r3, #12
 8007fd0:	602b      	str	r3, [r5, #0]
 8007fd2:	e7d6      	b.n	8007f82 <_free_r+0x22>
 8007fd4:	6820      	ldr	r0, [r4, #0]
 8007fd6:	1821      	adds	r1, r4, r0
 8007fd8:	428b      	cmp	r3, r1
 8007fda:	bf04      	itt	eq
 8007fdc:	6819      	ldreq	r1, [r3, #0]
 8007fde:	685b      	ldreq	r3, [r3, #4]
 8007fe0:	6063      	str	r3, [r4, #4]
 8007fe2:	bf04      	itt	eq
 8007fe4:	1809      	addeq	r1, r1, r0
 8007fe6:	6021      	streq	r1, [r4, #0]
 8007fe8:	6054      	str	r4, [r2, #4]
 8007fea:	e7ca      	b.n	8007f82 <_free_r+0x22>
 8007fec:	bd38      	pop	{r3, r4, r5, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000df8 	.word	0x20000df8

08007ff4 <malloc>:
 8007ff4:	4b02      	ldr	r3, [pc, #8]	@ (8008000 <malloc+0xc>)
 8007ff6:	4601      	mov	r1, r0
 8007ff8:	6818      	ldr	r0, [r3, #0]
 8007ffa:	f000 b825 	b.w	8008048 <_malloc_r>
 8007ffe:	bf00      	nop
 8008000:	2000001c 	.word	0x2000001c

08008004 <sbrk_aligned>:
 8008004:	b570      	push	{r4, r5, r6, lr}
 8008006:	4e0f      	ldr	r6, [pc, #60]	@ (8008044 <sbrk_aligned+0x40>)
 8008008:	460c      	mov	r4, r1
 800800a:	6831      	ldr	r1, [r6, #0]
 800800c:	4605      	mov	r5, r0
 800800e:	b911      	cbnz	r1, 8008016 <sbrk_aligned+0x12>
 8008010:	f001 f84a 	bl	80090a8 <_sbrk_r>
 8008014:	6030      	str	r0, [r6, #0]
 8008016:	4621      	mov	r1, r4
 8008018:	4628      	mov	r0, r5
 800801a:	f001 f845 	bl	80090a8 <_sbrk_r>
 800801e:	1c43      	adds	r3, r0, #1
 8008020:	d103      	bne.n	800802a <sbrk_aligned+0x26>
 8008022:	f04f 34ff 	mov.w	r4, #4294967295
 8008026:	4620      	mov	r0, r4
 8008028:	bd70      	pop	{r4, r5, r6, pc}
 800802a:	1cc4      	adds	r4, r0, #3
 800802c:	f024 0403 	bic.w	r4, r4, #3
 8008030:	42a0      	cmp	r0, r4
 8008032:	d0f8      	beq.n	8008026 <sbrk_aligned+0x22>
 8008034:	1a21      	subs	r1, r4, r0
 8008036:	4628      	mov	r0, r5
 8008038:	f001 f836 	bl	80090a8 <_sbrk_r>
 800803c:	3001      	adds	r0, #1
 800803e:	d1f2      	bne.n	8008026 <sbrk_aligned+0x22>
 8008040:	e7ef      	b.n	8008022 <sbrk_aligned+0x1e>
 8008042:	bf00      	nop
 8008044:	20000df4 	.word	0x20000df4

08008048 <_malloc_r>:
 8008048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800804c:	1ccd      	adds	r5, r1, #3
 800804e:	f025 0503 	bic.w	r5, r5, #3
 8008052:	3508      	adds	r5, #8
 8008054:	2d0c      	cmp	r5, #12
 8008056:	bf38      	it	cc
 8008058:	250c      	movcc	r5, #12
 800805a:	2d00      	cmp	r5, #0
 800805c:	4606      	mov	r6, r0
 800805e:	db01      	blt.n	8008064 <_malloc_r+0x1c>
 8008060:	42a9      	cmp	r1, r5
 8008062:	d904      	bls.n	800806e <_malloc_r+0x26>
 8008064:	230c      	movs	r3, #12
 8008066:	6033      	str	r3, [r6, #0]
 8008068:	2000      	movs	r0, #0
 800806a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800806e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008144 <_malloc_r+0xfc>
 8008072:	f000 f869 	bl	8008148 <__malloc_lock>
 8008076:	f8d8 3000 	ldr.w	r3, [r8]
 800807a:	461c      	mov	r4, r3
 800807c:	bb44      	cbnz	r4, 80080d0 <_malloc_r+0x88>
 800807e:	4629      	mov	r1, r5
 8008080:	4630      	mov	r0, r6
 8008082:	f7ff ffbf 	bl	8008004 <sbrk_aligned>
 8008086:	1c43      	adds	r3, r0, #1
 8008088:	4604      	mov	r4, r0
 800808a:	d158      	bne.n	800813e <_malloc_r+0xf6>
 800808c:	f8d8 4000 	ldr.w	r4, [r8]
 8008090:	4627      	mov	r7, r4
 8008092:	2f00      	cmp	r7, #0
 8008094:	d143      	bne.n	800811e <_malloc_r+0xd6>
 8008096:	2c00      	cmp	r4, #0
 8008098:	d04b      	beq.n	8008132 <_malloc_r+0xea>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	4639      	mov	r1, r7
 800809e:	4630      	mov	r0, r6
 80080a0:	eb04 0903 	add.w	r9, r4, r3
 80080a4:	f001 f800 	bl	80090a8 <_sbrk_r>
 80080a8:	4581      	cmp	r9, r0
 80080aa:	d142      	bne.n	8008132 <_malloc_r+0xea>
 80080ac:	6821      	ldr	r1, [r4, #0]
 80080ae:	1a6d      	subs	r5, r5, r1
 80080b0:	4629      	mov	r1, r5
 80080b2:	4630      	mov	r0, r6
 80080b4:	f7ff ffa6 	bl	8008004 <sbrk_aligned>
 80080b8:	3001      	adds	r0, #1
 80080ba:	d03a      	beq.n	8008132 <_malloc_r+0xea>
 80080bc:	6823      	ldr	r3, [r4, #0]
 80080be:	442b      	add	r3, r5
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	f8d8 3000 	ldr.w	r3, [r8]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	bb62      	cbnz	r2, 8008124 <_malloc_r+0xdc>
 80080ca:	f8c8 7000 	str.w	r7, [r8]
 80080ce:	e00f      	b.n	80080f0 <_malloc_r+0xa8>
 80080d0:	6822      	ldr	r2, [r4, #0]
 80080d2:	1b52      	subs	r2, r2, r5
 80080d4:	d420      	bmi.n	8008118 <_malloc_r+0xd0>
 80080d6:	2a0b      	cmp	r2, #11
 80080d8:	d917      	bls.n	800810a <_malloc_r+0xc2>
 80080da:	1961      	adds	r1, r4, r5
 80080dc:	42a3      	cmp	r3, r4
 80080de:	6025      	str	r5, [r4, #0]
 80080e0:	bf18      	it	ne
 80080e2:	6059      	strne	r1, [r3, #4]
 80080e4:	6863      	ldr	r3, [r4, #4]
 80080e6:	bf08      	it	eq
 80080e8:	f8c8 1000 	streq.w	r1, [r8]
 80080ec:	5162      	str	r2, [r4, r5]
 80080ee:	604b      	str	r3, [r1, #4]
 80080f0:	4630      	mov	r0, r6
 80080f2:	f000 f82f 	bl	8008154 <__malloc_unlock>
 80080f6:	f104 000b 	add.w	r0, r4, #11
 80080fa:	1d23      	adds	r3, r4, #4
 80080fc:	f020 0007 	bic.w	r0, r0, #7
 8008100:	1ac2      	subs	r2, r0, r3
 8008102:	bf1c      	itt	ne
 8008104:	1a1b      	subne	r3, r3, r0
 8008106:	50a3      	strne	r3, [r4, r2]
 8008108:	e7af      	b.n	800806a <_malloc_r+0x22>
 800810a:	6862      	ldr	r2, [r4, #4]
 800810c:	42a3      	cmp	r3, r4
 800810e:	bf0c      	ite	eq
 8008110:	f8c8 2000 	streq.w	r2, [r8]
 8008114:	605a      	strne	r2, [r3, #4]
 8008116:	e7eb      	b.n	80080f0 <_malloc_r+0xa8>
 8008118:	4623      	mov	r3, r4
 800811a:	6864      	ldr	r4, [r4, #4]
 800811c:	e7ae      	b.n	800807c <_malloc_r+0x34>
 800811e:	463c      	mov	r4, r7
 8008120:	687f      	ldr	r7, [r7, #4]
 8008122:	e7b6      	b.n	8008092 <_malloc_r+0x4a>
 8008124:	461a      	mov	r2, r3
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	42a3      	cmp	r3, r4
 800812a:	d1fb      	bne.n	8008124 <_malloc_r+0xdc>
 800812c:	2300      	movs	r3, #0
 800812e:	6053      	str	r3, [r2, #4]
 8008130:	e7de      	b.n	80080f0 <_malloc_r+0xa8>
 8008132:	230c      	movs	r3, #12
 8008134:	6033      	str	r3, [r6, #0]
 8008136:	4630      	mov	r0, r6
 8008138:	f000 f80c 	bl	8008154 <__malloc_unlock>
 800813c:	e794      	b.n	8008068 <_malloc_r+0x20>
 800813e:	6005      	str	r5, [r0, #0]
 8008140:	e7d6      	b.n	80080f0 <_malloc_r+0xa8>
 8008142:	bf00      	nop
 8008144:	20000df8 	.word	0x20000df8

08008148 <__malloc_lock>:
 8008148:	4801      	ldr	r0, [pc, #4]	@ (8008150 <__malloc_lock+0x8>)
 800814a:	f7ff b878 	b.w	800723e <__retarget_lock_acquire_recursive>
 800814e:	bf00      	nop
 8008150:	20000df0 	.word	0x20000df0

08008154 <__malloc_unlock>:
 8008154:	4801      	ldr	r0, [pc, #4]	@ (800815c <__malloc_unlock+0x8>)
 8008156:	f7ff b873 	b.w	8007240 <__retarget_lock_release_recursive>
 800815a:	bf00      	nop
 800815c:	20000df0 	.word	0x20000df0

08008160 <_Balloc>:
 8008160:	b570      	push	{r4, r5, r6, lr}
 8008162:	69c6      	ldr	r6, [r0, #28]
 8008164:	4604      	mov	r4, r0
 8008166:	460d      	mov	r5, r1
 8008168:	b976      	cbnz	r6, 8008188 <_Balloc+0x28>
 800816a:	2010      	movs	r0, #16
 800816c:	f7ff ff42 	bl	8007ff4 <malloc>
 8008170:	4602      	mov	r2, r0
 8008172:	61e0      	str	r0, [r4, #28]
 8008174:	b920      	cbnz	r0, 8008180 <_Balloc+0x20>
 8008176:	4b18      	ldr	r3, [pc, #96]	@ (80081d8 <_Balloc+0x78>)
 8008178:	4818      	ldr	r0, [pc, #96]	@ (80081dc <_Balloc+0x7c>)
 800817a:	216b      	movs	r1, #107	@ 0x6b
 800817c:	f7ff f878 	bl	8007270 <__assert_func>
 8008180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008184:	6006      	str	r6, [r0, #0]
 8008186:	60c6      	str	r6, [r0, #12]
 8008188:	69e6      	ldr	r6, [r4, #28]
 800818a:	68f3      	ldr	r3, [r6, #12]
 800818c:	b183      	cbz	r3, 80081b0 <_Balloc+0x50>
 800818e:	69e3      	ldr	r3, [r4, #28]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008196:	b9b8      	cbnz	r0, 80081c8 <_Balloc+0x68>
 8008198:	2101      	movs	r1, #1
 800819a:	fa01 f605 	lsl.w	r6, r1, r5
 800819e:	1d72      	adds	r2, r6, #5
 80081a0:	0092      	lsls	r2, r2, #2
 80081a2:	4620      	mov	r0, r4
 80081a4:	f000 ff97 	bl	80090d6 <_calloc_r>
 80081a8:	b160      	cbz	r0, 80081c4 <_Balloc+0x64>
 80081aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081ae:	e00e      	b.n	80081ce <_Balloc+0x6e>
 80081b0:	2221      	movs	r2, #33	@ 0x21
 80081b2:	2104      	movs	r1, #4
 80081b4:	4620      	mov	r0, r4
 80081b6:	f000 ff8e 	bl	80090d6 <_calloc_r>
 80081ba:	69e3      	ldr	r3, [r4, #28]
 80081bc:	60f0      	str	r0, [r6, #12]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1e4      	bne.n	800818e <_Balloc+0x2e>
 80081c4:	2000      	movs	r0, #0
 80081c6:	bd70      	pop	{r4, r5, r6, pc}
 80081c8:	6802      	ldr	r2, [r0, #0]
 80081ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081ce:	2300      	movs	r3, #0
 80081d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081d4:	e7f7      	b.n	80081c6 <_Balloc+0x66>
 80081d6:	bf00      	nop
 80081d8:	0800971d 	.word	0x0800971d
 80081dc:	08009840 	.word	0x08009840

080081e0 <_Bfree>:
 80081e0:	b570      	push	{r4, r5, r6, lr}
 80081e2:	69c6      	ldr	r6, [r0, #28]
 80081e4:	4605      	mov	r5, r0
 80081e6:	460c      	mov	r4, r1
 80081e8:	b976      	cbnz	r6, 8008208 <_Bfree+0x28>
 80081ea:	2010      	movs	r0, #16
 80081ec:	f7ff ff02 	bl	8007ff4 <malloc>
 80081f0:	4602      	mov	r2, r0
 80081f2:	61e8      	str	r0, [r5, #28]
 80081f4:	b920      	cbnz	r0, 8008200 <_Bfree+0x20>
 80081f6:	4b09      	ldr	r3, [pc, #36]	@ (800821c <_Bfree+0x3c>)
 80081f8:	4809      	ldr	r0, [pc, #36]	@ (8008220 <_Bfree+0x40>)
 80081fa:	218f      	movs	r1, #143	@ 0x8f
 80081fc:	f7ff f838 	bl	8007270 <__assert_func>
 8008200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008204:	6006      	str	r6, [r0, #0]
 8008206:	60c6      	str	r6, [r0, #12]
 8008208:	b13c      	cbz	r4, 800821a <_Bfree+0x3a>
 800820a:	69eb      	ldr	r3, [r5, #28]
 800820c:	6862      	ldr	r2, [r4, #4]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008214:	6021      	str	r1, [r4, #0]
 8008216:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800821a:	bd70      	pop	{r4, r5, r6, pc}
 800821c:	0800971d 	.word	0x0800971d
 8008220:	08009840 	.word	0x08009840

08008224 <__multadd>:
 8008224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008228:	690d      	ldr	r5, [r1, #16]
 800822a:	4607      	mov	r7, r0
 800822c:	460c      	mov	r4, r1
 800822e:	461e      	mov	r6, r3
 8008230:	f101 0c14 	add.w	ip, r1, #20
 8008234:	2000      	movs	r0, #0
 8008236:	f8dc 3000 	ldr.w	r3, [ip]
 800823a:	b299      	uxth	r1, r3
 800823c:	fb02 6101 	mla	r1, r2, r1, r6
 8008240:	0c1e      	lsrs	r6, r3, #16
 8008242:	0c0b      	lsrs	r3, r1, #16
 8008244:	fb02 3306 	mla	r3, r2, r6, r3
 8008248:	b289      	uxth	r1, r1
 800824a:	3001      	adds	r0, #1
 800824c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008250:	4285      	cmp	r5, r0
 8008252:	f84c 1b04 	str.w	r1, [ip], #4
 8008256:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800825a:	dcec      	bgt.n	8008236 <__multadd+0x12>
 800825c:	b30e      	cbz	r6, 80082a2 <__multadd+0x7e>
 800825e:	68a3      	ldr	r3, [r4, #8]
 8008260:	42ab      	cmp	r3, r5
 8008262:	dc19      	bgt.n	8008298 <__multadd+0x74>
 8008264:	6861      	ldr	r1, [r4, #4]
 8008266:	4638      	mov	r0, r7
 8008268:	3101      	adds	r1, #1
 800826a:	f7ff ff79 	bl	8008160 <_Balloc>
 800826e:	4680      	mov	r8, r0
 8008270:	b928      	cbnz	r0, 800827e <__multadd+0x5a>
 8008272:	4602      	mov	r2, r0
 8008274:	4b0c      	ldr	r3, [pc, #48]	@ (80082a8 <__multadd+0x84>)
 8008276:	480d      	ldr	r0, [pc, #52]	@ (80082ac <__multadd+0x88>)
 8008278:	21ba      	movs	r1, #186	@ 0xba
 800827a:	f7fe fff9 	bl	8007270 <__assert_func>
 800827e:	6922      	ldr	r2, [r4, #16]
 8008280:	3202      	adds	r2, #2
 8008282:	f104 010c 	add.w	r1, r4, #12
 8008286:	0092      	lsls	r2, r2, #2
 8008288:	300c      	adds	r0, #12
 800828a:	f7fe ffe2 	bl	8007252 <memcpy>
 800828e:	4621      	mov	r1, r4
 8008290:	4638      	mov	r0, r7
 8008292:	f7ff ffa5 	bl	80081e0 <_Bfree>
 8008296:	4644      	mov	r4, r8
 8008298:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800829c:	3501      	adds	r5, #1
 800829e:	615e      	str	r6, [r3, #20]
 80082a0:	6125      	str	r5, [r4, #16]
 80082a2:	4620      	mov	r0, r4
 80082a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082a8:	0800982f 	.word	0x0800982f
 80082ac:	08009840 	.word	0x08009840

080082b0 <__hi0bits>:
 80082b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80082b4:	4603      	mov	r3, r0
 80082b6:	bf36      	itet	cc
 80082b8:	0403      	lslcc	r3, r0, #16
 80082ba:	2000      	movcs	r0, #0
 80082bc:	2010      	movcc	r0, #16
 80082be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082c2:	bf3c      	itt	cc
 80082c4:	021b      	lslcc	r3, r3, #8
 80082c6:	3008      	addcc	r0, #8
 80082c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082cc:	bf3c      	itt	cc
 80082ce:	011b      	lslcc	r3, r3, #4
 80082d0:	3004      	addcc	r0, #4
 80082d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082d6:	bf3c      	itt	cc
 80082d8:	009b      	lslcc	r3, r3, #2
 80082da:	3002      	addcc	r0, #2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	db05      	blt.n	80082ec <__hi0bits+0x3c>
 80082e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80082e4:	f100 0001 	add.w	r0, r0, #1
 80082e8:	bf08      	it	eq
 80082ea:	2020      	moveq	r0, #32
 80082ec:	4770      	bx	lr

080082ee <__lo0bits>:
 80082ee:	6803      	ldr	r3, [r0, #0]
 80082f0:	4602      	mov	r2, r0
 80082f2:	f013 0007 	ands.w	r0, r3, #7
 80082f6:	d00b      	beq.n	8008310 <__lo0bits+0x22>
 80082f8:	07d9      	lsls	r1, r3, #31
 80082fa:	d421      	bmi.n	8008340 <__lo0bits+0x52>
 80082fc:	0798      	lsls	r0, r3, #30
 80082fe:	bf49      	itett	mi
 8008300:	085b      	lsrmi	r3, r3, #1
 8008302:	089b      	lsrpl	r3, r3, #2
 8008304:	2001      	movmi	r0, #1
 8008306:	6013      	strmi	r3, [r2, #0]
 8008308:	bf5c      	itt	pl
 800830a:	6013      	strpl	r3, [r2, #0]
 800830c:	2002      	movpl	r0, #2
 800830e:	4770      	bx	lr
 8008310:	b299      	uxth	r1, r3
 8008312:	b909      	cbnz	r1, 8008318 <__lo0bits+0x2a>
 8008314:	0c1b      	lsrs	r3, r3, #16
 8008316:	2010      	movs	r0, #16
 8008318:	b2d9      	uxtb	r1, r3
 800831a:	b909      	cbnz	r1, 8008320 <__lo0bits+0x32>
 800831c:	3008      	adds	r0, #8
 800831e:	0a1b      	lsrs	r3, r3, #8
 8008320:	0719      	lsls	r1, r3, #28
 8008322:	bf04      	itt	eq
 8008324:	091b      	lsreq	r3, r3, #4
 8008326:	3004      	addeq	r0, #4
 8008328:	0799      	lsls	r1, r3, #30
 800832a:	bf04      	itt	eq
 800832c:	089b      	lsreq	r3, r3, #2
 800832e:	3002      	addeq	r0, #2
 8008330:	07d9      	lsls	r1, r3, #31
 8008332:	d403      	bmi.n	800833c <__lo0bits+0x4e>
 8008334:	085b      	lsrs	r3, r3, #1
 8008336:	f100 0001 	add.w	r0, r0, #1
 800833a:	d003      	beq.n	8008344 <__lo0bits+0x56>
 800833c:	6013      	str	r3, [r2, #0]
 800833e:	4770      	bx	lr
 8008340:	2000      	movs	r0, #0
 8008342:	4770      	bx	lr
 8008344:	2020      	movs	r0, #32
 8008346:	4770      	bx	lr

08008348 <__i2b>:
 8008348:	b510      	push	{r4, lr}
 800834a:	460c      	mov	r4, r1
 800834c:	2101      	movs	r1, #1
 800834e:	f7ff ff07 	bl	8008160 <_Balloc>
 8008352:	4602      	mov	r2, r0
 8008354:	b928      	cbnz	r0, 8008362 <__i2b+0x1a>
 8008356:	4b05      	ldr	r3, [pc, #20]	@ (800836c <__i2b+0x24>)
 8008358:	4805      	ldr	r0, [pc, #20]	@ (8008370 <__i2b+0x28>)
 800835a:	f240 1145 	movw	r1, #325	@ 0x145
 800835e:	f7fe ff87 	bl	8007270 <__assert_func>
 8008362:	2301      	movs	r3, #1
 8008364:	6144      	str	r4, [r0, #20]
 8008366:	6103      	str	r3, [r0, #16]
 8008368:	bd10      	pop	{r4, pc}
 800836a:	bf00      	nop
 800836c:	0800982f 	.word	0x0800982f
 8008370:	08009840 	.word	0x08009840

08008374 <__multiply>:
 8008374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008378:	4617      	mov	r7, r2
 800837a:	690a      	ldr	r2, [r1, #16]
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	429a      	cmp	r2, r3
 8008380:	bfa8      	it	ge
 8008382:	463b      	movge	r3, r7
 8008384:	4689      	mov	r9, r1
 8008386:	bfa4      	itt	ge
 8008388:	460f      	movge	r7, r1
 800838a:	4699      	movge	r9, r3
 800838c:	693d      	ldr	r5, [r7, #16]
 800838e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	6879      	ldr	r1, [r7, #4]
 8008396:	eb05 060a 	add.w	r6, r5, sl
 800839a:	42b3      	cmp	r3, r6
 800839c:	b085      	sub	sp, #20
 800839e:	bfb8      	it	lt
 80083a0:	3101      	addlt	r1, #1
 80083a2:	f7ff fedd 	bl	8008160 <_Balloc>
 80083a6:	b930      	cbnz	r0, 80083b6 <__multiply+0x42>
 80083a8:	4602      	mov	r2, r0
 80083aa:	4b41      	ldr	r3, [pc, #260]	@ (80084b0 <__multiply+0x13c>)
 80083ac:	4841      	ldr	r0, [pc, #260]	@ (80084b4 <__multiply+0x140>)
 80083ae:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80083b2:	f7fe ff5d 	bl	8007270 <__assert_func>
 80083b6:	f100 0414 	add.w	r4, r0, #20
 80083ba:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80083be:	4623      	mov	r3, r4
 80083c0:	2200      	movs	r2, #0
 80083c2:	4573      	cmp	r3, lr
 80083c4:	d320      	bcc.n	8008408 <__multiply+0x94>
 80083c6:	f107 0814 	add.w	r8, r7, #20
 80083ca:	f109 0114 	add.w	r1, r9, #20
 80083ce:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80083d2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80083d6:	9302      	str	r3, [sp, #8]
 80083d8:	1beb      	subs	r3, r5, r7
 80083da:	3b15      	subs	r3, #21
 80083dc:	f023 0303 	bic.w	r3, r3, #3
 80083e0:	3304      	adds	r3, #4
 80083e2:	3715      	adds	r7, #21
 80083e4:	42bd      	cmp	r5, r7
 80083e6:	bf38      	it	cc
 80083e8:	2304      	movcc	r3, #4
 80083ea:	9301      	str	r3, [sp, #4]
 80083ec:	9b02      	ldr	r3, [sp, #8]
 80083ee:	9103      	str	r1, [sp, #12]
 80083f0:	428b      	cmp	r3, r1
 80083f2:	d80c      	bhi.n	800840e <__multiply+0x9a>
 80083f4:	2e00      	cmp	r6, #0
 80083f6:	dd03      	ble.n	8008400 <__multiply+0x8c>
 80083f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d055      	beq.n	80084ac <__multiply+0x138>
 8008400:	6106      	str	r6, [r0, #16]
 8008402:	b005      	add	sp, #20
 8008404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008408:	f843 2b04 	str.w	r2, [r3], #4
 800840c:	e7d9      	b.n	80083c2 <__multiply+0x4e>
 800840e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008412:	f1ba 0f00 	cmp.w	sl, #0
 8008416:	d01f      	beq.n	8008458 <__multiply+0xe4>
 8008418:	46c4      	mov	ip, r8
 800841a:	46a1      	mov	r9, r4
 800841c:	2700      	movs	r7, #0
 800841e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008422:	f8d9 3000 	ldr.w	r3, [r9]
 8008426:	fa1f fb82 	uxth.w	fp, r2
 800842a:	b29b      	uxth	r3, r3
 800842c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008430:	443b      	add	r3, r7
 8008432:	f8d9 7000 	ldr.w	r7, [r9]
 8008436:	0c12      	lsrs	r2, r2, #16
 8008438:	0c3f      	lsrs	r7, r7, #16
 800843a:	fb0a 7202 	mla	r2, sl, r2, r7
 800843e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008442:	b29b      	uxth	r3, r3
 8008444:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008448:	4565      	cmp	r5, ip
 800844a:	f849 3b04 	str.w	r3, [r9], #4
 800844e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008452:	d8e4      	bhi.n	800841e <__multiply+0xaa>
 8008454:	9b01      	ldr	r3, [sp, #4]
 8008456:	50e7      	str	r7, [r4, r3]
 8008458:	9b03      	ldr	r3, [sp, #12]
 800845a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800845e:	3104      	adds	r1, #4
 8008460:	f1b9 0f00 	cmp.w	r9, #0
 8008464:	d020      	beq.n	80084a8 <__multiply+0x134>
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	4647      	mov	r7, r8
 800846a:	46a4      	mov	ip, r4
 800846c:	f04f 0a00 	mov.w	sl, #0
 8008470:	f8b7 b000 	ldrh.w	fp, [r7]
 8008474:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008478:	fb09 220b 	mla	r2, r9, fp, r2
 800847c:	4452      	add	r2, sl
 800847e:	b29b      	uxth	r3, r3
 8008480:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008484:	f84c 3b04 	str.w	r3, [ip], #4
 8008488:	f857 3b04 	ldr.w	r3, [r7], #4
 800848c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008490:	f8bc 3000 	ldrh.w	r3, [ip]
 8008494:	fb09 330a 	mla	r3, r9, sl, r3
 8008498:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800849c:	42bd      	cmp	r5, r7
 800849e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084a2:	d8e5      	bhi.n	8008470 <__multiply+0xfc>
 80084a4:	9a01      	ldr	r2, [sp, #4]
 80084a6:	50a3      	str	r3, [r4, r2]
 80084a8:	3404      	adds	r4, #4
 80084aa:	e79f      	b.n	80083ec <__multiply+0x78>
 80084ac:	3e01      	subs	r6, #1
 80084ae:	e7a1      	b.n	80083f4 <__multiply+0x80>
 80084b0:	0800982f 	.word	0x0800982f
 80084b4:	08009840 	.word	0x08009840

080084b8 <__pow5mult>:
 80084b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084bc:	4615      	mov	r5, r2
 80084be:	f012 0203 	ands.w	r2, r2, #3
 80084c2:	4607      	mov	r7, r0
 80084c4:	460e      	mov	r6, r1
 80084c6:	d007      	beq.n	80084d8 <__pow5mult+0x20>
 80084c8:	4c25      	ldr	r4, [pc, #148]	@ (8008560 <__pow5mult+0xa8>)
 80084ca:	3a01      	subs	r2, #1
 80084cc:	2300      	movs	r3, #0
 80084ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084d2:	f7ff fea7 	bl	8008224 <__multadd>
 80084d6:	4606      	mov	r6, r0
 80084d8:	10ad      	asrs	r5, r5, #2
 80084da:	d03d      	beq.n	8008558 <__pow5mult+0xa0>
 80084dc:	69fc      	ldr	r4, [r7, #28]
 80084de:	b97c      	cbnz	r4, 8008500 <__pow5mult+0x48>
 80084e0:	2010      	movs	r0, #16
 80084e2:	f7ff fd87 	bl	8007ff4 <malloc>
 80084e6:	4602      	mov	r2, r0
 80084e8:	61f8      	str	r0, [r7, #28]
 80084ea:	b928      	cbnz	r0, 80084f8 <__pow5mult+0x40>
 80084ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008564 <__pow5mult+0xac>)
 80084ee:	481e      	ldr	r0, [pc, #120]	@ (8008568 <__pow5mult+0xb0>)
 80084f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80084f4:	f7fe febc 	bl	8007270 <__assert_func>
 80084f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084fc:	6004      	str	r4, [r0, #0]
 80084fe:	60c4      	str	r4, [r0, #12]
 8008500:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008504:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008508:	b94c      	cbnz	r4, 800851e <__pow5mult+0x66>
 800850a:	f240 2171 	movw	r1, #625	@ 0x271
 800850e:	4638      	mov	r0, r7
 8008510:	f7ff ff1a 	bl	8008348 <__i2b>
 8008514:	2300      	movs	r3, #0
 8008516:	f8c8 0008 	str.w	r0, [r8, #8]
 800851a:	4604      	mov	r4, r0
 800851c:	6003      	str	r3, [r0, #0]
 800851e:	f04f 0900 	mov.w	r9, #0
 8008522:	07eb      	lsls	r3, r5, #31
 8008524:	d50a      	bpl.n	800853c <__pow5mult+0x84>
 8008526:	4631      	mov	r1, r6
 8008528:	4622      	mov	r2, r4
 800852a:	4638      	mov	r0, r7
 800852c:	f7ff ff22 	bl	8008374 <__multiply>
 8008530:	4631      	mov	r1, r6
 8008532:	4680      	mov	r8, r0
 8008534:	4638      	mov	r0, r7
 8008536:	f7ff fe53 	bl	80081e0 <_Bfree>
 800853a:	4646      	mov	r6, r8
 800853c:	106d      	asrs	r5, r5, #1
 800853e:	d00b      	beq.n	8008558 <__pow5mult+0xa0>
 8008540:	6820      	ldr	r0, [r4, #0]
 8008542:	b938      	cbnz	r0, 8008554 <__pow5mult+0x9c>
 8008544:	4622      	mov	r2, r4
 8008546:	4621      	mov	r1, r4
 8008548:	4638      	mov	r0, r7
 800854a:	f7ff ff13 	bl	8008374 <__multiply>
 800854e:	6020      	str	r0, [r4, #0]
 8008550:	f8c0 9000 	str.w	r9, [r0]
 8008554:	4604      	mov	r4, r0
 8008556:	e7e4      	b.n	8008522 <__pow5mult+0x6a>
 8008558:	4630      	mov	r0, r6
 800855a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800855e:	bf00      	nop
 8008560:	080098b4 	.word	0x080098b4
 8008564:	0800971d 	.word	0x0800971d
 8008568:	08009840 	.word	0x08009840

0800856c <__lshift>:
 800856c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008570:	460c      	mov	r4, r1
 8008572:	6849      	ldr	r1, [r1, #4]
 8008574:	6923      	ldr	r3, [r4, #16]
 8008576:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800857a:	68a3      	ldr	r3, [r4, #8]
 800857c:	4607      	mov	r7, r0
 800857e:	4691      	mov	r9, r2
 8008580:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008584:	f108 0601 	add.w	r6, r8, #1
 8008588:	42b3      	cmp	r3, r6
 800858a:	db0b      	blt.n	80085a4 <__lshift+0x38>
 800858c:	4638      	mov	r0, r7
 800858e:	f7ff fde7 	bl	8008160 <_Balloc>
 8008592:	4605      	mov	r5, r0
 8008594:	b948      	cbnz	r0, 80085aa <__lshift+0x3e>
 8008596:	4602      	mov	r2, r0
 8008598:	4b28      	ldr	r3, [pc, #160]	@ (800863c <__lshift+0xd0>)
 800859a:	4829      	ldr	r0, [pc, #164]	@ (8008640 <__lshift+0xd4>)
 800859c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80085a0:	f7fe fe66 	bl	8007270 <__assert_func>
 80085a4:	3101      	adds	r1, #1
 80085a6:	005b      	lsls	r3, r3, #1
 80085a8:	e7ee      	b.n	8008588 <__lshift+0x1c>
 80085aa:	2300      	movs	r3, #0
 80085ac:	f100 0114 	add.w	r1, r0, #20
 80085b0:	f100 0210 	add.w	r2, r0, #16
 80085b4:	4618      	mov	r0, r3
 80085b6:	4553      	cmp	r3, sl
 80085b8:	db33      	blt.n	8008622 <__lshift+0xb6>
 80085ba:	6920      	ldr	r0, [r4, #16]
 80085bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085c0:	f104 0314 	add.w	r3, r4, #20
 80085c4:	f019 091f 	ands.w	r9, r9, #31
 80085c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085d0:	d02b      	beq.n	800862a <__lshift+0xbe>
 80085d2:	f1c9 0e20 	rsb	lr, r9, #32
 80085d6:	468a      	mov	sl, r1
 80085d8:	2200      	movs	r2, #0
 80085da:	6818      	ldr	r0, [r3, #0]
 80085dc:	fa00 f009 	lsl.w	r0, r0, r9
 80085e0:	4310      	orrs	r0, r2
 80085e2:	f84a 0b04 	str.w	r0, [sl], #4
 80085e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ea:	459c      	cmp	ip, r3
 80085ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80085f0:	d8f3      	bhi.n	80085da <__lshift+0x6e>
 80085f2:	ebac 0304 	sub.w	r3, ip, r4
 80085f6:	3b15      	subs	r3, #21
 80085f8:	f023 0303 	bic.w	r3, r3, #3
 80085fc:	3304      	adds	r3, #4
 80085fe:	f104 0015 	add.w	r0, r4, #21
 8008602:	4560      	cmp	r0, ip
 8008604:	bf88      	it	hi
 8008606:	2304      	movhi	r3, #4
 8008608:	50ca      	str	r2, [r1, r3]
 800860a:	b10a      	cbz	r2, 8008610 <__lshift+0xa4>
 800860c:	f108 0602 	add.w	r6, r8, #2
 8008610:	3e01      	subs	r6, #1
 8008612:	4638      	mov	r0, r7
 8008614:	612e      	str	r6, [r5, #16]
 8008616:	4621      	mov	r1, r4
 8008618:	f7ff fde2 	bl	80081e0 <_Bfree>
 800861c:	4628      	mov	r0, r5
 800861e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008622:	f842 0f04 	str.w	r0, [r2, #4]!
 8008626:	3301      	adds	r3, #1
 8008628:	e7c5      	b.n	80085b6 <__lshift+0x4a>
 800862a:	3904      	subs	r1, #4
 800862c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008630:	f841 2f04 	str.w	r2, [r1, #4]!
 8008634:	459c      	cmp	ip, r3
 8008636:	d8f9      	bhi.n	800862c <__lshift+0xc0>
 8008638:	e7ea      	b.n	8008610 <__lshift+0xa4>
 800863a:	bf00      	nop
 800863c:	0800982f 	.word	0x0800982f
 8008640:	08009840 	.word	0x08009840

08008644 <__mcmp>:
 8008644:	690a      	ldr	r2, [r1, #16]
 8008646:	4603      	mov	r3, r0
 8008648:	6900      	ldr	r0, [r0, #16]
 800864a:	1a80      	subs	r0, r0, r2
 800864c:	b530      	push	{r4, r5, lr}
 800864e:	d10e      	bne.n	800866e <__mcmp+0x2a>
 8008650:	3314      	adds	r3, #20
 8008652:	3114      	adds	r1, #20
 8008654:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008658:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800865c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008660:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008664:	4295      	cmp	r5, r2
 8008666:	d003      	beq.n	8008670 <__mcmp+0x2c>
 8008668:	d205      	bcs.n	8008676 <__mcmp+0x32>
 800866a:	f04f 30ff 	mov.w	r0, #4294967295
 800866e:	bd30      	pop	{r4, r5, pc}
 8008670:	42a3      	cmp	r3, r4
 8008672:	d3f3      	bcc.n	800865c <__mcmp+0x18>
 8008674:	e7fb      	b.n	800866e <__mcmp+0x2a>
 8008676:	2001      	movs	r0, #1
 8008678:	e7f9      	b.n	800866e <__mcmp+0x2a>
	...

0800867c <__mdiff>:
 800867c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008680:	4689      	mov	r9, r1
 8008682:	4606      	mov	r6, r0
 8008684:	4611      	mov	r1, r2
 8008686:	4648      	mov	r0, r9
 8008688:	4614      	mov	r4, r2
 800868a:	f7ff ffdb 	bl	8008644 <__mcmp>
 800868e:	1e05      	subs	r5, r0, #0
 8008690:	d112      	bne.n	80086b8 <__mdiff+0x3c>
 8008692:	4629      	mov	r1, r5
 8008694:	4630      	mov	r0, r6
 8008696:	f7ff fd63 	bl	8008160 <_Balloc>
 800869a:	4602      	mov	r2, r0
 800869c:	b928      	cbnz	r0, 80086aa <__mdiff+0x2e>
 800869e:	4b3f      	ldr	r3, [pc, #252]	@ (800879c <__mdiff+0x120>)
 80086a0:	f240 2137 	movw	r1, #567	@ 0x237
 80086a4:	483e      	ldr	r0, [pc, #248]	@ (80087a0 <__mdiff+0x124>)
 80086a6:	f7fe fde3 	bl	8007270 <__assert_func>
 80086aa:	2301      	movs	r3, #1
 80086ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086b0:	4610      	mov	r0, r2
 80086b2:	b003      	add	sp, #12
 80086b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b8:	bfbc      	itt	lt
 80086ba:	464b      	movlt	r3, r9
 80086bc:	46a1      	movlt	r9, r4
 80086be:	4630      	mov	r0, r6
 80086c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80086c4:	bfba      	itte	lt
 80086c6:	461c      	movlt	r4, r3
 80086c8:	2501      	movlt	r5, #1
 80086ca:	2500      	movge	r5, #0
 80086cc:	f7ff fd48 	bl	8008160 <_Balloc>
 80086d0:	4602      	mov	r2, r0
 80086d2:	b918      	cbnz	r0, 80086dc <__mdiff+0x60>
 80086d4:	4b31      	ldr	r3, [pc, #196]	@ (800879c <__mdiff+0x120>)
 80086d6:	f240 2145 	movw	r1, #581	@ 0x245
 80086da:	e7e3      	b.n	80086a4 <__mdiff+0x28>
 80086dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80086e0:	6926      	ldr	r6, [r4, #16]
 80086e2:	60c5      	str	r5, [r0, #12]
 80086e4:	f109 0310 	add.w	r3, r9, #16
 80086e8:	f109 0514 	add.w	r5, r9, #20
 80086ec:	f104 0e14 	add.w	lr, r4, #20
 80086f0:	f100 0b14 	add.w	fp, r0, #20
 80086f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80086f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	46d9      	mov	r9, fp
 8008700:	f04f 0c00 	mov.w	ip, #0
 8008704:	9b01      	ldr	r3, [sp, #4]
 8008706:	f85e 0b04 	ldr.w	r0, [lr], #4
 800870a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800870e:	9301      	str	r3, [sp, #4]
 8008710:	fa1f f38a 	uxth.w	r3, sl
 8008714:	4619      	mov	r1, r3
 8008716:	b283      	uxth	r3, r0
 8008718:	1acb      	subs	r3, r1, r3
 800871a:	0c00      	lsrs	r0, r0, #16
 800871c:	4463      	add	r3, ip
 800871e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008722:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008726:	b29b      	uxth	r3, r3
 8008728:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800872c:	4576      	cmp	r6, lr
 800872e:	f849 3b04 	str.w	r3, [r9], #4
 8008732:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008736:	d8e5      	bhi.n	8008704 <__mdiff+0x88>
 8008738:	1b33      	subs	r3, r6, r4
 800873a:	3b15      	subs	r3, #21
 800873c:	f023 0303 	bic.w	r3, r3, #3
 8008740:	3415      	adds	r4, #21
 8008742:	3304      	adds	r3, #4
 8008744:	42a6      	cmp	r6, r4
 8008746:	bf38      	it	cc
 8008748:	2304      	movcc	r3, #4
 800874a:	441d      	add	r5, r3
 800874c:	445b      	add	r3, fp
 800874e:	461e      	mov	r6, r3
 8008750:	462c      	mov	r4, r5
 8008752:	4544      	cmp	r4, r8
 8008754:	d30e      	bcc.n	8008774 <__mdiff+0xf8>
 8008756:	f108 0103 	add.w	r1, r8, #3
 800875a:	1b49      	subs	r1, r1, r5
 800875c:	f021 0103 	bic.w	r1, r1, #3
 8008760:	3d03      	subs	r5, #3
 8008762:	45a8      	cmp	r8, r5
 8008764:	bf38      	it	cc
 8008766:	2100      	movcc	r1, #0
 8008768:	440b      	add	r3, r1
 800876a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800876e:	b191      	cbz	r1, 8008796 <__mdiff+0x11a>
 8008770:	6117      	str	r7, [r2, #16]
 8008772:	e79d      	b.n	80086b0 <__mdiff+0x34>
 8008774:	f854 1b04 	ldr.w	r1, [r4], #4
 8008778:	46e6      	mov	lr, ip
 800877a:	0c08      	lsrs	r0, r1, #16
 800877c:	fa1c fc81 	uxtah	ip, ip, r1
 8008780:	4471      	add	r1, lr
 8008782:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008786:	b289      	uxth	r1, r1
 8008788:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800878c:	f846 1b04 	str.w	r1, [r6], #4
 8008790:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008794:	e7dd      	b.n	8008752 <__mdiff+0xd6>
 8008796:	3f01      	subs	r7, #1
 8008798:	e7e7      	b.n	800876a <__mdiff+0xee>
 800879a:	bf00      	nop
 800879c:	0800982f 	.word	0x0800982f
 80087a0:	08009840 	.word	0x08009840

080087a4 <__d2b>:
 80087a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087a8:	460f      	mov	r7, r1
 80087aa:	2101      	movs	r1, #1
 80087ac:	ec59 8b10 	vmov	r8, r9, d0
 80087b0:	4616      	mov	r6, r2
 80087b2:	f7ff fcd5 	bl	8008160 <_Balloc>
 80087b6:	4604      	mov	r4, r0
 80087b8:	b930      	cbnz	r0, 80087c8 <__d2b+0x24>
 80087ba:	4602      	mov	r2, r0
 80087bc:	4b23      	ldr	r3, [pc, #140]	@ (800884c <__d2b+0xa8>)
 80087be:	4824      	ldr	r0, [pc, #144]	@ (8008850 <__d2b+0xac>)
 80087c0:	f240 310f 	movw	r1, #783	@ 0x30f
 80087c4:	f7fe fd54 	bl	8007270 <__assert_func>
 80087c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087d0:	b10d      	cbz	r5, 80087d6 <__d2b+0x32>
 80087d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	f1b8 0300 	subs.w	r3, r8, #0
 80087dc:	d023      	beq.n	8008826 <__d2b+0x82>
 80087de:	4668      	mov	r0, sp
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	f7ff fd84 	bl	80082ee <__lo0bits>
 80087e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80087ea:	b1d0      	cbz	r0, 8008822 <__d2b+0x7e>
 80087ec:	f1c0 0320 	rsb	r3, r0, #32
 80087f0:	fa02 f303 	lsl.w	r3, r2, r3
 80087f4:	430b      	orrs	r3, r1
 80087f6:	40c2      	lsrs	r2, r0
 80087f8:	6163      	str	r3, [r4, #20]
 80087fa:	9201      	str	r2, [sp, #4]
 80087fc:	9b01      	ldr	r3, [sp, #4]
 80087fe:	61a3      	str	r3, [r4, #24]
 8008800:	2b00      	cmp	r3, #0
 8008802:	bf0c      	ite	eq
 8008804:	2201      	moveq	r2, #1
 8008806:	2202      	movne	r2, #2
 8008808:	6122      	str	r2, [r4, #16]
 800880a:	b1a5      	cbz	r5, 8008836 <__d2b+0x92>
 800880c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008810:	4405      	add	r5, r0
 8008812:	603d      	str	r5, [r7, #0]
 8008814:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008818:	6030      	str	r0, [r6, #0]
 800881a:	4620      	mov	r0, r4
 800881c:	b003      	add	sp, #12
 800881e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008822:	6161      	str	r1, [r4, #20]
 8008824:	e7ea      	b.n	80087fc <__d2b+0x58>
 8008826:	a801      	add	r0, sp, #4
 8008828:	f7ff fd61 	bl	80082ee <__lo0bits>
 800882c:	9b01      	ldr	r3, [sp, #4]
 800882e:	6163      	str	r3, [r4, #20]
 8008830:	3020      	adds	r0, #32
 8008832:	2201      	movs	r2, #1
 8008834:	e7e8      	b.n	8008808 <__d2b+0x64>
 8008836:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800883a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800883e:	6038      	str	r0, [r7, #0]
 8008840:	6918      	ldr	r0, [r3, #16]
 8008842:	f7ff fd35 	bl	80082b0 <__hi0bits>
 8008846:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800884a:	e7e5      	b.n	8008818 <__d2b+0x74>
 800884c:	0800982f 	.word	0x0800982f
 8008850:	08009840 	.word	0x08009840

08008854 <__ssputs_r>:
 8008854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008858:	688e      	ldr	r6, [r1, #8]
 800885a:	461f      	mov	r7, r3
 800885c:	42be      	cmp	r6, r7
 800885e:	680b      	ldr	r3, [r1, #0]
 8008860:	4682      	mov	sl, r0
 8008862:	460c      	mov	r4, r1
 8008864:	4690      	mov	r8, r2
 8008866:	d82d      	bhi.n	80088c4 <__ssputs_r+0x70>
 8008868:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800886c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008870:	d026      	beq.n	80088c0 <__ssputs_r+0x6c>
 8008872:	6965      	ldr	r5, [r4, #20]
 8008874:	6909      	ldr	r1, [r1, #16]
 8008876:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800887a:	eba3 0901 	sub.w	r9, r3, r1
 800887e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008882:	1c7b      	adds	r3, r7, #1
 8008884:	444b      	add	r3, r9
 8008886:	106d      	asrs	r5, r5, #1
 8008888:	429d      	cmp	r5, r3
 800888a:	bf38      	it	cc
 800888c:	461d      	movcc	r5, r3
 800888e:	0553      	lsls	r3, r2, #21
 8008890:	d527      	bpl.n	80088e2 <__ssputs_r+0x8e>
 8008892:	4629      	mov	r1, r5
 8008894:	f7ff fbd8 	bl	8008048 <_malloc_r>
 8008898:	4606      	mov	r6, r0
 800889a:	b360      	cbz	r0, 80088f6 <__ssputs_r+0xa2>
 800889c:	6921      	ldr	r1, [r4, #16]
 800889e:	464a      	mov	r2, r9
 80088a0:	f7fe fcd7 	bl	8007252 <memcpy>
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80088aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ae:	81a3      	strh	r3, [r4, #12]
 80088b0:	6126      	str	r6, [r4, #16]
 80088b2:	6165      	str	r5, [r4, #20]
 80088b4:	444e      	add	r6, r9
 80088b6:	eba5 0509 	sub.w	r5, r5, r9
 80088ba:	6026      	str	r6, [r4, #0]
 80088bc:	60a5      	str	r5, [r4, #8]
 80088be:	463e      	mov	r6, r7
 80088c0:	42be      	cmp	r6, r7
 80088c2:	d900      	bls.n	80088c6 <__ssputs_r+0x72>
 80088c4:	463e      	mov	r6, r7
 80088c6:	6820      	ldr	r0, [r4, #0]
 80088c8:	4632      	mov	r2, r6
 80088ca:	4641      	mov	r1, r8
 80088cc:	f000 fbb0 	bl	8009030 <memmove>
 80088d0:	68a3      	ldr	r3, [r4, #8]
 80088d2:	1b9b      	subs	r3, r3, r6
 80088d4:	60a3      	str	r3, [r4, #8]
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	4433      	add	r3, r6
 80088da:	6023      	str	r3, [r4, #0]
 80088dc:	2000      	movs	r0, #0
 80088de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e2:	462a      	mov	r2, r5
 80088e4:	f000 fc1d 	bl	8009122 <_realloc_r>
 80088e8:	4606      	mov	r6, r0
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d1e0      	bne.n	80088b0 <__ssputs_r+0x5c>
 80088ee:	6921      	ldr	r1, [r4, #16]
 80088f0:	4650      	mov	r0, sl
 80088f2:	f7ff fb35 	bl	8007f60 <_free_r>
 80088f6:	230c      	movs	r3, #12
 80088f8:	f8ca 3000 	str.w	r3, [sl]
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008902:	81a3      	strh	r3, [r4, #12]
 8008904:	f04f 30ff 	mov.w	r0, #4294967295
 8008908:	e7e9      	b.n	80088de <__ssputs_r+0x8a>
	...

0800890c <_svfiprintf_r>:
 800890c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008910:	4698      	mov	r8, r3
 8008912:	898b      	ldrh	r3, [r1, #12]
 8008914:	061b      	lsls	r3, r3, #24
 8008916:	b09d      	sub	sp, #116	@ 0x74
 8008918:	4607      	mov	r7, r0
 800891a:	460d      	mov	r5, r1
 800891c:	4614      	mov	r4, r2
 800891e:	d510      	bpl.n	8008942 <_svfiprintf_r+0x36>
 8008920:	690b      	ldr	r3, [r1, #16]
 8008922:	b973      	cbnz	r3, 8008942 <_svfiprintf_r+0x36>
 8008924:	2140      	movs	r1, #64	@ 0x40
 8008926:	f7ff fb8f 	bl	8008048 <_malloc_r>
 800892a:	6028      	str	r0, [r5, #0]
 800892c:	6128      	str	r0, [r5, #16]
 800892e:	b930      	cbnz	r0, 800893e <_svfiprintf_r+0x32>
 8008930:	230c      	movs	r3, #12
 8008932:	603b      	str	r3, [r7, #0]
 8008934:	f04f 30ff 	mov.w	r0, #4294967295
 8008938:	b01d      	add	sp, #116	@ 0x74
 800893a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893e:	2340      	movs	r3, #64	@ 0x40
 8008940:	616b      	str	r3, [r5, #20]
 8008942:	2300      	movs	r3, #0
 8008944:	9309      	str	r3, [sp, #36]	@ 0x24
 8008946:	2320      	movs	r3, #32
 8008948:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800894c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008950:	2330      	movs	r3, #48	@ 0x30
 8008952:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008af0 <_svfiprintf_r+0x1e4>
 8008956:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800895a:	f04f 0901 	mov.w	r9, #1
 800895e:	4623      	mov	r3, r4
 8008960:	469a      	mov	sl, r3
 8008962:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008966:	b10a      	cbz	r2, 800896c <_svfiprintf_r+0x60>
 8008968:	2a25      	cmp	r2, #37	@ 0x25
 800896a:	d1f9      	bne.n	8008960 <_svfiprintf_r+0x54>
 800896c:	ebba 0b04 	subs.w	fp, sl, r4
 8008970:	d00b      	beq.n	800898a <_svfiprintf_r+0x7e>
 8008972:	465b      	mov	r3, fp
 8008974:	4622      	mov	r2, r4
 8008976:	4629      	mov	r1, r5
 8008978:	4638      	mov	r0, r7
 800897a:	f7ff ff6b 	bl	8008854 <__ssputs_r>
 800897e:	3001      	adds	r0, #1
 8008980:	f000 80a7 	beq.w	8008ad2 <_svfiprintf_r+0x1c6>
 8008984:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008986:	445a      	add	r2, fp
 8008988:	9209      	str	r2, [sp, #36]	@ 0x24
 800898a:	f89a 3000 	ldrb.w	r3, [sl]
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 809f 	beq.w	8008ad2 <_svfiprintf_r+0x1c6>
 8008994:	2300      	movs	r3, #0
 8008996:	f04f 32ff 	mov.w	r2, #4294967295
 800899a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800899e:	f10a 0a01 	add.w	sl, sl, #1
 80089a2:	9304      	str	r3, [sp, #16]
 80089a4:	9307      	str	r3, [sp, #28]
 80089a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80089ac:	4654      	mov	r4, sl
 80089ae:	2205      	movs	r2, #5
 80089b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089b4:	484e      	ldr	r0, [pc, #312]	@ (8008af0 <_svfiprintf_r+0x1e4>)
 80089b6:	f7f7 fc23 	bl	8000200 <memchr>
 80089ba:	9a04      	ldr	r2, [sp, #16]
 80089bc:	b9d8      	cbnz	r0, 80089f6 <_svfiprintf_r+0xea>
 80089be:	06d0      	lsls	r0, r2, #27
 80089c0:	bf44      	itt	mi
 80089c2:	2320      	movmi	r3, #32
 80089c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089c8:	0711      	lsls	r1, r2, #28
 80089ca:	bf44      	itt	mi
 80089cc:	232b      	movmi	r3, #43	@ 0x2b
 80089ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089d2:	f89a 3000 	ldrb.w	r3, [sl]
 80089d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80089d8:	d015      	beq.n	8008a06 <_svfiprintf_r+0xfa>
 80089da:	9a07      	ldr	r2, [sp, #28]
 80089dc:	4654      	mov	r4, sl
 80089de:	2000      	movs	r0, #0
 80089e0:	f04f 0c0a 	mov.w	ip, #10
 80089e4:	4621      	mov	r1, r4
 80089e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ea:	3b30      	subs	r3, #48	@ 0x30
 80089ec:	2b09      	cmp	r3, #9
 80089ee:	d94b      	bls.n	8008a88 <_svfiprintf_r+0x17c>
 80089f0:	b1b0      	cbz	r0, 8008a20 <_svfiprintf_r+0x114>
 80089f2:	9207      	str	r2, [sp, #28]
 80089f4:	e014      	b.n	8008a20 <_svfiprintf_r+0x114>
 80089f6:	eba0 0308 	sub.w	r3, r0, r8
 80089fa:	fa09 f303 	lsl.w	r3, r9, r3
 80089fe:	4313      	orrs	r3, r2
 8008a00:	9304      	str	r3, [sp, #16]
 8008a02:	46a2      	mov	sl, r4
 8008a04:	e7d2      	b.n	80089ac <_svfiprintf_r+0xa0>
 8008a06:	9b03      	ldr	r3, [sp, #12]
 8008a08:	1d19      	adds	r1, r3, #4
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	9103      	str	r1, [sp, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	bfbb      	ittet	lt
 8008a12:	425b      	neglt	r3, r3
 8008a14:	f042 0202 	orrlt.w	r2, r2, #2
 8008a18:	9307      	strge	r3, [sp, #28]
 8008a1a:	9307      	strlt	r3, [sp, #28]
 8008a1c:	bfb8      	it	lt
 8008a1e:	9204      	strlt	r2, [sp, #16]
 8008a20:	7823      	ldrb	r3, [r4, #0]
 8008a22:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a24:	d10a      	bne.n	8008a3c <_svfiprintf_r+0x130>
 8008a26:	7863      	ldrb	r3, [r4, #1]
 8008a28:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a2a:	d132      	bne.n	8008a92 <_svfiprintf_r+0x186>
 8008a2c:	9b03      	ldr	r3, [sp, #12]
 8008a2e:	1d1a      	adds	r2, r3, #4
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	9203      	str	r2, [sp, #12]
 8008a34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a38:	3402      	adds	r4, #2
 8008a3a:	9305      	str	r3, [sp, #20]
 8008a3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b00 <_svfiprintf_r+0x1f4>
 8008a40:	7821      	ldrb	r1, [r4, #0]
 8008a42:	2203      	movs	r2, #3
 8008a44:	4650      	mov	r0, sl
 8008a46:	f7f7 fbdb 	bl	8000200 <memchr>
 8008a4a:	b138      	cbz	r0, 8008a5c <_svfiprintf_r+0x150>
 8008a4c:	9b04      	ldr	r3, [sp, #16]
 8008a4e:	eba0 000a 	sub.w	r0, r0, sl
 8008a52:	2240      	movs	r2, #64	@ 0x40
 8008a54:	4082      	lsls	r2, r0
 8008a56:	4313      	orrs	r3, r2
 8008a58:	3401      	adds	r4, #1
 8008a5a:	9304      	str	r3, [sp, #16]
 8008a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a60:	4824      	ldr	r0, [pc, #144]	@ (8008af4 <_svfiprintf_r+0x1e8>)
 8008a62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a66:	2206      	movs	r2, #6
 8008a68:	f7f7 fbca 	bl	8000200 <memchr>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d036      	beq.n	8008ade <_svfiprintf_r+0x1d2>
 8008a70:	4b21      	ldr	r3, [pc, #132]	@ (8008af8 <_svfiprintf_r+0x1ec>)
 8008a72:	bb1b      	cbnz	r3, 8008abc <_svfiprintf_r+0x1b0>
 8008a74:	9b03      	ldr	r3, [sp, #12]
 8008a76:	3307      	adds	r3, #7
 8008a78:	f023 0307 	bic.w	r3, r3, #7
 8008a7c:	3308      	adds	r3, #8
 8008a7e:	9303      	str	r3, [sp, #12]
 8008a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a82:	4433      	add	r3, r6
 8008a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a86:	e76a      	b.n	800895e <_svfiprintf_r+0x52>
 8008a88:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	2001      	movs	r0, #1
 8008a90:	e7a8      	b.n	80089e4 <_svfiprintf_r+0xd8>
 8008a92:	2300      	movs	r3, #0
 8008a94:	3401      	adds	r4, #1
 8008a96:	9305      	str	r3, [sp, #20]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	f04f 0c0a 	mov.w	ip, #10
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aa4:	3a30      	subs	r2, #48	@ 0x30
 8008aa6:	2a09      	cmp	r2, #9
 8008aa8:	d903      	bls.n	8008ab2 <_svfiprintf_r+0x1a6>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d0c6      	beq.n	8008a3c <_svfiprintf_r+0x130>
 8008aae:	9105      	str	r1, [sp, #20]
 8008ab0:	e7c4      	b.n	8008a3c <_svfiprintf_r+0x130>
 8008ab2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e7f0      	b.n	8008a9e <_svfiprintf_r+0x192>
 8008abc:	ab03      	add	r3, sp, #12
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	462a      	mov	r2, r5
 8008ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8008afc <_svfiprintf_r+0x1f0>)
 8008ac4:	a904      	add	r1, sp, #16
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	f7fd fcc0 	bl	800644c <_printf_float>
 8008acc:	1c42      	adds	r2, r0, #1
 8008ace:	4606      	mov	r6, r0
 8008ad0:	d1d6      	bne.n	8008a80 <_svfiprintf_r+0x174>
 8008ad2:	89ab      	ldrh	r3, [r5, #12]
 8008ad4:	065b      	lsls	r3, r3, #25
 8008ad6:	f53f af2d 	bmi.w	8008934 <_svfiprintf_r+0x28>
 8008ada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008adc:	e72c      	b.n	8008938 <_svfiprintf_r+0x2c>
 8008ade:	ab03      	add	r3, sp, #12
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	462a      	mov	r2, r5
 8008ae4:	4b05      	ldr	r3, [pc, #20]	@ (8008afc <_svfiprintf_r+0x1f0>)
 8008ae6:	a904      	add	r1, sp, #16
 8008ae8:	4638      	mov	r0, r7
 8008aea:	f7fd ff47 	bl	800697c <_printf_i>
 8008aee:	e7ed      	b.n	8008acc <_svfiprintf_r+0x1c0>
 8008af0:	08009899 	.word	0x08009899
 8008af4:	080098a3 	.word	0x080098a3
 8008af8:	0800644d 	.word	0x0800644d
 8008afc:	08008855 	.word	0x08008855
 8008b00:	0800989f 	.word	0x0800989f

08008b04 <__sfputc_r>:
 8008b04:	6893      	ldr	r3, [r2, #8]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	b410      	push	{r4}
 8008b0c:	6093      	str	r3, [r2, #8]
 8008b0e:	da08      	bge.n	8008b22 <__sfputc_r+0x1e>
 8008b10:	6994      	ldr	r4, [r2, #24]
 8008b12:	42a3      	cmp	r3, r4
 8008b14:	db01      	blt.n	8008b1a <__sfputc_r+0x16>
 8008b16:	290a      	cmp	r1, #10
 8008b18:	d103      	bne.n	8008b22 <__sfputc_r+0x1e>
 8008b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b1e:	f7fe b9ea 	b.w	8006ef6 <__swbuf_r>
 8008b22:	6813      	ldr	r3, [r2, #0]
 8008b24:	1c58      	adds	r0, r3, #1
 8008b26:	6010      	str	r0, [r2, #0]
 8008b28:	7019      	strb	r1, [r3, #0]
 8008b2a:	4608      	mov	r0, r1
 8008b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <__sfputs_r>:
 8008b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b34:	4606      	mov	r6, r0
 8008b36:	460f      	mov	r7, r1
 8008b38:	4614      	mov	r4, r2
 8008b3a:	18d5      	adds	r5, r2, r3
 8008b3c:	42ac      	cmp	r4, r5
 8008b3e:	d101      	bne.n	8008b44 <__sfputs_r+0x12>
 8008b40:	2000      	movs	r0, #0
 8008b42:	e007      	b.n	8008b54 <__sfputs_r+0x22>
 8008b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b48:	463a      	mov	r2, r7
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f7ff ffda 	bl	8008b04 <__sfputc_r>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d1f3      	bne.n	8008b3c <__sfputs_r+0xa>
 8008b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b58 <_vfiprintf_r>:
 8008b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5c:	460d      	mov	r5, r1
 8008b5e:	b09d      	sub	sp, #116	@ 0x74
 8008b60:	4614      	mov	r4, r2
 8008b62:	4698      	mov	r8, r3
 8008b64:	4606      	mov	r6, r0
 8008b66:	b118      	cbz	r0, 8008b70 <_vfiprintf_r+0x18>
 8008b68:	6a03      	ldr	r3, [r0, #32]
 8008b6a:	b90b      	cbnz	r3, 8008b70 <_vfiprintf_r+0x18>
 8008b6c:	f7fe f8b0 	bl	8006cd0 <__sinit>
 8008b70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b72:	07d9      	lsls	r1, r3, #31
 8008b74:	d405      	bmi.n	8008b82 <_vfiprintf_r+0x2a>
 8008b76:	89ab      	ldrh	r3, [r5, #12]
 8008b78:	059a      	lsls	r2, r3, #22
 8008b7a:	d402      	bmi.n	8008b82 <_vfiprintf_r+0x2a>
 8008b7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b7e:	f7fe fb5e 	bl	800723e <__retarget_lock_acquire_recursive>
 8008b82:	89ab      	ldrh	r3, [r5, #12]
 8008b84:	071b      	lsls	r3, r3, #28
 8008b86:	d501      	bpl.n	8008b8c <_vfiprintf_r+0x34>
 8008b88:	692b      	ldr	r3, [r5, #16]
 8008b8a:	b99b      	cbnz	r3, 8008bb4 <_vfiprintf_r+0x5c>
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f7fe f9f0 	bl	8006f74 <__swsetup_r>
 8008b94:	b170      	cbz	r0, 8008bb4 <_vfiprintf_r+0x5c>
 8008b96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b98:	07dc      	lsls	r4, r3, #31
 8008b9a:	d504      	bpl.n	8008ba6 <_vfiprintf_r+0x4e>
 8008b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba0:	b01d      	add	sp, #116	@ 0x74
 8008ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba6:	89ab      	ldrh	r3, [r5, #12]
 8008ba8:	0598      	lsls	r0, r3, #22
 8008baa:	d4f7      	bmi.n	8008b9c <_vfiprintf_r+0x44>
 8008bac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bae:	f7fe fb47 	bl	8007240 <__retarget_lock_release_recursive>
 8008bb2:	e7f3      	b.n	8008b9c <_vfiprintf_r+0x44>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bb8:	2320      	movs	r3, #32
 8008bba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bc2:	2330      	movs	r3, #48	@ 0x30
 8008bc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008d74 <_vfiprintf_r+0x21c>
 8008bc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bcc:	f04f 0901 	mov.w	r9, #1
 8008bd0:	4623      	mov	r3, r4
 8008bd2:	469a      	mov	sl, r3
 8008bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bd8:	b10a      	cbz	r2, 8008bde <_vfiprintf_r+0x86>
 8008bda:	2a25      	cmp	r2, #37	@ 0x25
 8008bdc:	d1f9      	bne.n	8008bd2 <_vfiprintf_r+0x7a>
 8008bde:	ebba 0b04 	subs.w	fp, sl, r4
 8008be2:	d00b      	beq.n	8008bfc <_vfiprintf_r+0xa4>
 8008be4:	465b      	mov	r3, fp
 8008be6:	4622      	mov	r2, r4
 8008be8:	4629      	mov	r1, r5
 8008bea:	4630      	mov	r0, r6
 8008bec:	f7ff ffa1 	bl	8008b32 <__sfputs_r>
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	f000 80a7 	beq.w	8008d44 <_vfiprintf_r+0x1ec>
 8008bf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bf8:	445a      	add	r2, fp
 8008bfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 809f 	beq.w	8008d44 <_vfiprintf_r+0x1ec>
 8008c06:	2300      	movs	r3, #0
 8008c08:	f04f 32ff 	mov.w	r2, #4294967295
 8008c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c10:	f10a 0a01 	add.w	sl, sl, #1
 8008c14:	9304      	str	r3, [sp, #16]
 8008c16:	9307      	str	r3, [sp, #28]
 8008c18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c1e:	4654      	mov	r4, sl
 8008c20:	2205      	movs	r2, #5
 8008c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c26:	4853      	ldr	r0, [pc, #332]	@ (8008d74 <_vfiprintf_r+0x21c>)
 8008c28:	f7f7 faea 	bl	8000200 <memchr>
 8008c2c:	9a04      	ldr	r2, [sp, #16]
 8008c2e:	b9d8      	cbnz	r0, 8008c68 <_vfiprintf_r+0x110>
 8008c30:	06d1      	lsls	r1, r2, #27
 8008c32:	bf44      	itt	mi
 8008c34:	2320      	movmi	r3, #32
 8008c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c3a:	0713      	lsls	r3, r2, #28
 8008c3c:	bf44      	itt	mi
 8008c3e:	232b      	movmi	r3, #43	@ 0x2b
 8008c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c44:	f89a 3000 	ldrb.w	r3, [sl]
 8008c48:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c4a:	d015      	beq.n	8008c78 <_vfiprintf_r+0x120>
 8008c4c:	9a07      	ldr	r2, [sp, #28]
 8008c4e:	4654      	mov	r4, sl
 8008c50:	2000      	movs	r0, #0
 8008c52:	f04f 0c0a 	mov.w	ip, #10
 8008c56:	4621      	mov	r1, r4
 8008c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c5c:	3b30      	subs	r3, #48	@ 0x30
 8008c5e:	2b09      	cmp	r3, #9
 8008c60:	d94b      	bls.n	8008cfa <_vfiprintf_r+0x1a2>
 8008c62:	b1b0      	cbz	r0, 8008c92 <_vfiprintf_r+0x13a>
 8008c64:	9207      	str	r2, [sp, #28]
 8008c66:	e014      	b.n	8008c92 <_vfiprintf_r+0x13a>
 8008c68:	eba0 0308 	sub.w	r3, r0, r8
 8008c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8008c70:	4313      	orrs	r3, r2
 8008c72:	9304      	str	r3, [sp, #16]
 8008c74:	46a2      	mov	sl, r4
 8008c76:	e7d2      	b.n	8008c1e <_vfiprintf_r+0xc6>
 8008c78:	9b03      	ldr	r3, [sp, #12]
 8008c7a:	1d19      	adds	r1, r3, #4
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	9103      	str	r1, [sp, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	bfbb      	ittet	lt
 8008c84:	425b      	neglt	r3, r3
 8008c86:	f042 0202 	orrlt.w	r2, r2, #2
 8008c8a:	9307      	strge	r3, [sp, #28]
 8008c8c:	9307      	strlt	r3, [sp, #28]
 8008c8e:	bfb8      	it	lt
 8008c90:	9204      	strlt	r2, [sp, #16]
 8008c92:	7823      	ldrb	r3, [r4, #0]
 8008c94:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c96:	d10a      	bne.n	8008cae <_vfiprintf_r+0x156>
 8008c98:	7863      	ldrb	r3, [r4, #1]
 8008c9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c9c:	d132      	bne.n	8008d04 <_vfiprintf_r+0x1ac>
 8008c9e:	9b03      	ldr	r3, [sp, #12]
 8008ca0:	1d1a      	adds	r2, r3, #4
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	9203      	str	r2, [sp, #12]
 8008ca6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008caa:	3402      	adds	r4, #2
 8008cac:	9305      	str	r3, [sp, #20]
 8008cae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008d84 <_vfiprintf_r+0x22c>
 8008cb2:	7821      	ldrb	r1, [r4, #0]
 8008cb4:	2203      	movs	r2, #3
 8008cb6:	4650      	mov	r0, sl
 8008cb8:	f7f7 faa2 	bl	8000200 <memchr>
 8008cbc:	b138      	cbz	r0, 8008cce <_vfiprintf_r+0x176>
 8008cbe:	9b04      	ldr	r3, [sp, #16]
 8008cc0:	eba0 000a 	sub.w	r0, r0, sl
 8008cc4:	2240      	movs	r2, #64	@ 0x40
 8008cc6:	4082      	lsls	r2, r0
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	3401      	adds	r4, #1
 8008ccc:	9304      	str	r3, [sp, #16]
 8008cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd2:	4829      	ldr	r0, [pc, #164]	@ (8008d78 <_vfiprintf_r+0x220>)
 8008cd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008cd8:	2206      	movs	r2, #6
 8008cda:	f7f7 fa91 	bl	8000200 <memchr>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d03f      	beq.n	8008d62 <_vfiprintf_r+0x20a>
 8008ce2:	4b26      	ldr	r3, [pc, #152]	@ (8008d7c <_vfiprintf_r+0x224>)
 8008ce4:	bb1b      	cbnz	r3, 8008d2e <_vfiprintf_r+0x1d6>
 8008ce6:	9b03      	ldr	r3, [sp, #12]
 8008ce8:	3307      	adds	r3, #7
 8008cea:	f023 0307 	bic.w	r3, r3, #7
 8008cee:	3308      	adds	r3, #8
 8008cf0:	9303      	str	r3, [sp, #12]
 8008cf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cf4:	443b      	add	r3, r7
 8008cf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cf8:	e76a      	b.n	8008bd0 <_vfiprintf_r+0x78>
 8008cfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cfe:	460c      	mov	r4, r1
 8008d00:	2001      	movs	r0, #1
 8008d02:	e7a8      	b.n	8008c56 <_vfiprintf_r+0xfe>
 8008d04:	2300      	movs	r3, #0
 8008d06:	3401      	adds	r4, #1
 8008d08:	9305      	str	r3, [sp, #20]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	f04f 0c0a 	mov.w	ip, #10
 8008d10:	4620      	mov	r0, r4
 8008d12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d16:	3a30      	subs	r2, #48	@ 0x30
 8008d18:	2a09      	cmp	r2, #9
 8008d1a:	d903      	bls.n	8008d24 <_vfiprintf_r+0x1cc>
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d0c6      	beq.n	8008cae <_vfiprintf_r+0x156>
 8008d20:	9105      	str	r1, [sp, #20]
 8008d22:	e7c4      	b.n	8008cae <_vfiprintf_r+0x156>
 8008d24:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d28:	4604      	mov	r4, r0
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e7f0      	b.n	8008d10 <_vfiprintf_r+0x1b8>
 8008d2e:	ab03      	add	r3, sp, #12
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	462a      	mov	r2, r5
 8008d34:	4b12      	ldr	r3, [pc, #72]	@ (8008d80 <_vfiprintf_r+0x228>)
 8008d36:	a904      	add	r1, sp, #16
 8008d38:	4630      	mov	r0, r6
 8008d3a:	f7fd fb87 	bl	800644c <_printf_float>
 8008d3e:	4607      	mov	r7, r0
 8008d40:	1c78      	adds	r0, r7, #1
 8008d42:	d1d6      	bne.n	8008cf2 <_vfiprintf_r+0x19a>
 8008d44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d46:	07d9      	lsls	r1, r3, #31
 8008d48:	d405      	bmi.n	8008d56 <_vfiprintf_r+0x1fe>
 8008d4a:	89ab      	ldrh	r3, [r5, #12]
 8008d4c:	059a      	lsls	r2, r3, #22
 8008d4e:	d402      	bmi.n	8008d56 <_vfiprintf_r+0x1fe>
 8008d50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d52:	f7fe fa75 	bl	8007240 <__retarget_lock_release_recursive>
 8008d56:	89ab      	ldrh	r3, [r5, #12]
 8008d58:	065b      	lsls	r3, r3, #25
 8008d5a:	f53f af1f 	bmi.w	8008b9c <_vfiprintf_r+0x44>
 8008d5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d60:	e71e      	b.n	8008ba0 <_vfiprintf_r+0x48>
 8008d62:	ab03      	add	r3, sp, #12
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	462a      	mov	r2, r5
 8008d68:	4b05      	ldr	r3, [pc, #20]	@ (8008d80 <_vfiprintf_r+0x228>)
 8008d6a:	a904      	add	r1, sp, #16
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f7fd fe05 	bl	800697c <_printf_i>
 8008d72:	e7e4      	b.n	8008d3e <_vfiprintf_r+0x1e6>
 8008d74:	08009899 	.word	0x08009899
 8008d78:	080098a3 	.word	0x080098a3
 8008d7c:	0800644d 	.word	0x0800644d
 8008d80:	08008b33 	.word	0x08008b33
 8008d84:	0800989f 	.word	0x0800989f

08008d88 <__sflush_r>:
 8008d88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d90:	0716      	lsls	r6, r2, #28
 8008d92:	4605      	mov	r5, r0
 8008d94:	460c      	mov	r4, r1
 8008d96:	d454      	bmi.n	8008e42 <__sflush_r+0xba>
 8008d98:	684b      	ldr	r3, [r1, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	dc02      	bgt.n	8008da4 <__sflush_r+0x1c>
 8008d9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	dd48      	ble.n	8008e36 <__sflush_r+0xae>
 8008da4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008da6:	2e00      	cmp	r6, #0
 8008da8:	d045      	beq.n	8008e36 <__sflush_r+0xae>
 8008daa:	2300      	movs	r3, #0
 8008dac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008db0:	682f      	ldr	r7, [r5, #0]
 8008db2:	6a21      	ldr	r1, [r4, #32]
 8008db4:	602b      	str	r3, [r5, #0]
 8008db6:	d030      	beq.n	8008e1a <__sflush_r+0x92>
 8008db8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008dba:	89a3      	ldrh	r3, [r4, #12]
 8008dbc:	0759      	lsls	r1, r3, #29
 8008dbe:	d505      	bpl.n	8008dcc <__sflush_r+0x44>
 8008dc0:	6863      	ldr	r3, [r4, #4]
 8008dc2:	1ad2      	subs	r2, r2, r3
 8008dc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008dc6:	b10b      	cbz	r3, 8008dcc <__sflush_r+0x44>
 8008dc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008dca:	1ad2      	subs	r2, r2, r3
 8008dcc:	2300      	movs	r3, #0
 8008dce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008dd0:	6a21      	ldr	r1, [r4, #32]
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	47b0      	blx	r6
 8008dd6:	1c43      	adds	r3, r0, #1
 8008dd8:	89a3      	ldrh	r3, [r4, #12]
 8008dda:	d106      	bne.n	8008dea <__sflush_r+0x62>
 8008ddc:	6829      	ldr	r1, [r5, #0]
 8008dde:	291d      	cmp	r1, #29
 8008de0:	d82b      	bhi.n	8008e3a <__sflush_r+0xb2>
 8008de2:	4a2a      	ldr	r2, [pc, #168]	@ (8008e8c <__sflush_r+0x104>)
 8008de4:	40ca      	lsrs	r2, r1
 8008de6:	07d6      	lsls	r6, r2, #31
 8008de8:	d527      	bpl.n	8008e3a <__sflush_r+0xb2>
 8008dea:	2200      	movs	r2, #0
 8008dec:	6062      	str	r2, [r4, #4]
 8008dee:	04d9      	lsls	r1, r3, #19
 8008df0:	6922      	ldr	r2, [r4, #16]
 8008df2:	6022      	str	r2, [r4, #0]
 8008df4:	d504      	bpl.n	8008e00 <__sflush_r+0x78>
 8008df6:	1c42      	adds	r2, r0, #1
 8008df8:	d101      	bne.n	8008dfe <__sflush_r+0x76>
 8008dfa:	682b      	ldr	r3, [r5, #0]
 8008dfc:	b903      	cbnz	r3, 8008e00 <__sflush_r+0x78>
 8008dfe:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e02:	602f      	str	r7, [r5, #0]
 8008e04:	b1b9      	cbz	r1, 8008e36 <__sflush_r+0xae>
 8008e06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e0a:	4299      	cmp	r1, r3
 8008e0c:	d002      	beq.n	8008e14 <__sflush_r+0x8c>
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f7ff f8a6 	bl	8007f60 <_free_r>
 8008e14:	2300      	movs	r3, #0
 8008e16:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e18:	e00d      	b.n	8008e36 <__sflush_r+0xae>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	47b0      	blx	r6
 8008e20:	4602      	mov	r2, r0
 8008e22:	1c50      	adds	r0, r2, #1
 8008e24:	d1c9      	bne.n	8008dba <__sflush_r+0x32>
 8008e26:	682b      	ldr	r3, [r5, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d0c6      	beq.n	8008dba <__sflush_r+0x32>
 8008e2c:	2b1d      	cmp	r3, #29
 8008e2e:	d001      	beq.n	8008e34 <__sflush_r+0xac>
 8008e30:	2b16      	cmp	r3, #22
 8008e32:	d11e      	bne.n	8008e72 <__sflush_r+0xea>
 8008e34:	602f      	str	r7, [r5, #0]
 8008e36:	2000      	movs	r0, #0
 8008e38:	e022      	b.n	8008e80 <__sflush_r+0xf8>
 8008e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e3e:	b21b      	sxth	r3, r3
 8008e40:	e01b      	b.n	8008e7a <__sflush_r+0xf2>
 8008e42:	690f      	ldr	r7, [r1, #16]
 8008e44:	2f00      	cmp	r7, #0
 8008e46:	d0f6      	beq.n	8008e36 <__sflush_r+0xae>
 8008e48:	0793      	lsls	r3, r2, #30
 8008e4a:	680e      	ldr	r6, [r1, #0]
 8008e4c:	bf08      	it	eq
 8008e4e:	694b      	ldreq	r3, [r1, #20]
 8008e50:	600f      	str	r7, [r1, #0]
 8008e52:	bf18      	it	ne
 8008e54:	2300      	movne	r3, #0
 8008e56:	eba6 0807 	sub.w	r8, r6, r7
 8008e5a:	608b      	str	r3, [r1, #8]
 8008e5c:	f1b8 0f00 	cmp.w	r8, #0
 8008e60:	dde9      	ble.n	8008e36 <__sflush_r+0xae>
 8008e62:	6a21      	ldr	r1, [r4, #32]
 8008e64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008e66:	4643      	mov	r3, r8
 8008e68:	463a      	mov	r2, r7
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	47b0      	blx	r6
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	dc08      	bgt.n	8008e84 <__sflush_r+0xfc>
 8008e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e7a:	81a3      	strh	r3, [r4, #12]
 8008e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e84:	4407      	add	r7, r0
 8008e86:	eba8 0800 	sub.w	r8, r8, r0
 8008e8a:	e7e7      	b.n	8008e5c <__sflush_r+0xd4>
 8008e8c:	20400001 	.word	0x20400001

08008e90 <_fflush_r>:
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	690b      	ldr	r3, [r1, #16]
 8008e94:	4605      	mov	r5, r0
 8008e96:	460c      	mov	r4, r1
 8008e98:	b913      	cbnz	r3, 8008ea0 <_fflush_r+0x10>
 8008e9a:	2500      	movs	r5, #0
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	b118      	cbz	r0, 8008eaa <_fflush_r+0x1a>
 8008ea2:	6a03      	ldr	r3, [r0, #32]
 8008ea4:	b90b      	cbnz	r3, 8008eaa <_fflush_r+0x1a>
 8008ea6:	f7fd ff13 	bl	8006cd0 <__sinit>
 8008eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d0f3      	beq.n	8008e9a <_fflush_r+0xa>
 8008eb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008eb4:	07d0      	lsls	r0, r2, #31
 8008eb6:	d404      	bmi.n	8008ec2 <_fflush_r+0x32>
 8008eb8:	0599      	lsls	r1, r3, #22
 8008eba:	d402      	bmi.n	8008ec2 <_fflush_r+0x32>
 8008ebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ebe:	f7fe f9be 	bl	800723e <__retarget_lock_acquire_recursive>
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	f7ff ff5f 	bl	8008d88 <__sflush_r>
 8008eca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ecc:	07da      	lsls	r2, r3, #31
 8008ece:	4605      	mov	r5, r0
 8008ed0:	d4e4      	bmi.n	8008e9c <_fflush_r+0xc>
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	059b      	lsls	r3, r3, #22
 8008ed6:	d4e1      	bmi.n	8008e9c <_fflush_r+0xc>
 8008ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008eda:	f7fe f9b1 	bl	8007240 <__retarget_lock_release_recursive>
 8008ede:	e7dd      	b.n	8008e9c <_fflush_r+0xc>

08008ee0 <fiprintf>:
 8008ee0:	b40e      	push	{r1, r2, r3}
 8008ee2:	b503      	push	{r0, r1, lr}
 8008ee4:	4601      	mov	r1, r0
 8008ee6:	ab03      	add	r3, sp, #12
 8008ee8:	4805      	ldr	r0, [pc, #20]	@ (8008f00 <fiprintf+0x20>)
 8008eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eee:	6800      	ldr	r0, [r0, #0]
 8008ef0:	9301      	str	r3, [sp, #4]
 8008ef2:	f7ff fe31 	bl	8008b58 <_vfiprintf_r>
 8008ef6:	b002      	add	sp, #8
 8008ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008efc:	b003      	add	sp, #12
 8008efe:	4770      	bx	lr
 8008f00:	2000001c 	.word	0x2000001c

08008f04 <__swhatbuf_r>:
 8008f04:	b570      	push	{r4, r5, r6, lr}
 8008f06:	460c      	mov	r4, r1
 8008f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f0c:	2900      	cmp	r1, #0
 8008f0e:	b096      	sub	sp, #88	@ 0x58
 8008f10:	4615      	mov	r5, r2
 8008f12:	461e      	mov	r6, r3
 8008f14:	da0d      	bge.n	8008f32 <__swhatbuf_r+0x2e>
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f1c:	f04f 0100 	mov.w	r1, #0
 8008f20:	bf14      	ite	ne
 8008f22:	2340      	movne	r3, #64	@ 0x40
 8008f24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f28:	2000      	movs	r0, #0
 8008f2a:	6031      	str	r1, [r6, #0]
 8008f2c:	602b      	str	r3, [r5, #0]
 8008f2e:	b016      	add	sp, #88	@ 0x58
 8008f30:	bd70      	pop	{r4, r5, r6, pc}
 8008f32:	466a      	mov	r2, sp
 8008f34:	f000 f896 	bl	8009064 <_fstat_r>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	dbec      	blt.n	8008f16 <__swhatbuf_r+0x12>
 8008f3c:	9901      	ldr	r1, [sp, #4]
 8008f3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f46:	4259      	negs	r1, r3
 8008f48:	4159      	adcs	r1, r3
 8008f4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f4e:	e7eb      	b.n	8008f28 <__swhatbuf_r+0x24>

08008f50 <__smakebuf_r>:
 8008f50:	898b      	ldrh	r3, [r1, #12]
 8008f52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f54:	079d      	lsls	r5, r3, #30
 8008f56:	4606      	mov	r6, r0
 8008f58:	460c      	mov	r4, r1
 8008f5a:	d507      	bpl.n	8008f6c <__smakebuf_r+0x1c>
 8008f5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	6123      	str	r3, [r4, #16]
 8008f64:	2301      	movs	r3, #1
 8008f66:	6163      	str	r3, [r4, #20]
 8008f68:	b003      	add	sp, #12
 8008f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f6c:	ab01      	add	r3, sp, #4
 8008f6e:	466a      	mov	r2, sp
 8008f70:	f7ff ffc8 	bl	8008f04 <__swhatbuf_r>
 8008f74:	9f00      	ldr	r7, [sp, #0]
 8008f76:	4605      	mov	r5, r0
 8008f78:	4639      	mov	r1, r7
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	f7ff f864 	bl	8008048 <_malloc_r>
 8008f80:	b948      	cbnz	r0, 8008f96 <__smakebuf_r+0x46>
 8008f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f86:	059a      	lsls	r2, r3, #22
 8008f88:	d4ee      	bmi.n	8008f68 <__smakebuf_r+0x18>
 8008f8a:	f023 0303 	bic.w	r3, r3, #3
 8008f8e:	f043 0302 	orr.w	r3, r3, #2
 8008f92:	81a3      	strh	r3, [r4, #12]
 8008f94:	e7e2      	b.n	8008f5c <__smakebuf_r+0xc>
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	6020      	str	r0, [r4, #0]
 8008f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f9e:	81a3      	strh	r3, [r4, #12]
 8008fa0:	9b01      	ldr	r3, [sp, #4]
 8008fa2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008fa6:	b15b      	cbz	r3, 8008fc0 <__smakebuf_r+0x70>
 8008fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fac:	4630      	mov	r0, r6
 8008fae:	f000 f86b 	bl	8009088 <_isatty_r>
 8008fb2:	b128      	cbz	r0, 8008fc0 <__smakebuf_r+0x70>
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	f023 0303 	bic.w	r3, r3, #3
 8008fba:	f043 0301 	orr.w	r3, r3, #1
 8008fbe:	81a3      	strh	r3, [r4, #12]
 8008fc0:	89a3      	ldrh	r3, [r4, #12]
 8008fc2:	431d      	orrs	r5, r3
 8008fc4:	81a5      	strh	r5, [r4, #12]
 8008fc6:	e7cf      	b.n	8008f68 <__smakebuf_r+0x18>

08008fc8 <_putc_r>:
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	460d      	mov	r5, r1
 8008fcc:	4614      	mov	r4, r2
 8008fce:	4606      	mov	r6, r0
 8008fd0:	b118      	cbz	r0, 8008fda <_putc_r+0x12>
 8008fd2:	6a03      	ldr	r3, [r0, #32]
 8008fd4:	b90b      	cbnz	r3, 8008fda <_putc_r+0x12>
 8008fd6:	f7fd fe7b 	bl	8006cd0 <__sinit>
 8008fda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fdc:	07d8      	lsls	r0, r3, #31
 8008fde:	d405      	bmi.n	8008fec <_putc_r+0x24>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	0599      	lsls	r1, r3, #22
 8008fe4:	d402      	bmi.n	8008fec <_putc_r+0x24>
 8008fe6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fe8:	f7fe f929 	bl	800723e <__retarget_lock_acquire_recursive>
 8008fec:	68a3      	ldr	r3, [r4, #8]
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	60a3      	str	r3, [r4, #8]
 8008ff4:	da05      	bge.n	8009002 <_putc_r+0x3a>
 8008ff6:	69a2      	ldr	r2, [r4, #24]
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	db12      	blt.n	8009022 <_putc_r+0x5a>
 8008ffc:	b2eb      	uxtb	r3, r5
 8008ffe:	2b0a      	cmp	r3, #10
 8009000:	d00f      	beq.n	8009022 <_putc_r+0x5a>
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	6022      	str	r2, [r4, #0]
 8009008:	701d      	strb	r5, [r3, #0]
 800900a:	b2ed      	uxtb	r5, r5
 800900c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800900e:	07da      	lsls	r2, r3, #31
 8009010:	d405      	bmi.n	800901e <_putc_r+0x56>
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	059b      	lsls	r3, r3, #22
 8009016:	d402      	bmi.n	800901e <_putc_r+0x56>
 8009018:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800901a:	f7fe f911 	bl	8007240 <__retarget_lock_release_recursive>
 800901e:	4628      	mov	r0, r5
 8009020:	bd70      	pop	{r4, r5, r6, pc}
 8009022:	4629      	mov	r1, r5
 8009024:	4622      	mov	r2, r4
 8009026:	4630      	mov	r0, r6
 8009028:	f7fd ff65 	bl	8006ef6 <__swbuf_r>
 800902c:	4605      	mov	r5, r0
 800902e:	e7ed      	b.n	800900c <_putc_r+0x44>

08009030 <memmove>:
 8009030:	4288      	cmp	r0, r1
 8009032:	b510      	push	{r4, lr}
 8009034:	eb01 0402 	add.w	r4, r1, r2
 8009038:	d902      	bls.n	8009040 <memmove+0x10>
 800903a:	4284      	cmp	r4, r0
 800903c:	4623      	mov	r3, r4
 800903e:	d807      	bhi.n	8009050 <memmove+0x20>
 8009040:	1e43      	subs	r3, r0, #1
 8009042:	42a1      	cmp	r1, r4
 8009044:	d008      	beq.n	8009058 <memmove+0x28>
 8009046:	f811 2b01 	ldrb.w	r2, [r1], #1
 800904a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800904e:	e7f8      	b.n	8009042 <memmove+0x12>
 8009050:	4402      	add	r2, r0
 8009052:	4601      	mov	r1, r0
 8009054:	428a      	cmp	r2, r1
 8009056:	d100      	bne.n	800905a <memmove+0x2a>
 8009058:	bd10      	pop	{r4, pc}
 800905a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800905e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009062:	e7f7      	b.n	8009054 <memmove+0x24>

08009064 <_fstat_r>:
 8009064:	b538      	push	{r3, r4, r5, lr}
 8009066:	4d07      	ldr	r5, [pc, #28]	@ (8009084 <_fstat_r+0x20>)
 8009068:	2300      	movs	r3, #0
 800906a:	4604      	mov	r4, r0
 800906c:	4608      	mov	r0, r1
 800906e:	4611      	mov	r1, r2
 8009070:	602b      	str	r3, [r5, #0]
 8009072:	f7f9 fcff 	bl	8002a74 <_fstat>
 8009076:	1c43      	adds	r3, r0, #1
 8009078:	d102      	bne.n	8009080 <_fstat_r+0x1c>
 800907a:	682b      	ldr	r3, [r5, #0]
 800907c:	b103      	cbz	r3, 8009080 <_fstat_r+0x1c>
 800907e:	6023      	str	r3, [r4, #0]
 8009080:	bd38      	pop	{r3, r4, r5, pc}
 8009082:	bf00      	nop
 8009084:	20000dec 	.word	0x20000dec

08009088 <_isatty_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4d06      	ldr	r5, [pc, #24]	@ (80090a4 <_isatty_r+0x1c>)
 800908c:	2300      	movs	r3, #0
 800908e:	4604      	mov	r4, r0
 8009090:	4608      	mov	r0, r1
 8009092:	602b      	str	r3, [r5, #0]
 8009094:	f7f9 fcfe 	bl	8002a94 <_isatty>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_isatty_r+0x1a>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_isatty_r+0x1a>
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	20000dec 	.word	0x20000dec

080090a8 <_sbrk_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	4d06      	ldr	r5, [pc, #24]	@ (80090c4 <_sbrk_r+0x1c>)
 80090ac:	2300      	movs	r3, #0
 80090ae:	4604      	mov	r4, r0
 80090b0:	4608      	mov	r0, r1
 80090b2:	602b      	str	r3, [r5, #0]
 80090b4:	f7f9 fd06 	bl	8002ac4 <_sbrk>
 80090b8:	1c43      	adds	r3, r0, #1
 80090ba:	d102      	bne.n	80090c2 <_sbrk_r+0x1a>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	b103      	cbz	r3, 80090c2 <_sbrk_r+0x1a>
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	bd38      	pop	{r3, r4, r5, pc}
 80090c4:	20000dec 	.word	0x20000dec

080090c8 <abort>:
 80090c8:	b508      	push	{r3, lr}
 80090ca:	2006      	movs	r0, #6
 80090cc:	f000 f88c 	bl	80091e8 <raise>
 80090d0:	2001      	movs	r0, #1
 80090d2:	f7f9 fc7f 	bl	80029d4 <_exit>

080090d6 <_calloc_r>:
 80090d6:	b570      	push	{r4, r5, r6, lr}
 80090d8:	fba1 5402 	umull	r5, r4, r1, r2
 80090dc:	b934      	cbnz	r4, 80090ec <_calloc_r+0x16>
 80090de:	4629      	mov	r1, r5
 80090e0:	f7fe ffb2 	bl	8008048 <_malloc_r>
 80090e4:	4606      	mov	r6, r0
 80090e6:	b928      	cbnz	r0, 80090f4 <_calloc_r+0x1e>
 80090e8:	4630      	mov	r0, r6
 80090ea:	bd70      	pop	{r4, r5, r6, pc}
 80090ec:	220c      	movs	r2, #12
 80090ee:	6002      	str	r2, [r0, #0]
 80090f0:	2600      	movs	r6, #0
 80090f2:	e7f9      	b.n	80090e8 <_calloc_r+0x12>
 80090f4:	462a      	mov	r2, r5
 80090f6:	4621      	mov	r1, r4
 80090f8:	f7fd ff92 	bl	8007020 <memset>
 80090fc:	e7f4      	b.n	80090e8 <_calloc_r+0x12>

080090fe <__ascii_mbtowc>:
 80090fe:	b082      	sub	sp, #8
 8009100:	b901      	cbnz	r1, 8009104 <__ascii_mbtowc+0x6>
 8009102:	a901      	add	r1, sp, #4
 8009104:	b142      	cbz	r2, 8009118 <__ascii_mbtowc+0x1a>
 8009106:	b14b      	cbz	r3, 800911c <__ascii_mbtowc+0x1e>
 8009108:	7813      	ldrb	r3, [r2, #0]
 800910a:	600b      	str	r3, [r1, #0]
 800910c:	7812      	ldrb	r2, [r2, #0]
 800910e:	1e10      	subs	r0, r2, #0
 8009110:	bf18      	it	ne
 8009112:	2001      	movne	r0, #1
 8009114:	b002      	add	sp, #8
 8009116:	4770      	bx	lr
 8009118:	4610      	mov	r0, r2
 800911a:	e7fb      	b.n	8009114 <__ascii_mbtowc+0x16>
 800911c:	f06f 0001 	mvn.w	r0, #1
 8009120:	e7f8      	b.n	8009114 <__ascii_mbtowc+0x16>

08009122 <_realloc_r>:
 8009122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009126:	4607      	mov	r7, r0
 8009128:	4614      	mov	r4, r2
 800912a:	460d      	mov	r5, r1
 800912c:	b921      	cbnz	r1, 8009138 <_realloc_r+0x16>
 800912e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009132:	4611      	mov	r1, r2
 8009134:	f7fe bf88 	b.w	8008048 <_malloc_r>
 8009138:	b92a      	cbnz	r2, 8009146 <_realloc_r+0x24>
 800913a:	f7fe ff11 	bl	8007f60 <_free_r>
 800913e:	4625      	mov	r5, r4
 8009140:	4628      	mov	r0, r5
 8009142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009146:	f000 f86b 	bl	8009220 <_malloc_usable_size_r>
 800914a:	4284      	cmp	r4, r0
 800914c:	4606      	mov	r6, r0
 800914e:	d802      	bhi.n	8009156 <_realloc_r+0x34>
 8009150:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009154:	d8f4      	bhi.n	8009140 <_realloc_r+0x1e>
 8009156:	4621      	mov	r1, r4
 8009158:	4638      	mov	r0, r7
 800915a:	f7fe ff75 	bl	8008048 <_malloc_r>
 800915e:	4680      	mov	r8, r0
 8009160:	b908      	cbnz	r0, 8009166 <_realloc_r+0x44>
 8009162:	4645      	mov	r5, r8
 8009164:	e7ec      	b.n	8009140 <_realloc_r+0x1e>
 8009166:	42b4      	cmp	r4, r6
 8009168:	4622      	mov	r2, r4
 800916a:	4629      	mov	r1, r5
 800916c:	bf28      	it	cs
 800916e:	4632      	movcs	r2, r6
 8009170:	f7fe f86f 	bl	8007252 <memcpy>
 8009174:	4629      	mov	r1, r5
 8009176:	4638      	mov	r0, r7
 8009178:	f7fe fef2 	bl	8007f60 <_free_r>
 800917c:	e7f1      	b.n	8009162 <_realloc_r+0x40>

0800917e <__ascii_wctomb>:
 800917e:	4603      	mov	r3, r0
 8009180:	4608      	mov	r0, r1
 8009182:	b141      	cbz	r1, 8009196 <__ascii_wctomb+0x18>
 8009184:	2aff      	cmp	r2, #255	@ 0xff
 8009186:	d904      	bls.n	8009192 <__ascii_wctomb+0x14>
 8009188:	228a      	movs	r2, #138	@ 0x8a
 800918a:	601a      	str	r2, [r3, #0]
 800918c:	f04f 30ff 	mov.w	r0, #4294967295
 8009190:	4770      	bx	lr
 8009192:	700a      	strb	r2, [r1, #0]
 8009194:	2001      	movs	r0, #1
 8009196:	4770      	bx	lr

08009198 <_raise_r>:
 8009198:	291f      	cmp	r1, #31
 800919a:	b538      	push	{r3, r4, r5, lr}
 800919c:	4605      	mov	r5, r0
 800919e:	460c      	mov	r4, r1
 80091a0:	d904      	bls.n	80091ac <_raise_r+0x14>
 80091a2:	2316      	movs	r3, #22
 80091a4:	6003      	str	r3, [r0, #0]
 80091a6:	f04f 30ff 	mov.w	r0, #4294967295
 80091aa:	bd38      	pop	{r3, r4, r5, pc}
 80091ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80091ae:	b112      	cbz	r2, 80091b6 <_raise_r+0x1e>
 80091b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091b4:	b94b      	cbnz	r3, 80091ca <_raise_r+0x32>
 80091b6:	4628      	mov	r0, r5
 80091b8:	f000 f830 	bl	800921c <_getpid_r>
 80091bc:	4622      	mov	r2, r4
 80091be:	4601      	mov	r1, r0
 80091c0:	4628      	mov	r0, r5
 80091c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091c6:	f000 b817 	b.w	80091f8 <_kill_r>
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d00a      	beq.n	80091e4 <_raise_r+0x4c>
 80091ce:	1c59      	adds	r1, r3, #1
 80091d0:	d103      	bne.n	80091da <_raise_r+0x42>
 80091d2:	2316      	movs	r3, #22
 80091d4:	6003      	str	r3, [r0, #0]
 80091d6:	2001      	movs	r0, #1
 80091d8:	e7e7      	b.n	80091aa <_raise_r+0x12>
 80091da:	2100      	movs	r1, #0
 80091dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80091e0:	4620      	mov	r0, r4
 80091e2:	4798      	blx	r3
 80091e4:	2000      	movs	r0, #0
 80091e6:	e7e0      	b.n	80091aa <_raise_r+0x12>

080091e8 <raise>:
 80091e8:	4b02      	ldr	r3, [pc, #8]	@ (80091f4 <raise+0xc>)
 80091ea:	4601      	mov	r1, r0
 80091ec:	6818      	ldr	r0, [r3, #0]
 80091ee:	f7ff bfd3 	b.w	8009198 <_raise_r>
 80091f2:	bf00      	nop
 80091f4:	2000001c 	.word	0x2000001c

080091f8 <_kill_r>:
 80091f8:	b538      	push	{r3, r4, r5, lr}
 80091fa:	4d07      	ldr	r5, [pc, #28]	@ (8009218 <_kill_r+0x20>)
 80091fc:	2300      	movs	r3, #0
 80091fe:	4604      	mov	r4, r0
 8009200:	4608      	mov	r0, r1
 8009202:	4611      	mov	r1, r2
 8009204:	602b      	str	r3, [r5, #0]
 8009206:	f7f9 fbd5 	bl	80029b4 <_kill>
 800920a:	1c43      	adds	r3, r0, #1
 800920c:	d102      	bne.n	8009214 <_kill_r+0x1c>
 800920e:	682b      	ldr	r3, [r5, #0]
 8009210:	b103      	cbz	r3, 8009214 <_kill_r+0x1c>
 8009212:	6023      	str	r3, [r4, #0]
 8009214:	bd38      	pop	{r3, r4, r5, pc}
 8009216:	bf00      	nop
 8009218:	20000dec 	.word	0x20000dec

0800921c <_getpid_r>:
 800921c:	f7f9 bbc2 	b.w	80029a4 <_getpid>

08009220 <_malloc_usable_size_r>:
 8009220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009224:	1f18      	subs	r0, r3, #4
 8009226:	2b00      	cmp	r3, #0
 8009228:	bfbc      	itt	lt
 800922a:	580b      	ldrlt	r3, [r1, r0]
 800922c:	18c0      	addlt	r0, r0, r3
 800922e:	4770      	bx	lr

08009230 <_init>:
 8009230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009232:	bf00      	nop
 8009234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009236:	bc08      	pop	{r3}
 8009238:	469e      	mov	lr, r3
 800923a:	4770      	bx	lr

0800923c <_fini>:
 800923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923e:	bf00      	nop
 8009240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009242:	bc08      	pop	{r3}
 8009244:	469e      	mov	lr, r3
 8009246:	4770      	bx	lr
