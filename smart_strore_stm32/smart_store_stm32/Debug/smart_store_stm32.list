
smart_store_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009438  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  080095d8  080095d8  0000a5d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d00  08009d00  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009d00  08009d00  0000ad00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d08  08009d08  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d08  08009d08  0000ad08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d0c  08009d0c  0000ad0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009d10  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c30  200001d8  08009ee8  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e08  08009ee8  0000be08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011299  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002939  00000000  00000000  0001c4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  0001ede0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c84  00000000  00000000  0001fdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019319  00000000  00000000  00020a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127fc  00000000  00000000  00039d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d21b  00000000  00000000  0004c589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e97a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005738  00000000  00000000  000e97e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000eef20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080095c0 	.word	0x080095c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080095c0 	.word	0x080095c0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b988 	b.w	8000f00 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	468e      	mov	lr, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	4688      	mov	r8, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d962      	bls.n	8000ce4 <__udivmoddi4+0xdc>
 8000c1e:	fab2 f682 	clz	r6, r2
 8000c22:	b14e      	cbz	r6, 8000c38 <__udivmoddi4+0x30>
 8000c24:	f1c6 0320 	rsb	r3, r6, #32
 8000c28:	fa01 f806 	lsl.w	r8, r1, r6
 8000c2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c30:	40b7      	lsls	r7, r6
 8000c32:	ea43 0808 	orr.w	r8, r3, r8
 8000c36:	40b4      	lsls	r4, r6
 8000c38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c44:	0c23      	lsrs	r3, r4, #16
 8000c46:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c5c:	f080 80ea 	bcs.w	8000e34 <__udivmoddi4+0x22c>
 8000c60:	429a      	cmp	r2, r3
 8000c62:	f240 80e7 	bls.w	8000e34 <__udivmoddi4+0x22c>
 8000c66:	3902      	subs	r1, #2
 8000c68:	443b      	add	r3, r7
 8000c6a:	1a9a      	subs	r2, r3, r2
 8000c6c:	b2a3      	uxth	r3, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c7a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c7e:	459c      	cmp	ip, r3
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0x8e>
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c88:	f080 80d6 	bcs.w	8000e38 <__udivmoddi4+0x230>
 8000c8c:	459c      	cmp	ip, r3
 8000c8e:	f240 80d3 	bls.w	8000e38 <__udivmoddi4+0x230>
 8000c92:	443b      	add	r3, r7
 8000c94:	3802      	subs	r0, #2
 8000c96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9a:	eba3 030c 	sub.w	r3, r3, ip
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11d      	cbz	r5, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40f3      	lsrs	r3, r6
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	e9c5 3200 	strd	r3, r2, [r5]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d905      	bls.n	8000cbe <__udivmoddi4+0xb6>
 8000cb2:	b10d      	cbz	r5, 8000cb8 <__udivmoddi4+0xb0>
 8000cb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e7f5      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cbe:	fab3 f183 	clz	r1, r3
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	d146      	bne.n	8000d54 <__udivmoddi4+0x14c>
 8000cc6:	4573      	cmp	r3, lr
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xc8>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 8105 	bhi.w	8000eda <__udivmoddi4+0x2d2>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	4690      	mov	r8, r2
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d0e5      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000cde:	e9c5 4800 	strd	r4, r8, [r5]
 8000ce2:	e7e2      	b.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f000 8090 	beq.w	8000e0a <__udivmoddi4+0x202>
 8000cea:	fab2 f682 	clz	r6, r2
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	f040 80a4 	bne.w	8000e3c <__udivmoddi4+0x234>
 8000cf4:	1a8a      	subs	r2, r1, r2
 8000cf6:	0c03      	lsrs	r3, r0, #16
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	b280      	uxth	r0, r0
 8000cfe:	b2bc      	uxth	r4, r7
 8000d00:	2101      	movs	r1, #1
 8000d02:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d06:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x11e>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x11c>
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	f200 80e0 	bhi.w	8000ee4 <__udivmoddi4+0x2dc>
 8000d24:	46c4      	mov	ip, r8
 8000d26:	1a9b      	subs	r3, r3, r2
 8000d28:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d2c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d30:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d34:	fb02 f404 	mul.w	r4, r2, r4
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x144>
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x142>
 8000d44:	429c      	cmp	r4, r3
 8000d46:	f200 80ca 	bhi.w	8000ede <__udivmoddi4+0x2d6>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	1b1b      	subs	r3, r3, r4
 8000d4e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d52:	e7a5      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	fa0e f401 	lsl.w	r4, lr, r1
 8000d64:	fa20 f306 	lsr.w	r3, r0, r6
 8000d68:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d6c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d70:	4323      	orrs	r3, r4
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	fa1f fc87 	uxth.w	ip, r7
 8000d7a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d7e:	0c1c      	lsrs	r4, r3, #16
 8000d80:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d84:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d88:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x1a0>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d9a:	f080 809c 	bcs.w	8000ed6 <__udivmoddi4+0x2ce>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f240 8099 	bls.w	8000ed6 <__udivmoddi4+0x2ce>
 8000da4:	3802      	subs	r0, #2
 8000da6:	443c      	add	r4, r7
 8000da8:	eba4 040e 	sub.w	r4, r4, lr
 8000dac:	fa1f fe83 	uxth.w	lr, r3
 8000db0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db4:	fb09 4413 	mls	r4, r9, r3, r4
 8000db8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dbc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc0:	45a4      	cmp	ip, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x1ce>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dca:	f080 8082 	bcs.w	8000ed2 <__udivmoddi4+0x2ca>
 8000dce:	45a4      	cmp	ip, r4
 8000dd0:	d97f      	bls.n	8000ed2 <__udivmoddi4+0x2ca>
 8000dd2:	3b02      	subs	r3, #2
 8000dd4:	443c      	add	r4, r7
 8000dd6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	fba0 ec02 	umull	lr, ip, r0, r2
 8000de2:	4564      	cmp	r4, ip
 8000de4:	4673      	mov	r3, lr
 8000de6:	46e1      	mov	r9, ip
 8000de8:	d362      	bcc.n	8000eb0 <__udivmoddi4+0x2a8>
 8000dea:	d05f      	beq.n	8000eac <__udivmoddi4+0x2a4>
 8000dec:	b15d      	cbz	r5, 8000e06 <__udivmoddi4+0x1fe>
 8000dee:	ebb8 0203 	subs.w	r2, r8, r3
 8000df2:	eb64 0409 	sbc.w	r4, r4, r9
 8000df6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfa:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfe:	431e      	orrs	r6, r3
 8000e00:	40cc      	lsrs	r4, r1
 8000e02:	e9c5 6400 	strd	r6, r4, [r5]
 8000e06:	2100      	movs	r1, #0
 8000e08:	e74f      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e0a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e0e:	0c01      	lsrs	r1, r0, #16
 8000e10:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e14:	b280      	uxth	r0, r0
 8000e16:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4638      	mov	r0, r7
 8000e1e:	463c      	mov	r4, r7
 8000e20:	46b8      	mov	r8, r7
 8000e22:	46be      	mov	lr, r7
 8000e24:	2620      	movs	r6, #32
 8000e26:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e2a:	eba2 0208 	sub.w	r2, r2, r8
 8000e2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e32:	e766      	b.n	8000d02 <__udivmoddi4+0xfa>
 8000e34:	4601      	mov	r1, r0
 8000e36:	e718      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e38:	4610      	mov	r0, r2
 8000e3a:	e72c      	b.n	8000c96 <__udivmoddi4+0x8e>
 8000e3c:	f1c6 0220 	rsb	r2, r6, #32
 8000e40:	fa2e f302 	lsr.w	r3, lr, r2
 8000e44:	40b7      	lsls	r7, r6
 8000e46:	40b1      	lsls	r1, r6
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e50:	430a      	orrs	r2, r1
 8000e52:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e56:	b2bc      	uxth	r4, r7
 8000e58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb08 f904 	mul.w	r9, r8, r4
 8000e66:	40b0      	lsls	r0, r6
 8000e68:	4589      	cmp	r9, r1
 8000e6a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e6e:	b280      	uxth	r0, r0
 8000e70:	d93e      	bls.n	8000ef0 <__udivmoddi4+0x2e8>
 8000e72:	1879      	adds	r1, r7, r1
 8000e74:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e78:	d201      	bcs.n	8000e7e <__udivmoddi4+0x276>
 8000e7a:	4589      	cmp	r9, r1
 8000e7c:	d81f      	bhi.n	8000ebe <__udivmoddi4+0x2b6>
 8000e7e:	eba1 0109 	sub.w	r1, r1, r9
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	4542      	cmp	r2, r8
 8000e96:	d229      	bcs.n	8000eec <__udivmoddi4+0x2e4>
 8000e98:	18ba      	adds	r2, r7, r2
 8000e9a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e9e:	d2c4      	bcs.n	8000e2a <__udivmoddi4+0x222>
 8000ea0:	4542      	cmp	r2, r8
 8000ea2:	d2c2      	bcs.n	8000e2a <__udivmoddi4+0x222>
 8000ea4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ea8:	443a      	add	r2, r7
 8000eaa:	e7be      	b.n	8000e2a <__udivmoddi4+0x222>
 8000eac:	45f0      	cmp	r8, lr
 8000eae:	d29d      	bcs.n	8000dec <__udivmoddi4+0x1e4>
 8000eb0:	ebbe 0302 	subs.w	r3, lr, r2
 8000eb4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000eb8:	3801      	subs	r0, #1
 8000eba:	46e1      	mov	r9, ip
 8000ebc:	e796      	b.n	8000dec <__udivmoddi4+0x1e4>
 8000ebe:	eba7 0909 	sub.w	r9, r7, r9
 8000ec2:	4449      	add	r1, r9
 8000ec4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ec8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ecc:	fb09 f804 	mul.w	r8, r9, r4
 8000ed0:	e7db      	b.n	8000e8a <__udivmoddi4+0x282>
 8000ed2:	4673      	mov	r3, lr
 8000ed4:	e77f      	b.n	8000dd6 <__udivmoddi4+0x1ce>
 8000ed6:	4650      	mov	r0, sl
 8000ed8:	e766      	b.n	8000da8 <__udivmoddi4+0x1a0>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e6fd      	b.n	8000cda <__udivmoddi4+0xd2>
 8000ede:	443b      	add	r3, r7
 8000ee0:	3a02      	subs	r2, #2
 8000ee2:	e733      	b.n	8000d4c <__udivmoddi4+0x144>
 8000ee4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee8:	443b      	add	r3, r7
 8000eea:	e71c      	b.n	8000d26 <__udivmoddi4+0x11e>
 8000eec:	4649      	mov	r1, r9
 8000eee:	e79c      	b.n	8000e2a <__udivmoddi4+0x222>
 8000ef0:	eba1 0109 	sub.w	r1, r1, r9
 8000ef4:	46c4      	mov	ip, r8
 8000ef6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efa:	fb09 f804 	mul.w	r8, r9, r4
 8000efe:	e7c4      	b.n	8000e8a <__udivmoddi4+0x282>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <DWT_Delay_Init>:
 *      Author: IoT Main
 */

#include "DHT.h"
uint32_t DWT_Delay_Init(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f08:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <DWT_Delay_Init+0x58>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	4a13      	ldr	r2, [pc, #76]	@ (8000f5c <DWT_Delay_Init+0x58>)
 8000f0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000f12:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f14:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <DWT_Delay_Init+0x58>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	4a10      	ldr	r2, [pc, #64]	@ (8000f5c <DWT_Delay_Init+0x58>)
 8000f1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f1e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <DWT_Delay_Init+0x5c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0e      	ldr	r2, [pc, #56]	@ (8000f60 <DWT_Delay_Init+0x5c>)
 8000f26:	f023 0301 	bic.w	r3, r3, #1
 8000f2a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <DWT_Delay_Init+0x5c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0b      	ldr	r2, [pc, #44]	@ (8000f60 <DWT_Delay_Init+0x5c>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000f38:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <DWT_Delay_Init+0x5c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000f3e:	bf00      	nop
  __ASM volatile ("NOP");
 8000f40:	bf00      	nop
  __ASM volatile ("NOP");
 8000f42:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <DWT_Delay_Init+0x5c>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e000      	b.n	8000f52 <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 8000f50:	2301      	movs	r3, #1
  }

}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000edf0 	.word	0xe000edf0
 8000f60:	e0001000 	.word	0xe0001000

08000f64 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <DWT_Delay_us+0x40>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f72:	f003 fa69 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa8 <DWT_Delay_us+0x44>)
 8000f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7e:	0c9b      	lsrs	r3, r3, #18
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	fb02 f303 	mul.w	r3, r2, r3
 8000f86:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000f88:	bf00      	nop
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <DWT_Delay_us+0x40>)
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	1ad2      	subs	r2, r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3f8      	bcc.n	8000f8a <DWT_Delay_us+0x26>
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	e0001000 	.word	0xe0001000
 8000fa8:	431bde83 	.word	0x431bde83

08000fac <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f002 fbf6 	bl	80037cc <HAL_GPIO_Init>
}
 8000fe0:	bf00      	nop
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	4619      	mov	r1, r3
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f002 fbda 	bl	80037cc <HAL_GPIO_Init>
}
 8001018:	bf00      	nop
 800101a:	3720      	adds	r7, #32
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <DHT11_Init>:

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001024:	f7ff ff6e 	bl	8000f04 <DWT_Delay_Init>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001028:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800102c:	4807      	ldr	r0, [pc, #28]	@ (800104c <DHT11_Init+0x2c>)
 800102e:	f7ff ffbd 	bl	8000fac <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001038:	4804      	ldr	r0, [pc, #16]	@ (800104c <DHT11_Init+0x2c>)
 800103a:	f002 fd63 	bl	8003b04 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800103e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001042:	f001 fe4f 	bl	8002ce4 <HAL_Delay>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40020800 	.word	0x40020800

08001050 <DHT11_Start>:

void DHT11_Start (void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001054:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001058:	4811      	ldr	r0, [pc, #68]	@ (80010a0 <DHT11_Start+0x50>)
 800105a:	f7ff ffa7 	bl	8000fac <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001064:	480e      	ldr	r0, [pc, #56]	@ (80010a0 <DHT11_Start+0x50>)
 8001066:	f002 fd4d 	bl	8003b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001070:	480b      	ldr	r0, [pc, #44]	@ (80010a0 <DHT11_Start+0x50>)
 8001072:	f002 fd47 	bl	8003b04 <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);
 8001076:	f244 6050 	movw	r0, #18000	@ 0x4650
 800107a:	f7ff ff73 	bl	8000f64 <DWT_Delay_us>
	//delay_us (18000);   // wait for 18ms
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800107e:	2201      	movs	r2, #1
 8001080:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001084:	4806      	ldr	r0, [pc, #24]	@ (80010a0 <DHT11_Start+0x50>)
 8001086:	f002 fd3d 	bl	8003b04 <HAL_GPIO_WritePin>
	DWT_Delay_us(20);
 800108a:	2014      	movs	r0, #20
 800108c:	f7ff ff6a 	bl	8000f64 <DWT_Delay_us>
	//delay_us (20);   // wait for 20us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8001090:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <DHT11_Start+0x50>)
 8001096:	f7ff ffa7 	bl	8000fe8 <Set_Pin_Input>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40020800 	.word	0x40020800

080010a4 <DHT11_Stop>:

void DHT11_Stop (void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80010a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010ac:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <DHT11_Stop+0x20>)
 80010ae:	f7ff ff7d 	bl	8000fac <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010b8:	4802      	ldr	r0, [pc, #8]	@ (80010c4 <DHT11_Stop+0x20>)
 80010ba:	f002 fd23 	bl	8003b04 <HAL_GPIO_WritePin>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020800 	.word	0x40020800

080010c8 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	71fb      	strb	r3, [r7, #7]

	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80010d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010d6:	4812      	ldr	r0, [pc, #72]	@ (8001120 <DHT11_Check_Response+0x58>)
 80010d8:	f002 fcfc 	bl	8003ad4 <HAL_GPIO_ReadPin>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10f      	bne.n	8001102 <DHT11_Check_Response+0x3a>
	{
		DWT_Delay_us(80);
 80010e2:	2050      	movs	r0, #80	@ 0x50
 80010e4:	f7ff ff3e 	bl	8000f64 <DWT_Delay_us>
		//delay_us (80);
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80010e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010ec:	480c      	ldr	r0, [pc, #48]	@ (8001120 <DHT11_Check_Response+0x58>)
 80010ee:	f002 fcf1 	bl	8003ad4 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <DHT11_Check_Response+0x36>
 80010f8:	2301      	movs	r3, #1
 80010fa:	71fb      	strb	r3, [r7, #7]
 80010fc:	e001      	b.n	8001102 <DHT11_Check_Response+0x3a>
		else Response = -1; // 255
 80010fe:	23ff      	movs	r3, #255	@ 0xff
 8001100:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8001102:	bf00      	nop
 8001104:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001108:	4805      	ldr	r0, [pc, #20]	@ (8001120 <DHT11_Check_Response+0x58>)
 800110a:	f002 fce3 	bl	8003ad4 <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f7      	bne.n	8001104 <DHT11_Check_Response+0x3c>

	return Response;
 8001114:	79fb      	ldrb	r3, [r7, #7]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40020800 	.word	0x40020800

08001124 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800112a:	2300      	movs	r3, #0
 800112c:	71bb      	strb	r3, [r7, #6]
 800112e:	e03a      	b.n	80011a6 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8001130:	bf00      	nop
 8001132:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001136:	4820      	ldr	r0, [pc, #128]	@ (80011b8 <DHT11_Read+0x94>)
 8001138:	f002 fccc 	bl	8003ad4 <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0f7      	beq.n	8001132 <DHT11_Read+0xe>
		DWT_Delay_us(40);
 8001142:	2028      	movs	r0, #40	@ 0x28
 8001144:	f7ff ff0e 	bl	8000f64 <DWT_Delay_us>
		//delay_us (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001148:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800114c:	481a      	ldr	r0, [pc, #104]	@ (80011b8 <DHT11_Read+0x94>)
 800114e:	f002 fcc1 	bl	8003ad4 <HAL_GPIO_ReadPin>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10e      	bne.n	8001176 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8001158:	79bb      	ldrb	r3, [r7, #6]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2201      	movs	r2, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	b25b      	sxtb	r3, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	b25a      	sxtb	r2, r3
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	4013      	ands	r3, r2
 8001170:	b25b      	sxtb	r3, r3
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	e00b      	b.n	800118e <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	f1c3 0307 	rsb	r3, r3, #7
 800117c:	2201      	movs	r2, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	b25a      	sxtb	r2, r3
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	4313      	orrs	r3, r2
 800118a:	b25b      	sxtb	r3, r3
 800118c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 800118e:	bf00      	nop
 8001190:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001194:	4808      	ldr	r0, [pc, #32]	@ (80011b8 <DHT11_Read+0x94>)
 8001196:	f002 fc9d 	bl	8003ad4 <HAL_GPIO_ReadPin>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1f7      	bne.n	8001190 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 80011a0:	79bb      	ldrb	r3, [r7, #6]
 80011a2:	3301      	adds	r3, #1
 80011a4:	71bb      	strb	r3, [r7, #6]
 80011a6:	79bb      	ldrb	r3, [r7, #6]
 80011a8:	2b07      	cmp	r3, #7
 80011aa:	d9c1      	bls.n	8001130 <DHT11_Read+0xc>
	}
	return i;
 80011ac:	79fb      	ldrb	r3, [r7, #7]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40020800 	.word	0x40020800

080011bc <DHT11_readData>:

DHT11_TypeDef DHT11_readData()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	DHT11_TypeDef dht11;
	DHT11_Start();
 80011c4:	f7ff ff44 	bl	8001050 <DHT11_Start>
	if ((dht11.status = DHT11_Check_Response()) < 0) return dht11;
 80011c8:	f7ff ff7e 	bl	80010c8 <DHT11_Check_Response>
 80011cc:	4603      	mov	r3, r0
 80011ce:	737b      	strb	r3, [r7, #13]
	dht11.rh_byte1 = DHT11_Read ();
 80011d0:	f7ff ffa8 	bl	8001124 <DHT11_Read>
 80011d4:	4603      	mov	r3, r0
 80011d6:	723b      	strb	r3, [r7, #8]
	dht11.rh_byte2 = DHT11_Read ();
 80011d8:	f7ff ffa4 	bl	8001124 <DHT11_Read>
 80011dc:	4603      	mov	r3, r0
 80011de:	727b      	strb	r3, [r7, #9]
	dht11.temp_byte1 = DHT11_Read ();
 80011e0:	f7ff ffa0 	bl	8001124 <DHT11_Read>
 80011e4:	4603      	mov	r3, r0
 80011e6:	72bb      	strb	r3, [r7, #10]
	dht11.temp_byte2 = DHT11_Read ();
 80011e8:	f7ff ff9c 	bl	8001124 <DHT11_Read>
 80011ec:	4603      	mov	r3, r0
 80011ee:	72fb      	strb	r3, [r7, #11]
	dht11.checksum = DHT11_Read();
 80011f0:	f7ff ff98 	bl	8001124 <DHT11_Read>
 80011f4:	4603      	mov	r3, r0
 80011f6:	733b      	strb	r3, [r7, #12]
	DHT11_Stop();
 80011f8:	f7ff ff54 	bl	80010a4 <DHT11_Stop>
	return dht11;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	461a      	mov	r2, r3
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	6010      	str	r0, [r2, #0]
 8001208:	889b      	ldrh	r3, [r3, #4]
 800120a:	8093      	strh	r3, [r2, #4]
}
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	807b      	strh	r3, [r7, #2]
    *length = 0;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8001228:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800122c:	2100      	movs	r1, #0
 800122e:	68b8      	ldr	r0, [r7, #8]
 8001230:	f006 f8c0 	bl	80073b4 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 8001234:	f240 4202 	movw	r2, #1026	@ 0x402
 8001238:	2100      	movs	r1, #0
 800123a:	4826      	ldr	r0, [pc, #152]	@ (80012d4 <esp_at_command+0xc0>)
 800123c:	f006 f8ba 	bl	80073b4 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f7ff f82d 	bl	80002a0 <strlen>
 8001246:	4603      	mov	r3, r0
 8001248:	b29a      	uxth	r2, r3
 800124a:	2364      	movs	r3, #100	@ 0x64
 800124c:	68f9      	ldr	r1, [r7, #12]
 800124e:	4822      	ldr	r0, [pc, #136]	@ (80012d8 <esp_at_command+0xc4>)
 8001250:	f004 f982 	bl	8005558 <HAL_UART_Transmit>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d032      	beq.n	80012c0 <esp_at_command+0xac>
        return -1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e035      	b.n	80012cc <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 8001260:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <esp_at_command+0xc0>)
 8001262:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800126a:	d302      	bcc.n	8001272 <esp_at_command+0x5e>
            return -2;
 800126c:	f06f 0301 	mvn.w	r3, #1
 8001270:	e02c      	b.n	80012cc <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 8001272:	491a      	ldr	r1, [pc, #104]	@ (80012dc <esp_at_command+0xc8>)
 8001274:	4817      	ldr	r0, [pc, #92]	@ (80012d4 <esp_at_command+0xc0>)
 8001276:	f006 f921 	bl	80074bc <strstr>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <esp_at_command+0x72>
            return -3;
 8001280:	f06f 0302 	mvn.w	r3, #2
 8001284:	e022      	b.n	80012cc <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 8001286:	4916      	ldr	r1, [pc, #88]	@ (80012e0 <esp_at_command+0xcc>)
 8001288:	4812      	ldr	r0, [pc, #72]	@ (80012d4 <esp_at_command+0xc0>)
 800128a:	f006 f917 	bl	80074bc <strstr>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00e      	beq.n	80012b2 <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 8001294:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <esp_at_command+0xc0>)
 8001296:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800129a:	461a      	mov	r2, r3
 800129c:	490d      	ldr	r1, [pc, #52]	@ (80012d4 <esp_at_command+0xc0>)
 800129e:	68b8      	ldr	r0, [r7, #8]
 80012a0:	f006 f9a1 	bl	80075e6 <memcpy>
            *length = cb_data.length;
 80012a4:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <esp_at_command+0xc0>)
 80012a6:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	801a      	strh	r2, [r3, #0]
            return 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e00c      	b.n	80012cc <esp_at_command+0xb8>
        }
        time_out -= 10;
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	3b0a      	subs	r3, #10
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 80012ba:	200a      	movs	r0, #10
 80012bc:	f001 fd12 	bl	8002ce4 <HAL_Delay>
    while(time_out > 0)
 80012c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	dccb      	bgt.n	8001260 <esp_at_command+0x4c>
    }
    return -4;
 80012c8:	f06f 0303 	mvn.w	r3, #3
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000063c 	.word	0x2000063c
 80012d8:	20000bf4 	.word	0x20000bf4
 80012dc:	080095d8 	.word	0x080095d8
 80012e0:	080095e0 	.word	0x080095e0

080012e4 <esp_reset>:

static int esp_reset(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 80012ee:	1dba      	adds	r2, r7, #6
 80012f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f4:	4909      	ldr	r1, [pc, #36]	@ (800131c <esp_reset+0x38>)
 80012f6:	480a      	ldr	r0, [pc, #40]	@ (8001320 <esp_reset+0x3c>)
 80012f8:	f7ff ff8c 	bl	8001214 <esp_at_command>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <esp_reset+0x24>
    {
    	return -1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e004      	b.n	8001312 <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 8001308:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800130c:	f001 fcea 	bl	8002ce4 <HAL_Delay>
    return 0;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000204 	.word	0x20000204
 8001320:	080095e4 	.word	0x080095e4

08001324 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 8001332:	f107 020a 	add.w	r2, r7, #10
 8001336:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800133a:	492d      	ldr	r1, [pc, #180]	@ (80013f0 <request_ip_addr+0xcc>)
 800133c:	482d      	ldr	r0, [pc, #180]	@ (80013f4 <request_ip_addr+0xd0>)
 800133e:	f7ff ff69 	bl	8001214 <esp_at_command>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8001348:	482b      	ldr	r0, [pc, #172]	@ (80013f8 <request_ip_addr+0xd4>)
 800134a:	f005 ff31 	bl	80071b0 <puts>
 800134e:	e049      	b.n	80013e4 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 8001350:	492a      	ldr	r1, [pc, #168]	@ (80013fc <request_ip_addr+0xd8>)
 8001352:	4827      	ldr	r0, [pc, #156]	@ (80013f0 <request_ip_addr+0xcc>)
 8001354:	f006 f856 	bl	8007404 <strtok>
 8001358:	6178      	str	r0, [r7, #20]

        if(is_debug)
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d03e      	beq.n	80013de <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	e009      	b.n	800137a <request_ip_addr+0x56>
                printf("%c", response[i]);
 8001366:	4a22      	ldr	r2, [pc, #136]	@ (80013f0 <request_ip_addr+0xcc>)
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4413      	add	r3, r2
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f005 fec0 	bl	80070f4 <putchar>
            for(int i = 0 ; i < length ; i++)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	3301      	adds	r3, #1
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	897b      	ldrh	r3, [r7, #10]
 800137c:	461a      	mov	r2, r3
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4293      	cmp	r3, r2
 8001382:	dbf0      	blt.n	8001366 <request_ip_addr+0x42>
        }

        while(line != NULL)
 8001384:	e02b      	b.n	80013de <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 8001386:	491e      	ldr	r1, [pc, #120]	@ (8001400 <request_ip_addr+0xdc>)
 8001388:	6978      	ldr	r0, [r7, #20]
 800138a:	f006 f897 	bl	80074bc <strstr>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d01f      	beq.n	80013d4 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 8001394:	491b      	ldr	r1, [pc, #108]	@ (8001404 <request_ip_addr+0xe0>)
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f006 f834 	bl	8007404 <strtok>
                ip = strtok(NULL, "\"");
 800139c:	4919      	ldr	r1, [pc, #100]	@ (8001404 <request_ip_addr+0xe0>)
 800139e:	2000      	movs	r0, #0
 80013a0:	f006 f830 	bl	8007404 <strtok>
 80013a4:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 80013a6:	4918      	ldr	r1, [pc, #96]	@ (8001408 <request_ip_addr+0xe4>)
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7fe ff19 	bl	80001e0 <strcmp>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00f      	beq.n	80013d4 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 80013b4:	2210      	movs	r2, #16
 80013b6:	2100      	movs	r1, #0
 80013b8:	4814      	ldr	r0, [pc, #80]	@ (800140c <request_ip_addr+0xe8>)
 80013ba:	f005 fffb 	bl	80073b4 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f7fe ff6e 	bl	80002a0 <strlen>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	68f9      	ldr	r1, [r7, #12]
 80013ca:	4810      	ldr	r0, [pc, #64]	@ (800140c <request_ip_addr+0xe8>)
 80013cc:	f006 f90b 	bl	80075e6 <memcpy>
                    return 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e009      	b.n	80013e8 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 80013d4:	4909      	ldr	r1, [pc, #36]	@ (80013fc <request_ip_addr+0xd8>)
 80013d6:	2000      	movs	r0, #0
 80013d8:	f006 f814 	bl	8007404 <strtok>
 80013dc:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1d0      	bne.n	8001386 <request_ip_addr+0x62>
        }
    }
    return -1;
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000204 	.word	0x20000204
 80013f4:	0800962c 	.word	0x0800962c
 80013f8:	08009638 	.word	0x08009638
 80013fc:	08009620 	.word	0x08009620
 8001400:	08009658 	.word	0x08009658
 8001404:	08009628 	.word	0x08009628
 8001408:	080095f0 	.word	0x080095f0
 800140c:	200001f4 	.word	0x200001f4

08001410 <esp_client_conn>:
int esp_client_conn()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b092      	sub	sp, #72	@ 0x48
 8001414:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	2240      	movs	r2, #64	@ 0x40
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f005 ffc8 	bl	80073b4 <memset>
  uint16_t length = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 8001428:	f107 0008 	add.w	r0, r7, #8
 800142c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001430:	4a09      	ldr	r2, [pc, #36]	@ (8001458 <esp_client_conn+0x48>)
 8001432:	490a      	ldr	r1, [pc, #40]	@ (800145c <esp_client_conn+0x4c>)
 8001434:	f005 fec4 	bl	80071c0 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8001438:	1dba      	adds	r2, r7, #6
 800143a:	f107 0008 	add.w	r0, r7, #8
 800143e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001442:	4907      	ldr	r1, [pc, #28]	@ (8001460 <esp_client_conn+0x50>)
 8001444:	f7ff fee6 	bl	8001214 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8001448:	4806      	ldr	r0, [pc, #24]	@ (8001464 <esp_client_conn+0x54>)
 800144a:	f000 f909 	bl	8001660 <esp_send_data>
	return 0;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3748      	adds	r7, #72	@ 0x48
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	08009664 	.word	0x08009664
 800145c:	08009674 	.word	0x08009674
 8001460:	20000204 	.word	0x20000204
 8001464:	08009690 	.word	0x08009690

08001468 <esp_get_status>:
int esp_get_status()
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 8001472:	1dba      	adds	r2, r7, #6
 8001474:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001478:	4909      	ldr	r1, [pc, #36]	@ (80014a0 <esp_get_status+0x38>)
 800147a:	480a      	ldr	r0, [pc, #40]	@ (80014a4 <esp_get_status+0x3c>)
 800147c:	f7ff feca 	bl	8001214 <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 8001480:	4909      	ldr	r1, [pc, #36]	@ (80014a8 <esp_get_status+0x40>)
 8001482:	4807      	ldr	r0, [pc, #28]	@ (80014a0 <esp_get_status+0x38>)
 8001484:	f006 f81a 	bl	80074bc <strstr>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <esp_get_status+0x2a>
    {
    	return 0;
 800148e:	2300      	movs	r3, #0
 8001490:	e001      	b.n	8001496 <esp_get_status+0x2e>
    }
	return -1;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000204 	.word	0x20000204
 80014a4:	0800969c 	.word	0x0800969c
 80014a8:	080096ac 	.word	0x080096ac

080014ac <drv_esp_init>:
int drv_esp_init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 80014b0:	2210      	movs	r2, #16
 80014b2:	2100      	movs	r1, #0
 80014b4:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <drv_esp_init+0x24>)
 80014b6:	f005 ff7d 	bl	80073b4 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 80014ba:	2201      	movs	r2, #1
 80014bc:	4905      	ldr	r1, [pc, #20]	@ (80014d4 <drv_esp_init+0x28>)
 80014be:	4806      	ldr	r0, [pc, #24]	@ (80014d8 <drv_esp_init+0x2c>)
 80014c0:	f004 f8d5 	bl	800566e <HAL_UART_Receive_IT>

    return esp_reset();
 80014c4:	f7ff ff0e 	bl	80012e4 <esp_reset>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200001f4 	.word	0x200001f4
 80014d4:	2000063b 	.word	0x2000063b
 80014d8:	20000bf4 	.word	0x20000bf4

080014dc <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b094      	sub	sp, #80	@ 0x50
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	2240      	movs	r2, #64	@ 0x40
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f005 ff5d 	bl	80073b4 <memset>
  if(ssid == NULL || passwd == NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d002      	beq.n	8001506 <ap_conn_func+0x2a>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d103      	bne.n	800150e <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8001506:	4817      	ldr	r0, [pc, #92]	@ (8001564 <ap_conn_func+0x88>)
 8001508:	f005 fe52 	bl	80071b0 <puts>
 800150c:	e026      	b.n	800155c <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 800150e:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8001512:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001516:	4914      	ldr	r1, [pc, #80]	@ (8001568 <ap_conn_func+0x8c>)
 8001518:	4814      	ldr	r0, [pc, #80]	@ (800156c <ap_conn_func+0x90>)
 800151a:	f7ff fe7b 	bl	8001214 <esp_at_command>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 8001524:	4812      	ldr	r0, [pc, #72]	@ (8001570 <ap_conn_func+0x94>)
 8001526:	f005 fe43 	bl	80071b0 <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 800152a:	f107 000c 	add.w	r0, r7, #12
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4910      	ldr	r1, [pc, #64]	@ (8001574 <ap_conn_func+0x98>)
 8001534:	f005 fe44 	bl	80071c0 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8001538:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 800153c:	f107 000c 	add.w	r0, r7, #12
 8001540:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001544:	4908      	ldr	r1, [pc, #32]	@ (8001568 <ap_conn_func+0x8c>)
 8001546:	f7ff fe65 	bl	8001214 <esp_at_command>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	4619      	mov	r1, r3
 8001556:	4808      	ldr	r0, [pc, #32]	@ (8001578 <ap_conn_func+0x9c>)
 8001558:	f005 fdba 	bl	80070d0 <iprintf>
}
 800155c:	3750      	adds	r7, #80	@ 0x50
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	08009710 	.word	0x08009710
 8001568:	20000204 	.word	0x20000204
 800156c:	0800973c 	.word	0x0800973c
 8001570:	0800974c 	.word	0x0800974c
 8001574:	08009760 	.word	0x08009760
 8001578:	08009778 	.word	0x08009778

0800157c <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a23      	ldr	r2, [pc, #140]	@ (8001618 <HAL_UART_RxCpltCallback+0x9c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d117      	bne.n	80015be <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 800158e:	4b23      	ldr	r3, [pc, #140]	@ (800161c <HAL_UART_RxCpltCallback+0xa0>)
 8001590:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001598:	d20c      	bcs.n	80015b4 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 800159a:	4b20      	ldr	r3, [pc, #128]	@ (800161c <HAL_UART_RxCpltCallback+0xa0>)
 800159c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	b291      	uxth	r1, r2
 80015a4:	4a1d      	ldr	r2, [pc, #116]	@ (800161c <HAL_UART_RxCpltCallback+0xa0>)
 80015a6:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <HAL_UART_RxCpltCallback+0xa4>)
 80015ae:	7819      	ldrb	r1, [r3, #0]
 80015b0:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <HAL_UART_RxCpltCallback+0xa0>)
 80015b2:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	491a      	ldr	r1, [pc, #104]	@ (8001620 <HAL_UART_RxCpltCallback+0xa4>)
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f004 f858 	bl	800566e <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a18      	ldr	r2, [pc, #96]	@ (8001624 <HAL_UART_RxCpltCallback+0xa8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d122      	bne.n	800160e <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 80015c8:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <HAL_UART_RxCpltCallback+0xac>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a17      	ldr	r2, [pc, #92]	@ (800162c <HAL_UART_RxCpltCallback+0xb0>)
 80015ce:	7811      	ldrb	r1, [r2, #0]
 80015d0:	4a17      	ldr	r2, [pc, #92]	@ (8001630 <HAL_UART_RxCpltCallback+0xb4>)
 80015d2:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <HAL_UART_RxCpltCallback+0xac>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a15      	ldr	r2, [pc, #84]	@ (8001630 <HAL_UART_RxCpltCallback+0xb4>)
 80015da:	5cd3      	ldrb	r3, [r2, r3]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b0d      	cmp	r3, #13
 80015e0:	d10b      	bne.n	80015fa <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <HAL_UART_RxCpltCallback+0xac>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a12      	ldr	r2, [pc, #72]	@ (8001630 <HAL_UART_RxCpltCallback+0xb4>)
 80015e8:	2100      	movs	r1, #0
 80015ea:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_UART_RxCpltCallback+0xb8>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
    		i = 0;
 80015f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <HAL_UART_RxCpltCallback+0xac>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	e004      	b.n	8001604 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <HAL_UART_RxCpltCallback+0xac>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	4a09      	ldr	r2, [pc, #36]	@ (8001628 <HAL_UART_RxCpltCallback+0xac>)
 8001602:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 8001604:	2201      	movs	r2, #1
 8001606:	4909      	ldr	r1, [pc, #36]	@ (800162c <HAL_UART_RxCpltCallback+0xb0>)
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f004 f830 	bl	800566e <HAL_UART_Receive_IT>
    }
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40011400 	.word	0x40011400
 800161c:	2000063c 	.word	0x2000063c
 8001620:	2000063b 	.word	0x2000063b
 8001624:	40004400 	.word	0x40004400
 8001628:	20000a40 	.word	0x20000a40
 800162c:	2000063a 	.word	0x2000063a
 8001630:	20000608 	.word	0x20000608
 8001634:	20000604 	.word	0x20000604

08001638 <AiotClient_Init>:


void AiotClient_Init()
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 800163c:	4906      	ldr	r1, [pc, #24]	@ (8001658 <AiotClient_Init+0x20>)
 800163e:	4807      	ldr	r0, [pc, #28]	@ (800165c <AiotClient_Init+0x24>)
 8001640:	f7ff ff4c 	bl	80014dc <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 8001644:	2001      	movs	r0, #1
 8001646:	f7ff fe6d 	bl	8001324 <request_ip_addr>
	esp_client_conn();
 800164a:	f7ff fee1 	bl	8001410 <esp_client_conn>
	esp_get_status();
 800164e:	f7ff ff0b 	bl	8001468 <esp_get_status>
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	080097d8 	.word	0x080097d8
 800165c:	080097e4 	.word	0x080097e4

08001660 <esp_send_data>:

void esp_send_data(char *data)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b094      	sub	sp, #80	@ 0x50
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	2240      	movs	r2, #64	@ 0x40
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f005 fe9f 	bl	80073b4 <memset>
	uint16_t length = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7fe fe10 	bl	80002a0 <strlen>
 8001680:	4602      	mov	r2, r0
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	490e      	ldr	r1, [pc, #56]	@ (80016c0 <esp_send_data+0x60>)
 8001688:	4618      	mov	r0, r3
 800168a:	f005 fd99 	bl	80071c0 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 800168e:	f107 020e 	add.w	r2, r7, #14
 8001692:	f107 0010 	add.w	r0, r7, #16
 8001696:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800169a:	490a      	ldr	r1, [pc, #40]	@ (80016c4 <esp_send_data+0x64>)
 800169c:	f7ff fdba 	bl	8001214 <esp_at_command>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d107      	bne.n	80016b6 <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 80016a6:	f107 020e 	add.w	r2, r7, #14
 80016aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ae:	4905      	ldr	r1, [pc, #20]	@ (80016c4 <esp_send_data+0x64>)
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fdaf 	bl	8001214 <esp_at_command>
	}
}
 80016b6:	bf00      	nop
 80016b8:	3750      	adds	r7, #80	@ 0x50
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	080097ec 	.word	0x080097ec
 80016c4:	20000204 	.word	0x20000204

080016c8 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 80016cc:	2201      	movs	r2, #1
 80016ce:	4903      	ldr	r1, [pc, #12]	@ (80016dc <drv_uart_init+0x14>)
 80016d0:	4803      	ldr	r0, [pc, #12]	@ (80016e0 <drv_uart_init+0x18>)
 80016d2:	f003 ffcc 	bl	800566e <HAL_UART_Receive_IT>
    return 0;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000063a 	.word	0x2000063a
 80016e0:	20000bac 	.word	0x20000bac

080016e4 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 80016ec:	1d39      	adds	r1, r7, #4
 80016ee:	230a      	movs	r3, #10
 80016f0:	2201      	movs	r2, #1
 80016f2:	4807      	ldr	r0, [pc, #28]	@ (8001710 <__io_putchar+0x2c>)
 80016f4:	f003 ff30 	bl	8005558 <HAL_UART_Transmit>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <__io_putchar+0x1e>
        return ch;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	e001      	b.n	8001706 <__io_putchar+0x22>
    return -1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000bac 	.word	0x20000bac

08001714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int ret = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800171e:	f001 fa6f 	bl	8002c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001722:	f000 f917 	bl	8001954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001726:	f000 fc37 	bl	8001f98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800172a:	f000 fbe1 	bl	8001ef0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800172e:	f000 fc09 	bl	8001f44 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8001732:	f000 fb65 	bl	8001e00 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001736:	f000 faed 	bl	8001d14 <MX_TIM3_Init>
  MX_TIM1_Init();
 800173a:	f000 f9d5 	bl	8001ae8 <MX_TIM1_Init>
  MX_ADC1_Init();
 800173e:	f000 f973 	bl	8001a28 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001742:	f000 fa71 	bl	8001c28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf("Start main() - wifi\r\n");
 8001746:	486d      	ldr	r0, [pc, #436]	@ (80018fc <main+0x1e8>)
 8001748:	f005 fd32 	bl	80071b0 <puts>
  ret |= drv_uart_init();
 800174c:	f7ff ffbc 	bl	80016c8 <drv_uart_init>
 8001750:	4602      	mov	r2, r0
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
  ret |= drv_esp_init();
 8001758:	f7ff fea8 	bl	80014ac <drv_esp_init>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4313      	orrs	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
  if(ret != 0)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d004      	beq.n	8001774 <main+0x60>
  {
	  printf("Esp response error\r\n");
 800176a:	4865      	ldr	r0, [pc, #404]	@ (8001900 <main+0x1ec>)
 800176c:	f005 fd20 	bl	80071b0 <puts>
	  Error_Handler();
 8001770:	f000 fe9c 	bl	80024ac <Error_Handler>
  }

  AiotClient_Init();
 8001774:	f7ff ff60 	bl	8001638 <AiotClient_Init>

  DHT11_Init();
 8001778:	f7ff fc52 	bl	8001020 <DHT11_Init>

  if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 800177c:	2100      	movs	r1, #0
 800177e:	4861      	ldr	r0, [pc, #388]	@ (8001904 <main+0x1f0>)
 8001780:	f002 ffa2 	bl	80046c8 <HAL_TIM_PWM_Start>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <main+0x7a>
	  Error_Handler();
 800178a:	f000 fe8f 	bl	80024ac <Error_Handler>
  if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 800178e:	485e      	ldr	r0, [pc, #376]	@ (8001908 <main+0x1f4>)
 8001790:	f002 fede 	bl	8004550 <HAL_TIM_Base_Start_IT>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <main+0x8a>
	  Error_Handler();
 800179a:	f000 fe87 	bl	80024ac <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1) != HAL_OK)
 800179e:	2100      	movs	r1, #0
 80017a0:	4859      	ldr	r0, [pc, #356]	@ (8001908 <main+0x1f4>)
 80017a2:	f002 ff91 	bl	80046c8 <HAL_TIM_PWM_Start>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <main+0x9c>
	  Error_Handler();
 80017ac:	f000 fe7e 	bl	80024ac <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2) != HAL_OK)
 80017b0:	2104      	movs	r1, #4
 80017b2:	4855      	ldr	r0, [pc, #340]	@ (8001908 <main+0x1f4>)
 80017b4:	f002 ff88 	bl	80046c8 <HAL_TIM_PWM_Start>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <main+0xae>
	  Error_Handler();
 80017be:	f000 fe75 	bl	80024ac <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 80017c2:	2100      	movs	r1, #0
 80017c4:	4851      	ldr	r0, [pc, #324]	@ (800190c <main+0x1f8>)
 80017c6:	f002 ff7f 	bl	80046c8 <HAL_TIM_PWM_Start>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <main+0xc0>
	  Error_Handler();
 80017d0:	f000 fe6c 	bl	80024ac <Error_Handler>

  if(HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1) != HAL_OK)
 80017d4:	2100      	movs	r1, #0
 80017d6:	484e      	ldr	r0, [pc, #312]	@ (8001910 <main+0x1fc>)
 80017d8:	f002 ff76 	bl	80046c8 <HAL_TIM_PWM_Start>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <main+0xd2>
	  Error_Handler();
 80017e2:	f000 fe63 	bl	80024ac <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	    int infraredSensorData = infraredSensor();	//출입문 적외선센서 값

		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 80017e6:	494b      	ldr	r1, [pc, #300]	@ (8001914 <main+0x200>)
 80017e8:	484b      	ldr	r0, [pc, #300]	@ (8001918 <main+0x204>)
 80017ea:	f005 fe67 	bl	80074bc <strstr>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d01d      	beq.n	8001830 <main+0x11c>
 80017f4:	4b48      	ldr	r3, [pc, #288]	@ (8001918 <main+0x204>)
 80017f6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80017fa:	3b01      	subs	r3, #1
 80017fc:	4a46      	ldr	r2, [pc, #280]	@ (8001918 <main+0x204>)
 80017fe:	5cd3      	ldrb	r3, [r2, r3]
 8001800:	2b0a      	cmp	r3, #10
 8001802:	d115      	bne.n	8001830 <main+0x11c>
		{
			//?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 8001804:	215b      	movs	r1, #91	@ 0x5b
 8001806:	4844      	ldr	r0, [pc, #272]	@ (8001918 <main+0x204>)
 8001808:	f005 fddc 	bl	80073c4 <strchr>
 800180c:	4603      	mov	r3, r0
 800180e:	4619      	mov	r1, r3
 8001810:	4842      	ldr	r0, [pc, #264]	@ (800191c <main+0x208>)
 8001812:	f005 fee0 	bl	80075d6 <strcpy>
			memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 8001816:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800181a:	2100      	movs	r1, #0
 800181c:	483e      	ldr	r0, [pc, #248]	@ (8001918 <main+0x204>)
 800181e:	f005 fdc9 	bl	80073b4 <memset>
			cb_data.length = 0;
 8001822:	4b3d      	ldr	r3, [pc, #244]	@ (8001918 <main+0x204>)
 8001824:	2200      	movs	r2, #0
 8001826:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 800182a:	483c      	ldr	r0, [pc, #240]	@ (800191c <main+0x208>)
 800182c:	f000 fc54 	bl	80020d8 <esp_event>
		}
		if(rx2Flag)
 8001830:	4b3b      	ldr	r3, [pc, #236]	@ (8001920 <main+0x20c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <main+0x134>
		{
			printf("recv2 : %s\r\n",rx2Data);
 800183a:	493a      	ldr	r1, [pc, #232]	@ (8001924 <main+0x210>)
 800183c:	483a      	ldr	r0, [pc, #232]	@ (8001928 <main+0x214>)
 800183e:	f005 fc47 	bl	80070d0 <iprintf>
			rx2Flag =0;
 8001842:	4b37      	ldr	r3, [pc, #220]	@ (8001920 <main+0x20c>)
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
		}
		if(tim3Flag1Sec)	//1초에 한번
 8001848:	4b38      	ldr	r3, [pc, #224]	@ (800192c <main+0x218>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d041      	beq.n	80018d4 <main+0x1c0>
		{
			tim3Flag1Sec = 0;
 8001850:	4b36      	ldr	r3, [pc, #216]	@ (800192c <main+0x218>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
			if(!(tim3Sec%10)) //10초에 한번
 8001856:	4b36      	ldr	r3, [pc, #216]	@ (8001930 <main+0x21c>)
 8001858:	6819      	ldr	r1, [r3, #0]
 800185a:	4b36      	ldr	r3, [pc, #216]	@ (8001934 <main+0x220>)
 800185c:	fba3 2301 	umull	r2, r3, r3, r1
 8001860:	08da      	lsrs	r2, r3, #3
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	1aca      	subs	r2, r1, r3
 800186c:	2a00      	cmp	r2, #0
 800186e:	d109      	bne.n	8001884 <main+0x170>
			{
				if(esp_get_status() != 0)
 8001870:	f7ff fdfa 	bl	8001468 <esp_get_status>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d004      	beq.n	8001884 <main+0x170>
				{
					printf("server connecting ...\r\n");
 800187a:	482f      	ldr	r0, [pc, #188]	@ (8001938 <main+0x224>)
 800187c:	f005 fc98 	bl	80071b0 <puts>
					esp_client_conn();
 8001880:	f7ff fdc6 	bl	8001410 <esp_client_conn>
				}
			}
			printf("tim3Sec : %d\r\n",tim3Sec);
 8001884:	4b2a      	ldr	r3, [pc, #168]	@ (8001930 <main+0x21c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	482c      	ldr	r0, [pc, #176]	@ (800193c <main+0x228>)
 800188c:	f005 fc20 	bl	80070d0 <iprintf>
			if(!(tim3Sec%5)) //5초에 한번
 8001890:	4b27      	ldr	r3, [pc, #156]	@ (8001930 <main+0x21c>)
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	4b27      	ldr	r3, [pc, #156]	@ (8001934 <main+0x220>)
 8001896:	fba3 2301 	umull	r2, r3, r3, r1
 800189a:	089a      	lsrs	r2, r3, #2
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	1aca      	subs	r2, r1, r3
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d115      	bne.n	80018d4 <main+0x1c0>
			{
				//dht11에서 값 읽어오기
				dht11Data = DHT11_readData();
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fc86 	bl	80011bc <DHT11_readData>
				if(dht11Data.rh_byte1 != 255)
 80018b0:	793b      	ldrb	r3, [r7, #4]
 80018b2:	2bff      	cmp	r3, #255	@ 0xff
 80018b4:	d00b      	beq.n	80018ce <main+0x1ba>
				{
					//온도 데이터 전역변수 temp에 저장
					sprintf(temp, "%d.%d", dht11Data.temp_byte1, dht11Data.temp_byte2);
 80018b6:	79bb      	ldrb	r3, [r7, #6]
 80018b8:	461a      	mov	r2, r3
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	4920      	ldr	r1, [pc, #128]	@ (8001940 <main+0x22c>)
 80018be:	4821      	ldr	r0, [pc, #132]	@ (8001944 <main+0x230>)
 80018c0:	f005 fc7e 	bl	80071c0 <siprintf>
					//습도 데이터 전역변수 humi 에 저장
					humi = dht11Data.rh_byte1;
 80018c4:	793b      	ldrb	r3, [r7, #4]
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001948 <main+0x234>)
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	e002      	b.n	80018d4 <main+0x1c0>
				}
				else
					printf("DHT11 response error\r\n");
 80018ce:	481f      	ldr	r0, [pc, #124]	@ (800194c <main+0x238>)
 80018d0:	f005 fc6e 	bl	80071b0 <puts>
//				{
//					servoFlag = 0;
//					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
				}
			}
			if(!(tim3Sec%2))
 80018d4:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <main+0x21c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d182      	bne.n	80017e6 <main+0xd2>
			{
				if (closeFlag)
 80018e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <main+0x23c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f43f af7e 	beq.w	80017e6 <main+0xd2>
				{
					__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_1, 1300);
 80018ea:	4b07      	ldr	r3, [pc, #28]	@ (8001908 <main+0x1f4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f240 5214 	movw	r2, #1300	@ 0x514
 80018f2:	635a      	str	r2, [r3, #52]	@ 0x34
					closeFlag = 0;
 80018f4:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <main+0x23c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 80018fa:	e774      	b.n	80017e6 <main+0xd2>
 80018fc:	080097fc 	.word	0x080097fc
 8001900:	08009814 	.word	0x08009814
 8001904:	20000a8c 	.word	0x20000a8c
 8001908:	20000ad4 	.word	0x20000ad4
 800190c:	20000b1c 	.word	0x20000b1c
 8001910:	20000b64 	.word	0x20000b64
 8001914:	08009828 	.word	0x08009828
 8001918:	2000063c 	.word	0x2000063c
 800191c:	20000c60 	.word	0x20000c60
 8001920:	20000604 	.word	0x20000604
 8001924:	20000608 	.word	0x20000608
 8001928:	08009830 	.word	0x08009830
 800192c:	20000000 	.word	0x20000000
 8001930:	20000c3c 	.word	0x20000c3c
 8001934:	cccccccd 	.word	0xcccccccd
 8001938:	08009840 	.word	0x08009840
 800193c:	08009858 	.word	0x08009858
 8001940:	08009868 	.word	0x08009868
 8001944:	20000c44 	.word	0x20000c44
 8001948:	20000c40 	.word	0x20000c40
 800194c:	08009870 	.word	0x08009870
 8001950:	20000ca8 	.word	0x20000ca8

08001954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b094      	sub	sp, #80	@ 0x50
 8001958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195a:	f107 0320 	add.w	r3, r7, #32
 800195e:	2230      	movs	r2, #48	@ 0x30
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f005 fd26 	bl	80073b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	4b28      	ldr	r3, [pc, #160]	@ (8001a20 <SystemClock_Config+0xcc>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	4a27      	ldr	r2, [pc, #156]	@ (8001a20 <SystemClock_Config+0xcc>)
 8001982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001986:	6413      	str	r3, [r2, #64]	@ 0x40
 8001988:	4b25      	ldr	r3, [pc, #148]	@ (8001a20 <SystemClock_Config+0xcc>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	4b22      	ldr	r3, [pc, #136]	@ (8001a24 <SystemClock_Config+0xd0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a21      	ldr	r2, [pc, #132]	@ (8001a24 <SystemClock_Config+0xd0>)
 800199e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a24 <SystemClock_Config+0xd0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019b0:	2301      	movs	r3, #1
 80019b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019b4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ba:	2302      	movs	r3, #2
 80019bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019c4:	2308      	movs	r3, #8
 80019c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80019cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019ce:	2304      	movs	r3, #4
 80019d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019d2:	2304      	movs	r3, #4
 80019d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d6:	f107 0320 	add.w	r3, r7, #32
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 f8d0 	bl	8003b80 <HAL_RCC_OscConfig>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019e6:	f000 fd61 	bl	80024ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ea:	230f      	movs	r3, #15
 80019ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ee:	2302      	movs	r3, #2
 80019f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2102      	movs	r1, #2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fb32 	bl	8004070 <HAL_RCC_ClockConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a12:	f000 fd4b 	bl	80024ac <Error_Handler>
  }
}
 8001a16:	bf00      	nop
 8001a18:	3750      	adds	r7, #80	@ 0x50
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000

08001a28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a3a:	4b28      	ldr	r3, [pc, #160]	@ (8001adc <MX_ADC1_Init+0xb4>)
 8001a3c:	4a28      	ldr	r2, [pc, #160]	@ (8001ae0 <MX_ADC1_Init+0xb8>)
 8001a3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a40:	4b26      	ldr	r3, [pc, #152]	@ (8001adc <MX_ADC1_Init+0xb4>)
 8001a42:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a48:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <MX_ADC1_Init+0xb4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a4e:	4b23      	ldr	r3, [pc, #140]	@ (8001adc <MX_ADC1_Init+0xb4>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a54:	4b21      	ldr	r3, [pc, #132]	@ (8001adc <MX_ADC1_Init+0xb4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a5a:	4b20      	ldr	r3, [pc, #128]	@ (8001adc <MX_ADC1_Init+0xb4>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a62:	4b1e      	ldr	r3, [pc, #120]	@ (8001adc <MX_ADC1_Init+0xb4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a68:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <MX_ADC1_Init+0xb4>)
 8001a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae4 <MX_ADC1_Init+0xbc>)
 8001a6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <MX_ADC1_Init+0xb4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001a74:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <MX_ADC1_Init+0xb4>)
 8001a76:	2202      	movs	r2, #2
 8001a78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a7a:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <MX_ADC1_Init+0xb4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a82:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <MX_ADC1_Init+0xb4>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a88:	4814      	ldr	r0, [pc, #80]	@ (8001adc <MX_ADC1_Init+0xb4>)
 8001a8a:	f001 f94f 	bl	8002d2c <HAL_ADC_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a94:	f000 fd0a 	bl	80024ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480c      	ldr	r0, [pc, #48]	@ (8001adc <MX_ADC1_Init+0xb4>)
 8001aaa:	f001 fab3 	bl	8003014 <HAL_ADC_ConfigChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ab4:	f000 fcfa 	bl	80024ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001abc:	2302      	movs	r3, #2
 8001abe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4805      	ldr	r0, [pc, #20]	@ (8001adc <MX_ADC1_Init+0xb4>)
 8001ac6:	f001 faa5 	bl	8003014 <HAL_ADC_ConfigChannel>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001ad0:	f000 fcec 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000a44 	.word	0x20000a44
 8001ae0:	40012000 	.word	0x40012000
 8001ae4:	0f000001 	.word	0x0f000001

08001ae8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b096      	sub	sp, #88	@ 0x58
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aee:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]
 8001b16:	615a      	str	r2, [r3, #20]
 8001b18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f005 fc47 	bl	80073b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b26:	4b3e      	ldr	r3, [pc, #248]	@ (8001c20 <MX_TIM1_Init+0x138>)
 8001b28:	4a3e      	ldr	r2, [pc, #248]	@ (8001c24 <MX_TIM1_Init+0x13c>)
 8001b2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001b2c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c20 <MX_TIM1_Init+0x138>)
 8001b2e:	2253      	movs	r2, #83	@ 0x53
 8001b30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b3b      	ldr	r3, [pc, #236]	@ (8001c20 <MX_TIM1_Init+0x138>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001b38:	4b39      	ldr	r3, [pc, #228]	@ (8001c20 <MX_TIM1_Init+0x138>)
 8001b3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b40:	4b37      	ldr	r3, [pc, #220]	@ (8001c20 <MX_TIM1_Init+0x138>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b46:	4b36      	ldr	r3, [pc, #216]	@ (8001c20 <MX_TIM1_Init+0x138>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4c:	4b34      	ldr	r3, [pc, #208]	@ (8001c20 <MX_TIM1_Init+0x138>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b52:	4833      	ldr	r0, [pc, #204]	@ (8001c20 <MX_TIM1_Init+0x138>)
 8001b54:	f002 fcac 	bl	80044b0 <HAL_TIM_Base_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b5e:	f000 fca5 	bl	80024ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b66:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b68:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	482c      	ldr	r0, [pc, #176]	@ (8001c20 <MX_TIM1_Init+0x138>)
 8001b70:	f003 f80c 	bl	8004b8c <HAL_TIM_ConfigClockSource>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b7a:	f000 fc97 	bl	80024ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b7e:	4828      	ldr	r0, [pc, #160]	@ (8001c20 <MX_TIM1_Init+0x138>)
 8001b80:	f002 fd48 	bl	8004614 <HAL_TIM_PWM_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b8a:	f000 fc8f 	bl	80024ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b96:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4820      	ldr	r0, [pc, #128]	@ (8001c20 <MX_TIM1_Init+0x138>)
 8001b9e:	f003 fbb7 	bl	8005310 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ba8:	f000 fc80 	bl	80024ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bac:	2360      	movs	r3, #96	@ 0x60
 8001bae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4813      	ldr	r0, [pc, #76]	@ (8001c20 <MX_TIM1_Init+0x138>)
 8001bd2:	f002 ff19 	bl	8004a08 <HAL_TIM_PWM_ConfigChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001bdc:	f000 fc66 	bl	80024ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bf4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bf8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4807      	ldr	r0, [pc, #28]	@ (8001c20 <MX_TIM1_Init+0x138>)
 8001c04:	f003 fbf2 	bl	80053ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001c0e:	f000 fc4d 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c12:	4803      	ldr	r0, [pc, #12]	@ (8001c20 <MX_TIM1_Init+0x138>)
 8001c14:	f000 fd3c 	bl	8002690 <HAL_TIM_MspPostInit>

}
 8001c18:	bf00      	nop
 8001c1a:	3758      	adds	r7, #88	@ 0x58
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000a8c 	.word	0x20000a8c
 8001c24:	40010000 	.word	0x40010000

08001c28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08e      	sub	sp, #56	@ 0x38
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3c:	f107 0320 	add.w	r3, r7, #32
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
 8001c54:	615a      	str	r2, [r3, #20]
 8001c56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c58:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001c5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001c60:	4b2b      	ldr	r3, [pc, #172]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001c62:	2253      	movs	r2, #83	@ 0x53
 8001c64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c66:	4b2a      	ldr	r3, [pc, #168]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001c6c:	4b28      	ldr	r3, [pc, #160]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001c6e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001c72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c74:	4b26      	ldr	r3, [pc, #152]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c7a:	4b25      	ldr	r3, [pc, #148]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001c7c:	2280      	movs	r2, #128	@ 0x80
 8001c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c80:	4823      	ldr	r0, [pc, #140]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001c82:	f002 fc15 	bl	80044b0 <HAL_TIM_Base_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c8c:	f000 fc0e 	bl	80024ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	481c      	ldr	r0, [pc, #112]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001c9e:	f002 ff75 	bl	8004b8c <HAL_TIM_ConfigClockSource>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ca8:	f000 fc00 	bl	80024ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cac:	4818      	ldr	r0, [pc, #96]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001cae:	f002 fcb1 	bl	8004614 <HAL_TIM_PWM_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001cb8:	f000 fbf8 	bl	80024ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cc4:	f107 0320 	add.w	r3, r7, #32
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4811      	ldr	r0, [pc, #68]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001ccc:	f003 fb20 	bl	8005310 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001cd6:	f000 fbe9 	bl	80024ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cda:	2360      	movs	r3, #96	@ 0x60
 8001cdc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2200      	movs	r2, #0
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4807      	ldr	r0, [pc, #28]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001cf2:	f002 fe89 	bl	8004a08 <HAL_TIM_PWM_ConfigChannel>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001cfc:	f000 fbd6 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d00:	4803      	ldr	r0, [pc, #12]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001d02:	f000 fcc5 	bl	8002690 <HAL_TIM_MspPostInit>

}
 8001d06:	bf00      	nop
 8001d08:	3738      	adds	r7, #56	@ 0x38
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000ad4 	.word	0x20000ad4

08001d14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08e      	sub	sp, #56	@ 0x38
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d28:	f107 0320 	add.w	r3, r7, #32
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
 8001d40:	615a      	str	r2, [r3, #20]
 8001d42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d44:	4b2c      	ldr	r3, [pc, #176]	@ (8001df8 <MX_TIM3_Init+0xe4>)
 8001d46:	4a2d      	ldr	r2, [pc, #180]	@ (8001dfc <MX_TIM3_Init+0xe8>)
 8001d48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001df8 <MX_TIM3_Init+0xe4>)
 8001d4c:	2253      	movs	r2, #83	@ 0x53
 8001d4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d50:	4b29      	ldr	r3, [pc, #164]	@ (8001df8 <MX_TIM3_Init+0xe4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001d56:	4b28      	ldr	r3, [pc, #160]	@ (8001df8 <MX_TIM3_Init+0xe4>)
 8001d58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5e:	4b26      	ldr	r3, [pc, #152]	@ (8001df8 <MX_TIM3_Init+0xe4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d64:	4b24      	ldr	r3, [pc, #144]	@ (8001df8 <MX_TIM3_Init+0xe4>)
 8001d66:	2280      	movs	r2, #128	@ 0x80
 8001d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d6a:	4823      	ldr	r0, [pc, #140]	@ (8001df8 <MX_TIM3_Init+0xe4>)
 8001d6c:	f002 fba0 	bl	80044b0 <HAL_TIM_Base_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d76:	f000 fb99 	bl	80024ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d84:	4619      	mov	r1, r3
 8001d86:	481c      	ldr	r0, [pc, #112]	@ (8001df8 <MX_TIM3_Init+0xe4>)
 8001d88:	f002 ff00 	bl	8004b8c <HAL_TIM_ConfigClockSource>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d92:	f000 fb8b 	bl	80024ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d96:	4818      	ldr	r0, [pc, #96]	@ (8001df8 <MX_TIM3_Init+0xe4>)
 8001d98:	f002 fc3c 	bl	8004614 <HAL_TIM_PWM_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001da2:	f000 fb83 	bl	80024ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dae:	f107 0320 	add.w	r3, r7, #32
 8001db2:	4619      	mov	r1, r3
 8001db4:	4810      	ldr	r0, [pc, #64]	@ (8001df8 <MX_TIM3_Init+0xe4>)
 8001db6:	f003 faab 	bl	8005310 <HAL_TIMEx_MasterConfigSynchronization>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001dc0:	f000 fb74 	bl	80024ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc4:	2360      	movs	r3, #96	@ 0x60
 8001dc6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4807      	ldr	r0, [pc, #28]	@ (8001df8 <MX_TIM3_Init+0xe4>)
 8001ddc:	f002 fe14 	bl	8004a08 <HAL_TIM_PWM_ConfigChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001de6:	f000 fb61 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dea:	4803      	ldr	r0, [pc, #12]	@ (8001df8 <MX_TIM3_Init+0xe4>)
 8001dec:	f000 fc50 	bl	8002690 <HAL_TIM_MspPostInit>

}
 8001df0:	bf00      	nop
 8001df2:	3738      	adds	r7, #56	@ 0x38
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000b1c 	.word	0x20000b1c
 8001dfc:	40000400 	.word	0x40000400

08001e00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08e      	sub	sp, #56	@ 0x38
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e14:	f107 0320 	add.w	r3, r7, #32
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
 8001e2c:	615a      	str	r2, [r3, #20]
 8001e2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee8 <MX_TIM4_Init+0xe8>)
 8001e32:	4a2e      	ldr	r2, [pc, #184]	@ (8001eec <MX_TIM4_Init+0xec>)
 8001e34:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001e36:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee8 <MX_TIM4_Init+0xe8>)
 8001e38:	2253      	movs	r2, #83	@ 0x53
 8001e3a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee8 <MX_TIM4_Init+0xe8>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001e42:	4b29      	ldr	r3, [pc, #164]	@ (8001ee8 <MX_TIM4_Init+0xe8>)
 8001e44:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e48:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4a:	4b27      	ldr	r3, [pc, #156]	@ (8001ee8 <MX_TIM4_Init+0xe8>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e50:	4b25      	ldr	r3, [pc, #148]	@ (8001ee8 <MX_TIM4_Init+0xe8>)
 8001e52:	2280      	movs	r2, #128	@ 0x80
 8001e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e56:	4824      	ldr	r0, [pc, #144]	@ (8001ee8 <MX_TIM4_Init+0xe8>)
 8001e58:	f002 fb2a 	bl	80044b0 <HAL_TIM_Base_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001e62:	f000 fb23 	bl	80024ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e6c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e70:	4619      	mov	r1, r3
 8001e72:	481d      	ldr	r0, [pc, #116]	@ (8001ee8 <MX_TIM4_Init+0xe8>)
 8001e74:	f002 fe8a 	bl	8004b8c <HAL_TIM_ConfigClockSource>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001e7e:	f000 fb15 	bl	80024ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e82:	4819      	ldr	r0, [pc, #100]	@ (8001ee8 <MX_TIM4_Init+0xe8>)
 8001e84:	f002 fbc6 	bl	8004614 <HAL_TIM_PWM_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001e8e:	f000 fb0d 	bl	80024ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e9a:	f107 0320 	add.w	r3, r7, #32
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4811      	ldr	r0, [pc, #68]	@ (8001ee8 <MX_TIM4_Init+0xe8>)
 8001ea2:	f003 fa35 	bl	8005310 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001eac:	f000 fafe 	bl	80024ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb0:	2360      	movs	r3, #96	@ 0x60
 8001eb2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001eb4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001eb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4807      	ldr	r0, [pc, #28]	@ (8001ee8 <MX_TIM4_Init+0xe8>)
 8001eca:	f002 fd9d 	bl	8004a08 <HAL_TIM_PWM_ConfigChannel>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001ed4:	f000 faea 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ed8:	4803      	ldr	r0, [pc, #12]	@ (8001ee8 <MX_TIM4_Init+0xe8>)
 8001eda:	f000 fbd9 	bl	8002690 <HAL_TIM_MspPostInit>

}
 8001ede:	bf00      	nop
 8001ee0:	3738      	adds	r7, #56	@ 0x38
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000b64 	.word	0x20000b64
 8001eec:	40000800 	.word	0x40000800

08001ef0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	@ (8001f40 <MX_USART2_UART_Init+0x50>)
 8001ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001efa:	4b10      	ldr	r3, [pc, #64]	@ (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001efc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f14:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f16:	220c      	movs	r2, #12
 8001f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	@ (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f20:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f26:	4805      	ldr	r0, [pc, #20]	@ (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f28:	f003 fac6 	bl	80054b8 <HAL_UART_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f32:	f000 fabb 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000bac 	.word	0x20000bac
 8001f40:	40004400 	.word	0x40004400

08001f44 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f48:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <MX_USART6_UART_Init+0x4c>)
 8001f4a:	4a12      	ldr	r2, [pc, #72]	@ (8001f94 <MX_USART6_UART_Init+0x50>)
 8001f4c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8001f4e:	4b10      	ldr	r3, [pc, #64]	@ (8001f90 <MX_USART6_UART_Init+0x4c>)
 8001f50:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001f54:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <MX_USART6_UART_Init+0x4c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <MX_USART6_UART_Init+0x4c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f62:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <MX_USART6_UART_Init+0x4c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f68:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <MX_USART6_UART_Init+0x4c>)
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6e:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <MX_USART6_UART_Init+0x4c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f74:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <MX_USART6_UART_Init+0x4c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f7a:	4805      	ldr	r0, [pc, #20]	@ (8001f90 <MX_USART6_UART_Init+0x4c>)
 8001f7c:	f003 fa9c 	bl	80054b8 <HAL_UART_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f86:	f000 fa91 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000bf4 	.word	0x20000bf4
 8001f94:	40011400 	.word	0x40011400

08001f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	@ 0x28
 8001f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
 8001fac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	4b46      	ldr	r3, [pc, #280]	@ (80020cc <MX_GPIO_Init+0x134>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	4a45      	ldr	r2, [pc, #276]	@ (80020cc <MX_GPIO_Init+0x134>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fbe:	4b43      	ldr	r3, [pc, #268]	@ (80020cc <MX_GPIO_Init+0x134>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b3f      	ldr	r3, [pc, #252]	@ (80020cc <MX_GPIO_Init+0x134>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a3e      	ldr	r2, [pc, #248]	@ (80020cc <MX_GPIO_Init+0x134>)
 8001fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b3c      	ldr	r3, [pc, #240]	@ (80020cc <MX_GPIO_Init+0x134>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	4b38      	ldr	r3, [pc, #224]	@ (80020cc <MX_GPIO_Init+0x134>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	4a37      	ldr	r2, [pc, #220]	@ (80020cc <MX_GPIO_Init+0x134>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff6:	4b35      	ldr	r3, [pc, #212]	@ (80020cc <MX_GPIO_Init+0x134>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	4b31      	ldr	r3, [pc, #196]	@ (80020cc <MX_GPIO_Init+0x134>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	4a30      	ldr	r2, [pc, #192]	@ (80020cc <MX_GPIO_Init+0x134>)
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	6313      	str	r3, [r2, #48]	@ 0x30
 8002012:	4b2e      	ldr	r3, [pc, #184]	@ (80020cc <MX_GPIO_Init+0x134>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	2120      	movs	r1, #32
 8002022:	482b      	ldr	r0, [pc, #172]	@ (80020d0 <MX_GPIO_Init+0x138>)
 8002024:	f001 fd6e 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8002028:	2200      	movs	r2, #0
 800202a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800202e:	4829      	ldr	r0, [pc, #164]	@ (80020d4 <MX_GPIO_Init+0x13c>)
 8002030:	f001 fd68 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002034:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800203a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800203e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	4822      	ldr	r0, [pc, #136]	@ (80020d4 <MX_GPIO_Init+0x13c>)
 800204c:	f001 fbbe 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0_EXTI0_BUTTON_Pin */
  GPIO_InitStruct.Pin = PC0_EXTI0_BUTTON_Pin;
 8002050:	2301      	movs	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002054:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PC0_EXTI0_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	481b      	ldr	r0, [pc, #108]	@ (80020d4 <MX_GPIO_Init+0x13c>)
 8002066:	f001 fbb1 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800206a:	2320      	movs	r3, #32
 800206c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206e:	2301      	movs	r3, #1
 8002070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	4813      	ldr	r0, [pc, #76]	@ (80020d0 <MX_GPIO_Init+0x138>)
 8002082:	f001 fba3 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8002086:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800208a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208c:	2301      	movs	r3, #1
 800208e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4619      	mov	r1, r3
 800209e:	480d      	ldr	r0, [pc, #52]	@ (80020d4 <MX_GPIO_Init+0x13c>)
 80020a0:	f001 fb94 	bl	80037cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2100      	movs	r1, #0
 80020a8:	2006      	movs	r0, #6
 80020aa:	f001 fac6 	bl	800363a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020ae:	2006      	movs	r0, #6
 80020b0:	f001 fadf 	bl	8003672 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2100      	movs	r1, #0
 80020b8:	2028      	movs	r0, #40	@ 0x28
 80020ba:	f001 fabe 	bl	800363a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020be:	2028      	movs	r0, #40	@ 0x28
 80020c0:	f001 fad7 	bl	8003672 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80020c4:	bf00      	nop
 80020c6:	3728      	adds	r7, #40	@ 0x28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40020000 	.word	0x40020000
 80020d4:	40020800 	.word	0x40020800

080020d8 <esp_event>:
void MX_GPIO_LED_OFF(int pin)
{
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
}
void esp_event(char * recvBuf)
{
 80020d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020da:	b0af      	sub	sp, #188	@ 0xbc
 80020dc:	af06      	add	r7, sp, #24
 80020de:	6078      	str	r0, [r7, #4]
  int i=0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  char * pToken;
  char * pArray[ARR_CNT]={0};
 80020e6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80020ea:	2250      	movs	r2, #80	@ 0x50
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f005 f960 	bl	80073b4 <memset>
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 80020f4:	f107 0308 	add.w	r3, r7, #8
 80020f8:	2240      	movs	r2, #64	@ 0x40
 80020fa:	2100      	movs	r1, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f005 f959 	bl	80073b4 <memset>

  strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe f8cc 	bl	80002a0 <strlen>
 8002108:	4603      	mov	r3, r0
 800210a:	3b01      	subs	r3, #1
 800210c:	4a7b      	ldr	r2, [pc, #492]	@ (80022fc <esp_event+0x224>)
 800210e:	2100      	movs	r1, #0
 8002110:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	487a      	ldr	r0, [pc, #488]	@ (8002300 <esp_event+0x228>)
 8002116:	f004 ffdb 	bl	80070d0 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 800211a:	497a      	ldr	r1, [pc, #488]	@ (8002304 <esp_event+0x22c>)
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f005 f971 	bl	8007404 <strtok>
 8002122:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
  while(pToken != NULL)
 8002126:	e017      	b.n	8002158 <esp_event+0x80>
  {
    pArray[i] = pToken;
 8002128:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	33a0      	adds	r3, #160	@ 0xa0
 8002130:	443b      	add	r3, r7
 8002132:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002136:	f843 2c58 	str.w	r2, [r3, #-88]
    if(++i >= ARR_CNT)
 800213a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800213e:	3301      	adds	r3, #1
 8002140:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002144:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002148:	2b13      	cmp	r3, #19
 800214a:	dc0a      	bgt.n	8002162 <esp_event+0x8a>
      break;
    pToken = strtok(NULL,"[@]");
 800214c:	496d      	ldr	r1, [pc, #436]	@ (8002304 <esp_event+0x22c>)
 800214e:	2000      	movs	r0, #0
 8002150:	f005 f958 	bl	8007404 <strtok>
 8002154:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
  while(pToken != NULL)
 8002158:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1e3      	bne.n	8002128 <esp_event+0x50>
 8002160:	e000      	b.n	8002164 <esp_event+0x8c>
      break;
 8002162:	bf00      	nop
  }

  if(!strcmp(pArray[1], "ALLSTOP"))
 8002164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002166:	4968      	ldr	r1, [pc, #416]	@ (8002308 <esp_event+0x230>)
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f839 	bl	80001e0 <strcmp>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10e      	bne.n	8002192 <esp_event+0xba>
  {
	  if(!strcmp(pArray[2], "ON"))
 8002174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002176:	4965      	ldr	r1, [pc, #404]	@ (800230c <esp_event+0x234>)
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe f831 	bl	80001e0 <strcmp>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80ae 	beq.w	80022e2 <esp_event+0x20a>
	  {
		  //모든 장치 정지 명령 내리기(모든 플래그 True로)
	  }
	  else if(!strcmp(pArray[2], "OFF"))
 8002186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002188:	4961      	ldr	r1, [pc, #388]	@ (8002310 <esp_event+0x238>)
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f828 	bl	80001e0 <strcmp>
 8002190:	e0a7      	b.n	80022e2 <esp_event+0x20a>
	  {
		  //모든 장치 정지 명령 취소(모든 플래그 false로)
	  }
  }
  else if(!strcmp(pArray[1], "STATE"))
 8002192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002194:	495f      	ldr	r1, [pc, #380]	@ (8002314 <esp_event+0x23c>)
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe f822 	bl	80001e0 <strcmp>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d11d      	bne.n	80021de <esp_event+0x106>
  {
	  //현재 매장의 상태 전송하기
	 sprintf(sendBuf, "[%s]%s@%s@%d@%d@%d@%d@%d\n", pArray[0], pArray[1], temp, humi, ledState, lockState, customerCount, fanSpeed);
 80021a2:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 80021a4:	6cfe      	ldr	r6, [r7, #76]	@ 0x4c
 80021a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002318 <esp_event+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a5c      	ldr	r2, [pc, #368]	@ (800231c <esp_event+0x244>)
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	495c      	ldr	r1, [pc, #368]	@ (8002320 <esp_event+0x248>)
 80021b0:	7809      	ldrb	r1, [r1, #0]
 80021b2:	6039      	str	r1, [r7, #0]
 80021b4:	495b      	ldr	r1, [pc, #364]	@ (8002324 <esp_event+0x24c>)
 80021b6:	6809      	ldr	r1, [r1, #0]
 80021b8:	485b      	ldr	r0, [pc, #364]	@ (8002328 <esp_event+0x250>)
 80021ba:	6800      	ldr	r0, [r0, #0]
 80021bc:	f107 0408 	add.w	r4, r7, #8
 80021c0:	9005      	str	r0, [sp, #20]
 80021c2:	9104      	str	r1, [sp, #16]
 80021c4:	6839      	ldr	r1, [r7, #0]
 80021c6:	9103      	str	r1, [sp, #12]
 80021c8:	9202      	str	r2, [sp, #8]
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	4b57      	ldr	r3, [pc, #348]	@ (800232c <esp_event+0x254>)
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	4633      	mov	r3, r6
 80021d2:	462a      	mov	r2, r5
 80021d4:	4956      	ldr	r1, [pc, #344]	@ (8002330 <esp_event+0x258>)
 80021d6:	4620      	mov	r0, r4
 80021d8:	f004 fff2 	bl	80071c0 <siprintf>
 80021dc:	e081      	b.n	80022e2 <esp_event+0x20a>
  }
  else if(!strcmp(pArray[1], "FAN"))	//팬 회전수 0~1000
 80021de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021e0:	4954      	ldr	r1, [pc, #336]	@ (8002334 <esp_event+0x25c>)
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fd fffc 	bl	80001e0 <strcmp>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d117      	bne.n	800221e <esp_event+0x146>
  {
	  fanSpeed = atoi(pArray[2]);
 80021ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021f0:	4618      	mov	r0, r3
 80021f2:	f004 f9cd 	bl	8006590 <atoi>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002328 <esp_event+0x250>)
 80021fa:	6013      	str	r3, [r2, #0]
	  fanControl(fanSpeed);
 80021fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002328 <esp_event+0x250>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f000 f8e7 	bl	80023d4 <fanControl>
	  sprintf(sendBuf, "[%s]%s@%d\n", pArray[0], pArray[1], fanSpeed);
 8002206:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002208:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800220a:	4b47      	ldr	r3, [pc, #284]	@ (8002328 <esp_event+0x250>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f107 0008 	add.w	r0, r7, #8
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	460b      	mov	r3, r1
 8002216:	4948      	ldr	r1, [pc, #288]	@ (8002338 <esp_event+0x260>)
 8002218:	f004 ffd2 	bl	80071c0 <siprintf>
 800221c:	e061      	b.n	80022e2 <esp_event+0x20a>
  }
  else if(!strcmp(pArray[1], "DHTSTATE"))	//온습도 보내기
 800221e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002220:	4946      	ldr	r1, [pc, #280]	@ (800233c <esp_event+0x264>)
 8002222:	4618      	mov	r0, r3
 8002224:	f7fd ffdc 	bl	80001e0 <strcmp>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10d      	bne.n	800224a <esp_event+0x172>
  {
	  sprintf(sendBuf, "[%s]%s@%s@%d\n", pArray[0], pArray[1], temp, humi);
 800222e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002230:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002232:	4b39      	ldr	r3, [pc, #228]	@ (8002318 <esp_event+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f107 0008 	add.w	r0, r7, #8
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	4b3b      	ldr	r3, [pc, #236]	@ (800232c <esp_event+0x254>)
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	460b      	mov	r3, r1
 8002242:	493f      	ldr	r1, [pc, #252]	@ (8002340 <esp_event+0x268>)
 8002244:	f004 ffbc 	bl	80071c0 <siprintf>
 8002248:	e04b      	b.n	80022e2 <esp_event+0x20a>
  }
  else if(!strcmp(pArray[1], "LED"))	//[매장명]LED@pArray[2]or[State]@
 800224a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800224c:	493d      	ldr	r1, [pc, #244]	@ (8002344 <esp_event+0x26c>)
 800224e:	4618      	mov	r0, r3
 8002250:	f7fd ffc6 	bl	80001e0 <strcmp>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d12e      	bne.n	80022b8 <esp_event+0x1e0>
  {
	  if(!strcmp(pArray[2], "STATE"))
 800225a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800225c:	492d      	ldr	r1, [pc, #180]	@ (8002314 <esp_event+0x23c>)
 800225e:	4618      	mov	r0, r3
 8002260:	f7fd ffbe 	bl	80001e0 <strcmp>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10e      	bne.n	8002288 <esp_event+0x1b0>
	  {
		  sprintf(sendBuf, "[%s]%s@%s@%d\n", pArray[0], pArray[1], pArray[2], ledState);
 800226a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800226c:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 800226e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002270:	4a2a      	ldr	r2, [pc, #168]	@ (800231c <esp_event+0x244>)
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	f107 0008 	add.w	r0, r7, #8
 8002278:	9201      	str	r2, [sp, #4]
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	4623      	mov	r3, r4
 800227e:	460a      	mov	r2, r1
 8002280:	492f      	ldr	r1, [pc, #188]	@ (8002340 <esp_event+0x268>)
 8002282:	f004 ff9d 	bl	80071c0 <siprintf>
 8002286:	e02c      	b.n	80022e2 <esp_event+0x20a>
	  }
	  else
	  {
		  ledControl(atoi(pArray[2]));
 8002288:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800228a:	4618      	mov	r0, r3
 800228c:	f004 f980 	bl	8006590 <atoi>
 8002290:	4603      	mov	r3, r0
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f8b8 	bl	8002408 <ledControl>
		  sprintf(sendBuf, "[%s]%s@%d\n", pArray[0], pArray[1], atoi(pArray[2]));
 8002298:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 800229a:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 800229c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800229e:	4618      	mov	r0, r3
 80022a0:	f004 f976 	bl	8006590 <atoi>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f107 0008 	add.w	r0, r7, #8
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	462b      	mov	r3, r5
 80022ae:	4622      	mov	r2, r4
 80022b0:	4921      	ldr	r1, [pc, #132]	@ (8002338 <esp_event+0x260>)
 80022b2:	f004 ff85 	bl	80071c0 <siprintf>
 80022b6:	e014      	b.n	80022e2 <esp_event+0x20a>
//	  {
//		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500-1);
//		  sprintf(sendBuf, "[%s]%s@%s\n", pArray[0], pArray[1], pArray[2]);
//	  }
//  }
  else if(!strncmp(pArray[1]," New conn",8))
 80022b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022ba:	2208      	movs	r2, #8
 80022bc:	4922      	ldr	r1, [pc, #136]	@ (8002348 <esp_event+0x270>)
 80022be:	4618      	mov	r0, r3
 80022c0:	f005 f88d 	bl	80073de <strncmp>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d011      	beq.n	80022ee <esp_event+0x216>
  {
//	   printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
     return;
  }
  else if(!strncmp(pArray[1]," Already log",8))
 80022ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022cc:	2208      	movs	r2, #8
 80022ce:	491f      	ldr	r1, [pc, #124]	@ (800234c <esp_event+0x274>)
 80022d0:	4618      	mov	r0, r3
 80022d2:	f005 f884 	bl	80073de <strncmp>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10a      	bne.n	80022f2 <esp_event+0x21a>
  {
// 	    printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
	  esp_client_conn();
 80022dc:	f7ff f898 	bl	8001410 <esp_client_conn>
      return;
 80022e0:	e008      	b.n	80022f4 <esp_event+0x21c>
  }
  else
      return;

  esp_send_data(sendBuf);
 80022e2:	f107 0308 	add.w	r3, r7, #8
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff f9ba 	bl	8001660 <esp_send_data>
 80022ec:	e002      	b.n	80022f4 <esp_event+0x21c>
     return;
 80022ee:	bf00      	nop
 80022f0:	e000      	b.n	80022f4 <esp_event+0x21c>
      return;
 80022f2:	bf00      	nop
//  printf("Debug send : %s\r\n",sendBuf);
}
 80022f4:	37a4      	adds	r7, #164	@ 0xa4
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000c60 	.word	0x20000c60
 8002300:	08009888 	.word	0x08009888
 8002304:	0800989c 	.word	0x0800989c
 8002308:	080098a0 	.word	0x080098a0
 800230c:	080098a8 	.word	0x080098a8
 8002310:	080098ac 	.word	0x080098ac
 8002314:	080098b0 	.word	0x080098b0
 8002318:	20000c40 	.word	0x20000c40
 800231c:	20000c54 	.word	0x20000c54
 8002320:	20000c5c 	.word	0x20000c5c
 8002324:	20000c50 	.word	0x20000c50
 8002328:	20000c58 	.word	0x20000c58
 800232c:	20000c44 	.word	0x20000c44
 8002330:	080098b8 	.word	0x080098b8
 8002334:	080098d4 	.word	0x080098d4
 8002338:	080098d8 	.word	0x080098d8
 800233c:	080098e4 	.word	0x080098e4
 8002340:	080098f0 	.word	0x080098f0
 8002344:	08009900 	.word	0x08009900
 8002348:	08009904 	.word	0x08009904
 800234c:	08009910 	.word	0x08009910

08002350 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		//1ms 마다 호출
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 8002358:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	3301      	adds	r3, #1
 800235e:	4a0c      	ldr	r2, [pc, #48]	@ (8002390 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002360:	6013      	str	r3, [r2, #0]
	if(tim3Cnt >= 1000) //1ms * 1000 = 1Sec
 8002362:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800236a:	db0a      	blt.n	8002382 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 800236c:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 8002372:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	3301      	adds	r3, #1
 8002378:	4a07      	ldr	r2, [pc, #28]	@ (8002398 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800237a:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 800237c:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
	}
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000cac 	.word	0x20000cac
 8002394:	20000000 	.word	0x20000000
 8002398:	20000c3c 	.word	0x20000c3c

0800239c <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	69b9      	ldr	r1, [r7, #24]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	1a8a      	subs	r2, r1, r2
 80023b6:	fb03 f202 	mul.w	r2, r3, r2
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	1acb      	subs	r3, r1, r3
 80023c0:	fb92 f2f3 	sdiv	r2, r2, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4413      	add	r3, r2
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <fanControl>:

void fanControl(int fanSpeed)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	if (!fanFlag)	//플래그들은 0일 때만 동작을 의미함.
 80023dc:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <fanControl+0x2c>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	f083 0301 	eor.w	r3, r3, #1
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <fanControl+0x1e>
	{
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1, fanSpeed);
 80023ea:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <fanControl+0x30>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000c5d 	.word	0x20000c5d
 8002404:	20000b64 	.word	0x20000b64

08002408 <ledControl>:

void ledControl(int bright)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af02      	add	r7, sp, #8
 800240e:	6078      	str	r0, [r7, #4]
	ledState = bright;	//전역변수에 저장
 8002410:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <ledControl+0x34>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6013      	str	r3, [r2, #0]
	int realLedState = map(bright, 0, 100, 0, 1000);	//써지는 실제값
 8002416:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	2300      	movs	r3, #0
 800241e:	2264      	movs	r2, #100	@ 0x64
 8002420:	2100      	movs	r1, #0
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ffba 	bl	800239c <map>
 8002428:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1, realLedState);
 800242a:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <ledControl+0x38>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000c54 	.word	0x20000c54
 8002440:	20000a8c 	.word	0x20000a8c

08002444 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	static int channel = 0;
	if (channel == 0)
 800244c:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <HAL_ADC_ConvCpltCallback+0x5c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10d      	bne.n	8002470 <HAL_ADC_ConvCpltCallback+0x2c>
	{
		ADC1ConvertValue[channel] = HAL_ADC_GetValue(hadc);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 fdbc 	bl	8002fd2 <HAL_ADC_GetValue>
 800245a:	4602      	mov	r2, r0
 800245c:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <HAL_ADC_ConvCpltCallback+0x5c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	b291      	uxth	r1, r2
 8002462:	4a10      	ldr	r2, [pc, #64]	@ (80024a4 <HAL_ADC_ConvCpltCallback+0x60>)
 8002464:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		channel = 1;
 8002468:	4b0d      	ldr	r3, [pc, #52]	@ (80024a0 <HAL_ADC_ConvCpltCallback+0x5c>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]
		channel = 0;
		adcFlag = 1;
	}


}
 800246e:	e013      	b.n	8002498 <HAL_ADC_ConvCpltCallback+0x54>
	else if(channel == 1)
 8002470:	4b0b      	ldr	r3, [pc, #44]	@ (80024a0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d10f      	bne.n	8002498 <HAL_ADC_ConvCpltCallback+0x54>
		ADC1ConvertValue[channel]= HAL_ADC_GetValue(hadc);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fdaa 	bl	8002fd2 <HAL_ADC_GetValue>
 800247e:	4602      	mov	r2, r0
 8002480:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	b291      	uxth	r1, r2
 8002486:	4a07      	ldr	r2, [pc, #28]	@ (80024a4 <HAL_ADC_ConvCpltCallback+0x60>)
 8002488:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		channel = 0;
 800248c:	4b04      	ldr	r3, [pc, #16]	@ (80024a0 <HAL_ADC_ConvCpltCallback+0x5c>)
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
		adcFlag = 1;
 8002492:	4b05      	ldr	r3, [pc, #20]	@ (80024a8 <HAL_ADC_ConvCpltCallback+0x64>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000cb0 	.word	0x20000cb0
 80024a4:	20000ca0 	.word	0x20000ca0
 80024a8:	20000ca4 	.word	0x20000ca4

080024ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024b0:	b672      	cpsid	i
}
 80024b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024b4:	bf00      	nop
 80024b6:	e7fd      	b.n	80024b4 <Error_Handler+0x8>

080024b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <HAL_MspInit+0x4c>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002504 <HAL_MspInit+0x4c>)
 80024c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002504 <HAL_MspInit+0x4c>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	4b09      	ldr	r3, [pc, #36]	@ (8002504 <HAL_MspInit+0x4c>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	4a08      	ldr	r2, [pc, #32]	@ (8002504 <HAL_MspInit+0x4c>)
 80024e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ea:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <HAL_MspInit+0x4c>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024f6:	2007      	movs	r0, #7
 80024f8:	f001 f894 	bl	8003624 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40023800 	.word	0x40023800

08002508 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	@ 0x28
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1b      	ldr	r2, [pc, #108]	@ (8002594 <HAL_ADC_MspInit+0x8c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d12f      	bne.n	800258a <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	4b1a      	ldr	r3, [pc, #104]	@ (8002598 <HAL_ADC_MspInit+0x90>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	4a19      	ldr	r2, [pc, #100]	@ (8002598 <HAL_ADC_MspInit+0x90>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002538:	6453      	str	r3, [r2, #68]	@ 0x44
 800253a:	4b17      	ldr	r3, [pc, #92]	@ (8002598 <HAL_ADC_MspInit+0x90>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4b13      	ldr	r3, [pc, #76]	@ (8002598 <HAL_ADC_MspInit+0x90>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	4a12      	ldr	r2, [pc, #72]	@ (8002598 <HAL_ADC_MspInit+0x90>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6313      	str	r3, [r2, #48]	@ 0x30
 8002556:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <HAL_ADC_MspInit+0x90>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002562:	2303      	movs	r3, #3
 8002564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002566:	2303      	movs	r3, #3
 8002568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256e:	f107 0314 	add.w	r3, r7, #20
 8002572:	4619      	mov	r1, r3
 8002574:	4809      	ldr	r0, [pc, #36]	@ (800259c <HAL_ADC_MspInit+0x94>)
 8002576:	f001 f929 	bl	80037cc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	2012      	movs	r0, #18
 8002580:	f001 f85b 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002584:	2012      	movs	r0, #18
 8002586:	f001 f874 	bl	8003672 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800258a:	bf00      	nop
 800258c:	3728      	adds	r7, #40	@ 0x28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40012000 	.word	0x40012000
 8002598:	40023800 	.word	0x40023800
 800259c:	40020000 	.word	0x40020000

080025a0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a34      	ldr	r2, [pc, #208]	@ (8002680 <HAL_TIM_Base_MspInit+0xe0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d10e      	bne.n	80025d0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	4b33      	ldr	r3, [pc, #204]	@ (8002684 <HAL_TIM_Base_MspInit+0xe4>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ba:	4a32      	ldr	r2, [pc, #200]	@ (8002684 <HAL_TIM_Base_MspInit+0xe4>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025c2:	4b30      	ldr	r3, [pc, #192]	@ (8002684 <HAL_TIM_Base_MspInit+0xe4>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80025ce:	e052      	b.n	8002676 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025d8:	d116      	bne.n	8002608 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	4b29      	ldr	r3, [pc, #164]	@ (8002684 <HAL_TIM_Base_MspInit+0xe4>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	4a28      	ldr	r2, [pc, #160]	@ (8002684 <HAL_TIM_Base_MspInit+0xe4>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ea:	4b26      	ldr	r3, [pc, #152]	@ (8002684 <HAL_TIM_Base_MspInit+0xe4>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	201c      	movs	r0, #28
 80025fc:	f001 f81d 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002600:	201c      	movs	r0, #28
 8002602:	f001 f836 	bl	8003672 <HAL_NVIC_EnableIRQ>
}
 8002606:	e036      	b.n	8002676 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a1e      	ldr	r2, [pc, #120]	@ (8002688 <HAL_TIM_Base_MspInit+0xe8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d116      	bne.n	8002640 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	4b1b      	ldr	r3, [pc, #108]	@ (8002684 <HAL_TIM_Base_MspInit+0xe4>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	4a1a      	ldr	r2, [pc, #104]	@ (8002684 <HAL_TIM_Base_MspInit+0xe4>)
 800261c:	f043 0302 	orr.w	r3, r3, #2
 8002620:	6413      	str	r3, [r2, #64]	@ 0x40
 8002622:	4b18      	ldr	r3, [pc, #96]	@ (8002684 <HAL_TIM_Base_MspInit+0xe4>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	2100      	movs	r1, #0
 8002632:	201d      	movs	r0, #29
 8002634:	f001 f801 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002638:	201d      	movs	r0, #29
 800263a:	f001 f81a 	bl	8003672 <HAL_NVIC_EnableIRQ>
}
 800263e:	e01a      	b.n	8002676 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a11      	ldr	r2, [pc, #68]	@ (800268c <HAL_TIM_Base_MspInit+0xec>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d115      	bne.n	8002676 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	4b0d      	ldr	r3, [pc, #52]	@ (8002684 <HAL_TIM_Base_MspInit+0xe4>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	4a0c      	ldr	r2, [pc, #48]	@ (8002684 <HAL_TIM_Base_MspInit+0xe4>)
 8002654:	f043 0304 	orr.w	r3, r3, #4
 8002658:	6413      	str	r3, [r2, #64]	@ 0x40
 800265a:	4b0a      	ldr	r3, [pc, #40]	@ (8002684 <HAL_TIM_Base_MspInit+0xe4>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	201e      	movs	r0, #30
 800266c:	f000 ffe5 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002670:	201e      	movs	r0, #30
 8002672:	f000 fffe 	bl	8003672 <HAL_NVIC_EnableIRQ>
}
 8002676:	bf00      	nop
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40010000 	.word	0x40010000
 8002684:	40023800 	.word	0x40023800
 8002688:	40000400 	.word	0x40000400
 800268c:	40000800 	.word	0x40000800

08002690 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08c      	sub	sp, #48	@ 0x30
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 031c 	add.w	r3, r7, #28
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a49      	ldr	r2, [pc, #292]	@ (80027d4 <HAL_TIM_MspPostInit+0x144>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d11f      	bne.n	80026f2 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	61bb      	str	r3, [r7, #24]
 80026b6:	4b48      	ldr	r3, [pc, #288]	@ (80027d8 <HAL_TIM_MspPostInit+0x148>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	4a47      	ldr	r2, [pc, #284]	@ (80027d8 <HAL_TIM_MspPostInit+0x148>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c2:	4b45      	ldr	r3, [pc, #276]	@ (80027d8 <HAL_TIM_MspPostInit+0x148>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	61bb      	str	r3, [r7, #24]
 80026cc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d4:	2302      	movs	r3, #2
 80026d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026dc:	2300      	movs	r3, #0
 80026de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026e0:	2301      	movs	r3, #1
 80026e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e4:	f107 031c 	add.w	r3, r7, #28
 80026e8:	4619      	mov	r1, r3
 80026ea:	483c      	ldr	r0, [pc, #240]	@ (80027dc <HAL_TIM_MspPostInit+0x14c>)
 80026ec:	f001 f86e 	bl	80037cc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80026f0:	e06b      	b.n	80027ca <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026fa:	d11f      	bne.n	800273c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	4b35      	ldr	r3, [pc, #212]	@ (80027d8 <HAL_TIM_MspPostInit+0x148>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	4a34      	ldr	r2, [pc, #208]	@ (80027d8 <HAL_TIM_MspPostInit+0x148>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6313      	str	r3, [r2, #48]	@ 0x30
 800270c:	4b32      	ldr	r3, [pc, #200]	@ (80027d8 <HAL_TIM_MspPostInit+0x148>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SERVO_Pin;
 8002718:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800271c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800272a:	2301      	movs	r3, #1
 800272c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 800272e:	f107 031c 	add.w	r3, r7, #28
 8002732:	4619      	mov	r1, r3
 8002734:	4829      	ldr	r0, [pc, #164]	@ (80027dc <HAL_TIM_MspPostInit+0x14c>)
 8002736:	f001 f849 	bl	80037cc <HAL_GPIO_Init>
}
 800273a:	e046      	b.n	80027ca <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a27      	ldr	r2, [pc, #156]	@ (80027e0 <HAL_TIM_MspPostInit+0x150>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d11e      	bne.n	8002784 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	4b23      	ldr	r3, [pc, #140]	@ (80027d8 <HAL_TIM_MspPostInit+0x148>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	4a22      	ldr	r2, [pc, #136]	@ (80027d8 <HAL_TIM_MspPostInit+0x148>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6313      	str	r3, [r2, #48]	@ 0x30
 8002756:	4b20      	ldr	r3, [pc, #128]	@ (80027d8 <HAL_TIM_MspPostInit+0x148>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002762:	2340      	movs	r3, #64	@ 0x40
 8002764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002766:	2302      	movs	r3, #2
 8002768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276e:	2300      	movs	r3, #0
 8002770:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002772:	2302      	movs	r3, #2
 8002774:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002776:	f107 031c 	add.w	r3, r7, #28
 800277a:	4619      	mov	r1, r3
 800277c:	4817      	ldr	r0, [pc, #92]	@ (80027dc <HAL_TIM_MspPostInit+0x14c>)
 800277e:	f001 f825 	bl	80037cc <HAL_GPIO_Init>
}
 8002782:	e022      	b.n	80027ca <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a16      	ldr	r2, [pc, #88]	@ (80027e4 <HAL_TIM_MspPostInit+0x154>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d11d      	bne.n	80027ca <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	4b11      	ldr	r3, [pc, #68]	@ (80027d8 <HAL_TIM_MspPostInit+0x148>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	4a10      	ldr	r2, [pc, #64]	@ (80027d8 <HAL_TIM_MspPostInit+0x148>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	6313      	str	r3, [r2, #48]	@ 0x30
 800279e:	4b0e      	ldr	r3, [pc, #56]	@ (80027d8 <HAL_TIM_MspPostInit+0x148>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_fanMotor_Pin;
 80027aa:	2340      	movs	r3, #64	@ 0x40
 80027ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ae:	2302      	movs	r3, #2
 80027b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	2300      	movs	r3, #0
 80027b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027ba:	2302      	movs	r3, #2
 80027bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM4_fanMotor_GPIO_Port, &GPIO_InitStruct);
 80027be:	f107 031c 	add.w	r3, r7, #28
 80027c2:	4619      	mov	r1, r3
 80027c4:	4808      	ldr	r0, [pc, #32]	@ (80027e8 <HAL_TIM_MspPostInit+0x158>)
 80027c6:	f001 f801 	bl	80037cc <HAL_GPIO_Init>
}
 80027ca:	bf00      	nop
 80027cc:	3730      	adds	r7, #48	@ 0x30
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40010000 	.word	0x40010000
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40020000 	.word	0x40020000
 80027e0:	40000400 	.word	0x40000400
 80027e4:	40000800 	.word	0x40000800
 80027e8:	40020400 	.word	0x40020400

080027ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08c      	sub	sp, #48	@ 0x30
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f4:	f107 031c 	add.w	r3, r7, #28
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a3a      	ldr	r2, [pc, #232]	@ (80028f4 <HAL_UART_MspInit+0x108>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d134      	bne.n	8002878 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	4b39      	ldr	r3, [pc, #228]	@ (80028f8 <HAL_UART_MspInit+0x10c>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	4a38      	ldr	r2, [pc, #224]	@ (80028f8 <HAL_UART_MspInit+0x10c>)
 8002818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800281c:	6413      	str	r3, [r2, #64]	@ 0x40
 800281e:	4b36      	ldr	r3, [pc, #216]	@ (80028f8 <HAL_UART_MspInit+0x10c>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	4b32      	ldr	r3, [pc, #200]	@ (80028f8 <HAL_UART_MspInit+0x10c>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	4a31      	ldr	r2, [pc, #196]	@ (80028f8 <HAL_UART_MspInit+0x10c>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6313      	str	r3, [r2, #48]	@ 0x30
 800283a:	4b2f      	ldr	r3, [pc, #188]	@ (80028f8 <HAL_UART_MspInit+0x10c>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002846:	230c      	movs	r3, #12
 8002848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284a:	2302      	movs	r3, #2
 800284c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002856:	2307      	movs	r3, #7
 8002858:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285a:	f107 031c 	add.w	r3, r7, #28
 800285e:	4619      	mov	r1, r3
 8002860:	4826      	ldr	r0, [pc, #152]	@ (80028fc <HAL_UART_MspInit+0x110>)
 8002862:	f000 ffb3 	bl	80037cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2100      	movs	r1, #0
 800286a:	2026      	movs	r0, #38	@ 0x26
 800286c:	f000 fee5 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002870:	2026      	movs	r0, #38	@ 0x26
 8002872:	f000 fefe 	bl	8003672 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002876:	e038      	b.n	80028ea <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a20      	ldr	r2, [pc, #128]	@ (8002900 <HAL_UART_MspInit+0x114>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d133      	bne.n	80028ea <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	4b1c      	ldr	r3, [pc, #112]	@ (80028f8 <HAL_UART_MspInit+0x10c>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288a:	4a1b      	ldr	r2, [pc, #108]	@ (80028f8 <HAL_UART_MspInit+0x10c>)
 800288c:	f043 0320 	orr.w	r3, r3, #32
 8002890:	6453      	str	r3, [r2, #68]	@ 0x44
 8002892:	4b19      	ldr	r3, [pc, #100]	@ (80028f8 <HAL_UART_MspInit+0x10c>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	4b15      	ldr	r3, [pc, #84]	@ (80028f8 <HAL_UART_MspInit+0x10c>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	4a14      	ldr	r2, [pc, #80]	@ (80028f8 <HAL_UART_MspInit+0x10c>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ae:	4b12      	ldr	r3, [pc, #72]	@ (80028f8 <HAL_UART_MspInit+0x10c>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_bluetooh_Pin|RX_bluetooh_Pin;
 80028ba:	23c0      	movs	r3, #192	@ 0xc0
 80028bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c6:	2303      	movs	r3, #3
 80028c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028ca:	2308      	movs	r3, #8
 80028cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ce:	f107 031c 	add.w	r3, r7, #28
 80028d2:	4619      	mov	r1, r3
 80028d4:	480b      	ldr	r0, [pc, #44]	@ (8002904 <HAL_UART_MspInit+0x118>)
 80028d6:	f000 ff79 	bl	80037cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	2100      	movs	r1, #0
 80028de:	2047      	movs	r0, #71	@ 0x47
 80028e0:	f000 feab 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80028e4:	2047      	movs	r0, #71	@ 0x47
 80028e6:	f000 fec4 	bl	8003672 <HAL_NVIC_EnableIRQ>
}
 80028ea:	bf00      	nop
 80028ec:	3730      	adds	r7, #48	@ 0x30
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40004400 	.word	0x40004400
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40020000 	.word	0x40020000
 8002900:	40011400 	.word	0x40011400
 8002904:	40020800 	.word	0x40020800

08002908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800290c:	bf00      	nop
 800290e:	e7fd      	b.n	800290c <NMI_Handler+0x4>

08002910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002914:	bf00      	nop
 8002916:	e7fd      	b.n	8002914 <HardFault_Handler+0x4>

08002918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800291c:	bf00      	nop
 800291e:	e7fd      	b.n	800291c <MemManage_Handler+0x4>

08002920 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002924:	bf00      	nop
 8002926:	e7fd      	b.n	8002924 <BusFault_Handler+0x4>

08002928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800292c:	bf00      	nop
 800292e:	e7fd      	b.n	800292c <UsageFault_Handler+0x4>

08002930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800295e:	f000 f9a1 	bl	8002ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}

08002966 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC0_EXTI0_BUTTON_Pin);
 800296a:	2001      	movs	r0, #1
 800296c:	f001 f8e4 	bl	8003b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}

08002974 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002978:	4802      	ldr	r0, [pc, #8]	@ (8002984 <ADC_IRQHandler+0x10>)
 800297a:	f000 fa1a 	bl	8002db2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000a44 	.word	0x20000a44

08002988 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800298c:	4802      	ldr	r0, [pc, #8]	@ (8002998 <TIM2_IRQHandler+0x10>)
 800298e:	f001 ff4b 	bl	8004828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000ad4 	.word	0x20000ad4

0800299c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029a0:	4802      	ldr	r0, [pc, #8]	@ (80029ac <TIM3_IRQHandler+0x10>)
 80029a2:	f001 ff41 	bl	8004828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000b1c 	.word	0x20000b1c

080029b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029b4:	4802      	ldr	r0, [pc, #8]	@ (80029c0 <TIM4_IRQHandler+0x10>)
 80029b6:	f001 ff37 	bl	8004828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000b64 	.word	0x20000b64

080029c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029c8:	4802      	ldr	r0, [pc, #8]	@ (80029d4 <USART2_IRQHandler+0x10>)
 80029ca:	f002 fe75 	bl	80056b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000bac 	.word	0x20000bac

080029d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80029dc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80029e0:	f001 f8aa 	bl	8003b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029e4:	bf00      	nop
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80029ec:	4802      	ldr	r0, [pc, #8]	@ (80029f8 <USART6_IRQHandler+0x10>)
 80029ee:	f002 fe63 	bl	80056b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000bf4 	.word	0x20000bf4

080029fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return 1;
 8002a00:	2301      	movs	r3, #1
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <_kill>:

int _kill(int pid, int sig)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a16:	f004 fdb1 	bl	800757c <__errno>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2216      	movs	r2, #22
 8002a1e:	601a      	str	r2, [r3, #0]
  return -1;
 8002a20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <_exit>:

void _exit (int status)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a34:	f04f 31ff 	mov.w	r1, #4294967295
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ffe7 	bl	8002a0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a3e:	bf00      	nop
 8002a40:	e7fd      	b.n	8002a3e <_exit+0x12>

08002a42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e00a      	b.n	8002a6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a54:	f3af 8000 	nop.w
 8002a58:	4601      	mov	r1, r0
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	60ba      	str	r2, [r7, #8]
 8002a60:	b2ca      	uxtb	r2, r1
 8002a62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	3301      	adds	r3, #1
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	dbf0      	blt.n	8002a54 <_read+0x12>
  }

  return len;
 8002a72:	687b      	ldr	r3, [r7, #4]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	e009      	b.n	8002aa2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	60ba      	str	r2, [r7, #8]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fe24 	bl	80016e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	dbf1      	blt.n	8002a8e <_write+0x12>
  }
  return len;
 8002aaa:	687b      	ldr	r3, [r7, #4]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <_close>:

int _close(int file)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002adc:	605a      	str	r2, [r3, #4]
  return 0;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <_isatty>:

int _isatty(int file)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002af4:	2301      	movs	r3, #1
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b24:	4a14      	ldr	r2, [pc, #80]	@ (8002b78 <_sbrk+0x5c>)
 8002b26:	4b15      	ldr	r3, [pc, #84]	@ (8002b7c <_sbrk+0x60>)
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b30:	4b13      	ldr	r3, [pc, #76]	@ (8002b80 <_sbrk+0x64>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b38:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <_sbrk+0x64>)
 8002b3a:	4a12      	ldr	r2, [pc, #72]	@ (8002b84 <_sbrk+0x68>)
 8002b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b3e:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <_sbrk+0x64>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d207      	bcs.n	8002b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b4c:	f004 fd16 	bl	800757c <__errno>
 8002b50:	4603      	mov	r3, r0
 8002b52:	220c      	movs	r2, #12
 8002b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5a:	e009      	b.n	8002b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b5c:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <_sbrk+0x64>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b62:	4b07      	ldr	r3, [pc, #28]	@ (8002b80 <_sbrk+0x64>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	4a05      	ldr	r2, [pc, #20]	@ (8002b80 <_sbrk+0x64>)
 8002b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	20020000 	.word	0x20020000
 8002b7c:	00000400 	.word	0x00000400
 8002b80:	20000cb4 	.word	0x20000cb4
 8002b84:	20000e08 	.word	0x20000e08

08002b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <SystemInit+0x20>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b92:	4a05      	ldr	r2, [pc, #20]	@ (8002ba8 <SystemInit+0x20>)
 8002b94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8002bac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002be4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bb0:	f7ff ffea 	bl	8002b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bb4:	480c      	ldr	r0, [pc, #48]	@ (8002be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bb6:	490d      	ldr	r1, [pc, #52]	@ (8002bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bbc:	e002      	b.n	8002bc4 <LoopCopyDataInit>

08002bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bc2:	3304      	adds	r3, #4

08002bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc8:	d3f9      	bcc.n	8002bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bca:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bcc:	4c0a      	ldr	r4, [pc, #40]	@ (8002bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd0:	e001      	b.n	8002bd6 <LoopFillZerobss>

08002bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd4:	3204      	adds	r2, #4

08002bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd8:	d3fb      	bcc.n	8002bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bda:	f004 fcd5 	bl	8007588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bde:	f7fe fd99 	bl	8001714 <main>
  bx  lr    
 8002be2:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8002be4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bec:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002bf0:	08009d10 	.word	0x08009d10
  ldr r2, =_sbss
 8002bf4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002bf8:	20000e08 	.word	0x20000e08

08002bfc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bfc:	e7fe      	b.n	8002bfc <DMA1_Stream0_IRQHandler>
	...

08002c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c04:	4b0e      	ldr	r3, [pc, #56]	@ (8002c40 <HAL_Init+0x40>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0d      	ldr	r2, [pc, #52]	@ (8002c40 <HAL_Init+0x40>)
 8002c0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c10:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <HAL_Init+0x40>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0a      	ldr	r2, [pc, #40]	@ (8002c40 <HAL_Init+0x40>)
 8002c16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c1c:	4b08      	ldr	r3, [pc, #32]	@ (8002c40 <HAL_Init+0x40>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a07      	ldr	r2, [pc, #28]	@ (8002c40 <HAL_Init+0x40>)
 8002c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c28:	2003      	movs	r0, #3
 8002c2a:	f000 fcfb 	bl	8003624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f000 f808 	bl	8002c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c34:	f7ff fc40 	bl	80024b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023c00 	.word	0x40023c00

08002c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c4c:	4b12      	ldr	r3, [pc, #72]	@ (8002c98 <HAL_InitTick+0x54>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	4b12      	ldr	r3, [pc, #72]	@ (8002c9c <HAL_InitTick+0x58>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	4619      	mov	r1, r3
 8002c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fd13 	bl	800368e <HAL_SYSTICK_Config>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e00e      	b.n	8002c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b0f      	cmp	r3, #15
 8002c76:	d80a      	bhi.n	8002c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c80:	f000 fcdb 	bl	800363a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c84:	4a06      	ldr	r2, [pc, #24]	@ (8002ca0 <HAL_InitTick+0x5c>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	e000      	b.n	8002c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000004 	.word	0x20000004
 8002c9c:	2000000c 	.word	0x2000000c
 8002ca0:	20000008 	.word	0x20000008

08002ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ca8:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <HAL_IncTick+0x20>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <HAL_IncTick+0x24>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4a04      	ldr	r2, [pc, #16]	@ (8002cc8 <HAL_IncTick+0x24>)
 8002cb6:	6013      	str	r3, [r2, #0]
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	2000000c 	.word	0x2000000c
 8002cc8:	20000cb8 	.word	0x20000cb8

08002ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return uwTick;
 8002cd0:	4b03      	ldr	r3, [pc, #12]	@ (8002ce0 <HAL_GetTick+0x14>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000cb8 	.word	0x20000cb8

08002ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cec:	f7ff ffee 	bl	8002ccc <HAL_GetTick>
 8002cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfc:	d005      	beq.n	8002d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002d28 <HAL_Delay+0x44>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4413      	add	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d0a:	bf00      	nop
 8002d0c:	f7ff ffde 	bl	8002ccc <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d8f7      	bhi.n	8002d0c <HAL_Delay+0x28>
  {
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	2000000c 	.word	0x2000000c

08002d2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e033      	b.n	8002daa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff fbdc 	bl	8002508 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d118      	bne.n	8002d9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d72:	f023 0302 	bic.w	r3, r3, #2
 8002d76:	f043 0202 	orr.w	r2, r3, #2
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fa7a 	bl	8003278 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	f023 0303 	bic.w	r3, r3, #3
 8002d92:	f043 0201 	orr.w	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d9a:	e001      	b.n	8002da0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d049      	beq.n	8002e7c <HAL_ADC_IRQHandler+0xca>
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d046      	beq.n	8002e7c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d105      	bne.n	8002e06 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d12b      	bne.n	8002e6c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d127      	bne.n	8002e6c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e22:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d006      	beq.n	8002e38 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d119      	bne.n	8002e6c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0220 	bic.w	r2, r2, #32
 8002e46:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d105      	bne.n	8002e6c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	f043 0201 	orr.w	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff fae9 	bl	8002444 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f06f 0212 	mvn.w	r2, #18
 8002e7a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e8a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d057      	beq.n	8002f42 <HAL_ADC_IRQHandler+0x190>
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d054      	beq.n	8002f42 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d105      	bne.n	8002eb0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d139      	bne.n	8002f32 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d006      	beq.n	8002eda <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d12b      	bne.n	8002f32 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d124      	bne.n	8002f32 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d11d      	bne.n	8002f32 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d119      	bne.n	8002f32 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f0c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	f043 0201 	orr.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fa9c 	bl	8003470 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 020c 	mvn.w	r2, #12
 8002f40:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f50:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d017      	beq.n	8002f88 <HAL_ADC_IRQHandler+0x1d6>
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d014      	beq.n	8002f88 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d10d      	bne.n	8002f88 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f837 	bl	8002fec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f06f 0201 	mvn.w	r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f96:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d015      	beq.n	8002fca <HAL_ADC_IRQHandler+0x218>
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d012      	beq.n	8002fca <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa8:	f043 0202 	orr.w	r2, r3, #2
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0220 	mvn.w	r2, #32
 8002fb8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f820 	bl	8003000 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0220 	mvn.w	r2, #32
 8002fc8:	601a      	str	r2, [r3, #0]
  }
}
 8002fca:	bf00      	nop
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x1c>
 800302c:	2302      	movs	r3, #2
 800302e:	e113      	b.n	8003258 <HAL_ADC_ConfigChannel+0x244>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b09      	cmp	r3, #9
 800303e:	d925      	bls.n	800308c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68d9      	ldr	r1, [r3, #12]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	b29b      	uxth	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	4613      	mov	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4413      	add	r3, r2
 8003054:	3b1e      	subs	r3, #30
 8003056:	2207      	movs	r2, #7
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43da      	mvns	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	400a      	ands	r2, r1
 8003064:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68d9      	ldr	r1, [r3, #12]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	b29b      	uxth	r3, r3
 8003076:	4618      	mov	r0, r3
 8003078:	4603      	mov	r3, r0
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4403      	add	r3, r0
 800307e:	3b1e      	subs	r3, #30
 8003080:	409a      	lsls	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	e022      	b.n	80030d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6919      	ldr	r1, [r3, #16]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	4613      	mov	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	2207      	movs	r2, #7
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43da      	mvns	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	400a      	ands	r2, r1
 80030ae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6919      	ldr	r1, [r3, #16]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	4618      	mov	r0, r3
 80030c2:	4603      	mov	r3, r0
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4403      	add	r3, r0
 80030c8:	409a      	lsls	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d824      	bhi.n	8003124 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	3b05      	subs	r3, #5
 80030ec:	221f      	movs	r2, #31
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43da      	mvns	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	400a      	ands	r2, r1
 80030fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	4618      	mov	r0, r3
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	3b05      	subs	r3, #5
 8003116:	fa00 f203 	lsl.w	r2, r0, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	635a      	str	r2, [r3, #52]	@ 0x34
 8003122:	e04c      	b.n	80031be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b0c      	cmp	r3, #12
 800312a:	d824      	bhi.n	8003176 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	3b23      	subs	r3, #35	@ 0x23
 800313e:	221f      	movs	r2, #31
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43da      	mvns	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	400a      	ands	r2, r1
 800314c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	b29b      	uxth	r3, r3
 800315a:	4618      	mov	r0, r3
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	3b23      	subs	r3, #35	@ 0x23
 8003168:	fa00 f203 	lsl.w	r2, r0, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	631a      	str	r2, [r3, #48]	@ 0x30
 8003174:	e023      	b.n	80031be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	3b41      	subs	r3, #65	@ 0x41
 8003188:	221f      	movs	r2, #31
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43da      	mvns	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	400a      	ands	r2, r1
 8003196:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	4618      	mov	r0, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	3b41      	subs	r3, #65	@ 0x41
 80031b2:	fa00 f203 	lsl.w	r2, r0, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031be:	4b29      	ldr	r3, [pc, #164]	@ (8003264 <HAL_ADC_ConfigChannel+0x250>)
 80031c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a28      	ldr	r2, [pc, #160]	@ (8003268 <HAL_ADC_ConfigChannel+0x254>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d10f      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x1d8>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b12      	cmp	r3, #18
 80031d2:	d10b      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003268 <HAL_ADC_ConfigChannel+0x254>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d12b      	bne.n	800324e <HAL_ADC_ConfigChannel+0x23a>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1c      	ldr	r2, [pc, #112]	@ (800326c <HAL_ADC_ConfigChannel+0x258>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d003      	beq.n	8003208 <HAL_ADC_ConfigChannel+0x1f4>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b11      	cmp	r3, #17
 8003206:	d122      	bne.n	800324e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a11      	ldr	r2, [pc, #68]	@ (800326c <HAL_ADC_ConfigChannel+0x258>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d111      	bne.n	800324e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800322a:	4b11      	ldr	r3, [pc, #68]	@ (8003270 <HAL_ADC_ConfigChannel+0x25c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a11      	ldr	r2, [pc, #68]	@ (8003274 <HAL_ADC_ConfigChannel+0x260>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	0c9a      	lsrs	r2, r3, #18
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003240:	e002      	b.n	8003248 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	3b01      	subs	r3, #1
 8003246:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f9      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	40012300 	.word	0x40012300
 8003268:	40012000 	.word	0x40012000
 800326c:	10000012 	.word	0x10000012
 8003270:	20000004 	.word	0x20000004
 8003274:	431bde83 	.word	0x431bde83

08003278 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003280:	4b79      	ldr	r3, [pc, #484]	@ (8003468 <ADC_Init+0x1f0>)
 8003282:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	431a      	orrs	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6859      	ldr	r1, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	021a      	lsls	r2, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80032d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6899      	ldr	r1, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330a:	4a58      	ldr	r2, [pc, #352]	@ (800346c <ADC_Init+0x1f4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d022      	beq.n	8003356 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800331e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6899      	ldr	r1, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003340:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6899      	ldr	r1, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	e00f      	b.n	8003376 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003364:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003374:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0202 	bic.w	r2, r2, #2
 8003384:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6899      	ldr	r1, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	7e1b      	ldrb	r3, [r3, #24]
 8003390:	005a      	lsls	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01b      	beq.n	80033dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033b2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80033c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6859      	ldr	r1, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	3b01      	subs	r3, #1
 80033d0:	035a      	lsls	r2, r3, #13
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	e007      	b.n	80033ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033ea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80033fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	3b01      	subs	r3, #1
 8003408:	051a      	lsls	r2, r3, #20
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003420:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6899      	ldr	r1, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800342e:	025a      	lsls	r2, r3, #9
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003446:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6899      	ldr	r1, [r3, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	029a      	lsls	r2, r3, #10
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	609a      	str	r2, [r3, #8]
}
 800345c:	bf00      	nop
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	40012300 	.word	0x40012300
 800346c:	0f000001 	.word	0x0f000001

08003470 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003494:	4b0c      	ldr	r3, [pc, #48]	@ (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034a0:	4013      	ands	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b6:	4a04      	ldr	r2, [pc, #16]	@ (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	60d3      	str	r3, [r2, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d0:	4b04      	ldr	r3, [pc, #16]	@ (80034e4 <__NVIC_GetPriorityGrouping+0x18>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	f003 0307 	and.w	r3, r3, #7
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	db0b      	blt.n	8003512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	f003 021f 	and.w	r2, r3, #31
 8003500:	4907      	ldr	r1, [pc, #28]	@ (8003520 <__NVIC_EnableIRQ+0x38>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2001      	movs	r0, #1
 800350a:	fa00 f202 	lsl.w	r2, r0, r2
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000e100 	.word	0xe000e100

08003524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	6039      	str	r1, [r7, #0]
 800352e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	2b00      	cmp	r3, #0
 8003536:	db0a      	blt.n	800354e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	490c      	ldr	r1, [pc, #48]	@ (8003570 <__NVIC_SetPriority+0x4c>)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	440b      	add	r3, r1
 8003548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800354c:	e00a      	b.n	8003564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	4908      	ldr	r1, [pc, #32]	@ (8003574 <__NVIC_SetPriority+0x50>)
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	3b04      	subs	r3, #4
 800355c:	0112      	lsls	r2, r2, #4
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	440b      	add	r3, r1
 8003562:	761a      	strb	r2, [r3, #24]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000e100 	.word	0xe000e100
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	@ 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f1c3 0307 	rsb	r3, r3, #7
 8003592:	2b04      	cmp	r3, #4
 8003594:	bf28      	it	cs
 8003596:	2304      	movcs	r3, #4
 8003598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3304      	adds	r3, #4
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d902      	bls.n	80035a8 <NVIC_EncodePriority+0x30>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3b03      	subs	r3, #3
 80035a6:	e000      	b.n	80035aa <NVIC_EncodePriority+0x32>
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	f04f 32ff 	mov.w	r2, #4294967295
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43da      	mvns	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	401a      	ands	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c0:	f04f 31ff 	mov.w	r1, #4294967295
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	43d9      	mvns	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	4313      	orrs	r3, r2
         );
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3724      	adds	r7, #36	@ 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035f0:	d301      	bcc.n	80035f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035f2:	2301      	movs	r3, #1
 80035f4:	e00f      	b.n	8003616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003620 <SysTick_Config+0x40>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035fe:	210f      	movs	r1, #15
 8003600:	f04f 30ff 	mov.w	r0, #4294967295
 8003604:	f7ff ff8e 	bl	8003524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003608:	4b05      	ldr	r3, [pc, #20]	@ (8003620 <SysTick_Config+0x40>)
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800360e:	4b04      	ldr	r3, [pc, #16]	@ (8003620 <SysTick_Config+0x40>)
 8003610:	2207      	movs	r2, #7
 8003612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	e000e010 	.word	0xe000e010

08003624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ff29 	bl	8003484 <__NVIC_SetPriorityGrouping>
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	4603      	mov	r3, r0
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800364c:	f7ff ff3e 	bl	80034cc <__NVIC_GetPriorityGrouping>
 8003650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	6978      	ldr	r0, [r7, #20]
 8003658:	f7ff ff8e 	bl	8003578 <NVIC_EncodePriority>
 800365c:	4602      	mov	r2, r0
 800365e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff5d 	bl	8003524 <__NVIC_SetPriority>
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff31 	bl	80034e8 <__NVIC_EnableIRQ>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ffa2 	bl	80035e0 <SysTick_Config>
 800369c:	4603      	mov	r3, r0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036b4:	f7ff fb0a 	bl	8002ccc <HAL_GetTick>
 80036b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d008      	beq.n	80036d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2280      	movs	r2, #128	@ 0x80
 80036ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e052      	b.n	800377e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0216 	bic.w	r2, r2, #22
 80036e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d103      	bne.n	8003708 <HAL_DMA_Abort+0x62>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003704:	2b00      	cmp	r3, #0
 8003706:	d007      	beq.n	8003718 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0208 	bic.w	r2, r2, #8
 8003716:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0201 	bic.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003728:	e013      	b.n	8003752 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800372a:	f7ff facf 	bl	8002ccc <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b05      	cmp	r3, #5
 8003736:	d90c      	bls.n	8003752 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2203      	movs	r2, #3
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e015      	b.n	800377e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e4      	bne.n	800372a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003764:	223f      	movs	r2, #63	@ 0x3f
 8003766:	409a      	lsls	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d004      	beq.n	80037a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2280      	movs	r2, #128	@ 0x80
 800379e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e00c      	b.n	80037be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2205      	movs	r2, #5
 80037a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b089      	sub	sp, #36	@ 0x24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037de:	2300      	movs	r3, #0
 80037e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	e159      	b.n	8003a9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037e8:	2201      	movs	r2, #1
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4013      	ands	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	429a      	cmp	r2, r3
 8003802:	f040 8148 	bne.w	8003a96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b01      	cmp	r3, #1
 8003810:	d005      	beq.n	800381e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800381a:	2b02      	cmp	r3, #2
 800381c:	d130      	bne.n	8003880 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	2203      	movs	r2, #3
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003854:	2201      	movs	r2, #1
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	f003 0201 	and.w	r2, r3, #1
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	2b03      	cmp	r3, #3
 800388a:	d017      	beq.n	80038bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	2203      	movs	r2, #3
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d123      	bne.n	8003910 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	08da      	lsrs	r2, r3, #3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3208      	adds	r2, #8
 80038d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	220f      	movs	r2, #15
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	08da      	lsrs	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3208      	adds	r2, #8
 800390a:	69b9      	ldr	r1, [r7, #24]
 800390c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	2203      	movs	r2, #3
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0203 	and.w	r2, r3, #3
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 80a2 	beq.w	8003a96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	4b57      	ldr	r3, [pc, #348]	@ (8003ab4 <HAL_GPIO_Init+0x2e8>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395a:	4a56      	ldr	r2, [pc, #344]	@ (8003ab4 <HAL_GPIO_Init+0x2e8>)
 800395c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003960:	6453      	str	r3, [r2, #68]	@ 0x44
 8003962:	4b54      	ldr	r3, [pc, #336]	@ (8003ab4 <HAL_GPIO_Init+0x2e8>)
 8003964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800396e:	4a52      	ldr	r2, [pc, #328]	@ (8003ab8 <HAL_GPIO_Init+0x2ec>)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	089b      	lsrs	r3, r3, #2
 8003974:	3302      	adds	r3, #2
 8003976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	220f      	movs	r2, #15
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4013      	ands	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a49      	ldr	r2, [pc, #292]	@ (8003abc <HAL_GPIO_Init+0x2f0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d019      	beq.n	80039ce <HAL_GPIO_Init+0x202>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a48      	ldr	r2, [pc, #288]	@ (8003ac0 <HAL_GPIO_Init+0x2f4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d013      	beq.n	80039ca <HAL_GPIO_Init+0x1fe>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a47      	ldr	r2, [pc, #284]	@ (8003ac4 <HAL_GPIO_Init+0x2f8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00d      	beq.n	80039c6 <HAL_GPIO_Init+0x1fa>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a46      	ldr	r2, [pc, #280]	@ (8003ac8 <HAL_GPIO_Init+0x2fc>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <HAL_GPIO_Init+0x1f6>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a45      	ldr	r2, [pc, #276]	@ (8003acc <HAL_GPIO_Init+0x300>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <HAL_GPIO_Init+0x1f2>
 80039ba:	2304      	movs	r3, #4
 80039bc:	e008      	b.n	80039d0 <HAL_GPIO_Init+0x204>
 80039be:	2307      	movs	r3, #7
 80039c0:	e006      	b.n	80039d0 <HAL_GPIO_Init+0x204>
 80039c2:	2303      	movs	r3, #3
 80039c4:	e004      	b.n	80039d0 <HAL_GPIO_Init+0x204>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e002      	b.n	80039d0 <HAL_GPIO_Init+0x204>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <HAL_GPIO_Init+0x204>
 80039ce:	2300      	movs	r3, #0
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	f002 0203 	and.w	r2, r2, #3
 80039d6:	0092      	lsls	r2, r2, #2
 80039d8:	4093      	lsls	r3, r2
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039e0:	4935      	ldr	r1, [pc, #212]	@ (8003ab8 <HAL_GPIO_Init+0x2ec>)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	089b      	lsrs	r3, r3, #2
 80039e6:	3302      	adds	r3, #2
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ee:	4b38      	ldr	r3, [pc, #224]	@ (8003ad0 <HAL_GPIO_Init+0x304>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4013      	ands	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a12:	4a2f      	ldr	r2, [pc, #188]	@ (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a18:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a3c:	4a24      	ldr	r2, [pc, #144]	@ (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a42:	4b23      	ldr	r3, [pc, #140]	@ (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a66:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a6c:	4b18      	ldr	r3, [pc, #96]	@ (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a90:	4a0f      	ldr	r2, [pc, #60]	@ (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	2b0f      	cmp	r3, #15
 8003aa0:	f67f aea2 	bls.w	80037e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3724      	adds	r7, #36	@ 0x24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40013800 	.word	0x40013800
 8003abc:	40020000 	.word	0x40020000
 8003ac0:	40020400 	.word	0x40020400
 8003ac4:	40020800 	.word	0x40020800
 8003ac8:	40020c00 	.word	0x40020c00
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40013c00 	.word	0x40013c00

08003ad4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	887b      	ldrh	r3, [r7, #2]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
 8003af0:	e001      	b.n	8003af6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003af2:	2300      	movs	r3, #0
 8003af4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	807b      	strh	r3, [r7, #2]
 8003b10:	4613      	mov	r3, r2
 8003b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b14:	787b      	ldrb	r3, [r7, #1]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b1a:	887a      	ldrh	r2, [r7, #2]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b20:	e003      	b.n	8003b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b22:	887b      	ldrh	r3, [r7, #2]
 8003b24:	041a      	lsls	r2, r3, #16
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	619a      	str	r2, [r3, #24]
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
	...

08003b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b42:	4b08      	ldr	r3, [pc, #32]	@ (8003b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	88fb      	ldrh	r3, [r7, #6]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d006      	beq.n	8003b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b4e:	4a05      	ldr	r2, [pc, #20]	@ (8003b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f806 	bl	8003b68 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40013c00 	.word	0x40013c00

08003b68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e267      	b.n	8004062 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d075      	beq.n	8003c8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b9e:	4b88      	ldr	r3, [pc, #544]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d00c      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003baa:	4b85      	ldr	r3, [pc, #532]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d112      	bne.n	8003bdc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb6:	4b82      	ldr	r3, [pc, #520]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bc2:	d10b      	bne.n	8003bdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc4:	4b7e      	ldr	r3, [pc, #504]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d05b      	beq.n	8003c88 <HAL_RCC_OscConfig+0x108>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d157      	bne.n	8003c88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e242      	b.n	8004062 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003be4:	d106      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x74>
 8003be6:	4b76      	ldr	r3, [pc, #472]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a75      	ldr	r2, [pc, #468]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e01d      	b.n	8003c30 <HAL_RCC_OscConfig+0xb0>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCC_OscConfig+0x98>
 8003bfe:	4b70      	ldr	r3, [pc, #448]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a6f      	ldr	r2, [pc, #444]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003c04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a6c      	ldr	r2, [pc, #432]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	e00b      	b.n	8003c30 <HAL_RCC_OscConfig+0xb0>
 8003c18:	4b69      	ldr	r3, [pc, #420]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a68      	ldr	r2, [pc, #416]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003c1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	4b66      	ldr	r3, [pc, #408]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a65      	ldr	r2, [pc, #404]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003c2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d013      	beq.n	8003c60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c38:	f7ff f848 	bl	8002ccc <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c40:	f7ff f844 	bl	8002ccc <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b64      	cmp	r3, #100	@ 0x64
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e207      	b.n	8004062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	4b5b      	ldr	r3, [pc, #364]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCC_OscConfig+0xc0>
 8003c5e:	e014      	b.n	8003c8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c60:	f7ff f834 	bl	8002ccc <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c68:	f7ff f830 	bl	8002ccc <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b64      	cmp	r3, #100	@ 0x64
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e1f3      	b.n	8004062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7a:	4b51      	ldr	r3, [pc, #324]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f0      	bne.n	8003c68 <HAL_RCC_OscConfig+0xe8>
 8003c86:	e000      	b.n	8003c8a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d063      	beq.n	8003d5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c96:	4b4a      	ldr	r3, [pc, #296]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00b      	beq.n	8003cba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca2:	4b47      	ldr	r3, [pc, #284]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d11c      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cae:	4b44      	ldr	r3, [pc, #272]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d116      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cba:	4b41      	ldr	r3, [pc, #260]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x152>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d001      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e1c7      	b.n	8004062 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4937      	ldr	r1, [pc, #220]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce6:	e03a      	b.n	8003d5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d020      	beq.n	8003d32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf0:	4b34      	ldr	r3, [pc, #208]	@ (8003dc4 <HAL_RCC_OscConfig+0x244>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf6:	f7fe ffe9 	bl	8002ccc <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfe:	f7fe ffe5 	bl	8002ccc <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e1a8      	b.n	8004062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d10:	4b2b      	ldr	r3, [pc, #172]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1c:	4b28      	ldr	r3, [pc, #160]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4925      	ldr	r1, [pc, #148]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	600b      	str	r3, [r1, #0]
 8003d30:	e015      	b.n	8003d5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d32:	4b24      	ldr	r3, [pc, #144]	@ (8003dc4 <HAL_RCC_OscConfig+0x244>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d38:	f7fe ffc8 	bl	8002ccc <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d40:	f7fe ffc4 	bl	8002ccc <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e187      	b.n	8004062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d52:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d036      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d016      	beq.n	8003da0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d72:	4b15      	ldr	r3, [pc, #84]	@ (8003dc8 <HAL_RCC_OscConfig+0x248>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d78:	f7fe ffa8 	bl	8002ccc <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d80:	f7fe ffa4 	bl	8002ccc <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e167      	b.n	8004062 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d92:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc0 <HAL_RCC_OscConfig+0x240>)
 8003d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0x200>
 8003d9e:	e01b      	b.n	8003dd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da0:	4b09      	ldr	r3, [pc, #36]	@ (8003dc8 <HAL_RCC_OscConfig+0x248>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da6:	f7fe ff91 	bl	8002ccc <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dac:	e00e      	b.n	8003dcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dae:	f7fe ff8d 	bl	8002ccc <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d907      	bls.n	8003dcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e150      	b.n	8004062 <HAL_RCC_OscConfig+0x4e2>
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	42470000 	.word	0x42470000
 8003dc8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dcc:	4b88      	ldr	r3, [pc, #544]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003dce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1ea      	bne.n	8003dae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 8097 	beq.w	8003f14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de6:	2300      	movs	r3, #0
 8003de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dea:	4b81      	ldr	r3, [pc, #516]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10f      	bne.n	8003e16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df6:	2300      	movs	r3, #0
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	4b7d      	ldr	r3, [pc, #500]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	4a7c      	ldr	r2, [pc, #496]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e06:	4b7a      	ldr	r3, [pc, #488]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e0e:	60bb      	str	r3, [r7, #8]
 8003e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e12:	2301      	movs	r3, #1
 8003e14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e16:	4b77      	ldr	r3, [pc, #476]	@ (8003ff4 <HAL_RCC_OscConfig+0x474>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d118      	bne.n	8003e54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e22:	4b74      	ldr	r3, [pc, #464]	@ (8003ff4 <HAL_RCC_OscConfig+0x474>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a73      	ldr	r2, [pc, #460]	@ (8003ff4 <HAL_RCC_OscConfig+0x474>)
 8003e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e2e:	f7fe ff4d 	bl	8002ccc <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e36:	f7fe ff49 	bl	8002ccc <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e10c      	b.n	8004062 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e48:	4b6a      	ldr	r3, [pc, #424]	@ (8003ff4 <HAL_RCC_OscConfig+0x474>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d106      	bne.n	8003e6a <HAL_RCC_OscConfig+0x2ea>
 8003e5c:	4b64      	ldr	r3, [pc, #400]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e60:	4a63      	ldr	r2, [pc, #396]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e68:	e01c      	b.n	8003ea4 <HAL_RCC_OscConfig+0x324>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b05      	cmp	r3, #5
 8003e70:	d10c      	bne.n	8003e8c <HAL_RCC_OscConfig+0x30c>
 8003e72:	4b5f      	ldr	r3, [pc, #380]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e76:	4a5e      	ldr	r2, [pc, #376]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003e78:	f043 0304 	orr.w	r3, r3, #4
 8003e7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e7e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e82:	4a5b      	ldr	r2, [pc, #364]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e8a:	e00b      	b.n	8003ea4 <HAL_RCC_OscConfig+0x324>
 8003e8c:	4b58      	ldr	r3, [pc, #352]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e90:	4a57      	ldr	r2, [pc, #348]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003e92:	f023 0301 	bic.w	r3, r3, #1
 8003e96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e98:	4b55      	ldr	r3, [pc, #340]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9c:	4a54      	ldr	r2, [pc, #336]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003e9e:	f023 0304 	bic.w	r3, r3, #4
 8003ea2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d015      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eac:	f7fe ff0e 	bl	8002ccc <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb4:	f7fe ff0a 	bl	8002ccc <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e0cb      	b.n	8004062 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eca:	4b49      	ldr	r3, [pc, #292]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0ee      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x334>
 8003ed6:	e014      	b.n	8003f02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed8:	f7fe fef8 	bl	8002ccc <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ede:	e00a      	b.n	8003ef6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee0:	f7fe fef4 	bl	8002ccc <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e0b5      	b.n	8004062 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1ee      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d105      	bne.n	8003f14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f08:	4b39      	ldr	r3, [pc, #228]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	4a38      	ldr	r2, [pc, #224]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80a1 	beq.w	8004060 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f1e:	4b34      	ldr	r3, [pc, #208]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 030c 	and.w	r3, r3, #12
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d05c      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d141      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f32:	4b31      	ldr	r3, [pc, #196]	@ (8003ff8 <HAL_RCC_OscConfig+0x478>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f38:	f7fe fec8 	bl	8002ccc <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f40:	f7fe fec4 	bl	8002ccc <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e087      	b.n	8004062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f52:	4b27      	ldr	r3, [pc, #156]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69da      	ldr	r2, [r3, #28]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6c:	019b      	lsls	r3, r3, #6
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f74:	085b      	lsrs	r3, r3, #1
 8003f76:	3b01      	subs	r3, #1
 8003f78:	041b      	lsls	r3, r3, #16
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f80:	061b      	lsls	r3, r3, #24
 8003f82:	491b      	ldr	r1, [pc, #108]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f88:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff8 <HAL_RCC_OscConfig+0x478>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8e:	f7fe fe9d 	bl	8002ccc <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f96:	f7fe fe99 	bl	8002ccc <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e05c      	b.n	8004062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa8:	4b11      	ldr	r3, [pc, #68]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0f0      	beq.n	8003f96 <HAL_RCC_OscConfig+0x416>
 8003fb4:	e054      	b.n	8004060 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb6:	4b10      	ldr	r3, [pc, #64]	@ (8003ff8 <HAL_RCC_OscConfig+0x478>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbc:	f7fe fe86 	bl	8002ccc <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc4:	f7fe fe82 	bl	8002ccc <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e045      	b.n	8004062 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd6:	4b06      	ldr	r3, [pc, #24]	@ (8003ff0 <HAL_RCC_OscConfig+0x470>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x444>
 8003fe2:	e03d      	b.n	8004060 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e038      	b.n	8004062 <HAL_RCC_OscConfig+0x4e2>
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	40007000 	.word	0x40007000
 8003ff8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800406c <HAL_RCC_OscConfig+0x4ec>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d028      	beq.n	800405c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d121      	bne.n	800405c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004022:	429a      	cmp	r2, r3
 8004024:	d11a      	bne.n	800405c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800402c:	4013      	ands	r3, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004032:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004034:	4293      	cmp	r3, r2
 8004036:	d111      	bne.n	800405c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	3b01      	subs	r3, #1
 8004046:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004048:	429a      	cmp	r2, r3
 800404a:	d107      	bne.n	800405c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004056:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d001      	beq.n	8004060 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40023800 	.word	0x40023800

08004070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0cc      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004084:	4b68      	ldr	r3, [pc, #416]	@ (8004228 <HAL_RCC_ClockConfig+0x1b8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d90c      	bls.n	80040ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004092:	4b65      	ldr	r3, [pc, #404]	@ (8004228 <HAL_RCC_ClockConfig+0x1b8>)
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800409a:	4b63      	ldr	r3, [pc, #396]	@ (8004228 <HAL_RCC_ClockConfig+0x1b8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0b8      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d020      	beq.n	80040fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c4:	4b59      	ldr	r3, [pc, #356]	@ (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4a58      	ldr	r2, [pc, #352]	@ (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040dc:	4b53      	ldr	r3, [pc, #332]	@ (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4a52      	ldr	r2, [pc, #328]	@ (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e8:	4b50      	ldr	r3, [pc, #320]	@ (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	494d      	ldr	r1, [pc, #308]	@ (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d044      	beq.n	8004190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d107      	bne.n	800411e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410e:	4b47      	ldr	r3, [pc, #284]	@ (800422c <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d119      	bne.n	800414e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e07f      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d003      	beq.n	800412e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412a:	2b03      	cmp	r3, #3
 800412c:	d107      	bne.n	800413e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800412e:	4b3f      	ldr	r3, [pc, #252]	@ (800422c <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d109      	bne.n	800414e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e06f      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413e:	4b3b      	ldr	r3, [pc, #236]	@ (800422c <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e067      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800414e:	4b37      	ldr	r3, [pc, #220]	@ (800422c <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f023 0203 	bic.w	r2, r3, #3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	4934      	ldr	r1, [pc, #208]	@ (800422c <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	4313      	orrs	r3, r2
 800415e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004160:	f7fe fdb4 	bl	8002ccc <HAL_GetTick>
 8004164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004166:	e00a      	b.n	800417e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004168:	f7fe fdb0 	bl	8002ccc <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004176:	4293      	cmp	r3, r2
 8004178:	d901      	bls.n	800417e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e04f      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417e:	4b2b      	ldr	r3, [pc, #172]	@ (800422c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 020c 	and.w	r2, r3, #12
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	429a      	cmp	r2, r3
 800418e:	d1eb      	bne.n	8004168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004190:	4b25      	ldr	r3, [pc, #148]	@ (8004228 <HAL_RCC_ClockConfig+0x1b8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d20c      	bcs.n	80041b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419e:	4b22      	ldr	r3, [pc, #136]	@ (8004228 <HAL_RCC_ClockConfig+0x1b8>)
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a6:	4b20      	ldr	r3, [pc, #128]	@ (8004228 <HAL_RCC_ClockConfig+0x1b8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d001      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e032      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c4:	4b19      	ldr	r3, [pc, #100]	@ (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4916      	ldr	r1, [pc, #88]	@ (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041e2:	4b12      	ldr	r3, [pc, #72]	@ (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	490e      	ldr	r1, [pc, #56]	@ (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041f6:	f000 f821 	bl	800423c <HAL_RCC_GetSysClockFreq>
 80041fa:	4602      	mov	r2, r0
 80041fc:	4b0b      	ldr	r3, [pc, #44]	@ (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	490a      	ldr	r1, [pc, #40]	@ (8004230 <HAL_RCC_ClockConfig+0x1c0>)
 8004208:	5ccb      	ldrb	r3, [r1, r3]
 800420a:	fa22 f303 	lsr.w	r3, r2, r3
 800420e:	4a09      	ldr	r2, [pc, #36]	@ (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004212:	4b09      	ldr	r3, [pc, #36]	@ (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe fd14 	bl	8002c44 <HAL_InitTick>

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40023c00 	.word	0x40023c00
 800422c:	40023800 	.word	0x40023800
 8004230:	08009920 	.word	0x08009920
 8004234:	20000004 	.word	0x20000004
 8004238:	20000008 	.word	0x20000008

0800423c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800423c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004240:	b094      	sub	sp, #80	@ 0x50
 8004242:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004254:	4b79      	ldr	r3, [pc, #484]	@ (800443c <HAL_RCC_GetSysClockFreq+0x200>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 030c 	and.w	r3, r3, #12
 800425c:	2b08      	cmp	r3, #8
 800425e:	d00d      	beq.n	800427c <HAL_RCC_GetSysClockFreq+0x40>
 8004260:	2b08      	cmp	r3, #8
 8004262:	f200 80e1 	bhi.w	8004428 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <HAL_RCC_GetSysClockFreq+0x34>
 800426a:	2b04      	cmp	r3, #4
 800426c:	d003      	beq.n	8004276 <HAL_RCC_GetSysClockFreq+0x3a>
 800426e:	e0db      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004270:	4b73      	ldr	r3, [pc, #460]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x204>)
 8004272:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004274:	e0db      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004276:	4b73      	ldr	r3, [pc, #460]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x208>)
 8004278:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800427a:	e0d8      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800427c:	4b6f      	ldr	r3, [pc, #444]	@ (800443c <HAL_RCC_GetSysClockFreq+0x200>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004284:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004286:	4b6d      	ldr	r3, [pc, #436]	@ (800443c <HAL_RCC_GetSysClockFreq+0x200>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d063      	beq.n	800435a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004292:	4b6a      	ldr	r3, [pc, #424]	@ (800443c <HAL_RCC_GetSysClockFreq+0x200>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	099b      	lsrs	r3, r3, #6
 8004298:	2200      	movs	r2, #0
 800429a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800429c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800429e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042a6:	2300      	movs	r3, #0
 80042a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80042aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80042ae:	4622      	mov	r2, r4
 80042b0:	462b      	mov	r3, r5
 80042b2:	f04f 0000 	mov.w	r0, #0
 80042b6:	f04f 0100 	mov.w	r1, #0
 80042ba:	0159      	lsls	r1, r3, #5
 80042bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042c0:	0150      	lsls	r0, r2, #5
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4621      	mov	r1, r4
 80042c8:	1a51      	subs	r1, r2, r1
 80042ca:	6139      	str	r1, [r7, #16]
 80042cc:	4629      	mov	r1, r5
 80042ce:	eb63 0301 	sbc.w	r3, r3, r1
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042e0:	4659      	mov	r1, fp
 80042e2:	018b      	lsls	r3, r1, #6
 80042e4:	4651      	mov	r1, sl
 80042e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042ea:	4651      	mov	r1, sl
 80042ec:	018a      	lsls	r2, r1, #6
 80042ee:	4651      	mov	r1, sl
 80042f0:	ebb2 0801 	subs.w	r8, r2, r1
 80042f4:	4659      	mov	r1, fp
 80042f6:	eb63 0901 	sbc.w	r9, r3, r1
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800430a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800430e:	4690      	mov	r8, r2
 8004310:	4699      	mov	r9, r3
 8004312:	4623      	mov	r3, r4
 8004314:	eb18 0303 	adds.w	r3, r8, r3
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	462b      	mov	r3, r5
 800431c:	eb49 0303 	adc.w	r3, r9, r3
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800432e:	4629      	mov	r1, r5
 8004330:	024b      	lsls	r3, r1, #9
 8004332:	4621      	mov	r1, r4
 8004334:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004338:	4621      	mov	r1, r4
 800433a:	024a      	lsls	r2, r1, #9
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004342:	2200      	movs	r2, #0
 8004344:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004346:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004348:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800434c:	f7fc fc44 	bl	8000bd8 <__aeabi_uldivmod>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4613      	mov	r3, r2
 8004356:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004358:	e058      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800435a:	4b38      	ldr	r3, [pc, #224]	@ (800443c <HAL_RCC_GetSysClockFreq+0x200>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	099b      	lsrs	r3, r3, #6
 8004360:	2200      	movs	r2, #0
 8004362:	4618      	mov	r0, r3
 8004364:	4611      	mov	r1, r2
 8004366:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800436a:	623b      	str	r3, [r7, #32]
 800436c:	2300      	movs	r3, #0
 800436e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004370:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004374:	4642      	mov	r2, r8
 8004376:	464b      	mov	r3, r9
 8004378:	f04f 0000 	mov.w	r0, #0
 800437c:	f04f 0100 	mov.w	r1, #0
 8004380:	0159      	lsls	r1, r3, #5
 8004382:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004386:	0150      	lsls	r0, r2, #5
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4641      	mov	r1, r8
 800438e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004392:	4649      	mov	r1, r9
 8004394:	eb63 0b01 	sbc.w	fp, r3, r1
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043ac:	ebb2 040a 	subs.w	r4, r2, sl
 80043b0:	eb63 050b 	sbc.w	r5, r3, fp
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	00eb      	lsls	r3, r5, #3
 80043be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043c2:	00e2      	lsls	r2, r4, #3
 80043c4:	4614      	mov	r4, r2
 80043c6:	461d      	mov	r5, r3
 80043c8:	4643      	mov	r3, r8
 80043ca:	18e3      	adds	r3, r4, r3
 80043cc:	603b      	str	r3, [r7, #0]
 80043ce:	464b      	mov	r3, r9
 80043d0:	eb45 0303 	adc.w	r3, r5, r3
 80043d4:	607b      	str	r3, [r7, #4]
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043e2:	4629      	mov	r1, r5
 80043e4:	028b      	lsls	r3, r1, #10
 80043e6:	4621      	mov	r1, r4
 80043e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043ec:	4621      	mov	r1, r4
 80043ee:	028a      	lsls	r2, r1, #10
 80043f0:	4610      	mov	r0, r2
 80043f2:	4619      	mov	r1, r3
 80043f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043f6:	2200      	movs	r2, #0
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	61fa      	str	r2, [r7, #28]
 80043fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004400:	f7fc fbea 	bl	8000bd8 <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4613      	mov	r3, r2
 800440a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800440c:	4b0b      	ldr	r3, [pc, #44]	@ (800443c <HAL_RCC_GetSysClockFreq+0x200>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	0c1b      	lsrs	r3, r3, #16
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	3301      	adds	r3, #1
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800441c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800441e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004426:	e002      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004428:	4b05      	ldr	r3, [pc, #20]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x204>)
 800442a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800442c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800442e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004430:	4618      	mov	r0, r3
 8004432:	3750      	adds	r7, #80	@ 0x50
 8004434:	46bd      	mov	sp, r7
 8004436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800
 8004440:	00f42400 	.word	0x00f42400
 8004444:	007a1200 	.word	0x007a1200

08004448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800444c:	4b03      	ldr	r3, [pc, #12]	@ (800445c <HAL_RCC_GetHCLKFreq+0x14>)
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000004 	.word	0x20000004

08004460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004464:	f7ff fff0 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 8004468:	4602      	mov	r2, r0
 800446a:	4b05      	ldr	r3, [pc, #20]	@ (8004480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	0a9b      	lsrs	r3, r3, #10
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	4903      	ldr	r1, [pc, #12]	@ (8004484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004476:	5ccb      	ldrb	r3, [r1, r3]
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40023800 	.word	0x40023800
 8004484:	08009930 	.word	0x08009930

08004488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800448c:	f7ff ffdc 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b05      	ldr	r3, [pc, #20]	@ (80044a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	0b5b      	lsrs	r3, r3, #13
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4903      	ldr	r1, [pc, #12]	@ (80044ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40023800 	.word	0x40023800
 80044ac:	08009930 	.word	0x08009930

080044b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e041      	b.n	8004546 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fe f862 	bl	80025a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3304      	adds	r3, #4
 80044ec:	4619      	mov	r1, r3
 80044ee:	4610      	mov	r0, r2
 80044f0:	f000 fc3c 	bl	8004d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	d001      	beq.n	8004568 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e044      	b.n	80045f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1e      	ldr	r2, [pc, #120]	@ (8004600 <HAL_TIM_Base_Start_IT+0xb0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d018      	beq.n	80045bc <HAL_TIM_Base_Start_IT+0x6c>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004592:	d013      	beq.n	80045bc <HAL_TIM_Base_Start_IT+0x6c>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a1a      	ldr	r2, [pc, #104]	@ (8004604 <HAL_TIM_Base_Start_IT+0xb4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00e      	beq.n	80045bc <HAL_TIM_Base_Start_IT+0x6c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a19      	ldr	r2, [pc, #100]	@ (8004608 <HAL_TIM_Base_Start_IT+0xb8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d009      	beq.n	80045bc <HAL_TIM_Base_Start_IT+0x6c>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a17      	ldr	r2, [pc, #92]	@ (800460c <HAL_TIM_Base_Start_IT+0xbc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d004      	beq.n	80045bc <HAL_TIM_Base_Start_IT+0x6c>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a16      	ldr	r2, [pc, #88]	@ (8004610 <HAL_TIM_Base_Start_IT+0xc0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d111      	bne.n	80045e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b06      	cmp	r3, #6
 80045cc:	d010      	beq.n	80045f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0201 	orr.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045de:	e007      	b.n	80045f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40010000 	.word	0x40010000
 8004604:	40000400 	.word	0x40000400
 8004608:	40000800 	.word	0x40000800
 800460c:	40000c00 	.word	0x40000c00
 8004610:	40014000 	.word	0x40014000

08004614 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e041      	b.n	80046aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f839 	bl	80046b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f000 fb8a 	bl	8004d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
	...

080046c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d109      	bne.n	80046ec <HAL_TIM_PWM_Start+0x24>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	bf14      	ite	ne
 80046e4:	2301      	movne	r3, #1
 80046e6:	2300      	moveq	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	e022      	b.n	8004732 <HAL_TIM_PWM_Start+0x6a>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d109      	bne.n	8004706 <HAL_TIM_PWM_Start+0x3e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	bf14      	ite	ne
 80046fe:	2301      	movne	r3, #1
 8004700:	2300      	moveq	r3, #0
 8004702:	b2db      	uxtb	r3, r3
 8004704:	e015      	b.n	8004732 <HAL_TIM_PWM_Start+0x6a>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b08      	cmp	r3, #8
 800470a:	d109      	bne.n	8004720 <HAL_TIM_PWM_Start+0x58>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b01      	cmp	r3, #1
 8004716:	bf14      	ite	ne
 8004718:	2301      	movne	r3, #1
 800471a:	2300      	moveq	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	e008      	b.n	8004732 <HAL_TIM_PWM_Start+0x6a>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	bf14      	ite	ne
 800472c:	2301      	movne	r3, #1
 800472e:	2300      	moveq	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e068      	b.n	800480c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d104      	bne.n	800474a <HAL_TIM_PWM_Start+0x82>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004748:	e013      	b.n	8004772 <HAL_TIM_PWM_Start+0xaa>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b04      	cmp	r3, #4
 800474e:	d104      	bne.n	800475a <HAL_TIM_PWM_Start+0x92>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004758:	e00b      	b.n	8004772 <HAL_TIM_PWM_Start+0xaa>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b08      	cmp	r3, #8
 800475e:	d104      	bne.n	800476a <HAL_TIM_PWM_Start+0xa2>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004768:	e003      	b.n	8004772 <HAL_TIM_PWM_Start+0xaa>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2202      	movs	r2, #2
 800476e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2201      	movs	r2, #1
 8004778:	6839      	ldr	r1, [r7, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fda2 	bl	80052c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a23      	ldr	r2, [pc, #140]	@ (8004814 <HAL_TIM_PWM_Start+0x14c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d107      	bne.n	800479a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004798:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1d      	ldr	r2, [pc, #116]	@ (8004814 <HAL_TIM_PWM_Start+0x14c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d018      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x10e>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ac:	d013      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x10e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a19      	ldr	r2, [pc, #100]	@ (8004818 <HAL_TIM_PWM_Start+0x150>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00e      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x10e>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a17      	ldr	r2, [pc, #92]	@ (800481c <HAL_TIM_PWM_Start+0x154>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d009      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x10e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a16      	ldr	r2, [pc, #88]	@ (8004820 <HAL_TIM_PWM_Start+0x158>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x10e>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a14      	ldr	r2, [pc, #80]	@ (8004824 <HAL_TIM_PWM_Start+0x15c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d111      	bne.n	80047fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b06      	cmp	r3, #6
 80047e6:	d010      	beq.n	800480a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f8:	e007      	b.n	800480a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0201 	orr.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40010000 	.word	0x40010000
 8004818:	40000400 	.word	0x40000400
 800481c:	40000800 	.word	0x40000800
 8004820:	40000c00 	.word	0x40000c00
 8004824:	40014000 	.word	0x40014000

08004828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d020      	beq.n	800488c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01b      	beq.n	800488c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0202 	mvn.w	r2, #2
 800485c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fa5b 	bl	8004d2e <HAL_TIM_IC_CaptureCallback>
 8004878:	e005      	b.n	8004886 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fa4d 	bl	8004d1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fa5e 	bl	8004d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d020      	beq.n	80048d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01b      	beq.n	80048d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f06f 0204 	mvn.w	r2, #4
 80048a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2202      	movs	r2, #2
 80048ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fa35 	bl	8004d2e <HAL_TIM_IC_CaptureCallback>
 80048c4:	e005      	b.n	80048d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fa27 	bl	8004d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fa38 	bl	8004d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d020      	beq.n	8004924 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01b      	beq.n	8004924 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f06f 0208 	mvn.w	r2, #8
 80048f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2204      	movs	r2, #4
 80048fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fa0f 	bl	8004d2e <HAL_TIM_IC_CaptureCallback>
 8004910:	e005      	b.n	800491e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fa01 	bl	8004d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fa12 	bl	8004d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f003 0310 	and.w	r3, r3, #16
 800492a:	2b00      	cmp	r3, #0
 800492c:	d020      	beq.n	8004970 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01b      	beq.n	8004970 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0210 	mvn.w	r2, #16
 8004940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2208      	movs	r2, #8
 8004946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f9e9 	bl	8004d2e <HAL_TIM_IC_CaptureCallback>
 800495c:	e005      	b.n	800496a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f9db 	bl	8004d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f9ec 	bl	8004d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00c      	beq.n	8004994 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f06f 0201 	mvn.w	r2, #1
 800498c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fd fcde 	bl	8002350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00c      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80049b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fd76 	bl	80054a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00c      	beq.n	80049dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f9bd 	bl	8004d56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00c      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0220 	mvn.w	r2, #32
 80049f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fd48 	bl	8005490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a00:	bf00      	nop
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e0ae      	b.n	8004b84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b0c      	cmp	r3, #12
 8004a32:	f200 809f 	bhi.w	8004b74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a36:	a201      	add	r2, pc, #4	@ (adr r2, 8004a3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3c:	08004a71 	.word	0x08004a71
 8004a40:	08004b75 	.word	0x08004b75
 8004a44:	08004b75 	.word	0x08004b75
 8004a48:	08004b75 	.word	0x08004b75
 8004a4c:	08004ab1 	.word	0x08004ab1
 8004a50:	08004b75 	.word	0x08004b75
 8004a54:	08004b75 	.word	0x08004b75
 8004a58:	08004b75 	.word	0x08004b75
 8004a5c:	08004af3 	.word	0x08004af3
 8004a60:	08004b75 	.word	0x08004b75
 8004a64:	08004b75 	.word	0x08004b75
 8004a68:	08004b75 	.word	0x08004b75
 8004a6c:	08004b33 	.word	0x08004b33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 f9fe 	bl	8004e78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0208 	orr.w	r2, r2, #8
 8004a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0204 	bic.w	r2, r2, #4
 8004a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6999      	ldr	r1, [r3, #24]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	619a      	str	r2, [r3, #24]
      break;
 8004aae:	e064      	b.n	8004b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fa44 	bl	8004f44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6999      	ldr	r1, [r3, #24]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	021a      	lsls	r2, r3, #8
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	619a      	str	r2, [r3, #24]
      break;
 8004af0:	e043      	b.n	8004b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fa8f 	bl	800501c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0208 	orr.w	r2, r2, #8
 8004b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69da      	ldr	r2, [r3, #28]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0204 	bic.w	r2, r2, #4
 8004b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69d9      	ldr	r1, [r3, #28]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	61da      	str	r2, [r3, #28]
      break;
 8004b30:	e023      	b.n	8004b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fad9 	bl	80050f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69d9      	ldr	r1, [r3, #28]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	021a      	lsls	r2, r3, #8
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	61da      	str	r2, [r3, #28]
      break;
 8004b72:	e002      	b.n	8004b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	75fb      	strb	r3, [r7, #23]
      break;
 8004b78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e0b4      	b.n	8004d12 <HAL_TIM_ConfigClockSource+0x186>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004be0:	d03e      	beq.n	8004c60 <HAL_TIM_ConfigClockSource+0xd4>
 8004be2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004be6:	f200 8087 	bhi.w	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bee:	f000 8086 	beq.w	8004cfe <HAL_TIM_ConfigClockSource+0x172>
 8004bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bf6:	d87f      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf8:	2b70      	cmp	r3, #112	@ 0x70
 8004bfa:	d01a      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0xa6>
 8004bfc:	2b70      	cmp	r3, #112	@ 0x70
 8004bfe:	d87b      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c00:	2b60      	cmp	r3, #96	@ 0x60
 8004c02:	d050      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0x11a>
 8004c04:	2b60      	cmp	r3, #96	@ 0x60
 8004c06:	d877      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c08:	2b50      	cmp	r3, #80	@ 0x50
 8004c0a:	d03c      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0xfa>
 8004c0c:	2b50      	cmp	r3, #80	@ 0x50
 8004c0e:	d873      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c10:	2b40      	cmp	r3, #64	@ 0x40
 8004c12:	d058      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x13a>
 8004c14:	2b40      	cmp	r3, #64	@ 0x40
 8004c16:	d86f      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c18:	2b30      	cmp	r3, #48	@ 0x30
 8004c1a:	d064      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c1c:	2b30      	cmp	r3, #48	@ 0x30
 8004c1e:	d86b      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d060      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d867      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d05c      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c2c:	2b10      	cmp	r3, #16
 8004c2e:	d05a      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c30:	e062      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c42:	f000 fb1f 	bl	8005284 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	609a      	str	r2, [r3, #8]
      break;
 8004c5e:	e04f      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c70:	f000 fb08 	bl	8005284 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c82:	609a      	str	r2, [r3, #8]
      break;
 8004c84:	e03c      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c92:	461a      	mov	r2, r3
 8004c94:	f000 fa7c 	bl	8005190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2150      	movs	r1, #80	@ 0x50
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fad5 	bl	800524e <TIM_ITRx_SetConfig>
      break;
 8004ca4:	e02c      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f000 fa9b 	bl	80051ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2160      	movs	r1, #96	@ 0x60
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fac5 	bl	800524e <TIM_ITRx_SetConfig>
      break;
 8004cc4:	e01c      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f000 fa5c 	bl	8005190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2140      	movs	r1, #64	@ 0x40
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fab5 	bl	800524e <TIM_ITRx_SetConfig>
      break;
 8004ce4:	e00c      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	f000 faac 	bl	800524e <TIM_ITRx_SetConfig>
      break;
 8004cf6:	e003      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004cfc:	e000      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a37      	ldr	r2, [pc, #220]	@ (8004e5c <TIM_Base_SetConfig+0xf0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00f      	beq.n	8004da4 <TIM_Base_SetConfig+0x38>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d8a:	d00b      	beq.n	8004da4 <TIM_Base_SetConfig+0x38>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a34      	ldr	r2, [pc, #208]	@ (8004e60 <TIM_Base_SetConfig+0xf4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d007      	beq.n	8004da4 <TIM_Base_SetConfig+0x38>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a33      	ldr	r2, [pc, #204]	@ (8004e64 <TIM_Base_SetConfig+0xf8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d003      	beq.n	8004da4 <TIM_Base_SetConfig+0x38>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a32      	ldr	r2, [pc, #200]	@ (8004e68 <TIM_Base_SetConfig+0xfc>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d108      	bne.n	8004db6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a28      	ldr	r2, [pc, #160]	@ (8004e5c <TIM_Base_SetConfig+0xf0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d01b      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc4:	d017      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a25      	ldr	r2, [pc, #148]	@ (8004e60 <TIM_Base_SetConfig+0xf4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d013      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a24      	ldr	r2, [pc, #144]	@ (8004e64 <TIM_Base_SetConfig+0xf8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00f      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a23      	ldr	r2, [pc, #140]	@ (8004e68 <TIM_Base_SetConfig+0xfc>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00b      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a22      	ldr	r2, [pc, #136]	@ (8004e6c <TIM_Base_SetConfig+0x100>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d007      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a21      	ldr	r2, [pc, #132]	@ (8004e70 <TIM_Base_SetConfig+0x104>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d003      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a20      	ldr	r2, [pc, #128]	@ (8004e74 <TIM_Base_SetConfig+0x108>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d108      	bne.n	8004e08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a0c      	ldr	r2, [pc, #48]	@ (8004e5c <TIM_Base_SetConfig+0xf0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d103      	bne.n	8004e36 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	691a      	ldr	r2, [r3, #16]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f043 0204 	orr.w	r2, r3, #4
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	601a      	str	r2, [r3, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40010000 	.word	0x40010000
 8004e60:	40000400 	.word	0x40000400
 8004e64:	40000800 	.word	0x40000800
 8004e68:	40000c00 	.word	0x40000c00
 8004e6c:	40014000 	.word	0x40014000
 8004e70:	40014400 	.word	0x40014400
 8004e74:	40014800 	.word	0x40014800

08004e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f023 0201 	bic.w	r2, r3, #1
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f023 0302 	bic.w	r3, r3, #2
 8004ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a1c      	ldr	r2, [pc, #112]	@ (8004f40 <TIM_OC1_SetConfig+0xc8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d10c      	bne.n	8004eee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f023 0308 	bic.w	r3, r3, #8
 8004eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f023 0304 	bic.w	r3, r3, #4
 8004eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a13      	ldr	r2, [pc, #76]	@ (8004f40 <TIM_OC1_SetConfig+0xc8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d111      	bne.n	8004f1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	621a      	str	r2, [r3, #32]
}
 8004f34:	bf00      	nop
 8004f36:	371c      	adds	r7, #28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	40010000 	.word	0x40010000

08004f44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	f023 0210 	bic.w	r2, r3, #16
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	021b      	lsls	r3, r3, #8
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f023 0320 	bic.w	r3, r3, #32
 8004f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8005018 <TIM_OC2_SetConfig+0xd4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d10d      	bne.n	8004fc0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a15      	ldr	r2, [pc, #84]	@ (8005018 <TIM_OC2_SetConfig+0xd4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d113      	bne.n	8004ff0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	621a      	str	r2, [r3, #32]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40010000 	.word	0x40010000

0800501c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800504a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0303 	bic.w	r3, r3, #3
 8005052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	4313      	orrs	r3, r2
 8005070:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a1d      	ldr	r2, [pc, #116]	@ (80050ec <TIM_OC3_SetConfig+0xd0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d10d      	bne.n	8005096 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005080:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a14      	ldr	r2, [pc, #80]	@ (80050ec <TIM_OC3_SetConfig+0xd0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d113      	bne.n	80050c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	621a      	str	r2, [r3, #32]
}
 80050e0:	bf00      	nop
 80050e2:	371c      	adds	r7, #28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	40010000 	.word	0x40010000

080050f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800511e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800513a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	031b      	lsls	r3, r3, #12
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a10      	ldr	r2, [pc, #64]	@ (800518c <TIM_OC4_SetConfig+0x9c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d109      	bne.n	8005164 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005156:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	019b      	lsls	r3, r3, #6
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	621a      	str	r2, [r3, #32]
}
 800517e:	bf00      	nop
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40010000 	.word	0x40010000

08005190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f023 0201 	bic.w	r2, r3, #1
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f023 030a 	bic.w	r3, r3, #10
 80051cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	621a      	str	r2, [r3, #32]
}
 80051e2:	bf00      	nop
 80051e4:	371c      	adds	r7, #28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b087      	sub	sp, #28
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	f023 0210 	bic.w	r2, r3, #16
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005218:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	031b      	lsls	r3, r3, #12
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800522a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005264:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4313      	orrs	r3, r2
 800526c:	f043 0307 	orr.w	r3, r3, #7
 8005270:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	609a      	str	r2, [r3, #8]
}
 8005278:	bf00      	nop
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800529e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	021a      	lsls	r2, r3, #8
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	431a      	orrs	r2, r3
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	609a      	str	r2, [r3, #8]
}
 80052b8:	bf00      	nop
 80052ba:	371c      	adds	r7, #28
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f003 031f 	and.w	r3, r3, #31
 80052d6:	2201      	movs	r2, #1
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a1a      	ldr	r2, [r3, #32]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	43db      	mvns	r3, r3
 80052e6:	401a      	ands	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a1a      	ldr	r2, [r3, #32]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f003 031f 	and.w	r3, r3, #31
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	fa01 f303 	lsl.w	r3, r1, r3
 80052fc:	431a      	orrs	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	621a      	str	r2, [r3, #32]
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
	...

08005310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005324:	2302      	movs	r3, #2
 8005326:	e050      	b.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800534e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1c      	ldr	r2, [pc, #112]	@ (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d018      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005374:	d013      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a18      	ldr	r2, [pc, #96]	@ (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00e      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a16      	ldr	r2, [pc, #88]	@ (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d009      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a15      	ldr	r2, [pc, #84]	@ (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d004      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a13      	ldr	r2, [pc, #76]	@ (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d10c      	bne.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40014000 	.word	0x40014000

080053ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005404:	2302      	movs	r3, #2
 8005406:	e03d      	b.n	8005484 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e042      	b.n	8005550 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7fd f984 	bl	80027ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2224      	movs	r2, #36	@ 0x24
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fdd3 	bl	80060a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695a      	ldr	r2, [r3, #20]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08a      	sub	sp, #40	@ 0x28
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	4613      	mov	r3, r2
 8005566:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b20      	cmp	r3, #32
 8005576:	d175      	bne.n	8005664 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <HAL_UART_Transmit+0x2c>
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e06e      	b.n	8005666 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2221      	movs	r2, #33	@ 0x21
 8005592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005596:	f7fd fb99 	bl	8002ccc <HAL_GetTick>
 800559a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	88fa      	ldrh	r2, [r7, #6]
 80055a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	88fa      	ldrh	r2, [r7, #6]
 80055a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055b0:	d108      	bne.n	80055c4 <HAL_UART_Transmit+0x6c>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d104      	bne.n	80055c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	61bb      	str	r3, [r7, #24]
 80055c2:	e003      	b.n	80055cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055cc:	e02e      	b.n	800562c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2200      	movs	r2, #0
 80055d6:	2180      	movs	r1, #128	@ 0x80
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 fb37 	bl	8005c4c <UART_WaitOnFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e03a      	b.n	8005666 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10b      	bne.n	800560e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005604:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	3302      	adds	r3, #2
 800560a:	61bb      	str	r3, [r7, #24]
 800560c:	e007      	b.n	800561e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	781a      	ldrb	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	3301      	adds	r3, #1
 800561c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1cb      	bne.n	80055ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2200      	movs	r2, #0
 800563e:	2140      	movs	r1, #64	@ 0x40
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 fb03 	bl	8005c4c <UART_WaitOnFlagUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d005      	beq.n	8005658 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e006      	b.n	8005666 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
  }
}
 8005666:	4618      	mov	r0, r3
 8005668:	3720      	adds	r7, #32
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b084      	sub	sp, #16
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	4613      	mov	r3, r2
 800567a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b20      	cmp	r3, #32
 8005686:	d112      	bne.n	80056ae <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_UART_Receive_IT+0x26>
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e00b      	b.n	80056b0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800569e:	88fb      	ldrh	r3, [r7, #6]
 80056a0:	461a      	mov	r2, r3
 80056a2:	68b9      	ldr	r1, [r7, #8]
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 fb2a 	bl	8005cfe <UART_Start_Receive_IT>
 80056aa:	4603      	mov	r3, r0
 80056ac:	e000      	b.n	80056b0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80056ae:	2302      	movs	r3, #2
  }
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b0ba      	sub	sp, #232	@ 0xe8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80056de:	2300      	movs	r3, #0
 80056e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80056f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10f      	bne.n	800571e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d009      	beq.n	800571e <HAL_UART_IRQHandler+0x66>
 800570a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fc07 	bl	8005f2a <UART_Receive_IT>
      return;
 800571c:	e273      	b.n	8005c06 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800571e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 80de 	beq.w	80058e4 <HAL_UART_IRQHandler+0x22c>
 8005728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d106      	bne.n	8005742 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005738:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80d1 	beq.w	80058e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00b      	beq.n	8005766 <HAL_UART_IRQHandler+0xae>
 800574e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800575e:	f043 0201 	orr.w	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00b      	beq.n	800578a <HAL_UART_IRQHandler+0xd2>
 8005772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d005      	beq.n	800578a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005782:	f043 0202 	orr.w	r2, r3, #2
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800578a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00b      	beq.n	80057ae <HAL_UART_IRQHandler+0xf6>
 8005796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d005      	beq.n	80057ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a6:	f043 0204 	orr.w	r2, r3, #4
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d011      	beq.n	80057de <HAL_UART_IRQHandler+0x126>
 80057ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d105      	bne.n	80057d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d6:	f043 0208 	orr.w	r2, r3, #8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 820a 	beq.w	8005bfc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ec:	f003 0320 	and.w	r3, r3, #32
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <HAL_UART_IRQHandler+0x14e>
 80057f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fb92 	bl	8005f2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005810:	2b40      	cmp	r3, #64	@ 0x40
 8005812:	bf0c      	ite	eq
 8005814:	2301      	moveq	r3, #1
 8005816:	2300      	movne	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d103      	bne.n	8005832 <HAL_UART_IRQHandler+0x17a>
 800582a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800582e:	2b00      	cmp	r3, #0
 8005830:	d04f      	beq.n	80058d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fa9d 	bl	8005d72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005842:	2b40      	cmp	r3, #64	@ 0x40
 8005844:	d141      	bne.n	80058ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3314      	adds	r3, #20
 800584c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800585c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005864:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3314      	adds	r3, #20
 800586e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005872:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005876:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800587e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800588a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1d9      	bne.n	8005846 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005896:	2b00      	cmp	r3, #0
 8005898:	d013      	beq.n	80058c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800589e:	4a8a      	ldr	r2, [pc, #552]	@ (8005ac8 <HAL_UART_IRQHandler+0x410>)
 80058a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fd ff6d 	bl	8003786 <HAL_DMA_Abort_IT>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d016      	beq.n	80058e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80058bc:	4610      	mov	r0, r2
 80058be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c0:	e00e      	b.n	80058e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f9ac 	bl	8005c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c8:	e00a      	b.n	80058e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f9a8 	bl	8005c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d0:	e006      	b.n	80058e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f9a4 	bl	8005c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80058de:	e18d      	b.n	8005bfc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e0:	bf00      	nop
    return;
 80058e2:	e18b      	b.n	8005bfc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	f040 8167 	bne.w	8005bbc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 8160 	beq.w	8005bbc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80058fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8159 	beq.w	8005bbc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800590a:	2300      	movs	r3, #0
 800590c:	60bb      	str	r3, [r7, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60bb      	str	r3, [r7, #8]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800592a:	2b40      	cmp	r3, #64	@ 0x40
 800592c:	f040 80ce 	bne.w	8005acc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800593c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 80a9 	beq.w	8005a98 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800594a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800594e:	429a      	cmp	r2, r3
 8005950:	f080 80a2 	bcs.w	8005a98 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800595a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005966:	f000 8088 	beq.w	8005a7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	330c      	adds	r3, #12
 8005970:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005978:	e853 3f00 	ldrex	r3, [r3]
 800597c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005980:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005988:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	330c      	adds	r3, #12
 8005992:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005996:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800599a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80059a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1d9      	bne.n	800596a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3314      	adds	r3, #20
 80059bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80059c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059c8:	f023 0301 	bic.w	r3, r3, #1
 80059cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3314      	adds	r3, #20
 80059d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80059de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80059e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059e6:	e841 2300 	strex	r3, r2, [r1]
 80059ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e1      	bne.n	80059b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3314      	adds	r3, #20
 80059f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3314      	adds	r3, #20
 8005a12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e3      	bne.n	80059f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	330c      	adds	r3, #12
 8005a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a4a:	f023 0310 	bic.w	r3, r3, #16
 8005a4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	330c      	adds	r3, #12
 8005a58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a5c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a5e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e3      	bne.n	8005a38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fd fe16 	bl	80036a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f8cf 	bl	8005c34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005a96:	e0b3      	b.n	8005c00 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	f040 80ad 	bne.w	8005c00 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ab0:	f040 80a6 	bne.w	8005c00 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005abe:	4619      	mov	r1, r3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f8b7 	bl	8005c34 <HAL_UARTEx_RxEventCallback>
      return;
 8005ac6:	e09b      	b.n	8005c00 <HAL_UART_IRQHandler+0x548>
 8005ac8:	08005e39 	.word	0x08005e39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 808e 	beq.w	8005c04 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005ae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 8089 	beq.w	8005c04 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	330c      	adds	r3, #12
 8005af8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	330c      	adds	r3, #12
 8005b12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b16:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1e3      	bne.n	8005af2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3314      	adds	r3, #20
 8005b30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	623b      	str	r3, [r7, #32]
   return(result);
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	f023 0301 	bic.w	r3, r3, #1
 8005b40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3314      	adds	r3, #20
 8005b4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b56:	e841 2300 	strex	r3, r2, [r1]
 8005b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1e3      	bne.n	8005b2a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	330c      	adds	r3, #12
 8005b76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0310 	bic.w	r3, r3, #16
 8005b86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	330c      	adds	r3, #12
 8005b90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b94:	61fa      	str	r2, [r7, #28]
 8005b96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	69b9      	ldr	r1, [r7, #24]
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	e841 2300 	strex	r3, r2, [r1]
 8005ba0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e3      	bne.n	8005b70 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f83d 	bl	8005c34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bba:	e023      	b.n	8005c04 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d009      	beq.n	8005bdc <HAL_UART_IRQHandler+0x524>
 8005bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f940 	bl	8005e5a <UART_Transmit_IT>
    return;
 8005bda:	e014      	b.n	8005c06 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00e      	beq.n	8005c06 <HAL_UART_IRQHandler+0x54e>
 8005be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f980 	bl	8005efa <UART_EndTransmit_IT>
    return;
 8005bfa:	e004      	b.n	8005c06 <HAL_UART_IRQHandler+0x54e>
    return;
 8005bfc:	bf00      	nop
 8005bfe:	e002      	b.n	8005c06 <HAL_UART_IRQHandler+0x54e>
      return;
 8005c00:	bf00      	nop
 8005c02:	e000      	b.n	8005c06 <HAL_UART_IRQHandler+0x54e>
      return;
 8005c04:	bf00      	nop
  }
}
 8005c06:	37e8      	adds	r7, #232	@ 0xe8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	603b      	str	r3, [r7, #0]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c5c:	e03b      	b.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c64:	d037      	beq.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c66:	f7fd f831 	bl	8002ccc <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	6a3a      	ldr	r2, [r7, #32]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d302      	bcc.n	8005c7c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e03a      	b.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d023      	beq.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b80      	cmp	r3, #128	@ 0x80
 8005c92:	d020      	beq.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b40      	cmp	r3, #64	@ 0x40
 8005c98:	d01d      	beq.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0308 	and.w	r3, r3, #8
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d116      	bne.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	617b      	str	r3, [r7, #20]
 8005cbc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 f857 	bl	8005d72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2208      	movs	r2, #8
 8005cc8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e00f      	b.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	bf0c      	ite	eq
 8005ce6:	2301      	moveq	r3, #1
 8005ce8:	2300      	movne	r3, #0
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	461a      	mov	r2, r3
 8005cee:	79fb      	ldrb	r3, [r7, #7]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d0b4      	beq.n	8005c5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	88fa      	ldrh	r2, [r7, #6]
 8005d16:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	88fa      	ldrh	r2, [r7, #6]
 8005d1c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2222      	movs	r2, #34	@ 0x22
 8005d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d007      	beq.n	8005d44 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68da      	ldr	r2, [r3, #12]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d42:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695a      	ldr	r2, [r3, #20]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0201 	orr.w	r2, r2, #1
 8005d52:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0220 	orr.w	r2, r2, #32
 8005d62:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b095      	sub	sp, #84	@ 0x54
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	330c      	adds	r3, #12
 8005d80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	330c      	adds	r3, #12
 8005d98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005da0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e5      	bne.n	8005d7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3314      	adds	r3, #20
 8005db4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	f023 0301 	bic.w	r3, r3, #1
 8005dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3314      	adds	r3, #20
 8005dcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e5      	bne.n	8005dae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d119      	bne.n	8005e1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	330c      	adds	r3, #12
 8005df0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f023 0310 	bic.w	r3, r3, #16
 8005e00:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	330c      	adds	r3, #12
 8005e08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e0a:	61ba      	str	r2, [r7, #24]
 8005e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	6979      	ldr	r1, [r7, #20]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	613b      	str	r3, [r7, #16]
   return(result);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e5      	bne.n	8005dea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e2c:	bf00      	nop
 8005e2e:	3754      	adds	r7, #84	@ 0x54
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7ff fee7 	bl	8005c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e52:	bf00      	nop
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b21      	cmp	r3, #33	@ 0x21
 8005e6c:	d13e      	bne.n	8005eec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e76:	d114      	bne.n	8005ea2 <UART_Transmit_IT+0x48>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d110      	bne.n	8005ea2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	1c9a      	adds	r2, r3, #2
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	621a      	str	r2, [r3, #32]
 8005ea0:	e008      	b.n	8005eb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	1c59      	adds	r1, r3, #1
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6211      	str	r1, [r2, #32]
 8005eac:	781a      	ldrb	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10f      	bne.n	8005ee8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ed6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ee6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	e000      	b.n	8005eee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005eec:	2302      	movs	r3, #2
  }
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b082      	sub	sp, #8
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2220      	movs	r2, #32
 8005f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff fe76 	bl	8005c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b08c      	sub	sp, #48	@ 0x30
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b22      	cmp	r3, #34	@ 0x22
 8005f44:	f040 80aa 	bne.w	800609c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f50:	d115      	bne.n	8005f7e <UART_Receive_IT+0x54>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d111      	bne.n	8005f7e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f76:	1c9a      	adds	r2, r3, #2
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f7c:	e024      	b.n	8005fc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f8c:	d007      	beq.n	8005f9e <UART_Receive_IT+0x74>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <UART_Receive_IT+0x82>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	e008      	b.n	8005fbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d15d      	bne.n	8006098 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0220 	bic.w	r2, r2, #32
 8005fea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ffa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695a      	ldr	r2, [r3, #20]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0201 	bic.w	r2, r2, #1
 800600a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601e:	2b01      	cmp	r3, #1
 8006020:	d135      	bne.n	800608e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	330c      	adds	r3, #12
 800602e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	613b      	str	r3, [r7, #16]
   return(result);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f023 0310 	bic.w	r3, r3, #16
 800603e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	330c      	adds	r3, #12
 8006046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006048:	623a      	str	r2, [r7, #32]
 800604a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	69f9      	ldr	r1, [r7, #28]
 800604e:	6a3a      	ldr	r2, [r7, #32]
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	61bb      	str	r3, [r7, #24]
   return(result);
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e5      	bne.n	8006028 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0310 	and.w	r3, r3, #16
 8006066:	2b10      	cmp	r3, #16
 8006068:	d10a      	bne.n	8006080 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	60fb      	str	r3, [r7, #12]
 800607e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff fdd4 	bl	8005c34 <HAL_UARTEx_RxEventCallback>
 800608c:	e002      	b.n	8006094 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7fb fa74 	bl	800157c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006094:	2300      	movs	r3, #0
 8006096:	e002      	b.n	800609e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	e000      	b.n	800609e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800609c:	2302      	movs	r3, #2
  }
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3730      	adds	r7, #48	@ 0x30
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
	...

080060a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060ac:	b0c0      	sub	sp, #256	@ 0x100
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c4:	68d9      	ldr	r1, [r3, #12]
 80060c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	ea40 0301 	orr.w	r3, r0, r1
 80060d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	431a      	orrs	r2, r3
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	431a      	orrs	r2, r3
 80060e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006100:	f021 010c 	bic.w	r1, r1, #12
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800610e:	430b      	orrs	r3, r1
 8006110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800611e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006122:	6999      	ldr	r1, [r3, #24]
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	ea40 0301 	orr.w	r3, r0, r1
 800612e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	4b8f      	ldr	r3, [pc, #572]	@ (8006374 <UART_SetConfig+0x2cc>)
 8006138:	429a      	cmp	r2, r3
 800613a:	d005      	beq.n	8006148 <UART_SetConfig+0xa0>
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4b8d      	ldr	r3, [pc, #564]	@ (8006378 <UART_SetConfig+0x2d0>)
 8006144:	429a      	cmp	r2, r3
 8006146:	d104      	bne.n	8006152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006148:	f7fe f99e 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 800614c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006150:	e003      	b.n	800615a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006152:	f7fe f985 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 8006156:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800615a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006164:	f040 810c 	bne.w	8006380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800616c:	2200      	movs	r2, #0
 800616e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006172:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800617a:	4622      	mov	r2, r4
 800617c:	462b      	mov	r3, r5
 800617e:	1891      	adds	r1, r2, r2
 8006180:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006182:	415b      	adcs	r3, r3
 8006184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800618a:	4621      	mov	r1, r4
 800618c:	eb12 0801 	adds.w	r8, r2, r1
 8006190:	4629      	mov	r1, r5
 8006192:	eb43 0901 	adc.w	r9, r3, r1
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061aa:	4690      	mov	r8, r2
 80061ac:	4699      	mov	r9, r3
 80061ae:	4623      	mov	r3, r4
 80061b0:	eb18 0303 	adds.w	r3, r8, r3
 80061b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061b8:	462b      	mov	r3, r5
 80061ba:	eb49 0303 	adc.w	r3, r9, r3
 80061be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061d6:	460b      	mov	r3, r1
 80061d8:	18db      	adds	r3, r3, r3
 80061da:	653b      	str	r3, [r7, #80]	@ 0x50
 80061dc:	4613      	mov	r3, r2
 80061de:	eb42 0303 	adc.w	r3, r2, r3
 80061e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80061e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061ec:	f7fa fcf4 	bl	8000bd8 <__aeabi_uldivmod>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4b61      	ldr	r3, [pc, #388]	@ (800637c <UART_SetConfig+0x2d4>)
 80061f6:	fba3 2302 	umull	r2, r3, r3, r2
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	011c      	lsls	r4, r3, #4
 80061fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006202:	2200      	movs	r2, #0
 8006204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006208:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800620c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006210:	4642      	mov	r2, r8
 8006212:	464b      	mov	r3, r9
 8006214:	1891      	adds	r1, r2, r2
 8006216:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006218:	415b      	adcs	r3, r3
 800621a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800621c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006220:	4641      	mov	r1, r8
 8006222:	eb12 0a01 	adds.w	sl, r2, r1
 8006226:	4649      	mov	r1, r9
 8006228:	eb43 0b01 	adc.w	fp, r3, r1
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800623c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006240:	4692      	mov	sl, r2
 8006242:	469b      	mov	fp, r3
 8006244:	4643      	mov	r3, r8
 8006246:	eb1a 0303 	adds.w	r3, sl, r3
 800624a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800624e:	464b      	mov	r3, r9
 8006250:	eb4b 0303 	adc.w	r3, fp, r3
 8006254:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006264:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800626c:	460b      	mov	r3, r1
 800626e:	18db      	adds	r3, r3, r3
 8006270:	643b      	str	r3, [r7, #64]	@ 0x40
 8006272:	4613      	mov	r3, r2
 8006274:	eb42 0303 	adc.w	r3, r2, r3
 8006278:	647b      	str	r3, [r7, #68]	@ 0x44
 800627a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800627e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006282:	f7fa fca9 	bl	8000bd8 <__aeabi_uldivmod>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4611      	mov	r1, r2
 800628c:	4b3b      	ldr	r3, [pc, #236]	@ (800637c <UART_SetConfig+0x2d4>)
 800628e:	fba3 2301 	umull	r2, r3, r3, r1
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	2264      	movs	r2, #100	@ 0x64
 8006296:	fb02 f303 	mul.w	r3, r2, r3
 800629a:	1acb      	subs	r3, r1, r3
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80062a2:	4b36      	ldr	r3, [pc, #216]	@ (800637c <UART_SetConfig+0x2d4>)
 80062a4:	fba3 2302 	umull	r2, r3, r3, r2
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80062b0:	441c      	add	r4, r3
 80062b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062b6:	2200      	movs	r2, #0
 80062b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80062c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80062c4:	4642      	mov	r2, r8
 80062c6:	464b      	mov	r3, r9
 80062c8:	1891      	adds	r1, r2, r2
 80062ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062cc:	415b      	adcs	r3, r3
 80062ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062d4:	4641      	mov	r1, r8
 80062d6:	1851      	adds	r1, r2, r1
 80062d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80062da:	4649      	mov	r1, r9
 80062dc:	414b      	adcs	r3, r1
 80062de:	637b      	str	r3, [r7, #52]	@ 0x34
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062ec:	4659      	mov	r1, fp
 80062ee:	00cb      	lsls	r3, r1, #3
 80062f0:	4651      	mov	r1, sl
 80062f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062f6:	4651      	mov	r1, sl
 80062f8:	00ca      	lsls	r2, r1, #3
 80062fa:	4610      	mov	r0, r2
 80062fc:	4619      	mov	r1, r3
 80062fe:	4603      	mov	r3, r0
 8006300:	4642      	mov	r2, r8
 8006302:	189b      	adds	r3, r3, r2
 8006304:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006308:	464b      	mov	r3, r9
 800630a:	460a      	mov	r2, r1
 800630c:	eb42 0303 	adc.w	r3, r2, r3
 8006310:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006320:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006328:	460b      	mov	r3, r1
 800632a:	18db      	adds	r3, r3, r3
 800632c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800632e:	4613      	mov	r3, r2
 8006330:	eb42 0303 	adc.w	r3, r2, r3
 8006334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800633a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800633e:	f7fa fc4b 	bl	8000bd8 <__aeabi_uldivmod>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	4b0d      	ldr	r3, [pc, #52]	@ (800637c <UART_SetConfig+0x2d4>)
 8006348:	fba3 1302 	umull	r1, r3, r3, r2
 800634c:	095b      	lsrs	r3, r3, #5
 800634e:	2164      	movs	r1, #100	@ 0x64
 8006350:	fb01 f303 	mul.w	r3, r1, r3
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	3332      	adds	r3, #50	@ 0x32
 800635a:	4a08      	ldr	r2, [pc, #32]	@ (800637c <UART_SetConfig+0x2d4>)
 800635c:	fba2 2303 	umull	r2, r3, r2, r3
 8006360:	095b      	lsrs	r3, r3, #5
 8006362:	f003 0207 	and.w	r2, r3, #7
 8006366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4422      	add	r2, r4
 800636e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006370:	e106      	b.n	8006580 <UART_SetConfig+0x4d8>
 8006372:	bf00      	nop
 8006374:	40011000 	.word	0x40011000
 8006378:	40011400 	.word	0x40011400
 800637c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006384:	2200      	movs	r2, #0
 8006386:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800638a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800638e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006392:	4642      	mov	r2, r8
 8006394:	464b      	mov	r3, r9
 8006396:	1891      	adds	r1, r2, r2
 8006398:	6239      	str	r1, [r7, #32]
 800639a:	415b      	adcs	r3, r3
 800639c:	627b      	str	r3, [r7, #36]	@ 0x24
 800639e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063a2:	4641      	mov	r1, r8
 80063a4:	1854      	adds	r4, r2, r1
 80063a6:	4649      	mov	r1, r9
 80063a8:	eb43 0501 	adc.w	r5, r3, r1
 80063ac:	f04f 0200 	mov.w	r2, #0
 80063b0:	f04f 0300 	mov.w	r3, #0
 80063b4:	00eb      	lsls	r3, r5, #3
 80063b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063ba:	00e2      	lsls	r2, r4, #3
 80063bc:	4614      	mov	r4, r2
 80063be:	461d      	mov	r5, r3
 80063c0:	4643      	mov	r3, r8
 80063c2:	18e3      	adds	r3, r4, r3
 80063c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063c8:	464b      	mov	r3, r9
 80063ca:	eb45 0303 	adc.w	r3, r5, r3
 80063ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063e2:	f04f 0200 	mov.w	r2, #0
 80063e6:	f04f 0300 	mov.w	r3, #0
 80063ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063ee:	4629      	mov	r1, r5
 80063f0:	008b      	lsls	r3, r1, #2
 80063f2:	4621      	mov	r1, r4
 80063f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063f8:	4621      	mov	r1, r4
 80063fa:	008a      	lsls	r2, r1, #2
 80063fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006400:	f7fa fbea 	bl	8000bd8 <__aeabi_uldivmod>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	4b60      	ldr	r3, [pc, #384]	@ (800658c <UART_SetConfig+0x4e4>)
 800640a:	fba3 2302 	umull	r2, r3, r3, r2
 800640e:	095b      	lsrs	r3, r3, #5
 8006410:	011c      	lsls	r4, r3, #4
 8006412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006416:	2200      	movs	r2, #0
 8006418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800641c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006424:	4642      	mov	r2, r8
 8006426:	464b      	mov	r3, r9
 8006428:	1891      	adds	r1, r2, r2
 800642a:	61b9      	str	r1, [r7, #24]
 800642c:	415b      	adcs	r3, r3
 800642e:	61fb      	str	r3, [r7, #28]
 8006430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006434:	4641      	mov	r1, r8
 8006436:	1851      	adds	r1, r2, r1
 8006438:	6139      	str	r1, [r7, #16]
 800643a:	4649      	mov	r1, r9
 800643c:	414b      	adcs	r3, r1
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800644c:	4659      	mov	r1, fp
 800644e:	00cb      	lsls	r3, r1, #3
 8006450:	4651      	mov	r1, sl
 8006452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006456:	4651      	mov	r1, sl
 8006458:	00ca      	lsls	r2, r1, #3
 800645a:	4610      	mov	r0, r2
 800645c:	4619      	mov	r1, r3
 800645e:	4603      	mov	r3, r0
 8006460:	4642      	mov	r2, r8
 8006462:	189b      	adds	r3, r3, r2
 8006464:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006468:	464b      	mov	r3, r9
 800646a:	460a      	mov	r2, r1
 800646c:	eb42 0303 	adc.w	r3, r2, r3
 8006470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800647e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	f04f 0300 	mov.w	r3, #0
 8006488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800648c:	4649      	mov	r1, r9
 800648e:	008b      	lsls	r3, r1, #2
 8006490:	4641      	mov	r1, r8
 8006492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006496:	4641      	mov	r1, r8
 8006498:	008a      	lsls	r2, r1, #2
 800649a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800649e:	f7fa fb9b 	bl	8000bd8 <__aeabi_uldivmod>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4611      	mov	r1, r2
 80064a8:	4b38      	ldr	r3, [pc, #224]	@ (800658c <UART_SetConfig+0x4e4>)
 80064aa:	fba3 2301 	umull	r2, r3, r3, r1
 80064ae:	095b      	lsrs	r3, r3, #5
 80064b0:	2264      	movs	r2, #100	@ 0x64
 80064b2:	fb02 f303 	mul.w	r3, r2, r3
 80064b6:	1acb      	subs	r3, r1, r3
 80064b8:	011b      	lsls	r3, r3, #4
 80064ba:	3332      	adds	r3, #50	@ 0x32
 80064bc:	4a33      	ldr	r2, [pc, #204]	@ (800658c <UART_SetConfig+0x4e4>)
 80064be:	fba2 2303 	umull	r2, r3, r2, r3
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064c8:	441c      	add	r4, r3
 80064ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064ce:	2200      	movs	r2, #0
 80064d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80064d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80064d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064d8:	4642      	mov	r2, r8
 80064da:	464b      	mov	r3, r9
 80064dc:	1891      	adds	r1, r2, r2
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	415b      	adcs	r3, r3
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064e8:	4641      	mov	r1, r8
 80064ea:	1851      	adds	r1, r2, r1
 80064ec:	6039      	str	r1, [r7, #0]
 80064ee:	4649      	mov	r1, r9
 80064f0:	414b      	adcs	r3, r1
 80064f2:	607b      	str	r3, [r7, #4]
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006500:	4659      	mov	r1, fp
 8006502:	00cb      	lsls	r3, r1, #3
 8006504:	4651      	mov	r1, sl
 8006506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800650a:	4651      	mov	r1, sl
 800650c:	00ca      	lsls	r2, r1, #3
 800650e:	4610      	mov	r0, r2
 8006510:	4619      	mov	r1, r3
 8006512:	4603      	mov	r3, r0
 8006514:	4642      	mov	r2, r8
 8006516:	189b      	adds	r3, r3, r2
 8006518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800651a:	464b      	mov	r3, r9
 800651c:	460a      	mov	r2, r1
 800651e:	eb42 0303 	adc.w	r3, r2, r3
 8006522:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	663b      	str	r3, [r7, #96]	@ 0x60
 800652e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006530:	f04f 0200 	mov.w	r2, #0
 8006534:	f04f 0300 	mov.w	r3, #0
 8006538:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800653c:	4649      	mov	r1, r9
 800653e:	008b      	lsls	r3, r1, #2
 8006540:	4641      	mov	r1, r8
 8006542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006546:	4641      	mov	r1, r8
 8006548:	008a      	lsls	r2, r1, #2
 800654a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800654e:	f7fa fb43 	bl	8000bd8 <__aeabi_uldivmod>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	4b0d      	ldr	r3, [pc, #52]	@ (800658c <UART_SetConfig+0x4e4>)
 8006558:	fba3 1302 	umull	r1, r3, r3, r2
 800655c:	095b      	lsrs	r3, r3, #5
 800655e:	2164      	movs	r1, #100	@ 0x64
 8006560:	fb01 f303 	mul.w	r3, r1, r3
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	3332      	adds	r3, #50	@ 0x32
 800656a:	4a08      	ldr	r2, [pc, #32]	@ (800658c <UART_SetConfig+0x4e4>)
 800656c:	fba2 2303 	umull	r2, r3, r2, r3
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	f003 020f 	and.w	r2, r3, #15
 8006576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4422      	add	r2, r4
 800657e:	609a      	str	r2, [r3, #8]
}
 8006580:	bf00      	nop
 8006582:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006586:	46bd      	mov	sp, r7
 8006588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800658c:	51eb851f 	.word	0x51eb851f

08006590 <atoi>:
 8006590:	220a      	movs	r2, #10
 8006592:	2100      	movs	r1, #0
 8006594:	f000 b87a 	b.w	800668c <strtol>

08006598 <_strtol_l.isra.0>:
 8006598:	2b24      	cmp	r3, #36	@ 0x24
 800659a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800659e:	4686      	mov	lr, r0
 80065a0:	4690      	mov	r8, r2
 80065a2:	d801      	bhi.n	80065a8 <_strtol_l.isra.0+0x10>
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d106      	bne.n	80065b6 <_strtol_l.isra.0+0x1e>
 80065a8:	f000 ffe8 	bl	800757c <__errno>
 80065ac:	2316      	movs	r3, #22
 80065ae:	6003      	str	r3, [r0, #0]
 80065b0:	2000      	movs	r0, #0
 80065b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b6:	4834      	ldr	r0, [pc, #208]	@ (8006688 <_strtol_l.isra.0+0xf0>)
 80065b8:	460d      	mov	r5, r1
 80065ba:	462a      	mov	r2, r5
 80065bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065c0:	5d06      	ldrb	r6, [r0, r4]
 80065c2:	f016 0608 	ands.w	r6, r6, #8
 80065c6:	d1f8      	bne.n	80065ba <_strtol_l.isra.0+0x22>
 80065c8:	2c2d      	cmp	r4, #45	@ 0x2d
 80065ca:	d110      	bne.n	80065ee <_strtol_l.isra.0+0x56>
 80065cc:	782c      	ldrb	r4, [r5, #0]
 80065ce:	2601      	movs	r6, #1
 80065d0:	1c95      	adds	r5, r2, #2
 80065d2:	f033 0210 	bics.w	r2, r3, #16
 80065d6:	d115      	bne.n	8006604 <_strtol_l.isra.0+0x6c>
 80065d8:	2c30      	cmp	r4, #48	@ 0x30
 80065da:	d10d      	bne.n	80065f8 <_strtol_l.isra.0+0x60>
 80065dc:	782a      	ldrb	r2, [r5, #0]
 80065de:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80065e2:	2a58      	cmp	r2, #88	@ 0x58
 80065e4:	d108      	bne.n	80065f8 <_strtol_l.isra.0+0x60>
 80065e6:	786c      	ldrb	r4, [r5, #1]
 80065e8:	3502      	adds	r5, #2
 80065ea:	2310      	movs	r3, #16
 80065ec:	e00a      	b.n	8006604 <_strtol_l.isra.0+0x6c>
 80065ee:	2c2b      	cmp	r4, #43	@ 0x2b
 80065f0:	bf04      	itt	eq
 80065f2:	782c      	ldrbeq	r4, [r5, #0]
 80065f4:	1c95      	addeq	r5, r2, #2
 80065f6:	e7ec      	b.n	80065d2 <_strtol_l.isra.0+0x3a>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1f6      	bne.n	80065ea <_strtol_l.isra.0+0x52>
 80065fc:	2c30      	cmp	r4, #48	@ 0x30
 80065fe:	bf14      	ite	ne
 8006600:	230a      	movne	r3, #10
 8006602:	2308      	moveq	r3, #8
 8006604:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006608:	f10c 3cff 	add.w	ip, ip, #4294967295
 800660c:	2200      	movs	r2, #0
 800660e:	fbbc f9f3 	udiv	r9, ip, r3
 8006612:	4610      	mov	r0, r2
 8006614:	fb03 ca19 	mls	sl, r3, r9, ip
 8006618:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800661c:	2f09      	cmp	r7, #9
 800661e:	d80f      	bhi.n	8006640 <_strtol_l.isra.0+0xa8>
 8006620:	463c      	mov	r4, r7
 8006622:	42a3      	cmp	r3, r4
 8006624:	dd1b      	ble.n	800665e <_strtol_l.isra.0+0xc6>
 8006626:	1c57      	adds	r7, r2, #1
 8006628:	d007      	beq.n	800663a <_strtol_l.isra.0+0xa2>
 800662a:	4581      	cmp	r9, r0
 800662c:	d314      	bcc.n	8006658 <_strtol_l.isra.0+0xc0>
 800662e:	d101      	bne.n	8006634 <_strtol_l.isra.0+0x9c>
 8006630:	45a2      	cmp	sl, r4
 8006632:	db11      	blt.n	8006658 <_strtol_l.isra.0+0xc0>
 8006634:	fb00 4003 	mla	r0, r0, r3, r4
 8006638:	2201      	movs	r2, #1
 800663a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800663e:	e7eb      	b.n	8006618 <_strtol_l.isra.0+0x80>
 8006640:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006644:	2f19      	cmp	r7, #25
 8006646:	d801      	bhi.n	800664c <_strtol_l.isra.0+0xb4>
 8006648:	3c37      	subs	r4, #55	@ 0x37
 800664a:	e7ea      	b.n	8006622 <_strtol_l.isra.0+0x8a>
 800664c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006650:	2f19      	cmp	r7, #25
 8006652:	d804      	bhi.n	800665e <_strtol_l.isra.0+0xc6>
 8006654:	3c57      	subs	r4, #87	@ 0x57
 8006656:	e7e4      	b.n	8006622 <_strtol_l.isra.0+0x8a>
 8006658:	f04f 32ff 	mov.w	r2, #4294967295
 800665c:	e7ed      	b.n	800663a <_strtol_l.isra.0+0xa2>
 800665e:	1c53      	adds	r3, r2, #1
 8006660:	d108      	bne.n	8006674 <_strtol_l.isra.0+0xdc>
 8006662:	2322      	movs	r3, #34	@ 0x22
 8006664:	f8ce 3000 	str.w	r3, [lr]
 8006668:	4660      	mov	r0, ip
 800666a:	f1b8 0f00 	cmp.w	r8, #0
 800666e:	d0a0      	beq.n	80065b2 <_strtol_l.isra.0+0x1a>
 8006670:	1e69      	subs	r1, r5, #1
 8006672:	e006      	b.n	8006682 <_strtol_l.isra.0+0xea>
 8006674:	b106      	cbz	r6, 8006678 <_strtol_l.isra.0+0xe0>
 8006676:	4240      	negs	r0, r0
 8006678:	f1b8 0f00 	cmp.w	r8, #0
 800667c:	d099      	beq.n	80065b2 <_strtol_l.isra.0+0x1a>
 800667e:	2a00      	cmp	r2, #0
 8006680:	d1f6      	bne.n	8006670 <_strtol_l.isra.0+0xd8>
 8006682:	f8c8 1000 	str.w	r1, [r8]
 8006686:	e794      	b.n	80065b2 <_strtol_l.isra.0+0x1a>
 8006688:	08009939 	.word	0x08009939

0800668c <strtol>:
 800668c:	4613      	mov	r3, r2
 800668e:	460a      	mov	r2, r1
 8006690:	4601      	mov	r1, r0
 8006692:	4802      	ldr	r0, [pc, #8]	@ (800669c <strtol+0x10>)
 8006694:	6800      	ldr	r0, [r0, #0]
 8006696:	f7ff bf7f 	b.w	8006598 <_strtol_l.isra.0>
 800669a:	bf00      	nop
 800669c:	2000001c 	.word	0x2000001c

080066a0 <__cvt>:
 80066a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066a4:	ec57 6b10 	vmov	r6, r7, d0
 80066a8:	2f00      	cmp	r7, #0
 80066aa:	460c      	mov	r4, r1
 80066ac:	4619      	mov	r1, r3
 80066ae:	463b      	mov	r3, r7
 80066b0:	bfbb      	ittet	lt
 80066b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80066b6:	461f      	movlt	r7, r3
 80066b8:	2300      	movge	r3, #0
 80066ba:	232d      	movlt	r3, #45	@ 0x2d
 80066bc:	700b      	strb	r3, [r1, #0]
 80066be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80066c4:	4691      	mov	r9, r2
 80066c6:	f023 0820 	bic.w	r8, r3, #32
 80066ca:	bfbc      	itt	lt
 80066cc:	4632      	movlt	r2, r6
 80066ce:	4616      	movlt	r6, r2
 80066d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066d4:	d005      	beq.n	80066e2 <__cvt+0x42>
 80066d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80066da:	d100      	bne.n	80066de <__cvt+0x3e>
 80066dc:	3401      	adds	r4, #1
 80066de:	2102      	movs	r1, #2
 80066e0:	e000      	b.n	80066e4 <__cvt+0x44>
 80066e2:	2103      	movs	r1, #3
 80066e4:	ab03      	add	r3, sp, #12
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	ab02      	add	r3, sp, #8
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	ec47 6b10 	vmov	d0, r6, r7
 80066f0:	4653      	mov	r3, sl
 80066f2:	4622      	mov	r2, r4
 80066f4:	f001 f82c 	bl	8007750 <_dtoa_r>
 80066f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80066fc:	4605      	mov	r5, r0
 80066fe:	d119      	bne.n	8006734 <__cvt+0x94>
 8006700:	f019 0f01 	tst.w	r9, #1
 8006704:	d00e      	beq.n	8006724 <__cvt+0x84>
 8006706:	eb00 0904 	add.w	r9, r0, r4
 800670a:	2200      	movs	r2, #0
 800670c:	2300      	movs	r3, #0
 800670e:	4630      	mov	r0, r6
 8006710:	4639      	mov	r1, r7
 8006712:	f7fa f9f1 	bl	8000af8 <__aeabi_dcmpeq>
 8006716:	b108      	cbz	r0, 800671c <__cvt+0x7c>
 8006718:	f8cd 900c 	str.w	r9, [sp, #12]
 800671c:	2230      	movs	r2, #48	@ 0x30
 800671e:	9b03      	ldr	r3, [sp, #12]
 8006720:	454b      	cmp	r3, r9
 8006722:	d31e      	bcc.n	8006762 <__cvt+0xc2>
 8006724:	9b03      	ldr	r3, [sp, #12]
 8006726:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006728:	1b5b      	subs	r3, r3, r5
 800672a:	4628      	mov	r0, r5
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	b004      	add	sp, #16
 8006730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006734:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006738:	eb00 0904 	add.w	r9, r0, r4
 800673c:	d1e5      	bne.n	800670a <__cvt+0x6a>
 800673e:	7803      	ldrb	r3, [r0, #0]
 8006740:	2b30      	cmp	r3, #48	@ 0x30
 8006742:	d10a      	bne.n	800675a <__cvt+0xba>
 8006744:	2200      	movs	r2, #0
 8006746:	2300      	movs	r3, #0
 8006748:	4630      	mov	r0, r6
 800674a:	4639      	mov	r1, r7
 800674c:	f7fa f9d4 	bl	8000af8 <__aeabi_dcmpeq>
 8006750:	b918      	cbnz	r0, 800675a <__cvt+0xba>
 8006752:	f1c4 0401 	rsb	r4, r4, #1
 8006756:	f8ca 4000 	str.w	r4, [sl]
 800675a:	f8da 3000 	ldr.w	r3, [sl]
 800675e:	4499      	add	r9, r3
 8006760:	e7d3      	b.n	800670a <__cvt+0x6a>
 8006762:	1c59      	adds	r1, r3, #1
 8006764:	9103      	str	r1, [sp, #12]
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	e7d9      	b.n	800671e <__cvt+0x7e>

0800676a <__exponent>:
 800676a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800676c:	2900      	cmp	r1, #0
 800676e:	bfba      	itte	lt
 8006770:	4249      	neglt	r1, r1
 8006772:	232d      	movlt	r3, #45	@ 0x2d
 8006774:	232b      	movge	r3, #43	@ 0x2b
 8006776:	2909      	cmp	r1, #9
 8006778:	7002      	strb	r2, [r0, #0]
 800677a:	7043      	strb	r3, [r0, #1]
 800677c:	dd29      	ble.n	80067d2 <__exponent+0x68>
 800677e:	f10d 0307 	add.w	r3, sp, #7
 8006782:	461d      	mov	r5, r3
 8006784:	270a      	movs	r7, #10
 8006786:	461a      	mov	r2, r3
 8006788:	fbb1 f6f7 	udiv	r6, r1, r7
 800678c:	fb07 1416 	mls	r4, r7, r6, r1
 8006790:	3430      	adds	r4, #48	@ 0x30
 8006792:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006796:	460c      	mov	r4, r1
 8006798:	2c63      	cmp	r4, #99	@ 0x63
 800679a:	f103 33ff 	add.w	r3, r3, #4294967295
 800679e:	4631      	mov	r1, r6
 80067a0:	dcf1      	bgt.n	8006786 <__exponent+0x1c>
 80067a2:	3130      	adds	r1, #48	@ 0x30
 80067a4:	1e94      	subs	r4, r2, #2
 80067a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80067aa:	1c41      	adds	r1, r0, #1
 80067ac:	4623      	mov	r3, r4
 80067ae:	42ab      	cmp	r3, r5
 80067b0:	d30a      	bcc.n	80067c8 <__exponent+0x5e>
 80067b2:	f10d 0309 	add.w	r3, sp, #9
 80067b6:	1a9b      	subs	r3, r3, r2
 80067b8:	42ac      	cmp	r4, r5
 80067ba:	bf88      	it	hi
 80067bc:	2300      	movhi	r3, #0
 80067be:	3302      	adds	r3, #2
 80067c0:	4403      	add	r3, r0
 80067c2:	1a18      	subs	r0, r3, r0
 80067c4:	b003      	add	sp, #12
 80067c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80067cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80067d0:	e7ed      	b.n	80067ae <__exponent+0x44>
 80067d2:	2330      	movs	r3, #48	@ 0x30
 80067d4:	3130      	adds	r1, #48	@ 0x30
 80067d6:	7083      	strb	r3, [r0, #2]
 80067d8:	70c1      	strb	r1, [r0, #3]
 80067da:	1d03      	adds	r3, r0, #4
 80067dc:	e7f1      	b.n	80067c2 <__exponent+0x58>
	...

080067e0 <_printf_float>:
 80067e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e4:	b08d      	sub	sp, #52	@ 0x34
 80067e6:	460c      	mov	r4, r1
 80067e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80067ec:	4616      	mov	r6, r2
 80067ee:	461f      	mov	r7, r3
 80067f0:	4605      	mov	r5, r0
 80067f2:	f000 fe79 	bl	80074e8 <_localeconv_r>
 80067f6:	6803      	ldr	r3, [r0, #0]
 80067f8:	9304      	str	r3, [sp, #16]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7f9 fd50 	bl	80002a0 <strlen>
 8006800:	2300      	movs	r3, #0
 8006802:	930a      	str	r3, [sp, #40]	@ 0x28
 8006804:	f8d8 3000 	ldr.w	r3, [r8]
 8006808:	9005      	str	r0, [sp, #20]
 800680a:	3307      	adds	r3, #7
 800680c:	f023 0307 	bic.w	r3, r3, #7
 8006810:	f103 0208 	add.w	r2, r3, #8
 8006814:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006818:	f8d4 b000 	ldr.w	fp, [r4]
 800681c:	f8c8 2000 	str.w	r2, [r8]
 8006820:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006824:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006828:	9307      	str	r3, [sp, #28]
 800682a:	f8cd 8018 	str.w	r8, [sp, #24]
 800682e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006836:	4b9c      	ldr	r3, [pc, #624]	@ (8006aa8 <_printf_float+0x2c8>)
 8006838:	f04f 32ff 	mov.w	r2, #4294967295
 800683c:	f7fa f98e 	bl	8000b5c <__aeabi_dcmpun>
 8006840:	bb70      	cbnz	r0, 80068a0 <_printf_float+0xc0>
 8006842:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006846:	4b98      	ldr	r3, [pc, #608]	@ (8006aa8 <_printf_float+0x2c8>)
 8006848:	f04f 32ff 	mov.w	r2, #4294967295
 800684c:	f7fa f968 	bl	8000b20 <__aeabi_dcmple>
 8006850:	bb30      	cbnz	r0, 80068a0 <_printf_float+0xc0>
 8006852:	2200      	movs	r2, #0
 8006854:	2300      	movs	r3, #0
 8006856:	4640      	mov	r0, r8
 8006858:	4649      	mov	r1, r9
 800685a:	f7fa f957 	bl	8000b0c <__aeabi_dcmplt>
 800685e:	b110      	cbz	r0, 8006866 <_printf_float+0x86>
 8006860:	232d      	movs	r3, #45	@ 0x2d
 8006862:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006866:	4a91      	ldr	r2, [pc, #580]	@ (8006aac <_printf_float+0x2cc>)
 8006868:	4b91      	ldr	r3, [pc, #580]	@ (8006ab0 <_printf_float+0x2d0>)
 800686a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800686e:	bf8c      	ite	hi
 8006870:	4690      	movhi	r8, r2
 8006872:	4698      	movls	r8, r3
 8006874:	2303      	movs	r3, #3
 8006876:	6123      	str	r3, [r4, #16]
 8006878:	f02b 0304 	bic.w	r3, fp, #4
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	f04f 0900 	mov.w	r9, #0
 8006882:	9700      	str	r7, [sp, #0]
 8006884:	4633      	mov	r3, r6
 8006886:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006888:	4621      	mov	r1, r4
 800688a:	4628      	mov	r0, r5
 800688c:	f000 f9d2 	bl	8006c34 <_printf_common>
 8006890:	3001      	adds	r0, #1
 8006892:	f040 808d 	bne.w	80069b0 <_printf_float+0x1d0>
 8006896:	f04f 30ff 	mov.w	r0, #4294967295
 800689a:	b00d      	add	sp, #52	@ 0x34
 800689c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a0:	4642      	mov	r2, r8
 80068a2:	464b      	mov	r3, r9
 80068a4:	4640      	mov	r0, r8
 80068a6:	4649      	mov	r1, r9
 80068a8:	f7fa f958 	bl	8000b5c <__aeabi_dcmpun>
 80068ac:	b140      	cbz	r0, 80068c0 <_printf_float+0xe0>
 80068ae:	464b      	mov	r3, r9
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	bfbc      	itt	lt
 80068b4:	232d      	movlt	r3, #45	@ 0x2d
 80068b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80068ba:	4a7e      	ldr	r2, [pc, #504]	@ (8006ab4 <_printf_float+0x2d4>)
 80068bc:	4b7e      	ldr	r3, [pc, #504]	@ (8006ab8 <_printf_float+0x2d8>)
 80068be:	e7d4      	b.n	800686a <_printf_float+0x8a>
 80068c0:	6863      	ldr	r3, [r4, #4]
 80068c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80068c6:	9206      	str	r2, [sp, #24]
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	d13b      	bne.n	8006944 <_printf_float+0x164>
 80068cc:	2306      	movs	r3, #6
 80068ce:	6063      	str	r3, [r4, #4]
 80068d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80068d4:	2300      	movs	r3, #0
 80068d6:	6022      	str	r2, [r4, #0]
 80068d8:	9303      	str	r3, [sp, #12]
 80068da:	ab0a      	add	r3, sp, #40	@ 0x28
 80068dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80068e0:	ab09      	add	r3, sp, #36	@ 0x24
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	6861      	ldr	r1, [r4, #4]
 80068e6:	ec49 8b10 	vmov	d0, r8, r9
 80068ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80068ee:	4628      	mov	r0, r5
 80068f0:	f7ff fed6 	bl	80066a0 <__cvt>
 80068f4:	9b06      	ldr	r3, [sp, #24]
 80068f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80068f8:	2b47      	cmp	r3, #71	@ 0x47
 80068fa:	4680      	mov	r8, r0
 80068fc:	d129      	bne.n	8006952 <_printf_float+0x172>
 80068fe:	1cc8      	adds	r0, r1, #3
 8006900:	db02      	blt.n	8006908 <_printf_float+0x128>
 8006902:	6863      	ldr	r3, [r4, #4]
 8006904:	4299      	cmp	r1, r3
 8006906:	dd41      	ble.n	800698c <_printf_float+0x1ac>
 8006908:	f1aa 0a02 	sub.w	sl, sl, #2
 800690c:	fa5f fa8a 	uxtb.w	sl, sl
 8006910:	3901      	subs	r1, #1
 8006912:	4652      	mov	r2, sl
 8006914:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006918:	9109      	str	r1, [sp, #36]	@ 0x24
 800691a:	f7ff ff26 	bl	800676a <__exponent>
 800691e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006920:	1813      	adds	r3, r2, r0
 8006922:	2a01      	cmp	r2, #1
 8006924:	4681      	mov	r9, r0
 8006926:	6123      	str	r3, [r4, #16]
 8006928:	dc02      	bgt.n	8006930 <_printf_float+0x150>
 800692a:	6822      	ldr	r2, [r4, #0]
 800692c:	07d2      	lsls	r2, r2, #31
 800692e:	d501      	bpl.n	8006934 <_printf_float+0x154>
 8006930:	3301      	adds	r3, #1
 8006932:	6123      	str	r3, [r4, #16]
 8006934:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0a2      	beq.n	8006882 <_printf_float+0xa2>
 800693c:	232d      	movs	r3, #45	@ 0x2d
 800693e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006942:	e79e      	b.n	8006882 <_printf_float+0xa2>
 8006944:	9a06      	ldr	r2, [sp, #24]
 8006946:	2a47      	cmp	r2, #71	@ 0x47
 8006948:	d1c2      	bne.n	80068d0 <_printf_float+0xf0>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1c0      	bne.n	80068d0 <_printf_float+0xf0>
 800694e:	2301      	movs	r3, #1
 8006950:	e7bd      	b.n	80068ce <_printf_float+0xee>
 8006952:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006956:	d9db      	bls.n	8006910 <_printf_float+0x130>
 8006958:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800695c:	d118      	bne.n	8006990 <_printf_float+0x1b0>
 800695e:	2900      	cmp	r1, #0
 8006960:	6863      	ldr	r3, [r4, #4]
 8006962:	dd0b      	ble.n	800697c <_printf_float+0x19c>
 8006964:	6121      	str	r1, [r4, #16]
 8006966:	b913      	cbnz	r3, 800696e <_printf_float+0x18e>
 8006968:	6822      	ldr	r2, [r4, #0]
 800696a:	07d0      	lsls	r0, r2, #31
 800696c:	d502      	bpl.n	8006974 <_printf_float+0x194>
 800696e:	3301      	adds	r3, #1
 8006970:	440b      	add	r3, r1
 8006972:	6123      	str	r3, [r4, #16]
 8006974:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006976:	f04f 0900 	mov.w	r9, #0
 800697a:	e7db      	b.n	8006934 <_printf_float+0x154>
 800697c:	b913      	cbnz	r3, 8006984 <_printf_float+0x1a4>
 800697e:	6822      	ldr	r2, [r4, #0]
 8006980:	07d2      	lsls	r2, r2, #31
 8006982:	d501      	bpl.n	8006988 <_printf_float+0x1a8>
 8006984:	3302      	adds	r3, #2
 8006986:	e7f4      	b.n	8006972 <_printf_float+0x192>
 8006988:	2301      	movs	r3, #1
 800698a:	e7f2      	b.n	8006972 <_printf_float+0x192>
 800698c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006992:	4299      	cmp	r1, r3
 8006994:	db05      	blt.n	80069a2 <_printf_float+0x1c2>
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	6121      	str	r1, [r4, #16]
 800699a:	07d8      	lsls	r0, r3, #31
 800699c:	d5ea      	bpl.n	8006974 <_printf_float+0x194>
 800699e:	1c4b      	adds	r3, r1, #1
 80069a0:	e7e7      	b.n	8006972 <_printf_float+0x192>
 80069a2:	2900      	cmp	r1, #0
 80069a4:	bfd4      	ite	le
 80069a6:	f1c1 0202 	rsble	r2, r1, #2
 80069aa:	2201      	movgt	r2, #1
 80069ac:	4413      	add	r3, r2
 80069ae:	e7e0      	b.n	8006972 <_printf_float+0x192>
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	055a      	lsls	r2, r3, #21
 80069b4:	d407      	bmi.n	80069c6 <_printf_float+0x1e6>
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	4642      	mov	r2, r8
 80069ba:	4631      	mov	r1, r6
 80069bc:	4628      	mov	r0, r5
 80069be:	47b8      	blx	r7
 80069c0:	3001      	adds	r0, #1
 80069c2:	d12b      	bne.n	8006a1c <_printf_float+0x23c>
 80069c4:	e767      	b.n	8006896 <_printf_float+0xb6>
 80069c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069ca:	f240 80dd 	bls.w	8006b88 <_printf_float+0x3a8>
 80069ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069d2:	2200      	movs	r2, #0
 80069d4:	2300      	movs	r3, #0
 80069d6:	f7fa f88f 	bl	8000af8 <__aeabi_dcmpeq>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d033      	beq.n	8006a46 <_printf_float+0x266>
 80069de:	4a37      	ldr	r2, [pc, #220]	@ (8006abc <_printf_float+0x2dc>)
 80069e0:	2301      	movs	r3, #1
 80069e2:	4631      	mov	r1, r6
 80069e4:	4628      	mov	r0, r5
 80069e6:	47b8      	blx	r7
 80069e8:	3001      	adds	r0, #1
 80069ea:	f43f af54 	beq.w	8006896 <_printf_float+0xb6>
 80069ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80069f2:	4543      	cmp	r3, r8
 80069f4:	db02      	blt.n	80069fc <_printf_float+0x21c>
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	07d8      	lsls	r0, r3, #31
 80069fa:	d50f      	bpl.n	8006a1c <_printf_float+0x23c>
 80069fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a00:	4631      	mov	r1, r6
 8006a02:	4628      	mov	r0, r5
 8006a04:	47b8      	blx	r7
 8006a06:	3001      	adds	r0, #1
 8006a08:	f43f af45 	beq.w	8006896 <_printf_float+0xb6>
 8006a0c:	f04f 0900 	mov.w	r9, #0
 8006a10:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a14:	f104 0a1a 	add.w	sl, r4, #26
 8006a18:	45c8      	cmp	r8, r9
 8006a1a:	dc09      	bgt.n	8006a30 <_printf_float+0x250>
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	079b      	lsls	r3, r3, #30
 8006a20:	f100 8103 	bmi.w	8006c2a <_printf_float+0x44a>
 8006a24:	68e0      	ldr	r0, [r4, #12]
 8006a26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a28:	4298      	cmp	r0, r3
 8006a2a:	bfb8      	it	lt
 8006a2c:	4618      	movlt	r0, r3
 8006a2e:	e734      	b.n	800689a <_printf_float+0xba>
 8006a30:	2301      	movs	r3, #1
 8006a32:	4652      	mov	r2, sl
 8006a34:	4631      	mov	r1, r6
 8006a36:	4628      	mov	r0, r5
 8006a38:	47b8      	blx	r7
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	f43f af2b 	beq.w	8006896 <_printf_float+0xb6>
 8006a40:	f109 0901 	add.w	r9, r9, #1
 8006a44:	e7e8      	b.n	8006a18 <_printf_float+0x238>
 8006a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	dc39      	bgt.n	8006ac0 <_printf_float+0x2e0>
 8006a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8006abc <_printf_float+0x2dc>)
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4631      	mov	r1, r6
 8006a52:	4628      	mov	r0, r5
 8006a54:	47b8      	blx	r7
 8006a56:	3001      	adds	r0, #1
 8006a58:	f43f af1d 	beq.w	8006896 <_printf_float+0xb6>
 8006a5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006a60:	ea59 0303 	orrs.w	r3, r9, r3
 8006a64:	d102      	bne.n	8006a6c <_printf_float+0x28c>
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	07d9      	lsls	r1, r3, #31
 8006a6a:	d5d7      	bpl.n	8006a1c <_printf_float+0x23c>
 8006a6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a70:	4631      	mov	r1, r6
 8006a72:	4628      	mov	r0, r5
 8006a74:	47b8      	blx	r7
 8006a76:	3001      	adds	r0, #1
 8006a78:	f43f af0d 	beq.w	8006896 <_printf_float+0xb6>
 8006a7c:	f04f 0a00 	mov.w	sl, #0
 8006a80:	f104 0b1a 	add.w	fp, r4, #26
 8006a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a86:	425b      	negs	r3, r3
 8006a88:	4553      	cmp	r3, sl
 8006a8a:	dc01      	bgt.n	8006a90 <_printf_float+0x2b0>
 8006a8c:	464b      	mov	r3, r9
 8006a8e:	e793      	b.n	80069b8 <_printf_float+0x1d8>
 8006a90:	2301      	movs	r3, #1
 8006a92:	465a      	mov	r2, fp
 8006a94:	4631      	mov	r1, r6
 8006a96:	4628      	mov	r0, r5
 8006a98:	47b8      	blx	r7
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	f43f aefb 	beq.w	8006896 <_printf_float+0xb6>
 8006aa0:	f10a 0a01 	add.w	sl, sl, #1
 8006aa4:	e7ee      	b.n	8006a84 <_printf_float+0x2a4>
 8006aa6:	bf00      	nop
 8006aa8:	7fefffff 	.word	0x7fefffff
 8006aac:	08009a3d 	.word	0x08009a3d
 8006ab0:	08009a39 	.word	0x08009a39
 8006ab4:	08009a45 	.word	0x08009a45
 8006ab8:	08009a41 	.word	0x08009a41
 8006abc:	08009a49 	.word	0x08009a49
 8006ac0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ac2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ac6:	4553      	cmp	r3, sl
 8006ac8:	bfa8      	it	ge
 8006aca:	4653      	movge	r3, sl
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	4699      	mov	r9, r3
 8006ad0:	dc36      	bgt.n	8006b40 <_printf_float+0x360>
 8006ad2:	f04f 0b00 	mov.w	fp, #0
 8006ad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ada:	f104 021a 	add.w	r2, r4, #26
 8006ade:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ae0:	9306      	str	r3, [sp, #24]
 8006ae2:	eba3 0309 	sub.w	r3, r3, r9
 8006ae6:	455b      	cmp	r3, fp
 8006ae8:	dc31      	bgt.n	8006b4e <_printf_float+0x36e>
 8006aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aec:	459a      	cmp	sl, r3
 8006aee:	dc3a      	bgt.n	8006b66 <_printf_float+0x386>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	07da      	lsls	r2, r3, #31
 8006af4:	d437      	bmi.n	8006b66 <_printf_float+0x386>
 8006af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006af8:	ebaa 0903 	sub.w	r9, sl, r3
 8006afc:	9b06      	ldr	r3, [sp, #24]
 8006afe:	ebaa 0303 	sub.w	r3, sl, r3
 8006b02:	4599      	cmp	r9, r3
 8006b04:	bfa8      	it	ge
 8006b06:	4699      	movge	r9, r3
 8006b08:	f1b9 0f00 	cmp.w	r9, #0
 8006b0c:	dc33      	bgt.n	8006b76 <_printf_float+0x396>
 8006b0e:	f04f 0800 	mov.w	r8, #0
 8006b12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b16:	f104 0b1a 	add.w	fp, r4, #26
 8006b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b1c:	ebaa 0303 	sub.w	r3, sl, r3
 8006b20:	eba3 0309 	sub.w	r3, r3, r9
 8006b24:	4543      	cmp	r3, r8
 8006b26:	f77f af79 	ble.w	8006a1c <_printf_float+0x23c>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	465a      	mov	r2, fp
 8006b2e:	4631      	mov	r1, r6
 8006b30:	4628      	mov	r0, r5
 8006b32:	47b8      	blx	r7
 8006b34:	3001      	adds	r0, #1
 8006b36:	f43f aeae 	beq.w	8006896 <_printf_float+0xb6>
 8006b3a:	f108 0801 	add.w	r8, r8, #1
 8006b3e:	e7ec      	b.n	8006b1a <_printf_float+0x33a>
 8006b40:	4642      	mov	r2, r8
 8006b42:	4631      	mov	r1, r6
 8006b44:	4628      	mov	r0, r5
 8006b46:	47b8      	blx	r7
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d1c2      	bne.n	8006ad2 <_printf_float+0x2f2>
 8006b4c:	e6a3      	b.n	8006896 <_printf_float+0xb6>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	4631      	mov	r1, r6
 8006b52:	4628      	mov	r0, r5
 8006b54:	9206      	str	r2, [sp, #24]
 8006b56:	47b8      	blx	r7
 8006b58:	3001      	adds	r0, #1
 8006b5a:	f43f ae9c 	beq.w	8006896 <_printf_float+0xb6>
 8006b5e:	9a06      	ldr	r2, [sp, #24]
 8006b60:	f10b 0b01 	add.w	fp, fp, #1
 8006b64:	e7bb      	b.n	8006ade <_printf_float+0x2fe>
 8006b66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	47b8      	blx	r7
 8006b70:	3001      	adds	r0, #1
 8006b72:	d1c0      	bne.n	8006af6 <_printf_float+0x316>
 8006b74:	e68f      	b.n	8006896 <_printf_float+0xb6>
 8006b76:	9a06      	ldr	r2, [sp, #24]
 8006b78:	464b      	mov	r3, r9
 8006b7a:	4442      	add	r2, r8
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	4628      	mov	r0, r5
 8006b80:	47b8      	blx	r7
 8006b82:	3001      	adds	r0, #1
 8006b84:	d1c3      	bne.n	8006b0e <_printf_float+0x32e>
 8006b86:	e686      	b.n	8006896 <_printf_float+0xb6>
 8006b88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b8c:	f1ba 0f01 	cmp.w	sl, #1
 8006b90:	dc01      	bgt.n	8006b96 <_printf_float+0x3b6>
 8006b92:	07db      	lsls	r3, r3, #31
 8006b94:	d536      	bpl.n	8006c04 <_printf_float+0x424>
 8006b96:	2301      	movs	r3, #1
 8006b98:	4642      	mov	r2, r8
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	47b8      	blx	r7
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	f43f ae78 	beq.w	8006896 <_printf_float+0xb6>
 8006ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006baa:	4631      	mov	r1, r6
 8006bac:	4628      	mov	r0, r5
 8006bae:	47b8      	blx	r7
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	f43f ae70 	beq.w	8006896 <_printf_float+0xb6>
 8006bb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bc2:	f7f9 ff99 	bl	8000af8 <__aeabi_dcmpeq>
 8006bc6:	b9c0      	cbnz	r0, 8006bfa <_printf_float+0x41a>
 8006bc8:	4653      	mov	r3, sl
 8006bca:	f108 0201 	add.w	r2, r8, #1
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b8      	blx	r7
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d10c      	bne.n	8006bf2 <_printf_float+0x412>
 8006bd8:	e65d      	b.n	8006896 <_printf_float+0xb6>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	465a      	mov	r2, fp
 8006bde:	4631      	mov	r1, r6
 8006be0:	4628      	mov	r0, r5
 8006be2:	47b8      	blx	r7
 8006be4:	3001      	adds	r0, #1
 8006be6:	f43f ae56 	beq.w	8006896 <_printf_float+0xb6>
 8006bea:	f108 0801 	add.w	r8, r8, #1
 8006bee:	45d0      	cmp	r8, sl
 8006bf0:	dbf3      	blt.n	8006bda <_printf_float+0x3fa>
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006bf8:	e6df      	b.n	80069ba <_printf_float+0x1da>
 8006bfa:	f04f 0800 	mov.w	r8, #0
 8006bfe:	f104 0b1a 	add.w	fp, r4, #26
 8006c02:	e7f4      	b.n	8006bee <_printf_float+0x40e>
 8006c04:	2301      	movs	r3, #1
 8006c06:	4642      	mov	r2, r8
 8006c08:	e7e1      	b.n	8006bce <_printf_float+0x3ee>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	464a      	mov	r2, r9
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4628      	mov	r0, r5
 8006c12:	47b8      	blx	r7
 8006c14:	3001      	adds	r0, #1
 8006c16:	f43f ae3e 	beq.w	8006896 <_printf_float+0xb6>
 8006c1a:	f108 0801 	add.w	r8, r8, #1
 8006c1e:	68e3      	ldr	r3, [r4, #12]
 8006c20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c22:	1a5b      	subs	r3, r3, r1
 8006c24:	4543      	cmp	r3, r8
 8006c26:	dcf0      	bgt.n	8006c0a <_printf_float+0x42a>
 8006c28:	e6fc      	b.n	8006a24 <_printf_float+0x244>
 8006c2a:	f04f 0800 	mov.w	r8, #0
 8006c2e:	f104 0919 	add.w	r9, r4, #25
 8006c32:	e7f4      	b.n	8006c1e <_printf_float+0x43e>

08006c34 <_printf_common>:
 8006c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c38:	4616      	mov	r6, r2
 8006c3a:	4698      	mov	r8, r3
 8006c3c:	688a      	ldr	r2, [r1, #8]
 8006c3e:	690b      	ldr	r3, [r1, #16]
 8006c40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c44:	4293      	cmp	r3, r2
 8006c46:	bfb8      	it	lt
 8006c48:	4613      	movlt	r3, r2
 8006c4a:	6033      	str	r3, [r6, #0]
 8006c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c50:	4607      	mov	r7, r0
 8006c52:	460c      	mov	r4, r1
 8006c54:	b10a      	cbz	r2, 8006c5a <_printf_common+0x26>
 8006c56:	3301      	adds	r3, #1
 8006c58:	6033      	str	r3, [r6, #0]
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	0699      	lsls	r1, r3, #26
 8006c5e:	bf42      	ittt	mi
 8006c60:	6833      	ldrmi	r3, [r6, #0]
 8006c62:	3302      	addmi	r3, #2
 8006c64:	6033      	strmi	r3, [r6, #0]
 8006c66:	6825      	ldr	r5, [r4, #0]
 8006c68:	f015 0506 	ands.w	r5, r5, #6
 8006c6c:	d106      	bne.n	8006c7c <_printf_common+0x48>
 8006c6e:	f104 0a19 	add.w	sl, r4, #25
 8006c72:	68e3      	ldr	r3, [r4, #12]
 8006c74:	6832      	ldr	r2, [r6, #0]
 8006c76:	1a9b      	subs	r3, r3, r2
 8006c78:	42ab      	cmp	r3, r5
 8006c7a:	dc26      	bgt.n	8006cca <_printf_common+0x96>
 8006c7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c80:	6822      	ldr	r2, [r4, #0]
 8006c82:	3b00      	subs	r3, #0
 8006c84:	bf18      	it	ne
 8006c86:	2301      	movne	r3, #1
 8006c88:	0692      	lsls	r2, r2, #26
 8006c8a:	d42b      	bmi.n	8006ce4 <_printf_common+0xb0>
 8006c8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c90:	4641      	mov	r1, r8
 8006c92:	4638      	mov	r0, r7
 8006c94:	47c8      	blx	r9
 8006c96:	3001      	adds	r0, #1
 8006c98:	d01e      	beq.n	8006cd8 <_printf_common+0xa4>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	6922      	ldr	r2, [r4, #16]
 8006c9e:	f003 0306 	and.w	r3, r3, #6
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	bf02      	ittt	eq
 8006ca6:	68e5      	ldreq	r5, [r4, #12]
 8006ca8:	6833      	ldreq	r3, [r6, #0]
 8006caa:	1aed      	subeq	r5, r5, r3
 8006cac:	68a3      	ldr	r3, [r4, #8]
 8006cae:	bf0c      	ite	eq
 8006cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cb4:	2500      	movne	r5, #0
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	bfc4      	itt	gt
 8006cba:	1a9b      	subgt	r3, r3, r2
 8006cbc:	18ed      	addgt	r5, r5, r3
 8006cbe:	2600      	movs	r6, #0
 8006cc0:	341a      	adds	r4, #26
 8006cc2:	42b5      	cmp	r5, r6
 8006cc4:	d11a      	bne.n	8006cfc <_printf_common+0xc8>
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	e008      	b.n	8006cdc <_printf_common+0xa8>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	4652      	mov	r2, sl
 8006cce:	4641      	mov	r1, r8
 8006cd0:	4638      	mov	r0, r7
 8006cd2:	47c8      	blx	r9
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d103      	bne.n	8006ce0 <_printf_common+0xac>
 8006cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce0:	3501      	adds	r5, #1
 8006ce2:	e7c6      	b.n	8006c72 <_printf_common+0x3e>
 8006ce4:	18e1      	adds	r1, r4, r3
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	2030      	movs	r0, #48	@ 0x30
 8006cea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006cee:	4422      	add	r2, r4
 8006cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006cf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006cf8:	3302      	adds	r3, #2
 8006cfa:	e7c7      	b.n	8006c8c <_printf_common+0x58>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	4622      	mov	r2, r4
 8006d00:	4641      	mov	r1, r8
 8006d02:	4638      	mov	r0, r7
 8006d04:	47c8      	blx	r9
 8006d06:	3001      	adds	r0, #1
 8006d08:	d0e6      	beq.n	8006cd8 <_printf_common+0xa4>
 8006d0a:	3601      	adds	r6, #1
 8006d0c:	e7d9      	b.n	8006cc2 <_printf_common+0x8e>
	...

08006d10 <_printf_i>:
 8006d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d14:	7e0f      	ldrb	r7, [r1, #24]
 8006d16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d18:	2f78      	cmp	r7, #120	@ 0x78
 8006d1a:	4691      	mov	r9, r2
 8006d1c:	4680      	mov	r8, r0
 8006d1e:	460c      	mov	r4, r1
 8006d20:	469a      	mov	sl, r3
 8006d22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d26:	d807      	bhi.n	8006d38 <_printf_i+0x28>
 8006d28:	2f62      	cmp	r7, #98	@ 0x62
 8006d2a:	d80a      	bhi.n	8006d42 <_printf_i+0x32>
 8006d2c:	2f00      	cmp	r7, #0
 8006d2e:	f000 80d1 	beq.w	8006ed4 <_printf_i+0x1c4>
 8006d32:	2f58      	cmp	r7, #88	@ 0x58
 8006d34:	f000 80b8 	beq.w	8006ea8 <_printf_i+0x198>
 8006d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d40:	e03a      	b.n	8006db8 <_printf_i+0xa8>
 8006d42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d46:	2b15      	cmp	r3, #21
 8006d48:	d8f6      	bhi.n	8006d38 <_printf_i+0x28>
 8006d4a:	a101      	add	r1, pc, #4	@ (adr r1, 8006d50 <_printf_i+0x40>)
 8006d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d50:	08006da9 	.word	0x08006da9
 8006d54:	08006dbd 	.word	0x08006dbd
 8006d58:	08006d39 	.word	0x08006d39
 8006d5c:	08006d39 	.word	0x08006d39
 8006d60:	08006d39 	.word	0x08006d39
 8006d64:	08006d39 	.word	0x08006d39
 8006d68:	08006dbd 	.word	0x08006dbd
 8006d6c:	08006d39 	.word	0x08006d39
 8006d70:	08006d39 	.word	0x08006d39
 8006d74:	08006d39 	.word	0x08006d39
 8006d78:	08006d39 	.word	0x08006d39
 8006d7c:	08006ebb 	.word	0x08006ebb
 8006d80:	08006de7 	.word	0x08006de7
 8006d84:	08006e75 	.word	0x08006e75
 8006d88:	08006d39 	.word	0x08006d39
 8006d8c:	08006d39 	.word	0x08006d39
 8006d90:	08006edd 	.word	0x08006edd
 8006d94:	08006d39 	.word	0x08006d39
 8006d98:	08006de7 	.word	0x08006de7
 8006d9c:	08006d39 	.word	0x08006d39
 8006da0:	08006d39 	.word	0x08006d39
 8006da4:	08006e7d 	.word	0x08006e7d
 8006da8:	6833      	ldr	r3, [r6, #0]
 8006daa:	1d1a      	adds	r2, r3, #4
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6032      	str	r2, [r6, #0]
 8006db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006db4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006db8:	2301      	movs	r3, #1
 8006dba:	e09c      	b.n	8006ef6 <_printf_i+0x1e6>
 8006dbc:	6833      	ldr	r3, [r6, #0]
 8006dbe:	6820      	ldr	r0, [r4, #0]
 8006dc0:	1d19      	adds	r1, r3, #4
 8006dc2:	6031      	str	r1, [r6, #0]
 8006dc4:	0606      	lsls	r6, r0, #24
 8006dc6:	d501      	bpl.n	8006dcc <_printf_i+0xbc>
 8006dc8:	681d      	ldr	r5, [r3, #0]
 8006dca:	e003      	b.n	8006dd4 <_printf_i+0xc4>
 8006dcc:	0645      	lsls	r5, r0, #25
 8006dce:	d5fb      	bpl.n	8006dc8 <_printf_i+0xb8>
 8006dd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006dd4:	2d00      	cmp	r5, #0
 8006dd6:	da03      	bge.n	8006de0 <_printf_i+0xd0>
 8006dd8:	232d      	movs	r3, #45	@ 0x2d
 8006dda:	426d      	negs	r5, r5
 8006ddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006de0:	4858      	ldr	r0, [pc, #352]	@ (8006f44 <_printf_i+0x234>)
 8006de2:	230a      	movs	r3, #10
 8006de4:	e011      	b.n	8006e0a <_printf_i+0xfa>
 8006de6:	6821      	ldr	r1, [r4, #0]
 8006de8:	6833      	ldr	r3, [r6, #0]
 8006dea:	0608      	lsls	r0, r1, #24
 8006dec:	f853 5b04 	ldr.w	r5, [r3], #4
 8006df0:	d402      	bmi.n	8006df8 <_printf_i+0xe8>
 8006df2:	0649      	lsls	r1, r1, #25
 8006df4:	bf48      	it	mi
 8006df6:	b2ad      	uxthmi	r5, r5
 8006df8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006dfa:	4852      	ldr	r0, [pc, #328]	@ (8006f44 <_printf_i+0x234>)
 8006dfc:	6033      	str	r3, [r6, #0]
 8006dfe:	bf14      	ite	ne
 8006e00:	230a      	movne	r3, #10
 8006e02:	2308      	moveq	r3, #8
 8006e04:	2100      	movs	r1, #0
 8006e06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e0a:	6866      	ldr	r6, [r4, #4]
 8006e0c:	60a6      	str	r6, [r4, #8]
 8006e0e:	2e00      	cmp	r6, #0
 8006e10:	db05      	blt.n	8006e1e <_printf_i+0x10e>
 8006e12:	6821      	ldr	r1, [r4, #0]
 8006e14:	432e      	orrs	r6, r5
 8006e16:	f021 0104 	bic.w	r1, r1, #4
 8006e1a:	6021      	str	r1, [r4, #0]
 8006e1c:	d04b      	beq.n	8006eb6 <_printf_i+0x1a6>
 8006e1e:	4616      	mov	r6, r2
 8006e20:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e24:	fb03 5711 	mls	r7, r3, r1, r5
 8006e28:	5dc7      	ldrb	r7, [r0, r7]
 8006e2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e2e:	462f      	mov	r7, r5
 8006e30:	42bb      	cmp	r3, r7
 8006e32:	460d      	mov	r5, r1
 8006e34:	d9f4      	bls.n	8006e20 <_printf_i+0x110>
 8006e36:	2b08      	cmp	r3, #8
 8006e38:	d10b      	bne.n	8006e52 <_printf_i+0x142>
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	07df      	lsls	r7, r3, #31
 8006e3e:	d508      	bpl.n	8006e52 <_printf_i+0x142>
 8006e40:	6923      	ldr	r3, [r4, #16]
 8006e42:	6861      	ldr	r1, [r4, #4]
 8006e44:	4299      	cmp	r1, r3
 8006e46:	bfde      	ittt	le
 8006e48:	2330      	movle	r3, #48	@ 0x30
 8006e4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e52:	1b92      	subs	r2, r2, r6
 8006e54:	6122      	str	r2, [r4, #16]
 8006e56:	f8cd a000 	str.w	sl, [sp]
 8006e5a:	464b      	mov	r3, r9
 8006e5c:	aa03      	add	r2, sp, #12
 8006e5e:	4621      	mov	r1, r4
 8006e60:	4640      	mov	r0, r8
 8006e62:	f7ff fee7 	bl	8006c34 <_printf_common>
 8006e66:	3001      	adds	r0, #1
 8006e68:	d14a      	bne.n	8006f00 <_printf_i+0x1f0>
 8006e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6e:	b004      	add	sp, #16
 8006e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	f043 0320 	orr.w	r3, r3, #32
 8006e7a:	6023      	str	r3, [r4, #0]
 8006e7c:	4832      	ldr	r0, [pc, #200]	@ (8006f48 <_printf_i+0x238>)
 8006e7e:	2778      	movs	r7, #120	@ 0x78
 8006e80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	6831      	ldr	r1, [r6, #0]
 8006e88:	061f      	lsls	r7, r3, #24
 8006e8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e8e:	d402      	bmi.n	8006e96 <_printf_i+0x186>
 8006e90:	065f      	lsls	r7, r3, #25
 8006e92:	bf48      	it	mi
 8006e94:	b2ad      	uxthmi	r5, r5
 8006e96:	6031      	str	r1, [r6, #0]
 8006e98:	07d9      	lsls	r1, r3, #31
 8006e9a:	bf44      	itt	mi
 8006e9c:	f043 0320 	orrmi.w	r3, r3, #32
 8006ea0:	6023      	strmi	r3, [r4, #0]
 8006ea2:	b11d      	cbz	r5, 8006eac <_printf_i+0x19c>
 8006ea4:	2310      	movs	r3, #16
 8006ea6:	e7ad      	b.n	8006e04 <_printf_i+0xf4>
 8006ea8:	4826      	ldr	r0, [pc, #152]	@ (8006f44 <_printf_i+0x234>)
 8006eaa:	e7e9      	b.n	8006e80 <_printf_i+0x170>
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	f023 0320 	bic.w	r3, r3, #32
 8006eb2:	6023      	str	r3, [r4, #0]
 8006eb4:	e7f6      	b.n	8006ea4 <_printf_i+0x194>
 8006eb6:	4616      	mov	r6, r2
 8006eb8:	e7bd      	b.n	8006e36 <_printf_i+0x126>
 8006eba:	6833      	ldr	r3, [r6, #0]
 8006ebc:	6825      	ldr	r5, [r4, #0]
 8006ebe:	6961      	ldr	r1, [r4, #20]
 8006ec0:	1d18      	adds	r0, r3, #4
 8006ec2:	6030      	str	r0, [r6, #0]
 8006ec4:	062e      	lsls	r6, r5, #24
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	d501      	bpl.n	8006ece <_printf_i+0x1be>
 8006eca:	6019      	str	r1, [r3, #0]
 8006ecc:	e002      	b.n	8006ed4 <_printf_i+0x1c4>
 8006ece:	0668      	lsls	r0, r5, #25
 8006ed0:	d5fb      	bpl.n	8006eca <_printf_i+0x1ba>
 8006ed2:	8019      	strh	r1, [r3, #0]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	6123      	str	r3, [r4, #16]
 8006ed8:	4616      	mov	r6, r2
 8006eda:	e7bc      	b.n	8006e56 <_printf_i+0x146>
 8006edc:	6833      	ldr	r3, [r6, #0]
 8006ede:	1d1a      	adds	r2, r3, #4
 8006ee0:	6032      	str	r2, [r6, #0]
 8006ee2:	681e      	ldr	r6, [r3, #0]
 8006ee4:	6862      	ldr	r2, [r4, #4]
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f7f9 f989 	bl	8000200 <memchr>
 8006eee:	b108      	cbz	r0, 8006ef4 <_printf_i+0x1e4>
 8006ef0:	1b80      	subs	r0, r0, r6
 8006ef2:	6060      	str	r0, [r4, #4]
 8006ef4:	6863      	ldr	r3, [r4, #4]
 8006ef6:	6123      	str	r3, [r4, #16]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006efe:	e7aa      	b.n	8006e56 <_printf_i+0x146>
 8006f00:	6923      	ldr	r3, [r4, #16]
 8006f02:	4632      	mov	r2, r6
 8006f04:	4649      	mov	r1, r9
 8006f06:	4640      	mov	r0, r8
 8006f08:	47d0      	blx	sl
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	d0ad      	beq.n	8006e6a <_printf_i+0x15a>
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	079b      	lsls	r3, r3, #30
 8006f12:	d413      	bmi.n	8006f3c <_printf_i+0x22c>
 8006f14:	68e0      	ldr	r0, [r4, #12]
 8006f16:	9b03      	ldr	r3, [sp, #12]
 8006f18:	4298      	cmp	r0, r3
 8006f1a:	bfb8      	it	lt
 8006f1c:	4618      	movlt	r0, r3
 8006f1e:	e7a6      	b.n	8006e6e <_printf_i+0x15e>
 8006f20:	2301      	movs	r3, #1
 8006f22:	4632      	mov	r2, r6
 8006f24:	4649      	mov	r1, r9
 8006f26:	4640      	mov	r0, r8
 8006f28:	47d0      	blx	sl
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	d09d      	beq.n	8006e6a <_printf_i+0x15a>
 8006f2e:	3501      	adds	r5, #1
 8006f30:	68e3      	ldr	r3, [r4, #12]
 8006f32:	9903      	ldr	r1, [sp, #12]
 8006f34:	1a5b      	subs	r3, r3, r1
 8006f36:	42ab      	cmp	r3, r5
 8006f38:	dcf2      	bgt.n	8006f20 <_printf_i+0x210>
 8006f3a:	e7eb      	b.n	8006f14 <_printf_i+0x204>
 8006f3c:	2500      	movs	r5, #0
 8006f3e:	f104 0619 	add.w	r6, r4, #25
 8006f42:	e7f5      	b.n	8006f30 <_printf_i+0x220>
 8006f44:	08009a4b 	.word	0x08009a4b
 8006f48:	08009a5c 	.word	0x08009a5c

08006f4c <std>:
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	b510      	push	{r4, lr}
 8006f50:	4604      	mov	r4, r0
 8006f52:	e9c0 3300 	strd	r3, r3, [r0]
 8006f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f5a:	6083      	str	r3, [r0, #8]
 8006f5c:	8181      	strh	r1, [r0, #12]
 8006f5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f60:	81c2      	strh	r2, [r0, #14]
 8006f62:	6183      	str	r3, [r0, #24]
 8006f64:	4619      	mov	r1, r3
 8006f66:	2208      	movs	r2, #8
 8006f68:	305c      	adds	r0, #92	@ 0x5c
 8006f6a:	f000 fa23 	bl	80073b4 <memset>
 8006f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fa4 <std+0x58>)
 8006f70:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f72:	4b0d      	ldr	r3, [pc, #52]	@ (8006fa8 <std+0x5c>)
 8006f74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f76:	4b0d      	ldr	r3, [pc, #52]	@ (8006fac <std+0x60>)
 8006f78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb0 <std+0x64>)
 8006f7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb4 <std+0x68>)
 8006f80:	6224      	str	r4, [r4, #32]
 8006f82:	429c      	cmp	r4, r3
 8006f84:	d006      	beq.n	8006f94 <std+0x48>
 8006f86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f8a:	4294      	cmp	r4, r2
 8006f8c:	d002      	beq.n	8006f94 <std+0x48>
 8006f8e:	33d0      	adds	r3, #208	@ 0xd0
 8006f90:	429c      	cmp	r4, r3
 8006f92:	d105      	bne.n	8006fa0 <std+0x54>
 8006f94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f9c:	f000 bb18 	b.w	80075d0 <__retarget_lock_init_recursive>
 8006fa0:	bd10      	pop	{r4, pc}
 8006fa2:	bf00      	nop
 8006fa4:	08007205 	.word	0x08007205
 8006fa8:	08007227 	.word	0x08007227
 8006fac:	0800725f 	.word	0x0800725f
 8006fb0:	08007283 	.word	0x08007283
 8006fb4:	20000cbc 	.word	0x20000cbc

08006fb8 <stdio_exit_handler>:
 8006fb8:	4a02      	ldr	r2, [pc, #8]	@ (8006fc4 <stdio_exit_handler+0xc>)
 8006fba:	4903      	ldr	r1, [pc, #12]	@ (8006fc8 <stdio_exit_handler+0x10>)
 8006fbc:	4803      	ldr	r0, [pc, #12]	@ (8006fcc <stdio_exit_handler+0x14>)
 8006fbe:	f000 b869 	b.w	8007094 <_fwalk_sglue>
 8006fc2:	bf00      	nop
 8006fc4:	20000010 	.word	0x20000010
 8006fc8:	08009221 	.word	0x08009221
 8006fcc:	20000020 	.word	0x20000020

08006fd0 <cleanup_stdio>:
 8006fd0:	6841      	ldr	r1, [r0, #4]
 8006fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8007004 <cleanup_stdio+0x34>)
 8006fd4:	4299      	cmp	r1, r3
 8006fd6:	b510      	push	{r4, lr}
 8006fd8:	4604      	mov	r4, r0
 8006fda:	d001      	beq.n	8006fe0 <cleanup_stdio+0x10>
 8006fdc:	f002 f920 	bl	8009220 <_fflush_r>
 8006fe0:	68a1      	ldr	r1, [r4, #8]
 8006fe2:	4b09      	ldr	r3, [pc, #36]	@ (8007008 <cleanup_stdio+0x38>)
 8006fe4:	4299      	cmp	r1, r3
 8006fe6:	d002      	beq.n	8006fee <cleanup_stdio+0x1e>
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f002 f919 	bl	8009220 <_fflush_r>
 8006fee:	68e1      	ldr	r1, [r4, #12]
 8006ff0:	4b06      	ldr	r3, [pc, #24]	@ (800700c <cleanup_stdio+0x3c>)
 8006ff2:	4299      	cmp	r1, r3
 8006ff4:	d004      	beq.n	8007000 <cleanup_stdio+0x30>
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ffc:	f002 b910 	b.w	8009220 <_fflush_r>
 8007000:	bd10      	pop	{r4, pc}
 8007002:	bf00      	nop
 8007004:	20000cbc 	.word	0x20000cbc
 8007008:	20000d24 	.word	0x20000d24
 800700c:	20000d8c 	.word	0x20000d8c

08007010 <global_stdio_init.part.0>:
 8007010:	b510      	push	{r4, lr}
 8007012:	4b0b      	ldr	r3, [pc, #44]	@ (8007040 <global_stdio_init.part.0+0x30>)
 8007014:	4c0b      	ldr	r4, [pc, #44]	@ (8007044 <global_stdio_init.part.0+0x34>)
 8007016:	4a0c      	ldr	r2, [pc, #48]	@ (8007048 <global_stdio_init.part.0+0x38>)
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	4620      	mov	r0, r4
 800701c:	2200      	movs	r2, #0
 800701e:	2104      	movs	r1, #4
 8007020:	f7ff ff94 	bl	8006f4c <std>
 8007024:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007028:	2201      	movs	r2, #1
 800702a:	2109      	movs	r1, #9
 800702c:	f7ff ff8e 	bl	8006f4c <std>
 8007030:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007034:	2202      	movs	r2, #2
 8007036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800703a:	2112      	movs	r1, #18
 800703c:	f7ff bf86 	b.w	8006f4c <std>
 8007040:	20000df4 	.word	0x20000df4
 8007044:	20000cbc 	.word	0x20000cbc
 8007048:	08006fb9 	.word	0x08006fb9

0800704c <__sfp_lock_acquire>:
 800704c:	4801      	ldr	r0, [pc, #4]	@ (8007054 <__sfp_lock_acquire+0x8>)
 800704e:	f000 bac0 	b.w	80075d2 <__retarget_lock_acquire_recursive>
 8007052:	bf00      	nop
 8007054:	20000dfd 	.word	0x20000dfd

08007058 <__sfp_lock_release>:
 8007058:	4801      	ldr	r0, [pc, #4]	@ (8007060 <__sfp_lock_release+0x8>)
 800705a:	f000 babb 	b.w	80075d4 <__retarget_lock_release_recursive>
 800705e:	bf00      	nop
 8007060:	20000dfd 	.word	0x20000dfd

08007064 <__sinit>:
 8007064:	b510      	push	{r4, lr}
 8007066:	4604      	mov	r4, r0
 8007068:	f7ff fff0 	bl	800704c <__sfp_lock_acquire>
 800706c:	6a23      	ldr	r3, [r4, #32]
 800706e:	b11b      	cbz	r3, 8007078 <__sinit+0x14>
 8007070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007074:	f7ff bff0 	b.w	8007058 <__sfp_lock_release>
 8007078:	4b04      	ldr	r3, [pc, #16]	@ (800708c <__sinit+0x28>)
 800707a:	6223      	str	r3, [r4, #32]
 800707c:	4b04      	ldr	r3, [pc, #16]	@ (8007090 <__sinit+0x2c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1f5      	bne.n	8007070 <__sinit+0xc>
 8007084:	f7ff ffc4 	bl	8007010 <global_stdio_init.part.0>
 8007088:	e7f2      	b.n	8007070 <__sinit+0xc>
 800708a:	bf00      	nop
 800708c:	08006fd1 	.word	0x08006fd1
 8007090:	20000df4 	.word	0x20000df4

08007094 <_fwalk_sglue>:
 8007094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007098:	4607      	mov	r7, r0
 800709a:	4688      	mov	r8, r1
 800709c:	4614      	mov	r4, r2
 800709e:	2600      	movs	r6, #0
 80070a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070a4:	f1b9 0901 	subs.w	r9, r9, #1
 80070a8:	d505      	bpl.n	80070b6 <_fwalk_sglue+0x22>
 80070aa:	6824      	ldr	r4, [r4, #0]
 80070ac:	2c00      	cmp	r4, #0
 80070ae:	d1f7      	bne.n	80070a0 <_fwalk_sglue+0xc>
 80070b0:	4630      	mov	r0, r6
 80070b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070b6:	89ab      	ldrh	r3, [r5, #12]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d907      	bls.n	80070cc <_fwalk_sglue+0x38>
 80070bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070c0:	3301      	adds	r3, #1
 80070c2:	d003      	beq.n	80070cc <_fwalk_sglue+0x38>
 80070c4:	4629      	mov	r1, r5
 80070c6:	4638      	mov	r0, r7
 80070c8:	47c0      	blx	r8
 80070ca:	4306      	orrs	r6, r0
 80070cc:	3568      	adds	r5, #104	@ 0x68
 80070ce:	e7e9      	b.n	80070a4 <_fwalk_sglue+0x10>

080070d0 <iprintf>:
 80070d0:	b40f      	push	{r0, r1, r2, r3}
 80070d2:	b507      	push	{r0, r1, r2, lr}
 80070d4:	4906      	ldr	r1, [pc, #24]	@ (80070f0 <iprintf+0x20>)
 80070d6:	ab04      	add	r3, sp, #16
 80070d8:	6808      	ldr	r0, [r1, #0]
 80070da:	f853 2b04 	ldr.w	r2, [r3], #4
 80070de:	6881      	ldr	r1, [r0, #8]
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	f001 ff01 	bl	8008ee8 <_vfiprintf_r>
 80070e6:	b003      	add	sp, #12
 80070e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070ec:	b004      	add	sp, #16
 80070ee:	4770      	bx	lr
 80070f0:	2000001c 	.word	0x2000001c

080070f4 <putchar>:
 80070f4:	4b02      	ldr	r3, [pc, #8]	@ (8007100 <putchar+0xc>)
 80070f6:	4601      	mov	r1, r0
 80070f8:	6818      	ldr	r0, [r3, #0]
 80070fa:	6882      	ldr	r2, [r0, #8]
 80070fc:	f002 b92c 	b.w	8009358 <_putc_r>
 8007100:	2000001c 	.word	0x2000001c

08007104 <_puts_r>:
 8007104:	6a03      	ldr	r3, [r0, #32]
 8007106:	b570      	push	{r4, r5, r6, lr}
 8007108:	6884      	ldr	r4, [r0, #8]
 800710a:	4605      	mov	r5, r0
 800710c:	460e      	mov	r6, r1
 800710e:	b90b      	cbnz	r3, 8007114 <_puts_r+0x10>
 8007110:	f7ff ffa8 	bl	8007064 <__sinit>
 8007114:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007116:	07db      	lsls	r3, r3, #31
 8007118:	d405      	bmi.n	8007126 <_puts_r+0x22>
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	0598      	lsls	r0, r3, #22
 800711e:	d402      	bmi.n	8007126 <_puts_r+0x22>
 8007120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007122:	f000 fa56 	bl	80075d2 <__retarget_lock_acquire_recursive>
 8007126:	89a3      	ldrh	r3, [r4, #12]
 8007128:	0719      	lsls	r1, r3, #28
 800712a:	d502      	bpl.n	8007132 <_puts_r+0x2e>
 800712c:	6923      	ldr	r3, [r4, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d135      	bne.n	800719e <_puts_r+0x9a>
 8007132:	4621      	mov	r1, r4
 8007134:	4628      	mov	r0, r5
 8007136:	f000 f8e7 	bl	8007308 <__swsetup_r>
 800713a:	b380      	cbz	r0, 800719e <_puts_r+0x9a>
 800713c:	f04f 35ff 	mov.w	r5, #4294967295
 8007140:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007142:	07da      	lsls	r2, r3, #31
 8007144:	d405      	bmi.n	8007152 <_puts_r+0x4e>
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	059b      	lsls	r3, r3, #22
 800714a:	d402      	bmi.n	8007152 <_puts_r+0x4e>
 800714c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800714e:	f000 fa41 	bl	80075d4 <__retarget_lock_release_recursive>
 8007152:	4628      	mov	r0, r5
 8007154:	bd70      	pop	{r4, r5, r6, pc}
 8007156:	2b00      	cmp	r3, #0
 8007158:	da04      	bge.n	8007164 <_puts_r+0x60>
 800715a:	69a2      	ldr	r2, [r4, #24]
 800715c:	429a      	cmp	r2, r3
 800715e:	dc17      	bgt.n	8007190 <_puts_r+0x8c>
 8007160:	290a      	cmp	r1, #10
 8007162:	d015      	beq.n	8007190 <_puts_r+0x8c>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	6022      	str	r2, [r4, #0]
 800716a:	7019      	strb	r1, [r3, #0]
 800716c:	68a3      	ldr	r3, [r4, #8]
 800716e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007172:	3b01      	subs	r3, #1
 8007174:	60a3      	str	r3, [r4, #8]
 8007176:	2900      	cmp	r1, #0
 8007178:	d1ed      	bne.n	8007156 <_puts_r+0x52>
 800717a:	2b00      	cmp	r3, #0
 800717c:	da11      	bge.n	80071a2 <_puts_r+0x9e>
 800717e:	4622      	mov	r2, r4
 8007180:	210a      	movs	r1, #10
 8007182:	4628      	mov	r0, r5
 8007184:	f000 f881 	bl	800728a <__swbuf_r>
 8007188:	3001      	adds	r0, #1
 800718a:	d0d7      	beq.n	800713c <_puts_r+0x38>
 800718c:	250a      	movs	r5, #10
 800718e:	e7d7      	b.n	8007140 <_puts_r+0x3c>
 8007190:	4622      	mov	r2, r4
 8007192:	4628      	mov	r0, r5
 8007194:	f000 f879 	bl	800728a <__swbuf_r>
 8007198:	3001      	adds	r0, #1
 800719a:	d1e7      	bne.n	800716c <_puts_r+0x68>
 800719c:	e7ce      	b.n	800713c <_puts_r+0x38>
 800719e:	3e01      	subs	r6, #1
 80071a0:	e7e4      	b.n	800716c <_puts_r+0x68>
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	1c5a      	adds	r2, r3, #1
 80071a6:	6022      	str	r2, [r4, #0]
 80071a8:	220a      	movs	r2, #10
 80071aa:	701a      	strb	r2, [r3, #0]
 80071ac:	e7ee      	b.n	800718c <_puts_r+0x88>
	...

080071b0 <puts>:
 80071b0:	4b02      	ldr	r3, [pc, #8]	@ (80071bc <puts+0xc>)
 80071b2:	4601      	mov	r1, r0
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	f7ff bfa5 	b.w	8007104 <_puts_r>
 80071ba:	bf00      	nop
 80071bc:	2000001c 	.word	0x2000001c

080071c0 <siprintf>:
 80071c0:	b40e      	push	{r1, r2, r3}
 80071c2:	b510      	push	{r4, lr}
 80071c4:	b09d      	sub	sp, #116	@ 0x74
 80071c6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80071c8:	9002      	str	r0, [sp, #8]
 80071ca:	9006      	str	r0, [sp, #24]
 80071cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80071d0:	480a      	ldr	r0, [pc, #40]	@ (80071fc <siprintf+0x3c>)
 80071d2:	9107      	str	r1, [sp, #28]
 80071d4:	9104      	str	r1, [sp, #16]
 80071d6:	490a      	ldr	r1, [pc, #40]	@ (8007200 <siprintf+0x40>)
 80071d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071dc:	9105      	str	r1, [sp, #20]
 80071de:	2400      	movs	r4, #0
 80071e0:	a902      	add	r1, sp, #8
 80071e2:	6800      	ldr	r0, [r0, #0]
 80071e4:	9301      	str	r3, [sp, #4]
 80071e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80071e8:	f001 fd58 	bl	8008c9c <_svfiprintf_r>
 80071ec:	9b02      	ldr	r3, [sp, #8]
 80071ee:	701c      	strb	r4, [r3, #0]
 80071f0:	b01d      	add	sp, #116	@ 0x74
 80071f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071f6:	b003      	add	sp, #12
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	2000001c 	.word	0x2000001c
 8007200:	ffff0208 	.word	0xffff0208

08007204 <__sread>:
 8007204:	b510      	push	{r4, lr}
 8007206:	460c      	mov	r4, r1
 8007208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800720c:	f000 f992 	bl	8007534 <_read_r>
 8007210:	2800      	cmp	r0, #0
 8007212:	bfab      	itete	ge
 8007214:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007216:	89a3      	ldrhlt	r3, [r4, #12]
 8007218:	181b      	addge	r3, r3, r0
 800721a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800721e:	bfac      	ite	ge
 8007220:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007222:	81a3      	strhlt	r3, [r4, #12]
 8007224:	bd10      	pop	{r4, pc}

08007226 <__swrite>:
 8007226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800722a:	461f      	mov	r7, r3
 800722c:	898b      	ldrh	r3, [r1, #12]
 800722e:	05db      	lsls	r3, r3, #23
 8007230:	4605      	mov	r5, r0
 8007232:	460c      	mov	r4, r1
 8007234:	4616      	mov	r6, r2
 8007236:	d505      	bpl.n	8007244 <__swrite+0x1e>
 8007238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800723c:	2302      	movs	r3, #2
 800723e:	2200      	movs	r2, #0
 8007240:	f000 f966 	bl	8007510 <_lseek_r>
 8007244:	89a3      	ldrh	r3, [r4, #12]
 8007246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800724a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800724e:	81a3      	strh	r3, [r4, #12]
 8007250:	4632      	mov	r2, r6
 8007252:	463b      	mov	r3, r7
 8007254:	4628      	mov	r0, r5
 8007256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800725a:	f000 b97d 	b.w	8007558 <_write_r>

0800725e <__sseek>:
 800725e:	b510      	push	{r4, lr}
 8007260:	460c      	mov	r4, r1
 8007262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007266:	f000 f953 	bl	8007510 <_lseek_r>
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	89a3      	ldrh	r3, [r4, #12]
 800726e:	bf15      	itete	ne
 8007270:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007272:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007276:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800727a:	81a3      	strheq	r3, [r4, #12]
 800727c:	bf18      	it	ne
 800727e:	81a3      	strhne	r3, [r4, #12]
 8007280:	bd10      	pop	{r4, pc}

08007282 <__sclose>:
 8007282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007286:	f000 b933 	b.w	80074f0 <_close_r>

0800728a <__swbuf_r>:
 800728a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728c:	460e      	mov	r6, r1
 800728e:	4614      	mov	r4, r2
 8007290:	4605      	mov	r5, r0
 8007292:	b118      	cbz	r0, 800729c <__swbuf_r+0x12>
 8007294:	6a03      	ldr	r3, [r0, #32]
 8007296:	b90b      	cbnz	r3, 800729c <__swbuf_r+0x12>
 8007298:	f7ff fee4 	bl	8007064 <__sinit>
 800729c:	69a3      	ldr	r3, [r4, #24]
 800729e:	60a3      	str	r3, [r4, #8]
 80072a0:	89a3      	ldrh	r3, [r4, #12]
 80072a2:	071a      	lsls	r2, r3, #28
 80072a4:	d501      	bpl.n	80072aa <__swbuf_r+0x20>
 80072a6:	6923      	ldr	r3, [r4, #16]
 80072a8:	b943      	cbnz	r3, 80072bc <__swbuf_r+0x32>
 80072aa:	4621      	mov	r1, r4
 80072ac:	4628      	mov	r0, r5
 80072ae:	f000 f82b 	bl	8007308 <__swsetup_r>
 80072b2:	b118      	cbz	r0, 80072bc <__swbuf_r+0x32>
 80072b4:	f04f 37ff 	mov.w	r7, #4294967295
 80072b8:	4638      	mov	r0, r7
 80072ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	6922      	ldr	r2, [r4, #16]
 80072c0:	1a98      	subs	r0, r3, r2
 80072c2:	6963      	ldr	r3, [r4, #20]
 80072c4:	b2f6      	uxtb	r6, r6
 80072c6:	4283      	cmp	r3, r0
 80072c8:	4637      	mov	r7, r6
 80072ca:	dc05      	bgt.n	80072d8 <__swbuf_r+0x4e>
 80072cc:	4621      	mov	r1, r4
 80072ce:	4628      	mov	r0, r5
 80072d0:	f001 ffa6 	bl	8009220 <_fflush_r>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d1ed      	bne.n	80072b4 <__swbuf_r+0x2a>
 80072d8:	68a3      	ldr	r3, [r4, #8]
 80072da:	3b01      	subs	r3, #1
 80072dc:	60a3      	str	r3, [r4, #8]
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	6022      	str	r2, [r4, #0]
 80072e4:	701e      	strb	r6, [r3, #0]
 80072e6:	6962      	ldr	r2, [r4, #20]
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d004      	beq.n	80072f8 <__swbuf_r+0x6e>
 80072ee:	89a3      	ldrh	r3, [r4, #12]
 80072f0:	07db      	lsls	r3, r3, #31
 80072f2:	d5e1      	bpl.n	80072b8 <__swbuf_r+0x2e>
 80072f4:	2e0a      	cmp	r6, #10
 80072f6:	d1df      	bne.n	80072b8 <__swbuf_r+0x2e>
 80072f8:	4621      	mov	r1, r4
 80072fa:	4628      	mov	r0, r5
 80072fc:	f001 ff90 	bl	8009220 <_fflush_r>
 8007300:	2800      	cmp	r0, #0
 8007302:	d0d9      	beq.n	80072b8 <__swbuf_r+0x2e>
 8007304:	e7d6      	b.n	80072b4 <__swbuf_r+0x2a>
	...

08007308 <__swsetup_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	4b29      	ldr	r3, [pc, #164]	@ (80073b0 <__swsetup_r+0xa8>)
 800730c:	4605      	mov	r5, r0
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	460c      	mov	r4, r1
 8007312:	b118      	cbz	r0, 800731c <__swsetup_r+0x14>
 8007314:	6a03      	ldr	r3, [r0, #32]
 8007316:	b90b      	cbnz	r3, 800731c <__swsetup_r+0x14>
 8007318:	f7ff fea4 	bl	8007064 <__sinit>
 800731c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007320:	0719      	lsls	r1, r3, #28
 8007322:	d422      	bmi.n	800736a <__swsetup_r+0x62>
 8007324:	06da      	lsls	r2, r3, #27
 8007326:	d407      	bmi.n	8007338 <__swsetup_r+0x30>
 8007328:	2209      	movs	r2, #9
 800732a:	602a      	str	r2, [r5, #0]
 800732c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007330:	81a3      	strh	r3, [r4, #12]
 8007332:	f04f 30ff 	mov.w	r0, #4294967295
 8007336:	e033      	b.n	80073a0 <__swsetup_r+0x98>
 8007338:	0758      	lsls	r0, r3, #29
 800733a:	d512      	bpl.n	8007362 <__swsetup_r+0x5a>
 800733c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800733e:	b141      	cbz	r1, 8007352 <__swsetup_r+0x4a>
 8007340:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007344:	4299      	cmp	r1, r3
 8007346:	d002      	beq.n	800734e <__swsetup_r+0x46>
 8007348:	4628      	mov	r0, r5
 800734a:	f000 ffd1 	bl	80082f0 <_free_r>
 800734e:	2300      	movs	r3, #0
 8007350:	6363      	str	r3, [r4, #52]	@ 0x34
 8007352:	89a3      	ldrh	r3, [r4, #12]
 8007354:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007358:	81a3      	strh	r3, [r4, #12]
 800735a:	2300      	movs	r3, #0
 800735c:	6063      	str	r3, [r4, #4]
 800735e:	6923      	ldr	r3, [r4, #16]
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	89a3      	ldrh	r3, [r4, #12]
 8007364:	f043 0308 	orr.w	r3, r3, #8
 8007368:	81a3      	strh	r3, [r4, #12]
 800736a:	6923      	ldr	r3, [r4, #16]
 800736c:	b94b      	cbnz	r3, 8007382 <__swsetup_r+0x7a>
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007378:	d003      	beq.n	8007382 <__swsetup_r+0x7a>
 800737a:	4621      	mov	r1, r4
 800737c:	4628      	mov	r0, r5
 800737e:	f001 ffaf 	bl	80092e0 <__smakebuf_r>
 8007382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007386:	f013 0201 	ands.w	r2, r3, #1
 800738a:	d00a      	beq.n	80073a2 <__swsetup_r+0x9a>
 800738c:	2200      	movs	r2, #0
 800738e:	60a2      	str	r2, [r4, #8]
 8007390:	6962      	ldr	r2, [r4, #20]
 8007392:	4252      	negs	r2, r2
 8007394:	61a2      	str	r2, [r4, #24]
 8007396:	6922      	ldr	r2, [r4, #16]
 8007398:	b942      	cbnz	r2, 80073ac <__swsetup_r+0xa4>
 800739a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800739e:	d1c5      	bne.n	800732c <__swsetup_r+0x24>
 80073a0:	bd38      	pop	{r3, r4, r5, pc}
 80073a2:	0799      	lsls	r1, r3, #30
 80073a4:	bf58      	it	pl
 80073a6:	6962      	ldrpl	r2, [r4, #20]
 80073a8:	60a2      	str	r2, [r4, #8]
 80073aa:	e7f4      	b.n	8007396 <__swsetup_r+0x8e>
 80073ac:	2000      	movs	r0, #0
 80073ae:	e7f7      	b.n	80073a0 <__swsetup_r+0x98>
 80073b0:	2000001c 	.word	0x2000001c

080073b4 <memset>:
 80073b4:	4402      	add	r2, r0
 80073b6:	4603      	mov	r3, r0
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d100      	bne.n	80073be <memset+0xa>
 80073bc:	4770      	bx	lr
 80073be:	f803 1b01 	strb.w	r1, [r3], #1
 80073c2:	e7f9      	b.n	80073b8 <memset+0x4>

080073c4 <strchr>:
 80073c4:	b2c9      	uxtb	r1, r1
 80073c6:	4603      	mov	r3, r0
 80073c8:	4618      	mov	r0, r3
 80073ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ce:	b112      	cbz	r2, 80073d6 <strchr+0x12>
 80073d0:	428a      	cmp	r2, r1
 80073d2:	d1f9      	bne.n	80073c8 <strchr+0x4>
 80073d4:	4770      	bx	lr
 80073d6:	2900      	cmp	r1, #0
 80073d8:	bf18      	it	ne
 80073da:	2000      	movne	r0, #0
 80073dc:	4770      	bx	lr

080073de <strncmp>:
 80073de:	b510      	push	{r4, lr}
 80073e0:	b16a      	cbz	r2, 80073fe <strncmp+0x20>
 80073e2:	3901      	subs	r1, #1
 80073e4:	1884      	adds	r4, r0, r2
 80073e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d103      	bne.n	80073fa <strncmp+0x1c>
 80073f2:	42a0      	cmp	r0, r4
 80073f4:	d001      	beq.n	80073fa <strncmp+0x1c>
 80073f6:	2a00      	cmp	r2, #0
 80073f8:	d1f5      	bne.n	80073e6 <strncmp+0x8>
 80073fa:	1ad0      	subs	r0, r2, r3
 80073fc:	bd10      	pop	{r4, pc}
 80073fe:	4610      	mov	r0, r2
 8007400:	e7fc      	b.n	80073fc <strncmp+0x1e>
	...

08007404 <strtok>:
 8007404:	4b16      	ldr	r3, [pc, #88]	@ (8007460 <strtok+0x5c>)
 8007406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800740a:	681f      	ldr	r7, [r3, #0]
 800740c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800740e:	4605      	mov	r5, r0
 8007410:	460e      	mov	r6, r1
 8007412:	b9ec      	cbnz	r4, 8007450 <strtok+0x4c>
 8007414:	2050      	movs	r0, #80	@ 0x50
 8007416:	f000 ffb5 	bl	8008384 <malloc>
 800741a:	4602      	mov	r2, r0
 800741c:	6478      	str	r0, [r7, #68]	@ 0x44
 800741e:	b920      	cbnz	r0, 800742a <strtok+0x26>
 8007420:	4b10      	ldr	r3, [pc, #64]	@ (8007464 <strtok+0x60>)
 8007422:	4811      	ldr	r0, [pc, #68]	@ (8007468 <strtok+0x64>)
 8007424:	215b      	movs	r1, #91	@ 0x5b
 8007426:	f000 f8ed 	bl	8007604 <__assert_func>
 800742a:	e9c0 4400 	strd	r4, r4, [r0]
 800742e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007432:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007436:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800743a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800743e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007442:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007446:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800744a:	6184      	str	r4, [r0, #24]
 800744c:	7704      	strb	r4, [r0, #28]
 800744e:	6244      	str	r4, [r0, #36]	@ 0x24
 8007450:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007452:	4631      	mov	r1, r6
 8007454:	4628      	mov	r0, r5
 8007456:	2301      	movs	r3, #1
 8007458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800745c:	f000 b806 	b.w	800746c <__strtok_r>
 8007460:	2000001c 	.word	0x2000001c
 8007464:	08009a6d 	.word	0x08009a6d
 8007468:	08009a84 	.word	0x08009a84

0800746c <__strtok_r>:
 800746c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800746e:	4604      	mov	r4, r0
 8007470:	b908      	cbnz	r0, 8007476 <__strtok_r+0xa>
 8007472:	6814      	ldr	r4, [r2, #0]
 8007474:	b144      	cbz	r4, 8007488 <__strtok_r+0x1c>
 8007476:	4620      	mov	r0, r4
 8007478:	f814 5b01 	ldrb.w	r5, [r4], #1
 800747c:	460f      	mov	r7, r1
 800747e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007482:	b91e      	cbnz	r6, 800748c <__strtok_r+0x20>
 8007484:	b965      	cbnz	r5, 80074a0 <__strtok_r+0x34>
 8007486:	6015      	str	r5, [r2, #0]
 8007488:	2000      	movs	r0, #0
 800748a:	e005      	b.n	8007498 <__strtok_r+0x2c>
 800748c:	42b5      	cmp	r5, r6
 800748e:	d1f6      	bne.n	800747e <__strtok_r+0x12>
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1f0      	bne.n	8007476 <__strtok_r+0xa>
 8007494:	6014      	str	r4, [r2, #0]
 8007496:	7003      	strb	r3, [r0, #0]
 8007498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800749a:	461c      	mov	r4, r3
 800749c:	e00c      	b.n	80074b8 <__strtok_r+0x4c>
 800749e:	b91d      	cbnz	r5, 80074a8 <__strtok_r+0x3c>
 80074a0:	4627      	mov	r7, r4
 80074a2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80074a6:	460e      	mov	r6, r1
 80074a8:	f816 5b01 	ldrb.w	r5, [r6], #1
 80074ac:	42ab      	cmp	r3, r5
 80074ae:	d1f6      	bne.n	800749e <__strtok_r+0x32>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0f2      	beq.n	800749a <__strtok_r+0x2e>
 80074b4:	2300      	movs	r3, #0
 80074b6:	703b      	strb	r3, [r7, #0]
 80074b8:	6014      	str	r4, [r2, #0]
 80074ba:	e7ed      	b.n	8007498 <__strtok_r+0x2c>

080074bc <strstr>:
 80074bc:	780a      	ldrb	r2, [r1, #0]
 80074be:	b570      	push	{r4, r5, r6, lr}
 80074c0:	b96a      	cbnz	r2, 80074de <strstr+0x22>
 80074c2:	bd70      	pop	{r4, r5, r6, pc}
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d109      	bne.n	80074dc <strstr+0x20>
 80074c8:	460c      	mov	r4, r1
 80074ca:	4605      	mov	r5, r0
 80074cc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0f6      	beq.n	80074c2 <strstr+0x6>
 80074d4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80074d8:	429e      	cmp	r6, r3
 80074da:	d0f7      	beq.n	80074cc <strstr+0x10>
 80074dc:	3001      	adds	r0, #1
 80074de:	7803      	ldrb	r3, [r0, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1ef      	bne.n	80074c4 <strstr+0x8>
 80074e4:	4618      	mov	r0, r3
 80074e6:	e7ec      	b.n	80074c2 <strstr+0x6>

080074e8 <_localeconv_r>:
 80074e8:	4800      	ldr	r0, [pc, #0]	@ (80074ec <_localeconv_r+0x4>)
 80074ea:	4770      	bx	lr
 80074ec:	2000015c 	.word	0x2000015c

080074f0 <_close_r>:
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	4d06      	ldr	r5, [pc, #24]	@ (800750c <_close_r+0x1c>)
 80074f4:	2300      	movs	r3, #0
 80074f6:	4604      	mov	r4, r0
 80074f8:	4608      	mov	r0, r1
 80074fa:	602b      	str	r3, [r5, #0]
 80074fc:	f7fb fada 	bl	8002ab4 <_close>
 8007500:	1c43      	adds	r3, r0, #1
 8007502:	d102      	bne.n	800750a <_close_r+0x1a>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	b103      	cbz	r3, 800750a <_close_r+0x1a>
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	20000df8 	.word	0x20000df8

08007510 <_lseek_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4d07      	ldr	r5, [pc, #28]	@ (8007530 <_lseek_r+0x20>)
 8007514:	4604      	mov	r4, r0
 8007516:	4608      	mov	r0, r1
 8007518:	4611      	mov	r1, r2
 800751a:	2200      	movs	r2, #0
 800751c:	602a      	str	r2, [r5, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	f7fb faef 	bl	8002b02 <_lseek>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	d102      	bne.n	800752e <_lseek_r+0x1e>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	b103      	cbz	r3, 800752e <_lseek_r+0x1e>
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	20000df8 	.word	0x20000df8

08007534 <_read_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4d07      	ldr	r5, [pc, #28]	@ (8007554 <_read_r+0x20>)
 8007538:	4604      	mov	r4, r0
 800753a:	4608      	mov	r0, r1
 800753c:	4611      	mov	r1, r2
 800753e:	2200      	movs	r2, #0
 8007540:	602a      	str	r2, [r5, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	f7fb fa7d 	bl	8002a42 <_read>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d102      	bne.n	8007552 <_read_r+0x1e>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b103      	cbz	r3, 8007552 <_read_r+0x1e>
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	20000df8 	.word	0x20000df8

08007558 <_write_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d07      	ldr	r5, [pc, #28]	@ (8007578 <_write_r+0x20>)
 800755c:	4604      	mov	r4, r0
 800755e:	4608      	mov	r0, r1
 8007560:	4611      	mov	r1, r2
 8007562:	2200      	movs	r2, #0
 8007564:	602a      	str	r2, [r5, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	f7fb fa88 	bl	8002a7c <_write>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	d102      	bne.n	8007576 <_write_r+0x1e>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	b103      	cbz	r3, 8007576 <_write_r+0x1e>
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	20000df8 	.word	0x20000df8

0800757c <__errno>:
 800757c:	4b01      	ldr	r3, [pc, #4]	@ (8007584 <__errno+0x8>)
 800757e:	6818      	ldr	r0, [r3, #0]
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	2000001c 	.word	0x2000001c

08007588 <__libc_init_array>:
 8007588:	b570      	push	{r4, r5, r6, lr}
 800758a:	4d0d      	ldr	r5, [pc, #52]	@ (80075c0 <__libc_init_array+0x38>)
 800758c:	4c0d      	ldr	r4, [pc, #52]	@ (80075c4 <__libc_init_array+0x3c>)
 800758e:	1b64      	subs	r4, r4, r5
 8007590:	10a4      	asrs	r4, r4, #2
 8007592:	2600      	movs	r6, #0
 8007594:	42a6      	cmp	r6, r4
 8007596:	d109      	bne.n	80075ac <__libc_init_array+0x24>
 8007598:	4d0b      	ldr	r5, [pc, #44]	@ (80075c8 <__libc_init_array+0x40>)
 800759a:	4c0c      	ldr	r4, [pc, #48]	@ (80075cc <__libc_init_array+0x44>)
 800759c:	f002 f810 	bl	80095c0 <_init>
 80075a0:	1b64      	subs	r4, r4, r5
 80075a2:	10a4      	asrs	r4, r4, #2
 80075a4:	2600      	movs	r6, #0
 80075a6:	42a6      	cmp	r6, r4
 80075a8:	d105      	bne.n	80075b6 <__libc_init_array+0x2e>
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
 80075ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b0:	4798      	blx	r3
 80075b2:	3601      	adds	r6, #1
 80075b4:	e7ee      	b.n	8007594 <__libc_init_array+0xc>
 80075b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ba:	4798      	blx	r3
 80075bc:	3601      	adds	r6, #1
 80075be:	e7f2      	b.n	80075a6 <__libc_init_array+0x1e>
 80075c0:	08009d08 	.word	0x08009d08
 80075c4:	08009d08 	.word	0x08009d08
 80075c8:	08009d08 	.word	0x08009d08
 80075cc:	08009d0c 	.word	0x08009d0c

080075d0 <__retarget_lock_init_recursive>:
 80075d0:	4770      	bx	lr

080075d2 <__retarget_lock_acquire_recursive>:
 80075d2:	4770      	bx	lr

080075d4 <__retarget_lock_release_recursive>:
 80075d4:	4770      	bx	lr

080075d6 <strcpy>:
 80075d6:	4603      	mov	r3, r0
 80075d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075dc:	f803 2b01 	strb.w	r2, [r3], #1
 80075e0:	2a00      	cmp	r2, #0
 80075e2:	d1f9      	bne.n	80075d8 <strcpy+0x2>
 80075e4:	4770      	bx	lr

080075e6 <memcpy>:
 80075e6:	440a      	add	r2, r1
 80075e8:	4291      	cmp	r1, r2
 80075ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80075ee:	d100      	bne.n	80075f2 <memcpy+0xc>
 80075f0:	4770      	bx	lr
 80075f2:	b510      	push	{r4, lr}
 80075f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075fc:	4291      	cmp	r1, r2
 80075fe:	d1f9      	bne.n	80075f4 <memcpy+0xe>
 8007600:	bd10      	pop	{r4, pc}
	...

08007604 <__assert_func>:
 8007604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007606:	4614      	mov	r4, r2
 8007608:	461a      	mov	r2, r3
 800760a:	4b09      	ldr	r3, [pc, #36]	@ (8007630 <__assert_func+0x2c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4605      	mov	r5, r0
 8007610:	68d8      	ldr	r0, [r3, #12]
 8007612:	b14c      	cbz	r4, 8007628 <__assert_func+0x24>
 8007614:	4b07      	ldr	r3, [pc, #28]	@ (8007634 <__assert_func+0x30>)
 8007616:	9100      	str	r1, [sp, #0]
 8007618:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800761c:	4906      	ldr	r1, [pc, #24]	@ (8007638 <__assert_func+0x34>)
 800761e:	462b      	mov	r3, r5
 8007620:	f001 fe26 	bl	8009270 <fiprintf>
 8007624:	f001 ff18 	bl	8009458 <abort>
 8007628:	4b04      	ldr	r3, [pc, #16]	@ (800763c <__assert_func+0x38>)
 800762a:	461c      	mov	r4, r3
 800762c:	e7f3      	b.n	8007616 <__assert_func+0x12>
 800762e:	bf00      	nop
 8007630:	2000001c 	.word	0x2000001c
 8007634:	08009ade 	.word	0x08009ade
 8007638:	08009aeb 	.word	0x08009aeb
 800763c:	08009b19 	.word	0x08009b19

08007640 <quorem>:
 8007640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007644:	6903      	ldr	r3, [r0, #16]
 8007646:	690c      	ldr	r4, [r1, #16]
 8007648:	42a3      	cmp	r3, r4
 800764a:	4607      	mov	r7, r0
 800764c:	db7e      	blt.n	800774c <quorem+0x10c>
 800764e:	3c01      	subs	r4, #1
 8007650:	f101 0814 	add.w	r8, r1, #20
 8007654:	00a3      	lsls	r3, r4, #2
 8007656:	f100 0514 	add.w	r5, r0, #20
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007660:	9301      	str	r3, [sp, #4]
 8007662:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007666:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800766a:	3301      	adds	r3, #1
 800766c:	429a      	cmp	r2, r3
 800766e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007672:	fbb2 f6f3 	udiv	r6, r2, r3
 8007676:	d32e      	bcc.n	80076d6 <quorem+0x96>
 8007678:	f04f 0a00 	mov.w	sl, #0
 800767c:	46c4      	mov	ip, r8
 800767e:	46ae      	mov	lr, r5
 8007680:	46d3      	mov	fp, sl
 8007682:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007686:	b298      	uxth	r0, r3
 8007688:	fb06 a000 	mla	r0, r6, r0, sl
 800768c:	0c02      	lsrs	r2, r0, #16
 800768e:	0c1b      	lsrs	r3, r3, #16
 8007690:	fb06 2303 	mla	r3, r6, r3, r2
 8007694:	f8de 2000 	ldr.w	r2, [lr]
 8007698:	b280      	uxth	r0, r0
 800769a:	b292      	uxth	r2, r2
 800769c:	1a12      	subs	r2, r2, r0
 800769e:	445a      	add	r2, fp
 80076a0:	f8de 0000 	ldr.w	r0, [lr]
 80076a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80076ae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80076b2:	b292      	uxth	r2, r2
 80076b4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80076b8:	45e1      	cmp	r9, ip
 80076ba:	f84e 2b04 	str.w	r2, [lr], #4
 80076be:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80076c2:	d2de      	bcs.n	8007682 <quorem+0x42>
 80076c4:	9b00      	ldr	r3, [sp, #0]
 80076c6:	58eb      	ldr	r3, [r5, r3]
 80076c8:	b92b      	cbnz	r3, 80076d6 <quorem+0x96>
 80076ca:	9b01      	ldr	r3, [sp, #4]
 80076cc:	3b04      	subs	r3, #4
 80076ce:	429d      	cmp	r5, r3
 80076d0:	461a      	mov	r2, r3
 80076d2:	d32f      	bcc.n	8007734 <quorem+0xf4>
 80076d4:	613c      	str	r4, [r7, #16]
 80076d6:	4638      	mov	r0, r7
 80076d8:	f001 f97c 	bl	80089d4 <__mcmp>
 80076dc:	2800      	cmp	r0, #0
 80076de:	db25      	blt.n	800772c <quorem+0xec>
 80076e0:	4629      	mov	r1, r5
 80076e2:	2000      	movs	r0, #0
 80076e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80076e8:	f8d1 c000 	ldr.w	ip, [r1]
 80076ec:	fa1f fe82 	uxth.w	lr, r2
 80076f0:	fa1f f38c 	uxth.w	r3, ip
 80076f4:	eba3 030e 	sub.w	r3, r3, lr
 80076f8:	4403      	add	r3, r0
 80076fa:	0c12      	lsrs	r2, r2, #16
 80076fc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007700:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007704:	b29b      	uxth	r3, r3
 8007706:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800770a:	45c1      	cmp	r9, r8
 800770c:	f841 3b04 	str.w	r3, [r1], #4
 8007710:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007714:	d2e6      	bcs.n	80076e4 <quorem+0xa4>
 8007716:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800771a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800771e:	b922      	cbnz	r2, 800772a <quorem+0xea>
 8007720:	3b04      	subs	r3, #4
 8007722:	429d      	cmp	r5, r3
 8007724:	461a      	mov	r2, r3
 8007726:	d30b      	bcc.n	8007740 <quorem+0x100>
 8007728:	613c      	str	r4, [r7, #16]
 800772a:	3601      	adds	r6, #1
 800772c:	4630      	mov	r0, r6
 800772e:	b003      	add	sp, #12
 8007730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007734:	6812      	ldr	r2, [r2, #0]
 8007736:	3b04      	subs	r3, #4
 8007738:	2a00      	cmp	r2, #0
 800773a:	d1cb      	bne.n	80076d4 <quorem+0x94>
 800773c:	3c01      	subs	r4, #1
 800773e:	e7c6      	b.n	80076ce <quorem+0x8e>
 8007740:	6812      	ldr	r2, [r2, #0]
 8007742:	3b04      	subs	r3, #4
 8007744:	2a00      	cmp	r2, #0
 8007746:	d1ef      	bne.n	8007728 <quorem+0xe8>
 8007748:	3c01      	subs	r4, #1
 800774a:	e7ea      	b.n	8007722 <quorem+0xe2>
 800774c:	2000      	movs	r0, #0
 800774e:	e7ee      	b.n	800772e <quorem+0xee>

08007750 <_dtoa_r>:
 8007750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007754:	69c7      	ldr	r7, [r0, #28]
 8007756:	b097      	sub	sp, #92	@ 0x5c
 8007758:	ed8d 0b04 	vstr	d0, [sp, #16]
 800775c:	ec55 4b10 	vmov	r4, r5, d0
 8007760:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007762:	9107      	str	r1, [sp, #28]
 8007764:	4681      	mov	r9, r0
 8007766:	920c      	str	r2, [sp, #48]	@ 0x30
 8007768:	9311      	str	r3, [sp, #68]	@ 0x44
 800776a:	b97f      	cbnz	r7, 800778c <_dtoa_r+0x3c>
 800776c:	2010      	movs	r0, #16
 800776e:	f000 fe09 	bl	8008384 <malloc>
 8007772:	4602      	mov	r2, r0
 8007774:	f8c9 001c 	str.w	r0, [r9, #28]
 8007778:	b920      	cbnz	r0, 8007784 <_dtoa_r+0x34>
 800777a:	4ba9      	ldr	r3, [pc, #676]	@ (8007a20 <_dtoa_r+0x2d0>)
 800777c:	21ef      	movs	r1, #239	@ 0xef
 800777e:	48a9      	ldr	r0, [pc, #676]	@ (8007a24 <_dtoa_r+0x2d4>)
 8007780:	f7ff ff40 	bl	8007604 <__assert_func>
 8007784:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007788:	6007      	str	r7, [r0, #0]
 800778a:	60c7      	str	r7, [r0, #12]
 800778c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007790:	6819      	ldr	r1, [r3, #0]
 8007792:	b159      	cbz	r1, 80077ac <_dtoa_r+0x5c>
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	604a      	str	r2, [r1, #4]
 8007798:	2301      	movs	r3, #1
 800779a:	4093      	lsls	r3, r2
 800779c:	608b      	str	r3, [r1, #8]
 800779e:	4648      	mov	r0, r9
 80077a0:	f000 fee6 	bl	8008570 <_Bfree>
 80077a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	1e2b      	subs	r3, r5, #0
 80077ae:	bfb9      	ittee	lt
 80077b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80077b4:	9305      	strlt	r3, [sp, #20]
 80077b6:	2300      	movge	r3, #0
 80077b8:	6033      	strge	r3, [r6, #0]
 80077ba:	9f05      	ldr	r7, [sp, #20]
 80077bc:	4b9a      	ldr	r3, [pc, #616]	@ (8007a28 <_dtoa_r+0x2d8>)
 80077be:	bfbc      	itt	lt
 80077c0:	2201      	movlt	r2, #1
 80077c2:	6032      	strlt	r2, [r6, #0]
 80077c4:	43bb      	bics	r3, r7
 80077c6:	d112      	bne.n	80077ee <_dtoa_r+0x9e>
 80077c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80077ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80077ce:	6013      	str	r3, [r2, #0]
 80077d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077d4:	4323      	orrs	r3, r4
 80077d6:	f000 855a 	beq.w	800828e <_dtoa_r+0xb3e>
 80077da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80077dc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007a3c <_dtoa_r+0x2ec>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 855c 	beq.w	800829e <_dtoa_r+0xb4e>
 80077e6:	f10a 0303 	add.w	r3, sl, #3
 80077ea:	f000 bd56 	b.w	800829a <_dtoa_r+0xb4a>
 80077ee:	ed9d 7b04 	vldr	d7, [sp, #16]
 80077f2:	2200      	movs	r2, #0
 80077f4:	ec51 0b17 	vmov	r0, r1, d7
 80077f8:	2300      	movs	r3, #0
 80077fa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80077fe:	f7f9 f97b 	bl	8000af8 <__aeabi_dcmpeq>
 8007802:	4680      	mov	r8, r0
 8007804:	b158      	cbz	r0, 800781e <_dtoa_r+0xce>
 8007806:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007808:	2301      	movs	r3, #1
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800780e:	b113      	cbz	r3, 8007816 <_dtoa_r+0xc6>
 8007810:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007812:	4b86      	ldr	r3, [pc, #536]	@ (8007a2c <_dtoa_r+0x2dc>)
 8007814:	6013      	str	r3, [r2, #0]
 8007816:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007a40 <_dtoa_r+0x2f0>
 800781a:	f000 bd40 	b.w	800829e <_dtoa_r+0xb4e>
 800781e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007822:	aa14      	add	r2, sp, #80	@ 0x50
 8007824:	a915      	add	r1, sp, #84	@ 0x54
 8007826:	4648      	mov	r0, r9
 8007828:	f001 f984 	bl	8008b34 <__d2b>
 800782c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007830:	9002      	str	r0, [sp, #8]
 8007832:	2e00      	cmp	r6, #0
 8007834:	d078      	beq.n	8007928 <_dtoa_r+0x1d8>
 8007836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007838:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800783c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007840:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007844:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007848:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800784c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007850:	4619      	mov	r1, r3
 8007852:	2200      	movs	r2, #0
 8007854:	4b76      	ldr	r3, [pc, #472]	@ (8007a30 <_dtoa_r+0x2e0>)
 8007856:	f7f8 fd2f 	bl	80002b8 <__aeabi_dsub>
 800785a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007a08 <_dtoa_r+0x2b8>)
 800785c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007860:	f7f8 fee2 	bl	8000628 <__aeabi_dmul>
 8007864:	a36a      	add	r3, pc, #424	@ (adr r3, 8007a10 <_dtoa_r+0x2c0>)
 8007866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786a:	f7f8 fd27 	bl	80002bc <__adddf3>
 800786e:	4604      	mov	r4, r0
 8007870:	4630      	mov	r0, r6
 8007872:	460d      	mov	r5, r1
 8007874:	f7f8 fe6e 	bl	8000554 <__aeabi_i2d>
 8007878:	a367      	add	r3, pc, #412	@ (adr r3, 8007a18 <_dtoa_r+0x2c8>)
 800787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787e:	f7f8 fed3 	bl	8000628 <__aeabi_dmul>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	4620      	mov	r0, r4
 8007888:	4629      	mov	r1, r5
 800788a:	f7f8 fd17 	bl	80002bc <__adddf3>
 800788e:	4604      	mov	r4, r0
 8007890:	460d      	mov	r5, r1
 8007892:	f7f9 f979 	bl	8000b88 <__aeabi_d2iz>
 8007896:	2200      	movs	r2, #0
 8007898:	4607      	mov	r7, r0
 800789a:	2300      	movs	r3, #0
 800789c:	4620      	mov	r0, r4
 800789e:	4629      	mov	r1, r5
 80078a0:	f7f9 f934 	bl	8000b0c <__aeabi_dcmplt>
 80078a4:	b140      	cbz	r0, 80078b8 <_dtoa_r+0x168>
 80078a6:	4638      	mov	r0, r7
 80078a8:	f7f8 fe54 	bl	8000554 <__aeabi_i2d>
 80078ac:	4622      	mov	r2, r4
 80078ae:	462b      	mov	r3, r5
 80078b0:	f7f9 f922 	bl	8000af8 <__aeabi_dcmpeq>
 80078b4:	b900      	cbnz	r0, 80078b8 <_dtoa_r+0x168>
 80078b6:	3f01      	subs	r7, #1
 80078b8:	2f16      	cmp	r7, #22
 80078ba:	d852      	bhi.n	8007962 <_dtoa_r+0x212>
 80078bc:	4b5d      	ldr	r3, [pc, #372]	@ (8007a34 <_dtoa_r+0x2e4>)
 80078be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80078ca:	f7f9 f91f 	bl	8000b0c <__aeabi_dcmplt>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d049      	beq.n	8007966 <_dtoa_r+0x216>
 80078d2:	3f01      	subs	r7, #1
 80078d4:	2300      	movs	r3, #0
 80078d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80078d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80078da:	1b9b      	subs	r3, r3, r6
 80078dc:	1e5a      	subs	r2, r3, #1
 80078de:	bf45      	ittet	mi
 80078e0:	f1c3 0301 	rsbmi	r3, r3, #1
 80078e4:	9300      	strmi	r3, [sp, #0]
 80078e6:	2300      	movpl	r3, #0
 80078e8:	2300      	movmi	r3, #0
 80078ea:	9206      	str	r2, [sp, #24]
 80078ec:	bf54      	ite	pl
 80078ee:	9300      	strpl	r3, [sp, #0]
 80078f0:	9306      	strmi	r3, [sp, #24]
 80078f2:	2f00      	cmp	r7, #0
 80078f4:	db39      	blt.n	800796a <_dtoa_r+0x21a>
 80078f6:	9b06      	ldr	r3, [sp, #24]
 80078f8:	970d      	str	r7, [sp, #52]	@ 0x34
 80078fa:	443b      	add	r3, r7
 80078fc:	9306      	str	r3, [sp, #24]
 80078fe:	2300      	movs	r3, #0
 8007900:	9308      	str	r3, [sp, #32]
 8007902:	9b07      	ldr	r3, [sp, #28]
 8007904:	2b09      	cmp	r3, #9
 8007906:	d863      	bhi.n	80079d0 <_dtoa_r+0x280>
 8007908:	2b05      	cmp	r3, #5
 800790a:	bfc4      	itt	gt
 800790c:	3b04      	subgt	r3, #4
 800790e:	9307      	strgt	r3, [sp, #28]
 8007910:	9b07      	ldr	r3, [sp, #28]
 8007912:	f1a3 0302 	sub.w	r3, r3, #2
 8007916:	bfcc      	ite	gt
 8007918:	2400      	movgt	r4, #0
 800791a:	2401      	movle	r4, #1
 800791c:	2b03      	cmp	r3, #3
 800791e:	d863      	bhi.n	80079e8 <_dtoa_r+0x298>
 8007920:	e8df f003 	tbb	[pc, r3]
 8007924:	2b375452 	.word	0x2b375452
 8007928:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800792c:	441e      	add	r6, r3
 800792e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007932:	2b20      	cmp	r3, #32
 8007934:	bfc1      	itttt	gt
 8007936:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800793a:	409f      	lslgt	r7, r3
 800793c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007940:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007944:	bfd6      	itet	le
 8007946:	f1c3 0320 	rsble	r3, r3, #32
 800794a:	ea47 0003 	orrgt.w	r0, r7, r3
 800794e:	fa04 f003 	lslle.w	r0, r4, r3
 8007952:	f7f8 fdef 	bl	8000534 <__aeabi_ui2d>
 8007956:	2201      	movs	r2, #1
 8007958:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800795c:	3e01      	subs	r6, #1
 800795e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007960:	e776      	b.n	8007850 <_dtoa_r+0x100>
 8007962:	2301      	movs	r3, #1
 8007964:	e7b7      	b.n	80078d6 <_dtoa_r+0x186>
 8007966:	9010      	str	r0, [sp, #64]	@ 0x40
 8007968:	e7b6      	b.n	80078d8 <_dtoa_r+0x188>
 800796a:	9b00      	ldr	r3, [sp, #0]
 800796c:	1bdb      	subs	r3, r3, r7
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	427b      	negs	r3, r7
 8007972:	9308      	str	r3, [sp, #32]
 8007974:	2300      	movs	r3, #0
 8007976:	930d      	str	r3, [sp, #52]	@ 0x34
 8007978:	e7c3      	b.n	8007902 <_dtoa_r+0x1b2>
 800797a:	2301      	movs	r3, #1
 800797c:	9309      	str	r3, [sp, #36]	@ 0x24
 800797e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007980:	eb07 0b03 	add.w	fp, r7, r3
 8007984:	f10b 0301 	add.w	r3, fp, #1
 8007988:	2b01      	cmp	r3, #1
 800798a:	9303      	str	r3, [sp, #12]
 800798c:	bfb8      	it	lt
 800798e:	2301      	movlt	r3, #1
 8007990:	e006      	b.n	80079a0 <_dtoa_r+0x250>
 8007992:	2301      	movs	r3, #1
 8007994:	9309      	str	r3, [sp, #36]	@ 0x24
 8007996:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007998:	2b00      	cmp	r3, #0
 800799a:	dd28      	ble.n	80079ee <_dtoa_r+0x29e>
 800799c:	469b      	mov	fp, r3
 800799e:	9303      	str	r3, [sp, #12]
 80079a0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80079a4:	2100      	movs	r1, #0
 80079a6:	2204      	movs	r2, #4
 80079a8:	f102 0514 	add.w	r5, r2, #20
 80079ac:	429d      	cmp	r5, r3
 80079ae:	d926      	bls.n	80079fe <_dtoa_r+0x2ae>
 80079b0:	6041      	str	r1, [r0, #4]
 80079b2:	4648      	mov	r0, r9
 80079b4:	f000 fd9c 	bl	80084f0 <_Balloc>
 80079b8:	4682      	mov	sl, r0
 80079ba:	2800      	cmp	r0, #0
 80079bc:	d142      	bne.n	8007a44 <_dtoa_r+0x2f4>
 80079be:	4b1e      	ldr	r3, [pc, #120]	@ (8007a38 <_dtoa_r+0x2e8>)
 80079c0:	4602      	mov	r2, r0
 80079c2:	f240 11af 	movw	r1, #431	@ 0x1af
 80079c6:	e6da      	b.n	800777e <_dtoa_r+0x2e>
 80079c8:	2300      	movs	r3, #0
 80079ca:	e7e3      	b.n	8007994 <_dtoa_r+0x244>
 80079cc:	2300      	movs	r3, #0
 80079ce:	e7d5      	b.n	800797c <_dtoa_r+0x22c>
 80079d0:	2401      	movs	r4, #1
 80079d2:	2300      	movs	r3, #0
 80079d4:	9307      	str	r3, [sp, #28]
 80079d6:	9409      	str	r4, [sp, #36]	@ 0x24
 80079d8:	f04f 3bff 	mov.w	fp, #4294967295
 80079dc:	2200      	movs	r2, #0
 80079de:	f8cd b00c 	str.w	fp, [sp, #12]
 80079e2:	2312      	movs	r3, #18
 80079e4:	920c      	str	r2, [sp, #48]	@ 0x30
 80079e6:	e7db      	b.n	80079a0 <_dtoa_r+0x250>
 80079e8:	2301      	movs	r3, #1
 80079ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80079ec:	e7f4      	b.n	80079d8 <_dtoa_r+0x288>
 80079ee:	f04f 0b01 	mov.w	fp, #1
 80079f2:	f8cd b00c 	str.w	fp, [sp, #12]
 80079f6:	465b      	mov	r3, fp
 80079f8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80079fc:	e7d0      	b.n	80079a0 <_dtoa_r+0x250>
 80079fe:	3101      	adds	r1, #1
 8007a00:	0052      	lsls	r2, r2, #1
 8007a02:	e7d1      	b.n	80079a8 <_dtoa_r+0x258>
 8007a04:	f3af 8000 	nop.w
 8007a08:	636f4361 	.word	0x636f4361
 8007a0c:	3fd287a7 	.word	0x3fd287a7
 8007a10:	8b60c8b3 	.word	0x8b60c8b3
 8007a14:	3fc68a28 	.word	0x3fc68a28
 8007a18:	509f79fb 	.word	0x509f79fb
 8007a1c:	3fd34413 	.word	0x3fd34413
 8007a20:	08009a6d 	.word	0x08009a6d
 8007a24:	08009b27 	.word	0x08009b27
 8007a28:	7ff00000 	.word	0x7ff00000
 8007a2c:	08009a4a 	.word	0x08009a4a
 8007a30:	3ff80000 	.word	0x3ff80000
 8007a34:	08009c38 	.word	0x08009c38
 8007a38:	08009b7f 	.word	0x08009b7f
 8007a3c:	08009b23 	.word	0x08009b23
 8007a40:	08009a49 	.word	0x08009a49
 8007a44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a48:	6018      	str	r0, [r3, #0]
 8007a4a:	9b03      	ldr	r3, [sp, #12]
 8007a4c:	2b0e      	cmp	r3, #14
 8007a4e:	f200 80a1 	bhi.w	8007b94 <_dtoa_r+0x444>
 8007a52:	2c00      	cmp	r4, #0
 8007a54:	f000 809e 	beq.w	8007b94 <_dtoa_r+0x444>
 8007a58:	2f00      	cmp	r7, #0
 8007a5a:	dd33      	ble.n	8007ac4 <_dtoa_r+0x374>
 8007a5c:	4b9c      	ldr	r3, [pc, #624]	@ (8007cd0 <_dtoa_r+0x580>)
 8007a5e:	f007 020f 	and.w	r2, r7, #15
 8007a62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a66:	ed93 7b00 	vldr	d7, [r3]
 8007a6a:	05f8      	lsls	r0, r7, #23
 8007a6c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007a70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a74:	d516      	bpl.n	8007aa4 <_dtoa_r+0x354>
 8007a76:	4b97      	ldr	r3, [pc, #604]	@ (8007cd4 <_dtoa_r+0x584>)
 8007a78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007a7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a80:	f7f8 fefc 	bl	800087c <__aeabi_ddiv>
 8007a84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a88:	f004 040f 	and.w	r4, r4, #15
 8007a8c:	2603      	movs	r6, #3
 8007a8e:	4d91      	ldr	r5, [pc, #580]	@ (8007cd4 <_dtoa_r+0x584>)
 8007a90:	b954      	cbnz	r4, 8007aa8 <_dtoa_r+0x358>
 8007a92:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007a96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a9a:	f7f8 feef 	bl	800087c <__aeabi_ddiv>
 8007a9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007aa2:	e028      	b.n	8007af6 <_dtoa_r+0x3a6>
 8007aa4:	2602      	movs	r6, #2
 8007aa6:	e7f2      	b.n	8007a8e <_dtoa_r+0x33e>
 8007aa8:	07e1      	lsls	r1, r4, #31
 8007aaa:	d508      	bpl.n	8007abe <_dtoa_r+0x36e>
 8007aac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007ab0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ab4:	f7f8 fdb8 	bl	8000628 <__aeabi_dmul>
 8007ab8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007abc:	3601      	adds	r6, #1
 8007abe:	1064      	asrs	r4, r4, #1
 8007ac0:	3508      	adds	r5, #8
 8007ac2:	e7e5      	b.n	8007a90 <_dtoa_r+0x340>
 8007ac4:	f000 80af 	beq.w	8007c26 <_dtoa_r+0x4d6>
 8007ac8:	427c      	negs	r4, r7
 8007aca:	4b81      	ldr	r3, [pc, #516]	@ (8007cd0 <_dtoa_r+0x580>)
 8007acc:	4d81      	ldr	r5, [pc, #516]	@ (8007cd4 <_dtoa_r+0x584>)
 8007ace:	f004 020f 	and.w	r2, r4, #15
 8007ad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ada:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007ade:	f7f8 fda3 	bl	8000628 <__aeabi_dmul>
 8007ae2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ae6:	1124      	asrs	r4, r4, #4
 8007ae8:	2300      	movs	r3, #0
 8007aea:	2602      	movs	r6, #2
 8007aec:	2c00      	cmp	r4, #0
 8007aee:	f040 808f 	bne.w	8007c10 <_dtoa_r+0x4c0>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1d3      	bne.n	8007a9e <_dtoa_r+0x34e>
 8007af6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007af8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 8094 	beq.w	8007c2a <_dtoa_r+0x4da>
 8007b02:	4b75      	ldr	r3, [pc, #468]	@ (8007cd8 <_dtoa_r+0x588>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	4620      	mov	r0, r4
 8007b08:	4629      	mov	r1, r5
 8007b0a:	f7f8 ffff 	bl	8000b0c <__aeabi_dcmplt>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	f000 808b 	beq.w	8007c2a <_dtoa_r+0x4da>
 8007b14:	9b03      	ldr	r3, [sp, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 8087 	beq.w	8007c2a <_dtoa_r+0x4da>
 8007b1c:	f1bb 0f00 	cmp.w	fp, #0
 8007b20:	dd34      	ble.n	8007b8c <_dtoa_r+0x43c>
 8007b22:	4620      	mov	r0, r4
 8007b24:	4b6d      	ldr	r3, [pc, #436]	@ (8007cdc <_dtoa_r+0x58c>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	4629      	mov	r1, r5
 8007b2a:	f7f8 fd7d 	bl	8000628 <__aeabi_dmul>
 8007b2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b32:	f107 38ff 	add.w	r8, r7, #4294967295
 8007b36:	3601      	adds	r6, #1
 8007b38:	465c      	mov	r4, fp
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f7f8 fd0a 	bl	8000554 <__aeabi_i2d>
 8007b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b44:	f7f8 fd70 	bl	8000628 <__aeabi_dmul>
 8007b48:	4b65      	ldr	r3, [pc, #404]	@ (8007ce0 <_dtoa_r+0x590>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f7f8 fbb6 	bl	80002bc <__adddf3>
 8007b50:	4605      	mov	r5, r0
 8007b52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b56:	2c00      	cmp	r4, #0
 8007b58:	d16a      	bne.n	8007c30 <_dtoa_r+0x4e0>
 8007b5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b5e:	4b61      	ldr	r3, [pc, #388]	@ (8007ce4 <_dtoa_r+0x594>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	f7f8 fba9 	bl	80002b8 <__aeabi_dsub>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b6e:	462a      	mov	r2, r5
 8007b70:	4633      	mov	r3, r6
 8007b72:	f7f8 ffe9 	bl	8000b48 <__aeabi_dcmpgt>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	f040 8298 	bne.w	80080ac <_dtoa_r+0x95c>
 8007b7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b80:	462a      	mov	r2, r5
 8007b82:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b86:	f7f8 ffc1 	bl	8000b0c <__aeabi_dcmplt>
 8007b8a:	bb38      	cbnz	r0, 8007bdc <_dtoa_r+0x48c>
 8007b8c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007b90:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b94:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f2c0 8157 	blt.w	8007e4a <_dtoa_r+0x6fa>
 8007b9c:	2f0e      	cmp	r7, #14
 8007b9e:	f300 8154 	bgt.w	8007e4a <_dtoa_r+0x6fa>
 8007ba2:	4b4b      	ldr	r3, [pc, #300]	@ (8007cd0 <_dtoa_r+0x580>)
 8007ba4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ba8:	ed93 7b00 	vldr	d7, [r3]
 8007bac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	ed8d 7b00 	vstr	d7, [sp]
 8007bb4:	f280 80e5 	bge.w	8007d82 <_dtoa_r+0x632>
 8007bb8:	9b03      	ldr	r3, [sp, #12]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f300 80e1 	bgt.w	8007d82 <_dtoa_r+0x632>
 8007bc0:	d10c      	bne.n	8007bdc <_dtoa_r+0x48c>
 8007bc2:	4b48      	ldr	r3, [pc, #288]	@ (8007ce4 <_dtoa_r+0x594>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	ec51 0b17 	vmov	r0, r1, d7
 8007bca:	f7f8 fd2d 	bl	8000628 <__aeabi_dmul>
 8007bce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bd2:	f7f8 ffaf 	bl	8000b34 <__aeabi_dcmpge>
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	f000 8266 	beq.w	80080a8 <_dtoa_r+0x958>
 8007bdc:	2400      	movs	r4, #0
 8007bde:	4625      	mov	r5, r4
 8007be0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007be2:	4656      	mov	r6, sl
 8007be4:	ea6f 0803 	mvn.w	r8, r3
 8007be8:	2700      	movs	r7, #0
 8007bea:	4621      	mov	r1, r4
 8007bec:	4648      	mov	r0, r9
 8007bee:	f000 fcbf 	bl	8008570 <_Bfree>
 8007bf2:	2d00      	cmp	r5, #0
 8007bf4:	f000 80bd 	beq.w	8007d72 <_dtoa_r+0x622>
 8007bf8:	b12f      	cbz	r7, 8007c06 <_dtoa_r+0x4b6>
 8007bfa:	42af      	cmp	r7, r5
 8007bfc:	d003      	beq.n	8007c06 <_dtoa_r+0x4b6>
 8007bfe:	4639      	mov	r1, r7
 8007c00:	4648      	mov	r0, r9
 8007c02:	f000 fcb5 	bl	8008570 <_Bfree>
 8007c06:	4629      	mov	r1, r5
 8007c08:	4648      	mov	r0, r9
 8007c0a:	f000 fcb1 	bl	8008570 <_Bfree>
 8007c0e:	e0b0      	b.n	8007d72 <_dtoa_r+0x622>
 8007c10:	07e2      	lsls	r2, r4, #31
 8007c12:	d505      	bpl.n	8007c20 <_dtoa_r+0x4d0>
 8007c14:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c18:	f7f8 fd06 	bl	8000628 <__aeabi_dmul>
 8007c1c:	3601      	adds	r6, #1
 8007c1e:	2301      	movs	r3, #1
 8007c20:	1064      	asrs	r4, r4, #1
 8007c22:	3508      	adds	r5, #8
 8007c24:	e762      	b.n	8007aec <_dtoa_r+0x39c>
 8007c26:	2602      	movs	r6, #2
 8007c28:	e765      	b.n	8007af6 <_dtoa_r+0x3a6>
 8007c2a:	9c03      	ldr	r4, [sp, #12]
 8007c2c:	46b8      	mov	r8, r7
 8007c2e:	e784      	b.n	8007b3a <_dtoa_r+0x3ea>
 8007c30:	4b27      	ldr	r3, [pc, #156]	@ (8007cd0 <_dtoa_r+0x580>)
 8007c32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c3c:	4454      	add	r4, sl
 8007c3e:	2900      	cmp	r1, #0
 8007c40:	d054      	beq.n	8007cec <_dtoa_r+0x59c>
 8007c42:	4929      	ldr	r1, [pc, #164]	@ (8007ce8 <_dtoa_r+0x598>)
 8007c44:	2000      	movs	r0, #0
 8007c46:	f7f8 fe19 	bl	800087c <__aeabi_ddiv>
 8007c4a:	4633      	mov	r3, r6
 8007c4c:	462a      	mov	r2, r5
 8007c4e:	f7f8 fb33 	bl	80002b8 <__aeabi_dsub>
 8007c52:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007c56:	4656      	mov	r6, sl
 8007c58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c5c:	f7f8 ff94 	bl	8000b88 <__aeabi_d2iz>
 8007c60:	4605      	mov	r5, r0
 8007c62:	f7f8 fc77 	bl	8000554 <__aeabi_i2d>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c6e:	f7f8 fb23 	bl	80002b8 <__aeabi_dsub>
 8007c72:	3530      	adds	r5, #48	@ 0x30
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c7c:	f806 5b01 	strb.w	r5, [r6], #1
 8007c80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c84:	f7f8 ff42 	bl	8000b0c <__aeabi_dcmplt>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d172      	bne.n	8007d72 <_dtoa_r+0x622>
 8007c8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c90:	4911      	ldr	r1, [pc, #68]	@ (8007cd8 <_dtoa_r+0x588>)
 8007c92:	2000      	movs	r0, #0
 8007c94:	f7f8 fb10 	bl	80002b8 <__aeabi_dsub>
 8007c98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c9c:	f7f8 ff36 	bl	8000b0c <__aeabi_dcmplt>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	f040 80b4 	bne.w	8007e0e <_dtoa_r+0x6be>
 8007ca6:	42a6      	cmp	r6, r4
 8007ca8:	f43f af70 	beq.w	8007b8c <_dtoa_r+0x43c>
 8007cac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8007cdc <_dtoa_r+0x58c>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f7f8 fcb8 	bl	8000628 <__aeabi_dmul>
 8007cb8:	4b08      	ldr	r3, [pc, #32]	@ (8007cdc <_dtoa_r+0x58c>)
 8007cba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cc4:	f7f8 fcb0 	bl	8000628 <__aeabi_dmul>
 8007cc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ccc:	e7c4      	b.n	8007c58 <_dtoa_r+0x508>
 8007cce:	bf00      	nop
 8007cd0:	08009c38 	.word	0x08009c38
 8007cd4:	08009c10 	.word	0x08009c10
 8007cd8:	3ff00000 	.word	0x3ff00000
 8007cdc:	40240000 	.word	0x40240000
 8007ce0:	401c0000 	.word	0x401c0000
 8007ce4:	40140000 	.word	0x40140000
 8007ce8:	3fe00000 	.word	0x3fe00000
 8007cec:	4631      	mov	r1, r6
 8007cee:	4628      	mov	r0, r5
 8007cf0:	f7f8 fc9a 	bl	8000628 <__aeabi_dmul>
 8007cf4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007cf8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007cfa:	4656      	mov	r6, sl
 8007cfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d00:	f7f8 ff42 	bl	8000b88 <__aeabi_d2iz>
 8007d04:	4605      	mov	r5, r0
 8007d06:	f7f8 fc25 	bl	8000554 <__aeabi_i2d>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d12:	f7f8 fad1 	bl	80002b8 <__aeabi_dsub>
 8007d16:	3530      	adds	r5, #48	@ 0x30
 8007d18:	f806 5b01 	strb.w	r5, [r6], #1
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	42a6      	cmp	r6, r4
 8007d22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d26:	f04f 0200 	mov.w	r2, #0
 8007d2a:	d124      	bne.n	8007d76 <_dtoa_r+0x626>
 8007d2c:	4baf      	ldr	r3, [pc, #700]	@ (8007fec <_dtoa_r+0x89c>)
 8007d2e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007d32:	f7f8 fac3 	bl	80002bc <__adddf3>
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d3e:	f7f8 ff03 	bl	8000b48 <__aeabi_dcmpgt>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d163      	bne.n	8007e0e <_dtoa_r+0x6be>
 8007d46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d4a:	49a8      	ldr	r1, [pc, #672]	@ (8007fec <_dtoa_r+0x89c>)
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	f7f8 fab3 	bl	80002b8 <__aeabi_dsub>
 8007d52:	4602      	mov	r2, r0
 8007d54:	460b      	mov	r3, r1
 8007d56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d5a:	f7f8 fed7 	bl	8000b0c <__aeabi_dcmplt>
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	f43f af14 	beq.w	8007b8c <_dtoa_r+0x43c>
 8007d64:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007d66:	1e73      	subs	r3, r6, #1
 8007d68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d6a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d6e:	2b30      	cmp	r3, #48	@ 0x30
 8007d70:	d0f8      	beq.n	8007d64 <_dtoa_r+0x614>
 8007d72:	4647      	mov	r7, r8
 8007d74:	e03b      	b.n	8007dee <_dtoa_r+0x69e>
 8007d76:	4b9e      	ldr	r3, [pc, #632]	@ (8007ff0 <_dtoa_r+0x8a0>)
 8007d78:	f7f8 fc56 	bl	8000628 <__aeabi_dmul>
 8007d7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d80:	e7bc      	b.n	8007cfc <_dtoa_r+0x5ac>
 8007d82:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007d86:	4656      	mov	r6, sl
 8007d88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	4629      	mov	r1, r5
 8007d90:	f7f8 fd74 	bl	800087c <__aeabi_ddiv>
 8007d94:	f7f8 fef8 	bl	8000b88 <__aeabi_d2iz>
 8007d98:	4680      	mov	r8, r0
 8007d9a:	f7f8 fbdb 	bl	8000554 <__aeabi_i2d>
 8007d9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007da2:	f7f8 fc41 	bl	8000628 <__aeabi_dmul>
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	4620      	mov	r0, r4
 8007dac:	4629      	mov	r1, r5
 8007dae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007db2:	f7f8 fa81 	bl	80002b8 <__aeabi_dsub>
 8007db6:	f806 4b01 	strb.w	r4, [r6], #1
 8007dba:	9d03      	ldr	r5, [sp, #12]
 8007dbc:	eba6 040a 	sub.w	r4, r6, sl
 8007dc0:	42a5      	cmp	r5, r4
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	d133      	bne.n	8007e30 <_dtoa_r+0x6e0>
 8007dc8:	f7f8 fa78 	bl	80002bc <__adddf3>
 8007dcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	460d      	mov	r5, r1
 8007dd4:	f7f8 feb8 	bl	8000b48 <__aeabi_dcmpgt>
 8007dd8:	b9c0      	cbnz	r0, 8007e0c <_dtoa_r+0x6bc>
 8007dda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dde:	4620      	mov	r0, r4
 8007de0:	4629      	mov	r1, r5
 8007de2:	f7f8 fe89 	bl	8000af8 <__aeabi_dcmpeq>
 8007de6:	b110      	cbz	r0, 8007dee <_dtoa_r+0x69e>
 8007de8:	f018 0f01 	tst.w	r8, #1
 8007dec:	d10e      	bne.n	8007e0c <_dtoa_r+0x6bc>
 8007dee:	9902      	ldr	r1, [sp, #8]
 8007df0:	4648      	mov	r0, r9
 8007df2:	f000 fbbd 	bl	8008570 <_Bfree>
 8007df6:	2300      	movs	r3, #0
 8007df8:	7033      	strb	r3, [r6, #0]
 8007dfa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007dfc:	3701      	adds	r7, #1
 8007dfe:	601f      	str	r7, [r3, #0]
 8007e00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 824b 	beq.w	800829e <_dtoa_r+0xb4e>
 8007e08:	601e      	str	r6, [r3, #0]
 8007e0a:	e248      	b.n	800829e <_dtoa_r+0xb4e>
 8007e0c:	46b8      	mov	r8, r7
 8007e0e:	4633      	mov	r3, r6
 8007e10:	461e      	mov	r6, r3
 8007e12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e16:	2a39      	cmp	r2, #57	@ 0x39
 8007e18:	d106      	bne.n	8007e28 <_dtoa_r+0x6d8>
 8007e1a:	459a      	cmp	sl, r3
 8007e1c:	d1f8      	bne.n	8007e10 <_dtoa_r+0x6c0>
 8007e1e:	2230      	movs	r2, #48	@ 0x30
 8007e20:	f108 0801 	add.w	r8, r8, #1
 8007e24:	f88a 2000 	strb.w	r2, [sl]
 8007e28:	781a      	ldrb	r2, [r3, #0]
 8007e2a:	3201      	adds	r2, #1
 8007e2c:	701a      	strb	r2, [r3, #0]
 8007e2e:	e7a0      	b.n	8007d72 <_dtoa_r+0x622>
 8007e30:	4b6f      	ldr	r3, [pc, #444]	@ (8007ff0 <_dtoa_r+0x8a0>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	f7f8 fbf8 	bl	8000628 <__aeabi_dmul>
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	460d      	mov	r5, r1
 8007e40:	f7f8 fe5a 	bl	8000af8 <__aeabi_dcmpeq>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d09f      	beq.n	8007d88 <_dtoa_r+0x638>
 8007e48:	e7d1      	b.n	8007dee <_dtoa_r+0x69e>
 8007e4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e4c:	2a00      	cmp	r2, #0
 8007e4e:	f000 80ea 	beq.w	8008026 <_dtoa_r+0x8d6>
 8007e52:	9a07      	ldr	r2, [sp, #28]
 8007e54:	2a01      	cmp	r2, #1
 8007e56:	f300 80cd 	bgt.w	8007ff4 <_dtoa_r+0x8a4>
 8007e5a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007e5c:	2a00      	cmp	r2, #0
 8007e5e:	f000 80c1 	beq.w	8007fe4 <_dtoa_r+0x894>
 8007e62:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e66:	9c08      	ldr	r4, [sp, #32]
 8007e68:	9e00      	ldr	r6, [sp, #0]
 8007e6a:	9a00      	ldr	r2, [sp, #0]
 8007e6c:	441a      	add	r2, r3
 8007e6e:	9200      	str	r2, [sp, #0]
 8007e70:	9a06      	ldr	r2, [sp, #24]
 8007e72:	2101      	movs	r1, #1
 8007e74:	441a      	add	r2, r3
 8007e76:	4648      	mov	r0, r9
 8007e78:	9206      	str	r2, [sp, #24]
 8007e7a:	f000 fc2d 	bl	80086d8 <__i2b>
 8007e7e:	4605      	mov	r5, r0
 8007e80:	b166      	cbz	r6, 8007e9c <_dtoa_r+0x74c>
 8007e82:	9b06      	ldr	r3, [sp, #24]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	dd09      	ble.n	8007e9c <_dtoa_r+0x74c>
 8007e88:	42b3      	cmp	r3, r6
 8007e8a:	9a00      	ldr	r2, [sp, #0]
 8007e8c:	bfa8      	it	ge
 8007e8e:	4633      	movge	r3, r6
 8007e90:	1ad2      	subs	r2, r2, r3
 8007e92:	9200      	str	r2, [sp, #0]
 8007e94:	9a06      	ldr	r2, [sp, #24]
 8007e96:	1af6      	subs	r6, r6, r3
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	9306      	str	r3, [sp, #24]
 8007e9c:	9b08      	ldr	r3, [sp, #32]
 8007e9e:	b30b      	cbz	r3, 8007ee4 <_dtoa_r+0x794>
 8007ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 80c6 	beq.w	8008034 <_dtoa_r+0x8e4>
 8007ea8:	2c00      	cmp	r4, #0
 8007eaa:	f000 80c0 	beq.w	800802e <_dtoa_r+0x8de>
 8007eae:	4629      	mov	r1, r5
 8007eb0:	4622      	mov	r2, r4
 8007eb2:	4648      	mov	r0, r9
 8007eb4:	f000 fcc8 	bl	8008848 <__pow5mult>
 8007eb8:	9a02      	ldr	r2, [sp, #8]
 8007eba:	4601      	mov	r1, r0
 8007ebc:	4605      	mov	r5, r0
 8007ebe:	4648      	mov	r0, r9
 8007ec0:	f000 fc20 	bl	8008704 <__multiply>
 8007ec4:	9902      	ldr	r1, [sp, #8]
 8007ec6:	4680      	mov	r8, r0
 8007ec8:	4648      	mov	r0, r9
 8007eca:	f000 fb51 	bl	8008570 <_Bfree>
 8007ece:	9b08      	ldr	r3, [sp, #32]
 8007ed0:	1b1b      	subs	r3, r3, r4
 8007ed2:	9308      	str	r3, [sp, #32]
 8007ed4:	f000 80b1 	beq.w	800803a <_dtoa_r+0x8ea>
 8007ed8:	9a08      	ldr	r2, [sp, #32]
 8007eda:	4641      	mov	r1, r8
 8007edc:	4648      	mov	r0, r9
 8007ede:	f000 fcb3 	bl	8008848 <__pow5mult>
 8007ee2:	9002      	str	r0, [sp, #8]
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	4648      	mov	r0, r9
 8007ee8:	f000 fbf6 	bl	80086d8 <__i2b>
 8007eec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007eee:	4604      	mov	r4, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 81d8 	beq.w	80082a6 <_dtoa_r+0xb56>
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	4601      	mov	r1, r0
 8007efa:	4648      	mov	r0, r9
 8007efc:	f000 fca4 	bl	8008848 <__pow5mult>
 8007f00:	9b07      	ldr	r3, [sp, #28]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	4604      	mov	r4, r0
 8007f06:	f300 809f 	bgt.w	8008048 <_dtoa_r+0x8f8>
 8007f0a:	9b04      	ldr	r3, [sp, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f040 8097 	bne.w	8008040 <_dtoa_r+0x8f0>
 8007f12:	9b05      	ldr	r3, [sp, #20]
 8007f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f040 8093 	bne.w	8008044 <_dtoa_r+0x8f4>
 8007f1e:	9b05      	ldr	r3, [sp, #20]
 8007f20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f24:	0d1b      	lsrs	r3, r3, #20
 8007f26:	051b      	lsls	r3, r3, #20
 8007f28:	b133      	cbz	r3, 8007f38 <_dtoa_r+0x7e8>
 8007f2a:	9b00      	ldr	r3, [sp, #0]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	9b06      	ldr	r3, [sp, #24]
 8007f32:	3301      	adds	r3, #1
 8007f34:	9306      	str	r3, [sp, #24]
 8007f36:	2301      	movs	r3, #1
 8007f38:	9308      	str	r3, [sp, #32]
 8007f3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 81b8 	beq.w	80082b2 <_dtoa_r+0xb62>
 8007f42:	6923      	ldr	r3, [r4, #16]
 8007f44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f48:	6918      	ldr	r0, [r3, #16]
 8007f4a:	f000 fb79 	bl	8008640 <__hi0bits>
 8007f4e:	f1c0 0020 	rsb	r0, r0, #32
 8007f52:	9b06      	ldr	r3, [sp, #24]
 8007f54:	4418      	add	r0, r3
 8007f56:	f010 001f 	ands.w	r0, r0, #31
 8007f5a:	f000 8082 	beq.w	8008062 <_dtoa_r+0x912>
 8007f5e:	f1c0 0320 	rsb	r3, r0, #32
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	dd73      	ble.n	800804e <_dtoa_r+0x8fe>
 8007f66:	9b00      	ldr	r3, [sp, #0]
 8007f68:	f1c0 001c 	rsb	r0, r0, #28
 8007f6c:	4403      	add	r3, r0
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	9b06      	ldr	r3, [sp, #24]
 8007f72:	4403      	add	r3, r0
 8007f74:	4406      	add	r6, r0
 8007f76:	9306      	str	r3, [sp, #24]
 8007f78:	9b00      	ldr	r3, [sp, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	dd05      	ble.n	8007f8a <_dtoa_r+0x83a>
 8007f7e:	9902      	ldr	r1, [sp, #8]
 8007f80:	461a      	mov	r2, r3
 8007f82:	4648      	mov	r0, r9
 8007f84:	f000 fcba 	bl	80088fc <__lshift>
 8007f88:	9002      	str	r0, [sp, #8]
 8007f8a:	9b06      	ldr	r3, [sp, #24]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	dd05      	ble.n	8007f9c <_dtoa_r+0x84c>
 8007f90:	4621      	mov	r1, r4
 8007f92:	461a      	mov	r2, r3
 8007f94:	4648      	mov	r0, r9
 8007f96:	f000 fcb1 	bl	80088fc <__lshift>
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d061      	beq.n	8008066 <_dtoa_r+0x916>
 8007fa2:	9802      	ldr	r0, [sp, #8]
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	f000 fd15 	bl	80089d4 <__mcmp>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	da5b      	bge.n	8008066 <_dtoa_r+0x916>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	9902      	ldr	r1, [sp, #8]
 8007fb2:	220a      	movs	r2, #10
 8007fb4:	4648      	mov	r0, r9
 8007fb6:	f000 fafd 	bl	80085b4 <__multadd>
 8007fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fbc:	9002      	str	r0, [sp, #8]
 8007fbe:	f107 38ff 	add.w	r8, r7, #4294967295
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 8177 	beq.w	80082b6 <_dtoa_r+0xb66>
 8007fc8:	4629      	mov	r1, r5
 8007fca:	2300      	movs	r3, #0
 8007fcc:	220a      	movs	r2, #10
 8007fce:	4648      	mov	r0, r9
 8007fd0:	f000 faf0 	bl	80085b4 <__multadd>
 8007fd4:	f1bb 0f00 	cmp.w	fp, #0
 8007fd8:	4605      	mov	r5, r0
 8007fda:	dc6f      	bgt.n	80080bc <_dtoa_r+0x96c>
 8007fdc:	9b07      	ldr	r3, [sp, #28]
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	dc49      	bgt.n	8008076 <_dtoa_r+0x926>
 8007fe2:	e06b      	b.n	80080bc <_dtoa_r+0x96c>
 8007fe4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007fe6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007fea:	e73c      	b.n	8007e66 <_dtoa_r+0x716>
 8007fec:	3fe00000 	.word	0x3fe00000
 8007ff0:	40240000 	.word	0x40240000
 8007ff4:	9b03      	ldr	r3, [sp, #12]
 8007ff6:	1e5c      	subs	r4, r3, #1
 8007ff8:	9b08      	ldr	r3, [sp, #32]
 8007ffa:	42a3      	cmp	r3, r4
 8007ffc:	db09      	blt.n	8008012 <_dtoa_r+0x8c2>
 8007ffe:	1b1c      	subs	r4, r3, r4
 8008000:	9b03      	ldr	r3, [sp, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	f6bf af30 	bge.w	8007e68 <_dtoa_r+0x718>
 8008008:	9b00      	ldr	r3, [sp, #0]
 800800a:	9a03      	ldr	r2, [sp, #12]
 800800c:	1a9e      	subs	r6, r3, r2
 800800e:	2300      	movs	r3, #0
 8008010:	e72b      	b.n	8007e6a <_dtoa_r+0x71a>
 8008012:	9b08      	ldr	r3, [sp, #32]
 8008014:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008016:	9408      	str	r4, [sp, #32]
 8008018:	1ae3      	subs	r3, r4, r3
 800801a:	441a      	add	r2, r3
 800801c:	9e00      	ldr	r6, [sp, #0]
 800801e:	9b03      	ldr	r3, [sp, #12]
 8008020:	920d      	str	r2, [sp, #52]	@ 0x34
 8008022:	2400      	movs	r4, #0
 8008024:	e721      	b.n	8007e6a <_dtoa_r+0x71a>
 8008026:	9c08      	ldr	r4, [sp, #32]
 8008028:	9e00      	ldr	r6, [sp, #0]
 800802a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800802c:	e728      	b.n	8007e80 <_dtoa_r+0x730>
 800802e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008032:	e751      	b.n	8007ed8 <_dtoa_r+0x788>
 8008034:	9a08      	ldr	r2, [sp, #32]
 8008036:	9902      	ldr	r1, [sp, #8]
 8008038:	e750      	b.n	8007edc <_dtoa_r+0x78c>
 800803a:	f8cd 8008 	str.w	r8, [sp, #8]
 800803e:	e751      	b.n	8007ee4 <_dtoa_r+0x794>
 8008040:	2300      	movs	r3, #0
 8008042:	e779      	b.n	8007f38 <_dtoa_r+0x7e8>
 8008044:	9b04      	ldr	r3, [sp, #16]
 8008046:	e777      	b.n	8007f38 <_dtoa_r+0x7e8>
 8008048:	2300      	movs	r3, #0
 800804a:	9308      	str	r3, [sp, #32]
 800804c:	e779      	b.n	8007f42 <_dtoa_r+0x7f2>
 800804e:	d093      	beq.n	8007f78 <_dtoa_r+0x828>
 8008050:	9a00      	ldr	r2, [sp, #0]
 8008052:	331c      	adds	r3, #28
 8008054:	441a      	add	r2, r3
 8008056:	9200      	str	r2, [sp, #0]
 8008058:	9a06      	ldr	r2, [sp, #24]
 800805a:	441a      	add	r2, r3
 800805c:	441e      	add	r6, r3
 800805e:	9206      	str	r2, [sp, #24]
 8008060:	e78a      	b.n	8007f78 <_dtoa_r+0x828>
 8008062:	4603      	mov	r3, r0
 8008064:	e7f4      	b.n	8008050 <_dtoa_r+0x900>
 8008066:	9b03      	ldr	r3, [sp, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	46b8      	mov	r8, r7
 800806c:	dc20      	bgt.n	80080b0 <_dtoa_r+0x960>
 800806e:	469b      	mov	fp, r3
 8008070:	9b07      	ldr	r3, [sp, #28]
 8008072:	2b02      	cmp	r3, #2
 8008074:	dd1e      	ble.n	80080b4 <_dtoa_r+0x964>
 8008076:	f1bb 0f00 	cmp.w	fp, #0
 800807a:	f47f adb1 	bne.w	8007be0 <_dtoa_r+0x490>
 800807e:	4621      	mov	r1, r4
 8008080:	465b      	mov	r3, fp
 8008082:	2205      	movs	r2, #5
 8008084:	4648      	mov	r0, r9
 8008086:	f000 fa95 	bl	80085b4 <__multadd>
 800808a:	4601      	mov	r1, r0
 800808c:	4604      	mov	r4, r0
 800808e:	9802      	ldr	r0, [sp, #8]
 8008090:	f000 fca0 	bl	80089d4 <__mcmp>
 8008094:	2800      	cmp	r0, #0
 8008096:	f77f ada3 	ble.w	8007be0 <_dtoa_r+0x490>
 800809a:	4656      	mov	r6, sl
 800809c:	2331      	movs	r3, #49	@ 0x31
 800809e:	f806 3b01 	strb.w	r3, [r6], #1
 80080a2:	f108 0801 	add.w	r8, r8, #1
 80080a6:	e59f      	b.n	8007be8 <_dtoa_r+0x498>
 80080a8:	9c03      	ldr	r4, [sp, #12]
 80080aa:	46b8      	mov	r8, r7
 80080ac:	4625      	mov	r5, r4
 80080ae:	e7f4      	b.n	800809a <_dtoa_r+0x94a>
 80080b0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80080b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 8101 	beq.w	80082be <_dtoa_r+0xb6e>
 80080bc:	2e00      	cmp	r6, #0
 80080be:	dd05      	ble.n	80080cc <_dtoa_r+0x97c>
 80080c0:	4629      	mov	r1, r5
 80080c2:	4632      	mov	r2, r6
 80080c4:	4648      	mov	r0, r9
 80080c6:	f000 fc19 	bl	80088fc <__lshift>
 80080ca:	4605      	mov	r5, r0
 80080cc:	9b08      	ldr	r3, [sp, #32]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d05c      	beq.n	800818c <_dtoa_r+0xa3c>
 80080d2:	6869      	ldr	r1, [r5, #4]
 80080d4:	4648      	mov	r0, r9
 80080d6:	f000 fa0b 	bl	80084f0 <_Balloc>
 80080da:	4606      	mov	r6, r0
 80080dc:	b928      	cbnz	r0, 80080ea <_dtoa_r+0x99a>
 80080de:	4b82      	ldr	r3, [pc, #520]	@ (80082e8 <_dtoa_r+0xb98>)
 80080e0:	4602      	mov	r2, r0
 80080e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80080e6:	f7ff bb4a 	b.w	800777e <_dtoa_r+0x2e>
 80080ea:	692a      	ldr	r2, [r5, #16]
 80080ec:	3202      	adds	r2, #2
 80080ee:	0092      	lsls	r2, r2, #2
 80080f0:	f105 010c 	add.w	r1, r5, #12
 80080f4:	300c      	adds	r0, #12
 80080f6:	f7ff fa76 	bl	80075e6 <memcpy>
 80080fa:	2201      	movs	r2, #1
 80080fc:	4631      	mov	r1, r6
 80080fe:	4648      	mov	r0, r9
 8008100:	f000 fbfc 	bl	80088fc <__lshift>
 8008104:	f10a 0301 	add.w	r3, sl, #1
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	eb0a 030b 	add.w	r3, sl, fp
 800810e:	9308      	str	r3, [sp, #32]
 8008110:	9b04      	ldr	r3, [sp, #16]
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	462f      	mov	r7, r5
 8008118:	9306      	str	r3, [sp, #24]
 800811a:	4605      	mov	r5, r0
 800811c:	9b00      	ldr	r3, [sp, #0]
 800811e:	9802      	ldr	r0, [sp, #8]
 8008120:	4621      	mov	r1, r4
 8008122:	f103 3bff 	add.w	fp, r3, #4294967295
 8008126:	f7ff fa8b 	bl	8007640 <quorem>
 800812a:	4603      	mov	r3, r0
 800812c:	3330      	adds	r3, #48	@ 0x30
 800812e:	9003      	str	r0, [sp, #12]
 8008130:	4639      	mov	r1, r7
 8008132:	9802      	ldr	r0, [sp, #8]
 8008134:	9309      	str	r3, [sp, #36]	@ 0x24
 8008136:	f000 fc4d 	bl	80089d4 <__mcmp>
 800813a:	462a      	mov	r2, r5
 800813c:	9004      	str	r0, [sp, #16]
 800813e:	4621      	mov	r1, r4
 8008140:	4648      	mov	r0, r9
 8008142:	f000 fc63 	bl	8008a0c <__mdiff>
 8008146:	68c2      	ldr	r2, [r0, #12]
 8008148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800814a:	4606      	mov	r6, r0
 800814c:	bb02      	cbnz	r2, 8008190 <_dtoa_r+0xa40>
 800814e:	4601      	mov	r1, r0
 8008150:	9802      	ldr	r0, [sp, #8]
 8008152:	f000 fc3f 	bl	80089d4 <__mcmp>
 8008156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008158:	4602      	mov	r2, r0
 800815a:	4631      	mov	r1, r6
 800815c:	4648      	mov	r0, r9
 800815e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008160:	9309      	str	r3, [sp, #36]	@ 0x24
 8008162:	f000 fa05 	bl	8008570 <_Bfree>
 8008166:	9b07      	ldr	r3, [sp, #28]
 8008168:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800816a:	9e00      	ldr	r6, [sp, #0]
 800816c:	ea42 0103 	orr.w	r1, r2, r3
 8008170:	9b06      	ldr	r3, [sp, #24]
 8008172:	4319      	orrs	r1, r3
 8008174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008176:	d10d      	bne.n	8008194 <_dtoa_r+0xa44>
 8008178:	2b39      	cmp	r3, #57	@ 0x39
 800817a:	d027      	beq.n	80081cc <_dtoa_r+0xa7c>
 800817c:	9a04      	ldr	r2, [sp, #16]
 800817e:	2a00      	cmp	r2, #0
 8008180:	dd01      	ble.n	8008186 <_dtoa_r+0xa36>
 8008182:	9b03      	ldr	r3, [sp, #12]
 8008184:	3331      	adds	r3, #49	@ 0x31
 8008186:	f88b 3000 	strb.w	r3, [fp]
 800818a:	e52e      	b.n	8007bea <_dtoa_r+0x49a>
 800818c:	4628      	mov	r0, r5
 800818e:	e7b9      	b.n	8008104 <_dtoa_r+0x9b4>
 8008190:	2201      	movs	r2, #1
 8008192:	e7e2      	b.n	800815a <_dtoa_r+0xa0a>
 8008194:	9904      	ldr	r1, [sp, #16]
 8008196:	2900      	cmp	r1, #0
 8008198:	db04      	blt.n	80081a4 <_dtoa_r+0xa54>
 800819a:	9807      	ldr	r0, [sp, #28]
 800819c:	4301      	orrs	r1, r0
 800819e:	9806      	ldr	r0, [sp, #24]
 80081a0:	4301      	orrs	r1, r0
 80081a2:	d120      	bne.n	80081e6 <_dtoa_r+0xa96>
 80081a4:	2a00      	cmp	r2, #0
 80081a6:	ddee      	ble.n	8008186 <_dtoa_r+0xa36>
 80081a8:	9902      	ldr	r1, [sp, #8]
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	2201      	movs	r2, #1
 80081ae:	4648      	mov	r0, r9
 80081b0:	f000 fba4 	bl	80088fc <__lshift>
 80081b4:	4621      	mov	r1, r4
 80081b6:	9002      	str	r0, [sp, #8]
 80081b8:	f000 fc0c 	bl	80089d4 <__mcmp>
 80081bc:	2800      	cmp	r0, #0
 80081be:	9b00      	ldr	r3, [sp, #0]
 80081c0:	dc02      	bgt.n	80081c8 <_dtoa_r+0xa78>
 80081c2:	d1e0      	bne.n	8008186 <_dtoa_r+0xa36>
 80081c4:	07da      	lsls	r2, r3, #31
 80081c6:	d5de      	bpl.n	8008186 <_dtoa_r+0xa36>
 80081c8:	2b39      	cmp	r3, #57	@ 0x39
 80081ca:	d1da      	bne.n	8008182 <_dtoa_r+0xa32>
 80081cc:	2339      	movs	r3, #57	@ 0x39
 80081ce:	f88b 3000 	strb.w	r3, [fp]
 80081d2:	4633      	mov	r3, r6
 80081d4:	461e      	mov	r6, r3
 80081d6:	3b01      	subs	r3, #1
 80081d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80081dc:	2a39      	cmp	r2, #57	@ 0x39
 80081de:	d04e      	beq.n	800827e <_dtoa_r+0xb2e>
 80081e0:	3201      	adds	r2, #1
 80081e2:	701a      	strb	r2, [r3, #0]
 80081e4:	e501      	b.n	8007bea <_dtoa_r+0x49a>
 80081e6:	2a00      	cmp	r2, #0
 80081e8:	dd03      	ble.n	80081f2 <_dtoa_r+0xaa2>
 80081ea:	2b39      	cmp	r3, #57	@ 0x39
 80081ec:	d0ee      	beq.n	80081cc <_dtoa_r+0xa7c>
 80081ee:	3301      	adds	r3, #1
 80081f0:	e7c9      	b.n	8008186 <_dtoa_r+0xa36>
 80081f2:	9a00      	ldr	r2, [sp, #0]
 80081f4:	9908      	ldr	r1, [sp, #32]
 80081f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80081fa:	428a      	cmp	r2, r1
 80081fc:	d028      	beq.n	8008250 <_dtoa_r+0xb00>
 80081fe:	9902      	ldr	r1, [sp, #8]
 8008200:	2300      	movs	r3, #0
 8008202:	220a      	movs	r2, #10
 8008204:	4648      	mov	r0, r9
 8008206:	f000 f9d5 	bl	80085b4 <__multadd>
 800820a:	42af      	cmp	r7, r5
 800820c:	9002      	str	r0, [sp, #8]
 800820e:	f04f 0300 	mov.w	r3, #0
 8008212:	f04f 020a 	mov.w	r2, #10
 8008216:	4639      	mov	r1, r7
 8008218:	4648      	mov	r0, r9
 800821a:	d107      	bne.n	800822c <_dtoa_r+0xadc>
 800821c:	f000 f9ca 	bl	80085b4 <__multadd>
 8008220:	4607      	mov	r7, r0
 8008222:	4605      	mov	r5, r0
 8008224:	9b00      	ldr	r3, [sp, #0]
 8008226:	3301      	adds	r3, #1
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	e777      	b.n	800811c <_dtoa_r+0x9cc>
 800822c:	f000 f9c2 	bl	80085b4 <__multadd>
 8008230:	4629      	mov	r1, r5
 8008232:	4607      	mov	r7, r0
 8008234:	2300      	movs	r3, #0
 8008236:	220a      	movs	r2, #10
 8008238:	4648      	mov	r0, r9
 800823a:	f000 f9bb 	bl	80085b4 <__multadd>
 800823e:	4605      	mov	r5, r0
 8008240:	e7f0      	b.n	8008224 <_dtoa_r+0xad4>
 8008242:	f1bb 0f00 	cmp.w	fp, #0
 8008246:	bfcc      	ite	gt
 8008248:	465e      	movgt	r6, fp
 800824a:	2601      	movle	r6, #1
 800824c:	4456      	add	r6, sl
 800824e:	2700      	movs	r7, #0
 8008250:	9902      	ldr	r1, [sp, #8]
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	2201      	movs	r2, #1
 8008256:	4648      	mov	r0, r9
 8008258:	f000 fb50 	bl	80088fc <__lshift>
 800825c:	4621      	mov	r1, r4
 800825e:	9002      	str	r0, [sp, #8]
 8008260:	f000 fbb8 	bl	80089d4 <__mcmp>
 8008264:	2800      	cmp	r0, #0
 8008266:	dcb4      	bgt.n	80081d2 <_dtoa_r+0xa82>
 8008268:	d102      	bne.n	8008270 <_dtoa_r+0xb20>
 800826a:	9b00      	ldr	r3, [sp, #0]
 800826c:	07db      	lsls	r3, r3, #31
 800826e:	d4b0      	bmi.n	80081d2 <_dtoa_r+0xa82>
 8008270:	4633      	mov	r3, r6
 8008272:	461e      	mov	r6, r3
 8008274:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008278:	2a30      	cmp	r2, #48	@ 0x30
 800827a:	d0fa      	beq.n	8008272 <_dtoa_r+0xb22>
 800827c:	e4b5      	b.n	8007bea <_dtoa_r+0x49a>
 800827e:	459a      	cmp	sl, r3
 8008280:	d1a8      	bne.n	80081d4 <_dtoa_r+0xa84>
 8008282:	2331      	movs	r3, #49	@ 0x31
 8008284:	f108 0801 	add.w	r8, r8, #1
 8008288:	f88a 3000 	strb.w	r3, [sl]
 800828c:	e4ad      	b.n	8007bea <_dtoa_r+0x49a>
 800828e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008290:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80082ec <_dtoa_r+0xb9c>
 8008294:	b11b      	cbz	r3, 800829e <_dtoa_r+0xb4e>
 8008296:	f10a 0308 	add.w	r3, sl, #8
 800829a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800829c:	6013      	str	r3, [r2, #0]
 800829e:	4650      	mov	r0, sl
 80082a0:	b017      	add	sp, #92	@ 0x5c
 80082a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a6:	9b07      	ldr	r3, [sp, #28]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	f77f ae2e 	ble.w	8007f0a <_dtoa_r+0x7ba>
 80082ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082b0:	9308      	str	r3, [sp, #32]
 80082b2:	2001      	movs	r0, #1
 80082b4:	e64d      	b.n	8007f52 <_dtoa_r+0x802>
 80082b6:	f1bb 0f00 	cmp.w	fp, #0
 80082ba:	f77f aed9 	ble.w	8008070 <_dtoa_r+0x920>
 80082be:	4656      	mov	r6, sl
 80082c0:	9802      	ldr	r0, [sp, #8]
 80082c2:	4621      	mov	r1, r4
 80082c4:	f7ff f9bc 	bl	8007640 <quorem>
 80082c8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80082cc:	f806 3b01 	strb.w	r3, [r6], #1
 80082d0:	eba6 020a 	sub.w	r2, r6, sl
 80082d4:	4593      	cmp	fp, r2
 80082d6:	ddb4      	ble.n	8008242 <_dtoa_r+0xaf2>
 80082d8:	9902      	ldr	r1, [sp, #8]
 80082da:	2300      	movs	r3, #0
 80082dc:	220a      	movs	r2, #10
 80082de:	4648      	mov	r0, r9
 80082e0:	f000 f968 	bl	80085b4 <__multadd>
 80082e4:	9002      	str	r0, [sp, #8]
 80082e6:	e7eb      	b.n	80082c0 <_dtoa_r+0xb70>
 80082e8:	08009b7f 	.word	0x08009b7f
 80082ec:	08009b1a 	.word	0x08009b1a

080082f0 <_free_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4605      	mov	r5, r0
 80082f4:	2900      	cmp	r1, #0
 80082f6:	d041      	beq.n	800837c <_free_r+0x8c>
 80082f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082fc:	1f0c      	subs	r4, r1, #4
 80082fe:	2b00      	cmp	r3, #0
 8008300:	bfb8      	it	lt
 8008302:	18e4      	addlt	r4, r4, r3
 8008304:	f000 f8e8 	bl	80084d8 <__malloc_lock>
 8008308:	4a1d      	ldr	r2, [pc, #116]	@ (8008380 <_free_r+0x90>)
 800830a:	6813      	ldr	r3, [r2, #0]
 800830c:	b933      	cbnz	r3, 800831c <_free_r+0x2c>
 800830e:	6063      	str	r3, [r4, #4]
 8008310:	6014      	str	r4, [r2, #0]
 8008312:	4628      	mov	r0, r5
 8008314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008318:	f000 b8e4 	b.w	80084e4 <__malloc_unlock>
 800831c:	42a3      	cmp	r3, r4
 800831e:	d908      	bls.n	8008332 <_free_r+0x42>
 8008320:	6820      	ldr	r0, [r4, #0]
 8008322:	1821      	adds	r1, r4, r0
 8008324:	428b      	cmp	r3, r1
 8008326:	bf01      	itttt	eq
 8008328:	6819      	ldreq	r1, [r3, #0]
 800832a:	685b      	ldreq	r3, [r3, #4]
 800832c:	1809      	addeq	r1, r1, r0
 800832e:	6021      	streq	r1, [r4, #0]
 8008330:	e7ed      	b.n	800830e <_free_r+0x1e>
 8008332:	461a      	mov	r2, r3
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	b10b      	cbz	r3, 800833c <_free_r+0x4c>
 8008338:	42a3      	cmp	r3, r4
 800833a:	d9fa      	bls.n	8008332 <_free_r+0x42>
 800833c:	6811      	ldr	r1, [r2, #0]
 800833e:	1850      	adds	r0, r2, r1
 8008340:	42a0      	cmp	r0, r4
 8008342:	d10b      	bne.n	800835c <_free_r+0x6c>
 8008344:	6820      	ldr	r0, [r4, #0]
 8008346:	4401      	add	r1, r0
 8008348:	1850      	adds	r0, r2, r1
 800834a:	4283      	cmp	r3, r0
 800834c:	6011      	str	r1, [r2, #0]
 800834e:	d1e0      	bne.n	8008312 <_free_r+0x22>
 8008350:	6818      	ldr	r0, [r3, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	6053      	str	r3, [r2, #4]
 8008356:	4408      	add	r0, r1
 8008358:	6010      	str	r0, [r2, #0]
 800835a:	e7da      	b.n	8008312 <_free_r+0x22>
 800835c:	d902      	bls.n	8008364 <_free_r+0x74>
 800835e:	230c      	movs	r3, #12
 8008360:	602b      	str	r3, [r5, #0]
 8008362:	e7d6      	b.n	8008312 <_free_r+0x22>
 8008364:	6820      	ldr	r0, [r4, #0]
 8008366:	1821      	adds	r1, r4, r0
 8008368:	428b      	cmp	r3, r1
 800836a:	bf04      	itt	eq
 800836c:	6819      	ldreq	r1, [r3, #0]
 800836e:	685b      	ldreq	r3, [r3, #4]
 8008370:	6063      	str	r3, [r4, #4]
 8008372:	bf04      	itt	eq
 8008374:	1809      	addeq	r1, r1, r0
 8008376:	6021      	streq	r1, [r4, #0]
 8008378:	6054      	str	r4, [r2, #4]
 800837a:	e7ca      	b.n	8008312 <_free_r+0x22>
 800837c:	bd38      	pop	{r3, r4, r5, pc}
 800837e:	bf00      	nop
 8008380:	20000e04 	.word	0x20000e04

08008384 <malloc>:
 8008384:	4b02      	ldr	r3, [pc, #8]	@ (8008390 <malloc+0xc>)
 8008386:	4601      	mov	r1, r0
 8008388:	6818      	ldr	r0, [r3, #0]
 800838a:	f000 b825 	b.w	80083d8 <_malloc_r>
 800838e:	bf00      	nop
 8008390:	2000001c 	.word	0x2000001c

08008394 <sbrk_aligned>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	4e0f      	ldr	r6, [pc, #60]	@ (80083d4 <sbrk_aligned+0x40>)
 8008398:	460c      	mov	r4, r1
 800839a:	6831      	ldr	r1, [r6, #0]
 800839c:	4605      	mov	r5, r0
 800839e:	b911      	cbnz	r1, 80083a6 <sbrk_aligned+0x12>
 80083a0:	f001 f84a 	bl	8009438 <_sbrk_r>
 80083a4:	6030      	str	r0, [r6, #0]
 80083a6:	4621      	mov	r1, r4
 80083a8:	4628      	mov	r0, r5
 80083aa:	f001 f845 	bl	8009438 <_sbrk_r>
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	d103      	bne.n	80083ba <sbrk_aligned+0x26>
 80083b2:	f04f 34ff 	mov.w	r4, #4294967295
 80083b6:	4620      	mov	r0, r4
 80083b8:	bd70      	pop	{r4, r5, r6, pc}
 80083ba:	1cc4      	adds	r4, r0, #3
 80083bc:	f024 0403 	bic.w	r4, r4, #3
 80083c0:	42a0      	cmp	r0, r4
 80083c2:	d0f8      	beq.n	80083b6 <sbrk_aligned+0x22>
 80083c4:	1a21      	subs	r1, r4, r0
 80083c6:	4628      	mov	r0, r5
 80083c8:	f001 f836 	bl	8009438 <_sbrk_r>
 80083cc:	3001      	adds	r0, #1
 80083ce:	d1f2      	bne.n	80083b6 <sbrk_aligned+0x22>
 80083d0:	e7ef      	b.n	80083b2 <sbrk_aligned+0x1e>
 80083d2:	bf00      	nop
 80083d4:	20000e00 	.word	0x20000e00

080083d8 <_malloc_r>:
 80083d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083dc:	1ccd      	adds	r5, r1, #3
 80083de:	f025 0503 	bic.w	r5, r5, #3
 80083e2:	3508      	adds	r5, #8
 80083e4:	2d0c      	cmp	r5, #12
 80083e6:	bf38      	it	cc
 80083e8:	250c      	movcc	r5, #12
 80083ea:	2d00      	cmp	r5, #0
 80083ec:	4606      	mov	r6, r0
 80083ee:	db01      	blt.n	80083f4 <_malloc_r+0x1c>
 80083f0:	42a9      	cmp	r1, r5
 80083f2:	d904      	bls.n	80083fe <_malloc_r+0x26>
 80083f4:	230c      	movs	r3, #12
 80083f6:	6033      	str	r3, [r6, #0]
 80083f8:	2000      	movs	r0, #0
 80083fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084d4 <_malloc_r+0xfc>
 8008402:	f000 f869 	bl	80084d8 <__malloc_lock>
 8008406:	f8d8 3000 	ldr.w	r3, [r8]
 800840a:	461c      	mov	r4, r3
 800840c:	bb44      	cbnz	r4, 8008460 <_malloc_r+0x88>
 800840e:	4629      	mov	r1, r5
 8008410:	4630      	mov	r0, r6
 8008412:	f7ff ffbf 	bl	8008394 <sbrk_aligned>
 8008416:	1c43      	adds	r3, r0, #1
 8008418:	4604      	mov	r4, r0
 800841a:	d158      	bne.n	80084ce <_malloc_r+0xf6>
 800841c:	f8d8 4000 	ldr.w	r4, [r8]
 8008420:	4627      	mov	r7, r4
 8008422:	2f00      	cmp	r7, #0
 8008424:	d143      	bne.n	80084ae <_malloc_r+0xd6>
 8008426:	2c00      	cmp	r4, #0
 8008428:	d04b      	beq.n	80084c2 <_malloc_r+0xea>
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	4639      	mov	r1, r7
 800842e:	4630      	mov	r0, r6
 8008430:	eb04 0903 	add.w	r9, r4, r3
 8008434:	f001 f800 	bl	8009438 <_sbrk_r>
 8008438:	4581      	cmp	r9, r0
 800843a:	d142      	bne.n	80084c2 <_malloc_r+0xea>
 800843c:	6821      	ldr	r1, [r4, #0]
 800843e:	1a6d      	subs	r5, r5, r1
 8008440:	4629      	mov	r1, r5
 8008442:	4630      	mov	r0, r6
 8008444:	f7ff ffa6 	bl	8008394 <sbrk_aligned>
 8008448:	3001      	adds	r0, #1
 800844a:	d03a      	beq.n	80084c2 <_malloc_r+0xea>
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	442b      	add	r3, r5
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	f8d8 3000 	ldr.w	r3, [r8]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	bb62      	cbnz	r2, 80084b4 <_malloc_r+0xdc>
 800845a:	f8c8 7000 	str.w	r7, [r8]
 800845e:	e00f      	b.n	8008480 <_malloc_r+0xa8>
 8008460:	6822      	ldr	r2, [r4, #0]
 8008462:	1b52      	subs	r2, r2, r5
 8008464:	d420      	bmi.n	80084a8 <_malloc_r+0xd0>
 8008466:	2a0b      	cmp	r2, #11
 8008468:	d917      	bls.n	800849a <_malloc_r+0xc2>
 800846a:	1961      	adds	r1, r4, r5
 800846c:	42a3      	cmp	r3, r4
 800846e:	6025      	str	r5, [r4, #0]
 8008470:	bf18      	it	ne
 8008472:	6059      	strne	r1, [r3, #4]
 8008474:	6863      	ldr	r3, [r4, #4]
 8008476:	bf08      	it	eq
 8008478:	f8c8 1000 	streq.w	r1, [r8]
 800847c:	5162      	str	r2, [r4, r5]
 800847e:	604b      	str	r3, [r1, #4]
 8008480:	4630      	mov	r0, r6
 8008482:	f000 f82f 	bl	80084e4 <__malloc_unlock>
 8008486:	f104 000b 	add.w	r0, r4, #11
 800848a:	1d23      	adds	r3, r4, #4
 800848c:	f020 0007 	bic.w	r0, r0, #7
 8008490:	1ac2      	subs	r2, r0, r3
 8008492:	bf1c      	itt	ne
 8008494:	1a1b      	subne	r3, r3, r0
 8008496:	50a3      	strne	r3, [r4, r2]
 8008498:	e7af      	b.n	80083fa <_malloc_r+0x22>
 800849a:	6862      	ldr	r2, [r4, #4]
 800849c:	42a3      	cmp	r3, r4
 800849e:	bf0c      	ite	eq
 80084a0:	f8c8 2000 	streq.w	r2, [r8]
 80084a4:	605a      	strne	r2, [r3, #4]
 80084a6:	e7eb      	b.n	8008480 <_malloc_r+0xa8>
 80084a8:	4623      	mov	r3, r4
 80084aa:	6864      	ldr	r4, [r4, #4]
 80084ac:	e7ae      	b.n	800840c <_malloc_r+0x34>
 80084ae:	463c      	mov	r4, r7
 80084b0:	687f      	ldr	r7, [r7, #4]
 80084b2:	e7b6      	b.n	8008422 <_malloc_r+0x4a>
 80084b4:	461a      	mov	r2, r3
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	42a3      	cmp	r3, r4
 80084ba:	d1fb      	bne.n	80084b4 <_malloc_r+0xdc>
 80084bc:	2300      	movs	r3, #0
 80084be:	6053      	str	r3, [r2, #4]
 80084c0:	e7de      	b.n	8008480 <_malloc_r+0xa8>
 80084c2:	230c      	movs	r3, #12
 80084c4:	6033      	str	r3, [r6, #0]
 80084c6:	4630      	mov	r0, r6
 80084c8:	f000 f80c 	bl	80084e4 <__malloc_unlock>
 80084cc:	e794      	b.n	80083f8 <_malloc_r+0x20>
 80084ce:	6005      	str	r5, [r0, #0]
 80084d0:	e7d6      	b.n	8008480 <_malloc_r+0xa8>
 80084d2:	bf00      	nop
 80084d4:	20000e04 	.word	0x20000e04

080084d8 <__malloc_lock>:
 80084d8:	4801      	ldr	r0, [pc, #4]	@ (80084e0 <__malloc_lock+0x8>)
 80084da:	f7ff b87a 	b.w	80075d2 <__retarget_lock_acquire_recursive>
 80084de:	bf00      	nop
 80084e0:	20000dfc 	.word	0x20000dfc

080084e4 <__malloc_unlock>:
 80084e4:	4801      	ldr	r0, [pc, #4]	@ (80084ec <__malloc_unlock+0x8>)
 80084e6:	f7ff b875 	b.w	80075d4 <__retarget_lock_release_recursive>
 80084ea:	bf00      	nop
 80084ec:	20000dfc 	.word	0x20000dfc

080084f0 <_Balloc>:
 80084f0:	b570      	push	{r4, r5, r6, lr}
 80084f2:	69c6      	ldr	r6, [r0, #28]
 80084f4:	4604      	mov	r4, r0
 80084f6:	460d      	mov	r5, r1
 80084f8:	b976      	cbnz	r6, 8008518 <_Balloc+0x28>
 80084fa:	2010      	movs	r0, #16
 80084fc:	f7ff ff42 	bl	8008384 <malloc>
 8008500:	4602      	mov	r2, r0
 8008502:	61e0      	str	r0, [r4, #28]
 8008504:	b920      	cbnz	r0, 8008510 <_Balloc+0x20>
 8008506:	4b18      	ldr	r3, [pc, #96]	@ (8008568 <_Balloc+0x78>)
 8008508:	4818      	ldr	r0, [pc, #96]	@ (800856c <_Balloc+0x7c>)
 800850a:	216b      	movs	r1, #107	@ 0x6b
 800850c:	f7ff f87a 	bl	8007604 <__assert_func>
 8008510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008514:	6006      	str	r6, [r0, #0]
 8008516:	60c6      	str	r6, [r0, #12]
 8008518:	69e6      	ldr	r6, [r4, #28]
 800851a:	68f3      	ldr	r3, [r6, #12]
 800851c:	b183      	cbz	r3, 8008540 <_Balloc+0x50>
 800851e:	69e3      	ldr	r3, [r4, #28]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008526:	b9b8      	cbnz	r0, 8008558 <_Balloc+0x68>
 8008528:	2101      	movs	r1, #1
 800852a:	fa01 f605 	lsl.w	r6, r1, r5
 800852e:	1d72      	adds	r2, r6, #5
 8008530:	0092      	lsls	r2, r2, #2
 8008532:	4620      	mov	r0, r4
 8008534:	f000 ff97 	bl	8009466 <_calloc_r>
 8008538:	b160      	cbz	r0, 8008554 <_Balloc+0x64>
 800853a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800853e:	e00e      	b.n	800855e <_Balloc+0x6e>
 8008540:	2221      	movs	r2, #33	@ 0x21
 8008542:	2104      	movs	r1, #4
 8008544:	4620      	mov	r0, r4
 8008546:	f000 ff8e 	bl	8009466 <_calloc_r>
 800854a:	69e3      	ldr	r3, [r4, #28]
 800854c:	60f0      	str	r0, [r6, #12]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e4      	bne.n	800851e <_Balloc+0x2e>
 8008554:	2000      	movs	r0, #0
 8008556:	bd70      	pop	{r4, r5, r6, pc}
 8008558:	6802      	ldr	r2, [r0, #0]
 800855a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800855e:	2300      	movs	r3, #0
 8008560:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008564:	e7f7      	b.n	8008556 <_Balloc+0x66>
 8008566:	bf00      	nop
 8008568:	08009a6d 	.word	0x08009a6d
 800856c:	08009b90 	.word	0x08009b90

08008570 <_Bfree>:
 8008570:	b570      	push	{r4, r5, r6, lr}
 8008572:	69c6      	ldr	r6, [r0, #28]
 8008574:	4605      	mov	r5, r0
 8008576:	460c      	mov	r4, r1
 8008578:	b976      	cbnz	r6, 8008598 <_Bfree+0x28>
 800857a:	2010      	movs	r0, #16
 800857c:	f7ff ff02 	bl	8008384 <malloc>
 8008580:	4602      	mov	r2, r0
 8008582:	61e8      	str	r0, [r5, #28]
 8008584:	b920      	cbnz	r0, 8008590 <_Bfree+0x20>
 8008586:	4b09      	ldr	r3, [pc, #36]	@ (80085ac <_Bfree+0x3c>)
 8008588:	4809      	ldr	r0, [pc, #36]	@ (80085b0 <_Bfree+0x40>)
 800858a:	218f      	movs	r1, #143	@ 0x8f
 800858c:	f7ff f83a 	bl	8007604 <__assert_func>
 8008590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008594:	6006      	str	r6, [r0, #0]
 8008596:	60c6      	str	r6, [r0, #12]
 8008598:	b13c      	cbz	r4, 80085aa <_Bfree+0x3a>
 800859a:	69eb      	ldr	r3, [r5, #28]
 800859c:	6862      	ldr	r2, [r4, #4]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085a4:	6021      	str	r1, [r4, #0]
 80085a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
 80085ac:	08009a6d 	.word	0x08009a6d
 80085b0:	08009b90 	.word	0x08009b90

080085b4 <__multadd>:
 80085b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b8:	690d      	ldr	r5, [r1, #16]
 80085ba:	4607      	mov	r7, r0
 80085bc:	460c      	mov	r4, r1
 80085be:	461e      	mov	r6, r3
 80085c0:	f101 0c14 	add.w	ip, r1, #20
 80085c4:	2000      	movs	r0, #0
 80085c6:	f8dc 3000 	ldr.w	r3, [ip]
 80085ca:	b299      	uxth	r1, r3
 80085cc:	fb02 6101 	mla	r1, r2, r1, r6
 80085d0:	0c1e      	lsrs	r6, r3, #16
 80085d2:	0c0b      	lsrs	r3, r1, #16
 80085d4:	fb02 3306 	mla	r3, r2, r6, r3
 80085d8:	b289      	uxth	r1, r1
 80085da:	3001      	adds	r0, #1
 80085dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085e0:	4285      	cmp	r5, r0
 80085e2:	f84c 1b04 	str.w	r1, [ip], #4
 80085e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085ea:	dcec      	bgt.n	80085c6 <__multadd+0x12>
 80085ec:	b30e      	cbz	r6, 8008632 <__multadd+0x7e>
 80085ee:	68a3      	ldr	r3, [r4, #8]
 80085f0:	42ab      	cmp	r3, r5
 80085f2:	dc19      	bgt.n	8008628 <__multadd+0x74>
 80085f4:	6861      	ldr	r1, [r4, #4]
 80085f6:	4638      	mov	r0, r7
 80085f8:	3101      	adds	r1, #1
 80085fa:	f7ff ff79 	bl	80084f0 <_Balloc>
 80085fe:	4680      	mov	r8, r0
 8008600:	b928      	cbnz	r0, 800860e <__multadd+0x5a>
 8008602:	4602      	mov	r2, r0
 8008604:	4b0c      	ldr	r3, [pc, #48]	@ (8008638 <__multadd+0x84>)
 8008606:	480d      	ldr	r0, [pc, #52]	@ (800863c <__multadd+0x88>)
 8008608:	21ba      	movs	r1, #186	@ 0xba
 800860a:	f7fe fffb 	bl	8007604 <__assert_func>
 800860e:	6922      	ldr	r2, [r4, #16]
 8008610:	3202      	adds	r2, #2
 8008612:	f104 010c 	add.w	r1, r4, #12
 8008616:	0092      	lsls	r2, r2, #2
 8008618:	300c      	adds	r0, #12
 800861a:	f7fe ffe4 	bl	80075e6 <memcpy>
 800861e:	4621      	mov	r1, r4
 8008620:	4638      	mov	r0, r7
 8008622:	f7ff ffa5 	bl	8008570 <_Bfree>
 8008626:	4644      	mov	r4, r8
 8008628:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800862c:	3501      	adds	r5, #1
 800862e:	615e      	str	r6, [r3, #20]
 8008630:	6125      	str	r5, [r4, #16]
 8008632:	4620      	mov	r0, r4
 8008634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008638:	08009b7f 	.word	0x08009b7f
 800863c:	08009b90 	.word	0x08009b90

08008640 <__hi0bits>:
 8008640:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008644:	4603      	mov	r3, r0
 8008646:	bf36      	itet	cc
 8008648:	0403      	lslcc	r3, r0, #16
 800864a:	2000      	movcs	r0, #0
 800864c:	2010      	movcc	r0, #16
 800864e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008652:	bf3c      	itt	cc
 8008654:	021b      	lslcc	r3, r3, #8
 8008656:	3008      	addcc	r0, #8
 8008658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800865c:	bf3c      	itt	cc
 800865e:	011b      	lslcc	r3, r3, #4
 8008660:	3004      	addcc	r0, #4
 8008662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008666:	bf3c      	itt	cc
 8008668:	009b      	lslcc	r3, r3, #2
 800866a:	3002      	addcc	r0, #2
 800866c:	2b00      	cmp	r3, #0
 800866e:	db05      	blt.n	800867c <__hi0bits+0x3c>
 8008670:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008674:	f100 0001 	add.w	r0, r0, #1
 8008678:	bf08      	it	eq
 800867a:	2020      	moveq	r0, #32
 800867c:	4770      	bx	lr

0800867e <__lo0bits>:
 800867e:	6803      	ldr	r3, [r0, #0]
 8008680:	4602      	mov	r2, r0
 8008682:	f013 0007 	ands.w	r0, r3, #7
 8008686:	d00b      	beq.n	80086a0 <__lo0bits+0x22>
 8008688:	07d9      	lsls	r1, r3, #31
 800868a:	d421      	bmi.n	80086d0 <__lo0bits+0x52>
 800868c:	0798      	lsls	r0, r3, #30
 800868e:	bf49      	itett	mi
 8008690:	085b      	lsrmi	r3, r3, #1
 8008692:	089b      	lsrpl	r3, r3, #2
 8008694:	2001      	movmi	r0, #1
 8008696:	6013      	strmi	r3, [r2, #0]
 8008698:	bf5c      	itt	pl
 800869a:	6013      	strpl	r3, [r2, #0]
 800869c:	2002      	movpl	r0, #2
 800869e:	4770      	bx	lr
 80086a0:	b299      	uxth	r1, r3
 80086a2:	b909      	cbnz	r1, 80086a8 <__lo0bits+0x2a>
 80086a4:	0c1b      	lsrs	r3, r3, #16
 80086a6:	2010      	movs	r0, #16
 80086a8:	b2d9      	uxtb	r1, r3
 80086aa:	b909      	cbnz	r1, 80086b0 <__lo0bits+0x32>
 80086ac:	3008      	adds	r0, #8
 80086ae:	0a1b      	lsrs	r3, r3, #8
 80086b0:	0719      	lsls	r1, r3, #28
 80086b2:	bf04      	itt	eq
 80086b4:	091b      	lsreq	r3, r3, #4
 80086b6:	3004      	addeq	r0, #4
 80086b8:	0799      	lsls	r1, r3, #30
 80086ba:	bf04      	itt	eq
 80086bc:	089b      	lsreq	r3, r3, #2
 80086be:	3002      	addeq	r0, #2
 80086c0:	07d9      	lsls	r1, r3, #31
 80086c2:	d403      	bmi.n	80086cc <__lo0bits+0x4e>
 80086c4:	085b      	lsrs	r3, r3, #1
 80086c6:	f100 0001 	add.w	r0, r0, #1
 80086ca:	d003      	beq.n	80086d4 <__lo0bits+0x56>
 80086cc:	6013      	str	r3, [r2, #0]
 80086ce:	4770      	bx	lr
 80086d0:	2000      	movs	r0, #0
 80086d2:	4770      	bx	lr
 80086d4:	2020      	movs	r0, #32
 80086d6:	4770      	bx	lr

080086d8 <__i2b>:
 80086d8:	b510      	push	{r4, lr}
 80086da:	460c      	mov	r4, r1
 80086dc:	2101      	movs	r1, #1
 80086de:	f7ff ff07 	bl	80084f0 <_Balloc>
 80086e2:	4602      	mov	r2, r0
 80086e4:	b928      	cbnz	r0, 80086f2 <__i2b+0x1a>
 80086e6:	4b05      	ldr	r3, [pc, #20]	@ (80086fc <__i2b+0x24>)
 80086e8:	4805      	ldr	r0, [pc, #20]	@ (8008700 <__i2b+0x28>)
 80086ea:	f240 1145 	movw	r1, #325	@ 0x145
 80086ee:	f7fe ff89 	bl	8007604 <__assert_func>
 80086f2:	2301      	movs	r3, #1
 80086f4:	6144      	str	r4, [r0, #20]
 80086f6:	6103      	str	r3, [r0, #16]
 80086f8:	bd10      	pop	{r4, pc}
 80086fa:	bf00      	nop
 80086fc:	08009b7f 	.word	0x08009b7f
 8008700:	08009b90 	.word	0x08009b90

08008704 <__multiply>:
 8008704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008708:	4617      	mov	r7, r2
 800870a:	690a      	ldr	r2, [r1, #16]
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	429a      	cmp	r2, r3
 8008710:	bfa8      	it	ge
 8008712:	463b      	movge	r3, r7
 8008714:	4689      	mov	r9, r1
 8008716:	bfa4      	itt	ge
 8008718:	460f      	movge	r7, r1
 800871a:	4699      	movge	r9, r3
 800871c:	693d      	ldr	r5, [r7, #16]
 800871e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	6879      	ldr	r1, [r7, #4]
 8008726:	eb05 060a 	add.w	r6, r5, sl
 800872a:	42b3      	cmp	r3, r6
 800872c:	b085      	sub	sp, #20
 800872e:	bfb8      	it	lt
 8008730:	3101      	addlt	r1, #1
 8008732:	f7ff fedd 	bl	80084f0 <_Balloc>
 8008736:	b930      	cbnz	r0, 8008746 <__multiply+0x42>
 8008738:	4602      	mov	r2, r0
 800873a:	4b41      	ldr	r3, [pc, #260]	@ (8008840 <__multiply+0x13c>)
 800873c:	4841      	ldr	r0, [pc, #260]	@ (8008844 <__multiply+0x140>)
 800873e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008742:	f7fe ff5f 	bl	8007604 <__assert_func>
 8008746:	f100 0414 	add.w	r4, r0, #20
 800874a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800874e:	4623      	mov	r3, r4
 8008750:	2200      	movs	r2, #0
 8008752:	4573      	cmp	r3, lr
 8008754:	d320      	bcc.n	8008798 <__multiply+0x94>
 8008756:	f107 0814 	add.w	r8, r7, #20
 800875a:	f109 0114 	add.w	r1, r9, #20
 800875e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008762:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008766:	9302      	str	r3, [sp, #8]
 8008768:	1beb      	subs	r3, r5, r7
 800876a:	3b15      	subs	r3, #21
 800876c:	f023 0303 	bic.w	r3, r3, #3
 8008770:	3304      	adds	r3, #4
 8008772:	3715      	adds	r7, #21
 8008774:	42bd      	cmp	r5, r7
 8008776:	bf38      	it	cc
 8008778:	2304      	movcc	r3, #4
 800877a:	9301      	str	r3, [sp, #4]
 800877c:	9b02      	ldr	r3, [sp, #8]
 800877e:	9103      	str	r1, [sp, #12]
 8008780:	428b      	cmp	r3, r1
 8008782:	d80c      	bhi.n	800879e <__multiply+0x9a>
 8008784:	2e00      	cmp	r6, #0
 8008786:	dd03      	ble.n	8008790 <__multiply+0x8c>
 8008788:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800878c:	2b00      	cmp	r3, #0
 800878e:	d055      	beq.n	800883c <__multiply+0x138>
 8008790:	6106      	str	r6, [r0, #16]
 8008792:	b005      	add	sp, #20
 8008794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008798:	f843 2b04 	str.w	r2, [r3], #4
 800879c:	e7d9      	b.n	8008752 <__multiply+0x4e>
 800879e:	f8b1 a000 	ldrh.w	sl, [r1]
 80087a2:	f1ba 0f00 	cmp.w	sl, #0
 80087a6:	d01f      	beq.n	80087e8 <__multiply+0xe4>
 80087a8:	46c4      	mov	ip, r8
 80087aa:	46a1      	mov	r9, r4
 80087ac:	2700      	movs	r7, #0
 80087ae:	f85c 2b04 	ldr.w	r2, [ip], #4
 80087b2:	f8d9 3000 	ldr.w	r3, [r9]
 80087b6:	fa1f fb82 	uxth.w	fp, r2
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	fb0a 330b 	mla	r3, sl, fp, r3
 80087c0:	443b      	add	r3, r7
 80087c2:	f8d9 7000 	ldr.w	r7, [r9]
 80087c6:	0c12      	lsrs	r2, r2, #16
 80087c8:	0c3f      	lsrs	r7, r7, #16
 80087ca:	fb0a 7202 	mla	r2, sl, r2, r7
 80087ce:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087d8:	4565      	cmp	r5, ip
 80087da:	f849 3b04 	str.w	r3, [r9], #4
 80087de:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80087e2:	d8e4      	bhi.n	80087ae <__multiply+0xaa>
 80087e4:	9b01      	ldr	r3, [sp, #4]
 80087e6:	50e7      	str	r7, [r4, r3]
 80087e8:	9b03      	ldr	r3, [sp, #12]
 80087ea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80087ee:	3104      	adds	r1, #4
 80087f0:	f1b9 0f00 	cmp.w	r9, #0
 80087f4:	d020      	beq.n	8008838 <__multiply+0x134>
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	4647      	mov	r7, r8
 80087fa:	46a4      	mov	ip, r4
 80087fc:	f04f 0a00 	mov.w	sl, #0
 8008800:	f8b7 b000 	ldrh.w	fp, [r7]
 8008804:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008808:	fb09 220b 	mla	r2, r9, fp, r2
 800880c:	4452      	add	r2, sl
 800880e:	b29b      	uxth	r3, r3
 8008810:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008814:	f84c 3b04 	str.w	r3, [ip], #4
 8008818:	f857 3b04 	ldr.w	r3, [r7], #4
 800881c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008820:	f8bc 3000 	ldrh.w	r3, [ip]
 8008824:	fb09 330a 	mla	r3, r9, sl, r3
 8008828:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800882c:	42bd      	cmp	r5, r7
 800882e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008832:	d8e5      	bhi.n	8008800 <__multiply+0xfc>
 8008834:	9a01      	ldr	r2, [sp, #4]
 8008836:	50a3      	str	r3, [r4, r2]
 8008838:	3404      	adds	r4, #4
 800883a:	e79f      	b.n	800877c <__multiply+0x78>
 800883c:	3e01      	subs	r6, #1
 800883e:	e7a1      	b.n	8008784 <__multiply+0x80>
 8008840:	08009b7f 	.word	0x08009b7f
 8008844:	08009b90 	.word	0x08009b90

08008848 <__pow5mult>:
 8008848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800884c:	4615      	mov	r5, r2
 800884e:	f012 0203 	ands.w	r2, r2, #3
 8008852:	4607      	mov	r7, r0
 8008854:	460e      	mov	r6, r1
 8008856:	d007      	beq.n	8008868 <__pow5mult+0x20>
 8008858:	4c25      	ldr	r4, [pc, #148]	@ (80088f0 <__pow5mult+0xa8>)
 800885a:	3a01      	subs	r2, #1
 800885c:	2300      	movs	r3, #0
 800885e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008862:	f7ff fea7 	bl	80085b4 <__multadd>
 8008866:	4606      	mov	r6, r0
 8008868:	10ad      	asrs	r5, r5, #2
 800886a:	d03d      	beq.n	80088e8 <__pow5mult+0xa0>
 800886c:	69fc      	ldr	r4, [r7, #28]
 800886e:	b97c      	cbnz	r4, 8008890 <__pow5mult+0x48>
 8008870:	2010      	movs	r0, #16
 8008872:	f7ff fd87 	bl	8008384 <malloc>
 8008876:	4602      	mov	r2, r0
 8008878:	61f8      	str	r0, [r7, #28]
 800887a:	b928      	cbnz	r0, 8008888 <__pow5mult+0x40>
 800887c:	4b1d      	ldr	r3, [pc, #116]	@ (80088f4 <__pow5mult+0xac>)
 800887e:	481e      	ldr	r0, [pc, #120]	@ (80088f8 <__pow5mult+0xb0>)
 8008880:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008884:	f7fe febe 	bl	8007604 <__assert_func>
 8008888:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800888c:	6004      	str	r4, [r0, #0]
 800888e:	60c4      	str	r4, [r0, #12]
 8008890:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008894:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008898:	b94c      	cbnz	r4, 80088ae <__pow5mult+0x66>
 800889a:	f240 2171 	movw	r1, #625	@ 0x271
 800889e:	4638      	mov	r0, r7
 80088a0:	f7ff ff1a 	bl	80086d8 <__i2b>
 80088a4:	2300      	movs	r3, #0
 80088a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80088aa:	4604      	mov	r4, r0
 80088ac:	6003      	str	r3, [r0, #0]
 80088ae:	f04f 0900 	mov.w	r9, #0
 80088b2:	07eb      	lsls	r3, r5, #31
 80088b4:	d50a      	bpl.n	80088cc <__pow5mult+0x84>
 80088b6:	4631      	mov	r1, r6
 80088b8:	4622      	mov	r2, r4
 80088ba:	4638      	mov	r0, r7
 80088bc:	f7ff ff22 	bl	8008704 <__multiply>
 80088c0:	4631      	mov	r1, r6
 80088c2:	4680      	mov	r8, r0
 80088c4:	4638      	mov	r0, r7
 80088c6:	f7ff fe53 	bl	8008570 <_Bfree>
 80088ca:	4646      	mov	r6, r8
 80088cc:	106d      	asrs	r5, r5, #1
 80088ce:	d00b      	beq.n	80088e8 <__pow5mult+0xa0>
 80088d0:	6820      	ldr	r0, [r4, #0]
 80088d2:	b938      	cbnz	r0, 80088e4 <__pow5mult+0x9c>
 80088d4:	4622      	mov	r2, r4
 80088d6:	4621      	mov	r1, r4
 80088d8:	4638      	mov	r0, r7
 80088da:	f7ff ff13 	bl	8008704 <__multiply>
 80088de:	6020      	str	r0, [r4, #0]
 80088e0:	f8c0 9000 	str.w	r9, [r0]
 80088e4:	4604      	mov	r4, r0
 80088e6:	e7e4      	b.n	80088b2 <__pow5mult+0x6a>
 80088e8:	4630      	mov	r0, r6
 80088ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ee:	bf00      	nop
 80088f0:	08009c04 	.word	0x08009c04
 80088f4:	08009a6d 	.word	0x08009a6d
 80088f8:	08009b90 	.word	0x08009b90

080088fc <__lshift>:
 80088fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008900:	460c      	mov	r4, r1
 8008902:	6849      	ldr	r1, [r1, #4]
 8008904:	6923      	ldr	r3, [r4, #16]
 8008906:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800890a:	68a3      	ldr	r3, [r4, #8]
 800890c:	4607      	mov	r7, r0
 800890e:	4691      	mov	r9, r2
 8008910:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008914:	f108 0601 	add.w	r6, r8, #1
 8008918:	42b3      	cmp	r3, r6
 800891a:	db0b      	blt.n	8008934 <__lshift+0x38>
 800891c:	4638      	mov	r0, r7
 800891e:	f7ff fde7 	bl	80084f0 <_Balloc>
 8008922:	4605      	mov	r5, r0
 8008924:	b948      	cbnz	r0, 800893a <__lshift+0x3e>
 8008926:	4602      	mov	r2, r0
 8008928:	4b28      	ldr	r3, [pc, #160]	@ (80089cc <__lshift+0xd0>)
 800892a:	4829      	ldr	r0, [pc, #164]	@ (80089d0 <__lshift+0xd4>)
 800892c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008930:	f7fe fe68 	bl	8007604 <__assert_func>
 8008934:	3101      	adds	r1, #1
 8008936:	005b      	lsls	r3, r3, #1
 8008938:	e7ee      	b.n	8008918 <__lshift+0x1c>
 800893a:	2300      	movs	r3, #0
 800893c:	f100 0114 	add.w	r1, r0, #20
 8008940:	f100 0210 	add.w	r2, r0, #16
 8008944:	4618      	mov	r0, r3
 8008946:	4553      	cmp	r3, sl
 8008948:	db33      	blt.n	80089b2 <__lshift+0xb6>
 800894a:	6920      	ldr	r0, [r4, #16]
 800894c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008950:	f104 0314 	add.w	r3, r4, #20
 8008954:	f019 091f 	ands.w	r9, r9, #31
 8008958:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800895c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008960:	d02b      	beq.n	80089ba <__lshift+0xbe>
 8008962:	f1c9 0e20 	rsb	lr, r9, #32
 8008966:	468a      	mov	sl, r1
 8008968:	2200      	movs	r2, #0
 800896a:	6818      	ldr	r0, [r3, #0]
 800896c:	fa00 f009 	lsl.w	r0, r0, r9
 8008970:	4310      	orrs	r0, r2
 8008972:	f84a 0b04 	str.w	r0, [sl], #4
 8008976:	f853 2b04 	ldr.w	r2, [r3], #4
 800897a:	459c      	cmp	ip, r3
 800897c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008980:	d8f3      	bhi.n	800896a <__lshift+0x6e>
 8008982:	ebac 0304 	sub.w	r3, ip, r4
 8008986:	3b15      	subs	r3, #21
 8008988:	f023 0303 	bic.w	r3, r3, #3
 800898c:	3304      	adds	r3, #4
 800898e:	f104 0015 	add.w	r0, r4, #21
 8008992:	4560      	cmp	r0, ip
 8008994:	bf88      	it	hi
 8008996:	2304      	movhi	r3, #4
 8008998:	50ca      	str	r2, [r1, r3]
 800899a:	b10a      	cbz	r2, 80089a0 <__lshift+0xa4>
 800899c:	f108 0602 	add.w	r6, r8, #2
 80089a0:	3e01      	subs	r6, #1
 80089a2:	4638      	mov	r0, r7
 80089a4:	612e      	str	r6, [r5, #16]
 80089a6:	4621      	mov	r1, r4
 80089a8:	f7ff fde2 	bl	8008570 <_Bfree>
 80089ac:	4628      	mov	r0, r5
 80089ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80089b6:	3301      	adds	r3, #1
 80089b8:	e7c5      	b.n	8008946 <__lshift+0x4a>
 80089ba:	3904      	subs	r1, #4
 80089bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80089c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80089c4:	459c      	cmp	ip, r3
 80089c6:	d8f9      	bhi.n	80089bc <__lshift+0xc0>
 80089c8:	e7ea      	b.n	80089a0 <__lshift+0xa4>
 80089ca:	bf00      	nop
 80089cc:	08009b7f 	.word	0x08009b7f
 80089d0:	08009b90 	.word	0x08009b90

080089d4 <__mcmp>:
 80089d4:	690a      	ldr	r2, [r1, #16]
 80089d6:	4603      	mov	r3, r0
 80089d8:	6900      	ldr	r0, [r0, #16]
 80089da:	1a80      	subs	r0, r0, r2
 80089dc:	b530      	push	{r4, r5, lr}
 80089de:	d10e      	bne.n	80089fe <__mcmp+0x2a>
 80089e0:	3314      	adds	r3, #20
 80089e2:	3114      	adds	r1, #20
 80089e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80089e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80089ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089f4:	4295      	cmp	r5, r2
 80089f6:	d003      	beq.n	8008a00 <__mcmp+0x2c>
 80089f8:	d205      	bcs.n	8008a06 <__mcmp+0x32>
 80089fa:	f04f 30ff 	mov.w	r0, #4294967295
 80089fe:	bd30      	pop	{r4, r5, pc}
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	d3f3      	bcc.n	80089ec <__mcmp+0x18>
 8008a04:	e7fb      	b.n	80089fe <__mcmp+0x2a>
 8008a06:	2001      	movs	r0, #1
 8008a08:	e7f9      	b.n	80089fe <__mcmp+0x2a>
	...

08008a0c <__mdiff>:
 8008a0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a10:	4689      	mov	r9, r1
 8008a12:	4606      	mov	r6, r0
 8008a14:	4611      	mov	r1, r2
 8008a16:	4648      	mov	r0, r9
 8008a18:	4614      	mov	r4, r2
 8008a1a:	f7ff ffdb 	bl	80089d4 <__mcmp>
 8008a1e:	1e05      	subs	r5, r0, #0
 8008a20:	d112      	bne.n	8008a48 <__mdiff+0x3c>
 8008a22:	4629      	mov	r1, r5
 8008a24:	4630      	mov	r0, r6
 8008a26:	f7ff fd63 	bl	80084f0 <_Balloc>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	b928      	cbnz	r0, 8008a3a <__mdiff+0x2e>
 8008a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8008b2c <__mdiff+0x120>)
 8008a30:	f240 2137 	movw	r1, #567	@ 0x237
 8008a34:	483e      	ldr	r0, [pc, #248]	@ (8008b30 <__mdiff+0x124>)
 8008a36:	f7fe fde5 	bl	8007604 <__assert_func>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a40:	4610      	mov	r0, r2
 8008a42:	b003      	add	sp, #12
 8008a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a48:	bfbc      	itt	lt
 8008a4a:	464b      	movlt	r3, r9
 8008a4c:	46a1      	movlt	r9, r4
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008a54:	bfba      	itte	lt
 8008a56:	461c      	movlt	r4, r3
 8008a58:	2501      	movlt	r5, #1
 8008a5a:	2500      	movge	r5, #0
 8008a5c:	f7ff fd48 	bl	80084f0 <_Balloc>
 8008a60:	4602      	mov	r2, r0
 8008a62:	b918      	cbnz	r0, 8008a6c <__mdiff+0x60>
 8008a64:	4b31      	ldr	r3, [pc, #196]	@ (8008b2c <__mdiff+0x120>)
 8008a66:	f240 2145 	movw	r1, #581	@ 0x245
 8008a6a:	e7e3      	b.n	8008a34 <__mdiff+0x28>
 8008a6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008a70:	6926      	ldr	r6, [r4, #16]
 8008a72:	60c5      	str	r5, [r0, #12]
 8008a74:	f109 0310 	add.w	r3, r9, #16
 8008a78:	f109 0514 	add.w	r5, r9, #20
 8008a7c:	f104 0e14 	add.w	lr, r4, #20
 8008a80:	f100 0b14 	add.w	fp, r0, #20
 8008a84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008a88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	46d9      	mov	r9, fp
 8008a90:	f04f 0c00 	mov.w	ip, #0
 8008a94:	9b01      	ldr	r3, [sp, #4]
 8008a96:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008a9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008a9e:	9301      	str	r3, [sp, #4]
 8008aa0:	fa1f f38a 	uxth.w	r3, sl
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	b283      	uxth	r3, r0
 8008aa8:	1acb      	subs	r3, r1, r3
 8008aaa:	0c00      	lsrs	r0, r0, #16
 8008aac:	4463      	add	r3, ip
 8008aae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008ab2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008abc:	4576      	cmp	r6, lr
 8008abe:	f849 3b04 	str.w	r3, [r9], #4
 8008ac2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ac6:	d8e5      	bhi.n	8008a94 <__mdiff+0x88>
 8008ac8:	1b33      	subs	r3, r6, r4
 8008aca:	3b15      	subs	r3, #21
 8008acc:	f023 0303 	bic.w	r3, r3, #3
 8008ad0:	3415      	adds	r4, #21
 8008ad2:	3304      	adds	r3, #4
 8008ad4:	42a6      	cmp	r6, r4
 8008ad6:	bf38      	it	cc
 8008ad8:	2304      	movcc	r3, #4
 8008ada:	441d      	add	r5, r3
 8008adc:	445b      	add	r3, fp
 8008ade:	461e      	mov	r6, r3
 8008ae0:	462c      	mov	r4, r5
 8008ae2:	4544      	cmp	r4, r8
 8008ae4:	d30e      	bcc.n	8008b04 <__mdiff+0xf8>
 8008ae6:	f108 0103 	add.w	r1, r8, #3
 8008aea:	1b49      	subs	r1, r1, r5
 8008aec:	f021 0103 	bic.w	r1, r1, #3
 8008af0:	3d03      	subs	r5, #3
 8008af2:	45a8      	cmp	r8, r5
 8008af4:	bf38      	it	cc
 8008af6:	2100      	movcc	r1, #0
 8008af8:	440b      	add	r3, r1
 8008afa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008afe:	b191      	cbz	r1, 8008b26 <__mdiff+0x11a>
 8008b00:	6117      	str	r7, [r2, #16]
 8008b02:	e79d      	b.n	8008a40 <__mdiff+0x34>
 8008b04:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b08:	46e6      	mov	lr, ip
 8008b0a:	0c08      	lsrs	r0, r1, #16
 8008b0c:	fa1c fc81 	uxtah	ip, ip, r1
 8008b10:	4471      	add	r1, lr
 8008b12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b16:	b289      	uxth	r1, r1
 8008b18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b1c:	f846 1b04 	str.w	r1, [r6], #4
 8008b20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b24:	e7dd      	b.n	8008ae2 <__mdiff+0xd6>
 8008b26:	3f01      	subs	r7, #1
 8008b28:	e7e7      	b.n	8008afa <__mdiff+0xee>
 8008b2a:	bf00      	nop
 8008b2c:	08009b7f 	.word	0x08009b7f
 8008b30:	08009b90 	.word	0x08009b90

08008b34 <__d2b>:
 8008b34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b38:	460f      	mov	r7, r1
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	ec59 8b10 	vmov	r8, r9, d0
 8008b40:	4616      	mov	r6, r2
 8008b42:	f7ff fcd5 	bl	80084f0 <_Balloc>
 8008b46:	4604      	mov	r4, r0
 8008b48:	b930      	cbnz	r0, 8008b58 <__d2b+0x24>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	4b23      	ldr	r3, [pc, #140]	@ (8008bdc <__d2b+0xa8>)
 8008b4e:	4824      	ldr	r0, [pc, #144]	@ (8008be0 <__d2b+0xac>)
 8008b50:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b54:	f7fe fd56 	bl	8007604 <__assert_func>
 8008b58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b60:	b10d      	cbz	r5, 8008b66 <__d2b+0x32>
 8008b62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b66:	9301      	str	r3, [sp, #4]
 8008b68:	f1b8 0300 	subs.w	r3, r8, #0
 8008b6c:	d023      	beq.n	8008bb6 <__d2b+0x82>
 8008b6e:	4668      	mov	r0, sp
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	f7ff fd84 	bl	800867e <__lo0bits>
 8008b76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b7a:	b1d0      	cbz	r0, 8008bb2 <__d2b+0x7e>
 8008b7c:	f1c0 0320 	rsb	r3, r0, #32
 8008b80:	fa02 f303 	lsl.w	r3, r2, r3
 8008b84:	430b      	orrs	r3, r1
 8008b86:	40c2      	lsrs	r2, r0
 8008b88:	6163      	str	r3, [r4, #20]
 8008b8a:	9201      	str	r2, [sp, #4]
 8008b8c:	9b01      	ldr	r3, [sp, #4]
 8008b8e:	61a3      	str	r3, [r4, #24]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	bf0c      	ite	eq
 8008b94:	2201      	moveq	r2, #1
 8008b96:	2202      	movne	r2, #2
 8008b98:	6122      	str	r2, [r4, #16]
 8008b9a:	b1a5      	cbz	r5, 8008bc6 <__d2b+0x92>
 8008b9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ba0:	4405      	add	r5, r0
 8008ba2:	603d      	str	r5, [r7, #0]
 8008ba4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008ba8:	6030      	str	r0, [r6, #0]
 8008baa:	4620      	mov	r0, r4
 8008bac:	b003      	add	sp, #12
 8008bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bb2:	6161      	str	r1, [r4, #20]
 8008bb4:	e7ea      	b.n	8008b8c <__d2b+0x58>
 8008bb6:	a801      	add	r0, sp, #4
 8008bb8:	f7ff fd61 	bl	800867e <__lo0bits>
 8008bbc:	9b01      	ldr	r3, [sp, #4]
 8008bbe:	6163      	str	r3, [r4, #20]
 8008bc0:	3020      	adds	r0, #32
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	e7e8      	b.n	8008b98 <__d2b+0x64>
 8008bc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008bce:	6038      	str	r0, [r7, #0]
 8008bd0:	6918      	ldr	r0, [r3, #16]
 8008bd2:	f7ff fd35 	bl	8008640 <__hi0bits>
 8008bd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bda:	e7e5      	b.n	8008ba8 <__d2b+0x74>
 8008bdc:	08009b7f 	.word	0x08009b7f
 8008be0:	08009b90 	.word	0x08009b90

08008be4 <__ssputs_r>:
 8008be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be8:	688e      	ldr	r6, [r1, #8]
 8008bea:	461f      	mov	r7, r3
 8008bec:	42be      	cmp	r6, r7
 8008bee:	680b      	ldr	r3, [r1, #0]
 8008bf0:	4682      	mov	sl, r0
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	4690      	mov	r8, r2
 8008bf6:	d82d      	bhi.n	8008c54 <__ssputs_r+0x70>
 8008bf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008bfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c00:	d026      	beq.n	8008c50 <__ssputs_r+0x6c>
 8008c02:	6965      	ldr	r5, [r4, #20]
 8008c04:	6909      	ldr	r1, [r1, #16]
 8008c06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c0a:	eba3 0901 	sub.w	r9, r3, r1
 8008c0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c12:	1c7b      	adds	r3, r7, #1
 8008c14:	444b      	add	r3, r9
 8008c16:	106d      	asrs	r5, r5, #1
 8008c18:	429d      	cmp	r5, r3
 8008c1a:	bf38      	it	cc
 8008c1c:	461d      	movcc	r5, r3
 8008c1e:	0553      	lsls	r3, r2, #21
 8008c20:	d527      	bpl.n	8008c72 <__ssputs_r+0x8e>
 8008c22:	4629      	mov	r1, r5
 8008c24:	f7ff fbd8 	bl	80083d8 <_malloc_r>
 8008c28:	4606      	mov	r6, r0
 8008c2a:	b360      	cbz	r0, 8008c86 <__ssputs_r+0xa2>
 8008c2c:	6921      	ldr	r1, [r4, #16]
 8008c2e:	464a      	mov	r2, r9
 8008c30:	f7fe fcd9 	bl	80075e6 <memcpy>
 8008c34:	89a3      	ldrh	r3, [r4, #12]
 8008c36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c3e:	81a3      	strh	r3, [r4, #12]
 8008c40:	6126      	str	r6, [r4, #16]
 8008c42:	6165      	str	r5, [r4, #20]
 8008c44:	444e      	add	r6, r9
 8008c46:	eba5 0509 	sub.w	r5, r5, r9
 8008c4a:	6026      	str	r6, [r4, #0]
 8008c4c:	60a5      	str	r5, [r4, #8]
 8008c4e:	463e      	mov	r6, r7
 8008c50:	42be      	cmp	r6, r7
 8008c52:	d900      	bls.n	8008c56 <__ssputs_r+0x72>
 8008c54:	463e      	mov	r6, r7
 8008c56:	6820      	ldr	r0, [r4, #0]
 8008c58:	4632      	mov	r2, r6
 8008c5a:	4641      	mov	r1, r8
 8008c5c:	f000 fbb0 	bl	80093c0 <memmove>
 8008c60:	68a3      	ldr	r3, [r4, #8]
 8008c62:	1b9b      	subs	r3, r3, r6
 8008c64:	60a3      	str	r3, [r4, #8]
 8008c66:	6823      	ldr	r3, [r4, #0]
 8008c68:	4433      	add	r3, r6
 8008c6a:	6023      	str	r3, [r4, #0]
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c72:	462a      	mov	r2, r5
 8008c74:	f000 fc1d 	bl	80094b2 <_realloc_r>
 8008c78:	4606      	mov	r6, r0
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	d1e0      	bne.n	8008c40 <__ssputs_r+0x5c>
 8008c7e:	6921      	ldr	r1, [r4, #16]
 8008c80:	4650      	mov	r0, sl
 8008c82:	f7ff fb35 	bl	80082f0 <_free_r>
 8008c86:	230c      	movs	r3, #12
 8008c88:	f8ca 3000 	str.w	r3, [sl]
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c92:	81a3      	strh	r3, [r4, #12]
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295
 8008c98:	e7e9      	b.n	8008c6e <__ssputs_r+0x8a>
	...

08008c9c <_svfiprintf_r>:
 8008c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca0:	4698      	mov	r8, r3
 8008ca2:	898b      	ldrh	r3, [r1, #12]
 8008ca4:	061b      	lsls	r3, r3, #24
 8008ca6:	b09d      	sub	sp, #116	@ 0x74
 8008ca8:	4607      	mov	r7, r0
 8008caa:	460d      	mov	r5, r1
 8008cac:	4614      	mov	r4, r2
 8008cae:	d510      	bpl.n	8008cd2 <_svfiprintf_r+0x36>
 8008cb0:	690b      	ldr	r3, [r1, #16]
 8008cb2:	b973      	cbnz	r3, 8008cd2 <_svfiprintf_r+0x36>
 8008cb4:	2140      	movs	r1, #64	@ 0x40
 8008cb6:	f7ff fb8f 	bl	80083d8 <_malloc_r>
 8008cba:	6028      	str	r0, [r5, #0]
 8008cbc:	6128      	str	r0, [r5, #16]
 8008cbe:	b930      	cbnz	r0, 8008cce <_svfiprintf_r+0x32>
 8008cc0:	230c      	movs	r3, #12
 8008cc2:	603b      	str	r3, [r7, #0]
 8008cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc8:	b01d      	add	sp, #116	@ 0x74
 8008cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cce:	2340      	movs	r3, #64	@ 0x40
 8008cd0:	616b      	str	r3, [r5, #20]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cd6:	2320      	movs	r3, #32
 8008cd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ce0:	2330      	movs	r3, #48	@ 0x30
 8008ce2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008e80 <_svfiprintf_r+0x1e4>
 8008ce6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cea:	f04f 0901 	mov.w	r9, #1
 8008cee:	4623      	mov	r3, r4
 8008cf0:	469a      	mov	sl, r3
 8008cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cf6:	b10a      	cbz	r2, 8008cfc <_svfiprintf_r+0x60>
 8008cf8:	2a25      	cmp	r2, #37	@ 0x25
 8008cfa:	d1f9      	bne.n	8008cf0 <_svfiprintf_r+0x54>
 8008cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8008d00:	d00b      	beq.n	8008d1a <_svfiprintf_r+0x7e>
 8008d02:	465b      	mov	r3, fp
 8008d04:	4622      	mov	r2, r4
 8008d06:	4629      	mov	r1, r5
 8008d08:	4638      	mov	r0, r7
 8008d0a:	f7ff ff6b 	bl	8008be4 <__ssputs_r>
 8008d0e:	3001      	adds	r0, #1
 8008d10:	f000 80a7 	beq.w	8008e62 <_svfiprintf_r+0x1c6>
 8008d14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d16:	445a      	add	r2, fp
 8008d18:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 809f 	beq.w	8008e62 <_svfiprintf_r+0x1c6>
 8008d24:	2300      	movs	r3, #0
 8008d26:	f04f 32ff 	mov.w	r2, #4294967295
 8008d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d2e:	f10a 0a01 	add.w	sl, sl, #1
 8008d32:	9304      	str	r3, [sp, #16]
 8008d34:	9307      	str	r3, [sp, #28]
 8008d36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d3c:	4654      	mov	r4, sl
 8008d3e:	2205      	movs	r2, #5
 8008d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d44:	484e      	ldr	r0, [pc, #312]	@ (8008e80 <_svfiprintf_r+0x1e4>)
 8008d46:	f7f7 fa5b 	bl	8000200 <memchr>
 8008d4a:	9a04      	ldr	r2, [sp, #16]
 8008d4c:	b9d8      	cbnz	r0, 8008d86 <_svfiprintf_r+0xea>
 8008d4e:	06d0      	lsls	r0, r2, #27
 8008d50:	bf44      	itt	mi
 8008d52:	2320      	movmi	r3, #32
 8008d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d58:	0711      	lsls	r1, r2, #28
 8008d5a:	bf44      	itt	mi
 8008d5c:	232b      	movmi	r3, #43	@ 0x2b
 8008d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d62:	f89a 3000 	ldrb.w	r3, [sl]
 8008d66:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d68:	d015      	beq.n	8008d96 <_svfiprintf_r+0xfa>
 8008d6a:	9a07      	ldr	r2, [sp, #28]
 8008d6c:	4654      	mov	r4, sl
 8008d6e:	2000      	movs	r0, #0
 8008d70:	f04f 0c0a 	mov.w	ip, #10
 8008d74:	4621      	mov	r1, r4
 8008d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d7a:	3b30      	subs	r3, #48	@ 0x30
 8008d7c:	2b09      	cmp	r3, #9
 8008d7e:	d94b      	bls.n	8008e18 <_svfiprintf_r+0x17c>
 8008d80:	b1b0      	cbz	r0, 8008db0 <_svfiprintf_r+0x114>
 8008d82:	9207      	str	r2, [sp, #28]
 8008d84:	e014      	b.n	8008db0 <_svfiprintf_r+0x114>
 8008d86:	eba0 0308 	sub.w	r3, r0, r8
 8008d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	9304      	str	r3, [sp, #16]
 8008d92:	46a2      	mov	sl, r4
 8008d94:	e7d2      	b.n	8008d3c <_svfiprintf_r+0xa0>
 8008d96:	9b03      	ldr	r3, [sp, #12]
 8008d98:	1d19      	adds	r1, r3, #4
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	9103      	str	r1, [sp, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	bfbb      	ittet	lt
 8008da2:	425b      	neglt	r3, r3
 8008da4:	f042 0202 	orrlt.w	r2, r2, #2
 8008da8:	9307      	strge	r3, [sp, #28]
 8008daa:	9307      	strlt	r3, [sp, #28]
 8008dac:	bfb8      	it	lt
 8008dae:	9204      	strlt	r2, [sp, #16]
 8008db0:	7823      	ldrb	r3, [r4, #0]
 8008db2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008db4:	d10a      	bne.n	8008dcc <_svfiprintf_r+0x130>
 8008db6:	7863      	ldrb	r3, [r4, #1]
 8008db8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dba:	d132      	bne.n	8008e22 <_svfiprintf_r+0x186>
 8008dbc:	9b03      	ldr	r3, [sp, #12]
 8008dbe:	1d1a      	adds	r2, r3, #4
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	9203      	str	r2, [sp, #12]
 8008dc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dc8:	3402      	adds	r4, #2
 8008dca:	9305      	str	r3, [sp, #20]
 8008dcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008e90 <_svfiprintf_r+0x1f4>
 8008dd0:	7821      	ldrb	r1, [r4, #0]
 8008dd2:	2203      	movs	r2, #3
 8008dd4:	4650      	mov	r0, sl
 8008dd6:	f7f7 fa13 	bl	8000200 <memchr>
 8008dda:	b138      	cbz	r0, 8008dec <_svfiprintf_r+0x150>
 8008ddc:	9b04      	ldr	r3, [sp, #16]
 8008dde:	eba0 000a 	sub.w	r0, r0, sl
 8008de2:	2240      	movs	r2, #64	@ 0x40
 8008de4:	4082      	lsls	r2, r0
 8008de6:	4313      	orrs	r3, r2
 8008de8:	3401      	adds	r4, #1
 8008dea:	9304      	str	r3, [sp, #16]
 8008dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008df0:	4824      	ldr	r0, [pc, #144]	@ (8008e84 <_svfiprintf_r+0x1e8>)
 8008df2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008df6:	2206      	movs	r2, #6
 8008df8:	f7f7 fa02 	bl	8000200 <memchr>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d036      	beq.n	8008e6e <_svfiprintf_r+0x1d2>
 8008e00:	4b21      	ldr	r3, [pc, #132]	@ (8008e88 <_svfiprintf_r+0x1ec>)
 8008e02:	bb1b      	cbnz	r3, 8008e4c <_svfiprintf_r+0x1b0>
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	3307      	adds	r3, #7
 8008e08:	f023 0307 	bic.w	r3, r3, #7
 8008e0c:	3308      	adds	r3, #8
 8008e0e:	9303      	str	r3, [sp, #12]
 8008e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e12:	4433      	add	r3, r6
 8008e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e16:	e76a      	b.n	8008cee <_svfiprintf_r+0x52>
 8008e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e1c:	460c      	mov	r4, r1
 8008e1e:	2001      	movs	r0, #1
 8008e20:	e7a8      	b.n	8008d74 <_svfiprintf_r+0xd8>
 8008e22:	2300      	movs	r3, #0
 8008e24:	3401      	adds	r4, #1
 8008e26:	9305      	str	r3, [sp, #20]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	f04f 0c0a 	mov.w	ip, #10
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e34:	3a30      	subs	r2, #48	@ 0x30
 8008e36:	2a09      	cmp	r2, #9
 8008e38:	d903      	bls.n	8008e42 <_svfiprintf_r+0x1a6>
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d0c6      	beq.n	8008dcc <_svfiprintf_r+0x130>
 8008e3e:	9105      	str	r1, [sp, #20]
 8008e40:	e7c4      	b.n	8008dcc <_svfiprintf_r+0x130>
 8008e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e46:	4604      	mov	r4, r0
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e7f0      	b.n	8008e2e <_svfiprintf_r+0x192>
 8008e4c:	ab03      	add	r3, sp, #12
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	462a      	mov	r2, r5
 8008e52:	4b0e      	ldr	r3, [pc, #56]	@ (8008e8c <_svfiprintf_r+0x1f0>)
 8008e54:	a904      	add	r1, sp, #16
 8008e56:	4638      	mov	r0, r7
 8008e58:	f7fd fcc2 	bl	80067e0 <_printf_float>
 8008e5c:	1c42      	adds	r2, r0, #1
 8008e5e:	4606      	mov	r6, r0
 8008e60:	d1d6      	bne.n	8008e10 <_svfiprintf_r+0x174>
 8008e62:	89ab      	ldrh	r3, [r5, #12]
 8008e64:	065b      	lsls	r3, r3, #25
 8008e66:	f53f af2d 	bmi.w	8008cc4 <_svfiprintf_r+0x28>
 8008e6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e6c:	e72c      	b.n	8008cc8 <_svfiprintf_r+0x2c>
 8008e6e:	ab03      	add	r3, sp, #12
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	462a      	mov	r2, r5
 8008e74:	4b05      	ldr	r3, [pc, #20]	@ (8008e8c <_svfiprintf_r+0x1f0>)
 8008e76:	a904      	add	r1, sp, #16
 8008e78:	4638      	mov	r0, r7
 8008e7a:	f7fd ff49 	bl	8006d10 <_printf_i>
 8008e7e:	e7ed      	b.n	8008e5c <_svfiprintf_r+0x1c0>
 8008e80:	08009be9 	.word	0x08009be9
 8008e84:	08009bf3 	.word	0x08009bf3
 8008e88:	080067e1 	.word	0x080067e1
 8008e8c:	08008be5 	.word	0x08008be5
 8008e90:	08009bef 	.word	0x08009bef

08008e94 <__sfputc_r>:
 8008e94:	6893      	ldr	r3, [r2, #8]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	b410      	push	{r4}
 8008e9c:	6093      	str	r3, [r2, #8]
 8008e9e:	da08      	bge.n	8008eb2 <__sfputc_r+0x1e>
 8008ea0:	6994      	ldr	r4, [r2, #24]
 8008ea2:	42a3      	cmp	r3, r4
 8008ea4:	db01      	blt.n	8008eaa <__sfputc_r+0x16>
 8008ea6:	290a      	cmp	r1, #10
 8008ea8:	d103      	bne.n	8008eb2 <__sfputc_r+0x1e>
 8008eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eae:	f7fe b9ec 	b.w	800728a <__swbuf_r>
 8008eb2:	6813      	ldr	r3, [r2, #0]
 8008eb4:	1c58      	adds	r0, r3, #1
 8008eb6:	6010      	str	r0, [r2, #0]
 8008eb8:	7019      	strb	r1, [r3, #0]
 8008eba:	4608      	mov	r0, r1
 8008ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <__sfputs_r>:
 8008ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	460f      	mov	r7, r1
 8008ec8:	4614      	mov	r4, r2
 8008eca:	18d5      	adds	r5, r2, r3
 8008ecc:	42ac      	cmp	r4, r5
 8008ece:	d101      	bne.n	8008ed4 <__sfputs_r+0x12>
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	e007      	b.n	8008ee4 <__sfputs_r+0x22>
 8008ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed8:	463a      	mov	r2, r7
 8008eda:	4630      	mov	r0, r6
 8008edc:	f7ff ffda 	bl	8008e94 <__sfputc_r>
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	d1f3      	bne.n	8008ecc <__sfputs_r+0xa>
 8008ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ee8 <_vfiprintf_r>:
 8008ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	460d      	mov	r5, r1
 8008eee:	b09d      	sub	sp, #116	@ 0x74
 8008ef0:	4614      	mov	r4, r2
 8008ef2:	4698      	mov	r8, r3
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	b118      	cbz	r0, 8008f00 <_vfiprintf_r+0x18>
 8008ef8:	6a03      	ldr	r3, [r0, #32]
 8008efa:	b90b      	cbnz	r3, 8008f00 <_vfiprintf_r+0x18>
 8008efc:	f7fe f8b2 	bl	8007064 <__sinit>
 8008f00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f02:	07d9      	lsls	r1, r3, #31
 8008f04:	d405      	bmi.n	8008f12 <_vfiprintf_r+0x2a>
 8008f06:	89ab      	ldrh	r3, [r5, #12]
 8008f08:	059a      	lsls	r2, r3, #22
 8008f0a:	d402      	bmi.n	8008f12 <_vfiprintf_r+0x2a>
 8008f0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f0e:	f7fe fb60 	bl	80075d2 <__retarget_lock_acquire_recursive>
 8008f12:	89ab      	ldrh	r3, [r5, #12]
 8008f14:	071b      	lsls	r3, r3, #28
 8008f16:	d501      	bpl.n	8008f1c <_vfiprintf_r+0x34>
 8008f18:	692b      	ldr	r3, [r5, #16]
 8008f1a:	b99b      	cbnz	r3, 8008f44 <_vfiprintf_r+0x5c>
 8008f1c:	4629      	mov	r1, r5
 8008f1e:	4630      	mov	r0, r6
 8008f20:	f7fe f9f2 	bl	8007308 <__swsetup_r>
 8008f24:	b170      	cbz	r0, 8008f44 <_vfiprintf_r+0x5c>
 8008f26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f28:	07dc      	lsls	r4, r3, #31
 8008f2a:	d504      	bpl.n	8008f36 <_vfiprintf_r+0x4e>
 8008f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f30:	b01d      	add	sp, #116	@ 0x74
 8008f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f36:	89ab      	ldrh	r3, [r5, #12]
 8008f38:	0598      	lsls	r0, r3, #22
 8008f3a:	d4f7      	bmi.n	8008f2c <_vfiprintf_r+0x44>
 8008f3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f3e:	f7fe fb49 	bl	80075d4 <__retarget_lock_release_recursive>
 8008f42:	e7f3      	b.n	8008f2c <_vfiprintf_r+0x44>
 8008f44:	2300      	movs	r3, #0
 8008f46:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f48:	2320      	movs	r3, #32
 8008f4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f52:	2330      	movs	r3, #48	@ 0x30
 8008f54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009104 <_vfiprintf_r+0x21c>
 8008f58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f5c:	f04f 0901 	mov.w	r9, #1
 8008f60:	4623      	mov	r3, r4
 8008f62:	469a      	mov	sl, r3
 8008f64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f68:	b10a      	cbz	r2, 8008f6e <_vfiprintf_r+0x86>
 8008f6a:	2a25      	cmp	r2, #37	@ 0x25
 8008f6c:	d1f9      	bne.n	8008f62 <_vfiprintf_r+0x7a>
 8008f6e:	ebba 0b04 	subs.w	fp, sl, r4
 8008f72:	d00b      	beq.n	8008f8c <_vfiprintf_r+0xa4>
 8008f74:	465b      	mov	r3, fp
 8008f76:	4622      	mov	r2, r4
 8008f78:	4629      	mov	r1, r5
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	f7ff ffa1 	bl	8008ec2 <__sfputs_r>
 8008f80:	3001      	adds	r0, #1
 8008f82:	f000 80a7 	beq.w	80090d4 <_vfiprintf_r+0x1ec>
 8008f86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f88:	445a      	add	r2, fp
 8008f8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 809f 	beq.w	80090d4 <_vfiprintf_r+0x1ec>
 8008f96:	2300      	movs	r3, #0
 8008f98:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fa0:	f10a 0a01 	add.w	sl, sl, #1
 8008fa4:	9304      	str	r3, [sp, #16]
 8008fa6:	9307      	str	r3, [sp, #28]
 8008fa8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008fac:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fae:	4654      	mov	r4, sl
 8008fb0:	2205      	movs	r2, #5
 8008fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb6:	4853      	ldr	r0, [pc, #332]	@ (8009104 <_vfiprintf_r+0x21c>)
 8008fb8:	f7f7 f922 	bl	8000200 <memchr>
 8008fbc:	9a04      	ldr	r2, [sp, #16]
 8008fbe:	b9d8      	cbnz	r0, 8008ff8 <_vfiprintf_r+0x110>
 8008fc0:	06d1      	lsls	r1, r2, #27
 8008fc2:	bf44      	itt	mi
 8008fc4:	2320      	movmi	r3, #32
 8008fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fca:	0713      	lsls	r3, r2, #28
 8008fcc:	bf44      	itt	mi
 8008fce:	232b      	movmi	r3, #43	@ 0x2b
 8008fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8008fd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fda:	d015      	beq.n	8009008 <_vfiprintf_r+0x120>
 8008fdc:	9a07      	ldr	r2, [sp, #28]
 8008fde:	4654      	mov	r4, sl
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	f04f 0c0a 	mov.w	ip, #10
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fec:	3b30      	subs	r3, #48	@ 0x30
 8008fee:	2b09      	cmp	r3, #9
 8008ff0:	d94b      	bls.n	800908a <_vfiprintf_r+0x1a2>
 8008ff2:	b1b0      	cbz	r0, 8009022 <_vfiprintf_r+0x13a>
 8008ff4:	9207      	str	r2, [sp, #28]
 8008ff6:	e014      	b.n	8009022 <_vfiprintf_r+0x13a>
 8008ff8:	eba0 0308 	sub.w	r3, r0, r8
 8008ffc:	fa09 f303 	lsl.w	r3, r9, r3
 8009000:	4313      	orrs	r3, r2
 8009002:	9304      	str	r3, [sp, #16]
 8009004:	46a2      	mov	sl, r4
 8009006:	e7d2      	b.n	8008fae <_vfiprintf_r+0xc6>
 8009008:	9b03      	ldr	r3, [sp, #12]
 800900a:	1d19      	adds	r1, r3, #4
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	9103      	str	r1, [sp, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	bfbb      	ittet	lt
 8009014:	425b      	neglt	r3, r3
 8009016:	f042 0202 	orrlt.w	r2, r2, #2
 800901a:	9307      	strge	r3, [sp, #28]
 800901c:	9307      	strlt	r3, [sp, #28]
 800901e:	bfb8      	it	lt
 8009020:	9204      	strlt	r2, [sp, #16]
 8009022:	7823      	ldrb	r3, [r4, #0]
 8009024:	2b2e      	cmp	r3, #46	@ 0x2e
 8009026:	d10a      	bne.n	800903e <_vfiprintf_r+0x156>
 8009028:	7863      	ldrb	r3, [r4, #1]
 800902a:	2b2a      	cmp	r3, #42	@ 0x2a
 800902c:	d132      	bne.n	8009094 <_vfiprintf_r+0x1ac>
 800902e:	9b03      	ldr	r3, [sp, #12]
 8009030:	1d1a      	adds	r2, r3, #4
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	9203      	str	r2, [sp, #12]
 8009036:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800903a:	3402      	adds	r4, #2
 800903c:	9305      	str	r3, [sp, #20]
 800903e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009114 <_vfiprintf_r+0x22c>
 8009042:	7821      	ldrb	r1, [r4, #0]
 8009044:	2203      	movs	r2, #3
 8009046:	4650      	mov	r0, sl
 8009048:	f7f7 f8da 	bl	8000200 <memchr>
 800904c:	b138      	cbz	r0, 800905e <_vfiprintf_r+0x176>
 800904e:	9b04      	ldr	r3, [sp, #16]
 8009050:	eba0 000a 	sub.w	r0, r0, sl
 8009054:	2240      	movs	r2, #64	@ 0x40
 8009056:	4082      	lsls	r2, r0
 8009058:	4313      	orrs	r3, r2
 800905a:	3401      	adds	r4, #1
 800905c:	9304      	str	r3, [sp, #16]
 800905e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009062:	4829      	ldr	r0, [pc, #164]	@ (8009108 <_vfiprintf_r+0x220>)
 8009064:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009068:	2206      	movs	r2, #6
 800906a:	f7f7 f8c9 	bl	8000200 <memchr>
 800906e:	2800      	cmp	r0, #0
 8009070:	d03f      	beq.n	80090f2 <_vfiprintf_r+0x20a>
 8009072:	4b26      	ldr	r3, [pc, #152]	@ (800910c <_vfiprintf_r+0x224>)
 8009074:	bb1b      	cbnz	r3, 80090be <_vfiprintf_r+0x1d6>
 8009076:	9b03      	ldr	r3, [sp, #12]
 8009078:	3307      	adds	r3, #7
 800907a:	f023 0307 	bic.w	r3, r3, #7
 800907e:	3308      	adds	r3, #8
 8009080:	9303      	str	r3, [sp, #12]
 8009082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009084:	443b      	add	r3, r7
 8009086:	9309      	str	r3, [sp, #36]	@ 0x24
 8009088:	e76a      	b.n	8008f60 <_vfiprintf_r+0x78>
 800908a:	fb0c 3202 	mla	r2, ip, r2, r3
 800908e:	460c      	mov	r4, r1
 8009090:	2001      	movs	r0, #1
 8009092:	e7a8      	b.n	8008fe6 <_vfiprintf_r+0xfe>
 8009094:	2300      	movs	r3, #0
 8009096:	3401      	adds	r4, #1
 8009098:	9305      	str	r3, [sp, #20]
 800909a:	4619      	mov	r1, r3
 800909c:	f04f 0c0a 	mov.w	ip, #10
 80090a0:	4620      	mov	r0, r4
 80090a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090a6:	3a30      	subs	r2, #48	@ 0x30
 80090a8:	2a09      	cmp	r2, #9
 80090aa:	d903      	bls.n	80090b4 <_vfiprintf_r+0x1cc>
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d0c6      	beq.n	800903e <_vfiprintf_r+0x156>
 80090b0:	9105      	str	r1, [sp, #20]
 80090b2:	e7c4      	b.n	800903e <_vfiprintf_r+0x156>
 80090b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80090b8:	4604      	mov	r4, r0
 80090ba:	2301      	movs	r3, #1
 80090bc:	e7f0      	b.n	80090a0 <_vfiprintf_r+0x1b8>
 80090be:	ab03      	add	r3, sp, #12
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	462a      	mov	r2, r5
 80090c4:	4b12      	ldr	r3, [pc, #72]	@ (8009110 <_vfiprintf_r+0x228>)
 80090c6:	a904      	add	r1, sp, #16
 80090c8:	4630      	mov	r0, r6
 80090ca:	f7fd fb89 	bl	80067e0 <_printf_float>
 80090ce:	4607      	mov	r7, r0
 80090d0:	1c78      	adds	r0, r7, #1
 80090d2:	d1d6      	bne.n	8009082 <_vfiprintf_r+0x19a>
 80090d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090d6:	07d9      	lsls	r1, r3, #31
 80090d8:	d405      	bmi.n	80090e6 <_vfiprintf_r+0x1fe>
 80090da:	89ab      	ldrh	r3, [r5, #12]
 80090dc:	059a      	lsls	r2, r3, #22
 80090de:	d402      	bmi.n	80090e6 <_vfiprintf_r+0x1fe>
 80090e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090e2:	f7fe fa77 	bl	80075d4 <__retarget_lock_release_recursive>
 80090e6:	89ab      	ldrh	r3, [r5, #12]
 80090e8:	065b      	lsls	r3, r3, #25
 80090ea:	f53f af1f 	bmi.w	8008f2c <_vfiprintf_r+0x44>
 80090ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090f0:	e71e      	b.n	8008f30 <_vfiprintf_r+0x48>
 80090f2:	ab03      	add	r3, sp, #12
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	462a      	mov	r2, r5
 80090f8:	4b05      	ldr	r3, [pc, #20]	@ (8009110 <_vfiprintf_r+0x228>)
 80090fa:	a904      	add	r1, sp, #16
 80090fc:	4630      	mov	r0, r6
 80090fe:	f7fd fe07 	bl	8006d10 <_printf_i>
 8009102:	e7e4      	b.n	80090ce <_vfiprintf_r+0x1e6>
 8009104:	08009be9 	.word	0x08009be9
 8009108:	08009bf3 	.word	0x08009bf3
 800910c:	080067e1 	.word	0x080067e1
 8009110:	08008ec3 	.word	0x08008ec3
 8009114:	08009bef 	.word	0x08009bef

08009118 <__sflush_r>:
 8009118:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800911c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009120:	0716      	lsls	r6, r2, #28
 8009122:	4605      	mov	r5, r0
 8009124:	460c      	mov	r4, r1
 8009126:	d454      	bmi.n	80091d2 <__sflush_r+0xba>
 8009128:	684b      	ldr	r3, [r1, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	dc02      	bgt.n	8009134 <__sflush_r+0x1c>
 800912e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009130:	2b00      	cmp	r3, #0
 8009132:	dd48      	ble.n	80091c6 <__sflush_r+0xae>
 8009134:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009136:	2e00      	cmp	r6, #0
 8009138:	d045      	beq.n	80091c6 <__sflush_r+0xae>
 800913a:	2300      	movs	r3, #0
 800913c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009140:	682f      	ldr	r7, [r5, #0]
 8009142:	6a21      	ldr	r1, [r4, #32]
 8009144:	602b      	str	r3, [r5, #0]
 8009146:	d030      	beq.n	80091aa <__sflush_r+0x92>
 8009148:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800914a:	89a3      	ldrh	r3, [r4, #12]
 800914c:	0759      	lsls	r1, r3, #29
 800914e:	d505      	bpl.n	800915c <__sflush_r+0x44>
 8009150:	6863      	ldr	r3, [r4, #4]
 8009152:	1ad2      	subs	r2, r2, r3
 8009154:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009156:	b10b      	cbz	r3, 800915c <__sflush_r+0x44>
 8009158:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800915a:	1ad2      	subs	r2, r2, r3
 800915c:	2300      	movs	r3, #0
 800915e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009160:	6a21      	ldr	r1, [r4, #32]
 8009162:	4628      	mov	r0, r5
 8009164:	47b0      	blx	r6
 8009166:	1c43      	adds	r3, r0, #1
 8009168:	89a3      	ldrh	r3, [r4, #12]
 800916a:	d106      	bne.n	800917a <__sflush_r+0x62>
 800916c:	6829      	ldr	r1, [r5, #0]
 800916e:	291d      	cmp	r1, #29
 8009170:	d82b      	bhi.n	80091ca <__sflush_r+0xb2>
 8009172:	4a2a      	ldr	r2, [pc, #168]	@ (800921c <__sflush_r+0x104>)
 8009174:	40ca      	lsrs	r2, r1
 8009176:	07d6      	lsls	r6, r2, #31
 8009178:	d527      	bpl.n	80091ca <__sflush_r+0xb2>
 800917a:	2200      	movs	r2, #0
 800917c:	6062      	str	r2, [r4, #4]
 800917e:	04d9      	lsls	r1, r3, #19
 8009180:	6922      	ldr	r2, [r4, #16]
 8009182:	6022      	str	r2, [r4, #0]
 8009184:	d504      	bpl.n	8009190 <__sflush_r+0x78>
 8009186:	1c42      	adds	r2, r0, #1
 8009188:	d101      	bne.n	800918e <__sflush_r+0x76>
 800918a:	682b      	ldr	r3, [r5, #0]
 800918c:	b903      	cbnz	r3, 8009190 <__sflush_r+0x78>
 800918e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009190:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009192:	602f      	str	r7, [r5, #0]
 8009194:	b1b9      	cbz	r1, 80091c6 <__sflush_r+0xae>
 8009196:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800919a:	4299      	cmp	r1, r3
 800919c:	d002      	beq.n	80091a4 <__sflush_r+0x8c>
 800919e:	4628      	mov	r0, r5
 80091a0:	f7ff f8a6 	bl	80082f0 <_free_r>
 80091a4:	2300      	movs	r3, #0
 80091a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80091a8:	e00d      	b.n	80091c6 <__sflush_r+0xae>
 80091aa:	2301      	movs	r3, #1
 80091ac:	4628      	mov	r0, r5
 80091ae:	47b0      	blx	r6
 80091b0:	4602      	mov	r2, r0
 80091b2:	1c50      	adds	r0, r2, #1
 80091b4:	d1c9      	bne.n	800914a <__sflush_r+0x32>
 80091b6:	682b      	ldr	r3, [r5, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d0c6      	beq.n	800914a <__sflush_r+0x32>
 80091bc:	2b1d      	cmp	r3, #29
 80091be:	d001      	beq.n	80091c4 <__sflush_r+0xac>
 80091c0:	2b16      	cmp	r3, #22
 80091c2:	d11e      	bne.n	8009202 <__sflush_r+0xea>
 80091c4:	602f      	str	r7, [r5, #0]
 80091c6:	2000      	movs	r0, #0
 80091c8:	e022      	b.n	8009210 <__sflush_r+0xf8>
 80091ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ce:	b21b      	sxth	r3, r3
 80091d0:	e01b      	b.n	800920a <__sflush_r+0xf2>
 80091d2:	690f      	ldr	r7, [r1, #16]
 80091d4:	2f00      	cmp	r7, #0
 80091d6:	d0f6      	beq.n	80091c6 <__sflush_r+0xae>
 80091d8:	0793      	lsls	r3, r2, #30
 80091da:	680e      	ldr	r6, [r1, #0]
 80091dc:	bf08      	it	eq
 80091de:	694b      	ldreq	r3, [r1, #20]
 80091e0:	600f      	str	r7, [r1, #0]
 80091e2:	bf18      	it	ne
 80091e4:	2300      	movne	r3, #0
 80091e6:	eba6 0807 	sub.w	r8, r6, r7
 80091ea:	608b      	str	r3, [r1, #8]
 80091ec:	f1b8 0f00 	cmp.w	r8, #0
 80091f0:	dde9      	ble.n	80091c6 <__sflush_r+0xae>
 80091f2:	6a21      	ldr	r1, [r4, #32]
 80091f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80091f6:	4643      	mov	r3, r8
 80091f8:	463a      	mov	r2, r7
 80091fa:	4628      	mov	r0, r5
 80091fc:	47b0      	blx	r6
 80091fe:	2800      	cmp	r0, #0
 8009200:	dc08      	bgt.n	8009214 <__sflush_r+0xfc>
 8009202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800920a:	81a3      	strh	r3, [r4, #12]
 800920c:	f04f 30ff 	mov.w	r0, #4294967295
 8009210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009214:	4407      	add	r7, r0
 8009216:	eba8 0800 	sub.w	r8, r8, r0
 800921a:	e7e7      	b.n	80091ec <__sflush_r+0xd4>
 800921c:	20400001 	.word	0x20400001

08009220 <_fflush_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	690b      	ldr	r3, [r1, #16]
 8009224:	4605      	mov	r5, r0
 8009226:	460c      	mov	r4, r1
 8009228:	b913      	cbnz	r3, 8009230 <_fflush_r+0x10>
 800922a:	2500      	movs	r5, #0
 800922c:	4628      	mov	r0, r5
 800922e:	bd38      	pop	{r3, r4, r5, pc}
 8009230:	b118      	cbz	r0, 800923a <_fflush_r+0x1a>
 8009232:	6a03      	ldr	r3, [r0, #32]
 8009234:	b90b      	cbnz	r3, 800923a <_fflush_r+0x1a>
 8009236:	f7fd ff15 	bl	8007064 <__sinit>
 800923a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0f3      	beq.n	800922a <_fflush_r+0xa>
 8009242:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009244:	07d0      	lsls	r0, r2, #31
 8009246:	d404      	bmi.n	8009252 <_fflush_r+0x32>
 8009248:	0599      	lsls	r1, r3, #22
 800924a:	d402      	bmi.n	8009252 <_fflush_r+0x32>
 800924c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800924e:	f7fe f9c0 	bl	80075d2 <__retarget_lock_acquire_recursive>
 8009252:	4628      	mov	r0, r5
 8009254:	4621      	mov	r1, r4
 8009256:	f7ff ff5f 	bl	8009118 <__sflush_r>
 800925a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800925c:	07da      	lsls	r2, r3, #31
 800925e:	4605      	mov	r5, r0
 8009260:	d4e4      	bmi.n	800922c <_fflush_r+0xc>
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	059b      	lsls	r3, r3, #22
 8009266:	d4e1      	bmi.n	800922c <_fflush_r+0xc>
 8009268:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800926a:	f7fe f9b3 	bl	80075d4 <__retarget_lock_release_recursive>
 800926e:	e7dd      	b.n	800922c <_fflush_r+0xc>

08009270 <fiprintf>:
 8009270:	b40e      	push	{r1, r2, r3}
 8009272:	b503      	push	{r0, r1, lr}
 8009274:	4601      	mov	r1, r0
 8009276:	ab03      	add	r3, sp, #12
 8009278:	4805      	ldr	r0, [pc, #20]	@ (8009290 <fiprintf+0x20>)
 800927a:	f853 2b04 	ldr.w	r2, [r3], #4
 800927e:	6800      	ldr	r0, [r0, #0]
 8009280:	9301      	str	r3, [sp, #4]
 8009282:	f7ff fe31 	bl	8008ee8 <_vfiprintf_r>
 8009286:	b002      	add	sp, #8
 8009288:	f85d eb04 	ldr.w	lr, [sp], #4
 800928c:	b003      	add	sp, #12
 800928e:	4770      	bx	lr
 8009290:	2000001c 	.word	0x2000001c

08009294 <__swhatbuf_r>:
 8009294:	b570      	push	{r4, r5, r6, lr}
 8009296:	460c      	mov	r4, r1
 8009298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800929c:	2900      	cmp	r1, #0
 800929e:	b096      	sub	sp, #88	@ 0x58
 80092a0:	4615      	mov	r5, r2
 80092a2:	461e      	mov	r6, r3
 80092a4:	da0d      	bge.n	80092c2 <__swhatbuf_r+0x2e>
 80092a6:	89a3      	ldrh	r3, [r4, #12]
 80092a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80092ac:	f04f 0100 	mov.w	r1, #0
 80092b0:	bf14      	ite	ne
 80092b2:	2340      	movne	r3, #64	@ 0x40
 80092b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80092b8:	2000      	movs	r0, #0
 80092ba:	6031      	str	r1, [r6, #0]
 80092bc:	602b      	str	r3, [r5, #0]
 80092be:	b016      	add	sp, #88	@ 0x58
 80092c0:	bd70      	pop	{r4, r5, r6, pc}
 80092c2:	466a      	mov	r2, sp
 80092c4:	f000 f896 	bl	80093f4 <_fstat_r>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	dbec      	blt.n	80092a6 <__swhatbuf_r+0x12>
 80092cc:	9901      	ldr	r1, [sp, #4]
 80092ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80092d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80092d6:	4259      	negs	r1, r3
 80092d8:	4159      	adcs	r1, r3
 80092da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092de:	e7eb      	b.n	80092b8 <__swhatbuf_r+0x24>

080092e0 <__smakebuf_r>:
 80092e0:	898b      	ldrh	r3, [r1, #12]
 80092e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092e4:	079d      	lsls	r5, r3, #30
 80092e6:	4606      	mov	r6, r0
 80092e8:	460c      	mov	r4, r1
 80092ea:	d507      	bpl.n	80092fc <__smakebuf_r+0x1c>
 80092ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	6123      	str	r3, [r4, #16]
 80092f4:	2301      	movs	r3, #1
 80092f6:	6163      	str	r3, [r4, #20]
 80092f8:	b003      	add	sp, #12
 80092fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092fc:	ab01      	add	r3, sp, #4
 80092fe:	466a      	mov	r2, sp
 8009300:	f7ff ffc8 	bl	8009294 <__swhatbuf_r>
 8009304:	9f00      	ldr	r7, [sp, #0]
 8009306:	4605      	mov	r5, r0
 8009308:	4639      	mov	r1, r7
 800930a:	4630      	mov	r0, r6
 800930c:	f7ff f864 	bl	80083d8 <_malloc_r>
 8009310:	b948      	cbnz	r0, 8009326 <__smakebuf_r+0x46>
 8009312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009316:	059a      	lsls	r2, r3, #22
 8009318:	d4ee      	bmi.n	80092f8 <__smakebuf_r+0x18>
 800931a:	f023 0303 	bic.w	r3, r3, #3
 800931e:	f043 0302 	orr.w	r3, r3, #2
 8009322:	81a3      	strh	r3, [r4, #12]
 8009324:	e7e2      	b.n	80092ec <__smakebuf_r+0xc>
 8009326:	89a3      	ldrh	r3, [r4, #12]
 8009328:	6020      	str	r0, [r4, #0]
 800932a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800932e:	81a3      	strh	r3, [r4, #12]
 8009330:	9b01      	ldr	r3, [sp, #4]
 8009332:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009336:	b15b      	cbz	r3, 8009350 <__smakebuf_r+0x70>
 8009338:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800933c:	4630      	mov	r0, r6
 800933e:	f000 f86b 	bl	8009418 <_isatty_r>
 8009342:	b128      	cbz	r0, 8009350 <__smakebuf_r+0x70>
 8009344:	89a3      	ldrh	r3, [r4, #12]
 8009346:	f023 0303 	bic.w	r3, r3, #3
 800934a:	f043 0301 	orr.w	r3, r3, #1
 800934e:	81a3      	strh	r3, [r4, #12]
 8009350:	89a3      	ldrh	r3, [r4, #12]
 8009352:	431d      	orrs	r5, r3
 8009354:	81a5      	strh	r5, [r4, #12]
 8009356:	e7cf      	b.n	80092f8 <__smakebuf_r+0x18>

08009358 <_putc_r>:
 8009358:	b570      	push	{r4, r5, r6, lr}
 800935a:	460d      	mov	r5, r1
 800935c:	4614      	mov	r4, r2
 800935e:	4606      	mov	r6, r0
 8009360:	b118      	cbz	r0, 800936a <_putc_r+0x12>
 8009362:	6a03      	ldr	r3, [r0, #32]
 8009364:	b90b      	cbnz	r3, 800936a <_putc_r+0x12>
 8009366:	f7fd fe7d 	bl	8007064 <__sinit>
 800936a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800936c:	07d8      	lsls	r0, r3, #31
 800936e:	d405      	bmi.n	800937c <_putc_r+0x24>
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	0599      	lsls	r1, r3, #22
 8009374:	d402      	bmi.n	800937c <_putc_r+0x24>
 8009376:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009378:	f7fe f92b 	bl	80075d2 <__retarget_lock_acquire_recursive>
 800937c:	68a3      	ldr	r3, [r4, #8]
 800937e:	3b01      	subs	r3, #1
 8009380:	2b00      	cmp	r3, #0
 8009382:	60a3      	str	r3, [r4, #8]
 8009384:	da05      	bge.n	8009392 <_putc_r+0x3a>
 8009386:	69a2      	ldr	r2, [r4, #24]
 8009388:	4293      	cmp	r3, r2
 800938a:	db12      	blt.n	80093b2 <_putc_r+0x5a>
 800938c:	b2eb      	uxtb	r3, r5
 800938e:	2b0a      	cmp	r3, #10
 8009390:	d00f      	beq.n	80093b2 <_putc_r+0x5a>
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	1c5a      	adds	r2, r3, #1
 8009396:	6022      	str	r2, [r4, #0]
 8009398:	701d      	strb	r5, [r3, #0]
 800939a:	b2ed      	uxtb	r5, r5
 800939c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800939e:	07da      	lsls	r2, r3, #31
 80093a0:	d405      	bmi.n	80093ae <_putc_r+0x56>
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	059b      	lsls	r3, r3, #22
 80093a6:	d402      	bmi.n	80093ae <_putc_r+0x56>
 80093a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093aa:	f7fe f913 	bl	80075d4 <__retarget_lock_release_recursive>
 80093ae:	4628      	mov	r0, r5
 80093b0:	bd70      	pop	{r4, r5, r6, pc}
 80093b2:	4629      	mov	r1, r5
 80093b4:	4622      	mov	r2, r4
 80093b6:	4630      	mov	r0, r6
 80093b8:	f7fd ff67 	bl	800728a <__swbuf_r>
 80093bc:	4605      	mov	r5, r0
 80093be:	e7ed      	b.n	800939c <_putc_r+0x44>

080093c0 <memmove>:
 80093c0:	4288      	cmp	r0, r1
 80093c2:	b510      	push	{r4, lr}
 80093c4:	eb01 0402 	add.w	r4, r1, r2
 80093c8:	d902      	bls.n	80093d0 <memmove+0x10>
 80093ca:	4284      	cmp	r4, r0
 80093cc:	4623      	mov	r3, r4
 80093ce:	d807      	bhi.n	80093e0 <memmove+0x20>
 80093d0:	1e43      	subs	r3, r0, #1
 80093d2:	42a1      	cmp	r1, r4
 80093d4:	d008      	beq.n	80093e8 <memmove+0x28>
 80093d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093de:	e7f8      	b.n	80093d2 <memmove+0x12>
 80093e0:	4402      	add	r2, r0
 80093e2:	4601      	mov	r1, r0
 80093e4:	428a      	cmp	r2, r1
 80093e6:	d100      	bne.n	80093ea <memmove+0x2a>
 80093e8:	bd10      	pop	{r4, pc}
 80093ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093f2:	e7f7      	b.n	80093e4 <memmove+0x24>

080093f4 <_fstat_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	4d07      	ldr	r5, [pc, #28]	@ (8009414 <_fstat_r+0x20>)
 80093f8:	2300      	movs	r3, #0
 80093fa:	4604      	mov	r4, r0
 80093fc:	4608      	mov	r0, r1
 80093fe:	4611      	mov	r1, r2
 8009400:	602b      	str	r3, [r5, #0]
 8009402:	f7f9 fb63 	bl	8002acc <_fstat>
 8009406:	1c43      	adds	r3, r0, #1
 8009408:	d102      	bne.n	8009410 <_fstat_r+0x1c>
 800940a:	682b      	ldr	r3, [r5, #0]
 800940c:	b103      	cbz	r3, 8009410 <_fstat_r+0x1c>
 800940e:	6023      	str	r3, [r4, #0]
 8009410:	bd38      	pop	{r3, r4, r5, pc}
 8009412:	bf00      	nop
 8009414:	20000df8 	.word	0x20000df8

08009418 <_isatty_r>:
 8009418:	b538      	push	{r3, r4, r5, lr}
 800941a:	4d06      	ldr	r5, [pc, #24]	@ (8009434 <_isatty_r+0x1c>)
 800941c:	2300      	movs	r3, #0
 800941e:	4604      	mov	r4, r0
 8009420:	4608      	mov	r0, r1
 8009422:	602b      	str	r3, [r5, #0]
 8009424:	f7f9 fb62 	bl	8002aec <_isatty>
 8009428:	1c43      	adds	r3, r0, #1
 800942a:	d102      	bne.n	8009432 <_isatty_r+0x1a>
 800942c:	682b      	ldr	r3, [r5, #0]
 800942e:	b103      	cbz	r3, 8009432 <_isatty_r+0x1a>
 8009430:	6023      	str	r3, [r4, #0]
 8009432:	bd38      	pop	{r3, r4, r5, pc}
 8009434:	20000df8 	.word	0x20000df8

08009438 <_sbrk_r>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	4d06      	ldr	r5, [pc, #24]	@ (8009454 <_sbrk_r+0x1c>)
 800943c:	2300      	movs	r3, #0
 800943e:	4604      	mov	r4, r0
 8009440:	4608      	mov	r0, r1
 8009442:	602b      	str	r3, [r5, #0]
 8009444:	f7f9 fb6a 	bl	8002b1c <_sbrk>
 8009448:	1c43      	adds	r3, r0, #1
 800944a:	d102      	bne.n	8009452 <_sbrk_r+0x1a>
 800944c:	682b      	ldr	r3, [r5, #0]
 800944e:	b103      	cbz	r3, 8009452 <_sbrk_r+0x1a>
 8009450:	6023      	str	r3, [r4, #0]
 8009452:	bd38      	pop	{r3, r4, r5, pc}
 8009454:	20000df8 	.word	0x20000df8

08009458 <abort>:
 8009458:	b508      	push	{r3, lr}
 800945a:	2006      	movs	r0, #6
 800945c:	f000 f88c 	bl	8009578 <raise>
 8009460:	2001      	movs	r0, #1
 8009462:	f7f9 fae3 	bl	8002a2c <_exit>

08009466 <_calloc_r>:
 8009466:	b570      	push	{r4, r5, r6, lr}
 8009468:	fba1 5402 	umull	r5, r4, r1, r2
 800946c:	b934      	cbnz	r4, 800947c <_calloc_r+0x16>
 800946e:	4629      	mov	r1, r5
 8009470:	f7fe ffb2 	bl	80083d8 <_malloc_r>
 8009474:	4606      	mov	r6, r0
 8009476:	b928      	cbnz	r0, 8009484 <_calloc_r+0x1e>
 8009478:	4630      	mov	r0, r6
 800947a:	bd70      	pop	{r4, r5, r6, pc}
 800947c:	220c      	movs	r2, #12
 800947e:	6002      	str	r2, [r0, #0]
 8009480:	2600      	movs	r6, #0
 8009482:	e7f9      	b.n	8009478 <_calloc_r+0x12>
 8009484:	462a      	mov	r2, r5
 8009486:	4621      	mov	r1, r4
 8009488:	f7fd ff94 	bl	80073b4 <memset>
 800948c:	e7f4      	b.n	8009478 <_calloc_r+0x12>

0800948e <__ascii_mbtowc>:
 800948e:	b082      	sub	sp, #8
 8009490:	b901      	cbnz	r1, 8009494 <__ascii_mbtowc+0x6>
 8009492:	a901      	add	r1, sp, #4
 8009494:	b142      	cbz	r2, 80094a8 <__ascii_mbtowc+0x1a>
 8009496:	b14b      	cbz	r3, 80094ac <__ascii_mbtowc+0x1e>
 8009498:	7813      	ldrb	r3, [r2, #0]
 800949a:	600b      	str	r3, [r1, #0]
 800949c:	7812      	ldrb	r2, [r2, #0]
 800949e:	1e10      	subs	r0, r2, #0
 80094a0:	bf18      	it	ne
 80094a2:	2001      	movne	r0, #1
 80094a4:	b002      	add	sp, #8
 80094a6:	4770      	bx	lr
 80094a8:	4610      	mov	r0, r2
 80094aa:	e7fb      	b.n	80094a4 <__ascii_mbtowc+0x16>
 80094ac:	f06f 0001 	mvn.w	r0, #1
 80094b0:	e7f8      	b.n	80094a4 <__ascii_mbtowc+0x16>

080094b2 <_realloc_r>:
 80094b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b6:	4607      	mov	r7, r0
 80094b8:	4614      	mov	r4, r2
 80094ba:	460d      	mov	r5, r1
 80094bc:	b921      	cbnz	r1, 80094c8 <_realloc_r+0x16>
 80094be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094c2:	4611      	mov	r1, r2
 80094c4:	f7fe bf88 	b.w	80083d8 <_malloc_r>
 80094c8:	b92a      	cbnz	r2, 80094d6 <_realloc_r+0x24>
 80094ca:	f7fe ff11 	bl	80082f0 <_free_r>
 80094ce:	4625      	mov	r5, r4
 80094d0:	4628      	mov	r0, r5
 80094d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094d6:	f000 f86b 	bl	80095b0 <_malloc_usable_size_r>
 80094da:	4284      	cmp	r4, r0
 80094dc:	4606      	mov	r6, r0
 80094de:	d802      	bhi.n	80094e6 <_realloc_r+0x34>
 80094e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094e4:	d8f4      	bhi.n	80094d0 <_realloc_r+0x1e>
 80094e6:	4621      	mov	r1, r4
 80094e8:	4638      	mov	r0, r7
 80094ea:	f7fe ff75 	bl	80083d8 <_malloc_r>
 80094ee:	4680      	mov	r8, r0
 80094f0:	b908      	cbnz	r0, 80094f6 <_realloc_r+0x44>
 80094f2:	4645      	mov	r5, r8
 80094f4:	e7ec      	b.n	80094d0 <_realloc_r+0x1e>
 80094f6:	42b4      	cmp	r4, r6
 80094f8:	4622      	mov	r2, r4
 80094fa:	4629      	mov	r1, r5
 80094fc:	bf28      	it	cs
 80094fe:	4632      	movcs	r2, r6
 8009500:	f7fe f871 	bl	80075e6 <memcpy>
 8009504:	4629      	mov	r1, r5
 8009506:	4638      	mov	r0, r7
 8009508:	f7fe fef2 	bl	80082f0 <_free_r>
 800950c:	e7f1      	b.n	80094f2 <_realloc_r+0x40>

0800950e <__ascii_wctomb>:
 800950e:	4603      	mov	r3, r0
 8009510:	4608      	mov	r0, r1
 8009512:	b141      	cbz	r1, 8009526 <__ascii_wctomb+0x18>
 8009514:	2aff      	cmp	r2, #255	@ 0xff
 8009516:	d904      	bls.n	8009522 <__ascii_wctomb+0x14>
 8009518:	228a      	movs	r2, #138	@ 0x8a
 800951a:	601a      	str	r2, [r3, #0]
 800951c:	f04f 30ff 	mov.w	r0, #4294967295
 8009520:	4770      	bx	lr
 8009522:	700a      	strb	r2, [r1, #0]
 8009524:	2001      	movs	r0, #1
 8009526:	4770      	bx	lr

08009528 <_raise_r>:
 8009528:	291f      	cmp	r1, #31
 800952a:	b538      	push	{r3, r4, r5, lr}
 800952c:	4605      	mov	r5, r0
 800952e:	460c      	mov	r4, r1
 8009530:	d904      	bls.n	800953c <_raise_r+0x14>
 8009532:	2316      	movs	r3, #22
 8009534:	6003      	str	r3, [r0, #0]
 8009536:	f04f 30ff 	mov.w	r0, #4294967295
 800953a:	bd38      	pop	{r3, r4, r5, pc}
 800953c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800953e:	b112      	cbz	r2, 8009546 <_raise_r+0x1e>
 8009540:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009544:	b94b      	cbnz	r3, 800955a <_raise_r+0x32>
 8009546:	4628      	mov	r0, r5
 8009548:	f000 f830 	bl	80095ac <_getpid_r>
 800954c:	4622      	mov	r2, r4
 800954e:	4601      	mov	r1, r0
 8009550:	4628      	mov	r0, r5
 8009552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009556:	f000 b817 	b.w	8009588 <_kill_r>
 800955a:	2b01      	cmp	r3, #1
 800955c:	d00a      	beq.n	8009574 <_raise_r+0x4c>
 800955e:	1c59      	adds	r1, r3, #1
 8009560:	d103      	bne.n	800956a <_raise_r+0x42>
 8009562:	2316      	movs	r3, #22
 8009564:	6003      	str	r3, [r0, #0]
 8009566:	2001      	movs	r0, #1
 8009568:	e7e7      	b.n	800953a <_raise_r+0x12>
 800956a:	2100      	movs	r1, #0
 800956c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009570:	4620      	mov	r0, r4
 8009572:	4798      	blx	r3
 8009574:	2000      	movs	r0, #0
 8009576:	e7e0      	b.n	800953a <_raise_r+0x12>

08009578 <raise>:
 8009578:	4b02      	ldr	r3, [pc, #8]	@ (8009584 <raise+0xc>)
 800957a:	4601      	mov	r1, r0
 800957c:	6818      	ldr	r0, [r3, #0]
 800957e:	f7ff bfd3 	b.w	8009528 <_raise_r>
 8009582:	bf00      	nop
 8009584:	2000001c 	.word	0x2000001c

08009588 <_kill_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d07      	ldr	r5, [pc, #28]	@ (80095a8 <_kill_r+0x20>)
 800958c:	2300      	movs	r3, #0
 800958e:	4604      	mov	r4, r0
 8009590:	4608      	mov	r0, r1
 8009592:	4611      	mov	r1, r2
 8009594:	602b      	str	r3, [r5, #0]
 8009596:	f7f9 fa39 	bl	8002a0c <_kill>
 800959a:	1c43      	adds	r3, r0, #1
 800959c:	d102      	bne.n	80095a4 <_kill_r+0x1c>
 800959e:	682b      	ldr	r3, [r5, #0]
 80095a0:	b103      	cbz	r3, 80095a4 <_kill_r+0x1c>
 80095a2:	6023      	str	r3, [r4, #0]
 80095a4:	bd38      	pop	{r3, r4, r5, pc}
 80095a6:	bf00      	nop
 80095a8:	20000df8 	.word	0x20000df8

080095ac <_getpid_r>:
 80095ac:	f7f9 ba26 	b.w	80029fc <_getpid>

080095b0 <_malloc_usable_size_r>:
 80095b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095b4:	1f18      	subs	r0, r3, #4
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	bfbc      	itt	lt
 80095ba:	580b      	ldrlt	r3, [r1, r0]
 80095bc:	18c0      	addlt	r0, r0, r3
 80095be:	4770      	bx	lr

080095c0 <_init>:
 80095c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c2:	bf00      	nop
 80095c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095c6:	bc08      	pop	{r3}
 80095c8:	469e      	mov	lr, r3
 80095ca:	4770      	bx	lr

080095cc <_fini>:
 80095cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ce:	bf00      	nop
 80095d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095d2:	bc08      	pop	{r3}
 80095d4:	469e      	mov	lr, r3
 80095d6:	4770      	bx	lr
