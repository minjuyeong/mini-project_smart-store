
smart_store_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08008b48  08008b48  00009b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090d0  080090d0  0000b06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080090d0  080090d0  0000a0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090d8  080090d8  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090d8  080090d8  0000a0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090dc  080090dc  0000a0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080090e0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c20  2000006c  0800914c  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c8c  0800914c  0000bc8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104d1  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002732  00000000  00000000  0001b56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0001dca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c0e  00000000  00000000  0001ec18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001911d  00000000  00000000  0001f826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001193a  00000000  00000000  00038943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cf46  00000000  00000000  0004a27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e71c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052fc  00000000  00000000  000e7208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000ec504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b2c 	.word	0x08008b2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08008b2c 	.word	0x08008b2c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b988 	b.w	8000f50 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	468e      	mov	lr, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	4688      	mov	r8, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	d962      	bls.n	8000d34 <__udivmoddi4+0xdc>
 8000c6e:	fab2 f682 	clz	r6, r2
 8000c72:	b14e      	cbz	r6, 8000c88 <__udivmoddi4+0x30>
 8000c74:	f1c6 0320 	rsb	r3, r6, #32
 8000c78:	fa01 f806 	lsl.w	r8, r1, r6
 8000c7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c80:	40b7      	lsls	r7, r6
 8000c82:	ea43 0808 	orr.w	r8, r3, r8
 8000c86:	40b4      	lsls	r4, r6
 8000c88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c8c:	fa1f fc87 	uxth.w	ip, r7
 8000c90:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c94:	0c23      	lsrs	r3, r4, #16
 8000c96:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9e:	fb01 f20c 	mul.w	r2, r1, ip
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0x62>
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cac:	f080 80ea 	bcs.w	8000e84 <__udivmoddi4+0x22c>
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	f240 80e7 	bls.w	8000e84 <__udivmoddi4+0x22c>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	443b      	add	r3, r7
 8000cba:	1a9a      	subs	r2, r3, r2
 8000cbc:	b2a3      	uxth	r3, r4
 8000cbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cca:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cce:	459c      	cmp	ip, r3
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x8e>
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd8:	f080 80d6 	bcs.w	8000e88 <__udivmoddi4+0x230>
 8000cdc:	459c      	cmp	ip, r3
 8000cde:	f240 80d3 	bls.w	8000e88 <__udivmoddi4+0x230>
 8000ce2:	443b      	add	r3, r7
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cea:	eba3 030c 	sub.w	r3, r3, ip
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11d      	cbz	r5, 8000cfa <__udivmoddi4+0xa2>
 8000cf2:	40f3      	lsrs	r3, r6
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d905      	bls.n	8000d0e <__udivmoddi4+0xb6>
 8000d02:	b10d      	cbz	r5, 8000d08 <__udivmoddi4+0xb0>
 8000d04:	e9c5 0100 	strd	r0, r1, [r5]
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	e7f5      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d0e:	fab3 f183 	clz	r1, r3
 8000d12:	2900      	cmp	r1, #0
 8000d14:	d146      	bne.n	8000da4 <__udivmoddi4+0x14c>
 8000d16:	4573      	cmp	r3, lr
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xc8>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 8105 	bhi.w	8000f2a <__udivmoddi4+0x2d2>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	4690      	mov	r8, r2
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	d0e5      	beq.n	8000cfa <__udivmoddi4+0xa2>
 8000d2e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d32:	e7e2      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	f000 8090 	beq.w	8000e5a <__udivmoddi4+0x202>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	f040 80a4 	bne.w	8000e8c <__udivmoddi4+0x234>
 8000d44:	1a8a      	subs	r2, r1, r2
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4c:	b280      	uxth	r0, r0
 8000d4e:	b2bc      	uxth	r4, r7
 8000d50:	2101      	movs	r1, #1
 8000d52:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d56:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d5e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x11e>
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x11c>
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	f200 80e0 	bhi.w	8000f34 <__udivmoddi4+0x2dc>
 8000d74:	46c4      	mov	ip, r8
 8000d76:	1a9b      	subs	r3, r3, r2
 8000d78:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d7c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d80:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d84:	fb02 f404 	mul.w	r4, r2, r4
 8000d88:	429c      	cmp	r4, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x144>
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x142>
 8000d94:	429c      	cmp	r4, r3
 8000d96:	f200 80ca 	bhi.w	8000f2e <__udivmoddi4+0x2d6>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	1b1b      	subs	r3, r3, r4
 8000d9e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000da2:	e7a5      	b.n	8000cf0 <__udivmoddi4+0x98>
 8000da4:	f1c1 0620 	rsb	r6, r1, #32
 8000da8:	408b      	lsls	r3, r1
 8000daa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dae:	431f      	orrs	r7, r3
 8000db0:	fa0e f401 	lsl.w	r4, lr, r1
 8000db4:	fa20 f306 	lsr.w	r3, r0, r6
 8000db8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dbc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000dc0:	4323      	orrs	r3, r4
 8000dc2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dc6:	fa1f fc87 	uxth.w	ip, r7
 8000dca:	fbbe f0f9 	udiv	r0, lr, r9
 8000dce:	0c1c      	lsrs	r4, r3, #16
 8000dd0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dd4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dd8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	fa02 f201 	lsl.w	r2, r2, r1
 8000de2:	d909      	bls.n	8000df8 <__udivmoddi4+0x1a0>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dea:	f080 809c 	bcs.w	8000f26 <__udivmoddi4+0x2ce>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f240 8099 	bls.w	8000f26 <__udivmoddi4+0x2ce>
 8000df4:	3802      	subs	r0, #2
 8000df6:	443c      	add	r4, r7
 8000df8:	eba4 040e 	sub.w	r4, r4, lr
 8000dfc:	fa1f fe83 	uxth.w	lr, r3
 8000e00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e04:	fb09 4413 	mls	r4, r9, r3, r4
 8000e08:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e0c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e10:	45a4      	cmp	ip, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x1ce>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e1a:	f080 8082 	bcs.w	8000f22 <__udivmoddi4+0x2ca>
 8000e1e:	45a4      	cmp	ip, r4
 8000e20:	d97f      	bls.n	8000f22 <__udivmoddi4+0x2ca>
 8000e22:	3b02      	subs	r3, #2
 8000e24:	443c      	add	r4, r7
 8000e26:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e2a:	eba4 040c 	sub.w	r4, r4, ip
 8000e2e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e32:	4564      	cmp	r4, ip
 8000e34:	4673      	mov	r3, lr
 8000e36:	46e1      	mov	r9, ip
 8000e38:	d362      	bcc.n	8000f00 <__udivmoddi4+0x2a8>
 8000e3a:	d05f      	beq.n	8000efc <__udivmoddi4+0x2a4>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x1fe>
 8000e3e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e42:	eb64 0409 	sbc.w	r4, r4, r9
 8000e46:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e4e:	431e      	orrs	r6, r3
 8000e50:	40cc      	lsrs	r4, r1
 8000e52:	e9c5 6400 	strd	r6, r4, [r5]
 8000e56:	2100      	movs	r1, #0
 8000e58:	e74f      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000e5a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e5e:	0c01      	lsrs	r1, r0, #16
 8000e60:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e64:	b280      	uxth	r0, r0
 8000e66:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	463c      	mov	r4, r7
 8000e70:	46b8      	mov	r8, r7
 8000e72:	46be      	mov	lr, r7
 8000e74:	2620      	movs	r6, #32
 8000e76:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e7a:	eba2 0208 	sub.w	r2, r2, r8
 8000e7e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e82:	e766      	b.n	8000d52 <__udivmoddi4+0xfa>
 8000e84:	4601      	mov	r1, r0
 8000e86:	e718      	b.n	8000cba <__udivmoddi4+0x62>
 8000e88:	4610      	mov	r0, r2
 8000e8a:	e72c      	b.n	8000ce6 <__udivmoddi4+0x8e>
 8000e8c:	f1c6 0220 	rsb	r2, r6, #32
 8000e90:	fa2e f302 	lsr.w	r3, lr, r2
 8000e94:	40b7      	lsls	r7, r6
 8000e96:	40b1      	lsls	r1, r6
 8000e98:	fa20 f202 	lsr.w	r2, r0, r2
 8000e9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ea6:	b2bc      	uxth	r4, r7
 8000ea8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb08 f904 	mul.w	r9, r8, r4
 8000eb6:	40b0      	lsls	r0, r6
 8000eb8:	4589      	cmp	r9, r1
 8000eba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ebe:	b280      	uxth	r0, r0
 8000ec0:	d93e      	bls.n	8000f40 <__udivmoddi4+0x2e8>
 8000ec2:	1879      	adds	r1, r7, r1
 8000ec4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ec8:	d201      	bcs.n	8000ece <__udivmoddi4+0x276>
 8000eca:	4589      	cmp	r9, r1
 8000ecc:	d81f      	bhi.n	8000f0e <__udivmoddi4+0x2b6>
 8000ece:	eba1 0109 	sub.w	r1, r1, r9
 8000ed2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ed6:	fb09 f804 	mul.w	r8, r9, r4
 8000eda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee4:	4542      	cmp	r2, r8
 8000ee6:	d229      	bcs.n	8000f3c <__udivmoddi4+0x2e4>
 8000ee8:	18ba      	adds	r2, r7, r2
 8000eea:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eee:	d2c4      	bcs.n	8000e7a <__udivmoddi4+0x222>
 8000ef0:	4542      	cmp	r2, r8
 8000ef2:	d2c2      	bcs.n	8000e7a <__udivmoddi4+0x222>
 8000ef4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ef8:	443a      	add	r2, r7
 8000efa:	e7be      	b.n	8000e7a <__udivmoddi4+0x222>
 8000efc:	45f0      	cmp	r8, lr
 8000efe:	d29d      	bcs.n	8000e3c <__udivmoddi4+0x1e4>
 8000f00:	ebbe 0302 	subs.w	r3, lr, r2
 8000f04:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f08:	3801      	subs	r0, #1
 8000f0a:	46e1      	mov	r9, ip
 8000f0c:	e796      	b.n	8000e3c <__udivmoddi4+0x1e4>
 8000f0e:	eba7 0909 	sub.w	r9, r7, r9
 8000f12:	4449      	add	r1, r9
 8000f14:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f18:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1c:	fb09 f804 	mul.w	r8, r9, r4
 8000f20:	e7db      	b.n	8000eda <__udivmoddi4+0x282>
 8000f22:	4673      	mov	r3, lr
 8000f24:	e77f      	b.n	8000e26 <__udivmoddi4+0x1ce>
 8000f26:	4650      	mov	r0, sl
 8000f28:	e766      	b.n	8000df8 <__udivmoddi4+0x1a0>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e6fd      	b.n	8000d2a <__udivmoddi4+0xd2>
 8000f2e:	443b      	add	r3, r7
 8000f30:	3a02      	subs	r2, #2
 8000f32:	e733      	b.n	8000d9c <__udivmoddi4+0x144>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	443b      	add	r3, r7
 8000f3a:	e71c      	b.n	8000d76 <__udivmoddi4+0x11e>
 8000f3c:	4649      	mov	r1, r9
 8000f3e:	e79c      	b.n	8000e7a <__udivmoddi4+0x222>
 8000f40:	eba1 0109 	sub.w	r1, r1, r9
 8000f44:	46c4      	mov	ip, r8
 8000f46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4a:	fb09 f804 	mul.w	r8, r9, r4
 8000f4e:	e7c4      	b.n	8000eda <__udivmoddi4+0x282>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <DWT_Delay_Init>:
 *      Author: IoT Main
 */

#include "DHT.h"
uint32_t DWT_Delay_Init(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f58:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <DWT_Delay_Init+0x58>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	4a13      	ldr	r2, [pc, #76]	@ (8000fac <DWT_Delay_Init+0x58>)
 8000f5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000f62:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f64:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <DWT_Delay_Init+0x58>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	4a10      	ldr	r2, [pc, #64]	@ (8000fac <DWT_Delay_Init+0x58>)
 8000f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f6e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f76:	f023 0301 	bic.w	r3, r3, #1
 8000f7a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000f88:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000f8e:	bf00      	nop
  __ASM volatile ("NOP");
 8000f90:	bf00      	nop
  __ASM volatile ("NOP");
 8000f92:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e000      	b.n	8000fa2 <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 8000fa0:	2301      	movs	r3, #1
  }

}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000edf0 	.word	0xe000edf0
 8000fb0:	e0001000 	.word	0xe0001000

08000fb4 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <DWT_Delay_us+0x40>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000fc2:	f003 facf 	bl	8004564 <HAL_RCC_GetHCLKFreq>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff8 <DWT_Delay_us+0x44>)
 8000fca:	fba2 2303 	umull	r2, r3, r2, r3
 8000fce:	0c9b      	lsrs	r3, r3, #18
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	fb02 f303 	mul.w	r3, r2, r3
 8000fd6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000fd8:	bf00      	nop
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <DWT_Delay_us+0x40>)
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	1ad2      	subs	r2, r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d3f8      	bcc.n	8000fda <DWT_Delay_us+0x26>
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	e0001000 	.word	0xe0001000
 8000ff8:	431bde83 	.word	0x431bde83

08000ffc <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001018:	887b      	ldrh	r3, [r7, #2]
 800101a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4619      	mov	r1, r3
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f002 fc5c 	bl	80038e8 <HAL_GPIO_Init>
}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4619      	mov	r1, r3
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f002 fc40 	bl	80038e8 <HAL_GPIO_Init>
}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <DHT11_Init>:

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001074:	f7ff ff6e 	bl	8000f54 <DWT_Delay_Init>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001078:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800107c:	4807      	ldr	r0, [pc, #28]	@ (800109c <DHT11_Init+0x2c>)
 800107e:	f7ff ffbd 	bl	8000ffc <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001088:	4804      	ldr	r0, [pc, #16]	@ (800109c <DHT11_Init+0x2c>)
 800108a:	f002 fdc9 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800108e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001092:	f001 fea3 	bl	8002ddc <HAL_Delay>
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40020800 	.word	0x40020800

080010a0 <DHT11_Start>:

void DHT11_Start (void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80010a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010a8:	4811      	ldr	r0, [pc, #68]	@ (80010f0 <DHT11_Start+0x50>)
 80010aa:	f7ff ffa7 	bl	8000ffc <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80010ae:	2201      	movs	r2, #1
 80010b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010b4:	480e      	ldr	r0, [pc, #56]	@ (80010f0 <DHT11_Start+0x50>)
 80010b6:	f002 fdb3 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010c0:	480b      	ldr	r0, [pc, #44]	@ (80010f0 <DHT11_Start+0x50>)
 80010c2:	f002 fdad 	bl	8003c20 <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);
 80010c6:	f244 6050 	movw	r0, #18000	@ 0x4650
 80010ca:	f7ff ff73 	bl	8000fb4 <DWT_Delay_us>
	//delay_us (18000);   // wait for 18ms
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80010ce:	2201      	movs	r2, #1
 80010d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010d4:	4806      	ldr	r0, [pc, #24]	@ (80010f0 <DHT11_Start+0x50>)
 80010d6:	f002 fda3 	bl	8003c20 <HAL_GPIO_WritePin>
	DWT_Delay_us(20);
 80010da:	2014      	movs	r0, #20
 80010dc:	f7ff ff6a 	bl	8000fb4 <DWT_Delay_us>
	//delay_us (20);   // wait for 20us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 80010e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010e4:	4802      	ldr	r0, [pc, #8]	@ (80010f0 <DHT11_Start+0x50>)
 80010e6:	f7ff ffa7 	bl	8001038 <Set_Pin_Input>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40020800 	.word	0x40020800

080010f4 <DHT11_Stop>:

void DHT11_Stop (void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80010f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010fc:	4805      	ldr	r0, [pc, #20]	@ (8001114 <DHT11_Stop+0x20>)
 80010fe:	f7ff ff7d 	bl	8000ffc <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001102:	2201      	movs	r2, #1
 8001104:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001108:	4802      	ldr	r0, [pc, #8]	@ (8001114 <DHT11_Stop+0x20>)
 800110a:	f002 fd89 	bl	8003c20 <HAL_GPIO_WritePin>
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40020800 	.word	0x40020800

08001118 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]

	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001122:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001126:	4812      	ldr	r0, [pc, #72]	@ (8001170 <DHT11_Check_Response+0x58>)
 8001128:	f002 fd62 	bl	8003bf0 <HAL_GPIO_ReadPin>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10f      	bne.n	8001152 <DHT11_Check_Response+0x3a>
	{
		DWT_Delay_us(80);
 8001132:	2050      	movs	r0, #80	@ 0x50
 8001134:	f7ff ff3e 	bl	8000fb4 <DWT_Delay_us>
		//delay_us (80);
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001138:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800113c:	480c      	ldr	r0, [pc, #48]	@ (8001170 <DHT11_Check_Response+0x58>)
 800113e:	f002 fd57 	bl	8003bf0 <HAL_GPIO_ReadPin>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <DHT11_Check_Response+0x36>
 8001148:	2301      	movs	r3, #1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	e001      	b.n	8001152 <DHT11_Check_Response+0x3a>
		else Response = -1; // 255
 800114e:	23ff      	movs	r3, #255	@ 0xff
 8001150:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8001152:	bf00      	nop
 8001154:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001158:	4805      	ldr	r0, [pc, #20]	@ (8001170 <DHT11_Check_Response+0x58>)
 800115a:	f002 fd49 	bl	8003bf0 <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1f7      	bne.n	8001154 <DHT11_Check_Response+0x3c>

	return Response;
 8001164:	79fb      	ldrb	r3, [r7, #7]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40020800 	.word	0x40020800

08001174 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800117a:	2300      	movs	r3, #0
 800117c:	71bb      	strb	r3, [r7, #6]
 800117e:	e03a      	b.n	80011f6 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8001180:	bf00      	nop
 8001182:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001186:	4820      	ldr	r0, [pc, #128]	@ (8001208 <DHT11_Read+0x94>)
 8001188:	f002 fd32 	bl	8003bf0 <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f7      	beq.n	8001182 <DHT11_Read+0xe>
		DWT_Delay_us(40);
 8001192:	2028      	movs	r0, #40	@ 0x28
 8001194:	f7ff ff0e 	bl	8000fb4 <DWT_Delay_us>
		//delay_us (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001198:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800119c:	481a      	ldr	r0, [pc, #104]	@ (8001208 <DHT11_Read+0x94>)
 800119e:	f002 fd27 	bl	8003bf0 <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10e      	bne.n	80011c6 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 80011a8:	79bb      	ldrb	r3, [r7, #6]
 80011aa:	f1c3 0307 	rsb	r3, r3, #7
 80011ae:	2201      	movs	r2, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	b25b      	sxtb	r3, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	b25a      	sxtb	r2, r3
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	4013      	ands	r3, r2
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	e00b      	b.n	80011de <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80011c6:	79bb      	ldrb	r3, [r7, #6]
 80011c8:	f1c3 0307 	rsb	r3, r3, #7
 80011cc:	2201      	movs	r2, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	b25a      	sxtb	r2, r3
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	4313      	orrs	r3, r2
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80011de:	bf00      	nop
 80011e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011e4:	4808      	ldr	r0, [pc, #32]	@ (8001208 <DHT11_Read+0x94>)
 80011e6:	f002 fd03 	bl	8003bf0 <HAL_GPIO_ReadPin>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f7      	bne.n	80011e0 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	3301      	adds	r3, #1
 80011f4:	71bb      	strb	r3, [r7, #6]
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	2b07      	cmp	r3, #7
 80011fa:	d9c1      	bls.n	8001180 <DHT11_Read+0xc>
	}
	return i;
 80011fc:	79fb      	ldrb	r3, [r7, #7]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40020800 	.word	0x40020800

0800120c <DHT11_readData>:

DHT11_TypeDef DHT11_readData()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	DHT11_TypeDef dht11;
	DHT11_Start();
 8001214:	f7ff ff44 	bl	80010a0 <DHT11_Start>
	if ((dht11.status = DHT11_Check_Response()) < 0) return dht11;
 8001218:	f7ff ff7e 	bl	8001118 <DHT11_Check_Response>
 800121c:	4603      	mov	r3, r0
 800121e:	737b      	strb	r3, [r7, #13]
	dht11.rh_byte1 = DHT11_Read ();
 8001220:	f7ff ffa8 	bl	8001174 <DHT11_Read>
 8001224:	4603      	mov	r3, r0
 8001226:	723b      	strb	r3, [r7, #8]
	dht11.rh_byte2 = DHT11_Read ();
 8001228:	f7ff ffa4 	bl	8001174 <DHT11_Read>
 800122c:	4603      	mov	r3, r0
 800122e:	727b      	strb	r3, [r7, #9]
	dht11.temp_byte1 = DHT11_Read ();
 8001230:	f7ff ffa0 	bl	8001174 <DHT11_Read>
 8001234:	4603      	mov	r3, r0
 8001236:	72bb      	strb	r3, [r7, #10]
	dht11.temp_byte2 = DHT11_Read ();
 8001238:	f7ff ff9c 	bl	8001174 <DHT11_Read>
 800123c:	4603      	mov	r3, r0
 800123e:	72fb      	strb	r3, [r7, #11]
	dht11.checksum = DHT11_Read();
 8001240:	f7ff ff98 	bl	8001174 <DHT11_Read>
 8001244:	4603      	mov	r3, r0
 8001246:	733b      	strb	r3, [r7, #12]
	DHT11_Stop();
 8001248:	f7ff ff54 	bl	80010f4 <DHT11_Stop>
	return dht11;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	461a      	mov	r2, r3
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	6010      	str	r0, [r2, #0]
 8001258:	889b      	ldrh	r3, [r3, #4]
 800125a:	8093      	strh	r3, [r2, #4]
}
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	807b      	strh	r3, [r7, #2]
    *length = 0;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8001278:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800127c:	2100      	movs	r1, #0
 800127e:	68b8      	ldr	r0, [r7, #8]
 8001280:	f005 fc6c 	bl	8006b5c <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 8001284:	f240 4202 	movw	r2, #1026	@ 0x402
 8001288:	2100      	movs	r1, #0
 800128a:	4826      	ldr	r0, [pc, #152]	@ (8001324 <esp_at_command+0xc0>)
 800128c:	f005 fc66 	bl	8006b5c <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f7fe ffaf 	bl	80001f4 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	b29a      	uxth	r2, r3
 800129a:	2364      	movs	r3, #100	@ 0x64
 800129c:	68f9      	ldr	r1, [r7, #12]
 800129e:	4822      	ldr	r0, [pc, #136]	@ (8001328 <esp_at_command+0xc4>)
 80012a0:	f004 f984 	bl	80055ac <HAL_UART_Transmit>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d032      	beq.n	8001310 <esp_at_command+0xac>
        return -1;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	e035      	b.n	800131c <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 80012b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <esp_at_command+0xc0>)
 80012b2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80012b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012ba:	d302      	bcc.n	80012c2 <esp_at_command+0x5e>
            return -2;
 80012bc:	f06f 0301 	mvn.w	r3, #1
 80012c0:	e02c      	b.n	800131c <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 80012c2:	491a      	ldr	r1, [pc, #104]	@ (800132c <esp_at_command+0xc8>)
 80012c4:	4817      	ldr	r0, [pc, #92]	@ (8001324 <esp_at_command+0xc0>)
 80012c6:	f005 fccd 	bl	8006c64 <strstr>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <esp_at_command+0x72>
            return -3;
 80012d0:	f06f 0302 	mvn.w	r3, #2
 80012d4:	e022      	b.n	800131c <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 80012d6:	4916      	ldr	r1, [pc, #88]	@ (8001330 <esp_at_command+0xcc>)
 80012d8:	4812      	ldr	r0, [pc, #72]	@ (8001324 <esp_at_command+0xc0>)
 80012da:	f005 fcc3 	bl	8006c64 <strstr>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00e      	beq.n	8001302 <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 80012e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <esp_at_command+0xc0>)
 80012e6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80012ea:	461a      	mov	r2, r3
 80012ec:	490d      	ldr	r1, [pc, #52]	@ (8001324 <esp_at_command+0xc0>)
 80012ee:	68b8      	ldr	r0, [r7, #8]
 80012f0:	f005 fd49 	bl	8006d86 <memcpy>
            *length = cb_data.length;
 80012f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <esp_at_command+0xc0>)
 80012f6:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	801a      	strh	r2, [r3, #0]
            return 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	e00c      	b.n	800131c <esp_at_command+0xb8>
        }
        time_out -= 10;
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	3b0a      	subs	r3, #10
 8001306:	b29b      	uxth	r3, r3
 8001308:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 800130a:	200a      	movs	r0, #10
 800130c:	f001 fd66 	bl	8002ddc <HAL_Delay>
    while(time_out > 0)
 8001310:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001314:	2b00      	cmp	r3, #0
 8001316:	dccb      	bgt.n	80012b0 <esp_at_command+0x4c>
    }
    return -4;
 8001318:	f06f 0303 	mvn.w	r3, #3
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200004d0 	.word	0x200004d0
 8001328:	20000a88 	.word	0x20000a88
 800132c:	08008b48 	.word	0x08008b48
 8001330:	08008b50 	.word	0x08008b50

08001334 <esp_reset>:

static int esp_reset(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 800133e:	1dba      	adds	r2, r7, #6
 8001340:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001344:	4909      	ldr	r1, [pc, #36]	@ (800136c <esp_reset+0x38>)
 8001346:	480a      	ldr	r0, [pc, #40]	@ (8001370 <esp_reset+0x3c>)
 8001348:	f7ff ff8c 	bl	8001264 <esp_at_command>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <esp_reset+0x24>
    {
    	return -1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	e004      	b.n	8001362 <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 8001358:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800135c:	f001 fd3e 	bl	8002ddc <HAL_Delay>
    return 0;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000098 	.word	0x20000098
 8001370:	08008b54 	.word	0x08008b54

08001374 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 8001382:	f107 020a 	add.w	r2, r7, #10
 8001386:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138a:	492d      	ldr	r1, [pc, #180]	@ (8001440 <request_ip_addr+0xcc>)
 800138c:	482d      	ldr	r0, [pc, #180]	@ (8001444 <request_ip_addr+0xd0>)
 800138e:	f7ff ff69 	bl	8001264 <esp_at_command>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8001398:	482b      	ldr	r0, [pc, #172]	@ (8001448 <request_ip_addr+0xd4>)
 800139a:	f005 fadd 	bl	8006958 <puts>
 800139e:	e049      	b.n	8001434 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 80013a0:	492a      	ldr	r1, [pc, #168]	@ (800144c <request_ip_addr+0xd8>)
 80013a2:	4827      	ldr	r0, [pc, #156]	@ (8001440 <request_ip_addr+0xcc>)
 80013a4:	f005 fc02 	bl	8006bac <strtok>
 80013a8:	6178      	str	r0, [r7, #20]

        if(is_debug)
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d03e      	beq.n	800142e <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	e009      	b.n	80013ca <request_ip_addr+0x56>
                printf("%c", response[i]);
 80013b6:	4a22      	ldr	r2, [pc, #136]	@ (8001440 <request_ip_addr+0xcc>)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f005 fa6c 	bl	800689c <putchar>
            for(int i = 0 ; i < length ; i++)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	3301      	adds	r3, #1
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	897b      	ldrh	r3, [r7, #10]
 80013cc:	461a      	mov	r2, r3
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4293      	cmp	r3, r2
 80013d2:	dbf0      	blt.n	80013b6 <request_ip_addr+0x42>
        }

        while(line != NULL)
 80013d4:	e02b      	b.n	800142e <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 80013d6:	491e      	ldr	r1, [pc, #120]	@ (8001450 <request_ip_addr+0xdc>)
 80013d8:	6978      	ldr	r0, [r7, #20]
 80013da:	f005 fc43 	bl	8006c64 <strstr>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d01f      	beq.n	8001424 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 80013e4:	491b      	ldr	r1, [pc, #108]	@ (8001454 <request_ip_addr+0xe0>)
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	f005 fbe0 	bl	8006bac <strtok>
                ip = strtok(NULL, "\"");
 80013ec:	4919      	ldr	r1, [pc, #100]	@ (8001454 <request_ip_addr+0xe0>)
 80013ee:	2000      	movs	r0, #0
 80013f0:	f005 fbdc 	bl	8006bac <strtok>
 80013f4:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 80013f6:	4918      	ldr	r1, [pc, #96]	@ (8001458 <request_ip_addr+0xe4>)
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f7fe fef1 	bl	80001e0 <strcmp>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00f      	beq.n	8001424 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8001404:	2210      	movs	r2, #16
 8001406:	2100      	movs	r1, #0
 8001408:	4814      	ldr	r0, [pc, #80]	@ (800145c <request_ip_addr+0xe8>)
 800140a:	f005 fba7 	bl	8006b5c <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f7fe fef0 	bl	80001f4 <strlen>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	68f9      	ldr	r1, [r7, #12]
 800141a:	4810      	ldr	r0, [pc, #64]	@ (800145c <request_ip_addr+0xe8>)
 800141c:	f005 fcb3 	bl	8006d86 <memcpy>
                    return 0;
 8001420:	2300      	movs	r3, #0
 8001422:	e009      	b.n	8001438 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8001424:	4909      	ldr	r1, [pc, #36]	@ (800144c <request_ip_addr+0xd8>)
 8001426:	2000      	movs	r0, #0
 8001428:	f005 fbc0 	bl	8006bac <strtok>
 800142c:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1d0      	bne.n	80013d6 <request_ip_addr+0x62>
        }
    }
    return -1;
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000098 	.word	0x20000098
 8001444:	08008b9c 	.word	0x08008b9c
 8001448:	08008ba8 	.word	0x08008ba8
 800144c:	08008b90 	.word	0x08008b90
 8001450:	08008bc8 	.word	0x08008bc8
 8001454:	08008b98 	.word	0x08008b98
 8001458:	08008b60 	.word	0x08008b60
 800145c:	20000088 	.word	0x20000088

08001460 <esp_client_conn>:
int esp_client_conn()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b092      	sub	sp, #72	@ 0x48
 8001464:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	2240      	movs	r2, #64	@ 0x40
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f005 fb74 	bl	8006b5c <memset>
  uint16_t length = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 8001478:	f107 0008 	add.w	r0, r7, #8
 800147c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001480:	4a09      	ldr	r2, [pc, #36]	@ (80014a8 <esp_client_conn+0x48>)
 8001482:	490a      	ldr	r1, [pc, #40]	@ (80014ac <esp_client_conn+0x4c>)
 8001484:	f005 fa70 	bl	8006968 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8001488:	1dba      	adds	r2, r7, #6
 800148a:	f107 0008 	add.w	r0, r7, #8
 800148e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001492:	4907      	ldr	r1, [pc, #28]	@ (80014b0 <esp_client_conn+0x50>)
 8001494:	f7ff fee6 	bl	8001264 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8001498:	4806      	ldr	r0, [pc, #24]	@ (80014b4 <esp_client_conn+0x54>)
 800149a:	f000 f909 	bl	80016b0 <esp_send_data>
	return 0;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3748      	adds	r7, #72	@ 0x48
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	08008bd4 	.word	0x08008bd4
 80014ac:	08008be4 	.word	0x08008be4
 80014b0:	20000098 	.word	0x20000098
 80014b4:	08008c00 	.word	0x08008c00

080014b8 <esp_get_status>:
int esp_get_status()
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 80014c2:	1dba      	adds	r2, r7, #6
 80014c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c8:	4909      	ldr	r1, [pc, #36]	@ (80014f0 <esp_get_status+0x38>)
 80014ca:	480a      	ldr	r0, [pc, #40]	@ (80014f4 <esp_get_status+0x3c>)
 80014cc:	f7ff feca 	bl	8001264 <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 80014d0:	4909      	ldr	r1, [pc, #36]	@ (80014f8 <esp_get_status+0x40>)
 80014d2:	4807      	ldr	r0, [pc, #28]	@ (80014f0 <esp_get_status+0x38>)
 80014d4:	f005 fbc6 	bl	8006c64 <strstr>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <esp_get_status+0x2a>
    {
    	return 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	e001      	b.n	80014e6 <esp_get_status+0x2e>
    }
	return -1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000098 	.word	0x20000098
 80014f4:	08008c10 	.word	0x08008c10
 80014f8:	08008c20 	.word	0x08008c20

080014fc <drv_esp_init>:
int drv_esp_init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 8001500:	2210      	movs	r2, #16
 8001502:	2100      	movs	r1, #0
 8001504:	4806      	ldr	r0, [pc, #24]	@ (8001520 <drv_esp_init+0x24>)
 8001506:	f005 fb29 	bl	8006b5c <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 800150a:	2201      	movs	r2, #1
 800150c:	4905      	ldr	r1, [pc, #20]	@ (8001524 <drv_esp_init+0x28>)
 800150e:	4806      	ldr	r0, [pc, #24]	@ (8001528 <drv_esp_init+0x2c>)
 8001510:	f004 f8d7 	bl	80056c2 <HAL_UART_Receive_IT>

    return esp_reset();
 8001514:	f7ff ff0e 	bl	8001334 <esp_reset>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000088 	.word	0x20000088
 8001524:	200004cf 	.word	0x200004cf
 8001528:	20000a88 	.word	0x20000a88

0800152c <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b094      	sub	sp, #80	@ 0x50
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	2240      	movs	r2, #64	@ 0x40
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f005 fb09 	bl	8006b5c <memset>
  if(ssid == NULL || passwd == NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <ap_conn_func+0x2a>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d103      	bne.n	800155e <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8001556:	4817      	ldr	r0, [pc, #92]	@ (80015b4 <ap_conn_func+0x88>)
 8001558:	f005 f9fe 	bl	8006958 <puts>
 800155c:	e026      	b.n	80015ac <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 800155e:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8001562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001566:	4914      	ldr	r1, [pc, #80]	@ (80015b8 <ap_conn_func+0x8c>)
 8001568:	4814      	ldr	r0, [pc, #80]	@ (80015bc <ap_conn_func+0x90>)
 800156a:	f7ff fe7b 	bl	8001264 <esp_at_command>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 8001574:	4812      	ldr	r0, [pc, #72]	@ (80015c0 <ap_conn_func+0x94>)
 8001576:	f005 f9ef 	bl	8006958 <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 800157a:	f107 000c 	add.w	r0, r7, #12
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	4910      	ldr	r1, [pc, #64]	@ (80015c4 <ap_conn_func+0x98>)
 8001584:	f005 f9f0 	bl	8006968 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8001588:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 800158c:	f107 000c 	add.w	r0, r7, #12
 8001590:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001594:	4908      	ldr	r1, [pc, #32]	@ (80015b8 <ap_conn_func+0x8c>)
 8001596:	f7ff fe65 	bl	8001264 <esp_at_command>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4619      	mov	r1, r3
 80015a6:	4808      	ldr	r0, [pc, #32]	@ (80015c8 <ap_conn_func+0x9c>)
 80015a8:	f005 f966 	bl	8006878 <iprintf>
}
 80015ac:	3750      	adds	r7, #80	@ 0x50
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	08008c84 	.word	0x08008c84
 80015b8:	20000098 	.word	0x20000098
 80015bc:	08008cb0 	.word	0x08008cb0
 80015c0:	08008cc0 	.word	0x08008cc0
 80015c4:	08008cd4 	.word	0x08008cd4
 80015c8:	08008cec 	.word	0x08008cec

080015cc <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a23      	ldr	r2, [pc, #140]	@ (8001668 <HAL_UART_RxCpltCallback+0x9c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d117      	bne.n	800160e <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 80015de:	4b23      	ldr	r3, [pc, #140]	@ (800166c <HAL_UART_RxCpltCallback+0xa0>)
 80015e0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80015e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015e8:	d20c      	bcs.n	8001604 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 80015ea:	4b20      	ldr	r3, [pc, #128]	@ (800166c <HAL_UART_RxCpltCallback+0xa0>)
 80015ec:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	b291      	uxth	r1, r2
 80015f4:	4a1d      	ldr	r2, [pc, #116]	@ (800166c <HAL_UART_RxCpltCallback+0xa0>)
 80015f6:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <HAL_UART_RxCpltCallback+0xa4>)
 80015fe:	7819      	ldrb	r1, [r3, #0]
 8001600:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <HAL_UART_RxCpltCallback+0xa0>)
 8001602:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 8001604:	2201      	movs	r2, #1
 8001606:	491a      	ldr	r1, [pc, #104]	@ (8001670 <HAL_UART_RxCpltCallback+0xa4>)
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f004 f85a 	bl	80056c2 <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a18      	ldr	r2, [pc, #96]	@ (8001674 <HAL_UART_RxCpltCallback+0xa8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d122      	bne.n	800165e <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8001618:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <HAL_UART_RxCpltCallback+0xac>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a17      	ldr	r2, [pc, #92]	@ (800167c <HAL_UART_RxCpltCallback+0xb0>)
 800161e:	7811      	ldrb	r1, [r2, #0]
 8001620:	4a17      	ldr	r2, [pc, #92]	@ (8001680 <HAL_UART_RxCpltCallback+0xb4>)
 8001622:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <HAL_UART_RxCpltCallback+0xac>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a15      	ldr	r2, [pc, #84]	@ (8001680 <HAL_UART_RxCpltCallback+0xb4>)
 800162a:	5cd3      	ldrb	r3, [r2, r3]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b0d      	cmp	r3, #13
 8001630:	d10b      	bne.n	800164a <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <HAL_UART_RxCpltCallback+0xac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a12      	ldr	r2, [pc, #72]	@ (8001680 <HAL_UART_RxCpltCallback+0xb4>)
 8001638:	2100      	movs	r1, #0
 800163a:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 800163c:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <HAL_UART_RxCpltCallback+0xb8>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8001642:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <HAL_UART_RxCpltCallback+0xac>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e004      	b.n	8001654 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 800164a:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <HAL_UART_RxCpltCallback+0xac>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	3301      	adds	r3, #1
 8001650:	4a09      	ldr	r2, [pc, #36]	@ (8001678 <HAL_UART_RxCpltCallback+0xac>)
 8001652:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 8001654:	2201      	movs	r2, #1
 8001656:	4909      	ldr	r1, [pc, #36]	@ (800167c <HAL_UART_RxCpltCallback+0xb0>)
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f004 f832 	bl	80056c2 <HAL_UART_Receive_IT>
    }
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40011400 	.word	0x40011400
 800166c:	200004d0 	.word	0x200004d0
 8001670:	200004cf 	.word	0x200004cf
 8001674:	40004400 	.word	0x40004400
 8001678:	200008d4 	.word	0x200008d4
 800167c:	200004ce 	.word	0x200004ce
 8001680:	2000049c 	.word	0x2000049c
 8001684:	20000498 	.word	0x20000498

08001688 <AiotClient_Init>:


void AiotClient_Init()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 800168c:	4906      	ldr	r1, [pc, #24]	@ (80016a8 <AiotClient_Init+0x20>)
 800168e:	4807      	ldr	r0, [pc, #28]	@ (80016ac <AiotClient_Init+0x24>)
 8001690:	f7ff ff4c 	bl	800152c <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 8001694:	2001      	movs	r0, #1
 8001696:	f7ff fe6d 	bl	8001374 <request_ip_addr>
	esp_client_conn();
 800169a:	f7ff fee1 	bl	8001460 <esp_client_conn>
	esp_get_status();
 800169e:	f7ff ff0b 	bl	80014b8 <esp_get_status>
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	08008d4c 	.word	0x08008d4c
 80016ac:	08008d58 	.word	0x08008d58

080016b0 <esp_send_data>:

void esp_send_data(char *data)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b094      	sub	sp, #80	@ 0x50
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	2240      	movs	r2, #64	@ 0x40
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f005 fa4b 	bl	8006b5c <memset>
	uint16_t length = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7fe fd92 	bl	80001f4 <strlen>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	490e      	ldr	r1, [pc, #56]	@ (8001710 <esp_send_data+0x60>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f005 f945 	bl	8006968 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 80016de:	f107 020e 	add.w	r2, r7, #14
 80016e2:	f107 0010 	add.w	r0, r7, #16
 80016e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ea:	490a      	ldr	r1, [pc, #40]	@ (8001714 <esp_send_data+0x64>)
 80016ec:	f7ff fdba 	bl	8001264 <esp_at_command>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d107      	bne.n	8001706 <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 80016f6:	f107 020e 	add.w	r2, r7, #14
 80016fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016fe:	4905      	ldr	r1, [pc, #20]	@ (8001714 <esp_send_data+0x64>)
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fdaf 	bl	8001264 <esp_at_command>
	}
}
 8001706:	bf00      	nop
 8001708:	3750      	adds	r7, #80	@ 0x50
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	08008d60 	.word	0x08008d60
 8001714:	20000098 	.word	0x20000098

08001718 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 800171c:	2201      	movs	r2, #1
 800171e:	4903      	ldr	r1, [pc, #12]	@ (800172c <drv_uart_init+0x14>)
 8001720:	4803      	ldr	r0, [pc, #12]	@ (8001730 <drv_uart_init+0x18>)
 8001722:	f003 ffce 	bl	80056c2 <HAL_UART_Receive_IT>
    return 0;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200004ce 	.word	0x200004ce
 8001730:	20000a40 	.word	0x20000a40

08001734 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 800173c:	1d39      	adds	r1, r7, #4
 800173e:	230a      	movs	r3, #10
 8001740:	2201      	movs	r2, #1
 8001742:	4807      	ldr	r0, [pc, #28]	@ (8001760 <__io_putchar+0x2c>)
 8001744:	f003 ff32 	bl	80055ac <HAL_UART_Transmit>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <__io_putchar+0x1e>
        return ch;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	e001      	b.n	8001756 <__io_putchar+0x22>
    return -1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000a40 	.word	0x20000a40

08001764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int ret = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176e:	f001 fac3 	bl	8002cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001772:	f000 f8fd 	bl	8001970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001776:	f000 fc1f 	bl	8001fb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800177a:	f000 fbc9 	bl	8001f10 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800177e:	f000 fbf1 	bl	8001f64 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8001782:	f000 fb4d 	bl	8001e20 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001786:	f000 fad5 	bl	8001d34 <MX_TIM3_Init>
  MX_TIM1_Init();
 800178a:	f000 f9bd 	bl	8001b08 <MX_TIM1_Init>
  MX_ADC1_Init();
 800178e:	f000 f959 	bl	8001a44 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001792:	f000 fa59 	bl	8001c48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf("Start main() - wifi\r\n");
 8001796:	4861      	ldr	r0, [pc, #388]	@ (800191c <main+0x1b8>)
 8001798:	f005 f8de 	bl	8006958 <puts>
  ret |= drv_uart_init();
 800179c:	f7ff ffbc 	bl	8001718 <drv_uart_init>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]
  ret |= drv_esp_init();
 80017a8:	f7ff fea8 	bl	80014fc <drv_esp_init>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
  if(ret != 0)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d004      	beq.n	80017c4 <main+0x60>
  {
	  printf("Esp response error\r\n");
 80017ba:	4859      	ldr	r0, [pc, #356]	@ (8001920 <main+0x1bc>)
 80017bc:	f005 f8cc 	bl	8006958 <puts>
	  Error_Handler();
 80017c0:	f000 ff14 	bl	80025ec <Error_Handler>
  }

  AiotClient_Init();
 80017c4:	f7ff ff60 	bl	8001688 <AiotClient_Init>

  DHT11_Init();
 80017c8:	f7ff fc52 	bl	8001070 <DHT11_Init>

  if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 80017cc:	2100      	movs	r1, #0
 80017ce:	4855      	ldr	r0, [pc, #340]	@ (8001924 <main+0x1c0>)
 80017d0:	f002 ffa4 	bl	800471c <HAL_TIM_PWM_Start>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <main+0x7a>
	  Error_Handler();
 80017da:	f000 ff07 	bl	80025ec <Error_Handler>

  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 80017de:	2100      	movs	r1, #0
 80017e0:	4851      	ldr	r0, [pc, #324]	@ (8001928 <main+0x1c4>)
 80017e2:	f002 ff9b 	bl	800471c <HAL_TIM_PWM_Start>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <main+0x8c>
	  Error_Handler();
 80017ec:	f000 fefe 	bl	80025ec <Error_Handler>

  if(HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1) != HAL_OK)
 80017f0:	2100      	movs	r1, #0
 80017f2:	484e      	ldr	r0, [pc, #312]	@ (800192c <main+0x1c8>)
 80017f4:	f002 ff92 	bl	800471c <HAL_TIM_PWM_Start>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <main+0x9e>
	  Error_Handler();
 80017fe:	f000 fef5 	bl	80025ec <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    int infraredSensorData = infraredSensor();	//출입문 적외선센서 값
 8001802:	f000 fe29 	bl	8002458 <infraredSensor>
 8001806:	60b8      	str	r0, [r7, #8]

		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8001808:	4949      	ldr	r1, [pc, #292]	@ (8001930 <main+0x1cc>)
 800180a:	484a      	ldr	r0, [pc, #296]	@ (8001934 <main+0x1d0>)
 800180c:	f005 fa2a 	bl	8006c64 <strstr>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d01d      	beq.n	8001852 <main+0xee>
 8001816:	4b47      	ldr	r3, [pc, #284]	@ (8001934 <main+0x1d0>)
 8001818:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800181c:	3b01      	subs	r3, #1
 800181e:	4a45      	ldr	r2, [pc, #276]	@ (8001934 <main+0x1d0>)
 8001820:	5cd3      	ldrb	r3, [r2, r3]
 8001822:	2b0a      	cmp	r3, #10
 8001824:	d115      	bne.n	8001852 <main+0xee>
		{
			//?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 8001826:	215b      	movs	r1, #91	@ 0x5b
 8001828:	4842      	ldr	r0, [pc, #264]	@ (8001934 <main+0x1d0>)
 800182a:	f005 f99f 	bl	8006b6c <strchr>
 800182e:	4603      	mov	r3, r0
 8001830:	4619      	mov	r1, r3
 8001832:	4841      	ldr	r0, [pc, #260]	@ (8001938 <main+0x1d4>)
 8001834:	f005 fa9f 	bl	8006d76 <strcpy>
			memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 8001838:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800183c:	2100      	movs	r1, #0
 800183e:	483d      	ldr	r0, [pc, #244]	@ (8001934 <main+0x1d0>)
 8001840:	f005 f98c 	bl	8006b5c <memset>
			cb_data.length = 0;
 8001844:	4b3b      	ldr	r3, [pc, #236]	@ (8001934 <main+0x1d0>)
 8001846:	2200      	movs	r2, #0
 8001848:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 800184c:	483a      	ldr	r0, [pc, #232]	@ (8001938 <main+0x1d4>)
 800184e:	f000 fc53 	bl	80020f8 <esp_event>
		}
		if(rx2Flag)
 8001852:	4b3a      	ldr	r3, [pc, #232]	@ (800193c <main+0x1d8>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d006      	beq.n	800186a <main+0x106>
		{
			printf("recv2 : %s\r\n",rx2Data);
 800185c:	4938      	ldr	r1, [pc, #224]	@ (8001940 <main+0x1dc>)
 800185e:	4839      	ldr	r0, [pc, #228]	@ (8001944 <main+0x1e0>)
 8001860:	f005 f80a 	bl	8006878 <iprintf>
			rx2Flag =0;
 8001864:	4b35      	ldr	r3, [pc, #212]	@ (800193c <main+0x1d8>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
		}
		if(tim3Flag1Sec)	//1초에 한번
 800186a:	4b37      	ldr	r3, [pc, #220]	@ (8001948 <main+0x1e4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d041      	beq.n	80018f6 <main+0x192>
		{
			tim3Flag1Sec = 0;
 8001872:	4b35      	ldr	r3, [pc, #212]	@ (8001948 <main+0x1e4>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
			if(!(tim3Sec%10)) //10초에 한번
 8001878:	4b34      	ldr	r3, [pc, #208]	@ (800194c <main+0x1e8>)
 800187a:	6819      	ldr	r1, [r3, #0]
 800187c:	4b34      	ldr	r3, [pc, #208]	@ (8001950 <main+0x1ec>)
 800187e:	fba3 2301 	umull	r2, r3, r3, r1
 8001882:	08da      	lsrs	r2, r3, #3
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	1aca      	subs	r2, r1, r3
 800188e:	2a00      	cmp	r2, #0
 8001890:	d109      	bne.n	80018a6 <main+0x142>
			{
				if(esp_get_status() != 0)
 8001892:	f7ff fe11 	bl	80014b8 <esp_get_status>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <main+0x142>
				{
					printf("server connecting ...\r\n");
 800189c:	482d      	ldr	r0, [pc, #180]	@ (8001954 <main+0x1f0>)
 800189e:	f005 f85b 	bl	8006958 <puts>
					esp_client_conn();
 80018a2:	f7ff fddd 	bl	8001460 <esp_client_conn>
				}
			}
			printf("tim3Sec : %d\r\n",tim3Sec);
 80018a6:	4b29      	ldr	r3, [pc, #164]	@ (800194c <main+0x1e8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4619      	mov	r1, r3
 80018ac:	482a      	ldr	r0, [pc, #168]	@ (8001958 <main+0x1f4>)
 80018ae:	f004 ffe3 	bl	8006878 <iprintf>
			if(!(tim3Sec%5)) //5초에 한번
 80018b2:	4b26      	ldr	r3, [pc, #152]	@ (800194c <main+0x1e8>)
 80018b4:	6819      	ldr	r1, [r3, #0]
 80018b6:	4b26      	ldr	r3, [pc, #152]	@ (8001950 <main+0x1ec>)
 80018b8:	fba3 2301 	umull	r2, r3, r3, r1
 80018bc:	089a      	lsrs	r2, r3, #2
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	1aca      	subs	r2, r1, r3
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d115      	bne.n	80018f6 <main+0x192>
			{
				//dht11에서 값 읽어오기
				dht11Data = DHT11_readData();
 80018ca:	463b      	mov	r3, r7
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fc9d 	bl	800120c <DHT11_readData>
				if(dht11Data.rh_byte1 != 255)
 80018d2:	783b      	ldrb	r3, [r7, #0]
 80018d4:	2bff      	cmp	r3, #255	@ 0xff
 80018d6:	d00b      	beq.n	80018f0 <main+0x18c>
				{
					//온도 데이터 전역변수 temp에 저장
					sprintf(temp, "%d.%d", dht11Data.temp_byte1, dht11Data.temp_byte2);
 80018d8:	78bb      	ldrb	r3, [r7, #2]
 80018da:	461a      	mov	r2, r3
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	491f      	ldr	r1, [pc, #124]	@ (800195c <main+0x1f8>)
 80018e0:	481f      	ldr	r0, [pc, #124]	@ (8001960 <main+0x1fc>)
 80018e2:	f005 f841 	bl	8006968 <siprintf>
					//습도 데이터 전역변수 humi 에 저장
					humi = dht11Data.rh_byte1;
 80018e6:	783b      	ldrb	r3, [r7, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001964 <main+0x200>)
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	e002      	b.n	80018f6 <main+0x192>
				}
				else
					printf("DHT11 response error\r\n");
 80018f0:	481d      	ldr	r0, [pc, #116]	@ (8001968 <main+0x204>)
 80018f2:	f005 f831 	bl	8006958 <puts>
		{
			//문 열기 코드
		}

		//손님 수 카운트 코드
		if(infraredSensorData == 20)	//손님 수 감소 코드 20
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2b14      	cmp	r3, #20
 80018fa:	d105      	bne.n	8001908 <main+0x1a4>
		{
			customerCount--;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	@ (800196c <main+0x208>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3b01      	subs	r3, #1
 8001902:	4a1a      	ldr	r2, [pc, #104]	@ (800196c <main+0x208>)
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	e77c      	b.n	8001802 <main+0x9e>
		}
		else if(infraredSensorData == 30)	//손님 수 증가 코드 30
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2b1e      	cmp	r3, #30
 800190c:	f47f af79 	bne.w	8001802 <main+0x9e>
		{
			customerCount++;
 8001910:	4b16      	ldr	r3, [pc, #88]	@ (800196c <main+0x208>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3301      	adds	r3, #1
 8001916:	4a15      	ldr	r2, [pc, #84]	@ (800196c <main+0x208>)
 8001918:	6013      	str	r3, [r2, #0]
  {
 800191a:	e772      	b.n	8001802 <main+0x9e>
 800191c:	08008d70 	.word	0x08008d70
 8001920:	08008d88 	.word	0x08008d88
 8001924:	20000920 	.word	0x20000920
 8001928:	200009b0 	.word	0x200009b0
 800192c:	200009f8 	.word	0x200009f8
 8001930:	08008d9c 	.word	0x08008d9c
 8001934:	200004d0 	.word	0x200004d0
 8001938:	20000af4 	.word	0x20000af4
 800193c:	20000498 	.word	0x20000498
 8001940:	2000049c 	.word	0x2000049c
 8001944:	08008da4 	.word	0x08008da4
 8001948:	20000000 	.word	0x20000000
 800194c:	20000ad0 	.word	0x20000ad0
 8001950:	cccccccd 	.word	0xcccccccd
 8001954:	08008db4 	.word	0x08008db4
 8001958:	08008dcc 	.word	0x08008dcc
 800195c:	08008ddc 	.word	0x08008ddc
 8001960:	20000ad8 	.word	0x20000ad8
 8001964:	20000ad4 	.word	0x20000ad4
 8001968:	08008de4 	.word	0x08008de4
 800196c:	20000ae4 	.word	0x20000ae4

08001970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b094      	sub	sp, #80	@ 0x50
 8001974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001976:	f107 0320 	add.w	r3, r7, #32
 800197a:	2230      	movs	r2, #48	@ 0x30
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f005 f8ec 	bl	8006b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	4b28      	ldr	r3, [pc, #160]	@ (8001a3c <SystemClock_Config+0xcc>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199c:	4a27      	ldr	r2, [pc, #156]	@ (8001a3c <SystemClock_Config+0xcc>)
 800199e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a4:	4b25      	ldr	r3, [pc, #148]	@ (8001a3c <SystemClock_Config+0xcc>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	4b22      	ldr	r3, [pc, #136]	@ (8001a40 <SystemClock_Config+0xd0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a21      	ldr	r2, [pc, #132]	@ (8001a40 <SystemClock_Config+0xd0>)
 80019ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <SystemClock_Config+0xd0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019cc:	2301      	movs	r3, #1
 80019ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019d0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d6:	2302      	movs	r3, #2
 80019d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019e0:	2308      	movs	r3, #8
 80019e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019e4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80019e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019ea:	2304      	movs	r3, #4
 80019ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019ee:	2304      	movs	r3, #4
 80019f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f2:	f107 0320 	add.w	r3, r7, #32
 80019f6:	4618      	mov	r0, r3
 80019f8:	f002 f950 	bl	8003c9c <HAL_RCC_OscConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a02:	f000 fdf3 	bl	80025ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a06:	230f      	movs	r3, #15
 8001a08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	2102      	movs	r1, #2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f002 fbb2 	bl	800418c <HAL_RCC_ClockConfig>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a2e:	f000 fddd 	bl	80025ec <Error_Handler>
  }
}
 8001a32:	bf00      	nop
 8001a34:	3750      	adds	r7, #80	@ 0x50
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40007000 	.word	0x40007000

08001a44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a56:	4b29      	ldr	r3, [pc, #164]	@ (8001afc <MX_ADC1_Init+0xb8>)
 8001a58:	4a29      	ldr	r2, [pc, #164]	@ (8001b00 <MX_ADC1_Init+0xbc>)
 8001a5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a5c:	4b27      	ldr	r3, [pc, #156]	@ (8001afc <MX_ADC1_Init+0xb8>)
 8001a5e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a64:	4b25      	ldr	r3, [pc, #148]	@ (8001afc <MX_ADC1_Init+0xb8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a6a:	4b24      	ldr	r3, [pc, #144]	@ (8001afc <MX_ADC1_Init+0xb8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a70:	4b22      	ldr	r3, [pc, #136]	@ (8001afc <MX_ADC1_Init+0xb8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a76:	4b21      	ldr	r3, [pc, #132]	@ (8001afc <MX_ADC1_Init+0xb8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001afc <MX_ADC1_Init+0xb8>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a84:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <MX_ADC1_Init+0xb8>)
 8001a86:	4a1f      	ldr	r2, [pc, #124]	@ (8001b04 <MX_ADC1_Init+0xc0>)
 8001a88:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001afc <MX_ADC1_Init+0xb8>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a90:	4b1a      	ldr	r3, [pc, #104]	@ (8001afc <MX_ADC1_Init+0xb8>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a96:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <MX_ADC1_Init+0xb8>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a9e:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <MX_ADC1_Init+0xb8>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aa4:	4815      	ldr	r0, [pc, #84]	@ (8001afc <MX_ADC1_Init+0xb8>)
 8001aa6:	f001 f9bd 	bl	8002e24 <HAL_ADC_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ab0:	f000 fd9c 	bl	80025ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480d      	ldr	r0, [pc, #52]	@ (8001afc <MX_ADC1_Init+0xb8>)
 8001ac6:	f001 fb3d 	bl	8003144 <HAL_ADC_ConfigChannel>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ad0:	f000 fd8c 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  sConfig.Channel = ADC_CHANNEL_2;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	@ (8001afc <MX_ADC1_Init+0xb8>)
 8001ae6:	f001 fb2d 	bl	8003144 <HAL_ADC_ConfigChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001af0:	f000 fd7c 	bl	80025ec <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200008d8 	.word	0x200008d8
 8001b00:	40012000 	.word	0x40012000
 8001b04:	0f000001 	.word	0x0f000001

08001b08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b096      	sub	sp, #88	@ 0x58
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]
 8001b36:	615a      	str	r2, [r3, #20]
 8001b38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f005 f80b 	bl	8006b5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b46:	4b3e      	ldr	r3, [pc, #248]	@ (8001c40 <MX_TIM1_Init+0x138>)
 8001b48:	4a3e      	ldr	r2, [pc, #248]	@ (8001c44 <MX_TIM1_Init+0x13c>)
 8001b4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001b4c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c40 <MX_TIM1_Init+0x138>)
 8001b4e:	2253      	movs	r2, #83	@ 0x53
 8001b50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b52:	4b3b      	ldr	r3, [pc, #236]	@ (8001c40 <MX_TIM1_Init+0x138>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001b58:	4b39      	ldr	r3, [pc, #228]	@ (8001c40 <MX_TIM1_Init+0x138>)
 8001b5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b60:	4b37      	ldr	r3, [pc, #220]	@ (8001c40 <MX_TIM1_Init+0x138>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b66:	4b36      	ldr	r3, [pc, #216]	@ (8001c40 <MX_TIM1_Init+0x138>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6c:	4b34      	ldr	r3, [pc, #208]	@ (8001c40 <MX_TIM1_Init+0x138>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b72:	4833      	ldr	r0, [pc, #204]	@ (8001c40 <MX_TIM1_Init+0x138>)
 8001b74:	f002 fd2a 	bl	80045cc <HAL_TIM_Base_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b7e:	f000 fd35 	bl	80025ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b86:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b88:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	482c      	ldr	r0, [pc, #176]	@ (8001c40 <MX_TIM1_Init+0x138>)
 8001b90:	f003 f826 	bl	8004be0 <HAL_TIM_ConfigClockSource>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b9a:	f000 fd27 	bl	80025ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b9e:	4828      	ldr	r0, [pc, #160]	@ (8001c40 <MX_TIM1_Init+0x138>)
 8001ba0:	f002 fd63 	bl	800466a <HAL_TIM_PWM_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001baa:	f000 fd1f 	bl	80025ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bb6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4820      	ldr	r0, [pc, #128]	@ (8001c40 <MX_TIM1_Init+0x138>)
 8001bbe:	f003 fbd1 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001bc8:	f000 fd10 	bl	80025ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bcc:	2360      	movs	r3, #96	@ 0x60
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001be8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bec:	2200      	movs	r2, #0
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4813      	ldr	r0, [pc, #76]	@ (8001c40 <MX_TIM1_Init+0x138>)
 8001bf2:	f002 ff33 	bl	8004a5c <HAL_TIM_PWM_ConfigChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001bfc:	f000 fcf6 	bl	80025ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c18:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	4619      	mov	r1, r3
 8001c22:	4807      	ldr	r0, [pc, #28]	@ (8001c40 <MX_TIM1_Init+0x138>)
 8001c24:	f003 fc0c 	bl	8005440 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001c2e:	f000 fcdd 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c32:	4803      	ldr	r0, [pc, #12]	@ (8001c40 <MX_TIM1_Init+0x138>)
 8001c34:	f000 fdbc 	bl	80027b0 <HAL_TIM_MspPostInit>

}
 8001c38:	bf00      	nop
 8001c3a:	3758      	adds	r7, #88	@ 0x58
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000920 	.word	0x20000920
 8001c44:	40010000 	.word	0x40010000

08001c48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08e      	sub	sp, #56	@ 0x38
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5c:	f107 0320 	add.w	r3, r7, #32
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
 8001c74:	615a      	str	r2, [r3, #20]
 8001c76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c78:	4b2d      	ldr	r3, [pc, #180]	@ (8001d30 <MX_TIM2_Init+0xe8>)
 8001c7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001c80:	4b2b      	ldr	r3, [pc, #172]	@ (8001d30 <MX_TIM2_Init+0xe8>)
 8001c82:	2253      	movs	r2, #83	@ 0x53
 8001c84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c86:	4b2a      	ldr	r3, [pc, #168]	@ (8001d30 <MX_TIM2_Init+0xe8>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001c8c:	4b28      	ldr	r3, [pc, #160]	@ (8001d30 <MX_TIM2_Init+0xe8>)
 8001c8e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001c92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c94:	4b26      	ldr	r3, [pc, #152]	@ (8001d30 <MX_TIM2_Init+0xe8>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c9a:	4b25      	ldr	r3, [pc, #148]	@ (8001d30 <MX_TIM2_Init+0xe8>)
 8001c9c:	2280      	movs	r2, #128	@ 0x80
 8001c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ca0:	4823      	ldr	r0, [pc, #140]	@ (8001d30 <MX_TIM2_Init+0xe8>)
 8001ca2:	f002 fc93 	bl	80045cc <HAL_TIM_Base_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001cac:	f000 fc9e 	bl	80025ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cba:	4619      	mov	r1, r3
 8001cbc:	481c      	ldr	r0, [pc, #112]	@ (8001d30 <MX_TIM2_Init+0xe8>)
 8001cbe:	f002 ff8f 	bl	8004be0 <HAL_TIM_ConfigClockSource>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001cc8:	f000 fc90 	bl	80025ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ccc:	4818      	ldr	r0, [pc, #96]	@ (8001d30 <MX_TIM2_Init+0xe8>)
 8001cce:	f002 fccc 	bl	800466a <HAL_TIM_PWM_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001cd8:	f000 fc88 	bl	80025ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ce4:	f107 0320 	add.w	r3, r7, #32
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4811      	ldr	r0, [pc, #68]	@ (8001d30 <MX_TIM2_Init+0xe8>)
 8001cec:	f003 fb3a 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001cf6:	f000 fc79 	bl	80025ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cfa:	2360      	movs	r3, #96	@ 0x60
 8001cfc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001cfe:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001d02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	2200      	movs	r2, #0
 8001d10:	4619      	mov	r1, r3
 8001d12:	4807      	ldr	r0, [pc, #28]	@ (8001d30 <MX_TIM2_Init+0xe8>)
 8001d14:	f002 fea2 	bl	8004a5c <HAL_TIM_PWM_ConfigChannel>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001d1e:	f000 fc65 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d22:	4803      	ldr	r0, [pc, #12]	@ (8001d30 <MX_TIM2_Init+0xe8>)
 8001d24:	f000 fd44 	bl	80027b0 <HAL_TIM_MspPostInit>

}
 8001d28:	bf00      	nop
 8001d2a:	3738      	adds	r7, #56	@ 0x38
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000968 	.word	0x20000968

08001d34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08e      	sub	sp, #56	@ 0x38
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d48:	f107 0320 	add.w	r3, r7, #32
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
 8001d60:	615a      	str	r2, [r3, #20]
 8001d62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d64:	4b2c      	ldr	r3, [pc, #176]	@ (8001e18 <MX_TIM3_Init+0xe4>)
 8001d66:	4a2d      	ldr	r2, [pc, #180]	@ (8001e1c <MX_TIM3_Init+0xe8>)
 8001d68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e18 <MX_TIM3_Init+0xe4>)
 8001d6c:	2253      	movs	r2, #83	@ 0x53
 8001d6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d70:	4b29      	ldr	r3, [pc, #164]	@ (8001e18 <MX_TIM3_Init+0xe4>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001d76:	4b28      	ldr	r3, [pc, #160]	@ (8001e18 <MX_TIM3_Init+0xe4>)
 8001d78:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7e:	4b26      	ldr	r3, [pc, #152]	@ (8001e18 <MX_TIM3_Init+0xe4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d84:	4b24      	ldr	r3, [pc, #144]	@ (8001e18 <MX_TIM3_Init+0xe4>)
 8001d86:	2280      	movs	r2, #128	@ 0x80
 8001d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d8a:	4823      	ldr	r0, [pc, #140]	@ (8001e18 <MX_TIM3_Init+0xe4>)
 8001d8c:	f002 fc1e 	bl	80045cc <HAL_TIM_Base_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d96:	f000 fc29 	bl	80025ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001da0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001da4:	4619      	mov	r1, r3
 8001da6:	481c      	ldr	r0, [pc, #112]	@ (8001e18 <MX_TIM3_Init+0xe4>)
 8001da8:	f002 ff1a 	bl	8004be0 <HAL_TIM_ConfigClockSource>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001db2:	f000 fc1b 	bl	80025ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001db6:	4818      	ldr	r0, [pc, #96]	@ (8001e18 <MX_TIM3_Init+0xe4>)
 8001db8:	f002 fc57 	bl	800466a <HAL_TIM_PWM_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001dc2:	f000 fc13 	bl	80025ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dce:	f107 0320 	add.w	r3, r7, #32
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4810      	ldr	r0, [pc, #64]	@ (8001e18 <MX_TIM3_Init+0xe4>)
 8001dd6:	f003 fac5 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001de0:	f000 fc04 	bl	80025ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001de4:	2360      	movs	r3, #96	@ 0x60
 8001de6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	2200      	movs	r2, #0
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4807      	ldr	r0, [pc, #28]	@ (8001e18 <MX_TIM3_Init+0xe4>)
 8001dfc:	f002 fe2e 	bl	8004a5c <HAL_TIM_PWM_ConfigChannel>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e06:	f000 fbf1 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e0a:	4803      	ldr	r0, [pc, #12]	@ (8001e18 <MX_TIM3_Init+0xe4>)
 8001e0c:	f000 fcd0 	bl	80027b0 <HAL_TIM_MspPostInit>

}
 8001e10:	bf00      	nop
 8001e12:	3738      	adds	r7, #56	@ 0x38
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200009b0 	.word	0x200009b0
 8001e1c:	40000400 	.word	0x40000400

08001e20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08e      	sub	sp, #56	@ 0x38
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e34:	f107 0320 	add.w	r3, r7, #32
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
 8001e4c:	615a      	str	r2, [r3, #20]
 8001e4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e50:	4b2d      	ldr	r3, [pc, #180]	@ (8001f08 <MX_TIM4_Init+0xe8>)
 8001e52:	4a2e      	ldr	r2, [pc, #184]	@ (8001f0c <MX_TIM4_Init+0xec>)
 8001e54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001e56:	4b2c      	ldr	r3, [pc, #176]	@ (8001f08 <MX_TIM4_Init+0xe8>)
 8001e58:	2253      	movs	r2, #83	@ 0x53
 8001e5a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f08 <MX_TIM4_Init+0xe8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001e62:	4b29      	ldr	r3, [pc, #164]	@ (8001f08 <MX_TIM4_Init+0xe8>)
 8001e64:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e68:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6a:	4b27      	ldr	r3, [pc, #156]	@ (8001f08 <MX_TIM4_Init+0xe8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e70:	4b25      	ldr	r3, [pc, #148]	@ (8001f08 <MX_TIM4_Init+0xe8>)
 8001e72:	2280      	movs	r2, #128	@ 0x80
 8001e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e76:	4824      	ldr	r0, [pc, #144]	@ (8001f08 <MX_TIM4_Init+0xe8>)
 8001e78:	f002 fba8 	bl	80045cc <HAL_TIM_Base_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001e82:	f000 fbb3 	bl	80025ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e90:	4619      	mov	r1, r3
 8001e92:	481d      	ldr	r0, [pc, #116]	@ (8001f08 <MX_TIM4_Init+0xe8>)
 8001e94:	f002 fea4 	bl	8004be0 <HAL_TIM_ConfigClockSource>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001e9e:	f000 fba5 	bl	80025ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ea2:	4819      	ldr	r0, [pc, #100]	@ (8001f08 <MX_TIM4_Init+0xe8>)
 8001ea4:	f002 fbe1 	bl	800466a <HAL_TIM_PWM_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001eae:	f000 fb9d 	bl	80025ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001eba:	f107 0320 	add.w	r3, r7, #32
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4811      	ldr	r0, [pc, #68]	@ (8001f08 <MX_TIM4_Init+0xe8>)
 8001ec2:	f003 fa4f 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001ecc:	f000 fb8e 	bl	80025ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ed0:	2360      	movs	r3, #96	@ 0x60
 8001ed2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001ed4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001ed8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4807      	ldr	r0, [pc, #28]	@ (8001f08 <MX_TIM4_Init+0xe8>)
 8001eea:	f002 fdb7 	bl	8004a5c <HAL_TIM_PWM_ConfigChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001ef4:	f000 fb7a 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ef8:	4803      	ldr	r0, [pc, #12]	@ (8001f08 <MX_TIM4_Init+0xe8>)
 8001efa:	f000 fc59 	bl	80027b0 <HAL_TIM_MspPostInit>

}
 8001efe:	bf00      	nop
 8001f00:	3738      	adds	r7, #56	@ 0x38
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200009f8 	.word	0x200009f8
 8001f0c:	40000800 	.word	0x40000800

08001f10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f14:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f16:	4a12      	ldr	r2, [pc, #72]	@ (8001f60 <MX_USART2_UART_Init+0x50>)
 8001f18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f1a:	4b10      	ldr	r3, [pc, #64]	@ (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	@ (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f34:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f36:	220c      	movs	r2, #12
 8001f38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f40:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f46:	4805      	ldr	r0, [pc, #20]	@ (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f48:	f003 fae0 	bl	800550c <HAL_UART_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f52:	f000 fb4b 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000a40 	.word	0x20000a40
 8001f60:	40004400 	.word	0x40004400

08001f64 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f68:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <MX_USART6_UART_Init+0x4c>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	@ (8001fb4 <MX_USART6_UART_Init+0x50>)
 8001f6c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8001f6e:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <MX_USART6_UART_Init+0x4c>)
 8001f70:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001f74:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <MX_USART6_UART_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <MX_USART6_UART_Init+0x4c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <MX_USART6_UART_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f88:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <MX_USART6_UART_Init+0x4c>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <MX_USART6_UART_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <MX_USART6_UART_Init+0x4c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f9a:	4805      	ldr	r0, [pc, #20]	@ (8001fb0 <MX_USART6_UART_Init+0x4c>)
 8001f9c:	f003 fab6 	bl	800550c <HAL_UART_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001fa6:	f000 fb21 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000a88 	.word	0x20000a88
 8001fb4:	40011400 	.word	0x40011400

08001fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	@ 0x28
 8001fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	4b46      	ldr	r3, [pc, #280]	@ (80020ec <MX_GPIO_Init+0x134>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	4a45      	ldr	r2, [pc, #276]	@ (80020ec <MX_GPIO_Init+0x134>)
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fde:	4b43      	ldr	r3, [pc, #268]	@ (80020ec <MX_GPIO_Init+0x134>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b3f      	ldr	r3, [pc, #252]	@ (80020ec <MX_GPIO_Init+0x134>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	4a3e      	ldr	r2, [pc, #248]	@ (80020ec <MX_GPIO_Init+0x134>)
 8001ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffa:	4b3c      	ldr	r3, [pc, #240]	@ (80020ec <MX_GPIO_Init+0x134>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	4b38      	ldr	r3, [pc, #224]	@ (80020ec <MX_GPIO_Init+0x134>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	4a37      	ldr	r2, [pc, #220]	@ (80020ec <MX_GPIO_Init+0x134>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6313      	str	r3, [r2, #48]	@ 0x30
 8002016:	4b35      	ldr	r3, [pc, #212]	@ (80020ec <MX_GPIO_Init+0x134>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	4b31      	ldr	r3, [pc, #196]	@ (80020ec <MX_GPIO_Init+0x134>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	4a30      	ldr	r2, [pc, #192]	@ (80020ec <MX_GPIO_Init+0x134>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	6313      	str	r3, [r2, #48]	@ 0x30
 8002032:	4b2e      	ldr	r3, [pc, #184]	@ (80020ec <MX_GPIO_Init+0x134>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800203e:	2200      	movs	r2, #0
 8002040:	2120      	movs	r1, #32
 8002042:	482b      	ldr	r0, [pc, #172]	@ (80020f0 <MX_GPIO_Init+0x138>)
 8002044:	f001 fdec 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8002048:	2200      	movs	r2, #0
 800204a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800204e:	4829      	ldr	r0, [pc, #164]	@ (80020f4 <MX_GPIO_Init+0x13c>)
 8002050:	f001 fde6 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002054:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800205a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800205e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4619      	mov	r1, r3
 800206a:	4822      	ldr	r0, [pc, #136]	@ (80020f4 <MX_GPIO_Init+0x13c>)
 800206c:	f001 fc3c 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0_EXTI0_BUTTON_Pin */
  GPIO_InitStruct.Pin = PC0_EXTI0_BUTTON_Pin;
 8002070:	2301      	movs	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002074:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PC0_EXTI0_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	481b      	ldr	r0, [pc, #108]	@ (80020f4 <MX_GPIO_Init+0x13c>)
 8002086:	f001 fc2f 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800208a:	2320      	movs	r3, #32
 800208c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208e:	2301      	movs	r3, #1
 8002090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	4813      	ldr	r0, [pc, #76]	@ (80020f0 <MX_GPIO_Init+0x138>)
 80020a2:	f001 fc21 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80020a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ac:	2301      	movs	r3, #1
 80020ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	4619      	mov	r1, r3
 80020be:	480d      	ldr	r0, [pc, #52]	@ (80020f4 <MX_GPIO_Init+0x13c>)
 80020c0:	f001 fc12 	bl	80038e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2100      	movs	r1, #0
 80020c8:	2006      	movs	r0, #6
 80020ca:	f001 fb44 	bl	8003756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020ce:	2006      	movs	r0, #6
 80020d0:	f001 fb5d 	bl	800378e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020d4:	2200      	movs	r2, #0
 80020d6:	2100      	movs	r1, #0
 80020d8:	2028      	movs	r0, #40	@ 0x28
 80020da:	f001 fb3c 	bl	8003756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020de:	2028      	movs	r0, #40	@ 0x28
 80020e0:	f001 fb55 	bl	800378e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80020e4:	bf00      	nop
 80020e6:	3728      	adds	r7, #40	@ 0x28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40020000 	.word	0x40020000
 80020f4:	40020800 	.word	0x40020800

080020f8 <esp_event>:
void MX_GPIO_LED_OFF(int pin)
{
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
}
void esp_event(char * recvBuf)
{
 80020f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fa:	b0a1      	sub	sp, #132	@ 0x84
 80020fc:	af06      	add	r7, sp, #24
 80020fe:	6078      	str	r0, [r7, #4]
  int i=0;
 8002100:	2300      	movs	r3, #0
 8002102:	667b      	str	r3, [r7, #100]	@ 0x64
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8002104:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 8002114:	f107 030c 	add.w	r3, r7, #12
 8002118:	2240      	movs	r2, #64	@ 0x40
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f004 fd1d 	bl	8006b5c <memset>

  strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7fe f866 	bl	80001f4 <strlen>
 8002128:	4603      	mov	r3, r0
 800212a:	3b01      	subs	r3, #1
 800212c:	4a77      	ldr	r2, [pc, #476]	@ (800230c <esp_event+0x214>)
 800212e:	2100      	movs	r1, #0
 8002130:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4876      	ldr	r0, [pc, #472]	@ (8002310 <esp_event+0x218>)
 8002136:	f004 fb9f 	bl	8006878 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 800213a:	4976      	ldr	r1, [pc, #472]	@ (8002314 <esp_event+0x21c>)
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f004 fd35 	bl	8006bac <strtok>
 8002142:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8002144:	e011      	b.n	800216a <esp_event+0x72>
  {
    pArray[i] = pToken;
 8002146:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	3368      	adds	r3, #104	@ 0x68
 800214c:	443b      	add	r3, r7
 800214e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002150:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 8002154:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002156:	3301      	adds	r3, #1
 8002158:	667b      	str	r3, [r7, #100]	@ 0x64
 800215a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800215c:	2b04      	cmp	r3, #4
 800215e:	dc08      	bgt.n	8002172 <esp_event+0x7a>
      break;
    pToken = strtok(NULL,"[@]");
 8002160:	496c      	ldr	r1, [pc, #432]	@ (8002314 <esp_event+0x21c>)
 8002162:	2000      	movs	r0, #0
 8002164:	f004 fd22 	bl	8006bac <strtok>
 8002168:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 800216a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1ea      	bne.n	8002146 <esp_event+0x4e>
 8002170:	e000      	b.n	8002174 <esp_event+0x7c>
      break;
 8002172:	bf00      	nop
  }

  if(!strcmp(pArray[1], "ALLSTOP"))
 8002174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002176:	4968      	ldr	r1, [pc, #416]	@ (8002318 <esp_event+0x220>)
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe f831 	bl	80001e0 <strcmp>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10e      	bne.n	80021a2 <esp_event+0xaa>
  {
	  if(!strcmp(pArray[2], "ON"))
 8002184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002186:	4965      	ldr	r1, [pc, #404]	@ (800231c <esp_event+0x224>)
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe f829 	bl	80001e0 <strcmp>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 80ae 	beq.w	80022f2 <esp_event+0x1fa>
	  {
		  //모든 장치 정지 명령 내리기(모든 플래그 True로)
	  }
	  else if(!strcmp(pArray[2], "OFF"))
 8002196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002198:	4961      	ldr	r1, [pc, #388]	@ (8002320 <esp_event+0x228>)
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe f820 	bl	80001e0 <strcmp>
 80021a0:	e0a7      	b.n	80022f2 <esp_event+0x1fa>
	  {
		  //모든 장치 정지 명령 취소(모든 플래그 false로)
	  }
  }
  else if(!strcmp(pArray[1], "STATE"))
 80021a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021a4:	495f      	ldr	r1, [pc, #380]	@ (8002324 <esp_event+0x22c>)
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe f81a 	bl	80001e0 <strcmp>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d11d      	bne.n	80021ee <esp_event+0xf6>
  {
	  //현재 매장의 상태 전송하기
	 sprintf(sendBuf, "[%s]%s@%s@%d@%d@%d@%d@%d\n", pArray[0], pArray[1], temp, humi, ledState, lockState, customerCount, fanSpeed);
 80021b2:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 80021b4:	6d3e      	ldr	r6, [r7, #80]	@ 0x50
 80021b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002328 <esp_event+0x230>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a5c      	ldr	r2, [pc, #368]	@ (800232c <esp_event+0x234>)
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	495c      	ldr	r1, [pc, #368]	@ (8002330 <esp_event+0x238>)
 80021c0:	7809      	ldrb	r1, [r1, #0]
 80021c2:	6039      	str	r1, [r7, #0]
 80021c4:	495b      	ldr	r1, [pc, #364]	@ (8002334 <esp_event+0x23c>)
 80021c6:	6809      	ldr	r1, [r1, #0]
 80021c8:	485b      	ldr	r0, [pc, #364]	@ (8002338 <esp_event+0x240>)
 80021ca:	6800      	ldr	r0, [r0, #0]
 80021cc:	f107 040c 	add.w	r4, r7, #12
 80021d0:	9005      	str	r0, [sp, #20]
 80021d2:	9104      	str	r1, [sp, #16]
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	9103      	str	r1, [sp, #12]
 80021d8:	9202      	str	r2, [sp, #8]
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	4b57      	ldr	r3, [pc, #348]	@ (800233c <esp_event+0x244>)
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	4633      	mov	r3, r6
 80021e2:	462a      	mov	r2, r5
 80021e4:	4956      	ldr	r1, [pc, #344]	@ (8002340 <esp_event+0x248>)
 80021e6:	4620      	mov	r0, r4
 80021e8:	f004 fbbe 	bl	8006968 <siprintf>
 80021ec:	e081      	b.n	80022f2 <esp_event+0x1fa>
  }
  else if(!strcmp(pArray[1], "FAN"))	//팬 회전수 0~1000
 80021ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021f0:	4954      	ldr	r1, [pc, #336]	@ (8002344 <esp_event+0x24c>)
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fd fff4 	bl	80001e0 <strcmp>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d117      	bne.n	800222e <esp_event+0x136>
  {
	  fanSpeed = atoi(pArray[2]);
 80021fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002200:	4618      	mov	r0, r3
 8002202:	f004 f9ef 	bl	80065e4 <atoi>
 8002206:	4603      	mov	r3, r0
 8002208:	4a4b      	ldr	r2, [pc, #300]	@ (8002338 <esp_event+0x240>)
 800220a:	6013      	str	r3, [r2, #0]
	  fanControl(fanSpeed);
 800220c:	4b4a      	ldr	r3, [pc, #296]	@ (8002338 <esp_event+0x240>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f000 f8e7 	bl	80023e4 <fanControl>
	  sprintf(sendBuf, "[%s]%s@%d\n", pArray[0], pArray[1], fanSpeed);
 8002216:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002218:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800221a:	4b47      	ldr	r3, [pc, #284]	@ (8002338 <esp_event+0x240>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f107 000c 	add.w	r0, r7, #12
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	460b      	mov	r3, r1
 8002226:	4948      	ldr	r1, [pc, #288]	@ (8002348 <esp_event+0x250>)
 8002228:	f004 fb9e 	bl	8006968 <siprintf>
 800222c:	e061      	b.n	80022f2 <esp_event+0x1fa>
  }
  else if(!strcmp(pArray[1], "DHTSTATE"))	//온습도 보내기
 800222e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002230:	4946      	ldr	r1, [pc, #280]	@ (800234c <esp_event+0x254>)
 8002232:	4618      	mov	r0, r3
 8002234:	f7fd ffd4 	bl	80001e0 <strcmp>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10d      	bne.n	800225a <esp_event+0x162>
  {
	  sprintf(sendBuf, "[%s]%s@%s@%d\n", pArray[0], pArray[1], temp, humi);
 800223e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002240:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002242:	4b39      	ldr	r3, [pc, #228]	@ (8002328 <esp_event+0x230>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f107 000c 	add.w	r0, r7, #12
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	4b3b      	ldr	r3, [pc, #236]	@ (800233c <esp_event+0x244>)
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	460b      	mov	r3, r1
 8002252:	493f      	ldr	r1, [pc, #252]	@ (8002350 <esp_event+0x258>)
 8002254:	f004 fb88 	bl	8006968 <siprintf>
 8002258:	e04b      	b.n	80022f2 <esp_event+0x1fa>
  }
  else if(!strcmp(pArray[1], "LED"))	//[매장명]LED@pArray[2]or[State]@
 800225a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800225c:	493d      	ldr	r1, [pc, #244]	@ (8002354 <esp_event+0x25c>)
 800225e:	4618      	mov	r0, r3
 8002260:	f7fd ffbe 	bl	80001e0 <strcmp>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d12e      	bne.n	80022c8 <esp_event+0x1d0>
  {
	  if(!strcmp(pArray[2], "STATE"))
 800226a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800226c:	492d      	ldr	r1, [pc, #180]	@ (8002324 <esp_event+0x22c>)
 800226e:	4618      	mov	r0, r3
 8002270:	f7fd ffb6 	bl	80001e0 <strcmp>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10e      	bne.n	8002298 <esp_event+0x1a0>
	  {
		  sprintf(sendBuf, "[%s]%s@%s@%d\n", pArray[0], pArray[1], pArray[2], ledState);
 800227a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800227c:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 800227e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002280:	4a2a      	ldr	r2, [pc, #168]	@ (800232c <esp_event+0x234>)
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	f107 000c 	add.w	r0, r7, #12
 8002288:	9201      	str	r2, [sp, #4]
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	4623      	mov	r3, r4
 800228e:	460a      	mov	r2, r1
 8002290:	492f      	ldr	r1, [pc, #188]	@ (8002350 <esp_event+0x258>)
 8002292:	f004 fb69 	bl	8006968 <siprintf>
 8002296:	e02c      	b.n	80022f2 <esp_event+0x1fa>
	  }
	  else
	  {
		  ledControl(atoi(pArray[2]));
 8002298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800229a:	4618      	mov	r0, r3
 800229c:	f004 f9a2 	bl	80065e4 <atoi>
 80022a0:	4603      	mov	r3, r0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f8b8 	bl	8002418 <ledControl>
		  sprintf(sendBuf, "[%s]%s@%d\n", pArray[0], pArray[1], atoi(pArray[2]));
 80022a8:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 80022aa:	6d3d      	ldr	r5, [r7, #80]	@ 0x50
 80022ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ae:	4618      	mov	r0, r3
 80022b0:	f004 f998 	bl	80065e4 <atoi>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f107 000c 	add.w	r0, r7, #12
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	462b      	mov	r3, r5
 80022be:	4622      	mov	r2, r4
 80022c0:	4921      	ldr	r1, [pc, #132]	@ (8002348 <esp_event+0x250>)
 80022c2:	f004 fb51 	bl	8006968 <siprintf>
 80022c6:	e014      	b.n	80022f2 <esp_event+0x1fa>
	  }
  }
  else if(!strncmp(pArray[1]," New conn",8))
 80022c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022ca:	2208      	movs	r2, #8
 80022cc:	4922      	ldr	r1, [pc, #136]	@ (8002358 <esp_event+0x260>)
 80022ce:	4618      	mov	r0, r3
 80022d0:	f004 fc59 	bl	8006b86 <strncmp>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d011      	beq.n	80022fe <esp_event+0x206>
  {
//	   printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
     return;
  }
  else if(!strncmp(pArray[1]," Already log",8))
 80022da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022dc:	2208      	movs	r2, #8
 80022de:	491f      	ldr	r1, [pc, #124]	@ (800235c <esp_event+0x264>)
 80022e0:	4618      	mov	r0, r3
 80022e2:	f004 fc50 	bl	8006b86 <strncmp>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10a      	bne.n	8002302 <esp_event+0x20a>
  {
// 	    printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
	  esp_client_conn();
 80022ec:	f7ff f8b8 	bl	8001460 <esp_client_conn>
      return;
 80022f0:	e008      	b.n	8002304 <esp_event+0x20c>
  }
  else
      return;

  esp_send_data(sendBuf);
 80022f2:	f107 030c 	add.w	r3, r7, #12
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff f9da 	bl	80016b0 <esp_send_data>
 80022fc:	e002      	b.n	8002304 <esp_event+0x20c>
     return;
 80022fe:	bf00      	nop
 8002300:	e000      	b.n	8002304 <esp_event+0x20c>
      return;
 8002302:	bf00      	nop
//  printf("Debug send : %s\r\n",sendBuf);
}
 8002304:	376c      	adds	r7, #108	@ 0x6c
 8002306:	46bd      	mov	sp, r7
 8002308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800230a:	bf00      	nop
 800230c:	20000af4 	.word	0x20000af4
 8002310:	08008dfc 	.word	0x08008dfc
 8002314:	08008e10 	.word	0x08008e10
 8002318:	08008e14 	.word	0x08008e14
 800231c:	08008e1c 	.word	0x08008e1c
 8002320:	08008e20 	.word	0x08008e20
 8002324:	08008e24 	.word	0x08008e24
 8002328:	20000ad4 	.word	0x20000ad4
 800232c:	20000ae8 	.word	0x20000ae8
 8002330:	20000af0 	.word	0x20000af0
 8002334:	20000ae4 	.word	0x20000ae4
 8002338:	20000aec 	.word	0x20000aec
 800233c:	20000ad8 	.word	0x20000ad8
 8002340:	08008e2c 	.word	0x08008e2c
 8002344:	08008e48 	.word	0x08008e48
 8002348:	08008e4c 	.word	0x08008e4c
 800234c:	08008e58 	.word	0x08008e58
 8002350:	08008e64 	.word	0x08008e64
 8002354:	08008e74 	.word	0x08008e74
 8002358:	08008e78 	.word	0x08008e78
 800235c:	08008e84 	.word	0x08008e84

08002360 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		//1ms 마다 호출
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 8002368:	4b0d      	ldr	r3, [pc, #52]	@ (80023a0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	4a0c      	ldr	r2, [pc, #48]	@ (80023a0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002370:	6013      	str	r3, [r2, #0]
	if(tim3Cnt >= 1000) //1ms * 1000 = 1Sec
 8002372:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800237a:	db0a      	blt.n	8002392 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 800237c:	4b09      	ldr	r3, [pc, #36]	@ (80023a4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 8002382:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	3301      	adds	r3, #1
 8002388:	4a07      	ldr	r2, [pc, #28]	@ (80023a8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800238a:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 800238c:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
	}
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000b34 	.word	0x20000b34
 80023a4:	20000000 	.word	0x20000000
 80023a8:	20000ad0 	.word	0x20000ad0

080023ac <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	69b9      	ldr	r1, [r7, #24]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	1a8a      	subs	r2, r1, r2
 80023c6:	fb03 f202 	mul.w	r2, r3, r2
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	1acb      	subs	r3, r1, r3
 80023d0:	fb92 f2f3 	sdiv	r2, r2, r3
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4413      	add	r3, r2
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <fanControl>:

void fanControl(int fanSpeed)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	if (!fanFlag)	//플래그들은 0일 때만 동작을 의미함.
 80023ec:	4b08      	ldr	r3, [pc, #32]	@ (8002410 <fanControl+0x2c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	f083 0301 	eor.w	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <fanControl+0x1e>
	{
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1, fanSpeed);
 80023fa:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <fanControl+0x30>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000af1 	.word	0x20000af1
 8002414:	200009f8 	.word	0x200009f8

08002418 <ledControl>:

void ledControl(int bright)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af02      	add	r7, sp, #8
 800241e:	6078      	str	r0, [r7, #4]
	ledState = bright;	//전역변수에 저장
 8002420:	4a0a      	ldr	r2, [pc, #40]	@ (800244c <ledControl+0x34>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6013      	str	r3, [r2, #0]
	int realLedState = map(bright, 0, 100, 0, 1000);	//써지는 실제값
 8002426:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2300      	movs	r3, #0
 800242e:	2264      	movs	r2, #100	@ 0x64
 8002430:	2100      	movs	r1, #0
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ffba 	bl	80023ac <map>
 8002438:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1, realLedState);
 800243a:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <ledControl+0x38>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000ae8 	.word	0x20000ae8
 8002450:	20000920 	.word	0x20000920
 8002454:	00000000 	.word	0x00000000

08002458 <infraredSensor>:

int infraredSensor(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
  {
	  float distance;
	  uint32_t sensorReadTime;
  } Data;

  Data outDoorSensor = {0.0, 0};
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
  Data inDoorSensor  = {0.0, 0};
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	603b      	str	r3, [r7, #0]
 800246e:	2300      	movs	r3, #0
 8002470:	607b      	str	r3, [r7, #4]

   uint32_t adcValue = Read_ADC_Channel(ADC_CHANNEL_0);
 8002472:	2000      	movs	r0, #0
 8002474:	f000 f890 	bl	8002598 <Read_ADC_Channel>
 8002478:	6178      	str	r0, [r7, #20]
   outDoorSensor.sensorReadTime = HAL_GetTick();
 800247a:	f000 fca3 	bl	8002dc4 <HAL_GetTick>
 800247e:	4603      	mov	r3, r0
 8002480:	60fb      	str	r3, [r7, #12]
   // adc chennel1 값을 전압으로 변환
   float voltage = (adcValue / 4095.0f) * 3.3f; // 12-bit ADC의 최대 값은 4095
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	ee07 3a90 	vmov	s15, r3
 8002488:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800248c:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8002590 <infraredSensor+0x138>
 8002490:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002494:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8002594 <infraredSensor+0x13c>
 8002498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800249c:	edc7 7a04 	vstr	s15, [r7, #16]

   // outDoorSensor 거리 계산 (센서의 특성에 따라 조정)
   outDoorSensor.distance = 27.86f / pow(voltage, 1.15f);
 80024a0:	6938      	ldr	r0, [r7, #16]
 80024a2:	f7fe f869 	bl	8000578 <__aeabi_f2d>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	ed9f 1b35 	vldr	d1, [pc, #212]	@ 8002580 <infraredSensor+0x128>
 80024ae:	ec43 2b10 	vmov	d0, r2, r3
 80024b2:	f005 fbdd 	bl	8007c70 <pow>
 80024b6:	ec53 2b10 	vmov	r2, r3, d0
 80024ba:	a133      	add	r1, pc, #204	@ (adr r1, 8002588 <infraredSensor+0x130>)
 80024bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024c0:	f7fe f9dc 	bl	800087c <__aeabi_ddiv>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	f7fe fb5c 	bl	8000b88 <__aeabi_d2f>
 80024d0:	4603      	mov	r3, r0
 80024d2:	60bb      	str	r3, [r7, #8]

   adcValue = Read_ADC_Channel(ADC_CHANNEL_1);
 80024d4:	2001      	movs	r0, #1
 80024d6:	f000 f85f 	bl	8002598 <Read_ADC_Channel>
 80024da:	6178      	str	r0, [r7, #20]
   inDoorSensor.sensorReadTime = HAL_GetTick();
 80024dc:	f000 fc72 	bl	8002dc4 <HAL_GetTick>
 80024e0:	4603      	mov	r3, r0
 80024e2:	607b      	str	r3, [r7, #4]
   // adc chennel1 값을 전압으로 변환
   voltage = (adcValue / 4095.0f) * 3.3f; // 12-bit ADC의 최대 값은 4095
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	ee07 3a90 	vmov	s15, r3
 80024ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024ee:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002590 <infraredSensor+0x138>
 80024f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024f6:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002594 <infraredSensor+0x13c>
 80024fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024fe:	edc7 7a04 	vstr	s15, [r7, #16]

   // outDoorSensor 거리 계산 (센서의 특성에 따라 조정)
   inDoorSensor.distance = 27.86f / pow(voltage, 1.15f);
 8002502:	6938      	ldr	r0, [r7, #16]
 8002504:	f7fe f838 	bl	8000578 <__aeabi_f2d>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8002580 <infraredSensor+0x128>
 8002510:	ec43 2b10 	vmov	d0, r2, r3
 8002514:	f005 fbac 	bl	8007c70 <pow>
 8002518:	ec53 2b10 	vmov	r2, r3, d0
 800251c:	a11a      	add	r1, pc, #104	@ (adr r1, 8002588 <infraredSensor+0x130>)
 800251e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002522:	f7fe f9ab 	bl	800087c <__aeabi_ddiv>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	f7fe fb2b 	bl	8000b88 <__aeabi_d2f>
 8002532:	4603      	mov	r3, r0
 8002534:	603b      	str	r3, [r7, #0]

  if(outDoorSensor.distance < 30 || inDoorSensor.distance < 30)
 8002536:	edd7 7a02 	vldr	s15, [r7, #8]
 800253a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800253e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002546:	d408      	bmi.n	800255a <infraredSensor+0x102>
 8002548:	edd7 7a00 	vldr	s15, [r7]
 800254c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	d501      	bpl.n	800255e <infraredSensor+0x106>
  {
	  return 10;	//문열림 코드 10
 800255a:	230a      	movs	r3, #10
 800255c:	e00b      	b.n	8002576 <infraredSensor+0x11e>
  }
  else if(outDoorSensor.sensorReadTime > inDoorSensor.sensorReadTime)
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	429a      	cmp	r2, r3
 8002564:	d901      	bls.n	800256a <infraredSensor+0x112>
  {
	  return 20;	//손님 수 줄어듬 코드 20
 8002566:	2314      	movs	r3, #20
 8002568:	e005      	b.n	8002576 <infraredSensor+0x11e>
  }
  else if(inDoorSensor.sensorReadTime > outDoorSensor.sensorReadTime)
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	429a      	cmp	r2, r3
 8002570:	d901      	bls.n	8002576 <infraredSensor+0x11e>
  {
	  return 30; 	//손님 수 증가 코드 30
 8002572:	231e      	movs	r3, #30
 8002574:	e7ff      	b.n	8002576 <infraredSensor+0x11e>
  }
}
 8002576:	4618      	mov	r0, r3
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	60000000 	.word	0x60000000
 8002584:	3ff26666 	.word	0x3ff26666
 8002588:	00000000 	.word	0x00000000
 800258c:	403bdc29 	.word	0x403bdc29
 8002590:	457ff000 	.word	0x457ff000
 8002594:	40533333 	.word	0x40533333

08002598 <Read_ADC_Channel>:

uint32_t Read_ADC_Channel(uint32_t channel) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 80025a0:	f107 0308 	add.w	r3, r7, #8
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]

    sConfig.Channel = channel;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 80025b2:	2301      	movs	r3, #1
 80025b4:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES; // 샘플링 시간 설정
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	4619      	mov	r1, r3
 80025c0:	4809      	ldr	r0, [pc, #36]	@ (80025e8 <Read_ADC_Channel+0x50>)
 80025c2:	f000 fdbf 	bl	8003144 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc1); // ADC 변환 시작
 80025c6:	4808      	ldr	r0, [pc, #32]	@ (80025e8 <Read_ADC_Channel+0x50>)
 80025c8:	f000 fc70 	bl	8002eac <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // 변환 완료 대기
 80025cc:	f04f 31ff 	mov.w	r1, #4294967295
 80025d0:	4805      	ldr	r0, [pc, #20]	@ (80025e8 <Read_ADC_Channel+0x50>)
 80025d2:	f000 fd1f 	bl	8003014 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1); // 변환된 값 반환
 80025d6:	4804      	ldr	r0, [pc, #16]	@ (80025e8 <Read_ADC_Channel+0x50>)
 80025d8:	f000 fda7 	bl	800312a <HAL_ADC_GetValue>
 80025dc:	4603      	mov	r3, r0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200008d8 	.word	0x200008d8

080025ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025f0:	b672      	cpsid	i
}
 80025f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025f4:	bf00      	nop
 80025f6:	e7fd      	b.n	80025f4 <Error_Handler+0x8>

080025f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <HAL_MspInit+0x4c>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	4a0f      	ldr	r2, [pc, #60]	@ (8002644 <HAL_MspInit+0x4c>)
 8002608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800260c:	6453      	str	r3, [r2, #68]	@ 0x44
 800260e:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <HAL_MspInit+0x4c>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <HAL_MspInit+0x4c>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	4a08      	ldr	r2, [pc, #32]	@ (8002644 <HAL_MspInit+0x4c>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002628:	6413      	str	r3, [r2, #64]	@ 0x40
 800262a:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <HAL_MspInit+0x4c>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002636:	2007      	movs	r0, #7
 8002638:	f001 f882 	bl	8003740 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40023800 	.word	0x40023800

08002648 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	@ 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a17      	ldr	r2, [pc, #92]	@ (80026c4 <HAL_ADC_MspInit+0x7c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d127      	bne.n	80026ba <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	4b16      	ldr	r3, [pc, #88]	@ (80026c8 <HAL_ADC_MspInit+0x80>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002672:	4a15      	ldr	r2, [pc, #84]	@ (80026c8 <HAL_ADC_MspInit+0x80>)
 8002674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002678:	6453      	str	r3, [r2, #68]	@ 0x44
 800267a:	4b13      	ldr	r3, [pc, #76]	@ (80026c8 <HAL_ADC_MspInit+0x80>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b0f      	ldr	r3, [pc, #60]	@ (80026c8 <HAL_ADC_MspInit+0x80>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	4a0e      	ldr	r2, [pc, #56]	@ (80026c8 <HAL_ADC_MspInit+0x80>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6313      	str	r3, [r2, #48]	@ 0x30
 8002696:	4b0c      	ldr	r3, [pc, #48]	@ (80026c8 <HAL_ADC_MspInit+0x80>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026a2:	2303      	movs	r3, #3
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026a6:	2303      	movs	r3, #3
 80026a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	4619      	mov	r1, r3
 80026b4:	4805      	ldr	r0, [pc, #20]	@ (80026cc <HAL_ADC_MspInit+0x84>)
 80026b6:	f001 f917 	bl	80038e8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80026ba:	bf00      	nop
 80026bc:	3728      	adds	r7, #40	@ 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40012000 	.word	0x40012000
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40020000 	.word	0x40020000

080026d0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a30      	ldr	r2, [pc, #192]	@ (80027a0 <HAL_TIM_Base_MspInit+0xd0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d10e      	bne.n	8002700 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	4b2f      	ldr	r3, [pc, #188]	@ (80027a4 <HAL_TIM_Base_MspInit+0xd4>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ea:	4a2e      	ldr	r2, [pc, #184]	@ (80027a4 <HAL_TIM_Base_MspInit+0xd4>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026f2:	4b2c      	ldr	r3, [pc, #176]	@ (80027a4 <HAL_TIM_Base_MspInit+0xd4>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80026fe:	e04a      	b.n	8002796 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002708:	d10e      	bne.n	8002728 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	4b25      	ldr	r3, [pc, #148]	@ (80027a4 <HAL_TIM_Base_MspInit+0xd4>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	4a24      	ldr	r2, [pc, #144]	@ (80027a4 <HAL_TIM_Base_MspInit+0xd4>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6413      	str	r3, [r2, #64]	@ 0x40
 800271a:	4b22      	ldr	r3, [pc, #136]	@ (80027a4 <HAL_TIM_Base_MspInit+0xd4>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
}
 8002726:	e036      	b.n	8002796 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a1e      	ldr	r2, [pc, #120]	@ (80027a8 <HAL_TIM_Base_MspInit+0xd8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d116      	bne.n	8002760 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	4b1b      	ldr	r3, [pc, #108]	@ (80027a4 <HAL_TIM_Base_MspInit+0xd4>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273a:	4a1a      	ldr	r2, [pc, #104]	@ (80027a4 <HAL_TIM_Base_MspInit+0xd4>)
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	6413      	str	r3, [r2, #64]	@ 0x40
 8002742:	4b18      	ldr	r3, [pc, #96]	@ (80027a4 <HAL_TIM_Base_MspInit+0xd4>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	201d      	movs	r0, #29
 8002754:	f000 ffff 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002758:	201d      	movs	r0, #29
 800275a:	f001 f818 	bl	800378e <HAL_NVIC_EnableIRQ>
}
 800275e:	e01a      	b.n	8002796 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a11      	ldr	r2, [pc, #68]	@ (80027ac <HAL_TIM_Base_MspInit+0xdc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d115      	bne.n	8002796 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	4b0d      	ldr	r3, [pc, #52]	@ (80027a4 <HAL_TIM_Base_MspInit+0xd4>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	4a0c      	ldr	r2, [pc, #48]	@ (80027a4 <HAL_TIM_Base_MspInit+0xd4>)
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	6413      	str	r3, [r2, #64]	@ 0x40
 800277a:	4b0a      	ldr	r3, [pc, #40]	@ (80027a4 <HAL_TIM_Base_MspInit+0xd4>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002786:	2200      	movs	r2, #0
 8002788:	2100      	movs	r1, #0
 800278a:	201e      	movs	r0, #30
 800278c:	f000 ffe3 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002790:	201e      	movs	r0, #30
 8002792:	f000 fffc 	bl	800378e <HAL_NVIC_EnableIRQ>
}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40010000 	.word	0x40010000
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40000400 	.word	0x40000400
 80027ac:	40000800 	.word	0x40000800

080027b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08c      	sub	sp, #48	@ 0x30
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a49      	ldr	r2, [pc, #292]	@ (80028f4 <HAL_TIM_MspPostInit+0x144>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d11f      	bne.n	8002812 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	4b48      	ldr	r3, [pc, #288]	@ (80028f8 <HAL_TIM_MspPostInit+0x148>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	4a47      	ldr	r2, [pc, #284]	@ (80028f8 <HAL_TIM_MspPostInit+0x148>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e2:	4b45      	ldr	r3, [pc, #276]	@ (80028f8 <HAL_TIM_MspPostInit+0x148>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	2300      	movs	r3, #0
 80027fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002800:	2301      	movs	r3, #1
 8002802:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002804:	f107 031c 	add.w	r3, r7, #28
 8002808:	4619      	mov	r1, r3
 800280a:	483c      	ldr	r0, [pc, #240]	@ (80028fc <HAL_TIM_MspPostInit+0x14c>)
 800280c:	f001 f86c 	bl	80038e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002810:	e06b      	b.n	80028ea <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800281a:	d11f      	bne.n	800285c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	4b35      	ldr	r3, [pc, #212]	@ (80028f8 <HAL_TIM_MspPostInit+0x148>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002824:	4a34      	ldr	r2, [pc, #208]	@ (80028f8 <HAL_TIM_MspPostInit+0x148>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6313      	str	r3, [r2, #48]	@ 0x30
 800282c:	4b32      	ldr	r3, [pc, #200]	@ (80028f8 <HAL_TIM_MspPostInit+0x148>)
 800282e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SERVO_Pin;
 8002838:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800283c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800284a:	2301      	movs	r3, #1
 800284c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 800284e:	f107 031c 	add.w	r3, r7, #28
 8002852:	4619      	mov	r1, r3
 8002854:	4829      	ldr	r0, [pc, #164]	@ (80028fc <HAL_TIM_MspPostInit+0x14c>)
 8002856:	f001 f847 	bl	80038e8 <HAL_GPIO_Init>
}
 800285a:	e046      	b.n	80028ea <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a27      	ldr	r2, [pc, #156]	@ (8002900 <HAL_TIM_MspPostInit+0x150>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d11e      	bne.n	80028a4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	4b23      	ldr	r3, [pc, #140]	@ (80028f8 <HAL_TIM_MspPostInit+0x148>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	4a22      	ldr	r2, [pc, #136]	@ (80028f8 <HAL_TIM_MspPostInit+0x148>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	6313      	str	r3, [r2, #48]	@ 0x30
 8002876:	4b20      	ldr	r3, [pc, #128]	@ (80028f8 <HAL_TIM_MspPostInit+0x148>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002882:	2340      	movs	r3, #64	@ 0x40
 8002884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002892:	2302      	movs	r3, #2
 8002894:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002896:	f107 031c 	add.w	r3, r7, #28
 800289a:	4619      	mov	r1, r3
 800289c:	4817      	ldr	r0, [pc, #92]	@ (80028fc <HAL_TIM_MspPostInit+0x14c>)
 800289e:	f001 f823 	bl	80038e8 <HAL_GPIO_Init>
}
 80028a2:	e022      	b.n	80028ea <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a16      	ldr	r2, [pc, #88]	@ (8002904 <HAL_TIM_MspPostInit+0x154>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d11d      	bne.n	80028ea <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <HAL_TIM_MspPostInit+0x148>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	4a10      	ldr	r2, [pc, #64]	@ (80028f8 <HAL_TIM_MspPostInit+0x148>)
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028be:	4b0e      	ldr	r3, [pc, #56]	@ (80028f8 <HAL_TIM_MspPostInit+0x148>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_fanMotor_Pin;
 80028ca:	2340      	movs	r3, #64	@ 0x40
 80028cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2300      	movs	r3, #0
 80028d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028da:	2302      	movs	r3, #2
 80028dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM4_fanMotor_GPIO_Port, &GPIO_InitStruct);
 80028de:	f107 031c 	add.w	r3, r7, #28
 80028e2:	4619      	mov	r1, r3
 80028e4:	4808      	ldr	r0, [pc, #32]	@ (8002908 <HAL_TIM_MspPostInit+0x158>)
 80028e6:	f000 ffff 	bl	80038e8 <HAL_GPIO_Init>
}
 80028ea:	bf00      	nop
 80028ec:	3730      	adds	r7, #48	@ 0x30
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40010000 	.word	0x40010000
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40020000 	.word	0x40020000
 8002900:	40000400 	.word	0x40000400
 8002904:	40000800 	.word	0x40000800
 8002908:	40020400 	.word	0x40020400

0800290c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08c      	sub	sp, #48	@ 0x30
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002914:	f107 031c 	add.w	r3, r7, #28
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a3a      	ldr	r2, [pc, #232]	@ (8002a14 <HAL_UART_MspInit+0x108>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d134      	bne.n	8002998 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	4b39      	ldr	r3, [pc, #228]	@ (8002a18 <HAL_UART_MspInit+0x10c>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	4a38      	ldr	r2, [pc, #224]	@ (8002a18 <HAL_UART_MspInit+0x10c>)
 8002938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800293c:	6413      	str	r3, [r2, #64]	@ 0x40
 800293e:	4b36      	ldr	r3, [pc, #216]	@ (8002a18 <HAL_UART_MspInit+0x10c>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002946:	61bb      	str	r3, [r7, #24]
 8002948:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	4b32      	ldr	r3, [pc, #200]	@ (8002a18 <HAL_UART_MspInit+0x10c>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002952:	4a31      	ldr	r2, [pc, #196]	@ (8002a18 <HAL_UART_MspInit+0x10c>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6313      	str	r3, [r2, #48]	@ 0x30
 800295a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a18 <HAL_UART_MspInit+0x10c>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002966:	230c      	movs	r3, #12
 8002968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002976:	2307      	movs	r3, #7
 8002978:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297a:	f107 031c 	add.w	r3, r7, #28
 800297e:	4619      	mov	r1, r3
 8002980:	4826      	ldr	r0, [pc, #152]	@ (8002a1c <HAL_UART_MspInit+0x110>)
 8002982:	f000 ffb1 	bl	80038e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	2100      	movs	r1, #0
 800298a:	2026      	movs	r0, #38	@ 0x26
 800298c:	f000 fee3 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002990:	2026      	movs	r0, #38	@ 0x26
 8002992:	f000 fefc 	bl	800378e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002996:	e038      	b.n	8002a0a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a20      	ldr	r2, [pc, #128]	@ (8002a20 <HAL_UART_MspInit+0x114>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d133      	bne.n	8002a0a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a18 <HAL_UART_MspInit+0x10c>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002a18 <HAL_UART_MspInit+0x10c>)
 80029ac:	f043 0320 	orr.w	r3, r3, #32
 80029b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029b2:	4b19      	ldr	r3, [pc, #100]	@ (8002a18 <HAL_UART_MspInit+0x10c>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b15      	ldr	r3, [pc, #84]	@ (8002a18 <HAL_UART_MspInit+0x10c>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	4a14      	ldr	r2, [pc, #80]	@ (8002a18 <HAL_UART_MspInit+0x10c>)
 80029c8:	f043 0304 	orr.w	r3, r3, #4
 80029cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ce:	4b12      	ldr	r3, [pc, #72]	@ (8002a18 <HAL_UART_MspInit+0x10c>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_bluetooh_Pin|RX_bluetooh_Pin;
 80029da:	23c0      	movs	r3, #192	@ 0xc0
 80029dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029de:	2302      	movs	r3, #2
 80029e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e6:	2303      	movs	r3, #3
 80029e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80029ea:	2308      	movs	r3, #8
 80029ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ee:	f107 031c 	add.w	r3, r7, #28
 80029f2:	4619      	mov	r1, r3
 80029f4:	480b      	ldr	r0, [pc, #44]	@ (8002a24 <HAL_UART_MspInit+0x118>)
 80029f6:	f000 ff77 	bl	80038e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2100      	movs	r1, #0
 80029fe:	2047      	movs	r0, #71	@ 0x47
 8002a00:	f000 fea9 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002a04:	2047      	movs	r0, #71	@ 0x47
 8002a06:	f000 fec2 	bl	800378e <HAL_NVIC_EnableIRQ>
}
 8002a0a:	bf00      	nop
 8002a0c:	3730      	adds	r7, #48	@ 0x30
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40004400 	.word	0x40004400
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40020000 	.word	0x40020000
 8002a20:	40011400 	.word	0x40011400
 8002a24:	40020800 	.word	0x40020800

08002a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <NMI_Handler+0x4>

08002a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <HardFault_Handler+0x4>

08002a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a3c:	bf00      	nop
 8002a3e:	e7fd      	b.n	8002a3c <MemManage_Handler+0x4>

08002a40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <BusFault_Handler+0x4>

08002a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a4c:	bf00      	nop
 8002a4e:	e7fd      	b.n	8002a4c <UsageFault_Handler+0x4>

08002a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a7e:	f000 f98d 	bl	8002d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC0_EXTI0_BUTTON_Pin);
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f001 f8e2 	bl	8003c54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002a90:	bf00      	nop
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a98:	4802      	ldr	r0, [pc, #8]	@ (8002aa4 <TIM3_IRQHandler+0x10>)
 8002a9a:	f001 feef 	bl	800487c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200009b0 	.word	0x200009b0

08002aa8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002aac:	4802      	ldr	r0, [pc, #8]	@ (8002ab8 <TIM4_IRQHandler+0x10>)
 8002aae:	f001 fee5 	bl	800487c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200009f8 	.word	0x200009f8

08002abc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ac0:	4802      	ldr	r0, [pc, #8]	@ (8002acc <USART2_IRQHandler+0x10>)
 8002ac2:	f002 fe23 	bl	800570c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000a40 	.word	0x20000a40

08002ad0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002ad4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002ad8:	f001 f8bc 	bl	8003c54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002adc:	bf00      	nop
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002ae4:	4802      	ldr	r0, [pc, #8]	@ (8002af0 <USART6_IRQHandler+0x10>)
 8002ae6:	f002 fe11 	bl	800570c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000a88 	.word	0x20000a88

08002af4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return 1;
 8002af8:	2301      	movs	r3, #1
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <_kill>:

int _kill(int pid, int sig)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b0e:	f004 f905 	bl	8006d1c <__errno>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2216      	movs	r2, #22
 8002b16:	601a      	str	r2, [r3, #0]
  return -1;
 8002b18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_exit>:

void _exit (int status)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ffe7 	bl	8002b04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b36:	bf00      	nop
 8002b38:	e7fd      	b.n	8002b36 <_exit+0x12>

08002b3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	e00a      	b.n	8002b62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b4c:	f3af 8000 	nop.w
 8002b50:	4601      	mov	r1, r0
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	60ba      	str	r2, [r7, #8]
 8002b58:	b2ca      	uxtb	r2, r1
 8002b5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	dbf0      	blt.n	8002b4c <_read+0x12>
  }

  return len;
 8002b6a:	687b      	ldr	r3, [r7, #4]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	e009      	b.n	8002b9a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	60ba      	str	r2, [r7, #8]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fdd0 	bl	8001734 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	3301      	adds	r3, #1
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	dbf1      	blt.n	8002b86 <_write+0x12>
  }
  return len;
 8002ba2:	687b      	ldr	r3, [r7, #4]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <_close>:

int _close(int file)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bd4:	605a      	str	r2, [r3, #4]
  return 0;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <_isatty>:

int _isatty(int file)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bec:	2301      	movs	r3, #1
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c1c:	4a14      	ldr	r2, [pc, #80]	@ (8002c70 <_sbrk+0x5c>)
 8002c1e:	4b15      	ldr	r3, [pc, #84]	@ (8002c74 <_sbrk+0x60>)
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c28:	4b13      	ldr	r3, [pc, #76]	@ (8002c78 <_sbrk+0x64>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c30:	4b11      	ldr	r3, [pc, #68]	@ (8002c78 <_sbrk+0x64>)
 8002c32:	4a12      	ldr	r2, [pc, #72]	@ (8002c7c <_sbrk+0x68>)
 8002c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c36:	4b10      	ldr	r3, [pc, #64]	@ (8002c78 <_sbrk+0x64>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d207      	bcs.n	8002c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c44:	f004 f86a 	bl	8006d1c <__errno>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	220c      	movs	r2, #12
 8002c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c52:	e009      	b.n	8002c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c54:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <_sbrk+0x64>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c5a:	4b07      	ldr	r3, [pc, #28]	@ (8002c78 <_sbrk+0x64>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	4a05      	ldr	r2, [pc, #20]	@ (8002c78 <_sbrk+0x64>)
 8002c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c66:	68fb      	ldr	r3, [r7, #12]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20020000 	.word	0x20020000
 8002c74:	00000400 	.word	0x00000400
 8002c78:	20000b38 	.word	0x20000b38
 8002c7c:	20000c90 	.word	0x20000c90

08002c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c84:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <SystemInit+0x20>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ca0 <SystemInit+0x20>)
 8002c8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8002ca4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cdc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ca8:	f7ff ffea 	bl	8002c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cac:	480c      	ldr	r0, [pc, #48]	@ (8002ce0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cae:	490d      	ldr	r1, [pc, #52]	@ (8002ce4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb4:	e002      	b.n	8002cbc <LoopCopyDataInit>

08002cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cba:	3304      	adds	r3, #4

08002cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc0:	d3f9      	bcc.n	8002cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8002cec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cc4:	4c0a      	ldr	r4, [pc, #40]	@ (8002cf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc8:	e001      	b.n	8002cce <LoopFillZerobss>

08002cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ccc:	3204      	adds	r2, #4

08002cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd0:	d3fb      	bcc.n	8002cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cd2:	f004 f829 	bl	8006d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cd6:	f7fe fd45 	bl	8001764 <main>
  bx  lr    
 8002cda:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8002cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002ce8:	080090e0 	.word	0x080090e0
  ldr r2, =_sbss
 8002cec:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002cf0:	20000c8c 	.word	0x20000c8c

08002cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf4:	e7fe      	b.n	8002cf4 <ADC_IRQHandler>
	...

08002cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d38 <HAL_Init+0x40>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0d      	ldr	r2, [pc, #52]	@ (8002d38 <HAL_Init+0x40>)
 8002d02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d08:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <HAL_Init+0x40>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d38 <HAL_Init+0x40>)
 8002d0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d14:	4b08      	ldr	r3, [pc, #32]	@ (8002d38 <HAL_Init+0x40>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a07      	ldr	r2, [pc, #28]	@ (8002d38 <HAL_Init+0x40>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d20:	2003      	movs	r0, #3
 8002d22:	f000 fd0d 	bl	8003740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d26:	2000      	movs	r0, #0
 8002d28:	f000 f808 	bl	8002d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d2c:	f7ff fc64 	bl	80025f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40023c00 	.word	0x40023c00

08002d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d44:	4b12      	ldr	r3, [pc, #72]	@ (8002d90 <HAL_InitTick+0x54>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b12      	ldr	r3, [pc, #72]	@ (8002d94 <HAL_InitTick+0x58>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fd25 	bl	80037aa <HAL_SYSTICK_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00e      	b.n	8002d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b0f      	cmp	r3, #15
 8002d6e:	d80a      	bhi.n	8002d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d70:	2200      	movs	r2, #0
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	f000 fced 	bl	8003756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d7c:	4a06      	ldr	r2, [pc, #24]	@ (8002d98 <HAL_InitTick+0x5c>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e000      	b.n	8002d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000004 	.word	0x20000004
 8002d94:	2000000c 	.word	0x2000000c
 8002d98:	20000008 	.word	0x20000008

08002d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da0:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <HAL_IncTick+0x20>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <HAL_IncTick+0x24>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	4a04      	ldr	r2, [pc, #16]	@ (8002dc0 <HAL_IncTick+0x24>)
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	2000000c 	.word	0x2000000c
 8002dc0:	20000b3c 	.word	0x20000b3c

08002dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	@ (8002dd8 <HAL_GetTick+0x14>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000b3c 	.word	0x20000b3c

08002ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de4:	f7ff ffee 	bl	8002dc4 <HAL_GetTick>
 8002de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d005      	beq.n	8002e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002df6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e20 <HAL_Delay+0x44>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4413      	add	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e02:	bf00      	nop
 8002e04:	f7ff ffde 	bl	8002dc4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d8f7      	bhi.n	8002e04 <HAL_Delay+0x28>
  {
  }
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	2000000c 	.word	0x2000000c

08002e24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e033      	b.n	8002ea2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff fc00 	bl	8002648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d118      	bne.n	8002e94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e6a:	f023 0302 	bic.w	r3, r3, #2
 8002e6e:	f043 0202 	orr.w	r2, r3, #2
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fa96 	bl	80033a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	f023 0303 	bic.w	r3, r3, #3
 8002e8a:	f043 0201 	orr.w	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e92:	e001      	b.n	8002e98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_Start+0x1a>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e097      	b.n	8002ff6 <HAL_ADC_Start+0x14a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d018      	beq.n	8002f0e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002eec:	4b45      	ldr	r3, [pc, #276]	@ (8003004 <HAL_ADC_Start+0x158>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a45      	ldr	r2, [pc, #276]	@ (8003008 <HAL_ADC_Start+0x15c>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	0c9a      	lsrs	r2, r3, #18
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f00:	e002      	b.n	8002f08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f9      	bne.n	8002f02 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d15f      	bne.n	8002fdc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f46:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f5a:	d106      	bne.n	8002f6a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f60:	f023 0206 	bic.w	r2, r3, #6
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	645a      	str	r2, [r3, #68]	@ 0x44
 8002f68:	e002      	b.n	8002f70 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f78:	4b24      	ldr	r3, [pc, #144]	@ (800300c <HAL_ADC_Start+0x160>)
 8002f7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002f84:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10f      	bne.n	8002fb2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d129      	bne.n	8002ff4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	e020      	b.n	8002ff4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a16      	ldr	r2, [pc, #88]	@ (8003010 <HAL_ADC_Start+0x164>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d11b      	bne.n	8002ff4 <HAL_ADC_Start+0x148>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d114      	bne.n	8002ff4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002fd8:	609a      	str	r2, [r3, #8]
 8002fda:	e00b      	b.n	8002ff4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	f043 0210 	orr.w	r2, r3, #16
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fec:	f043 0201 	orr.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000004 	.word	0x20000004
 8003008:	431bde83 	.word	0x431bde83
 800300c:	40012300 	.word	0x40012300
 8003010:	40012000 	.word	0x40012000

08003014 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003030:	d113      	bne.n	800305a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800303c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003040:	d10b      	bne.n	800305a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	f043 0220 	orr.w	r2, r3, #32
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e063      	b.n	8003122 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800305a:	f7ff feb3 	bl	8002dc4 <HAL_GetTick>
 800305e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003060:	e021      	b.n	80030a6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d01d      	beq.n	80030a6 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d007      	beq.n	8003080 <HAL_ADC_PollForConversion+0x6c>
 8003070:	f7ff fea8 	bl	8002dc4 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d212      	bcs.n	80030a6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b02      	cmp	r3, #2
 800308c:	d00b      	beq.n	80030a6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	f043 0204 	orr.w	r2, r3, #4
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e03d      	b.n	8003122 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d1d6      	bne.n	8003062 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0212 	mvn.w	r2, #18
 80030bc:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d123      	bne.n	8003120 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d11f      	bne.n	8003120 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d111      	bne.n	8003120 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003100:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003118:	f043 0201 	orr.w	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x1c>
 800315c:	2302      	movs	r3, #2
 800315e:	e113      	b.n	8003388 <HAL_ADC_ConfigChannel+0x244>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b09      	cmp	r3, #9
 800316e:	d925      	bls.n	80031bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68d9      	ldr	r1, [r3, #12]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	4613      	mov	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4413      	add	r3, r2
 8003184:	3b1e      	subs	r3, #30
 8003186:	2207      	movs	r2, #7
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43da      	mvns	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	400a      	ands	r2, r1
 8003194:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68d9      	ldr	r1, [r3, #12]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4618      	mov	r0, r3
 80031a8:	4603      	mov	r3, r0
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4403      	add	r3, r0
 80031ae:	3b1e      	subs	r3, #30
 80031b0:	409a      	lsls	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	e022      	b.n	8003202 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6919      	ldr	r1, [r3, #16]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	2207      	movs	r2, #7
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43da      	mvns	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	400a      	ands	r2, r1
 80031de:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6919      	ldr	r1, [r3, #16]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	4618      	mov	r0, r3
 80031f2:	4603      	mov	r3, r0
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4403      	add	r3, r0
 80031f8:	409a      	lsls	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b06      	cmp	r3, #6
 8003208:	d824      	bhi.n	8003254 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	3b05      	subs	r3, #5
 800321c:	221f      	movs	r2, #31
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43da      	mvns	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	400a      	ands	r2, r1
 800322a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	b29b      	uxth	r3, r3
 8003238:	4618      	mov	r0, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	3b05      	subs	r3, #5
 8003246:	fa00 f203 	lsl.w	r2, r0, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	635a      	str	r2, [r3, #52]	@ 0x34
 8003252:	e04c      	b.n	80032ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b0c      	cmp	r3, #12
 800325a:	d824      	bhi.n	80032a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	3b23      	subs	r3, #35	@ 0x23
 800326e:	221f      	movs	r2, #31
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43da      	mvns	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	400a      	ands	r2, r1
 800327c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	b29b      	uxth	r3, r3
 800328a:	4618      	mov	r0, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	3b23      	subs	r3, #35	@ 0x23
 8003298:	fa00 f203 	lsl.w	r2, r0, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80032a4:	e023      	b.n	80032ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	3b41      	subs	r3, #65	@ 0x41
 80032b8:	221f      	movs	r2, #31
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	400a      	ands	r2, r1
 80032c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	4618      	mov	r0, r3
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	3b41      	subs	r3, #65	@ 0x41
 80032e2:	fa00 f203 	lsl.w	r2, r0, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ee:	4b29      	ldr	r3, [pc, #164]	@ (8003394 <HAL_ADC_ConfigChannel+0x250>)
 80032f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a28      	ldr	r2, [pc, #160]	@ (8003398 <HAL_ADC_ConfigChannel+0x254>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d10f      	bne.n	800331c <HAL_ADC_ConfigChannel+0x1d8>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b12      	cmp	r3, #18
 8003302:	d10b      	bne.n	800331c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a1d      	ldr	r2, [pc, #116]	@ (8003398 <HAL_ADC_ConfigChannel+0x254>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d12b      	bne.n	800337e <HAL_ADC_ConfigChannel+0x23a>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a1c      	ldr	r2, [pc, #112]	@ (800339c <HAL_ADC_ConfigChannel+0x258>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d003      	beq.n	8003338 <HAL_ADC_ConfigChannel+0x1f4>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b11      	cmp	r3, #17
 8003336:	d122      	bne.n	800337e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a11      	ldr	r2, [pc, #68]	@ (800339c <HAL_ADC_ConfigChannel+0x258>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d111      	bne.n	800337e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800335a:	4b11      	ldr	r3, [pc, #68]	@ (80033a0 <HAL_ADC_ConfigChannel+0x25c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a11      	ldr	r2, [pc, #68]	@ (80033a4 <HAL_ADC_ConfigChannel+0x260>)
 8003360:	fba2 2303 	umull	r2, r3, r2, r3
 8003364:	0c9a      	lsrs	r2, r3, #18
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003370:	e002      	b.n	8003378 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	3b01      	subs	r3, #1
 8003376:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f9      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	40012300 	.word	0x40012300
 8003398:	40012000 	.word	0x40012000
 800339c:	10000012 	.word	0x10000012
 80033a0:	20000004 	.word	0x20000004
 80033a4:	431bde83 	.word	0x431bde83

080033a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033b0:	4b79      	ldr	r3, [pc, #484]	@ (8003598 <ADC_Init+0x1f0>)
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	021a      	lsls	r2, r3, #8
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003400:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6859      	ldr	r1, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003422:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6899      	ldr	r1, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343a:	4a58      	ldr	r2, [pc, #352]	@ (800359c <ADC_Init+0x1f4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d022      	beq.n	8003486 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800344e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6899      	ldr	r1, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003470:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6899      	ldr	r1, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	e00f      	b.n	80034a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003494:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0202 	bic.w	r2, r2, #2
 80034b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6899      	ldr	r1, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	7e1b      	ldrb	r3, [r3, #24]
 80034c0:	005a      	lsls	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01b      	beq.n	800350c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80034f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6859      	ldr	r1, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	3b01      	subs	r3, #1
 8003500:	035a      	lsls	r2, r3, #13
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	e007      	b.n	800351c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800351a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800352a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	3b01      	subs	r3, #1
 8003538:	051a      	lsls	r2, r3, #20
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003550:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6899      	ldr	r1, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800355e:	025a      	lsls	r2, r3, #9
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003576:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6899      	ldr	r1, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	029a      	lsls	r2, r3, #10
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	609a      	str	r2, [r3, #8]
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	40012300 	.word	0x40012300
 800359c:	0f000001 	.word	0x0f000001

080035a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b0:	4b0c      	ldr	r3, [pc, #48]	@ (80035e4 <__NVIC_SetPriorityGrouping+0x44>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035bc:	4013      	ands	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035d2:	4a04      	ldr	r2, [pc, #16]	@ (80035e4 <__NVIC_SetPriorityGrouping+0x44>)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	60d3      	str	r3, [r2, #12]
}
 80035d8:	bf00      	nop
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035ec:	4b04      	ldr	r3, [pc, #16]	@ (8003600 <__NVIC_GetPriorityGrouping+0x18>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	0a1b      	lsrs	r3, r3, #8
 80035f2:	f003 0307 	and.w	r3, r3, #7
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	2b00      	cmp	r3, #0
 8003614:	db0b      	blt.n	800362e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	f003 021f 	and.w	r2, r3, #31
 800361c:	4907      	ldr	r1, [pc, #28]	@ (800363c <__NVIC_EnableIRQ+0x38>)
 800361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	2001      	movs	r0, #1
 8003626:	fa00 f202 	lsl.w	r2, r0, r2
 800362a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	e000e100 	.word	0xe000e100

08003640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	6039      	str	r1, [r7, #0]
 800364a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800364c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003650:	2b00      	cmp	r3, #0
 8003652:	db0a      	blt.n	800366a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	b2da      	uxtb	r2, r3
 8003658:	490c      	ldr	r1, [pc, #48]	@ (800368c <__NVIC_SetPriority+0x4c>)
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	0112      	lsls	r2, r2, #4
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	440b      	add	r3, r1
 8003664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003668:	e00a      	b.n	8003680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4908      	ldr	r1, [pc, #32]	@ (8003690 <__NVIC_SetPriority+0x50>)
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	3b04      	subs	r3, #4
 8003678:	0112      	lsls	r2, r2, #4
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	440b      	add	r3, r1
 800367e:	761a      	strb	r2, [r3, #24]
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	e000e100 	.word	0xe000e100
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003694:	b480      	push	{r7}
 8003696:	b089      	sub	sp, #36	@ 0x24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f1c3 0307 	rsb	r3, r3, #7
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	bf28      	it	cs
 80036b2:	2304      	movcs	r3, #4
 80036b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3304      	adds	r3, #4
 80036ba:	2b06      	cmp	r3, #6
 80036bc:	d902      	bls.n	80036c4 <NVIC_EncodePriority+0x30>
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3b03      	subs	r3, #3
 80036c2:	e000      	b.n	80036c6 <NVIC_EncodePriority+0x32>
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c8:	f04f 32ff 	mov.w	r2, #4294967295
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43da      	mvns	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	401a      	ands	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036dc:	f04f 31ff 	mov.w	r1, #4294967295
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	fa01 f303 	lsl.w	r3, r1, r3
 80036e6:	43d9      	mvns	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	4313      	orrs	r3, r2
         );
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3724      	adds	r7, #36	@ 0x24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3b01      	subs	r3, #1
 8003708:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800370c:	d301      	bcc.n	8003712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800370e:	2301      	movs	r3, #1
 8003710:	e00f      	b.n	8003732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003712:	4a0a      	ldr	r2, [pc, #40]	@ (800373c <SysTick_Config+0x40>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3b01      	subs	r3, #1
 8003718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800371a:	210f      	movs	r1, #15
 800371c:	f04f 30ff 	mov.w	r0, #4294967295
 8003720:	f7ff ff8e 	bl	8003640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003724:	4b05      	ldr	r3, [pc, #20]	@ (800373c <SysTick_Config+0x40>)
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800372a:	4b04      	ldr	r3, [pc, #16]	@ (800373c <SysTick_Config+0x40>)
 800372c:	2207      	movs	r2, #7
 800372e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	e000e010 	.word	0xe000e010

08003740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ff29 	bl	80035a0 <__NVIC_SetPriorityGrouping>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003756:	b580      	push	{r7, lr}
 8003758:	b086      	sub	sp, #24
 800375a:	af00      	add	r7, sp, #0
 800375c:	4603      	mov	r3, r0
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003768:	f7ff ff3e 	bl	80035e8 <__NVIC_GetPriorityGrouping>
 800376c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	6978      	ldr	r0, [r7, #20]
 8003774:	f7ff ff8e 	bl	8003694 <NVIC_EncodePriority>
 8003778:	4602      	mov	r2, r0
 800377a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ff5d 	bl	8003640 <__NVIC_SetPriority>
}
 8003786:	bf00      	nop
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	4603      	mov	r3, r0
 8003796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff31 	bl	8003604 <__NVIC_EnableIRQ>
}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff ffa2 	bl	80036fc <SysTick_Config>
 80037b8:	4603      	mov	r3, r0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037d0:	f7ff faf8 	bl	8002dc4 <HAL_GetTick>
 80037d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d008      	beq.n	80037f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2280      	movs	r2, #128	@ 0x80
 80037e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e052      	b.n	800389a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0216 	bic.w	r2, r2, #22
 8003802:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003812:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	2b00      	cmp	r3, #0
 800381a:	d103      	bne.n	8003824 <HAL_DMA_Abort+0x62>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0208 	bic.w	r2, r2, #8
 8003832:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0201 	bic.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003844:	e013      	b.n	800386e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003846:	f7ff fabd 	bl	8002dc4 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b05      	cmp	r3, #5
 8003852:	d90c      	bls.n	800386e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2203      	movs	r2, #3
 800385e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e015      	b.n	800389a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1e4      	bne.n	8003846 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003880:	223f      	movs	r2, #63	@ 0x3f
 8003882:	409a      	lsls	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d004      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2280      	movs	r2, #128	@ 0x80
 80038ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e00c      	b.n	80038da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2205      	movs	r2, #5
 80038c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	@ 0x24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	e159      	b.n	8003bb8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003904:	2201      	movs	r2, #1
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	4013      	ands	r3, r2
 8003916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	429a      	cmp	r2, r3
 800391e:	f040 8148 	bne.w	8003bb2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b01      	cmp	r3, #1
 800392c:	d005      	beq.n	800393a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003936:	2b02      	cmp	r3, #2
 8003938:	d130      	bne.n	800399c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	2203      	movs	r2, #3
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4013      	ands	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003970:	2201      	movs	r2, #1
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f003 0201 	and.w	r2, r3, #1
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d017      	beq.n	80039d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	2203      	movs	r2, #3
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d123      	bne.n	8003a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	08da      	lsrs	r2, r3, #3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3208      	adds	r2, #8
 80039ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	220f      	movs	r2, #15
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	08da      	lsrs	r2, r3, #3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3208      	adds	r2, #8
 8003a26:	69b9      	ldr	r1, [r7, #24]
 8003a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	2203      	movs	r2, #3
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 0203 	and.w	r2, r3, #3
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80a2 	beq.w	8003bb2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	4b57      	ldr	r3, [pc, #348]	@ (8003bd0 <HAL_GPIO_Init+0x2e8>)
 8003a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a76:	4a56      	ldr	r2, [pc, #344]	@ (8003bd0 <HAL_GPIO_Init+0x2e8>)
 8003a78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a7e:	4b54      	ldr	r3, [pc, #336]	@ (8003bd0 <HAL_GPIO_Init+0x2e8>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a8a:	4a52      	ldr	r2, [pc, #328]	@ (8003bd4 <HAL_GPIO_Init+0x2ec>)
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	089b      	lsrs	r3, r3, #2
 8003a90:	3302      	adds	r3, #2
 8003a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	220f      	movs	r2, #15
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a49      	ldr	r2, [pc, #292]	@ (8003bd8 <HAL_GPIO_Init+0x2f0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d019      	beq.n	8003aea <HAL_GPIO_Init+0x202>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a48      	ldr	r2, [pc, #288]	@ (8003bdc <HAL_GPIO_Init+0x2f4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <HAL_GPIO_Init+0x1fe>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a47      	ldr	r2, [pc, #284]	@ (8003be0 <HAL_GPIO_Init+0x2f8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00d      	beq.n	8003ae2 <HAL_GPIO_Init+0x1fa>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a46      	ldr	r2, [pc, #280]	@ (8003be4 <HAL_GPIO_Init+0x2fc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d007      	beq.n	8003ade <HAL_GPIO_Init+0x1f6>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a45      	ldr	r2, [pc, #276]	@ (8003be8 <HAL_GPIO_Init+0x300>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d101      	bne.n	8003ada <HAL_GPIO_Init+0x1f2>
 8003ad6:	2304      	movs	r3, #4
 8003ad8:	e008      	b.n	8003aec <HAL_GPIO_Init+0x204>
 8003ada:	2307      	movs	r3, #7
 8003adc:	e006      	b.n	8003aec <HAL_GPIO_Init+0x204>
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e004      	b.n	8003aec <HAL_GPIO_Init+0x204>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e002      	b.n	8003aec <HAL_GPIO_Init+0x204>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <HAL_GPIO_Init+0x204>
 8003aea:	2300      	movs	r3, #0
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	f002 0203 	and.w	r2, r2, #3
 8003af2:	0092      	lsls	r2, r2, #2
 8003af4:	4093      	lsls	r3, r2
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003afc:	4935      	ldr	r1, [pc, #212]	@ (8003bd4 <HAL_GPIO_Init+0x2ec>)
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	089b      	lsrs	r3, r3, #2
 8003b02:	3302      	adds	r3, #2
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b0a:	4b38      	ldr	r3, [pc, #224]	@ (8003bec <HAL_GPIO_Init+0x304>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	43db      	mvns	r3, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4013      	ands	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b2e:	4a2f      	ldr	r2, [pc, #188]	@ (8003bec <HAL_GPIO_Init+0x304>)
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b34:	4b2d      	ldr	r3, [pc, #180]	@ (8003bec <HAL_GPIO_Init+0x304>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b58:	4a24      	ldr	r2, [pc, #144]	@ (8003bec <HAL_GPIO_Init+0x304>)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b5e:	4b23      	ldr	r3, [pc, #140]	@ (8003bec <HAL_GPIO_Init+0x304>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	43db      	mvns	r3, r3
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b82:	4a1a      	ldr	r2, [pc, #104]	@ (8003bec <HAL_GPIO_Init+0x304>)
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b88:	4b18      	ldr	r3, [pc, #96]	@ (8003bec <HAL_GPIO_Init+0x304>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bac:	4a0f      	ldr	r2, [pc, #60]	@ (8003bec <HAL_GPIO_Init+0x304>)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	61fb      	str	r3, [r7, #28]
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	2b0f      	cmp	r3, #15
 8003bbc:	f67f aea2 	bls.w	8003904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bc0:	bf00      	nop
 8003bc2:	bf00      	nop
 8003bc4:	3724      	adds	r7, #36	@ 0x24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40013800 	.word	0x40013800
 8003bd8:	40020000 	.word	0x40020000
 8003bdc:	40020400 	.word	0x40020400
 8003be0:	40020800 	.word	0x40020800
 8003be4:	40020c00 	.word	0x40020c00
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40013c00 	.word	0x40013c00

08003bf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	887b      	ldrh	r3, [r7, #2]
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
 8003c0c:	e001      	b.n	8003c12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c30:	787b      	ldrb	r3, [r7, #1]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c3c:	e003      	b.n	8003c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c3e:	887b      	ldrh	r3, [r7, #2]
 8003c40:	041a      	lsls	r2, r3, #16
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	619a      	str	r2, [r3, #24]
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c5e:	4b08      	ldr	r3, [pc, #32]	@ (8003c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d006      	beq.n	8003c78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c6a:	4a05      	ldr	r2, [pc, #20]	@ (8003c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 f806 	bl	8003c84 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40013c00 	.word	0x40013c00

08003c84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
	...

08003c9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e267      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d075      	beq.n	8003da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003cba:	4b88      	ldr	r3, [pc, #544]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d00c      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cc6:	4b85      	ldr	r3, [pc, #532]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d112      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cd2:	4b82      	ldr	r3, [pc, #520]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cde:	d10b      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d05b      	beq.n	8003da4 <HAL_RCC_OscConfig+0x108>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d157      	bne.n	8003da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e242      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d00:	d106      	bne.n	8003d10 <HAL_RCC_OscConfig+0x74>
 8003d02:	4b76      	ldr	r3, [pc, #472]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a75      	ldr	r2, [pc, #468]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	e01d      	b.n	8003d4c <HAL_RCC_OscConfig+0xb0>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d18:	d10c      	bne.n	8003d34 <HAL_RCC_OscConfig+0x98>
 8003d1a:	4b70      	ldr	r3, [pc, #448]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a6f      	ldr	r2, [pc, #444]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	4b6d      	ldr	r3, [pc, #436]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a6c      	ldr	r2, [pc, #432]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	e00b      	b.n	8003d4c <HAL_RCC_OscConfig+0xb0>
 8003d34:	4b69      	ldr	r3, [pc, #420]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a68      	ldr	r2, [pc, #416]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	4b66      	ldr	r3, [pc, #408]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a65      	ldr	r2, [pc, #404]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d013      	beq.n	8003d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d54:	f7ff f836 	bl	8002dc4 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d5c:	f7ff f832 	bl	8002dc4 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b64      	cmp	r3, #100	@ 0x64
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e207      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0xc0>
 8003d7a:	e014      	b.n	8003da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7ff f822 	bl	8002dc4 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d84:	f7ff f81e 	bl	8002dc4 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	@ 0x64
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e1f3      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d96:	4b51      	ldr	r3, [pc, #324]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0xe8>
 8003da2:	e000      	b.n	8003da6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d063      	beq.n	8003e7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003db2:	4b4a      	ldr	r3, [pc, #296]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00b      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dbe:	4b47      	ldr	r3, [pc, #284]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d11c      	bne.n	8003e04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dca:	4b44      	ldr	r3, [pc, #272]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d116      	bne.n	8003e04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd6:	4b41      	ldr	r3, [pc, #260]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <HAL_RCC_OscConfig+0x152>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d001      	beq.n	8003dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e1c7      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dee:	4b3b      	ldr	r3, [pc, #236]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4937      	ldr	r1, [pc, #220]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e02:	e03a      	b.n	8003e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d020      	beq.n	8003e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e0c:	4b34      	ldr	r3, [pc, #208]	@ (8003ee0 <HAL_RCC_OscConfig+0x244>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e12:	f7fe ffd7 	bl	8002dc4 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e1a:	f7fe ffd3 	bl	8002dc4 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e1a8      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0f0      	beq.n	8003e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e38:	4b28      	ldr	r3, [pc, #160]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	4925      	ldr	r1, [pc, #148]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	600b      	str	r3, [r1, #0]
 8003e4c:	e015      	b.n	8003e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e4e:	4b24      	ldr	r3, [pc, #144]	@ (8003ee0 <HAL_RCC_OscConfig+0x244>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e54:	f7fe ffb6 	bl	8002dc4 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e5c:	f7fe ffb2 	bl	8002dc4 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e187      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d036      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d016      	beq.n	8003ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e8e:	4b15      	ldr	r3, [pc, #84]	@ (8003ee4 <HAL_RCC_OscConfig+0x248>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e94:	f7fe ff96 	bl	8002dc4 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e9c:	f7fe ff92 	bl	8002dc4 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e167      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eae:	4b0b      	ldr	r3, [pc, #44]	@ (8003edc <HAL_RCC_OscConfig+0x240>)
 8003eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x200>
 8003eba:	e01b      	b.n	8003ef4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ebc:	4b09      	ldr	r3, [pc, #36]	@ (8003ee4 <HAL_RCC_OscConfig+0x248>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec2:	f7fe ff7f 	bl	8002dc4 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec8:	e00e      	b.n	8003ee8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eca:	f7fe ff7b 	bl	8002dc4 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d907      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e150      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	42470000 	.word	0x42470000
 8003ee4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee8:	4b88      	ldr	r3, [pc, #544]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1ea      	bne.n	8003eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 8097 	beq.w	8004030 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f02:	2300      	movs	r3, #0
 8003f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f06:	4b81      	ldr	r3, [pc, #516]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10f      	bne.n	8003f32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	4b7d      	ldr	r3, [pc, #500]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	4a7c      	ldr	r2, [pc, #496]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f22:	4b7a      	ldr	r3, [pc, #488]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f2a:	60bb      	str	r3, [r7, #8]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f32:	4b77      	ldr	r3, [pc, #476]	@ (8004110 <HAL_RCC_OscConfig+0x474>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d118      	bne.n	8003f70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f3e:	4b74      	ldr	r3, [pc, #464]	@ (8004110 <HAL_RCC_OscConfig+0x474>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a73      	ldr	r2, [pc, #460]	@ (8004110 <HAL_RCC_OscConfig+0x474>)
 8003f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f4a:	f7fe ff3b 	bl	8002dc4 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f52:	f7fe ff37 	bl	8002dc4 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e10c      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f64:	4b6a      	ldr	r3, [pc, #424]	@ (8004110 <HAL_RCC_OscConfig+0x474>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d106      	bne.n	8003f86 <HAL_RCC_OscConfig+0x2ea>
 8003f78:	4b64      	ldr	r3, [pc, #400]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7c:	4a63      	ldr	r2, [pc, #396]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f84:	e01c      	b.n	8003fc0 <HAL_RCC_OscConfig+0x324>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b05      	cmp	r3, #5
 8003f8c:	d10c      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x30c>
 8003f8e:	4b5f      	ldr	r3, [pc, #380]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f92:	4a5e      	ldr	r2, [pc, #376]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003f94:	f043 0304 	orr.w	r3, r3, #4
 8003f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f9a:	4b5c      	ldr	r3, [pc, #368]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9e:	4a5b      	ldr	r2, [pc, #364]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa6:	e00b      	b.n	8003fc0 <HAL_RCC_OscConfig+0x324>
 8003fa8:	4b58      	ldr	r3, [pc, #352]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fac:	4a57      	ldr	r2, [pc, #348]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003fae:	f023 0301 	bic.w	r3, r3, #1
 8003fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb4:	4b55      	ldr	r3, [pc, #340]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb8:	4a54      	ldr	r2, [pc, #336]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003fba:	f023 0304 	bic.w	r3, r3, #4
 8003fbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d015      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fe fefc 	bl	8002dc4 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fce:	e00a      	b.n	8003fe6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd0:	f7fe fef8 	bl	8002dc4 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e0cb      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe6:	4b49      	ldr	r3, [pc, #292]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0ee      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x334>
 8003ff2:	e014      	b.n	800401e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff4:	f7fe fee6 	bl	8002dc4 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffa:	e00a      	b.n	8004012 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ffc:	f7fe fee2 	bl	8002dc4 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800400a:	4293      	cmp	r3, r2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e0b5      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004012:	4b3e      	ldr	r3, [pc, #248]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1ee      	bne.n	8003ffc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800401e:	7dfb      	ldrb	r3, [r7, #23]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d105      	bne.n	8004030 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004024:	4b39      	ldr	r3, [pc, #228]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	4a38      	ldr	r2, [pc, #224]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 800402a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800402e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80a1 	beq.w	800417c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800403a:	4b34      	ldr	r3, [pc, #208]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 030c 	and.w	r3, r3, #12
 8004042:	2b08      	cmp	r3, #8
 8004044:	d05c      	beq.n	8004100 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d141      	bne.n	80040d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404e:	4b31      	ldr	r3, [pc, #196]	@ (8004114 <HAL_RCC_OscConfig+0x478>)
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004054:	f7fe feb6 	bl	8002dc4 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405c:	f7fe feb2 	bl	8002dc4 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e087      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406e:	4b27      	ldr	r3, [pc, #156]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69da      	ldr	r2, [r3, #28]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	019b      	lsls	r3, r3, #6
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004090:	085b      	lsrs	r3, r3, #1
 8004092:	3b01      	subs	r3, #1
 8004094:	041b      	lsls	r3, r3, #16
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409c:	061b      	lsls	r3, r3, #24
 800409e:	491b      	ldr	r1, [pc, #108]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004114 <HAL_RCC_OscConfig+0x478>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040aa:	f7fe fe8b 	bl	8002dc4 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b2:	f7fe fe87 	bl	8002dc4 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e05c      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c4:	4b11      	ldr	r3, [pc, #68]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0f0      	beq.n	80040b2 <HAL_RCC_OscConfig+0x416>
 80040d0:	e054      	b.n	800417c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d2:	4b10      	ldr	r3, [pc, #64]	@ (8004114 <HAL_RCC_OscConfig+0x478>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d8:	f7fe fe74 	bl	8002dc4 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e0:	f7fe fe70 	bl	8002dc4 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e045      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f2:	4b06      	ldr	r3, [pc, #24]	@ (800410c <HAL_RCC_OscConfig+0x470>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x444>
 80040fe:	e03d      	b.n	800417c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d107      	bne.n	8004118 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e038      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
 800410c:	40023800 	.word	0x40023800
 8004110:	40007000 	.word	0x40007000
 8004114:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004118:	4b1b      	ldr	r3, [pc, #108]	@ (8004188 <HAL_RCC_OscConfig+0x4ec>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d028      	beq.n	8004178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004130:	429a      	cmp	r2, r3
 8004132:	d121      	bne.n	8004178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413e:	429a      	cmp	r2, r3
 8004140:	d11a      	bne.n	8004178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004148:	4013      	ands	r3, r2
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800414e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004150:	4293      	cmp	r3, r2
 8004152:	d111      	bne.n	8004178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415e:	085b      	lsrs	r3, r3, #1
 8004160:	3b01      	subs	r3, #1
 8004162:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004164:	429a      	cmp	r2, r3
 8004166:	d107      	bne.n	8004178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004172:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40023800 	.word	0x40023800

0800418c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0cc      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041a0:	4b68      	ldr	r3, [pc, #416]	@ (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d90c      	bls.n	80041c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4b65      	ldr	r3, [pc, #404]	@ (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b6:	4b63      	ldr	r3, [pc, #396]	@ (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0b8      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d020      	beq.n	8004216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041e0:	4b59      	ldr	r3, [pc, #356]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4a58      	ldr	r2, [pc, #352]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041f8:	4b53      	ldr	r3, [pc, #332]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a52      	ldr	r2, [pc, #328]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004204:	4b50      	ldr	r3, [pc, #320]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	494d      	ldr	r1, [pc, #308]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	4313      	orrs	r3, r2
 8004214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d044      	beq.n	80042ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d107      	bne.n	800423a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422a:	4b47      	ldr	r3, [pc, #284]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d119      	bne.n	800426a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e07f      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d003      	beq.n	800424a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004246:	2b03      	cmp	r3, #3
 8004248:	d107      	bne.n	800425a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800424a:	4b3f      	ldr	r3, [pc, #252]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d109      	bne.n	800426a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e06f      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425a:	4b3b      	ldr	r3, [pc, #236]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e067      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800426a:	4b37      	ldr	r3, [pc, #220]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f023 0203 	bic.w	r2, r3, #3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	4934      	ldr	r1, [pc, #208]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	4313      	orrs	r3, r2
 800427a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800427c:	f7fe fda2 	bl	8002dc4 <HAL_GetTick>
 8004280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004282:	e00a      	b.n	800429a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004284:	f7fe fd9e 	bl	8002dc4 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e04f      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429a:	4b2b      	ldr	r3, [pc, #172]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 020c 	and.w	r2, r3, #12
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d1eb      	bne.n	8004284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042ac:	4b25      	ldr	r3, [pc, #148]	@ (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d20c      	bcs.n	80042d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ba:	4b22      	ldr	r3, [pc, #136]	@ (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c2:	4b20      	ldr	r3, [pc, #128]	@ (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e032      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e0:	4b19      	ldr	r3, [pc, #100]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4916      	ldr	r1, [pc, #88]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d009      	beq.n	8004312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042fe:	4b12      	ldr	r3, [pc, #72]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	490e      	ldr	r1, [pc, #56]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	4313      	orrs	r3, r2
 8004310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004312:	f000 f821 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8004316:	4602      	mov	r2, r0
 8004318:	4b0b      	ldr	r3, [pc, #44]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	091b      	lsrs	r3, r3, #4
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	490a      	ldr	r1, [pc, #40]	@ (800434c <HAL_RCC_ClockConfig+0x1c0>)
 8004324:	5ccb      	ldrb	r3, [r1, r3]
 8004326:	fa22 f303 	lsr.w	r3, r2, r3
 800432a:	4a09      	ldr	r2, [pc, #36]	@ (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 800432c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800432e:	4b09      	ldr	r3, [pc, #36]	@ (8004354 <HAL_RCC_ClockConfig+0x1c8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7fe fd02 	bl	8002d3c <HAL_InitTick>

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40023c00 	.word	0x40023c00
 8004348:	40023800 	.word	0x40023800
 800434c:	08008e94 	.word	0x08008e94
 8004350:	20000004 	.word	0x20000004
 8004354:	20000008 	.word	0x20000008

08004358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800435c:	b094      	sub	sp, #80	@ 0x50
 800435e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004370:	4b79      	ldr	r3, [pc, #484]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x200>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 030c 	and.w	r3, r3, #12
 8004378:	2b08      	cmp	r3, #8
 800437a:	d00d      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0x40>
 800437c:	2b08      	cmp	r3, #8
 800437e:	f200 80e1 	bhi.w	8004544 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0x34>
 8004386:	2b04      	cmp	r3, #4
 8004388:	d003      	beq.n	8004392 <HAL_RCC_GetSysClockFreq+0x3a>
 800438a:	e0db      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800438c:	4b73      	ldr	r3, [pc, #460]	@ (800455c <HAL_RCC_GetSysClockFreq+0x204>)
 800438e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004390:	e0db      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004392:	4b73      	ldr	r3, [pc, #460]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x208>)
 8004394:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004396:	e0d8      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004398:	4b6f      	ldr	r3, [pc, #444]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x200>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x200>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d063      	beq.n	8004476 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	099b      	lsrs	r3, r3, #6
 80043b4:	2200      	movs	r2, #0
 80043b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80043c2:	2300      	movs	r3, #0
 80043c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80043c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043ca:	4622      	mov	r2, r4
 80043cc:	462b      	mov	r3, r5
 80043ce:	f04f 0000 	mov.w	r0, #0
 80043d2:	f04f 0100 	mov.w	r1, #0
 80043d6:	0159      	lsls	r1, r3, #5
 80043d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043dc:	0150      	lsls	r0, r2, #5
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4621      	mov	r1, r4
 80043e4:	1a51      	subs	r1, r2, r1
 80043e6:	6139      	str	r1, [r7, #16]
 80043e8:	4629      	mov	r1, r5
 80043ea:	eb63 0301 	sbc.w	r3, r3, r1
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043fc:	4659      	mov	r1, fp
 80043fe:	018b      	lsls	r3, r1, #6
 8004400:	4651      	mov	r1, sl
 8004402:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004406:	4651      	mov	r1, sl
 8004408:	018a      	lsls	r2, r1, #6
 800440a:	4651      	mov	r1, sl
 800440c:	ebb2 0801 	subs.w	r8, r2, r1
 8004410:	4659      	mov	r1, fp
 8004412:	eb63 0901 	sbc.w	r9, r3, r1
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800442a:	4690      	mov	r8, r2
 800442c:	4699      	mov	r9, r3
 800442e:	4623      	mov	r3, r4
 8004430:	eb18 0303 	adds.w	r3, r8, r3
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	462b      	mov	r3, r5
 8004438:	eb49 0303 	adc.w	r3, r9, r3
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800444a:	4629      	mov	r1, r5
 800444c:	024b      	lsls	r3, r1, #9
 800444e:	4621      	mov	r1, r4
 8004450:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004454:	4621      	mov	r1, r4
 8004456:	024a      	lsls	r2, r1, #9
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800445e:	2200      	movs	r2, #0
 8004460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004462:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004464:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004468:	f7fc fbde 	bl	8000c28 <__aeabi_uldivmod>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4613      	mov	r3, r2
 8004472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004474:	e058      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004476:	4b38      	ldr	r3, [pc, #224]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x200>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	099b      	lsrs	r3, r3, #6
 800447c:	2200      	movs	r2, #0
 800447e:	4618      	mov	r0, r3
 8004480:	4611      	mov	r1, r2
 8004482:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004486:	623b      	str	r3, [r7, #32]
 8004488:	2300      	movs	r3, #0
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24
 800448c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004490:	4642      	mov	r2, r8
 8004492:	464b      	mov	r3, r9
 8004494:	f04f 0000 	mov.w	r0, #0
 8004498:	f04f 0100 	mov.w	r1, #0
 800449c:	0159      	lsls	r1, r3, #5
 800449e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044a2:	0150      	lsls	r0, r2, #5
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4641      	mov	r1, r8
 80044aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80044ae:	4649      	mov	r1, r9
 80044b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044c8:	ebb2 040a 	subs.w	r4, r2, sl
 80044cc:	eb63 050b 	sbc.w	r5, r3, fp
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	00eb      	lsls	r3, r5, #3
 80044da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044de:	00e2      	lsls	r2, r4, #3
 80044e0:	4614      	mov	r4, r2
 80044e2:	461d      	mov	r5, r3
 80044e4:	4643      	mov	r3, r8
 80044e6:	18e3      	adds	r3, r4, r3
 80044e8:	603b      	str	r3, [r7, #0]
 80044ea:	464b      	mov	r3, r9
 80044ec:	eb45 0303 	adc.w	r3, r5, r3
 80044f0:	607b      	str	r3, [r7, #4]
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044fe:	4629      	mov	r1, r5
 8004500:	028b      	lsls	r3, r1, #10
 8004502:	4621      	mov	r1, r4
 8004504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004508:	4621      	mov	r1, r4
 800450a:	028a      	lsls	r2, r1, #10
 800450c:	4610      	mov	r0, r2
 800450e:	4619      	mov	r1, r3
 8004510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004512:	2200      	movs	r2, #0
 8004514:	61bb      	str	r3, [r7, #24]
 8004516:	61fa      	str	r2, [r7, #28]
 8004518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800451c:	f7fc fb84 	bl	8000c28 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4613      	mov	r3, r2
 8004526:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004528:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x200>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	0c1b      	lsrs	r3, r3, #16
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	3301      	adds	r3, #1
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004538:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800453a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004542:	e002      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004544:	4b05      	ldr	r3, [pc, #20]	@ (800455c <HAL_RCC_GetSysClockFreq+0x204>)
 8004546:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800454a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800454c:	4618      	mov	r0, r3
 800454e:	3750      	adds	r7, #80	@ 0x50
 8004550:	46bd      	mov	sp, r7
 8004552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004556:	bf00      	nop
 8004558:	40023800 	.word	0x40023800
 800455c:	00f42400 	.word	0x00f42400
 8004560:	007a1200 	.word	0x007a1200

08004564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004568:	4b03      	ldr	r3, [pc, #12]	@ (8004578 <HAL_RCC_GetHCLKFreq+0x14>)
 800456a:	681b      	ldr	r3, [r3, #0]
}
 800456c:	4618      	mov	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20000004 	.word	0x20000004

0800457c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004580:	f7ff fff0 	bl	8004564 <HAL_RCC_GetHCLKFreq>
 8004584:	4602      	mov	r2, r0
 8004586:	4b05      	ldr	r3, [pc, #20]	@ (800459c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	0a9b      	lsrs	r3, r3, #10
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	4903      	ldr	r1, [pc, #12]	@ (80045a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004592:	5ccb      	ldrb	r3, [r1, r3]
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004598:	4618      	mov	r0, r3
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40023800 	.word	0x40023800
 80045a0:	08008ea4 	.word	0x08008ea4

080045a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045a8:	f7ff ffdc 	bl	8004564 <HAL_RCC_GetHCLKFreq>
 80045ac:	4602      	mov	r2, r0
 80045ae:	4b05      	ldr	r3, [pc, #20]	@ (80045c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	0b5b      	lsrs	r3, r3, #13
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	4903      	ldr	r1, [pc, #12]	@ (80045c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045ba:	5ccb      	ldrb	r3, [r1, r3]
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40023800 	.word	0x40023800
 80045c8:	08008ea4 	.word	0x08008ea4

080045cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e041      	b.n	8004662 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fe f86c 	bl	80026d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3304      	adds	r3, #4
 8004608:	4619      	mov	r1, r3
 800460a:	4610      	mov	r0, r2
 800460c:	f000 fbd8 	bl	8004dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e041      	b.n	8004700 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f839 	bl	8004708 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2202      	movs	r2, #2
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3304      	adds	r3, #4
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f000 fb89 	bl	8004dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d109      	bne.n	8004740 <HAL_TIM_PWM_Start+0x24>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	bf14      	ite	ne
 8004738:	2301      	movne	r3, #1
 800473a:	2300      	moveq	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	e022      	b.n	8004786 <HAL_TIM_PWM_Start+0x6a>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b04      	cmp	r3, #4
 8004744:	d109      	bne.n	800475a <HAL_TIM_PWM_Start+0x3e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b01      	cmp	r3, #1
 8004750:	bf14      	ite	ne
 8004752:	2301      	movne	r3, #1
 8004754:	2300      	moveq	r3, #0
 8004756:	b2db      	uxtb	r3, r3
 8004758:	e015      	b.n	8004786 <HAL_TIM_PWM_Start+0x6a>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b08      	cmp	r3, #8
 800475e:	d109      	bne.n	8004774 <HAL_TIM_PWM_Start+0x58>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b01      	cmp	r3, #1
 800476a:	bf14      	ite	ne
 800476c:	2301      	movne	r3, #1
 800476e:	2300      	moveq	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	e008      	b.n	8004786 <HAL_TIM_PWM_Start+0x6a>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b01      	cmp	r3, #1
 800477e:	bf14      	ite	ne
 8004780:	2301      	movne	r3, #1
 8004782:	2300      	moveq	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e068      	b.n	8004860 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d104      	bne.n	800479e <HAL_TIM_PWM_Start+0x82>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800479c:	e013      	b.n	80047c6 <HAL_TIM_PWM_Start+0xaa>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d104      	bne.n	80047ae <HAL_TIM_PWM_Start+0x92>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047ac:	e00b      	b.n	80047c6 <HAL_TIM_PWM_Start+0xaa>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d104      	bne.n	80047be <HAL_TIM_PWM_Start+0xa2>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047bc:	e003      	b.n	80047c6 <HAL_TIM_PWM_Start+0xaa>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2202      	movs	r2, #2
 80047c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2201      	movs	r2, #1
 80047cc:	6839      	ldr	r1, [r7, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fda2 	bl	8005318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a23      	ldr	r2, [pc, #140]	@ (8004868 <HAL_TIM_PWM_Start+0x14c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d107      	bne.n	80047ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004868 <HAL_TIM_PWM_Start+0x14c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d018      	beq.n	800482a <HAL_TIM_PWM_Start+0x10e>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004800:	d013      	beq.n	800482a <HAL_TIM_PWM_Start+0x10e>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a19      	ldr	r2, [pc, #100]	@ (800486c <HAL_TIM_PWM_Start+0x150>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00e      	beq.n	800482a <HAL_TIM_PWM_Start+0x10e>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a17      	ldr	r2, [pc, #92]	@ (8004870 <HAL_TIM_PWM_Start+0x154>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d009      	beq.n	800482a <HAL_TIM_PWM_Start+0x10e>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a16      	ldr	r2, [pc, #88]	@ (8004874 <HAL_TIM_PWM_Start+0x158>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d004      	beq.n	800482a <HAL_TIM_PWM_Start+0x10e>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a14      	ldr	r2, [pc, #80]	@ (8004878 <HAL_TIM_PWM_Start+0x15c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d111      	bne.n	800484e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b06      	cmp	r3, #6
 800483a:	d010      	beq.n	800485e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484c:	e007      	b.n	800485e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f042 0201 	orr.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40010000 	.word	0x40010000
 800486c:	40000400 	.word	0x40000400
 8004870:	40000800 	.word	0x40000800
 8004874:	40000c00 	.word	0x40000c00
 8004878:	40014000 	.word	0x40014000

0800487c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d020      	beq.n	80048e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d01b      	beq.n	80048e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f06f 0202 	mvn.w	r2, #2
 80048b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fa5b 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 80048cc:	e005      	b.n	80048da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fa4d 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fa5e 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d020      	beq.n	800492c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01b      	beq.n	800492c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f06f 0204 	mvn.w	r2, #4
 80048fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2202      	movs	r2, #2
 8004902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fa35 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 8004918:	e005      	b.n	8004926 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fa27 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fa38 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d020      	beq.n	8004978 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01b      	beq.n	8004978 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f06f 0208 	mvn.w	r2, #8
 8004948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2204      	movs	r2, #4
 800494e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fa0f 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 8004964:	e005      	b.n	8004972 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fa01 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fa12 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f003 0310 	and.w	r3, r3, #16
 800497e:	2b00      	cmp	r3, #0
 8004980:	d020      	beq.n	80049c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f003 0310 	and.w	r3, r3, #16
 8004988:	2b00      	cmp	r3, #0
 800498a:	d01b      	beq.n	80049c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0210 	mvn.w	r2, #16
 8004994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2208      	movs	r2, #8
 800499a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f9e9 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 80049b0:	e005      	b.n	80049be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f9db 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f9ec 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00c      	beq.n	80049e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0201 	mvn.w	r2, #1
 80049e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7fd fcbc 	bl	8002360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00c      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d007      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fd76 	bl	80054f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00c      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d007      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f9bd 	bl	8004daa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00c      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d007      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0220 	mvn.w	r2, #32
 8004a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fd48 	bl	80054e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a54:	bf00      	nop
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e0ae      	b.n	8004bd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b0c      	cmp	r3, #12
 8004a86:	f200 809f 	bhi.w	8004bc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a90:	08004ac5 	.word	0x08004ac5
 8004a94:	08004bc9 	.word	0x08004bc9
 8004a98:	08004bc9 	.word	0x08004bc9
 8004a9c:	08004bc9 	.word	0x08004bc9
 8004aa0:	08004b05 	.word	0x08004b05
 8004aa4:	08004bc9 	.word	0x08004bc9
 8004aa8:	08004bc9 	.word	0x08004bc9
 8004aac:	08004bc9 	.word	0x08004bc9
 8004ab0:	08004b47 	.word	0x08004b47
 8004ab4:	08004bc9 	.word	0x08004bc9
 8004ab8:	08004bc9 	.word	0x08004bc9
 8004abc:	08004bc9 	.word	0x08004bc9
 8004ac0:	08004b87 	.word	0x08004b87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f9fe 	bl	8004ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0208 	orr.w	r2, r2, #8
 8004ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699a      	ldr	r2, [r3, #24]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0204 	bic.w	r2, r2, #4
 8004aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6999      	ldr	r1, [r3, #24]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	619a      	str	r2, [r3, #24]
      break;
 8004b02:	e064      	b.n	8004bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fa44 	bl	8004f98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6999      	ldr	r1, [r3, #24]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	021a      	lsls	r2, r3, #8
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	619a      	str	r2, [r3, #24]
      break;
 8004b44:	e043      	b.n	8004bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fa8f 	bl	8005070 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69da      	ldr	r2, [r3, #28]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0208 	orr.w	r2, r2, #8
 8004b60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0204 	bic.w	r2, r2, #4
 8004b70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69d9      	ldr	r1, [r3, #28]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	61da      	str	r2, [r3, #28]
      break;
 8004b84:	e023      	b.n	8004bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fad9 	bl	8005144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69da      	ldr	r2, [r3, #28]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69d9      	ldr	r1, [r3, #28]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	021a      	lsls	r2, r3, #8
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	61da      	str	r2, [r3, #28]
      break;
 8004bc6:	e002      	b.n	8004bce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	75fb      	strb	r3, [r7, #23]
      break;
 8004bcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_TIM_ConfigClockSource+0x1c>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e0b4      	b.n	8004d66 <HAL_TIM_ConfigClockSource+0x186>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c34:	d03e      	beq.n	8004cb4 <HAL_TIM_ConfigClockSource+0xd4>
 8004c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c3a:	f200 8087 	bhi.w	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c42:	f000 8086 	beq.w	8004d52 <HAL_TIM_ConfigClockSource+0x172>
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4a:	d87f      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c4c:	2b70      	cmp	r3, #112	@ 0x70
 8004c4e:	d01a      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0xa6>
 8004c50:	2b70      	cmp	r3, #112	@ 0x70
 8004c52:	d87b      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c54:	2b60      	cmp	r3, #96	@ 0x60
 8004c56:	d050      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0x11a>
 8004c58:	2b60      	cmp	r3, #96	@ 0x60
 8004c5a:	d877      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c5c:	2b50      	cmp	r3, #80	@ 0x50
 8004c5e:	d03c      	beq.n	8004cda <HAL_TIM_ConfigClockSource+0xfa>
 8004c60:	2b50      	cmp	r3, #80	@ 0x50
 8004c62:	d873      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c64:	2b40      	cmp	r3, #64	@ 0x40
 8004c66:	d058      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0x13a>
 8004c68:	2b40      	cmp	r3, #64	@ 0x40
 8004c6a:	d86f      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c6c:	2b30      	cmp	r3, #48	@ 0x30
 8004c6e:	d064      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15a>
 8004c70:	2b30      	cmp	r3, #48	@ 0x30
 8004c72:	d86b      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d060      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15a>
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d867      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d05c      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15a>
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d05a      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15a>
 8004c84:	e062      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c96:	f000 fb1f 	bl	80052d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ca8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	609a      	str	r2, [r3, #8]
      break;
 8004cb2:	e04f      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cc4:	f000 fb08 	bl	80052d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cd6:	609a      	str	r2, [r3, #8]
      break;
 8004cd8:	e03c      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f000 fa7c 	bl	80051e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2150      	movs	r1, #80	@ 0x50
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fad5 	bl	80052a2 <TIM_ITRx_SetConfig>
      break;
 8004cf8:	e02c      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d06:	461a      	mov	r2, r3
 8004d08:	f000 fa9b 	bl	8005242 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2160      	movs	r1, #96	@ 0x60
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fac5 	bl	80052a2 <TIM_ITRx_SetConfig>
      break;
 8004d18:	e01c      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d26:	461a      	mov	r2, r3
 8004d28:	f000 fa5c 	bl	80051e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2140      	movs	r1, #64	@ 0x40
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fab5 	bl	80052a2 <TIM_ITRx_SetConfig>
      break;
 8004d38:	e00c      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4619      	mov	r1, r3
 8004d44:	4610      	mov	r0, r2
 8004d46:	f000 faac 	bl	80052a2 <TIM_ITRx_SetConfig>
      break;
 8004d4a:	e003      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d50:	e000      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a37      	ldr	r2, [pc, #220]	@ (8004eb0 <TIM_Base_SetConfig+0xf0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00f      	beq.n	8004df8 <TIM_Base_SetConfig+0x38>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dde:	d00b      	beq.n	8004df8 <TIM_Base_SetConfig+0x38>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a34      	ldr	r2, [pc, #208]	@ (8004eb4 <TIM_Base_SetConfig+0xf4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d007      	beq.n	8004df8 <TIM_Base_SetConfig+0x38>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a33      	ldr	r2, [pc, #204]	@ (8004eb8 <TIM_Base_SetConfig+0xf8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d003      	beq.n	8004df8 <TIM_Base_SetConfig+0x38>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a32      	ldr	r2, [pc, #200]	@ (8004ebc <TIM_Base_SetConfig+0xfc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d108      	bne.n	8004e0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a28      	ldr	r2, [pc, #160]	@ (8004eb0 <TIM_Base_SetConfig+0xf0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01b      	beq.n	8004e4a <TIM_Base_SetConfig+0x8a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e18:	d017      	beq.n	8004e4a <TIM_Base_SetConfig+0x8a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a25      	ldr	r2, [pc, #148]	@ (8004eb4 <TIM_Base_SetConfig+0xf4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d013      	beq.n	8004e4a <TIM_Base_SetConfig+0x8a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a24      	ldr	r2, [pc, #144]	@ (8004eb8 <TIM_Base_SetConfig+0xf8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00f      	beq.n	8004e4a <TIM_Base_SetConfig+0x8a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a23      	ldr	r2, [pc, #140]	@ (8004ebc <TIM_Base_SetConfig+0xfc>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00b      	beq.n	8004e4a <TIM_Base_SetConfig+0x8a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a22      	ldr	r2, [pc, #136]	@ (8004ec0 <TIM_Base_SetConfig+0x100>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d007      	beq.n	8004e4a <TIM_Base_SetConfig+0x8a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a21      	ldr	r2, [pc, #132]	@ (8004ec4 <TIM_Base_SetConfig+0x104>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d003      	beq.n	8004e4a <TIM_Base_SetConfig+0x8a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a20      	ldr	r2, [pc, #128]	@ (8004ec8 <TIM_Base_SetConfig+0x108>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d108      	bne.n	8004e5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8004eb0 <TIM_Base_SetConfig+0xf0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d103      	bne.n	8004e8a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f043 0204 	orr.w	r2, r3, #4
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	601a      	str	r2, [r3, #0]
}
 8004ea2:	bf00      	nop
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40010000 	.word	0x40010000
 8004eb4:	40000400 	.word	0x40000400
 8004eb8:	40000800 	.word	0x40000800
 8004ebc:	40000c00 	.word	0x40000c00
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	40014400 	.word	0x40014400
 8004ec8:	40014800 	.word	0x40014800

08004ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f023 0201 	bic.w	r2, r3, #1
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0303 	bic.w	r3, r3, #3
 8004f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f023 0302 	bic.w	r3, r3, #2
 8004f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a1c      	ldr	r2, [pc, #112]	@ (8004f94 <TIM_OC1_SetConfig+0xc8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d10c      	bne.n	8004f42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f023 0308 	bic.w	r3, r3, #8
 8004f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f023 0304 	bic.w	r3, r3, #4
 8004f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a13      	ldr	r2, [pc, #76]	@ (8004f94 <TIM_OC1_SetConfig+0xc8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d111      	bne.n	8004f6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	621a      	str	r2, [r3, #32]
}
 8004f88:	bf00      	nop
 8004f8a:	371c      	adds	r7, #28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	40010000 	.word	0x40010000

08004f98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	f023 0210 	bic.w	r2, r3, #16
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	021b      	lsls	r3, r3, #8
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f023 0320 	bic.w	r3, r3, #32
 8004fe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800506c <TIM_OC2_SetConfig+0xd4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d10d      	bne.n	8005014 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005012:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a15      	ldr	r2, [pc, #84]	@ (800506c <TIM_OC2_SetConfig+0xd4>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d113      	bne.n	8005044 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800502a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	621a      	str	r2, [r3, #32]
}
 800505e:	bf00      	nop
 8005060:	371c      	adds	r7, #28
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40010000 	.word	0x40010000

08005070 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800509e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0303 	bic.w	r3, r3, #3
 80050a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005140 <TIM_OC3_SetConfig+0xd0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d10d      	bne.n	80050ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a14      	ldr	r2, [pc, #80]	@ (8005140 <TIM_OC3_SetConfig+0xd0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d113      	bne.n	800511a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	621a      	str	r2, [r3, #32]
}
 8005134:	bf00      	nop
 8005136:	371c      	adds	r7, #28
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	40010000 	.word	0x40010000

08005144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800517a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800518e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	031b      	lsls	r3, r3, #12
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a10      	ldr	r2, [pc, #64]	@ (80051e0 <TIM_OC4_SetConfig+0x9c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d109      	bne.n	80051b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	019b      	lsls	r3, r3, #6
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	621a      	str	r2, [r3, #32]
}
 80051d2:	bf00      	nop
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40010000 	.word	0x40010000

080051e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f023 0201 	bic.w	r2, r3, #1
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800520e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f023 030a 	bic.w	r3, r3, #10
 8005220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4313      	orrs	r3, r2
 8005228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	621a      	str	r2, [r3, #32]
}
 8005236:	bf00      	nop
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005242:	b480      	push	{r7}
 8005244:	b087      	sub	sp, #28
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	f023 0210 	bic.w	r2, r3, #16
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800526c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	031b      	lsls	r3, r3, #12
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800527e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	621a      	str	r2, [r3, #32]
}
 8005296:	bf00      	nop
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	f043 0307 	orr.w	r3, r3, #7
 80052c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	609a      	str	r2, [r3, #8]
}
 80052cc:	bf00      	nop
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	021a      	lsls	r2, r3, #8
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	431a      	orrs	r2, r3
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4313      	orrs	r3, r2
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	609a      	str	r2, [r3, #8]
}
 800530c:	bf00      	nop
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	2201      	movs	r2, #1
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1a      	ldr	r2, [r3, #32]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	43db      	mvns	r3, r3
 800533a:	401a      	ands	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1a      	ldr	r2, [r3, #32]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	fa01 f303 	lsl.w	r3, r1, r3
 8005350:	431a      	orrs	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
	...

08005364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005378:	2302      	movs	r3, #2
 800537a:	e050      	b.n	800541e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1c      	ldr	r2, [pc, #112]	@ (800542c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d018      	beq.n	80053f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053c8:	d013      	beq.n	80053f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a18      	ldr	r2, [pc, #96]	@ (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00e      	beq.n	80053f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a16      	ldr	r2, [pc, #88]	@ (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d009      	beq.n	80053f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a15      	ldr	r2, [pc, #84]	@ (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d004      	beq.n	80053f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a13      	ldr	r2, [pc, #76]	@ (800543c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d10c      	bne.n	800540c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	4313      	orrs	r3, r2
 8005402:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40010000 	.word	0x40010000
 8005430:	40000400 	.word	0x40000400
 8005434:	40000800 	.word	0x40000800
 8005438:	40000c00 	.word	0x40000c00
 800543c:	40014000 	.word	0x40014000

08005440 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005458:	2302      	movs	r3, #2
 800545a:	e03d      	b.n	80054d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e042      	b.n	80055a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7fd f9ea 	bl	800290c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2224      	movs	r2, #36	@ 0x24
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800554e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fdd3 	bl	80060fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005564:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	695a      	ldr	r2, [r3, #20]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005574:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005584:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08a      	sub	sp, #40	@ 0x28
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	4613      	mov	r3, r2
 80055ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b20      	cmp	r3, #32
 80055ca:	d175      	bne.n	80056b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <HAL_UART_Transmit+0x2c>
 80055d2:	88fb      	ldrh	r3, [r7, #6]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e06e      	b.n	80056ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2221      	movs	r2, #33	@ 0x21
 80055e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055ea:	f7fd fbeb 	bl	8002dc4 <HAL_GetTick>
 80055ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	88fa      	ldrh	r2, [r7, #6]
 80055f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	88fa      	ldrh	r2, [r7, #6]
 80055fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005604:	d108      	bne.n	8005618 <HAL_UART_Transmit+0x6c>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d104      	bne.n	8005618 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800560e:	2300      	movs	r3, #0
 8005610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	e003      	b.n	8005620 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800561c:	2300      	movs	r3, #0
 800561e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005620:	e02e      	b.n	8005680 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2200      	movs	r2, #0
 800562a:	2180      	movs	r1, #128	@ 0x80
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 fb37 	bl	8005ca0 <UART_WaitOnFlagUntilTimeout>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e03a      	b.n	80056ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10b      	bne.n	8005662 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005658:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	3302      	adds	r3, #2
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	e007      	b.n	8005672 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	781a      	ldrb	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	3301      	adds	r3, #1
 8005670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1cb      	bne.n	8005622 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2200      	movs	r2, #0
 8005692:	2140      	movs	r1, #64	@ 0x40
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 fb03 	bl	8005ca0 <UART_WaitOnFlagUntilTimeout>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d005      	beq.n	80056ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e006      	b.n	80056ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	e000      	b.n	80056ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80056b8:	2302      	movs	r3, #2
  }
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3720      	adds	r7, #32
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	4613      	mov	r3, r2
 80056ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d112      	bne.n	8005702 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <HAL_UART_Receive_IT+0x26>
 80056e2:	88fb      	ldrh	r3, [r7, #6]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e00b      	b.n	8005704 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056f2:	88fb      	ldrh	r3, [r7, #6]
 80056f4:	461a      	mov	r2, r3
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 fb2a 	bl	8005d52 <UART_Start_Receive_IT>
 80056fe:	4603      	mov	r3, r0
 8005700:	e000      	b.n	8005704 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005702:	2302      	movs	r3, #2
  }
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b0ba      	sub	sp, #232	@ 0xe8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005732:	2300      	movs	r3, #0
 8005734:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005738:	2300      	movs	r3, #0
 800573a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800573e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800574a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10f      	bne.n	8005772 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b00      	cmp	r3, #0
 800575c:	d009      	beq.n	8005772 <HAL_UART_IRQHandler+0x66>
 800575e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fc07 	bl	8005f7e <UART_Receive_IT>
      return;
 8005770:	e273      	b.n	8005c5a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005772:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 80de 	beq.w	8005938 <HAL_UART_IRQHandler+0x22c>
 800577c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d106      	bne.n	8005796 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800578c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 80d1 	beq.w	8005938 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00b      	beq.n	80057ba <HAL_UART_IRQHandler+0xae>
 80057a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d005      	beq.n	80057ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b2:	f043 0201 	orr.w	r2, r3, #1
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00b      	beq.n	80057de <HAL_UART_IRQHandler+0xd2>
 80057c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d6:	f043 0202 	orr.w	r2, r3, #2
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00b      	beq.n	8005802 <HAL_UART_IRQHandler+0xf6>
 80057ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fa:	f043 0204 	orr.w	r2, r3, #4
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005806:	f003 0308 	and.w	r3, r3, #8
 800580a:	2b00      	cmp	r3, #0
 800580c:	d011      	beq.n	8005832 <HAL_UART_IRQHandler+0x126>
 800580e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b00      	cmp	r3, #0
 8005818:	d105      	bne.n	8005826 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800581a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582a:	f043 0208 	orr.w	r2, r3, #8
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 820a 	beq.w	8005c50 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800583c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005840:	f003 0320 	and.w	r3, r3, #32
 8005844:	2b00      	cmp	r3, #0
 8005846:	d008      	beq.n	800585a <HAL_UART_IRQHandler+0x14e>
 8005848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800584c:	f003 0320 	and.w	r3, r3, #32
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fb92 	bl	8005f7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005864:	2b40      	cmp	r3, #64	@ 0x40
 8005866:	bf0c      	ite	eq
 8005868:	2301      	moveq	r3, #1
 800586a:	2300      	movne	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d103      	bne.n	8005886 <HAL_UART_IRQHandler+0x17a>
 800587e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005882:	2b00      	cmp	r3, #0
 8005884:	d04f      	beq.n	8005926 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fa9d 	bl	8005dc6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005896:	2b40      	cmp	r3, #64	@ 0x40
 8005898:	d141      	bne.n	800591e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3314      	adds	r3, #20
 80058a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3314      	adds	r3, #20
 80058c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80058c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80058ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058d6:	e841 2300 	strex	r3, r2, [r1]
 80058da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80058de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1d9      	bne.n	800589a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d013      	beq.n	8005916 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f2:	4a8a      	ldr	r2, [pc, #552]	@ (8005b1c <HAL_UART_IRQHandler+0x410>)
 80058f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fd ffd1 	bl	80038a2 <HAL_DMA_Abort_IT>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d016      	beq.n	8005934 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800590a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005910:	4610      	mov	r0, r2
 8005912:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005914:	e00e      	b.n	8005934 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f9ac 	bl	8005c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800591c:	e00a      	b.n	8005934 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f9a8 	bl	8005c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005924:	e006      	b.n	8005934 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f9a4 	bl	8005c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005932:	e18d      	b.n	8005c50 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005934:	bf00      	nop
    return;
 8005936:	e18b      	b.n	8005c50 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800593c:	2b01      	cmp	r3, #1
 800593e:	f040 8167 	bne.w	8005c10 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005946:	f003 0310 	and.w	r3, r3, #16
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 8160 	beq.w	8005c10 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8159 	beq.w	8005c10 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800595e:	2300      	movs	r3, #0
 8005960:	60bb      	str	r3, [r7, #8]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60bb      	str	r3, [r7, #8]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	60bb      	str	r3, [r7, #8]
 8005972:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800597e:	2b40      	cmp	r3, #64	@ 0x40
 8005980:	f040 80ce 	bne.w	8005b20 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005990:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 80a9 	beq.w	8005aec <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800599e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059a2:	429a      	cmp	r2, r3
 80059a4:	f080 80a2 	bcs.w	8005aec <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059ba:	f000 8088 	beq.w	8005ace <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	330c      	adds	r3, #12
 80059c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80059ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80059f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1d9      	bne.n	80059be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3314      	adds	r3, #20
 8005a10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a1c:	f023 0301 	bic.w	r3, r3, #1
 8005a20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3314      	adds	r3, #20
 8005a2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a2e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a32:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a34:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e1      	bne.n	8005a0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3314      	adds	r3, #20
 8005a4c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3314      	adds	r3, #20
 8005a66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a72:	e841 2300 	strex	r3, r2, [r1]
 8005a76:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1e3      	bne.n	8005a46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	330c      	adds	r3, #12
 8005a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a9e:	f023 0310 	bic.w	r3, r3, #16
 8005aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	330c      	adds	r3, #12
 8005aac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005ab0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ab2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ab6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005abe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e3      	bne.n	8005a8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fd fe7a 	bl	80037c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f8cf 	bl	8005c88 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005aea:	e0b3      	b.n	8005c54 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005af0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005af4:	429a      	cmp	r2, r3
 8005af6:	f040 80ad 	bne.w	8005c54 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b04:	f040 80a6 	bne.w	8005c54 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f8b7 	bl	8005c88 <HAL_UARTEx_RxEventCallback>
      return;
 8005b1a:	e09b      	b.n	8005c54 <HAL_UART_IRQHandler+0x548>
 8005b1c:	08005e8d 	.word	0x08005e8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 808e 	beq.w	8005c58 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8089 	beq.w	8005c58 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	330c      	adds	r3, #12
 8005b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b50:	e853 3f00 	ldrex	r3, [r3]
 8005b54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	330c      	adds	r3, #12
 8005b66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1e3      	bne.n	8005b46 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3314      	adds	r3, #20
 8005b84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	e853 3f00 	ldrex	r3, [r3]
 8005b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	f023 0301 	bic.w	r3, r3, #1
 8005b94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3314      	adds	r3, #20
 8005b9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ba2:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ba8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005baa:	e841 2300 	strex	r3, r2, [r1]
 8005bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1e3      	bne.n	8005b7e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0310 	bic.w	r3, r3, #16
 8005bda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	330c      	adds	r3, #12
 8005be4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005be8:	61fa      	str	r2, [r7, #28]
 8005bea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bec:	69b9      	ldr	r1, [r7, #24]
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	e841 2300 	strex	r3, r2, [r1]
 8005bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1e3      	bne.n	8005bc4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c06:	4619      	mov	r1, r3
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f83d 	bl	8005c88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c0e:	e023      	b.n	8005c58 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d009      	beq.n	8005c30 <HAL_UART_IRQHandler+0x524>
 8005c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f940 	bl	8005eae <UART_Transmit_IT>
    return;
 8005c2e:	e014      	b.n	8005c5a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00e      	beq.n	8005c5a <HAL_UART_IRQHandler+0x54e>
 8005c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d008      	beq.n	8005c5a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f980 	bl	8005f4e <UART_EndTransmit_IT>
    return;
 8005c4e:	e004      	b.n	8005c5a <HAL_UART_IRQHandler+0x54e>
    return;
 8005c50:	bf00      	nop
 8005c52:	e002      	b.n	8005c5a <HAL_UART_IRQHandler+0x54e>
      return;
 8005c54:	bf00      	nop
 8005c56:	e000      	b.n	8005c5a <HAL_UART_IRQHandler+0x54e>
      return;
 8005c58:	bf00      	nop
  }
}
 8005c5a:	37e8      	adds	r7, #232	@ 0xe8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	4613      	mov	r3, r2
 8005cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb0:	e03b      	b.n	8005d2a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb8:	d037      	beq.n	8005d2a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cba:	f7fd f883 	bl	8002dc4 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	6a3a      	ldr	r2, [r7, #32]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d302      	bcc.n	8005cd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e03a      	b.n	8005d4a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f003 0304 	and.w	r3, r3, #4
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d023      	beq.n	8005d2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b80      	cmp	r3, #128	@ 0x80
 8005ce6:	d020      	beq.n	8005d2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b40      	cmp	r3, #64	@ 0x40
 8005cec:	d01d      	beq.n	8005d2a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d116      	bne.n	8005d2a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 f857 	bl	8005dc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e00f      	b.n	8005d4a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4013      	ands	r3, r2
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	bf0c      	ite	eq
 8005d3a:	2301      	moveq	r3, #1
 8005d3c:	2300      	movne	r3, #0
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	79fb      	ldrb	r3, [r7, #7]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d0b4      	beq.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b085      	sub	sp, #20
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	88fa      	ldrh	r2, [r7, #6]
 8005d6a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	88fa      	ldrh	r2, [r7, #6]
 8005d70:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2222      	movs	r2, #34	@ 0x22
 8005d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d007      	beq.n	8005d98 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d96:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695a      	ldr	r2, [r3, #20]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0220 	orr.w	r2, r2, #32
 8005db6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b095      	sub	sp, #84	@ 0x54
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	330c      	adds	r3, #12
 8005dd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005de4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	330c      	adds	r3, #12
 8005dec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005dee:	643a      	str	r2, [r7, #64]	@ 0x40
 8005df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005df4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1e5      	bne.n	8005dce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3314      	adds	r3, #20
 8005e08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	e853 3f00 	ldrex	r3, [r3]
 8005e10:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	f023 0301 	bic.w	r3, r3, #1
 8005e18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3314      	adds	r3, #20
 8005e20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e2a:	e841 2300 	strex	r3, r2, [r1]
 8005e2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1e5      	bne.n	8005e02 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d119      	bne.n	8005e72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	330c      	adds	r3, #12
 8005e44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	e853 3f00 	ldrex	r3, [r3]
 8005e4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f023 0310 	bic.w	r3, r3, #16
 8005e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	330c      	adds	r3, #12
 8005e5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e5e:	61ba      	str	r2, [r7, #24]
 8005e60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e62:	6979      	ldr	r1, [r7, #20]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	e841 2300 	strex	r3, r2, [r1]
 8005e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1e5      	bne.n	8005e3e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e80:	bf00      	nop
 8005e82:	3754      	adds	r7, #84	@ 0x54
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7ff fee7 	bl	8005c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ea6:	bf00      	nop
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b085      	sub	sp, #20
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b21      	cmp	r3, #33	@ 0x21
 8005ec0:	d13e      	bne.n	8005f40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eca:	d114      	bne.n	8005ef6 <UART_Transmit_IT+0x48>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d110      	bne.n	8005ef6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ee8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	1c9a      	adds	r2, r3, #2
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	621a      	str	r2, [r3, #32]
 8005ef4:	e008      	b.n	8005f08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	1c59      	adds	r1, r3, #1
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6211      	str	r1, [r2, #32]
 8005f00:	781a      	ldrb	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	4619      	mov	r1, r3
 8005f16:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10f      	bne.n	8005f3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e000      	b.n	8005f42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f40:	2302      	movs	r3, #2
  }
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b082      	sub	sp, #8
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff fe76 	bl	8005c60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b08c      	sub	sp, #48	@ 0x30
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b22      	cmp	r3, #34	@ 0x22
 8005f98:	f040 80aa 	bne.w	80060f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fa4:	d115      	bne.n	8005fd2 <UART_Receive_IT+0x54>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d111      	bne.n	8005fd2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fca:	1c9a      	adds	r2, r3, #2
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fd0:	e024      	b.n	800601c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fe0:	d007      	beq.n	8005ff2 <UART_Receive_IT+0x74>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10a      	bne.n	8006000 <UART_Receive_IT+0x82>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	e008      	b.n	8006012 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800600c:	b2da      	uxtb	r2, r3
 800600e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006010:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b01      	subs	r3, #1
 8006024:	b29b      	uxth	r3, r3
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	4619      	mov	r1, r3
 800602a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800602c:	2b00      	cmp	r3, #0
 800602e:	d15d      	bne.n	80060ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0220 	bic.w	r2, r2, #32
 800603e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800604e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695a      	ldr	r2, [r3, #20]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0201 	bic.w	r2, r2, #1
 800605e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2220      	movs	r2, #32
 8006064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006072:	2b01      	cmp	r3, #1
 8006074:	d135      	bne.n	80060e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	330c      	adds	r3, #12
 8006082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	e853 3f00 	ldrex	r3, [r3]
 800608a:	613b      	str	r3, [r7, #16]
   return(result);
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f023 0310 	bic.w	r3, r3, #16
 8006092:	627b      	str	r3, [r7, #36]	@ 0x24
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	330c      	adds	r3, #12
 800609a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800609c:	623a      	str	r2, [r7, #32]
 800609e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a0:	69f9      	ldr	r1, [r7, #28]
 80060a2:	6a3a      	ldr	r2, [r7, #32]
 80060a4:	e841 2300 	strex	r3, r2, [r1]
 80060a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e5      	bne.n	800607c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0310 	and.w	r3, r3, #16
 80060ba:	2b10      	cmp	r3, #16
 80060bc:	d10a      	bne.n	80060d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060d8:	4619      	mov	r1, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff fdd4 	bl	8005c88 <HAL_UARTEx_RxEventCallback>
 80060e0:	e002      	b.n	80060e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fb fa72 	bl	80015cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	e002      	b.n	80060f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	e000      	b.n	80060f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80060f0:	2302      	movs	r3, #2
  }
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3730      	adds	r7, #48	@ 0x30
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006100:	b0c0      	sub	sp, #256	@ 0x100
 8006102:	af00      	add	r7, sp, #0
 8006104:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006118:	68d9      	ldr	r1, [r3, #12]
 800611a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	ea40 0301 	orr.w	r3, r0, r1
 8006124:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	431a      	orrs	r2, r3
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	431a      	orrs	r2, r3
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	4313      	orrs	r3, r2
 8006144:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006154:	f021 010c 	bic.w	r1, r1, #12
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006162:	430b      	orrs	r3, r1
 8006164:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006176:	6999      	ldr	r1, [r3, #24]
 8006178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	ea40 0301 	orr.w	r3, r0, r1
 8006182:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4b8f      	ldr	r3, [pc, #572]	@ (80063c8 <UART_SetConfig+0x2cc>)
 800618c:	429a      	cmp	r2, r3
 800618e:	d005      	beq.n	800619c <UART_SetConfig+0xa0>
 8006190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	4b8d      	ldr	r3, [pc, #564]	@ (80063cc <UART_SetConfig+0x2d0>)
 8006198:	429a      	cmp	r2, r3
 800619a:	d104      	bne.n	80061a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800619c:	f7fe fa02 	bl	80045a4 <HAL_RCC_GetPCLK2Freq>
 80061a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80061a4:	e003      	b.n	80061ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061a6:	f7fe f9e9 	bl	800457c <HAL_RCC_GetPCLK1Freq>
 80061aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061b8:	f040 810c 	bne.w	80063d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061c0:	2200      	movs	r2, #0
 80061c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80061ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80061ce:	4622      	mov	r2, r4
 80061d0:	462b      	mov	r3, r5
 80061d2:	1891      	adds	r1, r2, r2
 80061d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80061d6:	415b      	adcs	r3, r3
 80061d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80061de:	4621      	mov	r1, r4
 80061e0:	eb12 0801 	adds.w	r8, r2, r1
 80061e4:	4629      	mov	r1, r5
 80061e6:	eb43 0901 	adc.w	r9, r3, r1
 80061ea:	f04f 0200 	mov.w	r2, #0
 80061ee:	f04f 0300 	mov.w	r3, #0
 80061f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061fe:	4690      	mov	r8, r2
 8006200:	4699      	mov	r9, r3
 8006202:	4623      	mov	r3, r4
 8006204:	eb18 0303 	adds.w	r3, r8, r3
 8006208:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800620c:	462b      	mov	r3, r5
 800620e:	eb49 0303 	adc.w	r3, r9, r3
 8006212:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006222:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006226:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800622a:	460b      	mov	r3, r1
 800622c:	18db      	adds	r3, r3, r3
 800622e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006230:	4613      	mov	r3, r2
 8006232:	eb42 0303 	adc.w	r3, r2, r3
 8006236:	657b      	str	r3, [r7, #84]	@ 0x54
 8006238:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800623c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006240:	f7fa fcf2 	bl	8000c28 <__aeabi_uldivmod>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4b61      	ldr	r3, [pc, #388]	@ (80063d0 <UART_SetConfig+0x2d4>)
 800624a:	fba3 2302 	umull	r2, r3, r3, r2
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	011c      	lsls	r4, r3, #4
 8006252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006256:	2200      	movs	r2, #0
 8006258:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800625c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006260:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006264:	4642      	mov	r2, r8
 8006266:	464b      	mov	r3, r9
 8006268:	1891      	adds	r1, r2, r2
 800626a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800626c:	415b      	adcs	r3, r3
 800626e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006270:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006274:	4641      	mov	r1, r8
 8006276:	eb12 0a01 	adds.w	sl, r2, r1
 800627a:	4649      	mov	r1, r9
 800627c:	eb43 0b01 	adc.w	fp, r3, r1
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	f04f 0300 	mov.w	r3, #0
 8006288:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800628c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006290:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006294:	4692      	mov	sl, r2
 8006296:	469b      	mov	fp, r3
 8006298:	4643      	mov	r3, r8
 800629a:	eb1a 0303 	adds.w	r3, sl, r3
 800629e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062a2:	464b      	mov	r3, r9
 80062a4:	eb4b 0303 	adc.w	r3, fp, r3
 80062a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80062bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062c0:	460b      	mov	r3, r1
 80062c2:	18db      	adds	r3, r3, r3
 80062c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80062c6:	4613      	mov	r3, r2
 80062c8:	eb42 0303 	adc.w	r3, r2, r3
 80062cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80062d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80062d6:	f7fa fca7 	bl	8000c28 <__aeabi_uldivmod>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	4611      	mov	r1, r2
 80062e0:	4b3b      	ldr	r3, [pc, #236]	@ (80063d0 <UART_SetConfig+0x2d4>)
 80062e2:	fba3 2301 	umull	r2, r3, r3, r1
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	2264      	movs	r2, #100	@ 0x64
 80062ea:	fb02 f303 	mul.w	r3, r2, r3
 80062ee:	1acb      	subs	r3, r1, r3
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80062f6:	4b36      	ldr	r3, [pc, #216]	@ (80063d0 <UART_SetConfig+0x2d4>)
 80062f8:	fba3 2302 	umull	r2, r3, r3, r2
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006304:	441c      	add	r4, r3
 8006306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800630a:	2200      	movs	r2, #0
 800630c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006310:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006314:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006318:	4642      	mov	r2, r8
 800631a:	464b      	mov	r3, r9
 800631c:	1891      	adds	r1, r2, r2
 800631e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006320:	415b      	adcs	r3, r3
 8006322:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006324:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006328:	4641      	mov	r1, r8
 800632a:	1851      	adds	r1, r2, r1
 800632c:	6339      	str	r1, [r7, #48]	@ 0x30
 800632e:	4649      	mov	r1, r9
 8006330:	414b      	adcs	r3, r1
 8006332:	637b      	str	r3, [r7, #52]	@ 0x34
 8006334:	f04f 0200 	mov.w	r2, #0
 8006338:	f04f 0300 	mov.w	r3, #0
 800633c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006340:	4659      	mov	r1, fp
 8006342:	00cb      	lsls	r3, r1, #3
 8006344:	4651      	mov	r1, sl
 8006346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800634a:	4651      	mov	r1, sl
 800634c:	00ca      	lsls	r2, r1, #3
 800634e:	4610      	mov	r0, r2
 8006350:	4619      	mov	r1, r3
 8006352:	4603      	mov	r3, r0
 8006354:	4642      	mov	r2, r8
 8006356:	189b      	adds	r3, r3, r2
 8006358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800635c:	464b      	mov	r3, r9
 800635e:	460a      	mov	r2, r1
 8006360:	eb42 0303 	adc.w	r3, r2, r3
 8006364:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006374:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006378:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800637c:	460b      	mov	r3, r1
 800637e:	18db      	adds	r3, r3, r3
 8006380:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006382:	4613      	mov	r3, r2
 8006384:	eb42 0303 	adc.w	r3, r2, r3
 8006388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800638a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800638e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006392:	f7fa fc49 	bl	8000c28 <__aeabi_uldivmod>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4b0d      	ldr	r3, [pc, #52]	@ (80063d0 <UART_SetConfig+0x2d4>)
 800639c:	fba3 1302 	umull	r1, r3, r3, r2
 80063a0:	095b      	lsrs	r3, r3, #5
 80063a2:	2164      	movs	r1, #100	@ 0x64
 80063a4:	fb01 f303 	mul.w	r3, r1, r3
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	3332      	adds	r3, #50	@ 0x32
 80063ae:	4a08      	ldr	r2, [pc, #32]	@ (80063d0 <UART_SetConfig+0x2d4>)
 80063b0:	fba2 2303 	umull	r2, r3, r2, r3
 80063b4:	095b      	lsrs	r3, r3, #5
 80063b6:	f003 0207 	and.w	r2, r3, #7
 80063ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4422      	add	r2, r4
 80063c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063c4:	e106      	b.n	80065d4 <UART_SetConfig+0x4d8>
 80063c6:	bf00      	nop
 80063c8:	40011000 	.word	0x40011000
 80063cc:	40011400 	.word	0x40011400
 80063d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063d8:	2200      	movs	r2, #0
 80063da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80063de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80063e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80063e6:	4642      	mov	r2, r8
 80063e8:	464b      	mov	r3, r9
 80063ea:	1891      	adds	r1, r2, r2
 80063ec:	6239      	str	r1, [r7, #32]
 80063ee:	415b      	adcs	r3, r3
 80063f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063f6:	4641      	mov	r1, r8
 80063f8:	1854      	adds	r4, r2, r1
 80063fa:	4649      	mov	r1, r9
 80063fc:	eb43 0501 	adc.w	r5, r3, r1
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	00eb      	lsls	r3, r5, #3
 800640a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800640e:	00e2      	lsls	r2, r4, #3
 8006410:	4614      	mov	r4, r2
 8006412:	461d      	mov	r5, r3
 8006414:	4643      	mov	r3, r8
 8006416:	18e3      	adds	r3, r4, r3
 8006418:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800641c:	464b      	mov	r3, r9
 800641e:	eb45 0303 	adc.w	r3, r5, r3
 8006422:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006432:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006436:	f04f 0200 	mov.w	r2, #0
 800643a:	f04f 0300 	mov.w	r3, #0
 800643e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006442:	4629      	mov	r1, r5
 8006444:	008b      	lsls	r3, r1, #2
 8006446:	4621      	mov	r1, r4
 8006448:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800644c:	4621      	mov	r1, r4
 800644e:	008a      	lsls	r2, r1, #2
 8006450:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006454:	f7fa fbe8 	bl	8000c28 <__aeabi_uldivmod>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4b60      	ldr	r3, [pc, #384]	@ (80065e0 <UART_SetConfig+0x4e4>)
 800645e:	fba3 2302 	umull	r2, r3, r3, r2
 8006462:	095b      	lsrs	r3, r3, #5
 8006464:	011c      	lsls	r4, r3, #4
 8006466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800646a:	2200      	movs	r2, #0
 800646c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006470:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006474:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006478:	4642      	mov	r2, r8
 800647a:	464b      	mov	r3, r9
 800647c:	1891      	adds	r1, r2, r2
 800647e:	61b9      	str	r1, [r7, #24]
 8006480:	415b      	adcs	r3, r3
 8006482:	61fb      	str	r3, [r7, #28]
 8006484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006488:	4641      	mov	r1, r8
 800648a:	1851      	adds	r1, r2, r1
 800648c:	6139      	str	r1, [r7, #16]
 800648e:	4649      	mov	r1, r9
 8006490:	414b      	adcs	r3, r1
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	f04f 0200 	mov.w	r2, #0
 8006498:	f04f 0300 	mov.w	r3, #0
 800649c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064a0:	4659      	mov	r1, fp
 80064a2:	00cb      	lsls	r3, r1, #3
 80064a4:	4651      	mov	r1, sl
 80064a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064aa:	4651      	mov	r1, sl
 80064ac:	00ca      	lsls	r2, r1, #3
 80064ae:	4610      	mov	r0, r2
 80064b0:	4619      	mov	r1, r3
 80064b2:	4603      	mov	r3, r0
 80064b4:	4642      	mov	r2, r8
 80064b6:	189b      	adds	r3, r3, r2
 80064b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064bc:	464b      	mov	r3, r9
 80064be:	460a      	mov	r2, r1
 80064c0:	eb42 0303 	adc.w	r3, r2, r3
 80064c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80064d4:	f04f 0200 	mov.w	r2, #0
 80064d8:	f04f 0300 	mov.w	r3, #0
 80064dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80064e0:	4649      	mov	r1, r9
 80064e2:	008b      	lsls	r3, r1, #2
 80064e4:	4641      	mov	r1, r8
 80064e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064ea:	4641      	mov	r1, r8
 80064ec:	008a      	lsls	r2, r1, #2
 80064ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80064f2:	f7fa fb99 	bl	8000c28 <__aeabi_uldivmod>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4611      	mov	r1, r2
 80064fc:	4b38      	ldr	r3, [pc, #224]	@ (80065e0 <UART_SetConfig+0x4e4>)
 80064fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006502:	095b      	lsrs	r3, r3, #5
 8006504:	2264      	movs	r2, #100	@ 0x64
 8006506:	fb02 f303 	mul.w	r3, r2, r3
 800650a:	1acb      	subs	r3, r1, r3
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	3332      	adds	r3, #50	@ 0x32
 8006510:	4a33      	ldr	r2, [pc, #204]	@ (80065e0 <UART_SetConfig+0x4e4>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800651c:	441c      	add	r4, r3
 800651e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006522:	2200      	movs	r2, #0
 8006524:	673b      	str	r3, [r7, #112]	@ 0x70
 8006526:	677a      	str	r2, [r7, #116]	@ 0x74
 8006528:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800652c:	4642      	mov	r2, r8
 800652e:	464b      	mov	r3, r9
 8006530:	1891      	adds	r1, r2, r2
 8006532:	60b9      	str	r1, [r7, #8]
 8006534:	415b      	adcs	r3, r3
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800653c:	4641      	mov	r1, r8
 800653e:	1851      	adds	r1, r2, r1
 8006540:	6039      	str	r1, [r7, #0]
 8006542:	4649      	mov	r1, r9
 8006544:	414b      	adcs	r3, r1
 8006546:	607b      	str	r3, [r7, #4]
 8006548:	f04f 0200 	mov.w	r2, #0
 800654c:	f04f 0300 	mov.w	r3, #0
 8006550:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006554:	4659      	mov	r1, fp
 8006556:	00cb      	lsls	r3, r1, #3
 8006558:	4651      	mov	r1, sl
 800655a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800655e:	4651      	mov	r1, sl
 8006560:	00ca      	lsls	r2, r1, #3
 8006562:	4610      	mov	r0, r2
 8006564:	4619      	mov	r1, r3
 8006566:	4603      	mov	r3, r0
 8006568:	4642      	mov	r2, r8
 800656a:	189b      	adds	r3, r3, r2
 800656c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800656e:	464b      	mov	r3, r9
 8006570:	460a      	mov	r2, r1
 8006572:	eb42 0303 	adc.w	r3, r2, r3
 8006576:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	663b      	str	r3, [r7, #96]	@ 0x60
 8006582:	667a      	str	r2, [r7, #100]	@ 0x64
 8006584:	f04f 0200 	mov.w	r2, #0
 8006588:	f04f 0300 	mov.w	r3, #0
 800658c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006590:	4649      	mov	r1, r9
 8006592:	008b      	lsls	r3, r1, #2
 8006594:	4641      	mov	r1, r8
 8006596:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800659a:	4641      	mov	r1, r8
 800659c:	008a      	lsls	r2, r1, #2
 800659e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80065a2:	f7fa fb41 	bl	8000c28 <__aeabi_uldivmod>
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	4b0d      	ldr	r3, [pc, #52]	@ (80065e0 <UART_SetConfig+0x4e4>)
 80065ac:	fba3 1302 	umull	r1, r3, r3, r2
 80065b0:	095b      	lsrs	r3, r3, #5
 80065b2:	2164      	movs	r1, #100	@ 0x64
 80065b4:	fb01 f303 	mul.w	r3, r1, r3
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	011b      	lsls	r3, r3, #4
 80065bc:	3332      	adds	r3, #50	@ 0x32
 80065be:	4a08      	ldr	r2, [pc, #32]	@ (80065e0 <UART_SetConfig+0x4e4>)
 80065c0:	fba2 2303 	umull	r2, r3, r2, r3
 80065c4:	095b      	lsrs	r3, r3, #5
 80065c6:	f003 020f 	and.w	r2, r3, #15
 80065ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4422      	add	r2, r4
 80065d2:	609a      	str	r2, [r3, #8]
}
 80065d4:	bf00      	nop
 80065d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80065da:	46bd      	mov	sp, r7
 80065dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065e0:	51eb851f 	.word	0x51eb851f

080065e4 <atoi>:
 80065e4:	220a      	movs	r2, #10
 80065e6:	2100      	movs	r1, #0
 80065e8:	f000 b87a 	b.w	80066e0 <strtol>

080065ec <_strtol_l.isra.0>:
 80065ec:	2b24      	cmp	r3, #36	@ 0x24
 80065ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065f2:	4686      	mov	lr, r0
 80065f4:	4690      	mov	r8, r2
 80065f6:	d801      	bhi.n	80065fc <_strtol_l.isra.0+0x10>
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d106      	bne.n	800660a <_strtol_l.isra.0+0x1e>
 80065fc:	f000 fb8e 	bl	8006d1c <__errno>
 8006600:	2316      	movs	r3, #22
 8006602:	6003      	str	r3, [r0, #0]
 8006604:	2000      	movs	r0, #0
 8006606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800660a:	4834      	ldr	r0, [pc, #208]	@ (80066dc <_strtol_l.isra.0+0xf0>)
 800660c:	460d      	mov	r5, r1
 800660e:	462a      	mov	r2, r5
 8006610:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006614:	5d06      	ldrb	r6, [r0, r4]
 8006616:	f016 0608 	ands.w	r6, r6, #8
 800661a:	d1f8      	bne.n	800660e <_strtol_l.isra.0+0x22>
 800661c:	2c2d      	cmp	r4, #45	@ 0x2d
 800661e:	d110      	bne.n	8006642 <_strtol_l.isra.0+0x56>
 8006620:	782c      	ldrb	r4, [r5, #0]
 8006622:	2601      	movs	r6, #1
 8006624:	1c95      	adds	r5, r2, #2
 8006626:	f033 0210 	bics.w	r2, r3, #16
 800662a:	d115      	bne.n	8006658 <_strtol_l.isra.0+0x6c>
 800662c:	2c30      	cmp	r4, #48	@ 0x30
 800662e:	d10d      	bne.n	800664c <_strtol_l.isra.0+0x60>
 8006630:	782a      	ldrb	r2, [r5, #0]
 8006632:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006636:	2a58      	cmp	r2, #88	@ 0x58
 8006638:	d108      	bne.n	800664c <_strtol_l.isra.0+0x60>
 800663a:	786c      	ldrb	r4, [r5, #1]
 800663c:	3502      	adds	r5, #2
 800663e:	2310      	movs	r3, #16
 8006640:	e00a      	b.n	8006658 <_strtol_l.isra.0+0x6c>
 8006642:	2c2b      	cmp	r4, #43	@ 0x2b
 8006644:	bf04      	itt	eq
 8006646:	782c      	ldrbeq	r4, [r5, #0]
 8006648:	1c95      	addeq	r5, r2, #2
 800664a:	e7ec      	b.n	8006626 <_strtol_l.isra.0+0x3a>
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1f6      	bne.n	800663e <_strtol_l.isra.0+0x52>
 8006650:	2c30      	cmp	r4, #48	@ 0x30
 8006652:	bf14      	ite	ne
 8006654:	230a      	movne	r3, #10
 8006656:	2308      	moveq	r3, #8
 8006658:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800665c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006660:	2200      	movs	r2, #0
 8006662:	fbbc f9f3 	udiv	r9, ip, r3
 8006666:	4610      	mov	r0, r2
 8006668:	fb03 ca19 	mls	sl, r3, r9, ip
 800666c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006670:	2f09      	cmp	r7, #9
 8006672:	d80f      	bhi.n	8006694 <_strtol_l.isra.0+0xa8>
 8006674:	463c      	mov	r4, r7
 8006676:	42a3      	cmp	r3, r4
 8006678:	dd1b      	ble.n	80066b2 <_strtol_l.isra.0+0xc6>
 800667a:	1c57      	adds	r7, r2, #1
 800667c:	d007      	beq.n	800668e <_strtol_l.isra.0+0xa2>
 800667e:	4581      	cmp	r9, r0
 8006680:	d314      	bcc.n	80066ac <_strtol_l.isra.0+0xc0>
 8006682:	d101      	bne.n	8006688 <_strtol_l.isra.0+0x9c>
 8006684:	45a2      	cmp	sl, r4
 8006686:	db11      	blt.n	80066ac <_strtol_l.isra.0+0xc0>
 8006688:	fb00 4003 	mla	r0, r0, r3, r4
 800668c:	2201      	movs	r2, #1
 800668e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006692:	e7eb      	b.n	800666c <_strtol_l.isra.0+0x80>
 8006694:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006698:	2f19      	cmp	r7, #25
 800669a:	d801      	bhi.n	80066a0 <_strtol_l.isra.0+0xb4>
 800669c:	3c37      	subs	r4, #55	@ 0x37
 800669e:	e7ea      	b.n	8006676 <_strtol_l.isra.0+0x8a>
 80066a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80066a4:	2f19      	cmp	r7, #25
 80066a6:	d804      	bhi.n	80066b2 <_strtol_l.isra.0+0xc6>
 80066a8:	3c57      	subs	r4, #87	@ 0x57
 80066aa:	e7e4      	b.n	8006676 <_strtol_l.isra.0+0x8a>
 80066ac:	f04f 32ff 	mov.w	r2, #4294967295
 80066b0:	e7ed      	b.n	800668e <_strtol_l.isra.0+0xa2>
 80066b2:	1c53      	adds	r3, r2, #1
 80066b4:	d108      	bne.n	80066c8 <_strtol_l.isra.0+0xdc>
 80066b6:	2322      	movs	r3, #34	@ 0x22
 80066b8:	f8ce 3000 	str.w	r3, [lr]
 80066bc:	4660      	mov	r0, ip
 80066be:	f1b8 0f00 	cmp.w	r8, #0
 80066c2:	d0a0      	beq.n	8006606 <_strtol_l.isra.0+0x1a>
 80066c4:	1e69      	subs	r1, r5, #1
 80066c6:	e006      	b.n	80066d6 <_strtol_l.isra.0+0xea>
 80066c8:	b106      	cbz	r6, 80066cc <_strtol_l.isra.0+0xe0>
 80066ca:	4240      	negs	r0, r0
 80066cc:	f1b8 0f00 	cmp.w	r8, #0
 80066d0:	d099      	beq.n	8006606 <_strtol_l.isra.0+0x1a>
 80066d2:	2a00      	cmp	r2, #0
 80066d4:	d1f6      	bne.n	80066c4 <_strtol_l.isra.0+0xd8>
 80066d6:	f8c8 1000 	str.w	r1, [r8]
 80066da:	e794      	b.n	8006606 <_strtol_l.isra.0+0x1a>
 80066dc:	08008ead 	.word	0x08008ead

080066e0 <strtol>:
 80066e0:	4613      	mov	r3, r2
 80066e2:	460a      	mov	r2, r1
 80066e4:	4601      	mov	r1, r0
 80066e6:	4802      	ldr	r0, [pc, #8]	@ (80066f0 <strtol+0x10>)
 80066e8:	6800      	ldr	r0, [r0, #0]
 80066ea:	f7ff bf7f 	b.w	80065ec <_strtol_l.isra.0>
 80066ee:	bf00      	nop
 80066f0:	2000001c 	.word	0x2000001c

080066f4 <std>:
 80066f4:	2300      	movs	r3, #0
 80066f6:	b510      	push	{r4, lr}
 80066f8:	4604      	mov	r4, r0
 80066fa:	e9c0 3300 	strd	r3, r3, [r0]
 80066fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006702:	6083      	str	r3, [r0, #8]
 8006704:	8181      	strh	r1, [r0, #12]
 8006706:	6643      	str	r3, [r0, #100]	@ 0x64
 8006708:	81c2      	strh	r2, [r0, #14]
 800670a:	6183      	str	r3, [r0, #24]
 800670c:	4619      	mov	r1, r3
 800670e:	2208      	movs	r2, #8
 8006710:	305c      	adds	r0, #92	@ 0x5c
 8006712:	f000 fa23 	bl	8006b5c <memset>
 8006716:	4b0d      	ldr	r3, [pc, #52]	@ (800674c <std+0x58>)
 8006718:	6263      	str	r3, [r4, #36]	@ 0x24
 800671a:	4b0d      	ldr	r3, [pc, #52]	@ (8006750 <std+0x5c>)
 800671c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800671e:	4b0d      	ldr	r3, [pc, #52]	@ (8006754 <std+0x60>)
 8006720:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006722:	4b0d      	ldr	r3, [pc, #52]	@ (8006758 <std+0x64>)
 8006724:	6323      	str	r3, [r4, #48]	@ 0x30
 8006726:	4b0d      	ldr	r3, [pc, #52]	@ (800675c <std+0x68>)
 8006728:	6224      	str	r4, [r4, #32]
 800672a:	429c      	cmp	r4, r3
 800672c:	d006      	beq.n	800673c <std+0x48>
 800672e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006732:	4294      	cmp	r4, r2
 8006734:	d002      	beq.n	800673c <std+0x48>
 8006736:	33d0      	adds	r3, #208	@ 0xd0
 8006738:	429c      	cmp	r4, r3
 800673a:	d105      	bne.n	8006748 <std+0x54>
 800673c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006744:	f000 bb14 	b.w	8006d70 <__retarget_lock_init_recursive>
 8006748:	bd10      	pop	{r4, pc}
 800674a:	bf00      	nop
 800674c:	080069ad 	.word	0x080069ad
 8006750:	080069cf 	.word	0x080069cf
 8006754:	08006a07 	.word	0x08006a07
 8006758:	08006a2b 	.word	0x08006a2b
 800675c:	20000b40 	.word	0x20000b40

08006760 <stdio_exit_handler>:
 8006760:	4a02      	ldr	r2, [pc, #8]	@ (800676c <stdio_exit_handler+0xc>)
 8006762:	4903      	ldr	r1, [pc, #12]	@ (8006770 <stdio_exit_handler+0x10>)
 8006764:	4803      	ldr	r0, [pc, #12]	@ (8006774 <stdio_exit_handler+0x14>)
 8006766:	f000 b869 	b.w	800683c <_fwalk_sglue>
 800676a:	bf00      	nop
 800676c:	20000010 	.word	0x20000010
 8006770:	08007935 	.word	0x08007935
 8006774:	20000020 	.word	0x20000020

08006778 <cleanup_stdio>:
 8006778:	6841      	ldr	r1, [r0, #4]
 800677a:	4b0c      	ldr	r3, [pc, #48]	@ (80067ac <cleanup_stdio+0x34>)
 800677c:	4299      	cmp	r1, r3
 800677e:	b510      	push	{r4, lr}
 8006780:	4604      	mov	r4, r0
 8006782:	d001      	beq.n	8006788 <cleanup_stdio+0x10>
 8006784:	f001 f8d6 	bl	8007934 <_fflush_r>
 8006788:	68a1      	ldr	r1, [r4, #8]
 800678a:	4b09      	ldr	r3, [pc, #36]	@ (80067b0 <cleanup_stdio+0x38>)
 800678c:	4299      	cmp	r1, r3
 800678e:	d002      	beq.n	8006796 <cleanup_stdio+0x1e>
 8006790:	4620      	mov	r0, r4
 8006792:	f001 f8cf 	bl	8007934 <_fflush_r>
 8006796:	68e1      	ldr	r1, [r4, #12]
 8006798:	4b06      	ldr	r3, [pc, #24]	@ (80067b4 <cleanup_stdio+0x3c>)
 800679a:	4299      	cmp	r1, r3
 800679c:	d004      	beq.n	80067a8 <cleanup_stdio+0x30>
 800679e:	4620      	mov	r0, r4
 80067a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067a4:	f001 b8c6 	b.w	8007934 <_fflush_r>
 80067a8:	bd10      	pop	{r4, pc}
 80067aa:	bf00      	nop
 80067ac:	20000b40 	.word	0x20000b40
 80067b0:	20000ba8 	.word	0x20000ba8
 80067b4:	20000c10 	.word	0x20000c10

080067b8 <global_stdio_init.part.0>:
 80067b8:	b510      	push	{r4, lr}
 80067ba:	4b0b      	ldr	r3, [pc, #44]	@ (80067e8 <global_stdio_init.part.0+0x30>)
 80067bc:	4c0b      	ldr	r4, [pc, #44]	@ (80067ec <global_stdio_init.part.0+0x34>)
 80067be:	4a0c      	ldr	r2, [pc, #48]	@ (80067f0 <global_stdio_init.part.0+0x38>)
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	4620      	mov	r0, r4
 80067c4:	2200      	movs	r2, #0
 80067c6:	2104      	movs	r1, #4
 80067c8:	f7ff ff94 	bl	80066f4 <std>
 80067cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067d0:	2201      	movs	r2, #1
 80067d2:	2109      	movs	r1, #9
 80067d4:	f7ff ff8e 	bl	80066f4 <std>
 80067d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067dc:	2202      	movs	r2, #2
 80067de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067e2:	2112      	movs	r1, #18
 80067e4:	f7ff bf86 	b.w	80066f4 <std>
 80067e8:	20000c78 	.word	0x20000c78
 80067ec:	20000b40 	.word	0x20000b40
 80067f0:	08006761 	.word	0x08006761

080067f4 <__sfp_lock_acquire>:
 80067f4:	4801      	ldr	r0, [pc, #4]	@ (80067fc <__sfp_lock_acquire+0x8>)
 80067f6:	f000 babc 	b.w	8006d72 <__retarget_lock_acquire_recursive>
 80067fa:	bf00      	nop
 80067fc:	20000c81 	.word	0x20000c81

08006800 <__sfp_lock_release>:
 8006800:	4801      	ldr	r0, [pc, #4]	@ (8006808 <__sfp_lock_release+0x8>)
 8006802:	f000 bab7 	b.w	8006d74 <__retarget_lock_release_recursive>
 8006806:	bf00      	nop
 8006808:	20000c81 	.word	0x20000c81

0800680c <__sinit>:
 800680c:	b510      	push	{r4, lr}
 800680e:	4604      	mov	r4, r0
 8006810:	f7ff fff0 	bl	80067f4 <__sfp_lock_acquire>
 8006814:	6a23      	ldr	r3, [r4, #32]
 8006816:	b11b      	cbz	r3, 8006820 <__sinit+0x14>
 8006818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800681c:	f7ff bff0 	b.w	8006800 <__sfp_lock_release>
 8006820:	4b04      	ldr	r3, [pc, #16]	@ (8006834 <__sinit+0x28>)
 8006822:	6223      	str	r3, [r4, #32]
 8006824:	4b04      	ldr	r3, [pc, #16]	@ (8006838 <__sinit+0x2c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1f5      	bne.n	8006818 <__sinit+0xc>
 800682c:	f7ff ffc4 	bl	80067b8 <global_stdio_init.part.0>
 8006830:	e7f2      	b.n	8006818 <__sinit+0xc>
 8006832:	bf00      	nop
 8006834:	08006779 	.word	0x08006779
 8006838:	20000c78 	.word	0x20000c78

0800683c <_fwalk_sglue>:
 800683c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006840:	4607      	mov	r7, r0
 8006842:	4688      	mov	r8, r1
 8006844:	4614      	mov	r4, r2
 8006846:	2600      	movs	r6, #0
 8006848:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800684c:	f1b9 0901 	subs.w	r9, r9, #1
 8006850:	d505      	bpl.n	800685e <_fwalk_sglue+0x22>
 8006852:	6824      	ldr	r4, [r4, #0]
 8006854:	2c00      	cmp	r4, #0
 8006856:	d1f7      	bne.n	8006848 <_fwalk_sglue+0xc>
 8006858:	4630      	mov	r0, r6
 800685a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800685e:	89ab      	ldrh	r3, [r5, #12]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d907      	bls.n	8006874 <_fwalk_sglue+0x38>
 8006864:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006868:	3301      	adds	r3, #1
 800686a:	d003      	beq.n	8006874 <_fwalk_sglue+0x38>
 800686c:	4629      	mov	r1, r5
 800686e:	4638      	mov	r0, r7
 8006870:	47c0      	blx	r8
 8006872:	4306      	orrs	r6, r0
 8006874:	3568      	adds	r5, #104	@ 0x68
 8006876:	e7e9      	b.n	800684c <_fwalk_sglue+0x10>

08006878 <iprintf>:
 8006878:	b40f      	push	{r0, r1, r2, r3}
 800687a:	b507      	push	{r0, r1, r2, lr}
 800687c:	4906      	ldr	r1, [pc, #24]	@ (8006898 <iprintf+0x20>)
 800687e:	ab04      	add	r3, sp, #16
 8006880:	6808      	ldr	r0, [r1, #0]
 8006882:	f853 2b04 	ldr.w	r2, [r3], #4
 8006886:	6881      	ldr	r1, [r0, #8]
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	f000 fd2b 	bl	80072e4 <_vfiprintf_r>
 800688e:	b003      	add	sp, #12
 8006890:	f85d eb04 	ldr.w	lr, [sp], #4
 8006894:	b004      	add	sp, #16
 8006896:	4770      	bx	lr
 8006898:	2000001c 	.word	0x2000001c

0800689c <putchar>:
 800689c:	4b02      	ldr	r3, [pc, #8]	@ (80068a8 <putchar+0xc>)
 800689e:	4601      	mov	r1, r0
 80068a0:	6818      	ldr	r0, [r3, #0]
 80068a2:	6882      	ldr	r2, [r0, #8]
 80068a4:	f001 b8e2 	b.w	8007a6c <_putc_r>
 80068a8:	2000001c 	.word	0x2000001c

080068ac <_puts_r>:
 80068ac:	6a03      	ldr	r3, [r0, #32]
 80068ae:	b570      	push	{r4, r5, r6, lr}
 80068b0:	6884      	ldr	r4, [r0, #8]
 80068b2:	4605      	mov	r5, r0
 80068b4:	460e      	mov	r6, r1
 80068b6:	b90b      	cbnz	r3, 80068bc <_puts_r+0x10>
 80068b8:	f7ff ffa8 	bl	800680c <__sinit>
 80068bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068be:	07db      	lsls	r3, r3, #31
 80068c0:	d405      	bmi.n	80068ce <_puts_r+0x22>
 80068c2:	89a3      	ldrh	r3, [r4, #12]
 80068c4:	0598      	lsls	r0, r3, #22
 80068c6:	d402      	bmi.n	80068ce <_puts_r+0x22>
 80068c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068ca:	f000 fa52 	bl	8006d72 <__retarget_lock_acquire_recursive>
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	0719      	lsls	r1, r3, #28
 80068d2:	d502      	bpl.n	80068da <_puts_r+0x2e>
 80068d4:	6923      	ldr	r3, [r4, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d135      	bne.n	8006946 <_puts_r+0x9a>
 80068da:	4621      	mov	r1, r4
 80068dc:	4628      	mov	r0, r5
 80068de:	f000 f8e7 	bl	8006ab0 <__swsetup_r>
 80068e2:	b380      	cbz	r0, 8006946 <_puts_r+0x9a>
 80068e4:	f04f 35ff 	mov.w	r5, #4294967295
 80068e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068ea:	07da      	lsls	r2, r3, #31
 80068ec:	d405      	bmi.n	80068fa <_puts_r+0x4e>
 80068ee:	89a3      	ldrh	r3, [r4, #12]
 80068f0:	059b      	lsls	r3, r3, #22
 80068f2:	d402      	bmi.n	80068fa <_puts_r+0x4e>
 80068f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068f6:	f000 fa3d 	bl	8006d74 <__retarget_lock_release_recursive>
 80068fa:	4628      	mov	r0, r5
 80068fc:	bd70      	pop	{r4, r5, r6, pc}
 80068fe:	2b00      	cmp	r3, #0
 8006900:	da04      	bge.n	800690c <_puts_r+0x60>
 8006902:	69a2      	ldr	r2, [r4, #24]
 8006904:	429a      	cmp	r2, r3
 8006906:	dc17      	bgt.n	8006938 <_puts_r+0x8c>
 8006908:	290a      	cmp	r1, #10
 800690a:	d015      	beq.n	8006938 <_puts_r+0x8c>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	6022      	str	r2, [r4, #0]
 8006912:	7019      	strb	r1, [r3, #0]
 8006914:	68a3      	ldr	r3, [r4, #8]
 8006916:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800691a:	3b01      	subs	r3, #1
 800691c:	60a3      	str	r3, [r4, #8]
 800691e:	2900      	cmp	r1, #0
 8006920:	d1ed      	bne.n	80068fe <_puts_r+0x52>
 8006922:	2b00      	cmp	r3, #0
 8006924:	da11      	bge.n	800694a <_puts_r+0x9e>
 8006926:	4622      	mov	r2, r4
 8006928:	210a      	movs	r1, #10
 800692a:	4628      	mov	r0, r5
 800692c:	f000 f881 	bl	8006a32 <__swbuf_r>
 8006930:	3001      	adds	r0, #1
 8006932:	d0d7      	beq.n	80068e4 <_puts_r+0x38>
 8006934:	250a      	movs	r5, #10
 8006936:	e7d7      	b.n	80068e8 <_puts_r+0x3c>
 8006938:	4622      	mov	r2, r4
 800693a:	4628      	mov	r0, r5
 800693c:	f000 f879 	bl	8006a32 <__swbuf_r>
 8006940:	3001      	adds	r0, #1
 8006942:	d1e7      	bne.n	8006914 <_puts_r+0x68>
 8006944:	e7ce      	b.n	80068e4 <_puts_r+0x38>
 8006946:	3e01      	subs	r6, #1
 8006948:	e7e4      	b.n	8006914 <_puts_r+0x68>
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	6022      	str	r2, [r4, #0]
 8006950:	220a      	movs	r2, #10
 8006952:	701a      	strb	r2, [r3, #0]
 8006954:	e7ee      	b.n	8006934 <_puts_r+0x88>
	...

08006958 <puts>:
 8006958:	4b02      	ldr	r3, [pc, #8]	@ (8006964 <puts+0xc>)
 800695a:	4601      	mov	r1, r0
 800695c:	6818      	ldr	r0, [r3, #0]
 800695e:	f7ff bfa5 	b.w	80068ac <_puts_r>
 8006962:	bf00      	nop
 8006964:	2000001c 	.word	0x2000001c

08006968 <siprintf>:
 8006968:	b40e      	push	{r1, r2, r3}
 800696a:	b510      	push	{r4, lr}
 800696c:	b09d      	sub	sp, #116	@ 0x74
 800696e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006970:	9002      	str	r0, [sp, #8]
 8006972:	9006      	str	r0, [sp, #24]
 8006974:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006978:	480a      	ldr	r0, [pc, #40]	@ (80069a4 <siprintf+0x3c>)
 800697a:	9107      	str	r1, [sp, #28]
 800697c:	9104      	str	r1, [sp, #16]
 800697e:	490a      	ldr	r1, [pc, #40]	@ (80069a8 <siprintf+0x40>)
 8006980:	f853 2b04 	ldr.w	r2, [r3], #4
 8006984:	9105      	str	r1, [sp, #20]
 8006986:	2400      	movs	r4, #0
 8006988:	a902      	add	r1, sp, #8
 800698a:	6800      	ldr	r0, [r0, #0]
 800698c:	9301      	str	r3, [sp, #4]
 800698e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006990:	f000 fb82 	bl	8007098 <_svfiprintf_r>
 8006994:	9b02      	ldr	r3, [sp, #8]
 8006996:	701c      	strb	r4, [r3, #0]
 8006998:	b01d      	add	sp, #116	@ 0x74
 800699a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800699e:	b003      	add	sp, #12
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	2000001c 	.word	0x2000001c
 80069a8:	ffff0208 	.word	0xffff0208

080069ac <__sread>:
 80069ac:	b510      	push	{r4, lr}
 80069ae:	460c      	mov	r4, r1
 80069b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b4:	f000 f98e 	bl	8006cd4 <_read_r>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	bfab      	itete	ge
 80069bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80069be:	89a3      	ldrhlt	r3, [r4, #12]
 80069c0:	181b      	addge	r3, r3, r0
 80069c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80069c6:	bfac      	ite	ge
 80069c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80069ca:	81a3      	strhlt	r3, [r4, #12]
 80069cc:	bd10      	pop	{r4, pc}

080069ce <__swrite>:
 80069ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d2:	461f      	mov	r7, r3
 80069d4:	898b      	ldrh	r3, [r1, #12]
 80069d6:	05db      	lsls	r3, r3, #23
 80069d8:	4605      	mov	r5, r0
 80069da:	460c      	mov	r4, r1
 80069dc:	4616      	mov	r6, r2
 80069de:	d505      	bpl.n	80069ec <__swrite+0x1e>
 80069e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069e4:	2302      	movs	r3, #2
 80069e6:	2200      	movs	r2, #0
 80069e8:	f000 f962 	bl	8006cb0 <_lseek_r>
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069f6:	81a3      	strh	r3, [r4, #12]
 80069f8:	4632      	mov	r2, r6
 80069fa:	463b      	mov	r3, r7
 80069fc:	4628      	mov	r0, r5
 80069fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a02:	f000 b979 	b.w	8006cf8 <_write_r>

08006a06 <__sseek>:
 8006a06:	b510      	push	{r4, lr}
 8006a08:	460c      	mov	r4, r1
 8006a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a0e:	f000 f94f 	bl	8006cb0 <_lseek_r>
 8006a12:	1c43      	adds	r3, r0, #1
 8006a14:	89a3      	ldrh	r3, [r4, #12]
 8006a16:	bf15      	itete	ne
 8006a18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a22:	81a3      	strheq	r3, [r4, #12]
 8006a24:	bf18      	it	ne
 8006a26:	81a3      	strhne	r3, [r4, #12]
 8006a28:	bd10      	pop	{r4, pc}

08006a2a <__sclose>:
 8006a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a2e:	f000 b92f 	b.w	8006c90 <_close_r>

08006a32 <__swbuf_r>:
 8006a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a34:	460e      	mov	r6, r1
 8006a36:	4614      	mov	r4, r2
 8006a38:	4605      	mov	r5, r0
 8006a3a:	b118      	cbz	r0, 8006a44 <__swbuf_r+0x12>
 8006a3c:	6a03      	ldr	r3, [r0, #32]
 8006a3e:	b90b      	cbnz	r3, 8006a44 <__swbuf_r+0x12>
 8006a40:	f7ff fee4 	bl	800680c <__sinit>
 8006a44:	69a3      	ldr	r3, [r4, #24]
 8006a46:	60a3      	str	r3, [r4, #8]
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	071a      	lsls	r2, r3, #28
 8006a4c:	d501      	bpl.n	8006a52 <__swbuf_r+0x20>
 8006a4e:	6923      	ldr	r3, [r4, #16]
 8006a50:	b943      	cbnz	r3, 8006a64 <__swbuf_r+0x32>
 8006a52:	4621      	mov	r1, r4
 8006a54:	4628      	mov	r0, r5
 8006a56:	f000 f82b 	bl	8006ab0 <__swsetup_r>
 8006a5a:	b118      	cbz	r0, 8006a64 <__swbuf_r+0x32>
 8006a5c:	f04f 37ff 	mov.w	r7, #4294967295
 8006a60:	4638      	mov	r0, r7
 8006a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	6922      	ldr	r2, [r4, #16]
 8006a68:	1a98      	subs	r0, r3, r2
 8006a6a:	6963      	ldr	r3, [r4, #20]
 8006a6c:	b2f6      	uxtb	r6, r6
 8006a6e:	4283      	cmp	r3, r0
 8006a70:	4637      	mov	r7, r6
 8006a72:	dc05      	bgt.n	8006a80 <__swbuf_r+0x4e>
 8006a74:	4621      	mov	r1, r4
 8006a76:	4628      	mov	r0, r5
 8006a78:	f000 ff5c 	bl	8007934 <_fflush_r>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	d1ed      	bne.n	8006a5c <__swbuf_r+0x2a>
 8006a80:	68a3      	ldr	r3, [r4, #8]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	60a3      	str	r3, [r4, #8]
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	6022      	str	r2, [r4, #0]
 8006a8c:	701e      	strb	r6, [r3, #0]
 8006a8e:	6962      	ldr	r2, [r4, #20]
 8006a90:	1c43      	adds	r3, r0, #1
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d004      	beq.n	8006aa0 <__swbuf_r+0x6e>
 8006a96:	89a3      	ldrh	r3, [r4, #12]
 8006a98:	07db      	lsls	r3, r3, #31
 8006a9a:	d5e1      	bpl.n	8006a60 <__swbuf_r+0x2e>
 8006a9c:	2e0a      	cmp	r6, #10
 8006a9e:	d1df      	bne.n	8006a60 <__swbuf_r+0x2e>
 8006aa0:	4621      	mov	r1, r4
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	f000 ff46 	bl	8007934 <_fflush_r>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d0d9      	beq.n	8006a60 <__swbuf_r+0x2e>
 8006aac:	e7d6      	b.n	8006a5c <__swbuf_r+0x2a>
	...

08006ab0 <__swsetup_r>:
 8006ab0:	b538      	push	{r3, r4, r5, lr}
 8006ab2:	4b29      	ldr	r3, [pc, #164]	@ (8006b58 <__swsetup_r+0xa8>)
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	460c      	mov	r4, r1
 8006aba:	b118      	cbz	r0, 8006ac4 <__swsetup_r+0x14>
 8006abc:	6a03      	ldr	r3, [r0, #32]
 8006abe:	b90b      	cbnz	r3, 8006ac4 <__swsetup_r+0x14>
 8006ac0:	f7ff fea4 	bl	800680c <__sinit>
 8006ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac8:	0719      	lsls	r1, r3, #28
 8006aca:	d422      	bmi.n	8006b12 <__swsetup_r+0x62>
 8006acc:	06da      	lsls	r2, r3, #27
 8006ace:	d407      	bmi.n	8006ae0 <__swsetup_r+0x30>
 8006ad0:	2209      	movs	r2, #9
 8006ad2:	602a      	str	r2, [r5, #0]
 8006ad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ad8:	81a3      	strh	r3, [r4, #12]
 8006ada:	f04f 30ff 	mov.w	r0, #4294967295
 8006ade:	e033      	b.n	8006b48 <__swsetup_r+0x98>
 8006ae0:	0758      	lsls	r0, r3, #29
 8006ae2:	d512      	bpl.n	8006b0a <__swsetup_r+0x5a>
 8006ae4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ae6:	b141      	cbz	r1, 8006afa <__swsetup_r+0x4a>
 8006ae8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006aec:	4299      	cmp	r1, r3
 8006aee:	d002      	beq.n	8006af6 <__swsetup_r+0x46>
 8006af0:	4628      	mov	r0, r5
 8006af2:	f000 f975 	bl	8006de0 <_free_r>
 8006af6:	2300      	movs	r3, #0
 8006af8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006afa:	89a3      	ldrh	r3, [r4, #12]
 8006afc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b00:	81a3      	strh	r3, [r4, #12]
 8006b02:	2300      	movs	r3, #0
 8006b04:	6063      	str	r3, [r4, #4]
 8006b06:	6923      	ldr	r3, [r4, #16]
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	f043 0308 	orr.w	r3, r3, #8
 8006b10:	81a3      	strh	r3, [r4, #12]
 8006b12:	6923      	ldr	r3, [r4, #16]
 8006b14:	b94b      	cbnz	r3, 8006b2a <__swsetup_r+0x7a>
 8006b16:	89a3      	ldrh	r3, [r4, #12]
 8006b18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b20:	d003      	beq.n	8006b2a <__swsetup_r+0x7a>
 8006b22:	4621      	mov	r1, r4
 8006b24:	4628      	mov	r0, r5
 8006b26:	f000 ff65 	bl	80079f4 <__smakebuf_r>
 8006b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b2e:	f013 0201 	ands.w	r2, r3, #1
 8006b32:	d00a      	beq.n	8006b4a <__swsetup_r+0x9a>
 8006b34:	2200      	movs	r2, #0
 8006b36:	60a2      	str	r2, [r4, #8]
 8006b38:	6962      	ldr	r2, [r4, #20]
 8006b3a:	4252      	negs	r2, r2
 8006b3c:	61a2      	str	r2, [r4, #24]
 8006b3e:	6922      	ldr	r2, [r4, #16]
 8006b40:	b942      	cbnz	r2, 8006b54 <__swsetup_r+0xa4>
 8006b42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b46:	d1c5      	bne.n	8006ad4 <__swsetup_r+0x24>
 8006b48:	bd38      	pop	{r3, r4, r5, pc}
 8006b4a:	0799      	lsls	r1, r3, #30
 8006b4c:	bf58      	it	pl
 8006b4e:	6962      	ldrpl	r2, [r4, #20]
 8006b50:	60a2      	str	r2, [r4, #8]
 8006b52:	e7f4      	b.n	8006b3e <__swsetup_r+0x8e>
 8006b54:	2000      	movs	r0, #0
 8006b56:	e7f7      	b.n	8006b48 <__swsetup_r+0x98>
 8006b58:	2000001c 	.word	0x2000001c

08006b5c <memset>:
 8006b5c:	4402      	add	r2, r0
 8006b5e:	4603      	mov	r3, r0
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d100      	bne.n	8006b66 <memset+0xa>
 8006b64:	4770      	bx	lr
 8006b66:	f803 1b01 	strb.w	r1, [r3], #1
 8006b6a:	e7f9      	b.n	8006b60 <memset+0x4>

08006b6c <strchr>:
 8006b6c:	b2c9      	uxtb	r1, r1
 8006b6e:	4603      	mov	r3, r0
 8006b70:	4618      	mov	r0, r3
 8006b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b76:	b112      	cbz	r2, 8006b7e <strchr+0x12>
 8006b78:	428a      	cmp	r2, r1
 8006b7a:	d1f9      	bne.n	8006b70 <strchr+0x4>
 8006b7c:	4770      	bx	lr
 8006b7e:	2900      	cmp	r1, #0
 8006b80:	bf18      	it	ne
 8006b82:	2000      	movne	r0, #0
 8006b84:	4770      	bx	lr

08006b86 <strncmp>:
 8006b86:	b510      	push	{r4, lr}
 8006b88:	b16a      	cbz	r2, 8006ba6 <strncmp+0x20>
 8006b8a:	3901      	subs	r1, #1
 8006b8c:	1884      	adds	r4, r0, r2
 8006b8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b92:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d103      	bne.n	8006ba2 <strncmp+0x1c>
 8006b9a:	42a0      	cmp	r0, r4
 8006b9c:	d001      	beq.n	8006ba2 <strncmp+0x1c>
 8006b9e:	2a00      	cmp	r2, #0
 8006ba0:	d1f5      	bne.n	8006b8e <strncmp+0x8>
 8006ba2:	1ad0      	subs	r0, r2, r3
 8006ba4:	bd10      	pop	{r4, pc}
 8006ba6:	4610      	mov	r0, r2
 8006ba8:	e7fc      	b.n	8006ba4 <strncmp+0x1e>
	...

08006bac <strtok>:
 8006bac:	4b16      	ldr	r3, [pc, #88]	@ (8006c08 <strtok+0x5c>)
 8006bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb2:	681f      	ldr	r7, [r3, #0]
 8006bb4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	460e      	mov	r6, r1
 8006bba:	b9ec      	cbnz	r4, 8006bf8 <strtok+0x4c>
 8006bbc:	2050      	movs	r0, #80	@ 0x50
 8006bbe:	f000 f959 	bl	8006e74 <malloc>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	6478      	str	r0, [r7, #68]	@ 0x44
 8006bc6:	b920      	cbnz	r0, 8006bd2 <strtok+0x26>
 8006bc8:	4b10      	ldr	r3, [pc, #64]	@ (8006c0c <strtok+0x60>)
 8006bca:	4811      	ldr	r0, [pc, #68]	@ (8006c10 <strtok+0x64>)
 8006bcc:	215b      	movs	r1, #91	@ 0x5b
 8006bce:	f000 f8e9 	bl	8006da4 <__assert_func>
 8006bd2:	e9c0 4400 	strd	r4, r4, [r0]
 8006bd6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006bda:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006bde:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006be2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006be6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006bea:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006bee:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006bf2:	6184      	str	r4, [r0, #24]
 8006bf4:	7704      	strb	r4, [r0, #28]
 8006bf6:	6244      	str	r4, [r0, #36]	@ 0x24
 8006bf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c04:	f000 b806 	b.w	8006c14 <__strtok_r>
 8006c08:	2000001c 	.word	0x2000001c
 8006c0c:	08008fad 	.word	0x08008fad
 8006c10:	08008fc4 	.word	0x08008fc4

08006c14 <__strtok_r>:
 8006c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c16:	4604      	mov	r4, r0
 8006c18:	b908      	cbnz	r0, 8006c1e <__strtok_r+0xa>
 8006c1a:	6814      	ldr	r4, [r2, #0]
 8006c1c:	b144      	cbz	r4, 8006c30 <__strtok_r+0x1c>
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006c24:	460f      	mov	r7, r1
 8006c26:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006c2a:	b91e      	cbnz	r6, 8006c34 <__strtok_r+0x20>
 8006c2c:	b965      	cbnz	r5, 8006c48 <__strtok_r+0x34>
 8006c2e:	6015      	str	r5, [r2, #0]
 8006c30:	2000      	movs	r0, #0
 8006c32:	e005      	b.n	8006c40 <__strtok_r+0x2c>
 8006c34:	42b5      	cmp	r5, r6
 8006c36:	d1f6      	bne.n	8006c26 <__strtok_r+0x12>
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1f0      	bne.n	8006c1e <__strtok_r+0xa>
 8006c3c:	6014      	str	r4, [r2, #0]
 8006c3e:	7003      	strb	r3, [r0, #0]
 8006c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c42:	461c      	mov	r4, r3
 8006c44:	e00c      	b.n	8006c60 <__strtok_r+0x4c>
 8006c46:	b91d      	cbnz	r5, 8006c50 <__strtok_r+0x3c>
 8006c48:	4627      	mov	r7, r4
 8006c4a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c4e:	460e      	mov	r6, r1
 8006c50:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006c54:	42ab      	cmp	r3, r5
 8006c56:	d1f6      	bne.n	8006c46 <__strtok_r+0x32>
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0f2      	beq.n	8006c42 <__strtok_r+0x2e>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	703b      	strb	r3, [r7, #0]
 8006c60:	6014      	str	r4, [r2, #0]
 8006c62:	e7ed      	b.n	8006c40 <__strtok_r+0x2c>

08006c64 <strstr>:
 8006c64:	780a      	ldrb	r2, [r1, #0]
 8006c66:	b570      	push	{r4, r5, r6, lr}
 8006c68:	b96a      	cbnz	r2, 8006c86 <strstr+0x22>
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d109      	bne.n	8006c84 <strstr+0x20>
 8006c70:	460c      	mov	r4, r1
 8006c72:	4605      	mov	r5, r0
 8006c74:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d0f6      	beq.n	8006c6a <strstr+0x6>
 8006c7c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006c80:	429e      	cmp	r6, r3
 8006c82:	d0f7      	beq.n	8006c74 <strstr+0x10>
 8006c84:	3001      	adds	r0, #1
 8006c86:	7803      	ldrb	r3, [r0, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1ef      	bne.n	8006c6c <strstr+0x8>
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	e7ec      	b.n	8006c6a <strstr+0x6>

08006c90 <_close_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	4d06      	ldr	r5, [pc, #24]	@ (8006cac <_close_r+0x1c>)
 8006c94:	2300      	movs	r3, #0
 8006c96:	4604      	mov	r4, r0
 8006c98:	4608      	mov	r0, r1
 8006c9a:	602b      	str	r3, [r5, #0]
 8006c9c:	f7fb ff86 	bl	8002bac <_close>
 8006ca0:	1c43      	adds	r3, r0, #1
 8006ca2:	d102      	bne.n	8006caa <_close_r+0x1a>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	b103      	cbz	r3, 8006caa <_close_r+0x1a>
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	bd38      	pop	{r3, r4, r5, pc}
 8006cac:	20000c7c 	.word	0x20000c7c

08006cb0 <_lseek_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4d07      	ldr	r5, [pc, #28]	@ (8006cd0 <_lseek_r+0x20>)
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	4608      	mov	r0, r1
 8006cb8:	4611      	mov	r1, r2
 8006cba:	2200      	movs	r2, #0
 8006cbc:	602a      	str	r2, [r5, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	f7fb ff9b 	bl	8002bfa <_lseek>
 8006cc4:	1c43      	adds	r3, r0, #1
 8006cc6:	d102      	bne.n	8006cce <_lseek_r+0x1e>
 8006cc8:	682b      	ldr	r3, [r5, #0]
 8006cca:	b103      	cbz	r3, 8006cce <_lseek_r+0x1e>
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	bd38      	pop	{r3, r4, r5, pc}
 8006cd0:	20000c7c 	.word	0x20000c7c

08006cd4 <_read_r>:
 8006cd4:	b538      	push	{r3, r4, r5, lr}
 8006cd6:	4d07      	ldr	r5, [pc, #28]	@ (8006cf4 <_read_r+0x20>)
 8006cd8:	4604      	mov	r4, r0
 8006cda:	4608      	mov	r0, r1
 8006cdc:	4611      	mov	r1, r2
 8006cde:	2200      	movs	r2, #0
 8006ce0:	602a      	str	r2, [r5, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f7fb ff29 	bl	8002b3a <_read>
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	d102      	bne.n	8006cf2 <_read_r+0x1e>
 8006cec:	682b      	ldr	r3, [r5, #0]
 8006cee:	b103      	cbz	r3, 8006cf2 <_read_r+0x1e>
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
 8006cf4:	20000c7c 	.word	0x20000c7c

08006cf8 <_write_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	4d07      	ldr	r5, [pc, #28]	@ (8006d18 <_write_r+0x20>)
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	4608      	mov	r0, r1
 8006d00:	4611      	mov	r1, r2
 8006d02:	2200      	movs	r2, #0
 8006d04:	602a      	str	r2, [r5, #0]
 8006d06:	461a      	mov	r2, r3
 8006d08:	f7fb ff34 	bl	8002b74 <_write>
 8006d0c:	1c43      	adds	r3, r0, #1
 8006d0e:	d102      	bne.n	8006d16 <_write_r+0x1e>
 8006d10:	682b      	ldr	r3, [r5, #0]
 8006d12:	b103      	cbz	r3, 8006d16 <_write_r+0x1e>
 8006d14:	6023      	str	r3, [r4, #0]
 8006d16:	bd38      	pop	{r3, r4, r5, pc}
 8006d18:	20000c7c 	.word	0x20000c7c

08006d1c <__errno>:
 8006d1c:	4b01      	ldr	r3, [pc, #4]	@ (8006d24 <__errno+0x8>)
 8006d1e:	6818      	ldr	r0, [r3, #0]
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	2000001c 	.word	0x2000001c

08006d28 <__libc_init_array>:
 8006d28:	b570      	push	{r4, r5, r6, lr}
 8006d2a:	4d0d      	ldr	r5, [pc, #52]	@ (8006d60 <__libc_init_array+0x38>)
 8006d2c:	4c0d      	ldr	r4, [pc, #52]	@ (8006d64 <__libc_init_array+0x3c>)
 8006d2e:	1b64      	subs	r4, r4, r5
 8006d30:	10a4      	asrs	r4, r4, #2
 8006d32:	2600      	movs	r6, #0
 8006d34:	42a6      	cmp	r6, r4
 8006d36:	d109      	bne.n	8006d4c <__libc_init_array+0x24>
 8006d38:	4d0b      	ldr	r5, [pc, #44]	@ (8006d68 <__libc_init_array+0x40>)
 8006d3a:	4c0c      	ldr	r4, [pc, #48]	@ (8006d6c <__libc_init_array+0x44>)
 8006d3c:	f001 fef6 	bl	8008b2c <_init>
 8006d40:	1b64      	subs	r4, r4, r5
 8006d42:	10a4      	asrs	r4, r4, #2
 8006d44:	2600      	movs	r6, #0
 8006d46:	42a6      	cmp	r6, r4
 8006d48:	d105      	bne.n	8006d56 <__libc_init_array+0x2e>
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
 8006d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d50:	4798      	blx	r3
 8006d52:	3601      	adds	r6, #1
 8006d54:	e7ee      	b.n	8006d34 <__libc_init_array+0xc>
 8006d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d5a:	4798      	blx	r3
 8006d5c:	3601      	adds	r6, #1
 8006d5e:	e7f2      	b.n	8006d46 <__libc_init_array+0x1e>
 8006d60:	080090d8 	.word	0x080090d8
 8006d64:	080090d8 	.word	0x080090d8
 8006d68:	080090d8 	.word	0x080090d8
 8006d6c:	080090dc 	.word	0x080090dc

08006d70 <__retarget_lock_init_recursive>:
 8006d70:	4770      	bx	lr

08006d72 <__retarget_lock_acquire_recursive>:
 8006d72:	4770      	bx	lr

08006d74 <__retarget_lock_release_recursive>:
 8006d74:	4770      	bx	lr

08006d76 <strcpy>:
 8006d76:	4603      	mov	r3, r0
 8006d78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d7c:	f803 2b01 	strb.w	r2, [r3], #1
 8006d80:	2a00      	cmp	r2, #0
 8006d82:	d1f9      	bne.n	8006d78 <strcpy+0x2>
 8006d84:	4770      	bx	lr

08006d86 <memcpy>:
 8006d86:	440a      	add	r2, r1
 8006d88:	4291      	cmp	r1, r2
 8006d8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d8e:	d100      	bne.n	8006d92 <memcpy+0xc>
 8006d90:	4770      	bx	lr
 8006d92:	b510      	push	{r4, lr}
 8006d94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d9c:	4291      	cmp	r1, r2
 8006d9e:	d1f9      	bne.n	8006d94 <memcpy+0xe>
 8006da0:	bd10      	pop	{r4, pc}
	...

08006da4 <__assert_func>:
 8006da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006da6:	4614      	mov	r4, r2
 8006da8:	461a      	mov	r2, r3
 8006daa:	4b09      	ldr	r3, [pc, #36]	@ (8006dd0 <__assert_func+0x2c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4605      	mov	r5, r0
 8006db0:	68d8      	ldr	r0, [r3, #12]
 8006db2:	b14c      	cbz	r4, 8006dc8 <__assert_func+0x24>
 8006db4:	4b07      	ldr	r3, [pc, #28]	@ (8006dd4 <__assert_func+0x30>)
 8006db6:	9100      	str	r1, [sp, #0]
 8006db8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006dbc:	4906      	ldr	r1, [pc, #24]	@ (8006dd8 <__assert_func+0x34>)
 8006dbe:	462b      	mov	r3, r5
 8006dc0:	f000 fde0 	bl	8007984 <fiprintf>
 8006dc4:	f000 fed2 	bl	8007b6c <abort>
 8006dc8:	4b04      	ldr	r3, [pc, #16]	@ (8006ddc <__assert_func+0x38>)
 8006dca:	461c      	mov	r4, r3
 8006dcc:	e7f3      	b.n	8006db6 <__assert_func+0x12>
 8006dce:	bf00      	nop
 8006dd0:	2000001c 	.word	0x2000001c
 8006dd4:	0800901e 	.word	0x0800901e
 8006dd8:	0800902b 	.word	0x0800902b
 8006ddc:	08009059 	.word	0x08009059

08006de0 <_free_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	4605      	mov	r5, r0
 8006de4:	2900      	cmp	r1, #0
 8006de6:	d041      	beq.n	8006e6c <_free_r+0x8c>
 8006de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dec:	1f0c      	subs	r4, r1, #4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	bfb8      	it	lt
 8006df2:	18e4      	addlt	r4, r4, r3
 8006df4:	f000 f8e8 	bl	8006fc8 <__malloc_lock>
 8006df8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e70 <_free_r+0x90>)
 8006dfa:	6813      	ldr	r3, [r2, #0]
 8006dfc:	b933      	cbnz	r3, 8006e0c <_free_r+0x2c>
 8006dfe:	6063      	str	r3, [r4, #4]
 8006e00:	6014      	str	r4, [r2, #0]
 8006e02:	4628      	mov	r0, r5
 8006e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e08:	f000 b8e4 	b.w	8006fd4 <__malloc_unlock>
 8006e0c:	42a3      	cmp	r3, r4
 8006e0e:	d908      	bls.n	8006e22 <_free_r+0x42>
 8006e10:	6820      	ldr	r0, [r4, #0]
 8006e12:	1821      	adds	r1, r4, r0
 8006e14:	428b      	cmp	r3, r1
 8006e16:	bf01      	itttt	eq
 8006e18:	6819      	ldreq	r1, [r3, #0]
 8006e1a:	685b      	ldreq	r3, [r3, #4]
 8006e1c:	1809      	addeq	r1, r1, r0
 8006e1e:	6021      	streq	r1, [r4, #0]
 8006e20:	e7ed      	b.n	8006dfe <_free_r+0x1e>
 8006e22:	461a      	mov	r2, r3
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	b10b      	cbz	r3, 8006e2c <_free_r+0x4c>
 8006e28:	42a3      	cmp	r3, r4
 8006e2a:	d9fa      	bls.n	8006e22 <_free_r+0x42>
 8006e2c:	6811      	ldr	r1, [r2, #0]
 8006e2e:	1850      	adds	r0, r2, r1
 8006e30:	42a0      	cmp	r0, r4
 8006e32:	d10b      	bne.n	8006e4c <_free_r+0x6c>
 8006e34:	6820      	ldr	r0, [r4, #0]
 8006e36:	4401      	add	r1, r0
 8006e38:	1850      	adds	r0, r2, r1
 8006e3a:	4283      	cmp	r3, r0
 8006e3c:	6011      	str	r1, [r2, #0]
 8006e3e:	d1e0      	bne.n	8006e02 <_free_r+0x22>
 8006e40:	6818      	ldr	r0, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	6053      	str	r3, [r2, #4]
 8006e46:	4408      	add	r0, r1
 8006e48:	6010      	str	r0, [r2, #0]
 8006e4a:	e7da      	b.n	8006e02 <_free_r+0x22>
 8006e4c:	d902      	bls.n	8006e54 <_free_r+0x74>
 8006e4e:	230c      	movs	r3, #12
 8006e50:	602b      	str	r3, [r5, #0]
 8006e52:	e7d6      	b.n	8006e02 <_free_r+0x22>
 8006e54:	6820      	ldr	r0, [r4, #0]
 8006e56:	1821      	adds	r1, r4, r0
 8006e58:	428b      	cmp	r3, r1
 8006e5a:	bf04      	itt	eq
 8006e5c:	6819      	ldreq	r1, [r3, #0]
 8006e5e:	685b      	ldreq	r3, [r3, #4]
 8006e60:	6063      	str	r3, [r4, #4]
 8006e62:	bf04      	itt	eq
 8006e64:	1809      	addeq	r1, r1, r0
 8006e66:	6021      	streq	r1, [r4, #0]
 8006e68:	6054      	str	r4, [r2, #4]
 8006e6a:	e7ca      	b.n	8006e02 <_free_r+0x22>
 8006e6c:	bd38      	pop	{r3, r4, r5, pc}
 8006e6e:	bf00      	nop
 8006e70:	20000c88 	.word	0x20000c88

08006e74 <malloc>:
 8006e74:	4b02      	ldr	r3, [pc, #8]	@ (8006e80 <malloc+0xc>)
 8006e76:	4601      	mov	r1, r0
 8006e78:	6818      	ldr	r0, [r3, #0]
 8006e7a:	f000 b825 	b.w	8006ec8 <_malloc_r>
 8006e7e:	bf00      	nop
 8006e80:	2000001c 	.word	0x2000001c

08006e84 <sbrk_aligned>:
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	4e0f      	ldr	r6, [pc, #60]	@ (8006ec4 <sbrk_aligned+0x40>)
 8006e88:	460c      	mov	r4, r1
 8006e8a:	6831      	ldr	r1, [r6, #0]
 8006e8c:	4605      	mov	r5, r0
 8006e8e:	b911      	cbnz	r1, 8006e96 <sbrk_aligned+0x12>
 8006e90:	f000 fe5c 	bl	8007b4c <_sbrk_r>
 8006e94:	6030      	str	r0, [r6, #0]
 8006e96:	4621      	mov	r1, r4
 8006e98:	4628      	mov	r0, r5
 8006e9a:	f000 fe57 	bl	8007b4c <_sbrk_r>
 8006e9e:	1c43      	adds	r3, r0, #1
 8006ea0:	d103      	bne.n	8006eaa <sbrk_aligned+0x26>
 8006ea2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	bd70      	pop	{r4, r5, r6, pc}
 8006eaa:	1cc4      	adds	r4, r0, #3
 8006eac:	f024 0403 	bic.w	r4, r4, #3
 8006eb0:	42a0      	cmp	r0, r4
 8006eb2:	d0f8      	beq.n	8006ea6 <sbrk_aligned+0x22>
 8006eb4:	1a21      	subs	r1, r4, r0
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f000 fe48 	bl	8007b4c <_sbrk_r>
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	d1f2      	bne.n	8006ea6 <sbrk_aligned+0x22>
 8006ec0:	e7ef      	b.n	8006ea2 <sbrk_aligned+0x1e>
 8006ec2:	bf00      	nop
 8006ec4:	20000c84 	.word	0x20000c84

08006ec8 <_malloc_r>:
 8006ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ecc:	1ccd      	adds	r5, r1, #3
 8006ece:	f025 0503 	bic.w	r5, r5, #3
 8006ed2:	3508      	adds	r5, #8
 8006ed4:	2d0c      	cmp	r5, #12
 8006ed6:	bf38      	it	cc
 8006ed8:	250c      	movcc	r5, #12
 8006eda:	2d00      	cmp	r5, #0
 8006edc:	4606      	mov	r6, r0
 8006ede:	db01      	blt.n	8006ee4 <_malloc_r+0x1c>
 8006ee0:	42a9      	cmp	r1, r5
 8006ee2:	d904      	bls.n	8006eee <_malloc_r+0x26>
 8006ee4:	230c      	movs	r3, #12
 8006ee6:	6033      	str	r3, [r6, #0]
 8006ee8:	2000      	movs	r0, #0
 8006eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006fc4 <_malloc_r+0xfc>
 8006ef2:	f000 f869 	bl	8006fc8 <__malloc_lock>
 8006ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8006efa:	461c      	mov	r4, r3
 8006efc:	bb44      	cbnz	r4, 8006f50 <_malloc_r+0x88>
 8006efe:	4629      	mov	r1, r5
 8006f00:	4630      	mov	r0, r6
 8006f02:	f7ff ffbf 	bl	8006e84 <sbrk_aligned>
 8006f06:	1c43      	adds	r3, r0, #1
 8006f08:	4604      	mov	r4, r0
 8006f0a:	d158      	bne.n	8006fbe <_malloc_r+0xf6>
 8006f0c:	f8d8 4000 	ldr.w	r4, [r8]
 8006f10:	4627      	mov	r7, r4
 8006f12:	2f00      	cmp	r7, #0
 8006f14:	d143      	bne.n	8006f9e <_malloc_r+0xd6>
 8006f16:	2c00      	cmp	r4, #0
 8006f18:	d04b      	beq.n	8006fb2 <_malloc_r+0xea>
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	4639      	mov	r1, r7
 8006f1e:	4630      	mov	r0, r6
 8006f20:	eb04 0903 	add.w	r9, r4, r3
 8006f24:	f000 fe12 	bl	8007b4c <_sbrk_r>
 8006f28:	4581      	cmp	r9, r0
 8006f2a:	d142      	bne.n	8006fb2 <_malloc_r+0xea>
 8006f2c:	6821      	ldr	r1, [r4, #0]
 8006f2e:	1a6d      	subs	r5, r5, r1
 8006f30:	4629      	mov	r1, r5
 8006f32:	4630      	mov	r0, r6
 8006f34:	f7ff ffa6 	bl	8006e84 <sbrk_aligned>
 8006f38:	3001      	adds	r0, #1
 8006f3a:	d03a      	beq.n	8006fb2 <_malloc_r+0xea>
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	442b      	add	r3, r5
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	f8d8 3000 	ldr.w	r3, [r8]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	bb62      	cbnz	r2, 8006fa4 <_malloc_r+0xdc>
 8006f4a:	f8c8 7000 	str.w	r7, [r8]
 8006f4e:	e00f      	b.n	8006f70 <_malloc_r+0xa8>
 8006f50:	6822      	ldr	r2, [r4, #0]
 8006f52:	1b52      	subs	r2, r2, r5
 8006f54:	d420      	bmi.n	8006f98 <_malloc_r+0xd0>
 8006f56:	2a0b      	cmp	r2, #11
 8006f58:	d917      	bls.n	8006f8a <_malloc_r+0xc2>
 8006f5a:	1961      	adds	r1, r4, r5
 8006f5c:	42a3      	cmp	r3, r4
 8006f5e:	6025      	str	r5, [r4, #0]
 8006f60:	bf18      	it	ne
 8006f62:	6059      	strne	r1, [r3, #4]
 8006f64:	6863      	ldr	r3, [r4, #4]
 8006f66:	bf08      	it	eq
 8006f68:	f8c8 1000 	streq.w	r1, [r8]
 8006f6c:	5162      	str	r2, [r4, r5]
 8006f6e:	604b      	str	r3, [r1, #4]
 8006f70:	4630      	mov	r0, r6
 8006f72:	f000 f82f 	bl	8006fd4 <__malloc_unlock>
 8006f76:	f104 000b 	add.w	r0, r4, #11
 8006f7a:	1d23      	adds	r3, r4, #4
 8006f7c:	f020 0007 	bic.w	r0, r0, #7
 8006f80:	1ac2      	subs	r2, r0, r3
 8006f82:	bf1c      	itt	ne
 8006f84:	1a1b      	subne	r3, r3, r0
 8006f86:	50a3      	strne	r3, [r4, r2]
 8006f88:	e7af      	b.n	8006eea <_malloc_r+0x22>
 8006f8a:	6862      	ldr	r2, [r4, #4]
 8006f8c:	42a3      	cmp	r3, r4
 8006f8e:	bf0c      	ite	eq
 8006f90:	f8c8 2000 	streq.w	r2, [r8]
 8006f94:	605a      	strne	r2, [r3, #4]
 8006f96:	e7eb      	b.n	8006f70 <_malloc_r+0xa8>
 8006f98:	4623      	mov	r3, r4
 8006f9a:	6864      	ldr	r4, [r4, #4]
 8006f9c:	e7ae      	b.n	8006efc <_malloc_r+0x34>
 8006f9e:	463c      	mov	r4, r7
 8006fa0:	687f      	ldr	r7, [r7, #4]
 8006fa2:	e7b6      	b.n	8006f12 <_malloc_r+0x4a>
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	42a3      	cmp	r3, r4
 8006faa:	d1fb      	bne.n	8006fa4 <_malloc_r+0xdc>
 8006fac:	2300      	movs	r3, #0
 8006fae:	6053      	str	r3, [r2, #4]
 8006fb0:	e7de      	b.n	8006f70 <_malloc_r+0xa8>
 8006fb2:	230c      	movs	r3, #12
 8006fb4:	6033      	str	r3, [r6, #0]
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f000 f80c 	bl	8006fd4 <__malloc_unlock>
 8006fbc:	e794      	b.n	8006ee8 <_malloc_r+0x20>
 8006fbe:	6005      	str	r5, [r0, #0]
 8006fc0:	e7d6      	b.n	8006f70 <_malloc_r+0xa8>
 8006fc2:	bf00      	nop
 8006fc4:	20000c88 	.word	0x20000c88

08006fc8 <__malloc_lock>:
 8006fc8:	4801      	ldr	r0, [pc, #4]	@ (8006fd0 <__malloc_lock+0x8>)
 8006fca:	f7ff bed2 	b.w	8006d72 <__retarget_lock_acquire_recursive>
 8006fce:	bf00      	nop
 8006fd0:	20000c80 	.word	0x20000c80

08006fd4 <__malloc_unlock>:
 8006fd4:	4801      	ldr	r0, [pc, #4]	@ (8006fdc <__malloc_unlock+0x8>)
 8006fd6:	f7ff becd 	b.w	8006d74 <__retarget_lock_release_recursive>
 8006fda:	bf00      	nop
 8006fdc:	20000c80 	.word	0x20000c80

08006fe0 <__ssputs_r>:
 8006fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe4:	688e      	ldr	r6, [r1, #8]
 8006fe6:	461f      	mov	r7, r3
 8006fe8:	42be      	cmp	r6, r7
 8006fea:	680b      	ldr	r3, [r1, #0]
 8006fec:	4682      	mov	sl, r0
 8006fee:	460c      	mov	r4, r1
 8006ff0:	4690      	mov	r8, r2
 8006ff2:	d82d      	bhi.n	8007050 <__ssputs_r+0x70>
 8006ff4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ff8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006ffc:	d026      	beq.n	800704c <__ssputs_r+0x6c>
 8006ffe:	6965      	ldr	r5, [r4, #20]
 8007000:	6909      	ldr	r1, [r1, #16]
 8007002:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007006:	eba3 0901 	sub.w	r9, r3, r1
 800700a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800700e:	1c7b      	adds	r3, r7, #1
 8007010:	444b      	add	r3, r9
 8007012:	106d      	asrs	r5, r5, #1
 8007014:	429d      	cmp	r5, r3
 8007016:	bf38      	it	cc
 8007018:	461d      	movcc	r5, r3
 800701a:	0553      	lsls	r3, r2, #21
 800701c:	d527      	bpl.n	800706e <__ssputs_r+0x8e>
 800701e:	4629      	mov	r1, r5
 8007020:	f7ff ff52 	bl	8006ec8 <_malloc_r>
 8007024:	4606      	mov	r6, r0
 8007026:	b360      	cbz	r0, 8007082 <__ssputs_r+0xa2>
 8007028:	6921      	ldr	r1, [r4, #16]
 800702a:	464a      	mov	r2, r9
 800702c:	f7ff feab 	bl	8006d86 <memcpy>
 8007030:	89a3      	ldrh	r3, [r4, #12]
 8007032:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800703a:	81a3      	strh	r3, [r4, #12]
 800703c:	6126      	str	r6, [r4, #16]
 800703e:	6165      	str	r5, [r4, #20]
 8007040:	444e      	add	r6, r9
 8007042:	eba5 0509 	sub.w	r5, r5, r9
 8007046:	6026      	str	r6, [r4, #0]
 8007048:	60a5      	str	r5, [r4, #8]
 800704a:	463e      	mov	r6, r7
 800704c:	42be      	cmp	r6, r7
 800704e:	d900      	bls.n	8007052 <__ssputs_r+0x72>
 8007050:	463e      	mov	r6, r7
 8007052:	6820      	ldr	r0, [r4, #0]
 8007054:	4632      	mov	r2, r6
 8007056:	4641      	mov	r1, r8
 8007058:	f000 fd3c 	bl	8007ad4 <memmove>
 800705c:	68a3      	ldr	r3, [r4, #8]
 800705e:	1b9b      	subs	r3, r3, r6
 8007060:	60a3      	str	r3, [r4, #8]
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	4433      	add	r3, r6
 8007066:	6023      	str	r3, [r4, #0]
 8007068:	2000      	movs	r0, #0
 800706a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800706e:	462a      	mov	r2, r5
 8007070:	f000 fd83 	bl	8007b7a <_realloc_r>
 8007074:	4606      	mov	r6, r0
 8007076:	2800      	cmp	r0, #0
 8007078:	d1e0      	bne.n	800703c <__ssputs_r+0x5c>
 800707a:	6921      	ldr	r1, [r4, #16]
 800707c:	4650      	mov	r0, sl
 800707e:	f7ff feaf 	bl	8006de0 <_free_r>
 8007082:	230c      	movs	r3, #12
 8007084:	f8ca 3000 	str.w	r3, [sl]
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800708e:	81a3      	strh	r3, [r4, #12]
 8007090:	f04f 30ff 	mov.w	r0, #4294967295
 8007094:	e7e9      	b.n	800706a <__ssputs_r+0x8a>
	...

08007098 <_svfiprintf_r>:
 8007098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709c:	4698      	mov	r8, r3
 800709e:	898b      	ldrh	r3, [r1, #12]
 80070a0:	061b      	lsls	r3, r3, #24
 80070a2:	b09d      	sub	sp, #116	@ 0x74
 80070a4:	4607      	mov	r7, r0
 80070a6:	460d      	mov	r5, r1
 80070a8:	4614      	mov	r4, r2
 80070aa:	d510      	bpl.n	80070ce <_svfiprintf_r+0x36>
 80070ac:	690b      	ldr	r3, [r1, #16]
 80070ae:	b973      	cbnz	r3, 80070ce <_svfiprintf_r+0x36>
 80070b0:	2140      	movs	r1, #64	@ 0x40
 80070b2:	f7ff ff09 	bl	8006ec8 <_malloc_r>
 80070b6:	6028      	str	r0, [r5, #0]
 80070b8:	6128      	str	r0, [r5, #16]
 80070ba:	b930      	cbnz	r0, 80070ca <_svfiprintf_r+0x32>
 80070bc:	230c      	movs	r3, #12
 80070be:	603b      	str	r3, [r7, #0]
 80070c0:	f04f 30ff 	mov.w	r0, #4294967295
 80070c4:	b01d      	add	sp, #116	@ 0x74
 80070c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ca:	2340      	movs	r3, #64	@ 0x40
 80070cc:	616b      	str	r3, [r5, #20]
 80070ce:	2300      	movs	r3, #0
 80070d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80070d2:	2320      	movs	r3, #32
 80070d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80070d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80070dc:	2330      	movs	r3, #48	@ 0x30
 80070de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800727c <_svfiprintf_r+0x1e4>
 80070e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80070e6:	f04f 0901 	mov.w	r9, #1
 80070ea:	4623      	mov	r3, r4
 80070ec:	469a      	mov	sl, r3
 80070ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070f2:	b10a      	cbz	r2, 80070f8 <_svfiprintf_r+0x60>
 80070f4:	2a25      	cmp	r2, #37	@ 0x25
 80070f6:	d1f9      	bne.n	80070ec <_svfiprintf_r+0x54>
 80070f8:	ebba 0b04 	subs.w	fp, sl, r4
 80070fc:	d00b      	beq.n	8007116 <_svfiprintf_r+0x7e>
 80070fe:	465b      	mov	r3, fp
 8007100:	4622      	mov	r2, r4
 8007102:	4629      	mov	r1, r5
 8007104:	4638      	mov	r0, r7
 8007106:	f7ff ff6b 	bl	8006fe0 <__ssputs_r>
 800710a:	3001      	adds	r0, #1
 800710c:	f000 80a7 	beq.w	800725e <_svfiprintf_r+0x1c6>
 8007110:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007112:	445a      	add	r2, fp
 8007114:	9209      	str	r2, [sp, #36]	@ 0x24
 8007116:	f89a 3000 	ldrb.w	r3, [sl]
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 809f 	beq.w	800725e <_svfiprintf_r+0x1c6>
 8007120:	2300      	movs	r3, #0
 8007122:	f04f 32ff 	mov.w	r2, #4294967295
 8007126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800712a:	f10a 0a01 	add.w	sl, sl, #1
 800712e:	9304      	str	r3, [sp, #16]
 8007130:	9307      	str	r3, [sp, #28]
 8007132:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007136:	931a      	str	r3, [sp, #104]	@ 0x68
 8007138:	4654      	mov	r4, sl
 800713a:	2205      	movs	r2, #5
 800713c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007140:	484e      	ldr	r0, [pc, #312]	@ (800727c <_svfiprintf_r+0x1e4>)
 8007142:	f7f9 f865 	bl	8000210 <memchr>
 8007146:	9a04      	ldr	r2, [sp, #16]
 8007148:	b9d8      	cbnz	r0, 8007182 <_svfiprintf_r+0xea>
 800714a:	06d0      	lsls	r0, r2, #27
 800714c:	bf44      	itt	mi
 800714e:	2320      	movmi	r3, #32
 8007150:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007154:	0711      	lsls	r1, r2, #28
 8007156:	bf44      	itt	mi
 8007158:	232b      	movmi	r3, #43	@ 0x2b
 800715a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800715e:	f89a 3000 	ldrb.w	r3, [sl]
 8007162:	2b2a      	cmp	r3, #42	@ 0x2a
 8007164:	d015      	beq.n	8007192 <_svfiprintf_r+0xfa>
 8007166:	9a07      	ldr	r2, [sp, #28]
 8007168:	4654      	mov	r4, sl
 800716a:	2000      	movs	r0, #0
 800716c:	f04f 0c0a 	mov.w	ip, #10
 8007170:	4621      	mov	r1, r4
 8007172:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007176:	3b30      	subs	r3, #48	@ 0x30
 8007178:	2b09      	cmp	r3, #9
 800717a:	d94b      	bls.n	8007214 <_svfiprintf_r+0x17c>
 800717c:	b1b0      	cbz	r0, 80071ac <_svfiprintf_r+0x114>
 800717e:	9207      	str	r2, [sp, #28]
 8007180:	e014      	b.n	80071ac <_svfiprintf_r+0x114>
 8007182:	eba0 0308 	sub.w	r3, r0, r8
 8007186:	fa09 f303 	lsl.w	r3, r9, r3
 800718a:	4313      	orrs	r3, r2
 800718c:	9304      	str	r3, [sp, #16]
 800718e:	46a2      	mov	sl, r4
 8007190:	e7d2      	b.n	8007138 <_svfiprintf_r+0xa0>
 8007192:	9b03      	ldr	r3, [sp, #12]
 8007194:	1d19      	adds	r1, r3, #4
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	9103      	str	r1, [sp, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	bfbb      	ittet	lt
 800719e:	425b      	neglt	r3, r3
 80071a0:	f042 0202 	orrlt.w	r2, r2, #2
 80071a4:	9307      	strge	r3, [sp, #28]
 80071a6:	9307      	strlt	r3, [sp, #28]
 80071a8:	bfb8      	it	lt
 80071aa:	9204      	strlt	r2, [sp, #16]
 80071ac:	7823      	ldrb	r3, [r4, #0]
 80071ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80071b0:	d10a      	bne.n	80071c8 <_svfiprintf_r+0x130>
 80071b2:	7863      	ldrb	r3, [r4, #1]
 80071b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80071b6:	d132      	bne.n	800721e <_svfiprintf_r+0x186>
 80071b8:	9b03      	ldr	r3, [sp, #12]
 80071ba:	1d1a      	adds	r2, r3, #4
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	9203      	str	r2, [sp, #12]
 80071c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80071c4:	3402      	adds	r4, #2
 80071c6:	9305      	str	r3, [sp, #20]
 80071c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800728c <_svfiprintf_r+0x1f4>
 80071cc:	7821      	ldrb	r1, [r4, #0]
 80071ce:	2203      	movs	r2, #3
 80071d0:	4650      	mov	r0, sl
 80071d2:	f7f9 f81d 	bl	8000210 <memchr>
 80071d6:	b138      	cbz	r0, 80071e8 <_svfiprintf_r+0x150>
 80071d8:	9b04      	ldr	r3, [sp, #16]
 80071da:	eba0 000a 	sub.w	r0, r0, sl
 80071de:	2240      	movs	r2, #64	@ 0x40
 80071e0:	4082      	lsls	r2, r0
 80071e2:	4313      	orrs	r3, r2
 80071e4:	3401      	adds	r4, #1
 80071e6:	9304      	str	r3, [sp, #16]
 80071e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ec:	4824      	ldr	r0, [pc, #144]	@ (8007280 <_svfiprintf_r+0x1e8>)
 80071ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80071f2:	2206      	movs	r2, #6
 80071f4:	f7f9 f80c 	bl	8000210 <memchr>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	d036      	beq.n	800726a <_svfiprintf_r+0x1d2>
 80071fc:	4b21      	ldr	r3, [pc, #132]	@ (8007284 <_svfiprintf_r+0x1ec>)
 80071fe:	bb1b      	cbnz	r3, 8007248 <_svfiprintf_r+0x1b0>
 8007200:	9b03      	ldr	r3, [sp, #12]
 8007202:	3307      	adds	r3, #7
 8007204:	f023 0307 	bic.w	r3, r3, #7
 8007208:	3308      	adds	r3, #8
 800720a:	9303      	str	r3, [sp, #12]
 800720c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800720e:	4433      	add	r3, r6
 8007210:	9309      	str	r3, [sp, #36]	@ 0x24
 8007212:	e76a      	b.n	80070ea <_svfiprintf_r+0x52>
 8007214:	fb0c 3202 	mla	r2, ip, r2, r3
 8007218:	460c      	mov	r4, r1
 800721a:	2001      	movs	r0, #1
 800721c:	e7a8      	b.n	8007170 <_svfiprintf_r+0xd8>
 800721e:	2300      	movs	r3, #0
 8007220:	3401      	adds	r4, #1
 8007222:	9305      	str	r3, [sp, #20]
 8007224:	4619      	mov	r1, r3
 8007226:	f04f 0c0a 	mov.w	ip, #10
 800722a:	4620      	mov	r0, r4
 800722c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007230:	3a30      	subs	r2, #48	@ 0x30
 8007232:	2a09      	cmp	r2, #9
 8007234:	d903      	bls.n	800723e <_svfiprintf_r+0x1a6>
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0c6      	beq.n	80071c8 <_svfiprintf_r+0x130>
 800723a:	9105      	str	r1, [sp, #20]
 800723c:	e7c4      	b.n	80071c8 <_svfiprintf_r+0x130>
 800723e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007242:	4604      	mov	r4, r0
 8007244:	2301      	movs	r3, #1
 8007246:	e7f0      	b.n	800722a <_svfiprintf_r+0x192>
 8007248:	ab03      	add	r3, sp, #12
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	462a      	mov	r2, r5
 800724e:	4b0e      	ldr	r3, [pc, #56]	@ (8007288 <_svfiprintf_r+0x1f0>)
 8007250:	a904      	add	r1, sp, #16
 8007252:	4638      	mov	r0, r7
 8007254:	f3af 8000 	nop.w
 8007258:	1c42      	adds	r2, r0, #1
 800725a:	4606      	mov	r6, r0
 800725c:	d1d6      	bne.n	800720c <_svfiprintf_r+0x174>
 800725e:	89ab      	ldrh	r3, [r5, #12]
 8007260:	065b      	lsls	r3, r3, #25
 8007262:	f53f af2d 	bmi.w	80070c0 <_svfiprintf_r+0x28>
 8007266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007268:	e72c      	b.n	80070c4 <_svfiprintf_r+0x2c>
 800726a:	ab03      	add	r3, sp, #12
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	462a      	mov	r2, r5
 8007270:	4b05      	ldr	r3, [pc, #20]	@ (8007288 <_svfiprintf_r+0x1f0>)
 8007272:	a904      	add	r1, sp, #16
 8007274:	4638      	mov	r0, r7
 8007276:	f000 f9bb 	bl	80075f0 <_printf_i>
 800727a:	e7ed      	b.n	8007258 <_svfiprintf_r+0x1c0>
 800727c:	0800905a 	.word	0x0800905a
 8007280:	08009064 	.word	0x08009064
 8007284:	00000000 	.word	0x00000000
 8007288:	08006fe1 	.word	0x08006fe1
 800728c:	08009060 	.word	0x08009060

08007290 <__sfputc_r>:
 8007290:	6893      	ldr	r3, [r2, #8]
 8007292:	3b01      	subs	r3, #1
 8007294:	2b00      	cmp	r3, #0
 8007296:	b410      	push	{r4}
 8007298:	6093      	str	r3, [r2, #8]
 800729a:	da08      	bge.n	80072ae <__sfputc_r+0x1e>
 800729c:	6994      	ldr	r4, [r2, #24]
 800729e:	42a3      	cmp	r3, r4
 80072a0:	db01      	blt.n	80072a6 <__sfputc_r+0x16>
 80072a2:	290a      	cmp	r1, #10
 80072a4:	d103      	bne.n	80072ae <__sfputc_r+0x1e>
 80072a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072aa:	f7ff bbc2 	b.w	8006a32 <__swbuf_r>
 80072ae:	6813      	ldr	r3, [r2, #0]
 80072b0:	1c58      	adds	r0, r3, #1
 80072b2:	6010      	str	r0, [r2, #0]
 80072b4:	7019      	strb	r1, [r3, #0]
 80072b6:	4608      	mov	r0, r1
 80072b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072bc:	4770      	bx	lr

080072be <__sfputs_r>:
 80072be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c0:	4606      	mov	r6, r0
 80072c2:	460f      	mov	r7, r1
 80072c4:	4614      	mov	r4, r2
 80072c6:	18d5      	adds	r5, r2, r3
 80072c8:	42ac      	cmp	r4, r5
 80072ca:	d101      	bne.n	80072d0 <__sfputs_r+0x12>
 80072cc:	2000      	movs	r0, #0
 80072ce:	e007      	b.n	80072e0 <__sfputs_r+0x22>
 80072d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d4:	463a      	mov	r2, r7
 80072d6:	4630      	mov	r0, r6
 80072d8:	f7ff ffda 	bl	8007290 <__sfputc_r>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	d1f3      	bne.n	80072c8 <__sfputs_r+0xa>
 80072e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072e4 <_vfiprintf_r>:
 80072e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e8:	460d      	mov	r5, r1
 80072ea:	b09d      	sub	sp, #116	@ 0x74
 80072ec:	4614      	mov	r4, r2
 80072ee:	4698      	mov	r8, r3
 80072f0:	4606      	mov	r6, r0
 80072f2:	b118      	cbz	r0, 80072fc <_vfiprintf_r+0x18>
 80072f4:	6a03      	ldr	r3, [r0, #32]
 80072f6:	b90b      	cbnz	r3, 80072fc <_vfiprintf_r+0x18>
 80072f8:	f7ff fa88 	bl	800680c <__sinit>
 80072fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072fe:	07d9      	lsls	r1, r3, #31
 8007300:	d405      	bmi.n	800730e <_vfiprintf_r+0x2a>
 8007302:	89ab      	ldrh	r3, [r5, #12]
 8007304:	059a      	lsls	r2, r3, #22
 8007306:	d402      	bmi.n	800730e <_vfiprintf_r+0x2a>
 8007308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800730a:	f7ff fd32 	bl	8006d72 <__retarget_lock_acquire_recursive>
 800730e:	89ab      	ldrh	r3, [r5, #12]
 8007310:	071b      	lsls	r3, r3, #28
 8007312:	d501      	bpl.n	8007318 <_vfiprintf_r+0x34>
 8007314:	692b      	ldr	r3, [r5, #16]
 8007316:	b99b      	cbnz	r3, 8007340 <_vfiprintf_r+0x5c>
 8007318:	4629      	mov	r1, r5
 800731a:	4630      	mov	r0, r6
 800731c:	f7ff fbc8 	bl	8006ab0 <__swsetup_r>
 8007320:	b170      	cbz	r0, 8007340 <_vfiprintf_r+0x5c>
 8007322:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007324:	07dc      	lsls	r4, r3, #31
 8007326:	d504      	bpl.n	8007332 <_vfiprintf_r+0x4e>
 8007328:	f04f 30ff 	mov.w	r0, #4294967295
 800732c:	b01d      	add	sp, #116	@ 0x74
 800732e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007332:	89ab      	ldrh	r3, [r5, #12]
 8007334:	0598      	lsls	r0, r3, #22
 8007336:	d4f7      	bmi.n	8007328 <_vfiprintf_r+0x44>
 8007338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800733a:	f7ff fd1b 	bl	8006d74 <__retarget_lock_release_recursive>
 800733e:	e7f3      	b.n	8007328 <_vfiprintf_r+0x44>
 8007340:	2300      	movs	r3, #0
 8007342:	9309      	str	r3, [sp, #36]	@ 0x24
 8007344:	2320      	movs	r3, #32
 8007346:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800734a:	f8cd 800c 	str.w	r8, [sp, #12]
 800734e:	2330      	movs	r3, #48	@ 0x30
 8007350:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007500 <_vfiprintf_r+0x21c>
 8007354:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007358:	f04f 0901 	mov.w	r9, #1
 800735c:	4623      	mov	r3, r4
 800735e:	469a      	mov	sl, r3
 8007360:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007364:	b10a      	cbz	r2, 800736a <_vfiprintf_r+0x86>
 8007366:	2a25      	cmp	r2, #37	@ 0x25
 8007368:	d1f9      	bne.n	800735e <_vfiprintf_r+0x7a>
 800736a:	ebba 0b04 	subs.w	fp, sl, r4
 800736e:	d00b      	beq.n	8007388 <_vfiprintf_r+0xa4>
 8007370:	465b      	mov	r3, fp
 8007372:	4622      	mov	r2, r4
 8007374:	4629      	mov	r1, r5
 8007376:	4630      	mov	r0, r6
 8007378:	f7ff ffa1 	bl	80072be <__sfputs_r>
 800737c:	3001      	adds	r0, #1
 800737e:	f000 80a7 	beq.w	80074d0 <_vfiprintf_r+0x1ec>
 8007382:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007384:	445a      	add	r2, fp
 8007386:	9209      	str	r2, [sp, #36]	@ 0x24
 8007388:	f89a 3000 	ldrb.w	r3, [sl]
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 809f 	beq.w	80074d0 <_vfiprintf_r+0x1ec>
 8007392:	2300      	movs	r3, #0
 8007394:	f04f 32ff 	mov.w	r2, #4294967295
 8007398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800739c:	f10a 0a01 	add.w	sl, sl, #1
 80073a0:	9304      	str	r3, [sp, #16]
 80073a2:	9307      	str	r3, [sp, #28]
 80073a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80073aa:	4654      	mov	r4, sl
 80073ac:	2205      	movs	r2, #5
 80073ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b2:	4853      	ldr	r0, [pc, #332]	@ (8007500 <_vfiprintf_r+0x21c>)
 80073b4:	f7f8 ff2c 	bl	8000210 <memchr>
 80073b8:	9a04      	ldr	r2, [sp, #16]
 80073ba:	b9d8      	cbnz	r0, 80073f4 <_vfiprintf_r+0x110>
 80073bc:	06d1      	lsls	r1, r2, #27
 80073be:	bf44      	itt	mi
 80073c0:	2320      	movmi	r3, #32
 80073c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073c6:	0713      	lsls	r3, r2, #28
 80073c8:	bf44      	itt	mi
 80073ca:	232b      	movmi	r3, #43	@ 0x2b
 80073cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073d0:	f89a 3000 	ldrb.w	r3, [sl]
 80073d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80073d6:	d015      	beq.n	8007404 <_vfiprintf_r+0x120>
 80073d8:	9a07      	ldr	r2, [sp, #28]
 80073da:	4654      	mov	r4, sl
 80073dc:	2000      	movs	r0, #0
 80073de:	f04f 0c0a 	mov.w	ip, #10
 80073e2:	4621      	mov	r1, r4
 80073e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073e8:	3b30      	subs	r3, #48	@ 0x30
 80073ea:	2b09      	cmp	r3, #9
 80073ec:	d94b      	bls.n	8007486 <_vfiprintf_r+0x1a2>
 80073ee:	b1b0      	cbz	r0, 800741e <_vfiprintf_r+0x13a>
 80073f0:	9207      	str	r2, [sp, #28]
 80073f2:	e014      	b.n	800741e <_vfiprintf_r+0x13a>
 80073f4:	eba0 0308 	sub.w	r3, r0, r8
 80073f8:	fa09 f303 	lsl.w	r3, r9, r3
 80073fc:	4313      	orrs	r3, r2
 80073fe:	9304      	str	r3, [sp, #16]
 8007400:	46a2      	mov	sl, r4
 8007402:	e7d2      	b.n	80073aa <_vfiprintf_r+0xc6>
 8007404:	9b03      	ldr	r3, [sp, #12]
 8007406:	1d19      	adds	r1, r3, #4
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	9103      	str	r1, [sp, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	bfbb      	ittet	lt
 8007410:	425b      	neglt	r3, r3
 8007412:	f042 0202 	orrlt.w	r2, r2, #2
 8007416:	9307      	strge	r3, [sp, #28]
 8007418:	9307      	strlt	r3, [sp, #28]
 800741a:	bfb8      	it	lt
 800741c:	9204      	strlt	r2, [sp, #16]
 800741e:	7823      	ldrb	r3, [r4, #0]
 8007420:	2b2e      	cmp	r3, #46	@ 0x2e
 8007422:	d10a      	bne.n	800743a <_vfiprintf_r+0x156>
 8007424:	7863      	ldrb	r3, [r4, #1]
 8007426:	2b2a      	cmp	r3, #42	@ 0x2a
 8007428:	d132      	bne.n	8007490 <_vfiprintf_r+0x1ac>
 800742a:	9b03      	ldr	r3, [sp, #12]
 800742c:	1d1a      	adds	r2, r3, #4
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	9203      	str	r2, [sp, #12]
 8007432:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007436:	3402      	adds	r4, #2
 8007438:	9305      	str	r3, [sp, #20]
 800743a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007510 <_vfiprintf_r+0x22c>
 800743e:	7821      	ldrb	r1, [r4, #0]
 8007440:	2203      	movs	r2, #3
 8007442:	4650      	mov	r0, sl
 8007444:	f7f8 fee4 	bl	8000210 <memchr>
 8007448:	b138      	cbz	r0, 800745a <_vfiprintf_r+0x176>
 800744a:	9b04      	ldr	r3, [sp, #16]
 800744c:	eba0 000a 	sub.w	r0, r0, sl
 8007450:	2240      	movs	r2, #64	@ 0x40
 8007452:	4082      	lsls	r2, r0
 8007454:	4313      	orrs	r3, r2
 8007456:	3401      	adds	r4, #1
 8007458:	9304      	str	r3, [sp, #16]
 800745a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800745e:	4829      	ldr	r0, [pc, #164]	@ (8007504 <_vfiprintf_r+0x220>)
 8007460:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007464:	2206      	movs	r2, #6
 8007466:	f7f8 fed3 	bl	8000210 <memchr>
 800746a:	2800      	cmp	r0, #0
 800746c:	d03f      	beq.n	80074ee <_vfiprintf_r+0x20a>
 800746e:	4b26      	ldr	r3, [pc, #152]	@ (8007508 <_vfiprintf_r+0x224>)
 8007470:	bb1b      	cbnz	r3, 80074ba <_vfiprintf_r+0x1d6>
 8007472:	9b03      	ldr	r3, [sp, #12]
 8007474:	3307      	adds	r3, #7
 8007476:	f023 0307 	bic.w	r3, r3, #7
 800747a:	3308      	adds	r3, #8
 800747c:	9303      	str	r3, [sp, #12]
 800747e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007480:	443b      	add	r3, r7
 8007482:	9309      	str	r3, [sp, #36]	@ 0x24
 8007484:	e76a      	b.n	800735c <_vfiprintf_r+0x78>
 8007486:	fb0c 3202 	mla	r2, ip, r2, r3
 800748a:	460c      	mov	r4, r1
 800748c:	2001      	movs	r0, #1
 800748e:	e7a8      	b.n	80073e2 <_vfiprintf_r+0xfe>
 8007490:	2300      	movs	r3, #0
 8007492:	3401      	adds	r4, #1
 8007494:	9305      	str	r3, [sp, #20]
 8007496:	4619      	mov	r1, r3
 8007498:	f04f 0c0a 	mov.w	ip, #10
 800749c:	4620      	mov	r0, r4
 800749e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074a2:	3a30      	subs	r2, #48	@ 0x30
 80074a4:	2a09      	cmp	r2, #9
 80074a6:	d903      	bls.n	80074b0 <_vfiprintf_r+0x1cc>
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d0c6      	beq.n	800743a <_vfiprintf_r+0x156>
 80074ac:	9105      	str	r1, [sp, #20]
 80074ae:	e7c4      	b.n	800743a <_vfiprintf_r+0x156>
 80074b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80074b4:	4604      	mov	r4, r0
 80074b6:	2301      	movs	r3, #1
 80074b8:	e7f0      	b.n	800749c <_vfiprintf_r+0x1b8>
 80074ba:	ab03      	add	r3, sp, #12
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	462a      	mov	r2, r5
 80074c0:	4b12      	ldr	r3, [pc, #72]	@ (800750c <_vfiprintf_r+0x228>)
 80074c2:	a904      	add	r1, sp, #16
 80074c4:	4630      	mov	r0, r6
 80074c6:	f3af 8000 	nop.w
 80074ca:	4607      	mov	r7, r0
 80074cc:	1c78      	adds	r0, r7, #1
 80074ce:	d1d6      	bne.n	800747e <_vfiprintf_r+0x19a>
 80074d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074d2:	07d9      	lsls	r1, r3, #31
 80074d4:	d405      	bmi.n	80074e2 <_vfiprintf_r+0x1fe>
 80074d6:	89ab      	ldrh	r3, [r5, #12]
 80074d8:	059a      	lsls	r2, r3, #22
 80074da:	d402      	bmi.n	80074e2 <_vfiprintf_r+0x1fe>
 80074dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074de:	f7ff fc49 	bl	8006d74 <__retarget_lock_release_recursive>
 80074e2:	89ab      	ldrh	r3, [r5, #12]
 80074e4:	065b      	lsls	r3, r3, #25
 80074e6:	f53f af1f 	bmi.w	8007328 <_vfiprintf_r+0x44>
 80074ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074ec:	e71e      	b.n	800732c <_vfiprintf_r+0x48>
 80074ee:	ab03      	add	r3, sp, #12
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	462a      	mov	r2, r5
 80074f4:	4b05      	ldr	r3, [pc, #20]	@ (800750c <_vfiprintf_r+0x228>)
 80074f6:	a904      	add	r1, sp, #16
 80074f8:	4630      	mov	r0, r6
 80074fa:	f000 f879 	bl	80075f0 <_printf_i>
 80074fe:	e7e4      	b.n	80074ca <_vfiprintf_r+0x1e6>
 8007500:	0800905a 	.word	0x0800905a
 8007504:	08009064 	.word	0x08009064
 8007508:	00000000 	.word	0x00000000
 800750c:	080072bf 	.word	0x080072bf
 8007510:	08009060 	.word	0x08009060

08007514 <_printf_common>:
 8007514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007518:	4616      	mov	r6, r2
 800751a:	4698      	mov	r8, r3
 800751c:	688a      	ldr	r2, [r1, #8]
 800751e:	690b      	ldr	r3, [r1, #16]
 8007520:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007524:	4293      	cmp	r3, r2
 8007526:	bfb8      	it	lt
 8007528:	4613      	movlt	r3, r2
 800752a:	6033      	str	r3, [r6, #0]
 800752c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007530:	4607      	mov	r7, r0
 8007532:	460c      	mov	r4, r1
 8007534:	b10a      	cbz	r2, 800753a <_printf_common+0x26>
 8007536:	3301      	adds	r3, #1
 8007538:	6033      	str	r3, [r6, #0]
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	0699      	lsls	r1, r3, #26
 800753e:	bf42      	ittt	mi
 8007540:	6833      	ldrmi	r3, [r6, #0]
 8007542:	3302      	addmi	r3, #2
 8007544:	6033      	strmi	r3, [r6, #0]
 8007546:	6825      	ldr	r5, [r4, #0]
 8007548:	f015 0506 	ands.w	r5, r5, #6
 800754c:	d106      	bne.n	800755c <_printf_common+0x48>
 800754e:	f104 0a19 	add.w	sl, r4, #25
 8007552:	68e3      	ldr	r3, [r4, #12]
 8007554:	6832      	ldr	r2, [r6, #0]
 8007556:	1a9b      	subs	r3, r3, r2
 8007558:	42ab      	cmp	r3, r5
 800755a:	dc26      	bgt.n	80075aa <_printf_common+0x96>
 800755c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007560:	6822      	ldr	r2, [r4, #0]
 8007562:	3b00      	subs	r3, #0
 8007564:	bf18      	it	ne
 8007566:	2301      	movne	r3, #1
 8007568:	0692      	lsls	r2, r2, #26
 800756a:	d42b      	bmi.n	80075c4 <_printf_common+0xb0>
 800756c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007570:	4641      	mov	r1, r8
 8007572:	4638      	mov	r0, r7
 8007574:	47c8      	blx	r9
 8007576:	3001      	adds	r0, #1
 8007578:	d01e      	beq.n	80075b8 <_printf_common+0xa4>
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	6922      	ldr	r2, [r4, #16]
 800757e:	f003 0306 	and.w	r3, r3, #6
 8007582:	2b04      	cmp	r3, #4
 8007584:	bf02      	ittt	eq
 8007586:	68e5      	ldreq	r5, [r4, #12]
 8007588:	6833      	ldreq	r3, [r6, #0]
 800758a:	1aed      	subeq	r5, r5, r3
 800758c:	68a3      	ldr	r3, [r4, #8]
 800758e:	bf0c      	ite	eq
 8007590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007594:	2500      	movne	r5, #0
 8007596:	4293      	cmp	r3, r2
 8007598:	bfc4      	itt	gt
 800759a:	1a9b      	subgt	r3, r3, r2
 800759c:	18ed      	addgt	r5, r5, r3
 800759e:	2600      	movs	r6, #0
 80075a0:	341a      	adds	r4, #26
 80075a2:	42b5      	cmp	r5, r6
 80075a4:	d11a      	bne.n	80075dc <_printf_common+0xc8>
 80075a6:	2000      	movs	r0, #0
 80075a8:	e008      	b.n	80075bc <_printf_common+0xa8>
 80075aa:	2301      	movs	r3, #1
 80075ac:	4652      	mov	r2, sl
 80075ae:	4641      	mov	r1, r8
 80075b0:	4638      	mov	r0, r7
 80075b2:	47c8      	blx	r9
 80075b4:	3001      	adds	r0, #1
 80075b6:	d103      	bne.n	80075c0 <_printf_common+0xac>
 80075b8:	f04f 30ff 	mov.w	r0, #4294967295
 80075bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c0:	3501      	adds	r5, #1
 80075c2:	e7c6      	b.n	8007552 <_printf_common+0x3e>
 80075c4:	18e1      	adds	r1, r4, r3
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	2030      	movs	r0, #48	@ 0x30
 80075ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075ce:	4422      	add	r2, r4
 80075d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075d8:	3302      	adds	r3, #2
 80075da:	e7c7      	b.n	800756c <_printf_common+0x58>
 80075dc:	2301      	movs	r3, #1
 80075de:	4622      	mov	r2, r4
 80075e0:	4641      	mov	r1, r8
 80075e2:	4638      	mov	r0, r7
 80075e4:	47c8      	blx	r9
 80075e6:	3001      	adds	r0, #1
 80075e8:	d0e6      	beq.n	80075b8 <_printf_common+0xa4>
 80075ea:	3601      	adds	r6, #1
 80075ec:	e7d9      	b.n	80075a2 <_printf_common+0x8e>
	...

080075f0 <_printf_i>:
 80075f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075f4:	7e0f      	ldrb	r7, [r1, #24]
 80075f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075f8:	2f78      	cmp	r7, #120	@ 0x78
 80075fa:	4691      	mov	r9, r2
 80075fc:	4680      	mov	r8, r0
 80075fe:	460c      	mov	r4, r1
 8007600:	469a      	mov	sl, r3
 8007602:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007606:	d807      	bhi.n	8007618 <_printf_i+0x28>
 8007608:	2f62      	cmp	r7, #98	@ 0x62
 800760a:	d80a      	bhi.n	8007622 <_printf_i+0x32>
 800760c:	2f00      	cmp	r7, #0
 800760e:	f000 80d1 	beq.w	80077b4 <_printf_i+0x1c4>
 8007612:	2f58      	cmp	r7, #88	@ 0x58
 8007614:	f000 80b8 	beq.w	8007788 <_printf_i+0x198>
 8007618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800761c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007620:	e03a      	b.n	8007698 <_printf_i+0xa8>
 8007622:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007626:	2b15      	cmp	r3, #21
 8007628:	d8f6      	bhi.n	8007618 <_printf_i+0x28>
 800762a:	a101      	add	r1, pc, #4	@ (adr r1, 8007630 <_printf_i+0x40>)
 800762c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007630:	08007689 	.word	0x08007689
 8007634:	0800769d 	.word	0x0800769d
 8007638:	08007619 	.word	0x08007619
 800763c:	08007619 	.word	0x08007619
 8007640:	08007619 	.word	0x08007619
 8007644:	08007619 	.word	0x08007619
 8007648:	0800769d 	.word	0x0800769d
 800764c:	08007619 	.word	0x08007619
 8007650:	08007619 	.word	0x08007619
 8007654:	08007619 	.word	0x08007619
 8007658:	08007619 	.word	0x08007619
 800765c:	0800779b 	.word	0x0800779b
 8007660:	080076c7 	.word	0x080076c7
 8007664:	08007755 	.word	0x08007755
 8007668:	08007619 	.word	0x08007619
 800766c:	08007619 	.word	0x08007619
 8007670:	080077bd 	.word	0x080077bd
 8007674:	08007619 	.word	0x08007619
 8007678:	080076c7 	.word	0x080076c7
 800767c:	08007619 	.word	0x08007619
 8007680:	08007619 	.word	0x08007619
 8007684:	0800775d 	.word	0x0800775d
 8007688:	6833      	ldr	r3, [r6, #0]
 800768a:	1d1a      	adds	r2, r3, #4
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6032      	str	r2, [r6, #0]
 8007690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007694:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007698:	2301      	movs	r3, #1
 800769a:	e09c      	b.n	80077d6 <_printf_i+0x1e6>
 800769c:	6833      	ldr	r3, [r6, #0]
 800769e:	6820      	ldr	r0, [r4, #0]
 80076a0:	1d19      	adds	r1, r3, #4
 80076a2:	6031      	str	r1, [r6, #0]
 80076a4:	0606      	lsls	r6, r0, #24
 80076a6:	d501      	bpl.n	80076ac <_printf_i+0xbc>
 80076a8:	681d      	ldr	r5, [r3, #0]
 80076aa:	e003      	b.n	80076b4 <_printf_i+0xc4>
 80076ac:	0645      	lsls	r5, r0, #25
 80076ae:	d5fb      	bpl.n	80076a8 <_printf_i+0xb8>
 80076b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076b4:	2d00      	cmp	r5, #0
 80076b6:	da03      	bge.n	80076c0 <_printf_i+0xd0>
 80076b8:	232d      	movs	r3, #45	@ 0x2d
 80076ba:	426d      	negs	r5, r5
 80076bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076c0:	4858      	ldr	r0, [pc, #352]	@ (8007824 <_printf_i+0x234>)
 80076c2:	230a      	movs	r3, #10
 80076c4:	e011      	b.n	80076ea <_printf_i+0xfa>
 80076c6:	6821      	ldr	r1, [r4, #0]
 80076c8:	6833      	ldr	r3, [r6, #0]
 80076ca:	0608      	lsls	r0, r1, #24
 80076cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80076d0:	d402      	bmi.n	80076d8 <_printf_i+0xe8>
 80076d2:	0649      	lsls	r1, r1, #25
 80076d4:	bf48      	it	mi
 80076d6:	b2ad      	uxthmi	r5, r5
 80076d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80076da:	4852      	ldr	r0, [pc, #328]	@ (8007824 <_printf_i+0x234>)
 80076dc:	6033      	str	r3, [r6, #0]
 80076de:	bf14      	ite	ne
 80076e0:	230a      	movne	r3, #10
 80076e2:	2308      	moveq	r3, #8
 80076e4:	2100      	movs	r1, #0
 80076e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076ea:	6866      	ldr	r6, [r4, #4]
 80076ec:	60a6      	str	r6, [r4, #8]
 80076ee:	2e00      	cmp	r6, #0
 80076f0:	db05      	blt.n	80076fe <_printf_i+0x10e>
 80076f2:	6821      	ldr	r1, [r4, #0]
 80076f4:	432e      	orrs	r6, r5
 80076f6:	f021 0104 	bic.w	r1, r1, #4
 80076fa:	6021      	str	r1, [r4, #0]
 80076fc:	d04b      	beq.n	8007796 <_printf_i+0x1a6>
 80076fe:	4616      	mov	r6, r2
 8007700:	fbb5 f1f3 	udiv	r1, r5, r3
 8007704:	fb03 5711 	mls	r7, r3, r1, r5
 8007708:	5dc7      	ldrb	r7, [r0, r7]
 800770a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800770e:	462f      	mov	r7, r5
 8007710:	42bb      	cmp	r3, r7
 8007712:	460d      	mov	r5, r1
 8007714:	d9f4      	bls.n	8007700 <_printf_i+0x110>
 8007716:	2b08      	cmp	r3, #8
 8007718:	d10b      	bne.n	8007732 <_printf_i+0x142>
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	07df      	lsls	r7, r3, #31
 800771e:	d508      	bpl.n	8007732 <_printf_i+0x142>
 8007720:	6923      	ldr	r3, [r4, #16]
 8007722:	6861      	ldr	r1, [r4, #4]
 8007724:	4299      	cmp	r1, r3
 8007726:	bfde      	ittt	le
 8007728:	2330      	movle	r3, #48	@ 0x30
 800772a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800772e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007732:	1b92      	subs	r2, r2, r6
 8007734:	6122      	str	r2, [r4, #16]
 8007736:	f8cd a000 	str.w	sl, [sp]
 800773a:	464b      	mov	r3, r9
 800773c:	aa03      	add	r2, sp, #12
 800773e:	4621      	mov	r1, r4
 8007740:	4640      	mov	r0, r8
 8007742:	f7ff fee7 	bl	8007514 <_printf_common>
 8007746:	3001      	adds	r0, #1
 8007748:	d14a      	bne.n	80077e0 <_printf_i+0x1f0>
 800774a:	f04f 30ff 	mov.w	r0, #4294967295
 800774e:	b004      	add	sp, #16
 8007750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	f043 0320 	orr.w	r3, r3, #32
 800775a:	6023      	str	r3, [r4, #0]
 800775c:	4832      	ldr	r0, [pc, #200]	@ (8007828 <_printf_i+0x238>)
 800775e:	2778      	movs	r7, #120	@ 0x78
 8007760:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	6831      	ldr	r1, [r6, #0]
 8007768:	061f      	lsls	r7, r3, #24
 800776a:	f851 5b04 	ldr.w	r5, [r1], #4
 800776e:	d402      	bmi.n	8007776 <_printf_i+0x186>
 8007770:	065f      	lsls	r7, r3, #25
 8007772:	bf48      	it	mi
 8007774:	b2ad      	uxthmi	r5, r5
 8007776:	6031      	str	r1, [r6, #0]
 8007778:	07d9      	lsls	r1, r3, #31
 800777a:	bf44      	itt	mi
 800777c:	f043 0320 	orrmi.w	r3, r3, #32
 8007780:	6023      	strmi	r3, [r4, #0]
 8007782:	b11d      	cbz	r5, 800778c <_printf_i+0x19c>
 8007784:	2310      	movs	r3, #16
 8007786:	e7ad      	b.n	80076e4 <_printf_i+0xf4>
 8007788:	4826      	ldr	r0, [pc, #152]	@ (8007824 <_printf_i+0x234>)
 800778a:	e7e9      	b.n	8007760 <_printf_i+0x170>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	f023 0320 	bic.w	r3, r3, #32
 8007792:	6023      	str	r3, [r4, #0]
 8007794:	e7f6      	b.n	8007784 <_printf_i+0x194>
 8007796:	4616      	mov	r6, r2
 8007798:	e7bd      	b.n	8007716 <_printf_i+0x126>
 800779a:	6833      	ldr	r3, [r6, #0]
 800779c:	6825      	ldr	r5, [r4, #0]
 800779e:	6961      	ldr	r1, [r4, #20]
 80077a0:	1d18      	adds	r0, r3, #4
 80077a2:	6030      	str	r0, [r6, #0]
 80077a4:	062e      	lsls	r6, r5, #24
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	d501      	bpl.n	80077ae <_printf_i+0x1be>
 80077aa:	6019      	str	r1, [r3, #0]
 80077ac:	e002      	b.n	80077b4 <_printf_i+0x1c4>
 80077ae:	0668      	lsls	r0, r5, #25
 80077b0:	d5fb      	bpl.n	80077aa <_printf_i+0x1ba>
 80077b2:	8019      	strh	r1, [r3, #0]
 80077b4:	2300      	movs	r3, #0
 80077b6:	6123      	str	r3, [r4, #16]
 80077b8:	4616      	mov	r6, r2
 80077ba:	e7bc      	b.n	8007736 <_printf_i+0x146>
 80077bc:	6833      	ldr	r3, [r6, #0]
 80077be:	1d1a      	adds	r2, r3, #4
 80077c0:	6032      	str	r2, [r6, #0]
 80077c2:	681e      	ldr	r6, [r3, #0]
 80077c4:	6862      	ldr	r2, [r4, #4]
 80077c6:	2100      	movs	r1, #0
 80077c8:	4630      	mov	r0, r6
 80077ca:	f7f8 fd21 	bl	8000210 <memchr>
 80077ce:	b108      	cbz	r0, 80077d4 <_printf_i+0x1e4>
 80077d0:	1b80      	subs	r0, r0, r6
 80077d2:	6060      	str	r0, [r4, #4]
 80077d4:	6863      	ldr	r3, [r4, #4]
 80077d6:	6123      	str	r3, [r4, #16]
 80077d8:	2300      	movs	r3, #0
 80077da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077de:	e7aa      	b.n	8007736 <_printf_i+0x146>
 80077e0:	6923      	ldr	r3, [r4, #16]
 80077e2:	4632      	mov	r2, r6
 80077e4:	4649      	mov	r1, r9
 80077e6:	4640      	mov	r0, r8
 80077e8:	47d0      	blx	sl
 80077ea:	3001      	adds	r0, #1
 80077ec:	d0ad      	beq.n	800774a <_printf_i+0x15a>
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	079b      	lsls	r3, r3, #30
 80077f2:	d413      	bmi.n	800781c <_printf_i+0x22c>
 80077f4:	68e0      	ldr	r0, [r4, #12]
 80077f6:	9b03      	ldr	r3, [sp, #12]
 80077f8:	4298      	cmp	r0, r3
 80077fa:	bfb8      	it	lt
 80077fc:	4618      	movlt	r0, r3
 80077fe:	e7a6      	b.n	800774e <_printf_i+0x15e>
 8007800:	2301      	movs	r3, #1
 8007802:	4632      	mov	r2, r6
 8007804:	4649      	mov	r1, r9
 8007806:	4640      	mov	r0, r8
 8007808:	47d0      	blx	sl
 800780a:	3001      	adds	r0, #1
 800780c:	d09d      	beq.n	800774a <_printf_i+0x15a>
 800780e:	3501      	adds	r5, #1
 8007810:	68e3      	ldr	r3, [r4, #12]
 8007812:	9903      	ldr	r1, [sp, #12]
 8007814:	1a5b      	subs	r3, r3, r1
 8007816:	42ab      	cmp	r3, r5
 8007818:	dcf2      	bgt.n	8007800 <_printf_i+0x210>
 800781a:	e7eb      	b.n	80077f4 <_printf_i+0x204>
 800781c:	2500      	movs	r5, #0
 800781e:	f104 0619 	add.w	r6, r4, #25
 8007822:	e7f5      	b.n	8007810 <_printf_i+0x220>
 8007824:	0800906b 	.word	0x0800906b
 8007828:	0800907c 	.word	0x0800907c

0800782c <__sflush_r>:
 800782c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007834:	0716      	lsls	r6, r2, #28
 8007836:	4605      	mov	r5, r0
 8007838:	460c      	mov	r4, r1
 800783a:	d454      	bmi.n	80078e6 <__sflush_r+0xba>
 800783c:	684b      	ldr	r3, [r1, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	dc02      	bgt.n	8007848 <__sflush_r+0x1c>
 8007842:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007844:	2b00      	cmp	r3, #0
 8007846:	dd48      	ble.n	80078da <__sflush_r+0xae>
 8007848:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800784a:	2e00      	cmp	r6, #0
 800784c:	d045      	beq.n	80078da <__sflush_r+0xae>
 800784e:	2300      	movs	r3, #0
 8007850:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007854:	682f      	ldr	r7, [r5, #0]
 8007856:	6a21      	ldr	r1, [r4, #32]
 8007858:	602b      	str	r3, [r5, #0]
 800785a:	d030      	beq.n	80078be <__sflush_r+0x92>
 800785c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	0759      	lsls	r1, r3, #29
 8007862:	d505      	bpl.n	8007870 <__sflush_r+0x44>
 8007864:	6863      	ldr	r3, [r4, #4]
 8007866:	1ad2      	subs	r2, r2, r3
 8007868:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800786a:	b10b      	cbz	r3, 8007870 <__sflush_r+0x44>
 800786c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800786e:	1ad2      	subs	r2, r2, r3
 8007870:	2300      	movs	r3, #0
 8007872:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007874:	6a21      	ldr	r1, [r4, #32]
 8007876:	4628      	mov	r0, r5
 8007878:	47b0      	blx	r6
 800787a:	1c43      	adds	r3, r0, #1
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	d106      	bne.n	800788e <__sflush_r+0x62>
 8007880:	6829      	ldr	r1, [r5, #0]
 8007882:	291d      	cmp	r1, #29
 8007884:	d82b      	bhi.n	80078de <__sflush_r+0xb2>
 8007886:	4a2a      	ldr	r2, [pc, #168]	@ (8007930 <__sflush_r+0x104>)
 8007888:	40ca      	lsrs	r2, r1
 800788a:	07d6      	lsls	r6, r2, #31
 800788c:	d527      	bpl.n	80078de <__sflush_r+0xb2>
 800788e:	2200      	movs	r2, #0
 8007890:	6062      	str	r2, [r4, #4]
 8007892:	04d9      	lsls	r1, r3, #19
 8007894:	6922      	ldr	r2, [r4, #16]
 8007896:	6022      	str	r2, [r4, #0]
 8007898:	d504      	bpl.n	80078a4 <__sflush_r+0x78>
 800789a:	1c42      	adds	r2, r0, #1
 800789c:	d101      	bne.n	80078a2 <__sflush_r+0x76>
 800789e:	682b      	ldr	r3, [r5, #0]
 80078a0:	b903      	cbnz	r3, 80078a4 <__sflush_r+0x78>
 80078a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80078a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078a6:	602f      	str	r7, [r5, #0]
 80078a8:	b1b9      	cbz	r1, 80078da <__sflush_r+0xae>
 80078aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078ae:	4299      	cmp	r1, r3
 80078b0:	d002      	beq.n	80078b8 <__sflush_r+0x8c>
 80078b2:	4628      	mov	r0, r5
 80078b4:	f7ff fa94 	bl	8006de0 <_free_r>
 80078b8:	2300      	movs	r3, #0
 80078ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80078bc:	e00d      	b.n	80078da <__sflush_r+0xae>
 80078be:	2301      	movs	r3, #1
 80078c0:	4628      	mov	r0, r5
 80078c2:	47b0      	blx	r6
 80078c4:	4602      	mov	r2, r0
 80078c6:	1c50      	adds	r0, r2, #1
 80078c8:	d1c9      	bne.n	800785e <__sflush_r+0x32>
 80078ca:	682b      	ldr	r3, [r5, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d0c6      	beq.n	800785e <__sflush_r+0x32>
 80078d0:	2b1d      	cmp	r3, #29
 80078d2:	d001      	beq.n	80078d8 <__sflush_r+0xac>
 80078d4:	2b16      	cmp	r3, #22
 80078d6:	d11e      	bne.n	8007916 <__sflush_r+0xea>
 80078d8:	602f      	str	r7, [r5, #0]
 80078da:	2000      	movs	r0, #0
 80078dc:	e022      	b.n	8007924 <__sflush_r+0xf8>
 80078de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078e2:	b21b      	sxth	r3, r3
 80078e4:	e01b      	b.n	800791e <__sflush_r+0xf2>
 80078e6:	690f      	ldr	r7, [r1, #16]
 80078e8:	2f00      	cmp	r7, #0
 80078ea:	d0f6      	beq.n	80078da <__sflush_r+0xae>
 80078ec:	0793      	lsls	r3, r2, #30
 80078ee:	680e      	ldr	r6, [r1, #0]
 80078f0:	bf08      	it	eq
 80078f2:	694b      	ldreq	r3, [r1, #20]
 80078f4:	600f      	str	r7, [r1, #0]
 80078f6:	bf18      	it	ne
 80078f8:	2300      	movne	r3, #0
 80078fa:	eba6 0807 	sub.w	r8, r6, r7
 80078fe:	608b      	str	r3, [r1, #8]
 8007900:	f1b8 0f00 	cmp.w	r8, #0
 8007904:	dde9      	ble.n	80078da <__sflush_r+0xae>
 8007906:	6a21      	ldr	r1, [r4, #32]
 8007908:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800790a:	4643      	mov	r3, r8
 800790c:	463a      	mov	r2, r7
 800790e:	4628      	mov	r0, r5
 8007910:	47b0      	blx	r6
 8007912:	2800      	cmp	r0, #0
 8007914:	dc08      	bgt.n	8007928 <__sflush_r+0xfc>
 8007916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800791a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800791e:	81a3      	strh	r3, [r4, #12]
 8007920:	f04f 30ff 	mov.w	r0, #4294967295
 8007924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007928:	4407      	add	r7, r0
 800792a:	eba8 0800 	sub.w	r8, r8, r0
 800792e:	e7e7      	b.n	8007900 <__sflush_r+0xd4>
 8007930:	20400001 	.word	0x20400001

08007934 <_fflush_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	690b      	ldr	r3, [r1, #16]
 8007938:	4605      	mov	r5, r0
 800793a:	460c      	mov	r4, r1
 800793c:	b913      	cbnz	r3, 8007944 <_fflush_r+0x10>
 800793e:	2500      	movs	r5, #0
 8007940:	4628      	mov	r0, r5
 8007942:	bd38      	pop	{r3, r4, r5, pc}
 8007944:	b118      	cbz	r0, 800794e <_fflush_r+0x1a>
 8007946:	6a03      	ldr	r3, [r0, #32]
 8007948:	b90b      	cbnz	r3, 800794e <_fflush_r+0x1a>
 800794a:	f7fe ff5f 	bl	800680c <__sinit>
 800794e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d0f3      	beq.n	800793e <_fflush_r+0xa>
 8007956:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007958:	07d0      	lsls	r0, r2, #31
 800795a:	d404      	bmi.n	8007966 <_fflush_r+0x32>
 800795c:	0599      	lsls	r1, r3, #22
 800795e:	d402      	bmi.n	8007966 <_fflush_r+0x32>
 8007960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007962:	f7ff fa06 	bl	8006d72 <__retarget_lock_acquire_recursive>
 8007966:	4628      	mov	r0, r5
 8007968:	4621      	mov	r1, r4
 800796a:	f7ff ff5f 	bl	800782c <__sflush_r>
 800796e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007970:	07da      	lsls	r2, r3, #31
 8007972:	4605      	mov	r5, r0
 8007974:	d4e4      	bmi.n	8007940 <_fflush_r+0xc>
 8007976:	89a3      	ldrh	r3, [r4, #12]
 8007978:	059b      	lsls	r3, r3, #22
 800797a:	d4e1      	bmi.n	8007940 <_fflush_r+0xc>
 800797c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800797e:	f7ff f9f9 	bl	8006d74 <__retarget_lock_release_recursive>
 8007982:	e7dd      	b.n	8007940 <_fflush_r+0xc>

08007984 <fiprintf>:
 8007984:	b40e      	push	{r1, r2, r3}
 8007986:	b503      	push	{r0, r1, lr}
 8007988:	4601      	mov	r1, r0
 800798a:	ab03      	add	r3, sp, #12
 800798c:	4805      	ldr	r0, [pc, #20]	@ (80079a4 <fiprintf+0x20>)
 800798e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007992:	6800      	ldr	r0, [r0, #0]
 8007994:	9301      	str	r3, [sp, #4]
 8007996:	f7ff fca5 	bl	80072e4 <_vfiprintf_r>
 800799a:	b002      	add	sp, #8
 800799c:	f85d eb04 	ldr.w	lr, [sp], #4
 80079a0:	b003      	add	sp, #12
 80079a2:	4770      	bx	lr
 80079a4:	2000001c 	.word	0x2000001c

080079a8 <__swhatbuf_r>:
 80079a8:	b570      	push	{r4, r5, r6, lr}
 80079aa:	460c      	mov	r4, r1
 80079ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b0:	2900      	cmp	r1, #0
 80079b2:	b096      	sub	sp, #88	@ 0x58
 80079b4:	4615      	mov	r5, r2
 80079b6:	461e      	mov	r6, r3
 80079b8:	da0d      	bge.n	80079d6 <__swhatbuf_r+0x2e>
 80079ba:	89a3      	ldrh	r3, [r4, #12]
 80079bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80079c0:	f04f 0100 	mov.w	r1, #0
 80079c4:	bf14      	ite	ne
 80079c6:	2340      	movne	r3, #64	@ 0x40
 80079c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80079cc:	2000      	movs	r0, #0
 80079ce:	6031      	str	r1, [r6, #0]
 80079d0:	602b      	str	r3, [r5, #0]
 80079d2:	b016      	add	sp, #88	@ 0x58
 80079d4:	bd70      	pop	{r4, r5, r6, pc}
 80079d6:	466a      	mov	r2, sp
 80079d8:	f000 f896 	bl	8007b08 <_fstat_r>
 80079dc:	2800      	cmp	r0, #0
 80079de:	dbec      	blt.n	80079ba <__swhatbuf_r+0x12>
 80079e0:	9901      	ldr	r1, [sp, #4]
 80079e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079ea:	4259      	negs	r1, r3
 80079ec:	4159      	adcs	r1, r3
 80079ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079f2:	e7eb      	b.n	80079cc <__swhatbuf_r+0x24>

080079f4 <__smakebuf_r>:
 80079f4:	898b      	ldrh	r3, [r1, #12]
 80079f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079f8:	079d      	lsls	r5, r3, #30
 80079fa:	4606      	mov	r6, r0
 80079fc:	460c      	mov	r4, r1
 80079fe:	d507      	bpl.n	8007a10 <__smakebuf_r+0x1c>
 8007a00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a04:	6023      	str	r3, [r4, #0]
 8007a06:	6123      	str	r3, [r4, #16]
 8007a08:	2301      	movs	r3, #1
 8007a0a:	6163      	str	r3, [r4, #20]
 8007a0c:	b003      	add	sp, #12
 8007a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a10:	ab01      	add	r3, sp, #4
 8007a12:	466a      	mov	r2, sp
 8007a14:	f7ff ffc8 	bl	80079a8 <__swhatbuf_r>
 8007a18:	9f00      	ldr	r7, [sp, #0]
 8007a1a:	4605      	mov	r5, r0
 8007a1c:	4639      	mov	r1, r7
 8007a1e:	4630      	mov	r0, r6
 8007a20:	f7ff fa52 	bl	8006ec8 <_malloc_r>
 8007a24:	b948      	cbnz	r0, 8007a3a <__smakebuf_r+0x46>
 8007a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a2a:	059a      	lsls	r2, r3, #22
 8007a2c:	d4ee      	bmi.n	8007a0c <__smakebuf_r+0x18>
 8007a2e:	f023 0303 	bic.w	r3, r3, #3
 8007a32:	f043 0302 	orr.w	r3, r3, #2
 8007a36:	81a3      	strh	r3, [r4, #12]
 8007a38:	e7e2      	b.n	8007a00 <__smakebuf_r+0xc>
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	6020      	str	r0, [r4, #0]
 8007a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a42:	81a3      	strh	r3, [r4, #12]
 8007a44:	9b01      	ldr	r3, [sp, #4]
 8007a46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a4a:	b15b      	cbz	r3, 8007a64 <__smakebuf_r+0x70>
 8007a4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a50:	4630      	mov	r0, r6
 8007a52:	f000 f86b 	bl	8007b2c <_isatty_r>
 8007a56:	b128      	cbz	r0, 8007a64 <__smakebuf_r+0x70>
 8007a58:	89a3      	ldrh	r3, [r4, #12]
 8007a5a:	f023 0303 	bic.w	r3, r3, #3
 8007a5e:	f043 0301 	orr.w	r3, r3, #1
 8007a62:	81a3      	strh	r3, [r4, #12]
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	431d      	orrs	r5, r3
 8007a68:	81a5      	strh	r5, [r4, #12]
 8007a6a:	e7cf      	b.n	8007a0c <__smakebuf_r+0x18>

08007a6c <_putc_r>:
 8007a6c:	b570      	push	{r4, r5, r6, lr}
 8007a6e:	460d      	mov	r5, r1
 8007a70:	4614      	mov	r4, r2
 8007a72:	4606      	mov	r6, r0
 8007a74:	b118      	cbz	r0, 8007a7e <_putc_r+0x12>
 8007a76:	6a03      	ldr	r3, [r0, #32]
 8007a78:	b90b      	cbnz	r3, 8007a7e <_putc_r+0x12>
 8007a7a:	f7fe fec7 	bl	800680c <__sinit>
 8007a7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a80:	07d8      	lsls	r0, r3, #31
 8007a82:	d405      	bmi.n	8007a90 <_putc_r+0x24>
 8007a84:	89a3      	ldrh	r3, [r4, #12]
 8007a86:	0599      	lsls	r1, r3, #22
 8007a88:	d402      	bmi.n	8007a90 <_putc_r+0x24>
 8007a8a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a8c:	f7ff f971 	bl	8006d72 <__retarget_lock_acquire_recursive>
 8007a90:	68a3      	ldr	r3, [r4, #8]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	60a3      	str	r3, [r4, #8]
 8007a98:	da05      	bge.n	8007aa6 <_putc_r+0x3a>
 8007a9a:	69a2      	ldr	r2, [r4, #24]
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	db12      	blt.n	8007ac6 <_putc_r+0x5a>
 8007aa0:	b2eb      	uxtb	r3, r5
 8007aa2:	2b0a      	cmp	r3, #10
 8007aa4:	d00f      	beq.n	8007ac6 <_putc_r+0x5a>
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	6022      	str	r2, [r4, #0]
 8007aac:	701d      	strb	r5, [r3, #0]
 8007aae:	b2ed      	uxtb	r5, r5
 8007ab0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ab2:	07da      	lsls	r2, r3, #31
 8007ab4:	d405      	bmi.n	8007ac2 <_putc_r+0x56>
 8007ab6:	89a3      	ldrh	r3, [r4, #12]
 8007ab8:	059b      	lsls	r3, r3, #22
 8007aba:	d402      	bmi.n	8007ac2 <_putc_r+0x56>
 8007abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007abe:	f7ff f959 	bl	8006d74 <__retarget_lock_release_recursive>
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	bd70      	pop	{r4, r5, r6, pc}
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	4622      	mov	r2, r4
 8007aca:	4630      	mov	r0, r6
 8007acc:	f7fe ffb1 	bl	8006a32 <__swbuf_r>
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	e7ed      	b.n	8007ab0 <_putc_r+0x44>

08007ad4 <memmove>:
 8007ad4:	4288      	cmp	r0, r1
 8007ad6:	b510      	push	{r4, lr}
 8007ad8:	eb01 0402 	add.w	r4, r1, r2
 8007adc:	d902      	bls.n	8007ae4 <memmove+0x10>
 8007ade:	4284      	cmp	r4, r0
 8007ae0:	4623      	mov	r3, r4
 8007ae2:	d807      	bhi.n	8007af4 <memmove+0x20>
 8007ae4:	1e43      	subs	r3, r0, #1
 8007ae6:	42a1      	cmp	r1, r4
 8007ae8:	d008      	beq.n	8007afc <memmove+0x28>
 8007aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007aee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007af2:	e7f8      	b.n	8007ae6 <memmove+0x12>
 8007af4:	4402      	add	r2, r0
 8007af6:	4601      	mov	r1, r0
 8007af8:	428a      	cmp	r2, r1
 8007afa:	d100      	bne.n	8007afe <memmove+0x2a>
 8007afc:	bd10      	pop	{r4, pc}
 8007afe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b06:	e7f7      	b.n	8007af8 <memmove+0x24>

08007b08 <_fstat_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d07      	ldr	r5, [pc, #28]	@ (8007b28 <_fstat_r+0x20>)
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	4604      	mov	r4, r0
 8007b10:	4608      	mov	r0, r1
 8007b12:	4611      	mov	r1, r2
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	f7fb f855 	bl	8002bc4 <_fstat>
 8007b1a:	1c43      	adds	r3, r0, #1
 8007b1c:	d102      	bne.n	8007b24 <_fstat_r+0x1c>
 8007b1e:	682b      	ldr	r3, [r5, #0]
 8007b20:	b103      	cbz	r3, 8007b24 <_fstat_r+0x1c>
 8007b22:	6023      	str	r3, [r4, #0]
 8007b24:	bd38      	pop	{r3, r4, r5, pc}
 8007b26:	bf00      	nop
 8007b28:	20000c7c 	.word	0x20000c7c

08007b2c <_isatty_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4d06      	ldr	r5, [pc, #24]	@ (8007b48 <_isatty_r+0x1c>)
 8007b30:	2300      	movs	r3, #0
 8007b32:	4604      	mov	r4, r0
 8007b34:	4608      	mov	r0, r1
 8007b36:	602b      	str	r3, [r5, #0]
 8007b38:	f7fb f854 	bl	8002be4 <_isatty>
 8007b3c:	1c43      	adds	r3, r0, #1
 8007b3e:	d102      	bne.n	8007b46 <_isatty_r+0x1a>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	b103      	cbz	r3, 8007b46 <_isatty_r+0x1a>
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	20000c7c 	.word	0x20000c7c

08007b4c <_sbrk_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4d06      	ldr	r5, [pc, #24]	@ (8007b68 <_sbrk_r+0x1c>)
 8007b50:	2300      	movs	r3, #0
 8007b52:	4604      	mov	r4, r0
 8007b54:	4608      	mov	r0, r1
 8007b56:	602b      	str	r3, [r5, #0]
 8007b58:	f7fb f85c 	bl	8002c14 <_sbrk>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d102      	bne.n	8007b66 <_sbrk_r+0x1a>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	b103      	cbz	r3, 8007b66 <_sbrk_r+0x1a>
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	20000c7c 	.word	0x20000c7c

08007b6c <abort>:
 8007b6c:	b508      	push	{r3, lr}
 8007b6e:	2006      	movs	r0, #6
 8007b70:	f000 f85a 	bl	8007c28 <raise>
 8007b74:	2001      	movs	r0, #1
 8007b76:	f7fa ffd5 	bl	8002b24 <_exit>

08007b7a <_realloc_r>:
 8007b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7e:	4607      	mov	r7, r0
 8007b80:	4614      	mov	r4, r2
 8007b82:	460d      	mov	r5, r1
 8007b84:	b921      	cbnz	r1, 8007b90 <_realloc_r+0x16>
 8007b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8a:	4611      	mov	r1, r2
 8007b8c:	f7ff b99c 	b.w	8006ec8 <_malloc_r>
 8007b90:	b92a      	cbnz	r2, 8007b9e <_realloc_r+0x24>
 8007b92:	f7ff f925 	bl	8006de0 <_free_r>
 8007b96:	4625      	mov	r5, r4
 8007b98:	4628      	mov	r0, r5
 8007b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b9e:	f000 f85f 	bl	8007c60 <_malloc_usable_size_r>
 8007ba2:	4284      	cmp	r4, r0
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	d802      	bhi.n	8007bae <_realloc_r+0x34>
 8007ba8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007bac:	d8f4      	bhi.n	8007b98 <_realloc_r+0x1e>
 8007bae:	4621      	mov	r1, r4
 8007bb0:	4638      	mov	r0, r7
 8007bb2:	f7ff f989 	bl	8006ec8 <_malloc_r>
 8007bb6:	4680      	mov	r8, r0
 8007bb8:	b908      	cbnz	r0, 8007bbe <_realloc_r+0x44>
 8007bba:	4645      	mov	r5, r8
 8007bbc:	e7ec      	b.n	8007b98 <_realloc_r+0x1e>
 8007bbe:	42b4      	cmp	r4, r6
 8007bc0:	4622      	mov	r2, r4
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	bf28      	it	cs
 8007bc6:	4632      	movcs	r2, r6
 8007bc8:	f7ff f8dd 	bl	8006d86 <memcpy>
 8007bcc:	4629      	mov	r1, r5
 8007bce:	4638      	mov	r0, r7
 8007bd0:	f7ff f906 	bl	8006de0 <_free_r>
 8007bd4:	e7f1      	b.n	8007bba <_realloc_r+0x40>

08007bd6 <_raise_r>:
 8007bd6:	291f      	cmp	r1, #31
 8007bd8:	b538      	push	{r3, r4, r5, lr}
 8007bda:	4605      	mov	r5, r0
 8007bdc:	460c      	mov	r4, r1
 8007bde:	d904      	bls.n	8007bea <_raise_r+0x14>
 8007be0:	2316      	movs	r3, #22
 8007be2:	6003      	str	r3, [r0, #0]
 8007be4:	f04f 30ff 	mov.w	r0, #4294967295
 8007be8:	bd38      	pop	{r3, r4, r5, pc}
 8007bea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007bec:	b112      	cbz	r2, 8007bf4 <_raise_r+0x1e>
 8007bee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bf2:	b94b      	cbnz	r3, 8007c08 <_raise_r+0x32>
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	f000 f831 	bl	8007c5c <_getpid_r>
 8007bfa:	4622      	mov	r2, r4
 8007bfc:	4601      	mov	r1, r0
 8007bfe:	4628      	mov	r0, r5
 8007c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c04:	f000 b818 	b.w	8007c38 <_kill_r>
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d00a      	beq.n	8007c22 <_raise_r+0x4c>
 8007c0c:	1c59      	adds	r1, r3, #1
 8007c0e:	d103      	bne.n	8007c18 <_raise_r+0x42>
 8007c10:	2316      	movs	r3, #22
 8007c12:	6003      	str	r3, [r0, #0]
 8007c14:	2001      	movs	r0, #1
 8007c16:	e7e7      	b.n	8007be8 <_raise_r+0x12>
 8007c18:	2100      	movs	r1, #0
 8007c1a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007c1e:	4620      	mov	r0, r4
 8007c20:	4798      	blx	r3
 8007c22:	2000      	movs	r0, #0
 8007c24:	e7e0      	b.n	8007be8 <_raise_r+0x12>
	...

08007c28 <raise>:
 8007c28:	4b02      	ldr	r3, [pc, #8]	@ (8007c34 <raise+0xc>)
 8007c2a:	4601      	mov	r1, r0
 8007c2c:	6818      	ldr	r0, [r3, #0]
 8007c2e:	f7ff bfd2 	b.w	8007bd6 <_raise_r>
 8007c32:	bf00      	nop
 8007c34:	2000001c 	.word	0x2000001c

08007c38 <_kill_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	4d07      	ldr	r5, [pc, #28]	@ (8007c58 <_kill_r+0x20>)
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	4604      	mov	r4, r0
 8007c40:	4608      	mov	r0, r1
 8007c42:	4611      	mov	r1, r2
 8007c44:	602b      	str	r3, [r5, #0]
 8007c46:	f7fa ff5d 	bl	8002b04 <_kill>
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	d102      	bne.n	8007c54 <_kill_r+0x1c>
 8007c4e:	682b      	ldr	r3, [r5, #0]
 8007c50:	b103      	cbz	r3, 8007c54 <_kill_r+0x1c>
 8007c52:	6023      	str	r3, [r4, #0]
 8007c54:	bd38      	pop	{r3, r4, r5, pc}
 8007c56:	bf00      	nop
 8007c58:	20000c7c 	.word	0x20000c7c

08007c5c <_getpid_r>:
 8007c5c:	f7fa bf4a 	b.w	8002af4 <_getpid>

08007c60 <_malloc_usable_size_r>:
 8007c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c64:	1f18      	subs	r0, r3, #4
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	bfbc      	itt	lt
 8007c6a:	580b      	ldrlt	r3, [r1, r0]
 8007c6c:	18c0      	addlt	r0, r0, r3
 8007c6e:	4770      	bx	lr

08007c70 <pow>:
 8007c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c72:	ed2d 8b02 	vpush	{d8}
 8007c76:	eeb0 8a40 	vmov.f32	s16, s0
 8007c7a:	eef0 8a60 	vmov.f32	s17, s1
 8007c7e:	ec55 4b11 	vmov	r4, r5, d1
 8007c82:	f000 f871 	bl	8007d68 <__ieee754_pow>
 8007c86:	4622      	mov	r2, r4
 8007c88:	462b      	mov	r3, r5
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	ec57 6b10 	vmov	r6, r7, d0
 8007c92:	f7f8 ff63 	bl	8000b5c <__aeabi_dcmpun>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d13b      	bne.n	8007d12 <pow+0xa2>
 8007c9a:	ec51 0b18 	vmov	r0, r1, d8
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f7f8 ff29 	bl	8000af8 <__aeabi_dcmpeq>
 8007ca6:	b1b8      	cbz	r0, 8007cd8 <pow+0x68>
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2300      	movs	r3, #0
 8007cac:	4620      	mov	r0, r4
 8007cae:	4629      	mov	r1, r5
 8007cb0:	f7f8 ff22 	bl	8000af8 <__aeabi_dcmpeq>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d146      	bne.n	8007d46 <pow+0xd6>
 8007cb8:	ec45 4b10 	vmov	d0, r4, r5
 8007cbc:	f000 f848 	bl	8007d50 <finite>
 8007cc0:	b338      	cbz	r0, 8007d12 <pow+0xa2>
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	4629      	mov	r1, r5
 8007cca:	f7f8 ff1f 	bl	8000b0c <__aeabi_dcmplt>
 8007cce:	b300      	cbz	r0, 8007d12 <pow+0xa2>
 8007cd0:	f7ff f824 	bl	8006d1c <__errno>
 8007cd4:	2322      	movs	r3, #34	@ 0x22
 8007cd6:	e01b      	b.n	8007d10 <pow+0xa0>
 8007cd8:	ec47 6b10 	vmov	d0, r6, r7
 8007cdc:	f000 f838 	bl	8007d50 <finite>
 8007ce0:	b9e0      	cbnz	r0, 8007d1c <pow+0xac>
 8007ce2:	eeb0 0a48 	vmov.f32	s0, s16
 8007ce6:	eef0 0a68 	vmov.f32	s1, s17
 8007cea:	f000 f831 	bl	8007d50 <finite>
 8007cee:	b1a8      	cbz	r0, 8007d1c <pow+0xac>
 8007cf0:	ec45 4b10 	vmov	d0, r4, r5
 8007cf4:	f000 f82c 	bl	8007d50 <finite>
 8007cf8:	b180      	cbz	r0, 8007d1c <pow+0xac>
 8007cfa:	4632      	mov	r2, r6
 8007cfc:	463b      	mov	r3, r7
 8007cfe:	4630      	mov	r0, r6
 8007d00:	4639      	mov	r1, r7
 8007d02:	f7f8 ff2b 	bl	8000b5c <__aeabi_dcmpun>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d0e2      	beq.n	8007cd0 <pow+0x60>
 8007d0a:	f7ff f807 	bl	8006d1c <__errno>
 8007d0e:	2321      	movs	r3, #33	@ 0x21
 8007d10:	6003      	str	r3, [r0, #0]
 8007d12:	ecbd 8b02 	vpop	{d8}
 8007d16:	ec47 6b10 	vmov	d0, r6, r7
 8007d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	2300      	movs	r3, #0
 8007d20:	4630      	mov	r0, r6
 8007d22:	4639      	mov	r1, r7
 8007d24:	f7f8 fee8 	bl	8000af8 <__aeabi_dcmpeq>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	d0f2      	beq.n	8007d12 <pow+0xa2>
 8007d2c:	eeb0 0a48 	vmov.f32	s0, s16
 8007d30:	eef0 0a68 	vmov.f32	s1, s17
 8007d34:	f000 f80c 	bl	8007d50 <finite>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d0ea      	beq.n	8007d12 <pow+0xa2>
 8007d3c:	ec45 4b10 	vmov	d0, r4, r5
 8007d40:	f000 f806 	bl	8007d50 <finite>
 8007d44:	e7c3      	b.n	8007cce <pow+0x5e>
 8007d46:	4f01      	ldr	r7, [pc, #4]	@ (8007d4c <pow+0xdc>)
 8007d48:	2600      	movs	r6, #0
 8007d4a:	e7e2      	b.n	8007d12 <pow+0xa2>
 8007d4c:	3ff00000 	.word	0x3ff00000

08007d50 <finite>:
 8007d50:	b082      	sub	sp, #8
 8007d52:	ed8d 0b00 	vstr	d0, [sp]
 8007d56:	9801      	ldr	r0, [sp, #4]
 8007d58:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007d5c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007d60:	0fc0      	lsrs	r0, r0, #31
 8007d62:	b002      	add	sp, #8
 8007d64:	4770      	bx	lr
	...

08007d68 <__ieee754_pow>:
 8007d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	b091      	sub	sp, #68	@ 0x44
 8007d6e:	ed8d 1b00 	vstr	d1, [sp]
 8007d72:	e9dd 1900 	ldrd	r1, r9, [sp]
 8007d76:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8007d7a:	ea5a 0001 	orrs.w	r0, sl, r1
 8007d7e:	ec57 6b10 	vmov	r6, r7, d0
 8007d82:	d113      	bne.n	8007dac <__ieee754_pow+0x44>
 8007d84:	19b3      	adds	r3, r6, r6
 8007d86:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8007d8a:	4152      	adcs	r2, r2
 8007d8c:	4298      	cmp	r0, r3
 8007d8e:	4b9a      	ldr	r3, [pc, #616]	@ (8007ff8 <__ieee754_pow+0x290>)
 8007d90:	4193      	sbcs	r3, r2
 8007d92:	f080 84ee 	bcs.w	8008772 <__ieee754_pow+0xa0a>
 8007d96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	4639      	mov	r1, r7
 8007d9e:	f7f8 fa8d 	bl	80002bc <__adddf3>
 8007da2:	ec41 0b10 	vmov	d0, r0, r1
 8007da6:	b011      	add	sp, #68	@ 0x44
 8007da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dac:	4a93      	ldr	r2, [pc, #588]	@ (8007ffc <__ieee754_pow+0x294>)
 8007dae:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8007db2:	4295      	cmp	r5, r2
 8007db4:	46b8      	mov	r8, r7
 8007db6:	4633      	mov	r3, r6
 8007db8:	d80a      	bhi.n	8007dd0 <__ieee754_pow+0x68>
 8007dba:	d104      	bne.n	8007dc6 <__ieee754_pow+0x5e>
 8007dbc:	2e00      	cmp	r6, #0
 8007dbe:	d1ea      	bne.n	8007d96 <__ieee754_pow+0x2e>
 8007dc0:	45aa      	cmp	sl, r5
 8007dc2:	d8e8      	bhi.n	8007d96 <__ieee754_pow+0x2e>
 8007dc4:	e001      	b.n	8007dca <__ieee754_pow+0x62>
 8007dc6:	4592      	cmp	sl, r2
 8007dc8:	d802      	bhi.n	8007dd0 <__ieee754_pow+0x68>
 8007dca:	4592      	cmp	sl, r2
 8007dcc:	d10f      	bne.n	8007dee <__ieee754_pow+0x86>
 8007dce:	b171      	cbz	r1, 8007dee <__ieee754_pow+0x86>
 8007dd0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8007dd4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007dd8:	ea58 0803 	orrs.w	r8, r8, r3
 8007ddc:	d1db      	bne.n	8007d96 <__ieee754_pow+0x2e>
 8007dde:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007de2:	18db      	adds	r3, r3, r3
 8007de4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007de8:	4152      	adcs	r2, r2
 8007dea:	4598      	cmp	r8, r3
 8007dec:	e7cf      	b.n	8007d8e <__ieee754_pow+0x26>
 8007dee:	f1b8 0f00 	cmp.w	r8, #0
 8007df2:	46ab      	mov	fp, r5
 8007df4:	da43      	bge.n	8007e7e <__ieee754_pow+0x116>
 8007df6:	4a82      	ldr	r2, [pc, #520]	@ (8008000 <__ieee754_pow+0x298>)
 8007df8:	4592      	cmp	sl, r2
 8007dfa:	d856      	bhi.n	8007eaa <__ieee754_pow+0x142>
 8007dfc:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007e00:	4592      	cmp	sl, r2
 8007e02:	f240 84c5 	bls.w	8008790 <__ieee754_pow+0xa28>
 8007e06:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007e0a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007e0e:	2a14      	cmp	r2, #20
 8007e10:	dd18      	ble.n	8007e44 <__ieee754_pow+0xdc>
 8007e12:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007e16:	fa21 f402 	lsr.w	r4, r1, r2
 8007e1a:	fa04 f202 	lsl.w	r2, r4, r2
 8007e1e:	428a      	cmp	r2, r1
 8007e20:	f040 84b6 	bne.w	8008790 <__ieee754_pow+0xa28>
 8007e24:	f004 0401 	and.w	r4, r4, #1
 8007e28:	f1c4 0402 	rsb	r4, r4, #2
 8007e2c:	2900      	cmp	r1, #0
 8007e2e:	d159      	bne.n	8007ee4 <__ieee754_pow+0x17c>
 8007e30:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8007e34:	d148      	bne.n	8007ec8 <__ieee754_pow+0x160>
 8007e36:	4632      	mov	r2, r6
 8007e38:	463b      	mov	r3, r7
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	f7f8 fbf3 	bl	8000628 <__aeabi_dmul>
 8007e42:	e7ae      	b.n	8007da2 <__ieee754_pow+0x3a>
 8007e44:	2900      	cmp	r1, #0
 8007e46:	d14c      	bne.n	8007ee2 <__ieee754_pow+0x17a>
 8007e48:	f1c2 0214 	rsb	r2, r2, #20
 8007e4c:	fa4a f402 	asr.w	r4, sl, r2
 8007e50:	fa04 f202 	lsl.w	r2, r4, r2
 8007e54:	4552      	cmp	r2, sl
 8007e56:	f040 8498 	bne.w	800878a <__ieee754_pow+0xa22>
 8007e5a:	f004 0401 	and.w	r4, r4, #1
 8007e5e:	f1c4 0402 	rsb	r4, r4, #2
 8007e62:	4a68      	ldr	r2, [pc, #416]	@ (8008004 <__ieee754_pow+0x29c>)
 8007e64:	4592      	cmp	sl, r2
 8007e66:	d1e3      	bne.n	8007e30 <__ieee754_pow+0xc8>
 8007e68:	f1b9 0f00 	cmp.w	r9, #0
 8007e6c:	f280 8489 	bge.w	8008782 <__ieee754_pow+0xa1a>
 8007e70:	4964      	ldr	r1, [pc, #400]	@ (8008004 <__ieee754_pow+0x29c>)
 8007e72:	4632      	mov	r2, r6
 8007e74:	463b      	mov	r3, r7
 8007e76:	2000      	movs	r0, #0
 8007e78:	f7f8 fd00 	bl	800087c <__aeabi_ddiv>
 8007e7c:	e791      	b.n	8007da2 <__ieee754_pow+0x3a>
 8007e7e:	2400      	movs	r4, #0
 8007e80:	bb81      	cbnz	r1, 8007ee4 <__ieee754_pow+0x17c>
 8007e82:	4a5e      	ldr	r2, [pc, #376]	@ (8007ffc <__ieee754_pow+0x294>)
 8007e84:	4592      	cmp	sl, r2
 8007e86:	d1ec      	bne.n	8007e62 <__ieee754_pow+0xfa>
 8007e88:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8007e8c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8007e90:	431a      	orrs	r2, r3
 8007e92:	f000 846e 	beq.w	8008772 <__ieee754_pow+0xa0a>
 8007e96:	4b5c      	ldr	r3, [pc, #368]	@ (8008008 <__ieee754_pow+0x2a0>)
 8007e98:	429d      	cmp	r5, r3
 8007e9a:	d908      	bls.n	8007eae <__ieee754_pow+0x146>
 8007e9c:	f1b9 0f00 	cmp.w	r9, #0
 8007ea0:	f280 846b 	bge.w	800877a <__ieee754_pow+0xa12>
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	e77b      	b.n	8007da2 <__ieee754_pow+0x3a>
 8007eaa:	2402      	movs	r4, #2
 8007eac:	e7e8      	b.n	8007e80 <__ieee754_pow+0x118>
 8007eae:	f1b9 0f00 	cmp.w	r9, #0
 8007eb2:	f04f 0000 	mov.w	r0, #0
 8007eb6:	f04f 0100 	mov.w	r1, #0
 8007eba:	f6bf af72 	bge.w	8007da2 <__ieee754_pow+0x3a>
 8007ebe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007ec2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007ec6:	e76c      	b.n	8007da2 <__ieee754_pow+0x3a>
 8007ec8:	4a50      	ldr	r2, [pc, #320]	@ (800800c <__ieee754_pow+0x2a4>)
 8007eca:	4591      	cmp	r9, r2
 8007ecc:	d10a      	bne.n	8007ee4 <__ieee754_pow+0x17c>
 8007ece:	f1b8 0f00 	cmp.w	r8, #0
 8007ed2:	db07      	blt.n	8007ee4 <__ieee754_pow+0x17c>
 8007ed4:	ec47 6b10 	vmov	d0, r6, r7
 8007ed8:	b011      	add	sp, #68	@ 0x44
 8007eda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ede:	f000 bd4f 	b.w	8008980 <__ieee754_sqrt>
 8007ee2:	2400      	movs	r4, #0
 8007ee4:	ec47 6b10 	vmov	d0, r6, r7
 8007ee8:	9302      	str	r3, [sp, #8]
 8007eea:	f000 fc87 	bl	80087fc <fabs>
 8007eee:	9b02      	ldr	r3, [sp, #8]
 8007ef0:	ec51 0b10 	vmov	r0, r1, d0
 8007ef4:	bb43      	cbnz	r3, 8007f48 <__ieee754_pow+0x1e0>
 8007ef6:	4b43      	ldr	r3, [pc, #268]	@ (8008004 <__ieee754_pow+0x29c>)
 8007ef8:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d000      	beq.n	8007f02 <__ieee754_pow+0x19a>
 8007f00:	bb15      	cbnz	r5, 8007f48 <__ieee754_pow+0x1e0>
 8007f02:	f1b9 0f00 	cmp.w	r9, #0
 8007f06:	da05      	bge.n	8007f14 <__ieee754_pow+0x1ac>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	493d      	ldr	r1, [pc, #244]	@ (8008004 <__ieee754_pow+0x29c>)
 8007f10:	f7f8 fcb4 	bl	800087c <__aeabi_ddiv>
 8007f14:	f1b8 0f00 	cmp.w	r8, #0
 8007f18:	f6bf af43 	bge.w	8007da2 <__ieee754_pow+0x3a>
 8007f1c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007f20:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007f24:	4325      	orrs	r5, r4
 8007f26:	d108      	bne.n	8007f3a <__ieee754_pow+0x1d2>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	4619      	mov	r1, r3
 8007f30:	f7f8 f9c2 	bl	80002b8 <__aeabi_dsub>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	e79e      	b.n	8007e78 <__ieee754_pow+0x110>
 8007f3a:	2c01      	cmp	r4, #1
 8007f3c:	f47f af31 	bne.w	8007da2 <__ieee754_pow+0x3a>
 8007f40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007f44:	4619      	mov	r1, r3
 8007f46:	e72c      	b.n	8007da2 <__ieee754_pow+0x3a>
 8007f48:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	ea53 0204 	orrs.w	r2, r3, r4
 8007f52:	d102      	bne.n	8007f5a <__ieee754_pow+0x1f2>
 8007f54:	4632      	mov	r2, r6
 8007f56:	463b      	mov	r3, r7
 8007f58:	e7e8      	b.n	8007f2c <__ieee754_pow+0x1c4>
 8007f5a:	3c01      	subs	r4, #1
 8007f5c:	431c      	orrs	r4, r3
 8007f5e:	d016      	beq.n	8007f8e <__ieee754_pow+0x226>
 8007f60:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007fe8 <__ieee754_pow+0x280>
 8007f64:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8007f68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007f6c:	f240 8110 	bls.w	8008190 <__ieee754_pow+0x428>
 8007f70:	4b27      	ldr	r3, [pc, #156]	@ (8008010 <__ieee754_pow+0x2a8>)
 8007f72:	459a      	cmp	sl, r3
 8007f74:	4b24      	ldr	r3, [pc, #144]	@ (8008008 <__ieee754_pow+0x2a0>)
 8007f76:	d916      	bls.n	8007fa6 <__ieee754_pow+0x23e>
 8007f78:	429d      	cmp	r5, r3
 8007f7a:	d80b      	bhi.n	8007f94 <__ieee754_pow+0x22c>
 8007f7c:	f1b9 0f00 	cmp.w	r9, #0
 8007f80:	da0b      	bge.n	8007f9a <__ieee754_pow+0x232>
 8007f82:	2000      	movs	r0, #0
 8007f84:	b011      	add	sp, #68	@ 0x44
 8007f86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8a:	f000 bcf1 	b.w	8008970 <__math_oflow>
 8007f8e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8007ff0 <__ieee754_pow+0x288>
 8007f92:	e7e7      	b.n	8007f64 <__ieee754_pow+0x1fc>
 8007f94:	f1b9 0f00 	cmp.w	r9, #0
 8007f98:	dcf3      	bgt.n	8007f82 <__ieee754_pow+0x21a>
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	b011      	add	sp, #68	@ 0x44
 8007f9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa2:	f000 bcdd 	b.w	8008960 <__math_uflow>
 8007fa6:	429d      	cmp	r5, r3
 8007fa8:	d20c      	bcs.n	8007fc4 <__ieee754_pow+0x25c>
 8007faa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f7f8 fdab 	bl	8000b0c <__aeabi_dcmplt>
 8007fb6:	3800      	subs	r0, #0
 8007fb8:	bf18      	it	ne
 8007fba:	2001      	movne	r0, #1
 8007fbc:	f1b9 0f00 	cmp.w	r9, #0
 8007fc0:	daec      	bge.n	8007f9c <__ieee754_pow+0x234>
 8007fc2:	e7df      	b.n	8007f84 <__ieee754_pow+0x21c>
 8007fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8008004 <__ieee754_pow+0x29c>)
 8007fc6:	429d      	cmp	r5, r3
 8007fc8:	f04f 0200 	mov.w	r2, #0
 8007fcc:	d922      	bls.n	8008014 <__ieee754_pow+0x2ac>
 8007fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f7f8 fd9a 	bl	8000b0c <__aeabi_dcmplt>
 8007fd8:	3800      	subs	r0, #0
 8007fda:	bf18      	it	ne
 8007fdc:	2001      	movne	r0, #1
 8007fde:	f1b9 0f00 	cmp.w	r9, #0
 8007fe2:	dccf      	bgt.n	8007f84 <__ieee754_pow+0x21c>
 8007fe4:	e7da      	b.n	8007f9c <__ieee754_pow+0x234>
 8007fe6:	bf00      	nop
 8007fe8:	00000000 	.word	0x00000000
 8007fec:	3ff00000 	.word	0x3ff00000
 8007ff0:	00000000 	.word	0x00000000
 8007ff4:	bff00000 	.word	0xbff00000
 8007ff8:	fff00000 	.word	0xfff00000
 8007ffc:	7ff00000 	.word	0x7ff00000
 8008000:	433fffff 	.word	0x433fffff
 8008004:	3ff00000 	.word	0x3ff00000
 8008008:	3fefffff 	.word	0x3fefffff
 800800c:	3fe00000 	.word	0x3fe00000
 8008010:	43f00000 	.word	0x43f00000
 8008014:	4b5a      	ldr	r3, [pc, #360]	@ (8008180 <__ieee754_pow+0x418>)
 8008016:	f7f8 f94f 	bl	80002b8 <__aeabi_dsub>
 800801a:	a351      	add	r3, pc, #324	@ (adr r3, 8008160 <__ieee754_pow+0x3f8>)
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	4604      	mov	r4, r0
 8008022:	460d      	mov	r5, r1
 8008024:	f7f8 fb00 	bl	8000628 <__aeabi_dmul>
 8008028:	a34f      	add	r3, pc, #316	@ (adr r3, 8008168 <__ieee754_pow+0x400>)
 800802a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802e:	4606      	mov	r6, r0
 8008030:	460f      	mov	r7, r1
 8008032:	4620      	mov	r0, r4
 8008034:	4629      	mov	r1, r5
 8008036:	f7f8 faf7 	bl	8000628 <__aeabi_dmul>
 800803a:	4b52      	ldr	r3, [pc, #328]	@ (8008184 <__ieee754_pow+0x41c>)
 800803c:	4682      	mov	sl, r0
 800803e:	468b      	mov	fp, r1
 8008040:	2200      	movs	r2, #0
 8008042:	4620      	mov	r0, r4
 8008044:	4629      	mov	r1, r5
 8008046:	f7f8 faef 	bl	8000628 <__aeabi_dmul>
 800804a:	4602      	mov	r2, r0
 800804c:	460b      	mov	r3, r1
 800804e:	a148      	add	r1, pc, #288	@ (adr r1, 8008170 <__ieee754_pow+0x408>)
 8008050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008054:	f7f8 f930 	bl	80002b8 <__aeabi_dsub>
 8008058:	4622      	mov	r2, r4
 800805a:	462b      	mov	r3, r5
 800805c:	f7f8 fae4 	bl	8000628 <__aeabi_dmul>
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	2000      	movs	r0, #0
 8008066:	4948      	ldr	r1, [pc, #288]	@ (8008188 <__ieee754_pow+0x420>)
 8008068:	f7f8 f926 	bl	80002b8 <__aeabi_dsub>
 800806c:	4622      	mov	r2, r4
 800806e:	4680      	mov	r8, r0
 8008070:	4689      	mov	r9, r1
 8008072:	462b      	mov	r3, r5
 8008074:	4620      	mov	r0, r4
 8008076:	4629      	mov	r1, r5
 8008078:	f7f8 fad6 	bl	8000628 <__aeabi_dmul>
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	4640      	mov	r0, r8
 8008082:	4649      	mov	r1, r9
 8008084:	f7f8 fad0 	bl	8000628 <__aeabi_dmul>
 8008088:	a33b      	add	r3, pc, #236	@ (adr r3, 8008178 <__ieee754_pow+0x410>)
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	f7f8 facb 	bl	8000628 <__aeabi_dmul>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4650      	mov	r0, sl
 8008098:	4659      	mov	r1, fp
 800809a:	f7f8 f90d 	bl	80002b8 <__aeabi_dsub>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4680      	mov	r8, r0
 80080a4:	4689      	mov	r9, r1
 80080a6:	4630      	mov	r0, r6
 80080a8:	4639      	mov	r1, r7
 80080aa:	f7f8 f907 	bl	80002bc <__adddf3>
 80080ae:	2400      	movs	r4, #0
 80080b0:	4632      	mov	r2, r6
 80080b2:	463b      	mov	r3, r7
 80080b4:	4620      	mov	r0, r4
 80080b6:	460d      	mov	r5, r1
 80080b8:	f7f8 f8fe 	bl	80002b8 <__aeabi_dsub>
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	4640      	mov	r0, r8
 80080c2:	4649      	mov	r1, r9
 80080c4:	f7f8 f8f8 	bl	80002b8 <__aeabi_dsub>
 80080c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80080d0:	2300      	movs	r3, #0
 80080d2:	9304      	str	r3, [sp, #16]
 80080d4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80080d8:	4606      	mov	r6, r0
 80080da:	460f      	mov	r7, r1
 80080dc:	465b      	mov	r3, fp
 80080de:	4652      	mov	r2, sl
 80080e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080e4:	f7f8 f8e8 	bl	80002b8 <__aeabi_dsub>
 80080e8:	4622      	mov	r2, r4
 80080ea:	462b      	mov	r3, r5
 80080ec:	f7f8 fa9c 	bl	8000628 <__aeabi_dmul>
 80080f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080f4:	4680      	mov	r8, r0
 80080f6:	4689      	mov	r9, r1
 80080f8:	4630      	mov	r0, r6
 80080fa:	4639      	mov	r1, r7
 80080fc:	f7f8 fa94 	bl	8000628 <__aeabi_dmul>
 8008100:	4602      	mov	r2, r0
 8008102:	460b      	mov	r3, r1
 8008104:	4640      	mov	r0, r8
 8008106:	4649      	mov	r1, r9
 8008108:	f7f8 f8d8 	bl	80002bc <__adddf3>
 800810c:	465b      	mov	r3, fp
 800810e:	4606      	mov	r6, r0
 8008110:	460f      	mov	r7, r1
 8008112:	4652      	mov	r2, sl
 8008114:	4620      	mov	r0, r4
 8008116:	4629      	mov	r1, r5
 8008118:	f7f8 fa86 	bl	8000628 <__aeabi_dmul>
 800811c:	460b      	mov	r3, r1
 800811e:	4602      	mov	r2, r0
 8008120:	4680      	mov	r8, r0
 8008122:	4689      	mov	r9, r1
 8008124:	4630      	mov	r0, r6
 8008126:	4639      	mov	r1, r7
 8008128:	f7f8 f8c8 	bl	80002bc <__adddf3>
 800812c:	4b17      	ldr	r3, [pc, #92]	@ (800818c <__ieee754_pow+0x424>)
 800812e:	4299      	cmp	r1, r3
 8008130:	4604      	mov	r4, r0
 8008132:	460d      	mov	r5, r1
 8008134:	468b      	mov	fp, r1
 8008136:	f340 820b 	ble.w	8008550 <__ieee754_pow+0x7e8>
 800813a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800813e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008142:	4303      	orrs	r3, r0
 8008144:	f000 81ea 	beq.w	800851c <__ieee754_pow+0x7b4>
 8008148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800814c:	2200      	movs	r2, #0
 800814e:	2300      	movs	r3, #0
 8008150:	f7f8 fcdc 	bl	8000b0c <__aeabi_dcmplt>
 8008154:	3800      	subs	r0, #0
 8008156:	bf18      	it	ne
 8008158:	2001      	movne	r0, #1
 800815a:	e713      	b.n	8007f84 <__ieee754_pow+0x21c>
 800815c:	f3af 8000 	nop.w
 8008160:	60000000 	.word	0x60000000
 8008164:	3ff71547 	.word	0x3ff71547
 8008168:	f85ddf44 	.word	0xf85ddf44
 800816c:	3e54ae0b 	.word	0x3e54ae0b
 8008170:	55555555 	.word	0x55555555
 8008174:	3fd55555 	.word	0x3fd55555
 8008178:	652b82fe 	.word	0x652b82fe
 800817c:	3ff71547 	.word	0x3ff71547
 8008180:	3ff00000 	.word	0x3ff00000
 8008184:	3fd00000 	.word	0x3fd00000
 8008188:	3fe00000 	.word	0x3fe00000
 800818c:	408fffff 	.word	0x408fffff
 8008190:	4bd5      	ldr	r3, [pc, #852]	@ (80084e8 <__ieee754_pow+0x780>)
 8008192:	ea08 0303 	and.w	r3, r8, r3
 8008196:	2200      	movs	r2, #0
 8008198:	b92b      	cbnz	r3, 80081a6 <__ieee754_pow+0x43e>
 800819a:	4bd4      	ldr	r3, [pc, #848]	@ (80084ec <__ieee754_pow+0x784>)
 800819c:	f7f8 fa44 	bl	8000628 <__aeabi_dmul>
 80081a0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80081a4:	468b      	mov	fp, r1
 80081a6:	ea4f 532b 	mov.w	r3, fp, asr #20
 80081aa:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80081ae:	4413      	add	r3, r2
 80081b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80081b2:	4bcf      	ldr	r3, [pc, #828]	@ (80084f0 <__ieee754_pow+0x788>)
 80081b4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80081b8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80081bc:	459b      	cmp	fp, r3
 80081be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80081c2:	dd08      	ble.n	80081d6 <__ieee754_pow+0x46e>
 80081c4:	4bcb      	ldr	r3, [pc, #812]	@ (80084f4 <__ieee754_pow+0x78c>)
 80081c6:	459b      	cmp	fp, r3
 80081c8:	f340 81a5 	ble.w	8008516 <__ieee754_pow+0x7ae>
 80081cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081ce:	3301      	adds	r3, #1
 80081d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80081d2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80081d6:	f04f 0a00 	mov.w	sl, #0
 80081da:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80081de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081e0:	4bc5      	ldr	r3, [pc, #788]	@ (80084f8 <__ieee754_pow+0x790>)
 80081e2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80081e6:	ed93 7b00 	vldr	d7, [r3]
 80081ea:	4629      	mov	r1, r5
 80081ec:	ec53 2b17 	vmov	r2, r3, d7
 80081f0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80081f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80081f8:	f7f8 f85e 	bl	80002b8 <__aeabi_dsub>
 80081fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008200:	4606      	mov	r6, r0
 8008202:	460f      	mov	r7, r1
 8008204:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008208:	f7f8 f858 	bl	80002bc <__adddf3>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	2000      	movs	r0, #0
 8008212:	49ba      	ldr	r1, [pc, #744]	@ (80084fc <__ieee754_pow+0x794>)
 8008214:	f7f8 fb32 	bl	800087c <__aeabi_ddiv>
 8008218:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4630      	mov	r0, r6
 8008222:	4639      	mov	r1, r7
 8008224:	f7f8 fa00 	bl	8000628 <__aeabi_dmul>
 8008228:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800822c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8008230:	106d      	asrs	r5, r5, #1
 8008232:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008236:	f04f 0b00 	mov.w	fp, #0
 800823a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800823e:	4661      	mov	r1, ip
 8008240:	2200      	movs	r2, #0
 8008242:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008246:	4658      	mov	r0, fp
 8008248:	46e1      	mov	r9, ip
 800824a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800824e:	4614      	mov	r4, r2
 8008250:	461d      	mov	r5, r3
 8008252:	f7f8 f9e9 	bl	8000628 <__aeabi_dmul>
 8008256:	4602      	mov	r2, r0
 8008258:	460b      	mov	r3, r1
 800825a:	4630      	mov	r0, r6
 800825c:	4639      	mov	r1, r7
 800825e:	f7f8 f82b 	bl	80002b8 <__aeabi_dsub>
 8008262:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008266:	4606      	mov	r6, r0
 8008268:	460f      	mov	r7, r1
 800826a:	4620      	mov	r0, r4
 800826c:	4629      	mov	r1, r5
 800826e:	f7f8 f823 	bl	80002b8 <__aeabi_dsub>
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800827a:	f7f8 f81d 	bl	80002b8 <__aeabi_dsub>
 800827e:	465a      	mov	r2, fp
 8008280:	464b      	mov	r3, r9
 8008282:	f7f8 f9d1 	bl	8000628 <__aeabi_dmul>
 8008286:	4602      	mov	r2, r0
 8008288:	460b      	mov	r3, r1
 800828a:	4630      	mov	r0, r6
 800828c:	4639      	mov	r1, r7
 800828e:	f7f8 f813 	bl	80002b8 <__aeabi_dsub>
 8008292:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008296:	f7f8 f9c7 	bl	8000628 <__aeabi_dmul>
 800829a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800829e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80082a2:	4610      	mov	r0, r2
 80082a4:	4619      	mov	r1, r3
 80082a6:	f7f8 f9bf 	bl	8000628 <__aeabi_dmul>
 80082aa:	a37d      	add	r3, pc, #500	@ (adr r3, 80084a0 <__ieee754_pow+0x738>)
 80082ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b0:	4604      	mov	r4, r0
 80082b2:	460d      	mov	r5, r1
 80082b4:	f7f8 f9b8 	bl	8000628 <__aeabi_dmul>
 80082b8:	a37b      	add	r3, pc, #492	@ (adr r3, 80084a8 <__ieee754_pow+0x740>)
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	f7f7 fffd 	bl	80002bc <__adddf3>
 80082c2:	4622      	mov	r2, r4
 80082c4:	462b      	mov	r3, r5
 80082c6:	f7f8 f9af 	bl	8000628 <__aeabi_dmul>
 80082ca:	a379      	add	r3, pc, #484	@ (adr r3, 80084b0 <__ieee754_pow+0x748>)
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	f7f7 fff4 	bl	80002bc <__adddf3>
 80082d4:	4622      	mov	r2, r4
 80082d6:	462b      	mov	r3, r5
 80082d8:	f7f8 f9a6 	bl	8000628 <__aeabi_dmul>
 80082dc:	a376      	add	r3, pc, #472	@ (adr r3, 80084b8 <__ieee754_pow+0x750>)
 80082de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e2:	f7f7 ffeb 	bl	80002bc <__adddf3>
 80082e6:	4622      	mov	r2, r4
 80082e8:	462b      	mov	r3, r5
 80082ea:	f7f8 f99d 	bl	8000628 <__aeabi_dmul>
 80082ee:	a374      	add	r3, pc, #464	@ (adr r3, 80084c0 <__ieee754_pow+0x758>)
 80082f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f4:	f7f7 ffe2 	bl	80002bc <__adddf3>
 80082f8:	4622      	mov	r2, r4
 80082fa:	462b      	mov	r3, r5
 80082fc:	f7f8 f994 	bl	8000628 <__aeabi_dmul>
 8008300:	a371      	add	r3, pc, #452	@ (adr r3, 80084c8 <__ieee754_pow+0x760>)
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	f7f7 ffd9 	bl	80002bc <__adddf3>
 800830a:	4622      	mov	r2, r4
 800830c:	4606      	mov	r6, r0
 800830e:	460f      	mov	r7, r1
 8008310:	462b      	mov	r3, r5
 8008312:	4620      	mov	r0, r4
 8008314:	4629      	mov	r1, r5
 8008316:	f7f8 f987 	bl	8000628 <__aeabi_dmul>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	4630      	mov	r0, r6
 8008320:	4639      	mov	r1, r7
 8008322:	f7f8 f981 	bl	8000628 <__aeabi_dmul>
 8008326:	465a      	mov	r2, fp
 8008328:	4604      	mov	r4, r0
 800832a:	460d      	mov	r5, r1
 800832c:	464b      	mov	r3, r9
 800832e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008332:	f7f7 ffc3 	bl	80002bc <__adddf3>
 8008336:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800833a:	f7f8 f975 	bl	8000628 <__aeabi_dmul>
 800833e:	4622      	mov	r2, r4
 8008340:	462b      	mov	r3, r5
 8008342:	f7f7 ffbb 	bl	80002bc <__adddf3>
 8008346:	465a      	mov	r2, fp
 8008348:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800834c:	464b      	mov	r3, r9
 800834e:	4658      	mov	r0, fp
 8008350:	4649      	mov	r1, r9
 8008352:	f7f8 f969 	bl	8000628 <__aeabi_dmul>
 8008356:	4b6a      	ldr	r3, [pc, #424]	@ (8008500 <__ieee754_pow+0x798>)
 8008358:	2200      	movs	r2, #0
 800835a:	4606      	mov	r6, r0
 800835c:	460f      	mov	r7, r1
 800835e:	f7f7 ffad 	bl	80002bc <__adddf3>
 8008362:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008366:	f7f7 ffa9 	bl	80002bc <__adddf3>
 800836a:	46d8      	mov	r8, fp
 800836c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008370:	460d      	mov	r5, r1
 8008372:	465a      	mov	r2, fp
 8008374:	460b      	mov	r3, r1
 8008376:	4640      	mov	r0, r8
 8008378:	4649      	mov	r1, r9
 800837a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800837e:	f7f8 f953 	bl	8000628 <__aeabi_dmul>
 8008382:	465c      	mov	r4, fp
 8008384:	4680      	mov	r8, r0
 8008386:	4689      	mov	r9, r1
 8008388:	4b5d      	ldr	r3, [pc, #372]	@ (8008500 <__ieee754_pow+0x798>)
 800838a:	2200      	movs	r2, #0
 800838c:	4620      	mov	r0, r4
 800838e:	4629      	mov	r1, r5
 8008390:	f7f7 ff92 	bl	80002b8 <__aeabi_dsub>
 8008394:	4632      	mov	r2, r6
 8008396:	463b      	mov	r3, r7
 8008398:	f7f7 ff8e 	bl	80002b8 <__aeabi_dsub>
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083a4:	f7f7 ff88 	bl	80002b8 <__aeabi_dsub>
 80083a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083ac:	f7f8 f93c 	bl	8000628 <__aeabi_dmul>
 80083b0:	4622      	mov	r2, r4
 80083b2:	4606      	mov	r6, r0
 80083b4:	460f      	mov	r7, r1
 80083b6:	462b      	mov	r3, r5
 80083b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083bc:	f7f8 f934 	bl	8000628 <__aeabi_dmul>
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	4630      	mov	r0, r6
 80083c6:	4639      	mov	r1, r7
 80083c8:	f7f7 ff78 	bl	80002bc <__adddf3>
 80083cc:	4606      	mov	r6, r0
 80083ce:	460f      	mov	r7, r1
 80083d0:	4602      	mov	r2, r0
 80083d2:	460b      	mov	r3, r1
 80083d4:	4640      	mov	r0, r8
 80083d6:	4649      	mov	r1, r9
 80083d8:	f7f7 ff70 	bl	80002bc <__adddf3>
 80083dc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80083e0:	a33b      	add	r3, pc, #236	@ (adr r3, 80084d0 <__ieee754_pow+0x768>)
 80083e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e6:	4658      	mov	r0, fp
 80083e8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80083ec:	460d      	mov	r5, r1
 80083ee:	f7f8 f91b 	bl	8000628 <__aeabi_dmul>
 80083f2:	465c      	mov	r4, fp
 80083f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083f8:	4642      	mov	r2, r8
 80083fa:	464b      	mov	r3, r9
 80083fc:	4620      	mov	r0, r4
 80083fe:	4629      	mov	r1, r5
 8008400:	f7f7 ff5a 	bl	80002b8 <__aeabi_dsub>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	4630      	mov	r0, r6
 800840a:	4639      	mov	r1, r7
 800840c:	f7f7 ff54 	bl	80002b8 <__aeabi_dsub>
 8008410:	a331      	add	r3, pc, #196	@ (adr r3, 80084d8 <__ieee754_pow+0x770>)
 8008412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008416:	f7f8 f907 	bl	8000628 <__aeabi_dmul>
 800841a:	a331      	add	r3, pc, #196	@ (adr r3, 80084e0 <__ieee754_pow+0x778>)
 800841c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008420:	4606      	mov	r6, r0
 8008422:	460f      	mov	r7, r1
 8008424:	4620      	mov	r0, r4
 8008426:	4629      	mov	r1, r5
 8008428:	f7f8 f8fe 	bl	8000628 <__aeabi_dmul>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	4630      	mov	r0, r6
 8008432:	4639      	mov	r1, r7
 8008434:	f7f7 ff42 	bl	80002bc <__adddf3>
 8008438:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800843a:	4b32      	ldr	r3, [pc, #200]	@ (8008504 <__ieee754_pow+0x79c>)
 800843c:	4413      	add	r3, r2
 800843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008442:	f7f7 ff3b 	bl	80002bc <__adddf3>
 8008446:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800844a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800844c:	f7f8 f882 	bl	8000554 <__aeabi_i2d>
 8008450:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008452:	4b2d      	ldr	r3, [pc, #180]	@ (8008508 <__ieee754_pow+0x7a0>)
 8008454:	4413      	add	r3, r2
 8008456:	e9d3 8900 	ldrd	r8, r9, [r3]
 800845a:	4606      	mov	r6, r0
 800845c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008460:	460f      	mov	r7, r1
 8008462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008466:	f7f7 ff29 	bl	80002bc <__adddf3>
 800846a:	4642      	mov	r2, r8
 800846c:	464b      	mov	r3, r9
 800846e:	f7f7 ff25 	bl	80002bc <__adddf3>
 8008472:	4632      	mov	r2, r6
 8008474:	463b      	mov	r3, r7
 8008476:	f7f7 ff21 	bl	80002bc <__adddf3>
 800847a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800847e:	4632      	mov	r2, r6
 8008480:	463b      	mov	r3, r7
 8008482:	4658      	mov	r0, fp
 8008484:	460d      	mov	r5, r1
 8008486:	f7f7 ff17 	bl	80002b8 <__aeabi_dsub>
 800848a:	4642      	mov	r2, r8
 800848c:	464b      	mov	r3, r9
 800848e:	f7f7 ff13 	bl	80002b8 <__aeabi_dsub>
 8008492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008496:	f7f7 ff0f 	bl	80002b8 <__aeabi_dsub>
 800849a:	465c      	mov	r4, fp
 800849c:	e036      	b.n	800850c <__ieee754_pow+0x7a4>
 800849e:	bf00      	nop
 80084a0:	4a454eef 	.word	0x4a454eef
 80084a4:	3fca7e28 	.word	0x3fca7e28
 80084a8:	93c9db65 	.word	0x93c9db65
 80084ac:	3fcd864a 	.word	0x3fcd864a
 80084b0:	a91d4101 	.word	0xa91d4101
 80084b4:	3fd17460 	.word	0x3fd17460
 80084b8:	518f264d 	.word	0x518f264d
 80084bc:	3fd55555 	.word	0x3fd55555
 80084c0:	db6fabff 	.word	0xdb6fabff
 80084c4:	3fdb6db6 	.word	0x3fdb6db6
 80084c8:	33333303 	.word	0x33333303
 80084cc:	3fe33333 	.word	0x3fe33333
 80084d0:	e0000000 	.word	0xe0000000
 80084d4:	3feec709 	.word	0x3feec709
 80084d8:	dc3a03fd 	.word	0xdc3a03fd
 80084dc:	3feec709 	.word	0x3feec709
 80084e0:	145b01f5 	.word	0x145b01f5
 80084e4:	be3e2fe0 	.word	0xbe3e2fe0
 80084e8:	7ff00000 	.word	0x7ff00000
 80084ec:	43400000 	.word	0x43400000
 80084f0:	0003988e 	.word	0x0003988e
 80084f4:	000bb679 	.word	0x000bb679
 80084f8:	080090b0 	.word	0x080090b0
 80084fc:	3ff00000 	.word	0x3ff00000
 8008500:	40080000 	.word	0x40080000
 8008504:	08009090 	.word	0x08009090
 8008508:	080090a0 	.word	0x080090a0
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008514:	e5d6      	b.n	80080c4 <__ieee754_pow+0x35c>
 8008516:	f04f 0a01 	mov.w	sl, #1
 800851a:	e65e      	b.n	80081da <__ieee754_pow+0x472>
 800851c:	a3b5      	add	r3, pc, #724	@ (adr r3, 80087f4 <__ieee754_pow+0xa8c>)
 800851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008522:	4630      	mov	r0, r6
 8008524:	4639      	mov	r1, r7
 8008526:	f7f7 fec9 	bl	80002bc <__adddf3>
 800852a:	4642      	mov	r2, r8
 800852c:	e9cd 0100 	strd	r0, r1, [sp]
 8008530:	464b      	mov	r3, r9
 8008532:	4620      	mov	r0, r4
 8008534:	4629      	mov	r1, r5
 8008536:	f7f7 febf 	bl	80002b8 <__aeabi_dsub>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008542:	f7f8 fb01 	bl	8000b48 <__aeabi_dcmpgt>
 8008546:	2800      	cmp	r0, #0
 8008548:	f47f adfe 	bne.w	8008148 <__ieee754_pow+0x3e0>
 800854c:	4ba2      	ldr	r3, [pc, #648]	@ (80087d8 <__ieee754_pow+0xa70>)
 800854e:	e022      	b.n	8008596 <__ieee754_pow+0x82e>
 8008550:	4ca2      	ldr	r4, [pc, #648]	@ (80087dc <__ieee754_pow+0xa74>)
 8008552:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008556:	42a3      	cmp	r3, r4
 8008558:	d919      	bls.n	800858e <__ieee754_pow+0x826>
 800855a:	4ba1      	ldr	r3, [pc, #644]	@ (80087e0 <__ieee754_pow+0xa78>)
 800855c:	440b      	add	r3, r1
 800855e:	4303      	orrs	r3, r0
 8008560:	d009      	beq.n	8008576 <__ieee754_pow+0x80e>
 8008562:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008566:	2200      	movs	r2, #0
 8008568:	2300      	movs	r3, #0
 800856a:	f7f8 facf 	bl	8000b0c <__aeabi_dcmplt>
 800856e:	3800      	subs	r0, #0
 8008570:	bf18      	it	ne
 8008572:	2001      	movne	r0, #1
 8008574:	e512      	b.n	8007f9c <__ieee754_pow+0x234>
 8008576:	4642      	mov	r2, r8
 8008578:	464b      	mov	r3, r9
 800857a:	f7f7 fe9d 	bl	80002b8 <__aeabi_dsub>
 800857e:	4632      	mov	r2, r6
 8008580:	463b      	mov	r3, r7
 8008582:	f7f8 fad7 	bl	8000b34 <__aeabi_dcmpge>
 8008586:	2800      	cmp	r0, #0
 8008588:	d1eb      	bne.n	8008562 <__ieee754_pow+0x7fa>
 800858a:	4b96      	ldr	r3, [pc, #600]	@ (80087e4 <__ieee754_pow+0xa7c>)
 800858c:	e003      	b.n	8008596 <__ieee754_pow+0x82e>
 800858e:	4a96      	ldr	r2, [pc, #600]	@ (80087e8 <__ieee754_pow+0xa80>)
 8008590:	4293      	cmp	r3, r2
 8008592:	f240 80e7 	bls.w	8008764 <__ieee754_pow+0x9fc>
 8008596:	151b      	asrs	r3, r3, #20
 8008598:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800859c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80085a0:	fa4a fa03 	asr.w	sl, sl, r3
 80085a4:	44da      	add	sl, fp
 80085a6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80085aa:	4890      	ldr	r0, [pc, #576]	@ (80087ec <__ieee754_pow+0xa84>)
 80085ac:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80085b0:	4108      	asrs	r0, r1
 80085b2:	ea00 030a 	and.w	r3, r0, sl
 80085b6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80085ba:	f1c1 0114 	rsb	r1, r1, #20
 80085be:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80085c2:	fa4a fa01 	asr.w	sl, sl, r1
 80085c6:	f1bb 0f00 	cmp.w	fp, #0
 80085ca:	4640      	mov	r0, r8
 80085cc:	4649      	mov	r1, r9
 80085ce:	f04f 0200 	mov.w	r2, #0
 80085d2:	bfb8      	it	lt
 80085d4:	f1ca 0a00 	rsblt	sl, sl, #0
 80085d8:	f7f7 fe6e 	bl	80002b8 <__aeabi_dsub>
 80085dc:	4680      	mov	r8, r0
 80085de:	4689      	mov	r9, r1
 80085e0:	4632      	mov	r2, r6
 80085e2:	463b      	mov	r3, r7
 80085e4:	4640      	mov	r0, r8
 80085e6:	4649      	mov	r1, r9
 80085e8:	f7f7 fe68 	bl	80002bc <__adddf3>
 80085ec:	2400      	movs	r4, #0
 80085ee:	a36a      	add	r3, pc, #424	@ (adr r3, 8008798 <__ieee754_pow+0xa30>)
 80085f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f4:	4620      	mov	r0, r4
 80085f6:	460d      	mov	r5, r1
 80085f8:	f7f8 f816 	bl	8000628 <__aeabi_dmul>
 80085fc:	4642      	mov	r2, r8
 80085fe:	e9cd 0100 	strd	r0, r1, [sp]
 8008602:	464b      	mov	r3, r9
 8008604:	4620      	mov	r0, r4
 8008606:	4629      	mov	r1, r5
 8008608:	f7f7 fe56 	bl	80002b8 <__aeabi_dsub>
 800860c:	4602      	mov	r2, r0
 800860e:	460b      	mov	r3, r1
 8008610:	4630      	mov	r0, r6
 8008612:	4639      	mov	r1, r7
 8008614:	f7f7 fe50 	bl	80002b8 <__aeabi_dsub>
 8008618:	a361      	add	r3, pc, #388	@ (adr r3, 80087a0 <__ieee754_pow+0xa38>)
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	f7f8 f803 	bl	8000628 <__aeabi_dmul>
 8008622:	a361      	add	r3, pc, #388	@ (adr r3, 80087a8 <__ieee754_pow+0xa40>)
 8008624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008628:	4680      	mov	r8, r0
 800862a:	4689      	mov	r9, r1
 800862c:	4620      	mov	r0, r4
 800862e:	4629      	mov	r1, r5
 8008630:	f7f7 fffa 	bl	8000628 <__aeabi_dmul>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	4640      	mov	r0, r8
 800863a:	4649      	mov	r1, r9
 800863c:	f7f7 fe3e 	bl	80002bc <__adddf3>
 8008640:	4604      	mov	r4, r0
 8008642:	460d      	mov	r5, r1
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	e9dd 0100 	ldrd	r0, r1, [sp]
 800864c:	f7f7 fe36 	bl	80002bc <__adddf3>
 8008650:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008654:	4680      	mov	r8, r0
 8008656:	4689      	mov	r9, r1
 8008658:	f7f7 fe2e 	bl	80002b8 <__aeabi_dsub>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	4620      	mov	r0, r4
 8008662:	4629      	mov	r1, r5
 8008664:	f7f7 fe28 	bl	80002b8 <__aeabi_dsub>
 8008668:	4642      	mov	r2, r8
 800866a:	4606      	mov	r6, r0
 800866c:	460f      	mov	r7, r1
 800866e:	464b      	mov	r3, r9
 8008670:	4640      	mov	r0, r8
 8008672:	4649      	mov	r1, r9
 8008674:	f7f7 ffd8 	bl	8000628 <__aeabi_dmul>
 8008678:	a34d      	add	r3, pc, #308	@ (adr r3, 80087b0 <__ieee754_pow+0xa48>)
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	4604      	mov	r4, r0
 8008680:	460d      	mov	r5, r1
 8008682:	f7f7 ffd1 	bl	8000628 <__aeabi_dmul>
 8008686:	a34c      	add	r3, pc, #304	@ (adr r3, 80087b8 <__ieee754_pow+0xa50>)
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	f7f7 fe14 	bl	80002b8 <__aeabi_dsub>
 8008690:	4622      	mov	r2, r4
 8008692:	462b      	mov	r3, r5
 8008694:	f7f7 ffc8 	bl	8000628 <__aeabi_dmul>
 8008698:	a349      	add	r3, pc, #292	@ (adr r3, 80087c0 <__ieee754_pow+0xa58>)
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	f7f7 fe0d 	bl	80002bc <__adddf3>
 80086a2:	4622      	mov	r2, r4
 80086a4:	462b      	mov	r3, r5
 80086a6:	f7f7 ffbf 	bl	8000628 <__aeabi_dmul>
 80086aa:	a347      	add	r3, pc, #284	@ (adr r3, 80087c8 <__ieee754_pow+0xa60>)
 80086ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b0:	f7f7 fe02 	bl	80002b8 <__aeabi_dsub>
 80086b4:	4622      	mov	r2, r4
 80086b6:	462b      	mov	r3, r5
 80086b8:	f7f7 ffb6 	bl	8000628 <__aeabi_dmul>
 80086bc:	a344      	add	r3, pc, #272	@ (adr r3, 80087d0 <__ieee754_pow+0xa68>)
 80086be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c2:	f7f7 fdfb 	bl	80002bc <__adddf3>
 80086c6:	4622      	mov	r2, r4
 80086c8:	462b      	mov	r3, r5
 80086ca:	f7f7 ffad 	bl	8000628 <__aeabi_dmul>
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	4640      	mov	r0, r8
 80086d4:	4649      	mov	r1, r9
 80086d6:	f7f7 fdef 	bl	80002b8 <__aeabi_dsub>
 80086da:	4604      	mov	r4, r0
 80086dc:	460d      	mov	r5, r1
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4640      	mov	r0, r8
 80086e4:	4649      	mov	r1, r9
 80086e6:	f7f7 ff9f 	bl	8000628 <__aeabi_dmul>
 80086ea:	2200      	movs	r2, #0
 80086ec:	e9cd 0100 	strd	r0, r1, [sp]
 80086f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80086f4:	4620      	mov	r0, r4
 80086f6:	4629      	mov	r1, r5
 80086f8:	f7f7 fdde 	bl	80002b8 <__aeabi_dsub>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008704:	f7f8 f8ba 	bl	800087c <__aeabi_ddiv>
 8008708:	4632      	mov	r2, r6
 800870a:	4604      	mov	r4, r0
 800870c:	460d      	mov	r5, r1
 800870e:	463b      	mov	r3, r7
 8008710:	4640      	mov	r0, r8
 8008712:	4649      	mov	r1, r9
 8008714:	f7f7 ff88 	bl	8000628 <__aeabi_dmul>
 8008718:	4632      	mov	r2, r6
 800871a:	463b      	mov	r3, r7
 800871c:	f7f7 fdce 	bl	80002bc <__adddf3>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4620      	mov	r0, r4
 8008726:	4629      	mov	r1, r5
 8008728:	f7f7 fdc6 	bl	80002b8 <__aeabi_dsub>
 800872c:	4642      	mov	r2, r8
 800872e:	464b      	mov	r3, r9
 8008730:	f7f7 fdc2 	bl	80002b8 <__aeabi_dsub>
 8008734:	460b      	mov	r3, r1
 8008736:	4602      	mov	r2, r0
 8008738:	492d      	ldr	r1, [pc, #180]	@ (80087f0 <__ieee754_pow+0xa88>)
 800873a:	2000      	movs	r0, #0
 800873c:	f7f7 fdbc 	bl	80002b8 <__aeabi_dsub>
 8008740:	ec41 0b10 	vmov	d0, r0, r1
 8008744:	ee10 3a90 	vmov	r3, s1
 8008748:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800874c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008750:	da0b      	bge.n	800876a <__ieee754_pow+0xa02>
 8008752:	4650      	mov	r0, sl
 8008754:	f000 f85c 	bl	8008810 <scalbn>
 8008758:	ec51 0b10 	vmov	r0, r1, d0
 800875c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008760:	f7ff bb6d 	b.w	8007e3e <__ieee754_pow+0xd6>
 8008764:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008768:	e73a      	b.n	80085e0 <__ieee754_pow+0x878>
 800876a:	ec51 0b10 	vmov	r0, r1, d0
 800876e:	4619      	mov	r1, r3
 8008770:	e7f4      	b.n	800875c <__ieee754_pow+0x9f4>
 8008772:	491f      	ldr	r1, [pc, #124]	@ (80087f0 <__ieee754_pow+0xa88>)
 8008774:	2000      	movs	r0, #0
 8008776:	f7ff bb14 	b.w	8007da2 <__ieee754_pow+0x3a>
 800877a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800877e:	f7ff bb10 	b.w	8007da2 <__ieee754_pow+0x3a>
 8008782:	4630      	mov	r0, r6
 8008784:	4639      	mov	r1, r7
 8008786:	f7ff bb0c 	b.w	8007da2 <__ieee754_pow+0x3a>
 800878a:	460c      	mov	r4, r1
 800878c:	f7ff bb69 	b.w	8007e62 <__ieee754_pow+0xfa>
 8008790:	2400      	movs	r4, #0
 8008792:	f7ff bb4b 	b.w	8007e2c <__ieee754_pow+0xc4>
 8008796:	bf00      	nop
 8008798:	00000000 	.word	0x00000000
 800879c:	3fe62e43 	.word	0x3fe62e43
 80087a0:	fefa39ef 	.word	0xfefa39ef
 80087a4:	3fe62e42 	.word	0x3fe62e42
 80087a8:	0ca86c39 	.word	0x0ca86c39
 80087ac:	be205c61 	.word	0xbe205c61
 80087b0:	72bea4d0 	.word	0x72bea4d0
 80087b4:	3e663769 	.word	0x3e663769
 80087b8:	c5d26bf1 	.word	0xc5d26bf1
 80087bc:	3ebbbd41 	.word	0x3ebbbd41
 80087c0:	af25de2c 	.word	0xaf25de2c
 80087c4:	3f11566a 	.word	0x3f11566a
 80087c8:	16bebd93 	.word	0x16bebd93
 80087cc:	3f66c16c 	.word	0x3f66c16c
 80087d0:	5555553e 	.word	0x5555553e
 80087d4:	3fc55555 	.word	0x3fc55555
 80087d8:	40900000 	.word	0x40900000
 80087dc:	4090cbff 	.word	0x4090cbff
 80087e0:	3f6f3400 	.word	0x3f6f3400
 80087e4:	4090cc00 	.word	0x4090cc00
 80087e8:	3fe00000 	.word	0x3fe00000
 80087ec:	fff00000 	.word	0xfff00000
 80087f0:	3ff00000 	.word	0x3ff00000
 80087f4:	652b82fe 	.word	0x652b82fe
 80087f8:	3c971547 	.word	0x3c971547

080087fc <fabs>:
 80087fc:	ec51 0b10 	vmov	r0, r1, d0
 8008800:	4602      	mov	r2, r0
 8008802:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008806:	ec43 2b10 	vmov	d0, r2, r3
 800880a:	4770      	bx	lr
 800880c:	0000      	movs	r0, r0
	...

08008810 <scalbn>:
 8008810:	b570      	push	{r4, r5, r6, lr}
 8008812:	ec55 4b10 	vmov	r4, r5, d0
 8008816:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800881a:	4606      	mov	r6, r0
 800881c:	462b      	mov	r3, r5
 800881e:	b991      	cbnz	r1, 8008846 <scalbn+0x36>
 8008820:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008824:	4323      	orrs	r3, r4
 8008826:	d03b      	beq.n	80088a0 <scalbn+0x90>
 8008828:	4b33      	ldr	r3, [pc, #204]	@ (80088f8 <scalbn+0xe8>)
 800882a:	4620      	mov	r0, r4
 800882c:	4629      	mov	r1, r5
 800882e:	2200      	movs	r2, #0
 8008830:	f7f7 fefa 	bl	8000628 <__aeabi_dmul>
 8008834:	4b31      	ldr	r3, [pc, #196]	@ (80088fc <scalbn+0xec>)
 8008836:	429e      	cmp	r6, r3
 8008838:	4604      	mov	r4, r0
 800883a:	460d      	mov	r5, r1
 800883c:	da0f      	bge.n	800885e <scalbn+0x4e>
 800883e:	a326      	add	r3, pc, #152	@ (adr r3, 80088d8 <scalbn+0xc8>)
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	e01e      	b.n	8008884 <scalbn+0x74>
 8008846:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800884a:	4291      	cmp	r1, r2
 800884c:	d10b      	bne.n	8008866 <scalbn+0x56>
 800884e:	4622      	mov	r2, r4
 8008850:	4620      	mov	r0, r4
 8008852:	4629      	mov	r1, r5
 8008854:	f7f7 fd32 	bl	80002bc <__adddf3>
 8008858:	4604      	mov	r4, r0
 800885a:	460d      	mov	r5, r1
 800885c:	e020      	b.n	80088a0 <scalbn+0x90>
 800885e:	460b      	mov	r3, r1
 8008860:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008864:	3936      	subs	r1, #54	@ 0x36
 8008866:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800886a:	4296      	cmp	r6, r2
 800886c:	dd0d      	ble.n	800888a <scalbn+0x7a>
 800886e:	2d00      	cmp	r5, #0
 8008870:	a11b      	add	r1, pc, #108	@ (adr r1, 80088e0 <scalbn+0xd0>)
 8008872:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008876:	da02      	bge.n	800887e <scalbn+0x6e>
 8008878:	a11b      	add	r1, pc, #108	@ (adr r1, 80088e8 <scalbn+0xd8>)
 800887a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800887e:	a318      	add	r3, pc, #96	@ (adr r3, 80088e0 <scalbn+0xd0>)
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	f7f7 fed0 	bl	8000628 <__aeabi_dmul>
 8008888:	e7e6      	b.n	8008858 <scalbn+0x48>
 800888a:	1872      	adds	r2, r6, r1
 800888c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008890:	428a      	cmp	r2, r1
 8008892:	dcec      	bgt.n	800886e <scalbn+0x5e>
 8008894:	2a00      	cmp	r2, #0
 8008896:	dd06      	ble.n	80088a6 <scalbn+0x96>
 8008898:	f36f 531e 	bfc	r3, #20, #11
 800889c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80088a0:	ec45 4b10 	vmov	d0, r4, r5
 80088a4:	bd70      	pop	{r4, r5, r6, pc}
 80088a6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80088aa:	da08      	bge.n	80088be <scalbn+0xae>
 80088ac:	2d00      	cmp	r5, #0
 80088ae:	a10a      	add	r1, pc, #40	@ (adr r1, 80088d8 <scalbn+0xc8>)
 80088b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088b4:	dac3      	bge.n	800883e <scalbn+0x2e>
 80088b6:	a10e      	add	r1, pc, #56	@ (adr r1, 80088f0 <scalbn+0xe0>)
 80088b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088bc:	e7bf      	b.n	800883e <scalbn+0x2e>
 80088be:	3236      	adds	r2, #54	@ 0x36
 80088c0:	f36f 531e 	bfc	r3, #20, #11
 80088c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80088c8:	4620      	mov	r0, r4
 80088ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008900 <scalbn+0xf0>)
 80088cc:	4629      	mov	r1, r5
 80088ce:	2200      	movs	r2, #0
 80088d0:	e7d8      	b.n	8008884 <scalbn+0x74>
 80088d2:	bf00      	nop
 80088d4:	f3af 8000 	nop.w
 80088d8:	c2f8f359 	.word	0xc2f8f359
 80088dc:	01a56e1f 	.word	0x01a56e1f
 80088e0:	8800759c 	.word	0x8800759c
 80088e4:	7e37e43c 	.word	0x7e37e43c
 80088e8:	8800759c 	.word	0x8800759c
 80088ec:	fe37e43c 	.word	0xfe37e43c
 80088f0:	c2f8f359 	.word	0xc2f8f359
 80088f4:	81a56e1f 	.word	0x81a56e1f
 80088f8:	43500000 	.word	0x43500000
 80088fc:	ffff3cb0 	.word	0xffff3cb0
 8008900:	3c900000 	.word	0x3c900000

08008904 <with_errno>:
 8008904:	b510      	push	{r4, lr}
 8008906:	ed2d 8b02 	vpush	{d8}
 800890a:	eeb0 8a40 	vmov.f32	s16, s0
 800890e:	eef0 8a60 	vmov.f32	s17, s1
 8008912:	4604      	mov	r4, r0
 8008914:	f7fe fa02 	bl	8006d1c <__errno>
 8008918:	eeb0 0a48 	vmov.f32	s0, s16
 800891c:	eef0 0a68 	vmov.f32	s1, s17
 8008920:	ecbd 8b02 	vpop	{d8}
 8008924:	6004      	str	r4, [r0, #0]
 8008926:	bd10      	pop	{r4, pc}

08008928 <xflow>:
 8008928:	4603      	mov	r3, r0
 800892a:	b507      	push	{r0, r1, r2, lr}
 800892c:	ec51 0b10 	vmov	r0, r1, d0
 8008930:	b183      	cbz	r3, 8008954 <xflow+0x2c>
 8008932:	4602      	mov	r2, r0
 8008934:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008938:	e9cd 2300 	strd	r2, r3, [sp]
 800893c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008940:	f7f7 fe72 	bl	8000628 <__aeabi_dmul>
 8008944:	ec41 0b10 	vmov	d0, r0, r1
 8008948:	2022      	movs	r0, #34	@ 0x22
 800894a:	b003      	add	sp, #12
 800894c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008950:	f7ff bfd8 	b.w	8008904 <with_errno>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	e7ee      	b.n	8008938 <xflow+0x10>
 800895a:	0000      	movs	r0, r0
 800895c:	0000      	movs	r0, r0
	...

08008960 <__math_uflow>:
 8008960:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008968 <__math_uflow+0x8>
 8008964:	f7ff bfe0 	b.w	8008928 <xflow>
 8008968:	00000000 	.word	0x00000000
 800896c:	10000000 	.word	0x10000000

08008970 <__math_oflow>:
 8008970:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008978 <__math_oflow+0x8>
 8008974:	f7ff bfd8 	b.w	8008928 <xflow>
 8008978:	00000000 	.word	0x00000000
 800897c:	70000000 	.word	0x70000000

08008980 <__ieee754_sqrt>:
 8008980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	4a66      	ldr	r2, [pc, #408]	@ (8008b20 <__ieee754_sqrt+0x1a0>)
 8008986:	ec55 4b10 	vmov	r4, r5, d0
 800898a:	43aa      	bics	r2, r5
 800898c:	462b      	mov	r3, r5
 800898e:	4621      	mov	r1, r4
 8008990:	d110      	bne.n	80089b4 <__ieee754_sqrt+0x34>
 8008992:	4622      	mov	r2, r4
 8008994:	4620      	mov	r0, r4
 8008996:	4629      	mov	r1, r5
 8008998:	f7f7 fe46 	bl	8000628 <__aeabi_dmul>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4620      	mov	r0, r4
 80089a2:	4629      	mov	r1, r5
 80089a4:	f7f7 fc8a 	bl	80002bc <__adddf3>
 80089a8:	4604      	mov	r4, r0
 80089aa:	460d      	mov	r5, r1
 80089ac:	ec45 4b10 	vmov	d0, r4, r5
 80089b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b4:	2d00      	cmp	r5, #0
 80089b6:	dc0e      	bgt.n	80089d6 <__ieee754_sqrt+0x56>
 80089b8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80089bc:	4322      	orrs	r2, r4
 80089be:	d0f5      	beq.n	80089ac <__ieee754_sqrt+0x2c>
 80089c0:	b19d      	cbz	r5, 80089ea <__ieee754_sqrt+0x6a>
 80089c2:	4622      	mov	r2, r4
 80089c4:	4620      	mov	r0, r4
 80089c6:	4629      	mov	r1, r5
 80089c8:	f7f7 fc76 	bl	80002b8 <__aeabi_dsub>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	f7f7 ff54 	bl	800087c <__aeabi_ddiv>
 80089d4:	e7e8      	b.n	80089a8 <__ieee754_sqrt+0x28>
 80089d6:	152a      	asrs	r2, r5, #20
 80089d8:	d115      	bne.n	8008a06 <__ieee754_sqrt+0x86>
 80089da:	2000      	movs	r0, #0
 80089dc:	e009      	b.n	80089f2 <__ieee754_sqrt+0x72>
 80089de:	0acb      	lsrs	r3, r1, #11
 80089e0:	3a15      	subs	r2, #21
 80089e2:	0549      	lsls	r1, r1, #21
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d0fa      	beq.n	80089de <__ieee754_sqrt+0x5e>
 80089e8:	e7f7      	b.n	80089da <__ieee754_sqrt+0x5a>
 80089ea:	462a      	mov	r2, r5
 80089ec:	e7fa      	b.n	80089e4 <__ieee754_sqrt+0x64>
 80089ee:	005b      	lsls	r3, r3, #1
 80089f0:	3001      	adds	r0, #1
 80089f2:	02dc      	lsls	r4, r3, #11
 80089f4:	d5fb      	bpl.n	80089ee <__ieee754_sqrt+0x6e>
 80089f6:	1e44      	subs	r4, r0, #1
 80089f8:	1b12      	subs	r2, r2, r4
 80089fa:	f1c0 0420 	rsb	r4, r0, #32
 80089fe:	fa21 f404 	lsr.w	r4, r1, r4
 8008a02:	4323      	orrs	r3, r4
 8008a04:	4081      	lsls	r1, r0
 8008a06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a0a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008a0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a12:	07d2      	lsls	r2, r2, #31
 8008a14:	bf5c      	itt	pl
 8008a16:	005b      	lslpl	r3, r3, #1
 8008a18:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008a1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a20:	bf58      	it	pl
 8008a22:	0049      	lslpl	r1, r1, #1
 8008a24:	2600      	movs	r6, #0
 8008a26:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008a2a:	107f      	asrs	r7, r7, #1
 8008a2c:	0049      	lsls	r1, r1, #1
 8008a2e:	2016      	movs	r0, #22
 8008a30:	4632      	mov	r2, r6
 8008a32:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008a36:	1915      	adds	r5, r2, r4
 8008a38:	429d      	cmp	r5, r3
 8008a3a:	bfde      	ittt	le
 8008a3c:	192a      	addle	r2, r5, r4
 8008a3e:	1b5b      	suble	r3, r3, r5
 8008a40:	1936      	addle	r6, r6, r4
 8008a42:	0fcd      	lsrs	r5, r1, #31
 8008a44:	3801      	subs	r0, #1
 8008a46:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008a4a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008a4e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008a52:	d1f0      	bne.n	8008a36 <__ieee754_sqrt+0xb6>
 8008a54:	4605      	mov	r5, r0
 8008a56:	2420      	movs	r4, #32
 8008a58:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	eb0c 0e00 	add.w	lr, ip, r0
 8008a62:	dc02      	bgt.n	8008a6a <__ieee754_sqrt+0xea>
 8008a64:	d113      	bne.n	8008a8e <__ieee754_sqrt+0x10e>
 8008a66:	458e      	cmp	lr, r1
 8008a68:	d811      	bhi.n	8008a8e <__ieee754_sqrt+0x10e>
 8008a6a:	f1be 0f00 	cmp.w	lr, #0
 8008a6e:	eb0e 000c 	add.w	r0, lr, ip
 8008a72:	da3f      	bge.n	8008af4 <__ieee754_sqrt+0x174>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	db3d      	blt.n	8008af4 <__ieee754_sqrt+0x174>
 8008a78:	f102 0801 	add.w	r8, r2, #1
 8008a7c:	1a9b      	subs	r3, r3, r2
 8008a7e:	458e      	cmp	lr, r1
 8008a80:	bf88      	it	hi
 8008a82:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008a86:	eba1 010e 	sub.w	r1, r1, lr
 8008a8a:	4465      	add	r5, ip
 8008a8c:	4642      	mov	r2, r8
 8008a8e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008a92:	3c01      	subs	r4, #1
 8008a94:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008a98:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008a9c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008aa0:	d1dc      	bne.n	8008a5c <__ieee754_sqrt+0xdc>
 8008aa2:	4319      	orrs	r1, r3
 8008aa4:	d01b      	beq.n	8008ade <__ieee754_sqrt+0x15e>
 8008aa6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8008b24 <__ieee754_sqrt+0x1a4>
 8008aaa:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8008b28 <__ieee754_sqrt+0x1a8>
 8008aae:	e9da 0100 	ldrd	r0, r1, [sl]
 8008ab2:	e9db 2300 	ldrd	r2, r3, [fp]
 8008ab6:	f7f7 fbff 	bl	80002b8 <__aeabi_dsub>
 8008aba:	e9da 8900 	ldrd	r8, r9, [sl]
 8008abe:	4602      	mov	r2, r0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	4649      	mov	r1, r9
 8008ac6:	f7f8 f82b 	bl	8000b20 <__aeabi_dcmple>
 8008aca:	b140      	cbz	r0, 8008ade <__ieee754_sqrt+0x15e>
 8008acc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008ad0:	e9da 0100 	ldrd	r0, r1, [sl]
 8008ad4:	e9db 2300 	ldrd	r2, r3, [fp]
 8008ad8:	d10e      	bne.n	8008af8 <__ieee754_sqrt+0x178>
 8008ada:	3601      	adds	r6, #1
 8008adc:	4625      	mov	r5, r4
 8008ade:	1073      	asrs	r3, r6, #1
 8008ae0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ae4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8008ae8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8008aec:	086b      	lsrs	r3, r5, #1
 8008aee:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8008af2:	e759      	b.n	80089a8 <__ieee754_sqrt+0x28>
 8008af4:	4690      	mov	r8, r2
 8008af6:	e7c1      	b.n	8008a7c <__ieee754_sqrt+0xfc>
 8008af8:	f7f7 fbe0 	bl	80002bc <__adddf3>
 8008afc:	e9da 8900 	ldrd	r8, r9, [sl]
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4640      	mov	r0, r8
 8008b06:	4649      	mov	r1, r9
 8008b08:	f7f8 f800 	bl	8000b0c <__aeabi_dcmplt>
 8008b0c:	b120      	cbz	r0, 8008b18 <__ieee754_sqrt+0x198>
 8008b0e:	1cab      	adds	r3, r5, #2
 8008b10:	bf08      	it	eq
 8008b12:	3601      	addeq	r6, #1
 8008b14:	3502      	adds	r5, #2
 8008b16:	e7e2      	b.n	8008ade <__ieee754_sqrt+0x15e>
 8008b18:	1c6b      	adds	r3, r5, #1
 8008b1a:	f023 0501 	bic.w	r5, r3, #1
 8008b1e:	e7de      	b.n	8008ade <__ieee754_sqrt+0x15e>
 8008b20:	7ff00000 	.word	0x7ff00000
 8008b24:	080090c8 	.word	0x080090c8
 8008b28:	080090c0 	.word	0x080090c0

08008b2c <_init>:
 8008b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2e:	bf00      	nop
 8008b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b32:	bc08      	pop	{r3}
 8008b34:	469e      	mov	lr, r3
 8008b36:	4770      	bx	lr

08008b38 <_fini>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	bf00      	nop
 8008b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3e:	bc08      	pop	{r3}
 8008b40:	469e      	mov	lr, r3
 8008b42:	4770      	bx	lr
