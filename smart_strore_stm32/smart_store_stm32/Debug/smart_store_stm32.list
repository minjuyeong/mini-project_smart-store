
smart_store_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000885c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08008a00  08008a00  00009a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f88  08008f88  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008f88  08008f88  00009f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f90  08008f90  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f90  08008f90  00009f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f94  08008f94  00009f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008f98  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd8  2000006c  08009004  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c44  08009004  0000ac44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010443  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000274d  00000000  00000000  0001a4df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  0001cc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c06  00000000  00000000  0001dba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019111  00000000  00000000  0001e7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001187d  00000000  00000000  000378b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cf07  00000000  00000000  00049134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e603b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052d8  00000000  00000000  000e6080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000eb358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080089e4 	.word	0x080089e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080089e4 	.word	0x080089e4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b988 	b.w	8000f50 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	468e      	mov	lr, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	4688      	mov	r8, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	d962      	bls.n	8000d34 <__udivmoddi4+0xdc>
 8000c6e:	fab2 f682 	clz	r6, r2
 8000c72:	b14e      	cbz	r6, 8000c88 <__udivmoddi4+0x30>
 8000c74:	f1c6 0320 	rsb	r3, r6, #32
 8000c78:	fa01 f806 	lsl.w	r8, r1, r6
 8000c7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c80:	40b7      	lsls	r7, r6
 8000c82:	ea43 0808 	orr.w	r8, r3, r8
 8000c86:	40b4      	lsls	r4, r6
 8000c88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c8c:	fa1f fc87 	uxth.w	ip, r7
 8000c90:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c94:	0c23      	lsrs	r3, r4, #16
 8000c96:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9e:	fb01 f20c 	mul.w	r2, r1, ip
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0x62>
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cac:	f080 80ea 	bcs.w	8000e84 <__udivmoddi4+0x22c>
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	f240 80e7 	bls.w	8000e84 <__udivmoddi4+0x22c>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	443b      	add	r3, r7
 8000cba:	1a9a      	subs	r2, r3, r2
 8000cbc:	b2a3      	uxth	r3, r4
 8000cbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cca:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cce:	459c      	cmp	ip, r3
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x8e>
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd8:	f080 80d6 	bcs.w	8000e88 <__udivmoddi4+0x230>
 8000cdc:	459c      	cmp	ip, r3
 8000cde:	f240 80d3 	bls.w	8000e88 <__udivmoddi4+0x230>
 8000ce2:	443b      	add	r3, r7
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cea:	eba3 030c 	sub.w	r3, r3, ip
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11d      	cbz	r5, 8000cfa <__udivmoddi4+0xa2>
 8000cf2:	40f3      	lsrs	r3, r6
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d905      	bls.n	8000d0e <__udivmoddi4+0xb6>
 8000d02:	b10d      	cbz	r5, 8000d08 <__udivmoddi4+0xb0>
 8000d04:	e9c5 0100 	strd	r0, r1, [r5]
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	e7f5      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d0e:	fab3 f183 	clz	r1, r3
 8000d12:	2900      	cmp	r1, #0
 8000d14:	d146      	bne.n	8000da4 <__udivmoddi4+0x14c>
 8000d16:	4573      	cmp	r3, lr
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xc8>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 8105 	bhi.w	8000f2a <__udivmoddi4+0x2d2>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	4690      	mov	r8, r2
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	d0e5      	beq.n	8000cfa <__udivmoddi4+0xa2>
 8000d2e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d32:	e7e2      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	f000 8090 	beq.w	8000e5a <__udivmoddi4+0x202>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	f040 80a4 	bne.w	8000e8c <__udivmoddi4+0x234>
 8000d44:	1a8a      	subs	r2, r1, r2
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4c:	b280      	uxth	r0, r0
 8000d4e:	b2bc      	uxth	r4, r7
 8000d50:	2101      	movs	r1, #1
 8000d52:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d56:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d5e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x11e>
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x11c>
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	f200 80e0 	bhi.w	8000f34 <__udivmoddi4+0x2dc>
 8000d74:	46c4      	mov	ip, r8
 8000d76:	1a9b      	subs	r3, r3, r2
 8000d78:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d7c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d80:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d84:	fb02 f404 	mul.w	r4, r2, r4
 8000d88:	429c      	cmp	r4, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x144>
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x142>
 8000d94:	429c      	cmp	r4, r3
 8000d96:	f200 80ca 	bhi.w	8000f2e <__udivmoddi4+0x2d6>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	1b1b      	subs	r3, r3, r4
 8000d9e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000da2:	e7a5      	b.n	8000cf0 <__udivmoddi4+0x98>
 8000da4:	f1c1 0620 	rsb	r6, r1, #32
 8000da8:	408b      	lsls	r3, r1
 8000daa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dae:	431f      	orrs	r7, r3
 8000db0:	fa0e f401 	lsl.w	r4, lr, r1
 8000db4:	fa20 f306 	lsr.w	r3, r0, r6
 8000db8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dbc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000dc0:	4323      	orrs	r3, r4
 8000dc2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dc6:	fa1f fc87 	uxth.w	ip, r7
 8000dca:	fbbe f0f9 	udiv	r0, lr, r9
 8000dce:	0c1c      	lsrs	r4, r3, #16
 8000dd0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dd4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dd8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	fa02 f201 	lsl.w	r2, r2, r1
 8000de2:	d909      	bls.n	8000df8 <__udivmoddi4+0x1a0>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dea:	f080 809c 	bcs.w	8000f26 <__udivmoddi4+0x2ce>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f240 8099 	bls.w	8000f26 <__udivmoddi4+0x2ce>
 8000df4:	3802      	subs	r0, #2
 8000df6:	443c      	add	r4, r7
 8000df8:	eba4 040e 	sub.w	r4, r4, lr
 8000dfc:	fa1f fe83 	uxth.w	lr, r3
 8000e00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e04:	fb09 4413 	mls	r4, r9, r3, r4
 8000e08:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e0c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e10:	45a4      	cmp	ip, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x1ce>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e1a:	f080 8082 	bcs.w	8000f22 <__udivmoddi4+0x2ca>
 8000e1e:	45a4      	cmp	ip, r4
 8000e20:	d97f      	bls.n	8000f22 <__udivmoddi4+0x2ca>
 8000e22:	3b02      	subs	r3, #2
 8000e24:	443c      	add	r4, r7
 8000e26:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e2a:	eba4 040c 	sub.w	r4, r4, ip
 8000e2e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e32:	4564      	cmp	r4, ip
 8000e34:	4673      	mov	r3, lr
 8000e36:	46e1      	mov	r9, ip
 8000e38:	d362      	bcc.n	8000f00 <__udivmoddi4+0x2a8>
 8000e3a:	d05f      	beq.n	8000efc <__udivmoddi4+0x2a4>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x1fe>
 8000e3e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e42:	eb64 0409 	sbc.w	r4, r4, r9
 8000e46:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e4e:	431e      	orrs	r6, r3
 8000e50:	40cc      	lsrs	r4, r1
 8000e52:	e9c5 6400 	strd	r6, r4, [r5]
 8000e56:	2100      	movs	r1, #0
 8000e58:	e74f      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000e5a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e5e:	0c01      	lsrs	r1, r0, #16
 8000e60:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e64:	b280      	uxth	r0, r0
 8000e66:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	463c      	mov	r4, r7
 8000e70:	46b8      	mov	r8, r7
 8000e72:	46be      	mov	lr, r7
 8000e74:	2620      	movs	r6, #32
 8000e76:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e7a:	eba2 0208 	sub.w	r2, r2, r8
 8000e7e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e82:	e766      	b.n	8000d52 <__udivmoddi4+0xfa>
 8000e84:	4601      	mov	r1, r0
 8000e86:	e718      	b.n	8000cba <__udivmoddi4+0x62>
 8000e88:	4610      	mov	r0, r2
 8000e8a:	e72c      	b.n	8000ce6 <__udivmoddi4+0x8e>
 8000e8c:	f1c6 0220 	rsb	r2, r6, #32
 8000e90:	fa2e f302 	lsr.w	r3, lr, r2
 8000e94:	40b7      	lsls	r7, r6
 8000e96:	40b1      	lsls	r1, r6
 8000e98:	fa20 f202 	lsr.w	r2, r0, r2
 8000e9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ea6:	b2bc      	uxth	r4, r7
 8000ea8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb08 f904 	mul.w	r9, r8, r4
 8000eb6:	40b0      	lsls	r0, r6
 8000eb8:	4589      	cmp	r9, r1
 8000eba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ebe:	b280      	uxth	r0, r0
 8000ec0:	d93e      	bls.n	8000f40 <__udivmoddi4+0x2e8>
 8000ec2:	1879      	adds	r1, r7, r1
 8000ec4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ec8:	d201      	bcs.n	8000ece <__udivmoddi4+0x276>
 8000eca:	4589      	cmp	r9, r1
 8000ecc:	d81f      	bhi.n	8000f0e <__udivmoddi4+0x2b6>
 8000ece:	eba1 0109 	sub.w	r1, r1, r9
 8000ed2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ed6:	fb09 f804 	mul.w	r8, r9, r4
 8000eda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee4:	4542      	cmp	r2, r8
 8000ee6:	d229      	bcs.n	8000f3c <__udivmoddi4+0x2e4>
 8000ee8:	18ba      	adds	r2, r7, r2
 8000eea:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eee:	d2c4      	bcs.n	8000e7a <__udivmoddi4+0x222>
 8000ef0:	4542      	cmp	r2, r8
 8000ef2:	d2c2      	bcs.n	8000e7a <__udivmoddi4+0x222>
 8000ef4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ef8:	443a      	add	r2, r7
 8000efa:	e7be      	b.n	8000e7a <__udivmoddi4+0x222>
 8000efc:	45f0      	cmp	r8, lr
 8000efe:	d29d      	bcs.n	8000e3c <__udivmoddi4+0x1e4>
 8000f00:	ebbe 0302 	subs.w	r3, lr, r2
 8000f04:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f08:	3801      	subs	r0, #1
 8000f0a:	46e1      	mov	r9, ip
 8000f0c:	e796      	b.n	8000e3c <__udivmoddi4+0x1e4>
 8000f0e:	eba7 0909 	sub.w	r9, r7, r9
 8000f12:	4449      	add	r1, r9
 8000f14:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f18:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1c:	fb09 f804 	mul.w	r8, r9, r4
 8000f20:	e7db      	b.n	8000eda <__udivmoddi4+0x282>
 8000f22:	4673      	mov	r3, lr
 8000f24:	e77f      	b.n	8000e26 <__udivmoddi4+0x1ce>
 8000f26:	4650      	mov	r0, sl
 8000f28:	e766      	b.n	8000df8 <__udivmoddi4+0x1a0>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e6fd      	b.n	8000d2a <__udivmoddi4+0xd2>
 8000f2e:	443b      	add	r3, r7
 8000f30:	3a02      	subs	r2, #2
 8000f32:	e733      	b.n	8000d9c <__udivmoddi4+0x144>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	443b      	add	r3, r7
 8000f3a:	e71c      	b.n	8000d76 <__udivmoddi4+0x11e>
 8000f3c:	4649      	mov	r1, r9
 8000f3e:	e79c      	b.n	8000e7a <__udivmoddi4+0x222>
 8000f40:	eba1 0109 	sub.w	r1, r1, r9
 8000f44:	46c4      	mov	ip, r8
 8000f46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4a:	fb09 f804 	mul.w	r8, r9, r4
 8000f4e:	e7c4      	b.n	8000eda <__udivmoddi4+0x282>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <DWT_Delay_Init>:
 *      Author: IoT Main
 */

#include "DHT.h"
uint32_t DWT_Delay_Init(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f58:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <DWT_Delay_Init+0x58>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	4a13      	ldr	r2, [pc, #76]	@ (8000fac <DWT_Delay_Init+0x58>)
 8000f5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000f62:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f64:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <DWT_Delay_Init+0x58>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	4a10      	ldr	r2, [pc, #64]	@ (8000fac <DWT_Delay_Init+0x58>)
 8000f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f6e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f76:	f023 0301 	bic.w	r3, r3, #1
 8000f7a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000f88:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000f8e:	bf00      	nop
  __ASM volatile ("NOP");
 8000f90:	bf00      	nop
  __ASM volatile ("NOP");
 8000f92:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e000      	b.n	8000fa2 <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 8000fa0:	2301      	movs	r3, #1
  }

}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000edf0 	.word	0xe000edf0
 8000fb0:	e0001000 	.word	0xe0001000

08000fb4 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <DWT_Delay_us+0x40>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000fc2:	f003 fa2b 	bl	800441c <HAL_RCC_GetHCLKFreq>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff8 <DWT_Delay_us+0x44>)
 8000fca:	fba2 2303 	umull	r2, r3, r2, r3
 8000fce:	0c9b      	lsrs	r3, r3, #18
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	fb02 f303 	mul.w	r3, r2, r3
 8000fd6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000fd8:	bf00      	nop
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <DWT_Delay_us+0x40>)
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	1ad2      	subs	r2, r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d3f8      	bcc.n	8000fda <DWT_Delay_us+0x26>
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	e0001000 	.word	0xe0001000
 8000ff8:	431bde83 	.word	0x431bde83

08000ffc <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001018:	887b      	ldrh	r3, [r7, #2]
 800101a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4619      	mov	r1, r3
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f002 fbb8 	bl	80037a0 <HAL_GPIO_Init>
}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4619      	mov	r1, r3
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f002 fb9c 	bl	80037a0 <HAL_GPIO_Init>
}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <DHT11_Init>:

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001074:	f7ff ff6e 	bl	8000f54 <DWT_Delay_Init>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001078:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800107c:	4807      	ldr	r0, [pc, #28]	@ (800109c <DHT11_Init+0x2c>)
 800107e:	f7ff ffbd 	bl	8000ffc <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001088:	4804      	ldr	r0, [pc, #16]	@ (800109c <DHT11_Init+0x2c>)
 800108a:	f002 fd25 	bl	8003ad8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800108e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001092:	f001 fdff 	bl	8002c94 <HAL_Delay>
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40020800 	.word	0x40020800

080010a0 <DHT11_Start>:

void DHT11_Start (void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80010a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010a8:	4811      	ldr	r0, [pc, #68]	@ (80010f0 <DHT11_Start+0x50>)
 80010aa:	f7ff ffa7 	bl	8000ffc <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80010ae:	2201      	movs	r2, #1
 80010b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010b4:	480e      	ldr	r0, [pc, #56]	@ (80010f0 <DHT11_Start+0x50>)
 80010b6:	f002 fd0f 	bl	8003ad8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010c0:	480b      	ldr	r0, [pc, #44]	@ (80010f0 <DHT11_Start+0x50>)
 80010c2:	f002 fd09 	bl	8003ad8 <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);
 80010c6:	f244 6050 	movw	r0, #18000	@ 0x4650
 80010ca:	f7ff ff73 	bl	8000fb4 <DWT_Delay_us>
	//delay_us (18000);   // wait for 18ms
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80010ce:	2201      	movs	r2, #1
 80010d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010d4:	4806      	ldr	r0, [pc, #24]	@ (80010f0 <DHT11_Start+0x50>)
 80010d6:	f002 fcff 	bl	8003ad8 <HAL_GPIO_WritePin>
	DWT_Delay_us(20);
 80010da:	2014      	movs	r0, #20
 80010dc:	f7ff ff6a 	bl	8000fb4 <DWT_Delay_us>
	//delay_us (20);   // wait for 20us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 80010e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010e4:	4802      	ldr	r0, [pc, #8]	@ (80010f0 <DHT11_Start+0x50>)
 80010e6:	f7ff ffa7 	bl	8001038 <Set_Pin_Input>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40020800 	.word	0x40020800

080010f4 <DHT11_Stop>:

void DHT11_Stop (void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80010f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010fc:	4805      	ldr	r0, [pc, #20]	@ (8001114 <DHT11_Stop+0x20>)
 80010fe:	f7ff ff7d 	bl	8000ffc <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001102:	2201      	movs	r2, #1
 8001104:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001108:	4802      	ldr	r0, [pc, #8]	@ (8001114 <DHT11_Stop+0x20>)
 800110a:	f002 fce5 	bl	8003ad8 <HAL_GPIO_WritePin>
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40020800 	.word	0x40020800

08001118 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]

	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001122:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001126:	4812      	ldr	r0, [pc, #72]	@ (8001170 <DHT11_Check_Response+0x58>)
 8001128:	f002 fcbe 	bl	8003aa8 <HAL_GPIO_ReadPin>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10f      	bne.n	8001152 <DHT11_Check_Response+0x3a>
	{
		DWT_Delay_us(80);
 8001132:	2050      	movs	r0, #80	@ 0x50
 8001134:	f7ff ff3e 	bl	8000fb4 <DWT_Delay_us>
		//delay_us (80);
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001138:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800113c:	480c      	ldr	r0, [pc, #48]	@ (8001170 <DHT11_Check_Response+0x58>)
 800113e:	f002 fcb3 	bl	8003aa8 <HAL_GPIO_ReadPin>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <DHT11_Check_Response+0x36>
 8001148:	2301      	movs	r3, #1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	e001      	b.n	8001152 <DHT11_Check_Response+0x3a>
		else Response = -1; // 255
 800114e:	23ff      	movs	r3, #255	@ 0xff
 8001150:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8001152:	bf00      	nop
 8001154:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001158:	4805      	ldr	r0, [pc, #20]	@ (8001170 <DHT11_Check_Response+0x58>)
 800115a:	f002 fca5 	bl	8003aa8 <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1f7      	bne.n	8001154 <DHT11_Check_Response+0x3c>

	return Response;
 8001164:	79fb      	ldrb	r3, [r7, #7]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40020800 	.word	0x40020800

08001174 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800117a:	2300      	movs	r3, #0
 800117c:	71bb      	strb	r3, [r7, #6]
 800117e:	e03a      	b.n	80011f6 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8001180:	bf00      	nop
 8001182:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001186:	4820      	ldr	r0, [pc, #128]	@ (8001208 <DHT11_Read+0x94>)
 8001188:	f002 fc8e 	bl	8003aa8 <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f7      	beq.n	8001182 <DHT11_Read+0xe>
		DWT_Delay_us(40);
 8001192:	2028      	movs	r0, #40	@ 0x28
 8001194:	f7ff ff0e 	bl	8000fb4 <DWT_Delay_us>
		//delay_us (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001198:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800119c:	481a      	ldr	r0, [pc, #104]	@ (8001208 <DHT11_Read+0x94>)
 800119e:	f002 fc83 	bl	8003aa8 <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10e      	bne.n	80011c6 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 80011a8:	79bb      	ldrb	r3, [r7, #6]
 80011aa:	f1c3 0307 	rsb	r3, r3, #7
 80011ae:	2201      	movs	r2, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	b25b      	sxtb	r3, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	b25a      	sxtb	r2, r3
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	4013      	ands	r3, r2
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	e00b      	b.n	80011de <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80011c6:	79bb      	ldrb	r3, [r7, #6]
 80011c8:	f1c3 0307 	rsb	r3, r3, #7
 80011cc:	2201      	movs	r2, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	b25a      	sxtb	r2, r3
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	4313      	orrs	r3, r2
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80011de:	bf00      	nop
 80011e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011e4:	4808      	ldr	r0, [pc, #32]	@ (8001208 <DHT11_Read+0x94>)
 80011e6:	f002 fc5f 	bl	8003aa8 <HAL_GPIO_ReadPin>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f7      	bne.n	80011e0 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	3301      	adds	r3, #1
 80011f4:	71bb      	strb	r3, [r7, #6]
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	2b07      	cmp	r3, #7
 80011fa:	d9c1      	bls.n	8001180 <DHT11_Read+0xc>
	}
	return i;
 80011fc:	79fb      	ldrb	r3, [r7, #7]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40020800 	.word	0x40020800

0800120c <DHT11_readData>:

DHT11_TypeDef DHT11_readData()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	DHT11_TypeDef dht11;
	DHT11_Start();
 8001214:	f7ff ff44 	bl	80010a0 <DHT11_Start>
	if ((dht11.status = DHT11_Check_Response()) < 0) return dht11;
 8001218:	f7ff ff7e 	bl	8001118 <DHT11_Check_Response>
 800121c:	4603      	mov	r3, r0
 800121e:	737b      	strb	r3, [r7, #13]
	dht11.rh_byte1 = DHT11_Read ();
 8001220:	f7ff ffa8 	bl	8001174 <DHT11_Read>
 8001224:	4603      	mov	r3, r0
 8001226:	723b      	strb	r3, [r7, #8]
	dht11.rh_byte2 = DHT11_Read ();
 8001228:	f7ff ffa4 	bl	8001174 <DHT11_Read>
 800122c:	4603      	mov	r3, r0
 800122e:	727b      	strb	r3, [r7, #9]
	dht11.temp_byte1 = DHT11_Read ();
 8001230:	f7ff ffa0 	bl	8001174 <DHT11_Read>
 8001234:	4603      	mov	r3, r0
 8001236:	72bb      	strb	r3, [r7, #10]
	dht11.temp_byte2 = DHT11_Read ();
 8001238:	f7ff ff9c 	bl	8001174 <DHT11_Read>
 800123c:	4603      	mov	r3, r0
 800123e:	72fb      	strb	r3, [r7, #11]
	dht11.checksum = DHT11_Read();
 8001240:	f7ff ff98 	bl	8001174 <DHT11_Read>
 8001244:	4603      	mov	r3, r0
 8001246:	733b      	strb	r3, [r7, #12]
	DHT11_Stop();
 8001248:	f7ff ff54 	bl	80010f4 <DHT11_Stop>
	return dht11;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	461a      	mov	r2, r3
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	6010      	str	r0, [r2, #0]
 8001258:	889b      	ldrh	r3, [r3, #4]
 800125a:	8093      	strh	r3, [r2, #4]
}
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	807b      	strh	r3, [r7, #2]
    *length = 0;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8001278:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800127c:	2100      	movs	r1, #0
 800127e:	68b8      	ldr	r0, [r7, #8]
 8001280:	f005 fbc8 	bl	8006a14 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 8001284:	f240 4202 	movw	r2, #1026	@ 0x402
 8001288:	2100      	movs	r1, #0
 800128a:	4826      	ldr	r0, [pc, #152]	@ (8001324 <esp_at_command+0xc0>)
 800128c:	f005 fbc2 	bl	8006a14 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f7fe ffaf 	bl	80001f4 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	b29a      	uxth	r2, r3
 800129a:	2364      	movs	r3, #100	@ 0x64
 800129c:	68f9      	ldr	r1, [r7, #12]
 800129e:	4822      	ldr	r0, [pc, #136]	@ (8001328 <esp_at_command+0xc4>)
 80012a0:	f004 f8e0 	bl	8005464 <HAL_UART_Transmit>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d032      	beq.n	8001310 <esp_at_command+0xac>
        return -1;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	e035      	b.n	800131c <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 80012b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <esp_at_command+0xc0>)
 80012b2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80012b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012ba:	d302      	bcc.n	80012c2 <esp_at_command+0x5e>
            return -2;
 80012bc:	f06f 0301 	mvn.w	r3, #1
 80012c0:	e02c      	b.n	800131c <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 80012c2:	491a      	ldr	r1, [pc, #104]	@ (800132c <esp_at_command+0xc8>)
 80012c4:	4817      	ldr	r0, [pc, #92]	@ (8001324 <esp_at_command+0xc0>)
 80012c6:	f005 fc29 	bl	8006b1c <strstr>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <esp_at_command+0x72>
            return -3;
 80012d0:	f06f 0302 	mvn.w	r3, #2
 80012d4:	e022      	b.n	800131c <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 80012d6:	4916      	ldr	r1, [pc, #88]	@ (8001330 <esp_at_command+0xcc>)
 80012d8:	4812      	ldr	r0, [pc, #72]	@ (8001324 <esp_at_command+0xc0>)
 80012da:	f005 fc1f 	bl	8006b1c <strstr>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00e      	beq.n	8001302 <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 80012e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <esp_at_command+0xc0>)
 80012e6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80012ea:	461a      	mov	r2, r3
 80012ec:	490d      	ldr	r1, [pc, #52]	@ (8001324 <esp_at_command+0xc0>)
 80012ee:	68b8      	ldr	r0, [r7, #8]
 80012f0:	f005 fca5 	bl	8006c3e <memcpy>
            *length = cb_data.length;
 80012f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <esp_at_command+0xc0>)
 80012f6:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	801a      	strh	r2, [r3, #0]
            return 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	e00c      	b.n	800131c <esp_at_command+0xb8>
        }
        time_out -= 10;
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	3b0a      	subs	r3, #10
 8001306:	b29b      	uxth	r3, r3
 8001308:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 800130a:	200a      	movs	r0, #10
 800130c:	f001 fcc2 	bl	8002c94 <HAL_Delay>
    while(time_out > 0)
 8001310:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001314:	2b00      	cmp	r3, #0
 8001316:	dccb      	bgt.n	80012b0 <esp_at_command+0x4c>
    }
    return -4;
 8001318:	f06f 0303 	mvn.w	r3, #3
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200004d0 	.word	0x200004d0
 8001328:	20000a40 	.word	0x20000a40
 800132c:	08008a00 	.word	0x08008a00
 8001330:	08008a08 	.word	0x08008a08

08001334 <esp_reset>:

static int esp_reset(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 800133e:	1dba      	adds	r2, r7, #6
 8001340:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001344:	4909      	ldr	r1, [pc, #36]	@ (800136c <esp_reset+0x38>)
 8001346:	480a      	ldr	r0, [pc, #40]	@ (8001370 <esp_reset+0x3c>)
 8001348:	f7ff ff8c 	bl	8001264 <esp_at_command>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <esp_reset+0x24>
    {
    	return -1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	e004      	b.n	8001362 <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 8001358:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800135c:	f001 fc9a 	bl	8002c94 <HAL_Delay>
    return 0;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000098 	.word	0x20000098
 8001370:	08008a0c 	.word	0x08008a0c

08001374 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 8001382:	f107 020a 	add.w	r2, r7, #10
 8001386:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138a:	492d      	ldr	r1, [pc, #180]	@ (8001440 <request_ip_addr+0xcc>)
 800138c:	482d      	ldr	r0, [pc, #180]	@ (8001444 <request_ip_addr+0xd0>)
 800138e:	f7ff ff69 	bl	8001264 <esp_at_command>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8001398:	482b      	ldr	r0, [pc, #172]	@ (8001448 <request_ip_addr+0xd4>)
 800139a:	f005 fa39 	bl	8006810 <puts>
 800139e:	e049      	b.n	8001434 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 80013a0:	492a      	ldr	r1, [pc, #168]	@ (800144c <request_ip_addr+0xd8>)
 80013a2:	4827      	ldr	r0, [pc, #156]	@ (8001440 <request_ip_addr+0xcc>)
 80013a4:	f005 fb5e 	bl	8006a64 <strtok>
 80013a8:	6178      	str	r0, [r7, #20]

        if(is_debug)
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d03e      	beq.n	800142e <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	e009      	b.n	80013ca <request_ip_addr+0x56>
                printf("%c", response[i]);
 80013b6:	4a22      	ldr	r2, [pc, #136]	@ (8001440 <request_ip_addr+0xcc>)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f005 f9c8 	bl	8006754 <putchar>
            for(int i = 0 ; i < length ; i++)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	3301      	adds	r3, #1
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	897b      	ldrh	r3, [r7, #10]
 80013cc:	461a      	mov	r2, r3
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4293      	cmp	r3, r2
 80013d2:	dbf0      	blt.n	80013b6 <request_ip_addr+0x42>
        }

        while(line != NULL)
 80013d4:	e02b      	b.n	800142e <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 80013d6:	491e      	ldr	r1, [pc, #120]	@ (8001450 <request_ip_addr+0xdc>)
 80013d8:	6978      	ldr	r0, [r7, #20]
 80013da:	f005 fb9f 	bl	8006b1c <strstr>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d01f      	beq.n	8001424 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 80013e4:	491b      	ldr	r1, [pc, #108]	@ (8001454 <request_ip_addr+0xe0>)
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	f005 fb3c 	bl	8006a64 <strtok>
                ip = strtok(NULL, "\"");
 80013ec:	4919      	ldr	r1, [pc, #100]	@ (8001454 <request_ip_addr+0xe0>)
 80013ee:	2000      	movs	r0, #0
 80013f0:	f005 fb38 	bl	8006a64 <strtok>
 80013f4:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 80013f6:	4918      	ldr	r1, [pc, #96]	@ (8001458 <request_ip_addr+0xe4>)
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f7fe fef1 	bl	80001e0 <strcmp>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00f      	beq.n	8001424 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8001404:	2210      	movs	r2, #16
 8001406:	2100      	movs	r1, #0
 8001408:	4814      	ldr	r0, [pc, #80]	@ (800145c <request_ip_addr+0xe8>)
 800140a:	f005 fb03 	bl	8006a14 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f7fe fef0 	bl	80001f4 <strlen>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	68f9      	ldr	r1, [r7, #12]
 800141a:	4810      	ldr	r0, [pc, #64]	@ (800145c <request_ip_addr+0xe8>)
 800141c:	f005 fc0f 	bl	8006c3e <memcpy>
                    return 0;
 8001420:	2300      	movs	r3, #0
 8001422:	e009      	b.n	8001438 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8001424:	4909      	ldr	r1, [pc, #36]	@ (800144c <request_ip_addr+0xd8>)
 8001426:	2000      	movs	r0, #0
 8001428:	f005 fb1c 	bl	8006a64 <strtok>
 800142c:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1d0      	bne.n	80013d6 <request_ip_addr+0x62>
        }
    }
    return -1;
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000098 	.word	0x20000098
 8001444:	08008a54 	.word	0x08008a54
 8001448:	08008a60 	.word	0x08008a60
 800144c:	08008a48 	.word	0x08008a48
 8001450:	08008a80 	.word	0x08008a80
 8001454:	08008a50 	.word	0x08008a50
 8001458:	08008a18 	.word	0x08008a18
 800145c:	20000088 	.word	0x20000088

08001460 <esp_client_conn>:
int esp_client_conn()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b092      	sub	sp, #72	@ 0x48
 8001464:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	2240      	movs	r2, #64	@ 0x40
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f005 fad0 	bl	8006a14 <memset>
  uint16_t length = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 8001478:	f107 0008 	add.w	r0, r7, #8
 800147c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001480:	4a09      	ldr	r2, [pc, #36]	@ (80014a8 <esp_client_conn+0x48>)
 8001482:	490a      	ldr	r1, [pc, #40]	@ (80014ac <esp_client_conn+0x4c>)
 8001484:	f005 f9cc 	bl	8006820 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8001488:	1dba      	adds	r2, r7, #6
 800148a:	f107 0008 	add.w	r0, r7, #8
 800148e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001492:	4907      	ldr	r1, [pc, #28]	@ (80014b0 <esp_client_conn+0x50>)
 8001494:	f7ff fee6 	bl	8001264 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8001498:	4806      	ldr	r0, [pc, #24]	@ (80014b4 <esp_client_conn+0x54>)
 800149a:	f000 f909 	bl	80016b0 <esp_send_data>
	return 0;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3748      	adds	r7, #72	@ 0x48
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	08008a8c 	.word	0x08008a8c
 80014ac:	08008a9c 	.word	0x08008a9c
 80014b0:	20000098 	.word	0x20000098
 80014b4:	08008ab8 	.word	0x08008ab8

080014b8 <esp_get_status>:
int esp_get_status()
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 80014c2:	1dba      	adds	r2, r7, #6
 80014c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c8:	4909      	ldr	r1, [pc, #36]	@ (80014f0 <esp_get_status+0x38>)
 80014ca:	480a      	ldr	r0, [pc, #40]	@ (80014f4 <esp_get_status+0x3c>)
 80014cc:	f7ff feca 	bl	8001264 <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 80014d0:	4909      	ldr	r1, [pc, #36]	@ (80014f8 <esp_get_status+0x40>)
 80014d2:	4807      	ldr	r0, [pc, #28]	@ (80014f0 <esp_get_status+0x38>)
 80014d4:	f005 fb22 	bl	8006b1c <strstr>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <esp_get_status+0x2a>
    {
    	return 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	e001      	b.n	80014e6 <esp_get_status+0x2e>
    }
	return -1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000098 	.word	0x20000098
 80014f4:	08008ac8 	.word	0x08008ac8
 80014f8:	08008ad8 	.word	0x08008ad8

080014fc <drv_esp_init>:
int drv_esp_init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 8001500:	2210      	movs	r2, #16
 8001502:	2100      	movs	r1, #0
 8001504:	4806      	ldr	r0, [pc, #24]	@ (8001520 <drv_esp_init+0x24>)
 8001506:	f005 fa85 	bl	8006a14 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 800150a:	2201      	movs	r2, #1
 800150c:	4905      	ldr	r1, [pc, #20]	@ (8001524 <drv_esp_init+0x28>)
 800150e:	4806      	ldr	r0, [pc, #24]	@ (8001528 <drv_esp_init+0x2c>)
 8001510:	f004 f833 	bl	800557a <HAL_UART_Receive_IT>

    return esp_reset();
 8001514:	f7ff ff0e 	bl	8001334 <esp_reset>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000088 	.word	0x20000088
 8001524:	200004cf 	.word	0x200004cf
 8001528:	20000a40 	.word	0x20000a40

0800152c <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b094      	sub	sp, #80	@ 0x50
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	2240      	movs	r2, #64	@ 0x40
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f005 fa65 	bl	8006a14 <memset>
  if(ssid == NULL || passwd == NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <ap_conn_func+0x2a>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d103      	bne.n	800155e <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8001556:	4817      	ldr	r0, [pc, #92]	@ (80015b4 <ap_conn_func+0x88>)
 8001558:	f005 f95a 	bl	8006810 <puts>
 800155c:	e026      	b.n	80015ac <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 800155e:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8001562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001566:	4914      	ldr	r1, [pc, #80]	@ (80015b8 <ap_conn_func+0x8c>)
 8001568:	4814      	ldr	r0, [pc, #80]	@ (80015bc <ap_conn_func+0x90>)
 800156a:	f7ff fe7b 	bl	8001264 <esp_at_command>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 8001574:	4812      	ldr	r0, [pc, #72]	@ (80015c0 <ap_conn_func+0x94>)
 8001576:	f005 f94b 	bl	8006810 <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 800157a:	f107 000c 	add.w	r0, r7, #12
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	4910      	ldr	r1, [pc, #64]	@ (80015c4 <ap_conn_func+0x98>)
 8001584:	f005 f94c 	bl	8006820 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8001588:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 800158c:	f107 000c 	add.w	r0, r7, #12
 8001590:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001594:	4908      	ldr	r1, [pc, #32]	@ (80015b8 <ap_conn_func+0x8c>)
 8001596:	f7ff fe65 	bl	8001264 <esp_at_command>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4619      	mov	r1, r3
 80015a6:	4808      	ldr	r0, [pc, #32]	@ (80015c8 <ap_conn_func+0x9c>)
 80015a8:	f005 f8c2 	bl	8006730 <iprintf>
}
 80015ac:	3750      	adds	r7, #80	@ 0x50
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	08008b3c 	.word	0x08008b3c
 80015b8:	20000098 	.word	0x20000098
 80015bc:	08008b68 	.word	0x08008b68
 80015c0:	08008b78 	.word	0x08008b78
 80015c4:	08008b8c 	.word	0x08008b8c
 80015c8:	08008ba4 	.word	0x08008ba4

080015cc <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a23      	ldr	r2, [pc, #140]	@ (8001668 <HAL_UART_RxCpltCallback+0x9c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d117      	bne.n	800160e <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 80015de:	4b23      	ldr	r3, [pc, #140]	@ (800166c <HAL_UART_RxCpltCallback+0xa0>)
 80015e0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80015e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015e8:	d20c      	bcs.n	8001604 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 80015ea:	4b20      	ldr	r3, [pc, #128]	@ (800166c <HAL_UART_RxCpltCallback+0xa0>)
 80015ec:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	b291      	uxth	r1, r2
 80015f4:	4a1d      	ldr	r2, [pc, #116]	@ (800166c <HAL_UART_RxCpltCallback+0xa0>)
 80015f6:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <HAL_UART_RxCpltCallback+0xa4>)
 80015fe:	7819      	ldrb	r1, [r3, #0]
 8001600:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <HAL_UART_RxCpltCallback+0xa0>)
 8001602:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 8001604:	2201      	movs	r2, #1
 8001606:	491a      	ldr	r1, [pc, #104]	@ (8001670 <HAL_UART_RxCpltCallback+0xa4>)
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f003 ffb6 	bl	800557a <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a18      	ldr	r2, [pc, #96]	@ (8001674 <HAL_UART_RxCpltCallback+0xa8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d122      	bne.n	800165e <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8001618:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <HAL_UART_RxCpltCallback+0xac>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a17      	ldr	r2, [pc, #92]	@ (800167c <HAL_UART_RxCpltCallback+0xb0>)
 800161e:	7811      	ldrb	r1, [r2, #0]
 8001620:	4a17      	ldr	r2, [pc, #92]	@ (8001680 <HAL_UART_RxCpltCallback+0xb4>)
 8001622:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <HAL_UART_RxCpltCallback+0xac>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a15      	ldr	r2, [pc, #84]	@ (8001680 <HAL_UART_RxCpltCallback+0xb4>)
 800162a:	5cd3      	ldrb	r3, [r2, r3]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b0d      	cmp	r3, #13
 8001630:	d10b      	bne.n	800164a <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <HAL_UART_RxCpltCallback+0xac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a12      	ldr	r2, [pc, #72]	@ (8001680 <HAL_UART_RxCpltCallback+0xb4>)
 8001638:	2100      	movs	r1, #0
 800163a:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 800163c:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <HAL_UART_RxCpltCallback+0xb8>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8001642:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <HAL_UART_RxCpltCallback+0xac>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e004      	b.n	8001654 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 800164a:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <HAL_UART_RxCpltCallback+0xac>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	3301      	adds	r3, #1
 8001650:	4a09      	ldr	r2, [pc, #36]	@ (8001678 <HAL_UART_RxCpltCallback+0xac>)
 8001652:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 8001654:	2201      	movs	r2, #1
 8001656:	4909      	ldr	r1, [pc, #36]	@ (800167c <HAL_UART_RxCpltCallback+0xb0>)
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f003 ff8e 	bl	800557a <HAL_UART_Receive_IT>
    }
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40011400 	.word	0x40011400
 800166c:	200004d0 	.word	0x200004d0
 8001670:	200004cf 	.word	0x200004cf
 8001674:	40004400 	.word	0x40004400
 8001678:	200008d4 	.word	0x200008d4
 800167c:	200004ce 	.word	0x200004ce
 8001680:	2000049c 	.word	0x2000049c
 8001684:	20000498 	.word	0x20000498

08001688 <AiotClient_Init>:


void AiotClient_Init()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 800168c:	4906      	ldr	r1, [pc, #24]	@ (80016a8 <AiotClient_Init+0x20>)
 800168e:	4807      	ldr	r0, [pc, #28]	@ (80016ac <AiotClient_Init+0x24>)
 8001690:	f7ff ff4c 	bl	800152c <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 8001694:	2001      	movs	r0, #1
 8001696:	f7ff fe6d 	bl	8001374 <request_ip_addr>
	esp_client_conn();
 800169a:	f7ff fee1 	bl	8001460 <esp_client_conn>
	esp_get_status();
 800169e:	f7ff ff0b 	bl	80014b8 <esp_get_status>
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	08008c04 	.word	0x08008c04
 80016ac:	08008c10 	.word	0x08008c10

080016b0 <esp_send_data>:

void esp_send_data(char *data)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b094      	sub	sp, #80	@ 0x50
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	2240      	movs	r2, #64	@ 0x40
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f005 f9a7 	bl	8006a14 <memset>
	uint16_t length = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7fe fd92 	bl	80001f4 <strlen>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	490e      	ldr	r1, [pc, #56]	@ (8001710 <esp_send_data+0x60>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f005 f8a1 	bl	8006820 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 80016de:	f107 020e 	add.w	r2, r7, #14
 80016e2:	f107 0010 	add.w	r0, r7, #16
 80016e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ea:	490a      	ldr	r1, [pc, #40]	@ (8001714 <esp_send_data+0x64>)
 80016ec:	f7ff fdba 	bl	8001264 <esp_at_command>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d107      	bne.n	8001706 <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 80016f6:	f107 020e 	add.w	r2, r7, #14
 80016fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016fe:	4905      	ldr	r1, [pc, #20]	@ (8001714 <esp_send_data+0x64>)
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fdaf 	bl	8001264 <esp_at_command>
	}
}
 8001706:	bf00      	nop
 8001708:	3750      	adds	r7, #80	@ 0x50
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	08008c18 	.word	0x08008c18
 8001714:	20000098 	.word	0x20000098

08001718 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 800171c:	2201      	movs	r2, #1
 800171e:	4903      	ldr	r1, [pc, #12]	@ (800172c <drv_uart_init+0x14>)
 8001720:	4803      	ldr	r0, [pc, #12]	@ (8001730 <drv_uart_init+0x18>)
 8001722:	f003 ff2a 	bl	800557a <HAL_UART_Receive_IT>
    return 0;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200004ce 	.word	0x200004ce
 8001730:	200009f8 	.word	0x200009f8

08001734 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 800173c:	1d39      	adds	r1, r7, #4
 800173e:	230a      	movs	r3, #10
 8001740:	2201      	movs	r2, #1
 8001742:	4807      	ldr	r0, [pc, #28]	@ (8001760 <__io_putchar+0x2c>)
 8001744:	f003 fe8e 	bl	8005464 <HAL_UART_Transmit>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <__io_putchar+0x1e>
        return ch;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	e001      	b.n	8001756 <__io_putchar+0x22>
    return -1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200009f8 	.word	0x200009f8

08001764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int ret = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176e:	f001 fa1f 	bl	8002bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001772:	f000 f8fb 	bl	800196c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001776:	f000 fba7 	bl	8001ec8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800177a:	f000 fb51 	bl	8001e20 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800177e:	f000 fb79 	bl	8001e74 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8001782:	f000 fad5 	bl	8001d30 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001786:	f000 fa5d 	bl	8001c44 <MX_TIM3_Init>
  MX_TIM1_Init();
 800178a:	f000 f9bb 	bl	8001b04 <MX_TIM1_Init>
  MX_ADC1_Init();
 800178e:	f000 f957 	bl	8001a40 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf("Start main() - wifi\r\n");
 8001792:	4861      	ldr	r0, [pc, #388]	@ (8001918 <main+0x1b4>)
 8001794:	f005 f83c 	bl	8006810 <puts>
  ret |= drv_uart_init();
 8001798:	f7ff ffbe 	bl	8001718 <drv_uart_init>
 800179c:	4602      	mov	r2, r0
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
  ret |= drv_esp_init();
 80017a4:	f7ff feaa 	bl	80014fc <drv_esp_init>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]
  if(ret != 0)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d004      	beq.n	80017c0 <main+0x5c>
  {
	  printf("Esp response error\r\n");
 80017b6:	4859      	ldr	r0, [pc, #356]	@ (800191c <main+0x1b8>)
 80017b8:	f005 f82a 	bl	8006810 <puts>
	  Error_Handler();
 80017bc:	f000 feac 	bl	8002518 <Error_Handler>
  }

  AiotClient_Init();
 80017c0:	f7ff ff62 	bl	8001688 <AiotClient_Init>

  DHT11_Init();
 80017c4:	f7ff fc54 	bl	8001070 <DHT11_Init>

  if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 80017c8:	2100      	movs	r1, #0
 80017ca:	4855      	ldr	r0, [pc, #340]	@ (8001920 <main+0x1bc>)
 80017cc:	f002 ff02 	bl	80045d4 <HAL_TIM_PWM_Start>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <main+0x76>
	  Error_Handler();
 80017d6:	f000 fe9f 	bl	8002518 <Error_Handler>

  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 80017da:	2100      	movs	r1, #0
 80017dc:	4851      	ldr	r0, [pc, #324]	@ (8001924 <main+0x1c0>)
 80017de:	f002 fef9 	bl	80045d4 <HAL_TIM_PWM_Start>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <main+0x88>
	  Error_Handler();
 80017e8:	f000 fe96 	bl	8002518 <Error_Handler>

  if(HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1) != HAL_OK)
 80017ec:	2100      	movs	r1, #0
 80017ee:	484e      	ldr	r0, [pc, #312]	@ (8001928 <main+0x1c4>)
 80017f0:	f002 fef0 	bl	80045d4 <HAL_TIM_PWM_Start>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <main+0x9a>
	  Error_Handler();
 80017fa:	f000 fe8d 	bl	8002518 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    int infraredSensorData = infraredSensor();	//출입문 적외선센서 값
 80017fe:	f000 fdb3 	bl	8002368 <infraredSensor>
 8001802:	60b8      	str	r0, [r7, #8]

		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8001804:	4949      	ldr	r1, [pc, #292]	@ (800192c <main+0x1c8>)
 8001806:	484a      	ldr	r0, [pc, #296]	@ (8001930 <main+0x1cc>)
 8001808:	f005 f988 	bl	8006b1c <strstr>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d01d      	beq.n	800184e <main+0xea>
 8001812:	4b47      	ldr	r3, [pc, #284]	@ (8001930 <main+0x1cc>)
 8001814:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001818:	3b01      	subs	r3, #1
 800181a:	4a45      	ldr	r2, [pc, #276]	@ (8001930 <main+0x1cc>)
 800181c:	5cd3      	ldrb	r3, [r2, r3]
 800181e:	2b0a      	cmp	r3, #10
 8001820:	d115      	bne.n	800184e <main+0xea>
		{
			//?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 8001822:	215b      	movs	r1, #91	@ 0x5b
 8001824:	4842      	ldr	r0, [pc, #264]	@ (8001930 <main+0x1cc>)
 8001826:	f005 f8fd 	bl	8006a24 <strchr>
 800182a:	4603      	mov	r3, r0
 800182c:	4619      	mov	r1, r3
 800182e:	4841      	ldr	r0, [pc, #260]	@ (8001934 <main+0x1d0>)
 8001830:	f005 f9fd 	bl	8006c2e <strcpy>
			memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 8001834:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001838:	2100      	movs	r1, #0
 800183a:	483d      	ldr	r0, [pc, #244]	@ (8001930 <main+0x1cc>)
 800183c:	f005 f8ea 	bl	8006a14 <memset>
			cb_data.length = 0;
 8001840:	4b3b      	ldr	r3, [pc, #236]	@ (8001930 <main+0x1cc>)
 8001842:	2200      	movs	r2, #0
 8001844:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 8001848:	483a      	ldr	r0, [pc, #232]	@ (8001934 <main+0x1d0>)
 800184a:	f000 fbdd 	bl	8002008 <esp_event>
		}
		if(rx2Flag)
 800184e:	4b3a      	ldr	r3, [pc, #232]	@ (8001938 <main+0x1d4>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d006      	beq.n	8001866 <main+0x102>
		{
			printf("recv2 : %s\r\n",rx2Data);
 8001858:	4938      	ldr	r1, [pc, #224]	@ (800193c <main+0x1d8>)
 800185a:	4839      	ldr	r0, [pc, #228]	@ (8001940 <main+0x1dc>)
 800185c:	f004 ff68 	bl	8006730 <iprintf>
			rx2Flag =0;
 8001860:	4b35      	ldr	r3, [pc, #212]	@ (8001938 <main+0x1d4>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
		}
		if(tim3Flag1Sec)	//1초에 한번
 8001866:	4b37      	ldr	r3, [pc, #220]	@ (8001944 <main+0x1e0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d041      	beq.n	80018f2 <main+0x18e>
		{
			tim3Flag1Sec = 0;
 800186e:	4b35      	ldr	r3, [pc, #212]	@ (8001944 <main+0x1e0>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
			if(!(tim3Sec%10)) //10초에 한번
 8001874:	4b34      	ldr	r3, [pc, #208]	@ (8001948 <main+0x1e4>)
 8001876:	6819      	ldr	r1, [r3, #0]
 8001878:	4b34      	ldr	r3, [pc, #208]	@ (800194c <main+0x1e8>)
 800187a:	fba3 2301 	umull	r2, r3, r3, r1
 800187e:	08da      	lsrs	r2, r3, #3
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	1aca      	subs	r2, r1, r3
 800188a:	2a00      	cmp	r2, #0
 800188c:	d109      	bne.n	80018a2 <main+0x13e>
			{
				if(esp_get_status() != 0)
 800188e:	f7ff fe13 	bl	80014b8 <esp_get_status>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <main+0x13e>
				{
					printf("server connecting ...\r\n");
 8001898:	482d      	ldr	r0, [pc, #180]	@ (8001950 <main+0x1ec>)
 800189a:	f004 ffb9 	bl	8006810 <puts>
					esp_client_conn();
 800189e:	f7ff fddf 	bl	8001460 <esp_client_conn>
				}
			}
			printf("tim3Sec : %d\r\n",tim3Sec);
 80018a2:	4b29      	ldr	r3, [pc, #164]	@ (8001948 <main+0x1e4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4619      	mov	r1, r3
 80018a8:	482a      	ldr	r0, [pc, #168]	@ (8001954 <main+0x1f0>)
 80018aa:	f004 ff41 	bl	8006730 <iprintf>
			if(!(tim3Sec%5)) //5초에 한번
 80018ae:	4b26      	ldr	r3, [pc, #152]	@ (8001948 <main+0x1e4>)
 80018b0:	6819      	ldr	r1, [r3, #0]
 80018b2:	4b26      	ldr	r3, [pc, #152]	@ (800194c <main+0x1e8>)
 80018b4:	fba3 2301 	umull	r2, r3, r3, r1
 80018b8:	089a      	lsrs	r2, r3, #2
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	1aca      	subs	r2, r1, r3
 80018c2:	2a00      	cmp	r2, #0
 80018c4:	d115      	bne.n	80018f2 <main+0x18e>
			{
				//dht11에서 값 읽어오기
				dht11Data = DHT11_readData();
 80018c6:	463b      	mov	r3, r7
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fc9f 	bl	800120c <DHT11_readData>
				if(dht11Data.rh_byte1 != 255)
 80018ce:	783b      	ldrb	r3, [r7, #0]
 80018d0:	2bff      	cmp	r3, #255	@ 0xff
 80018d2:	d00b      	beq.n	80018ec <main+0x188>
				{
					//온도 데이터 전역변수 temp에 저장
					sprintf(temp, "%d.%d", dht11Data.temp_byte1, dht11Data.temp_byte2);
 80018d4:	78bb      	ldrb	r3, [r7, #2]
 80018d6:	461a      	mov	r2, r3
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	491f      	ldr	r1, [pc, #124]	@ (8001958 <main+0x1f4>)
 80018dc:	481f      	ldr	r0, [pc, #124]	@ (800195c <main+0x1f8>)
 80018de:	f004 ff9f 	bl	8006820 <siprintf>
					//습도 데이터 전역변수 humi 에 저장
					humi = dht11Data.rh_byte1;
 80018e2:	783b      	ldrb	r3, [r7, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001960 <main+0x1fc>)
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	e002      	b.n	80018f2 <main+0x18e>
				}
				else
					printf("DHT11 response error\r\n");
 80018ec:	481d      	ldr	r0, [pc, #116]	@ (8001964 <main+0x200>)
 80018ee:	f004 ff8f 	bl	8006810 <puts>
		{
			//문 열기 코드
		}

		//손님 수 카운트 코드
		if(infraredSensorData == 20)	//손님 수 감소 코드 20
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b14      	cmp	r3, #20
 80018f6:	d105      	bne.n	8001904 <main+0x1a0>
		{
			customerCount--;
 80018f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001968 <main+0x204>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001968 <main+0x204>)
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e77c      	b.n	80017fe <main+0x9a>
		}
		else if(infraredSensorData == 30)	//손님 수 증가 코드 30
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2b1e      	cmp	r3, #30
 8001908:	f47f af79 	bne.w	80017fe <main+0x9a>
		{
			customerCount++;
 800190c:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <main+0x204>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3301      	adds	r3, #1
 8001912:	4a15      	ldr	r2, [pc, #84]	@ (8001968 <main+0x204>)
 8001914:	6013      	str	r3, [r2, #0]
  {
 8001916:	e772      	b.n	80017fe <main+0x9a>
 8001918:	08008c28 	.word	0x08008c28
 800191c:	08008c40 	.word	0x08008c40
 8001920:	20000920 	.word	0x20000920
 8001924:	20000968 	.word	0x20000968
 8001928:	200009b0 	.word	0x200009b0
 800192c:	08008c54 	.word	0x08008c54
 8001930:	200004d0 	.word	0x200004d0
 8001934:	20000aac 	.word	0x20000aac
 8001938:	20000498 	.word	0x20000498
 800193c:	2000049c 	.word	0x2000049c
 8001940:	08008c5c 	.word	0x08008c5c
 8001944:	20000000 	.word	0x20000000
 8001948:	20000a88 	.word	0x20000a88
 800194c:	cccccccd 	.word	0xcccccccd
 8001950:	08008c6c 	.word	0x08008c6c
 8001954:	08008c84 	.word	0x08008c84
 8001958:	08008c94 	.word	0x08008c94
 800195c:	20000a90 	.word	0x20000a90
 8001960:	20000a8c 	.word	0x20000a8c
 8001964:	08008c9c 	.word	0x08008c9c
 8001968:	20000a9c 	.word	0x20000a9c

0800196c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b094      	sub	sp, #80	@ 0x50
 8001970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001972:	f107 0320 	add.w	r3, r7, #32
 8001976:	2230      	movs	r2, #48	@ 0x30
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f005 f84a 	bl	8006a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	4b28      	ldr	r3, [pc, #160]	@ (8001a38 <SystemClock_Config+0xcc>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001998:	4a27      	ldr	r2, [pc, #156]	@ (8001a38 <SystemClock_Config+0xcc>)
 800199a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800199e:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a0:	4b25      	ldr	r3, [pc, #148]	@ (8001a38 <SystemClock_Config+0xcc>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ac:	2300      	movs	r3, #0
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	4b22      	ldr	r3, [pc, #136]	@ (8001a3c <SystemClock_Config+0xd0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a21      	ldr	r2, [pc, #132]	@ (8001a3c <SystemClock_Config+0xd0>)
 80019b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <SystemClock_Config+0xd0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019c8:	2301      	movs	r3, #1
 80019ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019cc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d2:	2302      	movs	r3, #2
 80019d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019dc:	2308      	movs	r3, #8
 80019de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80019e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019e6:	2304      	movs	r3, #4
 80019e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019ea:	2304      	movs	r3, #4
 80019ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ee:	f107 0320 	add.w	r3, r7, #32
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 f8ae 	bl	8003b54 <HAL_RCC_OscConfig>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019fe:	f000 fd8b 	bl	8002518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a02:	230f      	movs	r3, #15
 8001a04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a06:	2302      	movs	r3, #2
 8001a08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f002 fb10 	bl	8004044 <HAL_RCC_ClockConfig>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a2a:	f000 fd75 	bl	8002518 <Error_Handler>
  }
}
 8001a2e:	bf00      	nop
 8001a30:	3750      	adds	r7, #80	@ 0x50
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40007000 	.word	0x40007000

08001a40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a46:	463b      	mov	r3, r7
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a52:	4b29      	ldr	r3, [pc, #164]	@ (8001af8 <MX_ADC1_Init+0xb8>)
 8001a54:	4a29      	ldr	r2, [pc, #164]	@ (8001afc <MX_ADC1_Init+0xbc>)
 8001a56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a58:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <MX_ADC1_Init+0xb8>)
 8001a5a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a60:	4b25      	ldr	r3, [pc, #148]	@ (8001af8 <MX_ADC1_Init+0xb8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a66:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <MX_ADC1_Init+0xb8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a6c:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <MX_ADC1_Init+0xb8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a72:	4b21      	ldr	r3, [pc, #132]	@ (8001af8 <MX_ADC1_Init+0xb8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001af8 <MX_ADC1_Init+0xb8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a80:	4b1d      	ldr	r3, [pc, #116]	@ (8001af8 <MX_ADC1_Init+0xb8>)
 8001a82:	4a1f      	ldr	r2, [pc, #124]	@ (8001b00 <MX_ADC1_Init+0xc0>)
 8001a84:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a86:	4b1c      	ldr	r3, [pc, #112]	@ (8001af8 <MX_ADC1_Init+0xb8>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <MX_ADC1_Init+0xb8>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a92:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <MX_ADC1_Init+0xb8>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a9a:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <MX_ADC1_Init+0xb8>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aa0:	4815      	ldr	r0, [pc, #84]	@ (8001af8 <MX_ADC1_Init+0xb8>)
 8001aa2:	f001 f91b 	bl	8002cdc <HAL_ADC_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001aac:	f000 fd34 	bl	8002518 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001abc:	463b      	mov	r3, r7
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480d      	ldr	r0, [pc, #52]	@ (8001af8 <MX_ADC1_Init+0xb8>)
 8001ac2:	f001 fa9b 	bl	8002ffc <HAL_ADC_ConfigChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001acc:	f000 fd24 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  sConfig.Channel = ADC_CHANNEL_2;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001adc:	463b      	mov	r3, r7
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	@ (8001af8 <MX_ADC1_Init+0xb8>)
 8001ae2:	f001 fa8b 	bl	8002ffc <HAL_ADC_ConfigChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001aec:	f000 fd14 	bl	8002518 <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	200008d8 	.word	0x200008d8
 8001afc:	40012000 	.word	0x40012000
 8001b00:	0f000001 	.word	0x0f000001

08001b04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b096      	sub	sp, #88	@ 0x58
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	2220      	movs	r2, #32
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f004 ff69 	bl	8006a14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b42:	4b3e      	ldr	r3, [pc, #248]	@ (8001c3c <MX_TIM1_Init+0x138>)
 8001b44:	4a3e      	ldr	r2, [pc, #248]	@ (8001c40 <MX_TIM1_Init+0x13c>)
 8001b46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001b48:	4b3c      	ldr	r3, [pc, #240]	@ (8001c3c <MX_TIM1_Init+0x138>)
 8001b4a:	2253      	movs	r2, #83	@ 0x53
 8001b4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c3c <MX_TIM1_Init+0x138>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001b54:	4b39      	ldr	r3, [pc, #228]	@ (8001c3c <MX_TIM1_Init+0x138>)
 8001b56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5c:	4b37      	ldr	r3, [pc, #220]	@ (8001c3c <MX_TIM1_Init+0x138>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b62:	4b36      	ldr	r3, [pc, #216]	@ (8001c3c <MX_TIM1_Init+0x138>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b68:	4b34      	ldr	r3, [pc, #208]	@ (8001c3c <MX_TIM1_Init+0x138>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b6e:	4833      	ldr	r0, [pc, #204]	@ (8001c3c <MX_TIM1_Init+0x138>)
 8001b70:	f002 fc88 	bl	8004484 <HAL_TIM_Base_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b7a:	f000 fccd 	bl	8002518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b82:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b84:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b88:	4619      	mov	r1, r3
 8001b8a:	482c      	ldr	r0, [pc, #176]	@ (8001c3c <MX_TIM1_Init+0x138>)
 8001b8c:	f002 ff84 	bl	8004a98 <HAL_TIM_ConfigClockSource>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b96:	f000 fcbf 	bl	8002518 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b9a:	4828      	ldr	r0, [pc, #160]	@ (8001c3c <MX_TIM1_Init+0x138>)
 8001b9c:	f002 fcc1 	bl	8004522 <HAL_TIM_PWM_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001ba6:	f000 fcb7 	bl	8002518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bb2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4820      	ldr	r0, [pc, #128]	@ (8001c3c <MX_TIM1_Init+0x138>)
 8001bba:	f003 fb2f 	bl	800521c <HAL_TIMEx_MasterConfigSynchronization>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001bc4:	f000 fca8 	bl	8002518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc8:	2360      	movs	r3, #96	@ 0x60
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001be8:	2200      	movs	r2, #0
 8001bea:	4619      	mov	r1, r3
 8001bec:	4813      	ldr	r0, [pc, #76]	@ (8001c3c <MX_TIM1_Init+0x138>)
 8001bee:	f002 fe91 	bl	8004914 <HAL_TIM_PWM_ConfigChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001bf8:	f000 fc8e 	bl	8002518 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4807      	ldr	r0, [pc, #28]	@ (8001c3c <MX_TIM1_Init+0x138>)
 8001c20:	f003 fb6a 	bl	80052f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001c2a:	f000 fc75 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c2e:	4803      	ldr	r0, [pc, #12]	@ (8001c3c <MX_TIM1_Init+0x138>)
 8001c30:	f000 fd40 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 8001c34:	bf00      	nop
 8001c36:	3758      	adds	r7, #88	@ 0x58
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000920 	.word	0x20000920
 8001c40:	40010000 	.word	0x40010000

08001c44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08e      	sub	sp, #56	@ 0x38
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c58:	f107 0320 	add.w	r3, r7, #32
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
 8001c70:	615a      	str	r2, [r3, #20]
 8001c72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c74:	4b2c      	ldr	r3, [pc, #176]	@ (8001d28 <MX_TIM3_Init+0xe4>)
 8001c76:	4a2d      	ldr	r2, [pc, #180]	@ (8001d2c <MX_TIM3_Init+0xe8>)
 8001c78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001d28 <MX_TIM3_Init+0xe4>)
 8001c7c:	2253      	movs	r2, #83	@ 0x53
 8001c7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c80:	4b29      	ldr	r3, [pc, #164]	@ (8001d28 <MX_TIM3_Init+0xe4>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001c86:	4b28      	ldr	r3, [pc, #160]	@ (8001d28 <MX_TIM3_Init+0xe4>)
 8001c88:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8e:	4b26      	ldr	r3, [pc, #152]	@ (8001d28 <MX_TIM3_Init+0xe4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c94:	4b24      	ldr	r3, [pc, #144]	@ (8001d28 <MX_TIM3_Init+0xe4>)
 8001c96:	2280      	movs	r2, #128	@ 0x80
 8001c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c9a:	4823      	ldr	r0, [pc, #140]	@ (8001d28 <MX_TIM3_Init+0xe4>)
 8001c9c:	f002 fbf2 	bl	8004484 <HAL_TIM_Base_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ca6:	f000 fc37 	bl	8002518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001caa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cb0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	481c      	ldr	r0, [pc, #112]	@ (8001d28 <MX_TIM3_Init+0xe4>)
 8001cb8:	f002 feee 	bl	8004a98 <HAL_TIM_ConfigClockSource>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001cc2:	f000 fc29 	bl	8002518 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cc6:	4818      	ldr	r0, [pc, #96]	@ (8001d28 <MX_TIM3_Init+0xe4>)
 8001cc8:	f002 fc2b 	bl	8004522 <HAL_TIM_PWM_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001cd2:	f000 fc21 	bl	8002518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cde:	f107 0320 	add.w	r3, r7, #32
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4810      	ldr	r0, [pc, #64]	@ (8001d28 <MX_TIM3_Init+0xe4>)
 8001ce6:	f003 fa99 	bl	800521c <HAL_TIMEx_MasterConfigSynchronization>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001cf0:	f000 fc12 	bl	8002518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf4:	2360      	movs	r3, #96	@ 0x60
 8001cf6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2200      	movs	r2, #0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4807      	ldr	r0, [pc, #28]	@ (8001d28 <MX_TIM3_Init+0xe4>)
 8001d0c:	f002 fe02 	bl	8004914 <HAL_TIM_PWM_ConfigChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d16:	f000 fbff 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d1a:	4803      	ldr	r0, [pc, #12]	@ (8001d28 <MX_TIM3_Init+0xe4>)
 8001d1c:	f000 fcca 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 8001d20:	bf00      	nop
 8001d22:	3738      	adds	r7, #56	@ 0x38
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000968 	.word	0x20000968
 8001d2c:	40000400 	.word	0x40000400

08001d30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08e      	sub	sp, #56	@ 0x38
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d44:	f107 0320 	add.w	r3, r7, #32
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
 8001d5c:	615a      	str	r2, [r3, #20]
 8001d5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d60:	4b2d      	ldr	r3, [pc, #180]	@ (8001e18 <MX_TIM4_Init+0xe8>)
 8001d62:	4a2e      	ldr	r2, [pc, #184]	@ (8001e1c <MX_TIM4_Init+0xec>)
 8001d64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001d66:	4b2c      	ldr	r3, [pc, #176]	@ (8001e18 <MX_TIM4_Init+0xe8>)
 8001d68:	2253      	movs	r2, #83	@ 0x53
 8001d6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e18 <MX_TIM4_Init+0xe8>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001d72:	4b29      	ldr	r3, [pc, #164]	@ (8001e18 <MX_TIM4_Init+0xe8>)
 8001d74:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7a:	4b27      	ldr	r3, [pc, #156]	@ (8001e18 <MX_TIM4_Init+0xe8>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d80:	4b25      	ldr	r3, [pc, #148]	@ (8001e18 <MX_TIM4_Init+0xe8>)
 8001d82:	2280      	movs	r2, #128	@ 0x80
 8001d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d86:	4824      	ldr	r0, [pc, #144]	@ (8001e18 <MX_TIM4_Init+0xe8>)
 8001d88:	f002 fb7c 	bl	8004484 <HAL_TIM_Base_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001d92:	f000 fbc1 	bl	8002518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001da0:	4619      	mov	r1, r3
 8001da2:	481d      	ldr	r0, [pc, #116]	@ (8001e18 <MX_TIM4_Init+0xe8>)
 8001da4:	f002 fe78 	bl	8004a98 <HAL_TIM_ConfigClockSource>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001dae:	f000 fbb3 	bl	8002518 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001db2:	4819      	ldr	r0, [pc, #100]	@ (8001e18 <MX_TIM4_Init+0xe8>)
 8001db4:	f002 fbb5 	bl	8004522 <HAL_TIM_PWM_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001dbe:	f000 fbab 	bl	8002518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dca:	f107 0320 	add.w	r3, r7, #32
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4811      	ldr	r0, [pc, #68]	@ (8001e18 <MX_TIM4_Init+0xe8>)
 8001dd2:	f003 fa23 	bl	800521c <HAL_TIMEx_MasterConfigSynchronization>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001ddc:	f000 fb9c 	bl	8002518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001de0:	2360      	movs	r3, #96	@ 0x60
 8001de2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001de4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001de8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2200      	movs	r2, #0
 8001df6:	4619      	mov	r1, r3
 8001df8:	4807      	ldr	r0, [pc, #28]	@ (8001e18 <MX_TIM4_Init+0xe8>)
 8001dfa:	f002 fd8b 	bl	8004914 <HAL_TIM_PWM_ConfigChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001e04:	f000 fb88 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e08:	4803      	ldr	r0, [pc, #12]	@ (8001e18 <MX_TIM4_Init+0xe8>)
 8001e0a:	f000 fc53 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 8001e0e:	bf00      	nop
 8001e10:	3738      	adds	r7, #56	@ 0x38
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200009b0 	.word	0x200009b0
 8001e1c:	40000800 	.word	0x40000800

08001e20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e24:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <MX_USART2_UART_Init+0x4c>)
 8001e26:	4a12      	ldr	r2, [pc, #72]	@ (8001e70 <MX_USART2_UART_Init+0x50>)
 8001e28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e2a:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <MX_USART2_UART_Init+0x4c>)
 8001e2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	@ (8001e6c <MX_USART2_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <MX_USART2_UART_Init+0x4c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <MX_USART2_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e44:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <MX_USART2_UART_Init+0x4c>)
 8001e46:	220c      	movs	r2, #12
 8001e48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4a:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <MX_USART2_UART_Init+0x4c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e50:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <MX_USART2_UART_Init+0x4c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e56:	4805      	ldr	r0, [pc, #20]	@ (8001e6c <MX_USART2_UART_Init+0x4c>)
 8001e58:	f003 fab4 	bl	80053c4 <HAL_UART_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e62:	f000 fb59 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200009f8 	.word	0x200009f8
 8001e70:	40004400 	.word	0x40004400

08001e74 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001e78:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <MX_USART6_UART_Init+0x4c>)
 8001e7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ec4 <MX_USART6_UART_Init+0x50>)
 8001e7c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8001e7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <MX_USART6_UART_Init+0x4c>)
 8001e80:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001e84:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <MX_USART6_UART_Init+0x4c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <MX_USART6_UART_Init+0x4c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <MX_USART6_UART_Init+0x4c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e98:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <MX_USART6_UART_Init+0x4c>)
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <MX_USART6_UART_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <MX_USART6_UART_Init+0x4c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001eaa:	4805      	ldr	r0, [pc, #20]	@ (8001ec0 <MX_USART6_UART_Init+0x4c>)
 8001eac:	f003 fa8a 	bl	80053c4 <HAL_UART_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001eb6:	f000 fb2f 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000a40 	.word	0x20000a40
 8001ec4:	40011400 	.word	0x40011400

08001ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	@ 0x28
 8001ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	4b46      	ldr	r3, [pc, #280]	@ (8001ffc <MX_GPIO_Init+0x134>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a45      	ldr	r2, [pc, #276]	@ (8001ffc <MX_GPIO_Init+0x134>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b43      	ldr	r3, [pc, #268]	@ (8001ffc <MX_GPIO_Init+0x134>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b3f      	ldr	r3, [pc, #252]	@ (8001ffc <MX_GPIO_Init+0x134>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	4a3e      	ldr	r2, [pc, #248]	@ (8001ffc <MX_GPIO_Init+0x134>)
 8001f04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0a:	4b3c      	ldr	r3, [pc, #240]	@ (8001ffc <MX_GPIO_Init+0x134>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	4b38      	ldr	r3, [pc, #224]	@ (8001ffc <MX_GPIO_Init+0x134>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	4a37      	ldr	r2, [pc, #220]	@ (8001ffc <MX_GPIO_Init+0x134>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f26:	4b35      	ldr	r3, [pc, #212]	@ (8001ffc <MX_GPIO_Init+0x134>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	4b31      	ldr	r3, [pc, #196]	@ (8001ffc <MX_GPIO_Init+0x134>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	4a30      	ldr	r2, [pc, #192]	@ (8001ffc <MX_GPIO_Init+0x134>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f42:	4b2e      	ldr	r3, [pc, #184]	@ (8001ffc <MX_GPIO_Init+0x134>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2120      	movs	r1, #32
 8001f52:	482b      	ldr	r0, [pc, #172]	@ (8002000 <MX_GPIO_Init+0x138>)
 8001f54:	f001 fdc0 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f5e:	4829      	ldr	r0, [pc, #164]	@ (8002004 <MX_GPIO_Init+0x13c>)
 8001f60:	f001 fdba 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f6a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4822      	ldr	r0, [pc, #136]	@ (8002004 <MX_GPIO_Init+0x13c>)
 8001f7c:	f001 fc10 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0_EXTI0_BUTTON_Pin */
  GPIO_InitStruct.Pin = PC0_EXTI0_BUTTON_Pin;
 8001f80:	2301      	movs	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f84:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PC0_EXTI0_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	481b      	ldr	r0, [pc, #108]	@ (8002004 <MX_GPIO_Init+0x13c>)
 8001f96:	f001 fc03 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4813      	ldr	r0, [pc, #76]	@ (8002000 <MX_GPIO_Init+0x138>)
 8001fb2:	f001 fbf5 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001fb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4619      	mov	r1, r3
 8001fce:	480d      	ldr	r0, [pc, #52]	@ (8002004 <MX_GPIO_Init+0x13c>)
 8001fd0:	f001 fbe6 	bl	80037a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	2006      	movs	r0, #6
 8001fda:	f001 fb18 	bl	800360e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001fde:	2006      	movs	r0, #6
 8001fe0:	f001 fb31 	bl	8003646 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	2028      	movs	r0, #40	@ 0x28
 8001fea:	f001 fb10 	bl	800360e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fee:	2028      	movs	r0, #40	@ 0x28
 8001ff0:	f001 fb29 	bl	8003646 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ff4:	bf00      	nop
 8001ff6:	3728      	adds	r7, #40	@ 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020000 	.word	0x40020000
 8002004:	40020800 	.word	0x40020800

08002008 <esp_event>:
void MX_GPIO_LED_OFF(int pin)
{
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
}
void esp_event(char * recvBuf)
{
 8002008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800200a:	b0a1      	sub	sp, #132	@ 0x84
 800200c:	af06      	add	r7, sp, #24
 800200e:	6078      	str	r0, [r7, #4]
  int i=0;
 8002010:	2300      	movs	r3, #0
 8002012:	667b      	str	r3, [r7, #100]	@ 0x64
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8002014:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	2240      	movs	r2, #64	@ 0x40
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f004 fcf1 	bl	8006a14 <memset>

  strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7fe f8de 	bl	80001f4 <strlen>
 8002038:	4603      	mov	r3, r0
 800203a:	3b01      	subs	r3, #1
 800203c:	4a77      	ldr	r2, [pc, #476]	@ (800221c <esp_event+0x214>)
 800203e:	2100      	movs	r1, #0
 8002040:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4876      	ldr	r0, [pc, #472]	@ (8002220 <esp_event+0x218>)
 8002046:	f004 fb73 	bl	8006730 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 800204a:	4976      	ldr	r1, [pc, #472]	@ (8002224 <esp_event+0x21c>)
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f004 fd09 	bl	8006a64 <strtok>
 8002052:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8002054:	e011      	b.n	800207a <esp_event+0x72>
  {
    pArray[i] = pToken;
 8002056:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	3368      	adds	r3, #104	@ 0x68
 800205c:	443b      	add	r3, r7
 800205e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002060:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 8002064:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002066:	3301      	adds	r3, #1
 8002068:	667b      	str	r3, [r7, #100]	@ 0x64
 800206a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800206c:	2b04      	cmp	r3, #4
 800206e:	dc08      	bgt.n	8002082 <esp_event+0x7a>
      break;
    pToken = strtok(NULL,"[@]");
 8002070:	496c      	ldr	r1, [pc, #432]	@ (8002224 <esp_event+0x21c>)
 8002072:	2000      	movs	r0, #0
 8002074:	f004 fcf6 	bl	8006a64 <strtok>
 8002078:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 800207a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1ea      	bne.n	8002056 <esp_event+0x4e>
 8002080:	e000      	b.n	8002084 <esp_event+0x7c>
      break;
 8002082:	bf00      	nop
  }

  if(!strcmp(pArray[1], "ALLSTOP"))
 8002084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002086:	4968      	ldr	r1, [pc, #416]	@ (8002228 <esp_event+0x220>)
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe f8a9 	bl	80001e0 <strcmp>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10e      	bne.n	80020b2 <esp_event+0xaa>
  {
	  if(!strcmp(pArray[2], "ON"))
 8002094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002096:	4965      	ldr	r1, [pc, #404]	@ (800222c <esp_event+0x224>)
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe f8a1 	bl	80001e0 <strcmp>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80ae 	beq.w	8002202 <esp_event+0x1fa>
	  {
		  //모든 장치 정지 명령 내리기(모든 플래그 True로)
	  }
	  else if(!strcmp(pArray[2], "OFF"))
 80020a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020a8:	4961      	ldr	r1, [pc, #388]	@ (8002230 <esp_event+0x228>)
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe f898 	bl	80001e0 <strcmp>
 80020b0:	e0a7      	b.n	8002202 <esp_event+0x1fa>
	  {
		  //모든 장치 정지 명령 취소(모든 플래그 false로)
	  }
  }
  else if(!strcmp(pArray[1], "STATE"))
 80020b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020b4:	495f      	ldr	r1, [pc, #380]	@ (8002234 <esp_event+0x22c>)
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe f892 	bl	80001e0 <strcmp>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d11d      	bne.n	80020fe <esp_event+0xf6>
  {
	  //현재 매장의 상태 전송하기
	 sprintf(sendBuf, "[%s]%s@%s@%d@%d@%d@%d@%d\n", pArray[0], pArray[1], temp, humi, ledState, lockState, customerCount, fanSpeed);
 80020c2:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 80020c4:	6d3e      	ldr	r6, [r7, #80]	@ 0x50
 80020c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002238 <esp_event+0x230>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a5c      	ldr	r2, [pc, #368]	@ (800223c <esp_event+0x234>)
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	495c      	ldr	r1, [pc, #368]	@ (8002240 <esp_event+0x238>)
 80020d0:	7809      	ldrb	r1, [r1, #0]
 80020d2:	6039      	str	r1, [r7, #0]
 80020d4:	495b      	ldr	r1, [pc, #364]	@ (8002244 <esp_event+0x23c>)
 80020d6:	6809      	ldr	r1, [r1, #0]
 80020d8:	485b      	ldr	r0, [pc, #364]	@ (8002248 <esp_event+0x240>)
 80020da:	6800      	ldr	r0, [r0, #0]
 80020dc:	f107 040c 	add.w	r4, r7, #12
 80020e0:	9005      	str	r0, [sp, #20]
 80020e2:	9104      	str	r1, [sp, #16]
 80020e4:	6839      	ldr	r1, [r7, #0]
 80020e6:	9103      	str	r1, [sp, #12]
 80020e8:	9202      	str	r2, [sp, #8]
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	4b57      	ldr	r3, [pc, #348]	@ (800224c <esp_event+0x244>)
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	4633      	mov	r3, r6
 80020f2:	462a      	mov	r2, r5
 80020f4:	4956      	ldr	r1, [pc, #344]	@ (8002250 <esp_event+0x248>)
 80020f6:	4620      	mov	r0, r4
 80020f8:	f004 fb92 	bl	8006820 <siprintf>
 80020fc:	e081      	b.n	8002202 <esp_event+0x1fa>
  }
  else if(!strcmp(pArray[1], "FAN"))	//팬 회전수 0~1000
 80020fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002100:	4954      	ldr	r1, [pc, #336]	@ (8002254 <esp_event+0x24c>)
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe f86c 	bl	80001e0 <strcmp>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d117      	bne.n	800213e <esp_event+0x136>
  {
	  fanSpeed = atoi(pArray[2]);
 800210e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002110:	4618      	mov	r0, r3
 8002112:	f004 f9c3 	bl	800649c <atoi>
 8002116:	4603      	mov	r3, r0
 8002118:	4a4b      	ldr	r2, [pc, #300]	@ (8002248 <esp_event+0x240>)
 800211a:	6013      	str	r3, [r2, #0]
	  fanControl(fanSpeed);
 800211c:	4b4a      	ldr	r3, [pc, #296]	@ (8002248 <esp_event+0x240>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f000 f8e7 	bl	80022f4 <fanControl>
	  sprintf(sendBuf, "[%s]%s@%d\n", pArray[0], pArray[1], fanSpeed);
 8002126:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002128:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800212a:	4b47      	ldr	r3, [pc, #284]	@ (8002248 <esp_event+0x240>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f107 000c 	add.w	r0, r7, #12
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	460b      	mov	r3, r1
 8002136:	4948      	ldr	r1, [pc, #288]	@ (8002258 <esp_event+0x250>)
 8002138:	f004 fb72 	bl	8006820 <siprintf>
 800213c:	e061      	b.n	8002202 <esp_event+0x1fa>
  }
  else if(!strcmp(pArray[1], "DHTSTATE"))	//온습도 보내기
 800213e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002140:	4946      	ldr	r1, [pc, #280]	@ (800225c <esp_event+0x254>)
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe f84c 	bl	80001e0 <strcmp>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10d      	bne.n	800216a <esp_event+0x162>
  {
	  sprintf(sendBuf, "[%s]%s@%s@%d\n", pArray[0], pArray[1], temp, humi);
 800214e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002150:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002152:	4b39      	ldr	r3, [pc, #228]	@ (8002238 <esp_event+0x230>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f107 000c 	add.w	r0, r7, #12
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	4b3b      	ldr	r3, [pc, #236]	@ (800224c <esp_event+0x244>)
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	460b      	mov	r3, r1
 8002162:	493f      	ldr	r1, [pc, #252]	@ (8002260 <esp_event+0x258>)
 8002164:	f004 fb5c 	bl	8006820 <siprintf>
 8002168:	e04b      	b.n	8002202 <esp_event+0x1fa>
  }
  else if(!strcmp(pArray[1], "LED"))	//[매장명]LED@pArray[2]or[State]@
 800216a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800216c:	493d      	ldr	r1, [pc, #244]	@ (8002264 <esp_event+0x25c>)
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f836 	bl	80001e0 <strcmp>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d12e      	bne.n	80021d8 <esp_event+0x1d0>
  {
	  if(!strcmp(pArray[2], "STATE"))
 800217a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217c:	492d      	ldr	r1, [pc, #180]	@ (8002234 <esp_event+0x22c>)
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f82e 	bl	80001e0 <strcmp>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10e      	bne.n	80021a8 <esp_event+0x1a0>
	  {
		  sprintf(sendBuf, "[%s]%s@%s@%d\n", pArray[0], pArray[1], pArray[2], ledState);
 800218a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800218c:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 800218e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002190:	4a2a      	ldr	r2, [pc, #168]	@ (800223c <esp_event+0x234>)
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	f107 000c 	add.w	r0, r7, #12
 8002198:	9201      	str	r2, [sp, #4]
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	4623      	mov	r3, r4
 800219e:	460a      	mov	r2, r1
 80021a0:	492f      	ldr	r1, [pc, #188]	@ (8002260 <esp_event+0x258>)
 80021a2:	f004 fb3d 	bl	8006820 <siprintf>
 80021a6:	e02c      	b.n	8002202 <esp_event+0x1fa>
	  }
	  else
	  {
		  ledControl(atoi(pArray[2]));
 80021a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021aa:	4618      	mov	r0, r3
 80021ac:	f004 f976 	bl	800649c <atoi>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f8b8 	bl	8002328 <ledControl>
		  sprintf(sendBuf, "[%s]%s@%d\n", pArray[0], pArray[1], atoi(pArray[2]));
 80021b8:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 80021ba:	6d3d      	ldr	r5, [r7, #80]	@ 0x50
 80021bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021be:	4618      	mov	r0, r3
 80021c0:	f004 f96c 	bl	800649c <atoi>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f107 000c 	add.w	r0, r7, #12
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	462b      	mov	r3, r5
 80021ce:	4622      	mov	r2, r4
 80021d0:	4921      	ldr	r1, [pc, #132]	@ (8002258 <esp_event+0x250>)
 80021d2:	f004 fb25 	bl	8006820 <siprintf>
 80021d6:	e014      	b.n	8002202 <esp_event+0x1fa>
	  }
  }
  else if(!strncmp(pArray[1]," New conn",8))
 80021d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021da:	2208      	movs	r2, #8
 80021dc:	4922      	ldr	r1, [pc, #136]	@ (8002268 <esp_event+0x260>)
 80021de:	4618      	mov	r0, r3
 80021e0:	f004 fc2d 	bl	8006a3e <strncmp>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d011      	beq.n	800220e <esp_event+0x206>
  {
//	   printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
     return;
  }
  else if(!strncmp(pArray[1]," Already log",8))
 80021ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021ec:	2208      	movs	r2, #8
 80021ee:	491f      	ldr	r1, [pc, #124]	@ (800226c <esp_event+0x264>)
 80021f0:	4618      	mov	r0, r3
 80021f2:	f004 fc24 	bl	8006a3e <strncmp>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10a      	bne.n	8002212 <esp_event+0x20a>
  {
// 	    printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
	  esp_client_conn();
 80021fc:	f7ff f930 	bl	8001460 <esp_client_conn>
      return;
 8002200:	e008      	b.n	8002214 <esp_event+0x20c>
  }
  else
      return;

  esp_send_data(sendBuf);
 8002202:	f107 030c 	add.w	r3, r7, #12
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fa52 	bl	80016b0 <esp_send_data>
 800220c:	e002      	b.n	8002214 <esp_event+0x20c>
     return;
 800220e:	bf00      	nop
 8002210:	e000      	b.n	8002214 <esp_event+0x20c>
      return;
 8002212:	bf00      	nop
//  printf("Debug send : %s\r\n",sendBuf);
}
 8002214:	376c      	adds	r7, #108	@ 0x6c
 8002216:	46bd      	mov	sp, r7
 8002218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800221a:	bf00      	nop
 800221c:	20000aac 	.word	0x20000aac
 8002220:	08008cb4 	.word	0x08008cb4
 8002224:	08008cc8 	.word	0x08008cc8
 8002228:	08008ccc 	.word	0x08008ccc
 800222c:	08008cd4 	.word	0x08008cd4
 8002230:	08008cd8 	.word	0x08008cd8
 8002234:	08008cdc 	.word	0x08008cdc
 8002238:	20000a8c 	.word	0x20000a8c
 800223c:	20000aa0 	.word	0x20000aa0
 8002240:	20000aa8 	.word	0x20000aa8
 8002244:	20000a9c 	.word	0x20000a9c
 8002248:	20000aa4 	.word	0x20000aa4
 800224c:	20000a90 	.word	0x20000a90
 8002250:	08008ce4 	.word	0x08008ce4
 8002254:	08008d00 	.word	0x08008d00
 8002258:	08008d04 	.word	0x08008d04
 800225c:	08008d10 	.word	0x08008d10
 8002260:	08008d1c 	.word	0x08008d1c
 8002264:	08008d2c 	.word	0x08008d2c
 8002268:	08008d30 	.word	0x08008d30
 800226c:	08008d3c 	.word	0x08008d3c

08002270 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		//1ms 마다 호출
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 8002278:	4b0d      	ldr	r3, [pc, #52]	@ (80022b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	4a0c      	ldr	r2, [pc, #48]	@ (80022b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002280:	6013      	str	r3, [r2, #0]
	if(tim3Cnt >= 1000) //1ms * 1000 = 1Sec
 8002282:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800228a:	db0a      	blt.n	80022a2 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 800228c:	4b09      	ldr	r3, [pc, #36]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 8002292:	4b09      	ldr	r3, [pc, #36]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	3301      	adds	r3, #1
 8002298:	4a07      	ldr	r2, [pc, #28]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800229a:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 800229c:	4b04      	ldr	r3, [pc, #16]	@ (80022b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
	}
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000aec 	.word	0x20000aec
 80022b4:	20000000 	.word	0x20000000
 80022b8:	20000a88 	.word	0x20000a88

080022bc <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	69b9      	ldr	r1, [r7, #24]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	1a8a      	subs	r2, r1, r2
 80022d6:	fb03 f202 	mul.w	r2, r3, r2
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	1acb      	subs	r3, r1, r3
 80022e0:	fb92 f2f3 	sdiv	r2, r2, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	4413      	add	r3, r2
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <fanControl>:

void fanControl(int fanSpeed)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	if (!fanFlag)	//플래그들은 0일 때만 동작을 의미함.
 80022fc:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <fanControl+0x2c>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	f083 0301 	eor.w	r3, r3, #1
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <fanControl+0x1e>
	{
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1, fanSpeed);
 800230a:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <fanControl+0x30>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000aa9 	.word	0x20000aa9
 8002324:	200009b0 	.word	0x200009b0

08002328 <ledControl>:

void ledControl(int bright)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af02      	add	r7, sp, #8
 800232e:	6078      	str	r0, [r7, #4]
	ledState = bright;	//전역변수에 저장
 8002330:	4a0a      	ldr	r2, [pc, #40]	@ (800235c <ledControl+0x34>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6013      	str	r3, [r2, #0]
	int realLedState = map(bright, 0, 100, 0, 1000);	//써지는 실제값
 8002336:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	2300      	movs	r3, #0
 800233e:	2264      	movs	r2, #100	@ 0x64
 8002340:	2100      	movs	r1, #0
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff ffba 	bl	80022bc <map>
 8002348:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1, realLedState);
 800234a:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <ledControl+0x38>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000aa0 	.word	0x20000aa0
 8002360:	20000920 	.word	0x20000920
 8002364:	00000000 	.word	0x00000000

08002368 <infraredSensor>:

int infraredSensor(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
  {
	  float distance;
	  uint32_t sensorReadTime;
  } Data;

  Data outDoorSensor = {0.0, 0};
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
  Data inDoorSensor  = {0.0, 0};
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	2300      	movs	r3, #0
 8002380:	607b      	str	r3, [r7, #4]
//  voltage = (adcValue / 4095.0f) * 3.3f; // 12-bit ADC의 최대 값은 4095
//
//  // inDoorSensor 거리 계산 (센서의 특성에 따라 조정)
//  inDoorSensor.distance = 27.86f / pow(voltage, 1.15f);

   uint32_t adcValue = Read_ADC_Channel(ADC_CHANNEL_0);
 8002382:	2000      	movs	r0, #0
 8002384:	f000 f89e 	bl	80024c4 <Read_ADC_Channel>
 8002388:	6178      	str	r0, [r7, #20]
   outDoorSensor.sensorReadTime = HAL_GetTick();
 800238a:	f000 fc77 	bl	8002c7c <HAL_GetTick>
 800238e:	4603      	mov	r3, r0
 8002390:	60fb      	str	r3, [r7, #12]
   // adc chennel1 값을 전압으로 변환
   float voltage = (adcValue / 4095.0f) * 3.3f; // 12-bit ADC의 최대 값은 4095
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	ee07 3a90 	vmov	s15, r3
 8002398:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800239c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80024b8 <infraredSensor+0x150>
 80023a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023a4:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80024bc <infraredSensor+0x154>
 80023a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ac:	edc7 7a04 	vstr	s15, [r7, #16]

   // outDoorSensor 거리 계산 (센서의 특성에 따라 조정)
   outDoorSensor.distance = 27.86f / pow(voltage, 1.15f);
 80023b0:	6938      	ldr	r0, [r7, #16]
 80023b2:	f7fe f8e1 	bl	8000578 <__aeabi_f2d>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	ed9f 1b3b 	vldr	d1, [pc, #236]	@ 80024a8 <infraredSensor+0x140>
 80023be:	ec43 2b10 	vmov	d0, r2, r3
 80023c2:	f005 fbb1 	bl	8007b28 <pow>
 80023c6:	ec53 2b10 	vmov	r2, r3, d0
 80023ca:	a139      	add	r1, pc, #228	@ (adr r1, 80024b0 <infraredSensor+0x148>)
 80023cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023d0:	f7fe fa54 	bl	800087c <__aeabi_ddiv>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	f7fe fbd4 	bl	8000b88 <__aeabi_d2f>
 80023e0:	4603      	mov	r3, r0
 80023e2:	60bb      	str	r3, [r7, #8]

   adcValue = Read_ADC_Channel(ADC_CHANNEL_1);
 80023e4:	2001      	movs	r0, #1
 80023e6:	f000 f86d 	bl	80024c4 <Read_ADC_Channel>
 80023ea:	6178      	str	r0, [r7, #20]
   inDoorSensor.sensorReadTime = HAL_GetTick();
 80023ec:	f000 fc46 	bl	8002c7c <HAL_GetTick>
 80023f0:	4603      	mov	r3, r0
 80023f2:	607b      	str	r3, [r7, #4]
   // adc chennel1 값을 전압으로 변환
   voltage = (adcValue / 4095.0f) * 3.3f; // 12-bit ADC의 최대 값은 4095
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	ee07 3a90 	vmov	s15, r3
 80023fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023fe:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80024b8 <infraredSensor+0x150>
 8002402:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002406:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80024bc <infraredSensor+0x154>
 800240a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240e:	edc7 7a04 	vstr	s15, [r7, #16]

   // outDoorSensor 거리 계산 (센서의 특성에 따라 조정)
   inDoorSensor.distance = 27.86f / pow(voltage, 1.15f);
 8002412:	6938      	ldr	r0, [r7, #16]
 8002414:	f7fe f8b0 	bl	8000578 <__aeabi_f2d>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	ed9f 1b22 	vldr	d1, [pc, #136]	@ 80024a8 <infraredSensor+0x140>
 8002420:	ec43 2b10 	vmov	d0, r2, r3
 8002424:	f005 fb80 	bl	8007b28 <pow>
 8002428:	ec53 2b10 	vmov	r2, r3, d0
 800242c:	a120      	add	r1, pc, #128	@ (adr r1, 80024b0 <infraredSensor+0x148>)
 800242e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002432:	f7fe fa23 	bl	800087c <__aeabi_ddiv>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	f7fe fba3 	bl	8000b88 <__aeabi_d2f>
 8002442:	4603      	mov	r3, r0
 8002444:	603b      	str	r3, [r7, #0]

  if(outDoorSensor.distance < 30 || inDoorSensor.distance < 30)
 8002446:	edd7 7a02 	vldr	s15, [r7, #8]
 800244a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800244e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002456:	d408      	bmi.n	800246a <infraredSensor+0x102>
 8002458:	edd7 7a00 	vldr	s15, [r7]
 800245c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	d506      	bpl.n	8002478 <infraredSensor+0x110>
  {
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2120      	movs	r1, #32
 800246e:	4814      	ldr	r0, [pc, #80]	@ (80024c0 <infraredSensor+0x158>)
 8002470:	f001 fb32 	bl	8003ad8 <HAL_GPIO_WritePin>
	  return 10;	//문열림 코드 10
 8002474:	230a      	movs	r3, #10
 8002476:	e010      	b.n	800249a <infraredSensor+0x132>
  }
  else if(outDoorSensor.sensorReadTime > inDoorSensor.sensorReadTime)
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	429a      	cmp	r2, r3
 800247e:	d901      	bls.n	8002484 <infraredSensor+0x11c>
  {
	  return 20;	//손님 수 줄어듬 코드 20
 8002480:	2314      	movs	r3, #20
 8002482:	e00a      	b.n	800249a <infraredSensor+0x132>
  }
  else if(inDoorSensor.sensorReadTime > outDoorSensor.sensorReadTime)
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	429a      	cmp	r2, r3
 800248a:	d901      	bls.n	8002490 <infraredSensor+0x128>
  {
	  return 30; 	//손님 수 증가 코드 30
 800248c:	231e      	movs	r3, #30
 800248e:	e004      	b.n	800249a <infraredSensor+0x132>
  }
  else
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8002490:	2201      	movs	r2, #1
 8002492:	2120      	movs	r1, #32
 8002494:	480a      	ldr	r0, [pc, #40]	@ (80024c0 <infraredSensor+0x158>)
 8002496:	f001 fb1f 	bl	8003ad8 <HAL_GPIO_WritePin>
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	f3af 8000 	nop.w
 80024a8:	60000000 	.word	0x60000000
 80024ac:	3ff26666 	.word	0x3ff26666
 80024b0:	00000000 	.word	0x00000000
 80024b4:	403bdc29 	.word	0x403bdc29
 80024b8:	457ff000 	.word	0x457ff000
 80024bc:	40533333 	.word	0x40533333
 80024c0:	40020000 	.word	0x40020000

080024c4 <Read_ADC_Channel>:

uint32_t Read_ADC_Channel(uint32_t channel) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 80024cc:	f107 0308 	add.w	r3, r7, #8
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]

    sConfig.Channel = channel;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 80024de:	2301      	movs	r3, #1
 80024e0:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES; // 샘플링 시간 설정
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80024e6:	f107 0308 	add.w	r3, r7, #8
 80024ea:	4619      	mov	r1, r3
 80024ec:	4809      	ldr	r0, [pc, #36]	@ (8002514 <Read_ADC_Channel+0x50>)
 80024ee:	f000 fd85 	bl	8002ffc <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc1); // ADC 변환 시작
 80024f2:	4808      	ldr	r0, [pc, #32]	@ (8002514 <Read_ADC_Channel+0x50>)
 80024f4:	f000 fc36 	bl	8002d64 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // 변환 완료 대기
 80024f8:	f04f 31ff 	mov.w	r1, #4294967295
 80024fc:	4805      	ldr	r0, [pc, #20]	@ (8002514 <Read_ADC_Channel+0x50>)
 80024fe:	f000 fce5 	bl	8002ecc <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1); // 변환된 값 반환
 8002502:	4804      	ldr	r0, [pc, #16]	@ (8002514 <Read_ADC_Channel+0x50>)
 8002504:	f000 fd6d 	bl	8002fe2 <HAL_ADC_GetValue>
 8002508:	4603      	mov	r3, r0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	200008d8 	.word	0x200008d8

08002518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800251c:	b672      	cpsid	i
}
 800251e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <Error_Handler+0x8>

08002524 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <HAL_MspInit+0x4c>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	4a0f      	ldr	r2, [pc, #60]	@ (8002570 <HAL_MspInit+0x4c>)
 8002534:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002538:	6453      	str	r3, [r2, #68]	@ 0x44
 800253a:	4b0d      	ldr	r3, [pc, #52]	@ (8002570 <HAL_MspInit+0x4c>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <HAL_MspInit+0x4c>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	4a08      	ldr	r2, [pc, #32]	@ (8002570 <HAL_MspInit+0x4c>)
 8002550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002554:	6413      	str	r3, [r2, #64]	@ 0x40
 8002556:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <HAL_MspInit+0x4c>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002562:	2007      	movs	r0, #7
 8002564:	f001 f848 	bl	80035f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40023800 	.word	0x40023800

08002574 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	@ 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a17      	ldr	r2, [pc, #92]	@ (80025f0 <HAL_ADC_MspInit+0x7c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d127      	bne.n	80025e6 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	4b16      	ldr	r3, [pc, #88]	@ (80025f4 <HAL_ADC_MspInit+0x80>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	4a15      	ldr	r2, [pc, #84]	@ (80025f4 <HAL_ADC_MspInit+0x80>)
 80025a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025a6:	4b13      	ldr	r3, [pc, #76]	@ (80025f4 <HAL_ADC_MspInit+0x80>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	4b0f      	ldr	r3, [pc, #60]	@ (80025f4 <HAL_ADC_MspInit+0x80>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	4a0e      	ldr	r2, [pc, #56]	@ (80025f4 <HAL_ADC_MspInit+0x80>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c2:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <HAL_ADC_MspInit+0x80>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025ce:	2303      	movs	r3, #3
 80025d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025d2:	2303      	movs	r3, #3
 80025d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	4619      	mov	r1, r3
 80025e0:	4805      	ldr	r0, [pc, #20]	@ (80025f8 <HAL_ADC_MspInit+0x84>)
 80025e2:	f001 f8dd 	bl	80037a0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80025e6:	bf00      	nop
 80025e8:	3728      	adds	r7, #40	@ 0x28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40012000 	.word	0x40012000
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40020000 	.word	0x40020000

080025fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a26      	ldr	r2, [pc, #152]	@ (80026a4 <HAL_TIM_Base_MspInit+0xa8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d10e      	bne.n	800262c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	4b25      	ldr	r3, [pc, #148]	@ (80026a8 <HAL_TIM_Base_MspInit+0xac>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002616:	4a24      	ldr	r2, [pc, #144]	@ (80026a8 <HAL_TIM_Base_MspInit+0xac>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6453      	str	r3, [r2, #68]	@ 0x44
 800261e:	4b22      	ldr	r3, [pc, #136]	@ (80026a8 <HAL_TIM_Base_MspInit+0xac>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800262a:	e036      	b.n	800269a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1e      	ldr	r2, [pc, #120]	@ (80026ac <HAL_TIM_Base_MspInit+0xb0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d116      	bne.n	8002664 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	4b1b      	ldr	r3, [pc, #108]	@ (80026a8 <HAL_TIM_Base_MspInit+0xac>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	4a1a      	ldr	r2, [pc, #104]	@ (80026a8 <HAL_TIM_Base_MspInit+0xac>)
 8002640:	f043 0302 	orr.w	r3, r3, #2
 8002644:	6413      	str	r3, [r2, #64]	@ 0x40
 8002646:	4b18      	ldr	r3, [pc, #96]	@ (80026a8 <HAL_TIM_Base_MspInit+0xac>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002652:	2200      	movs	r2, #0
 8002654:	2100      	movs	r1, #0
 8002656:	201d      	movs	r0, #29
 8002658:	f000 ffd9 	bl	800360e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800265c:	201d      	movs	r0, #29
 800265e:	f000 fff2 	bl	8003646 <HAL_NVIC_EnableIRQ>
}
 8002662:	e01a      	b.n	800269a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a11      	ldr	r2, [pc, #68]	@ (80026b0 <HAL_TIM_Base_MspInit+0xb4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d115      	bne.n	800269a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b0d      	ldr	r3, [pc, #52]	@ (80026a8 <HAL_TIM_Base_MspInit+0xac>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	4a0c      	ldr	r2, [pc, #48]	@ (80026a8 <HAL_TIM_Base_MspInit+0xac>)
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	6413      	str	r3, [r2, #64]	@ 0x40
 800267e:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <HAL_TIM_Base_MspInit+0xac>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	201e      	movs	r0, #30
 8002690:	f000 ffbd 	bl	800360e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002694:	201e      	movs	r0, #30
 8002696:	f000 ffd6 	bl	8003646 <HAL_NVIC_EnableIRQ>
}
 800269a:	bf00      	nop
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40010000 	.word	0x40010000
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40000400 	.word	0x40000400
 80026b0:	40000800 	.word	0x40000800

080026b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	@ 0x28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a36      	ldr	r2, [pc, #216]	@ (80027ac <HAL_TIM_MspPostInit+0xf8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d11f      	bne.n	8002716 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	4b35      	ldr	r3, [pc, #212]	@ (80027b0 <HAL_TIM_MspPostInit+0xfc>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	4a34      	ldr	r2, [pc, #208]	@ (80027b0 <HAL_TIM_MspPostInit+0xfc>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e6:	4b32      	ldr	r3, [pc, #200]	@ (80027b0 <HAL_TIM_MspPostInit+0xfc>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002700:	2300      	movs	r3, #0
 8002702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002704:	2301      	movs	r3, #1
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	4619      	mov	r1, r3
 800270e:	4829      	ldr	r0, [pc, #164]	@ (80027b4 <HAL_TIM_MspPostInit+0x100>)
 8002710:	f001 f846 	bl	80037a0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002714:	e046      	b.n	80027a4 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a27      	ldr	r2, [pc, #156]	@ (80027b8 <HAL_TIM_MspPostInit+0x104>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d11e      	bne.n	800275e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	4b22      	ldr	r3, [pc, #136]	@ (80027b0 <HAL_TIM_MspPostInit+0xfc>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	4a21      	ldr	r2, [pc, #132]	@ (80027b0 <HAL_TIM_MspPostInit+0xfc>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002730:	4b1f      	ldr	r3, [pc, #124]	@ (80027b0 <HAL_TIM_MspPostInit+0xfc>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800273c:	2340      	movs	r3, #64	@ 0x40
 800273e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002740:	2302      	movs	r3, #2
 8002742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	2300      	movs	r3, #0
 800274a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800274c:	2302      	movs	r3, #2
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4619      	mov	r1, r3
 8002756:	4817      	ldr	r0, [pc, #92]	@ (80027b4 <HAL_TIM_MspPostInit+0x100>)
 8002758:	f001 f822 	bl	80037a0 <HAL_GPIO_Init>
}
 800275c:	e022      	b.n	80027a4 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a16      	ldr	r2, [pc, #88]	@ (80027bc <HAL_TIM_MspPostInit+0x108>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d11d      	bne.n	80027a4 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002768:	2300      	movs	r3, #0
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	4b10      	ldr	r3, [pc, #64]	@ (80027b0 <HAL_TIM_MspPostInit+0xfc>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002770:	4a0f      	ldr	r2, [pc, #60]	@ (80027b0 <HAL_TIM_MspPostInit+0xfc>)
 8002772:	f043 0302 	orr.w	r3, r3, #2
 8002776:	6313      	str	r3, [r2, #48]	@ 0x30
 8002778:	4b0d      	ldr	r3, [pc, #52]	@ (80027b0 <HAL_TIM_MspPostInit+0xfc>)
 800277a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_fanMotor_Pin;
 8002784:	2340      	movs	r3, #64	@ 0x40
 8002786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	2302      	movs	r3, #2
 800278a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2300      	movs	r3, #0
 8002792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002794:	2302      	movs	r3, #2
 8002796:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM4_fanMotor_GPIO_Port, &GPIO_InitStruct);
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	4619      	mov	r1, r3
 800279e:	4808      	ldr	r0, [pc, #32]	@ (80027c0 <HAL_TIM_MspPostInit+0x10c>)
 80027a0:	f000 fffe 	bl	80037a0 <HAL_GPIO_Init>
}
 80027a4:	bf00      	nop
 80027a6:	3728      	adds	r7, #40	@ 0x28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40010000 	.word	0x40010000
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40020000 	.word	0x40020000
 80027b8:	40000400 	.word	0x40000400
 80027bc:	40000800 	.word	0x40000800
 80027c0:	40020400 	.word	0x40020400

080027c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08c      	sub	sp, #48	@ 0x30
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	f107 031c 	add.w	r3, r7, #28
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a3a      	ldr	r2, [pc, #232]	@ (80028cc <HAL_UART_MspInit+0x108>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d134      	bne.n	8002850 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	61bb      	str	r3, [r7, #24]
 80027ea:	4b39      	ldr	r3, [pc, #228]	@ (80028d0 <HAL_UART_MspInit+0x10c>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	4a38      	ldr	r2, [pc, #224]	@ (80028d0 <HAL_UART_MspInit+0x10c>)
 80027f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027f6:	4b36      	ldr	r3, [pc, #216]	@ (80028d0 <HAL_UART_MspInit+0x10c>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fe:	61bb      	str	r3, [r7, #24]
 8002800:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	4b32      	ldr	r3, [pc, #200]	@ (80028d0 <HAL_UART_MspInit+0x10c>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	4a31      	ldr	r2, [pc, #196]	@ (80028d0 <HAL_UART_MspInit+0x10c>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6313      	str	r3, [r2, #48]	@ 0x30
 8002812:	4b2f      	ldr	r3, [pc, #188]	@ (80028d0 <HAL_UART_MspInit+0x10c>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800281e:	230c      	movs	r3, #12
 8002820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002822:	2302      	movs	r3, #2
 8002824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282a:	2303      	movs	r3, #3
 800282c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800282e:	2307      	movs	r3, #7
 8002830:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002832:	f107 031c 	add.w	r3, r7, #28
 8002836:	4619      	mov	r1, r3
 8002838:	4826      	ldr	r0, [pc, #152]	@ (80028d4 <HAL_UART_MspInit+0x110>)
 800283a:	f000 ffb1 	bl	80037a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2100      	movs	r1, #0
 8002842:	2026      	movs	r0, #38	@ 0x26
 8002844:	f000 fee3 	bl	800360e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002848:	2026      	movs	r0, #38	@ 0x26
 800284a:	f000 fefc 	bl	8003646 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800284e:	e038      	b.n	80028c2 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a20      	ldr	r2, [pc, #128]	@ (80028d8 <HAL_UART_MspInit+0x114>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d133      	bne.n	80028c2 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	4b1c      	ldr	r3, [pc, #112]	@ (80028d0 <HAL_UART_MspInit+0x10c>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	4a1b      	ldr	r2, [pc, #108]	@ (80028d0 <HAL_UART_MspInit+0x10c>)
 8002864:	f043 0320 	orr.w	r3, r3, #32
 8002868:	6453      	str	r3, [r2, #68]	@ 0x44
 800286a:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <HAL_UART_MspInit+0x10c>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b15      	ldr	r3, [pc, #84]	@ (80028d0 <HAL_UART_MspInit+0x10c>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	4a14      	ldr	r2, [pc, #80]	@ (80028d0 <HAL_UART_MspInit+0x10c>)
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	6313      	str	r3, [r2, #48]	@ 0x30
 8002886:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <HAL_UART_MspInit+0x10c>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_bluetooh_Pin|RX_bluetooh_Pin;
 8002892:	23c0      	movs	r3, #192	@ 0xc0
 8002894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289e:	2303      	movs	r3, #3
 80028a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028a2:	2308      	movs	r3, #8
 80028a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a6:	f107 031c 	add.w	r3, r7, #28
 80028aa:	4619      	mov	r1, r3
 80028ac:	480b      	ldr	r0, [pc, #44]	@ (80028dc <HAL_UART_MspInit+0x118>)
 80028ae:	f000 ff77 	bl	80037a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	2047      	movs	r0, #71	@ 0x47
 80028b8:	f000 fea9 	bl	800360e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80028bc:	2047      	movs	r0, #71	@ 0x47
 80028be:	f000 fec2 	bl	8003646 <HAL_NVIC_EnableIRQ>
}
 80028c2:	bf00      	nop
 80028c4:	3730      	adds	r7, #48	@ 0x30
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40004400 	.word	0x40004400
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40020000 	.word	0x40020000
 80028d8:	40011400 	.word	0x40011400
 80028dc:	40020800 	.word	0x40020800

080028e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <NMI_Handler+0x4>

080028e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ec:	bf00      	nop
 80028ee:	e7fd      	b.n	80028ec <HardFault_Handler+0x4>

080028f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f4:	bf00      	nop
 80028f6:	e7fd      	b.n	80028f4 <MemManage_Handler+0x4>

080028f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028fc:	bf00      	nop
 80028fe:	e7fd      	b.n	80028fc <BusFault_Handler+0x4>

08002900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002904:	bf00      	nop
 8002906:	e7fd      	b.n	8002904 <UsageFault_Handler+0x4>

08002908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002936:	f000 f98d 	bl	8002c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}

0800293e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC0_EXTI0_BUTTON_Pin);
 8002942:	2001      	movs	r0, #1
 8002944:	f001 f8e2 	bl	8003b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002948:	bf00      	nop
 800294a:	bd80      	pop	{r7, pc}

0800294c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002950:	4802      	ldr	r0, [pc, #8]	@ (800295c <TIM3_IRQHandler+0x10>)
 8002952:	f001 feef 	bl	8004734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000968 	.word	0x20000968

08002960 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002964:	4802      	ldr	r0, [pc, #8]	@ (8002970 <TIM4_IRQHandler+0x10>)
 8002966:	f001 fee5 	bl	8004734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200009b0 	.word	0x200009b0

08002974 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002978:	4802      	ldr	r0, [pc, #8]	@ (8002984 <USART2_IRQHandler+0x10>)
 800297a:	f002 fe23 	bl	80055c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	200009f8 	.word	0x200009f8

08002988 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800298c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002990:	f001 f8bc 	bl	8003b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}

08002998 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800299c:	4802      	ldr	r0, [pc, #8]	@ (80029a8 <USART6_IRQHandler+0x10>)
 800299e:	f002 fe11 	bl	80055c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000a40 	.word	0x20000a40

080029ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return 1;
 80029b0:	2301      	movs	r3, #1
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <_kill>:

int _kill(int pid, int sig)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029c6:	f004 f905 	bl	8006bd4 <__errno>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2216      	movs	r2, #22
 80029ce:	601a      	str	r2, [r3, #0]
  return -1;
 80029d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <_exit>:

void _exit (int status)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029e4:	f04f 31ff 	mov.w	r1, #4294967295
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff ffe7 	bl	80029bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80029ee:	bf00      	nop
 80029f0:	e7fd      	b.n	80029ee <_exit+0x12>

080029f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	e00a      	b.n	8002a1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a04:	f3af 8000 	nop.w
 8002a08:	4601      	mov	r1, r0
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	60ba      	str	r2, [r7, #8]
 8002a10:	b2ca      	uxtb	r2, r1
 8002a12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	3301      	adds	r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	dbf0      	blt.n	8002a04 <_read+0x12>
  }

  return len;
 8002a22:	687b      	ldr	r3, [r7, #4]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	e009      	b.n	8002a52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	60ba      	str	r2, [r7, #8]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe fe74 	bl	8001734 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	dbf1      	blt.n	8002a3e <_write+0x12>
  }
  return len;
 8002a5a:	687b      	ldr	r3, [r7, #4]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <_close>:

int _close(int file)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a8c:	605a      	str	r2, [r3, #4]
  return 0;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <_isatty>:

int _isatty(int file)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002aa4:	2301      	movs	r3, #1
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b085      	sub	sp, #20
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ad4:	4a14      	ldr	r2, [pc, #80]	@ (8002b28 <_sbrk+0x5c>)
 8002ad6:	4b15      	ldr	r3, [pc, #84]	@ (8002b2c <_sbrk+0x60>)
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ae0:	4b13      	ldr	r3, [pc, #76]	@ (8002b30 <_sbrk+0x64>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ae8:	4b11      	ldr	r3, [pc, #68]	@ (8002b30 <_sbrk+0x64>)
 8002aea:	4a12      	ldr	r2, [pc, #72]	@ (8002b34 <_sbrk+0x68>)
 8002aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aee:	4b10      	ldr	r3, [pc, #64]	@ (8002b30 <_sbrk+0x64>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4413      	add	r3, r2
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d207      	bcs.n	8002b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002afc:	f004 f86a 	bl	8006bd4 <__errno>
 8002b00:	4603      	mov	r3, r0
 8002b02:	220c      	movs	r2, #12
 8002b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0a:	e009      	b.n	8002b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b0c:	4b08      	ldr	r3, [pc, #32]	@ (8002b30 <_sbrk+0x64>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b12:	4b07      	ldr	r3, [pc, #28]	@ (8002b30 <_sbrk+0x64>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4413      	add	r3, r2
 8002b1a:	4a05      	ldr	r2, [pc, #20]	@ (8002b30 <_sbrk+0x64>)
 8002b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20020000 	.word	0x20020000
 8002b2c:	00000400 	.word	0x00000400
 8002b30:	20000af0 	.word	0x20000af0
 8002b34:	20000c48 	.word	0x20000c48

08002b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b3c:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <SystemInit+0x20>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b42:	4a05      	ldr	r2, [pc, #20]	@ (8002b58 <SystemInit+0x20>)
 8002b44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8002b5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b60:	f7ff ffea 	bl	8002b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b64:	480c      	ldr	r0, [pc, #48]	@ (8002b98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b66:	490d      	ldr	r1, [pc, #52]	@ (8002b9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b68:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b6c:	e002      	b.n	8002b74 <LoopCopyDataInit>

08002b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b72:	3304      	adds	r3, #4

08002b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b78:	d3f9      	bcc.n	8002b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ba4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b7c:	4c0a      	ldr	r4, [pc, #40]	@ (8002ba8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b80:	e001      	b.n	8002b86 <LoopFillZerobss>

08002b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b84:	3204      	adds	r2, #4

08002b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b88:	d3fb      	bcc.n	8002b82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b8a:	f004 f829 	bl	8006be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b8e:	f7fe fde9 	bl	8001764 <main>
  bx  lr    
 8002b92:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8002b94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b9c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002ba0:	08008f98 	.word	0x08008f98
  ldr r2, =_sbss
 8002ba4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002ba8:	20000c44 	.word	0x20000c44

08002bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bac:	e7fe      	b.n	8002bac <ADC_IRQHandler>
	...

08002bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf0 <HAL_Init+0x40>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf0 <HAL_Init+0x40>)
 8002bba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf0 <HAL_Init+0x40>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf0 <HAL_Init+0x40>)
 8002bc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bcc:	4b08      	ldr	r3, [pc, #32]	@ (8002bf0 <HAL_Init+0x40>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a07      	ldr	r2, [pc, #28]	@ (8002bf0 <HAL_Init+0x40>)
 8002bd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd8:	2003      	movs	r0, #3
 8002bda:	f000 fd0d 	bl	80035f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bde:	2000      	movs	r0, #0
 8002be0:	f000 f808 	bl	8002bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002be4:	f7ff fc9e 	bl	8002524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023c00 	.word	0x40023c00

08002bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bfc:	4b12      	ldr	r3, [pc, #72]	@ (8002c48 <HAL_InitTick+0x54>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b12      	ldr	r3, [pc, #72]	@ (8002c4c <HAL_InitTick+0x58>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	4619      	mov	r1, r3
 8002c06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fd25 	bl	8003662 <HAL_SYSTICK_Config>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e00e      	b.n	8002c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b0f      	cmp	r3, #15
 8002c26:	d80a      	bhi.n	8002c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c30:	f000 fced 	bl	800360e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c34:	4a06      	ldr	r2, [pc, #24]	@ (8002c50 <HAL_InitTick+0x5c>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e000      	b.n	8002c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20000004 	.word	0x20000004
 8002c4c:	2000000c 	.word	0x2000000c
 8002c50:	20000008 	.word	0x20000008

08002c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c58:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <HAL_IncTick+0x20>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <HAL_IncTick+0x24>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4413      	add	r3, r2
 8002c64:	4a04      	ldr	r2, [pc, #16]	@ (8002c78 <HAL_IncTick+0x24>)
 8002c66:	6013      	str	r3, [r2, #0]
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	2000000c 	.word	0x2000000c
 8002c78:	20000af4 	.word	0x20000af4

08002c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c80:	4b03      	ldr	r3, [pc, #12]	@ (8002c90 <HAL_GetTick+0x14>)
 8002c82:	681b      	ldr	r3, [r3, #0]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	20000af4 	.word	0x20000af4

08002c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c9c:	f7ff ffee 	bl	8002c7c <HAL_GetTick>
 8002ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cac:	d005      	beq.n	8002cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cae:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <HAL_Delay+0x44>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cba:	bf00      	nop
 8002cbc:	f7ff ffde 	bl	8002c7c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d8f7      	bhi.n	8002cbc <HAL_Delay+0x28>
  {
  }
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	2000000c 	.word	0x2000000c

08002cdc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e033      	b.n	8002d5a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff fc3a 	bl	8002574 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d118      	bne.n	8002d4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d22:	f023 0302 	bic.w	r3, r3, #2
 8002d26:	f043 0202 	orr.w	r2, r3, #2
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fa96 	bl	8003260 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	f023 0303 	bic.w	r3, r3, #3
 8002d42:	f043 0201 	orr.w	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d4a:	e001      	b.n	8002d50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_ADC_Start+0x1a>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e097      	b.n	8002eae <HAL_ADC_Start+0x14a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d018      	beq.n	8002dc6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002da4:	4b45      	ldr	r3, [pc, #276]	@ (8002ebc <HAL_ADC_Start+0x158>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a45      	ldr	r2, [pc, #276]	@ (8002ec0 <HAL_ADC_Start+0x15c>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	0c9a      	lsrs	r2, r3, #18
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002db8:	e002      	b.n	8002dc0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f9      	bne.n	8002dba <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d15f      	bne.n	8002e94 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002ddc:	f023 0301 	bic.w	r3, r3, #1
 8002de0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d007      	beq.n	8002e06 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002dfe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e12:	d106      	bne.n	8002e22 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e18:	f023 0206 	bic.w	r2, r3, #6
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002e20:	e002      	b.n	8002e28 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e30:	4b24      	ldr	r3, [pc, #144]	@ (8002ec4 <HAL_ADC_Start+0x160>)
 8002e32:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002e3c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 031f 	and.w	r3, r3, #31
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10f      	bne.n	8002e6a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d129      	bne.n	8002eac <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	e020      	b.n	8002eac <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a16      	ldr	r2, [pc, #88]	@ (8002ec8 <HAL_ADC_Start+0x164>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d11b      	bne.n	8002eac <HAL_ADC_Start+0x148>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d114      	bne.n	8002eac <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	e00b      	b.n	8002eac <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e98:	f043 0210 	orr.w	r2, r3, #16
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea4:	f043 0201 	orr.w	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000004 	.word	0x20000004
 8002ec0:	431bde83 	.word	0x431bde83
 8002ec4:	40012300 	.word	0x40012300
 8002ec8:	40012000 	.word	0x40012000

08002ecc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee8:	d113      	bne.n	8002f12 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ef8:	d10b      	bne.n	8002f12 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efe:	f043 0220 	orr.w	r2, r3, #32
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e063      	b.n	8002fda <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f12:	f7ff feb3 	bl	8002c7c <HAL_GetTick>
 8002f16:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f18:	e021      	b.n	8002f5e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d01d      	beq.n	8002f5e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <HAL_ADC_PollForConversion+0x6c>
 8002f28:	f7ff fea8 	bl	8002c7c <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d212      	bcs.n	8002f5e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d00b      	beq.n	8002f5e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	f043 0204 	orr.w	r2, r3, #4
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e03d      	b.n	8002fda <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d1d6      	bne.n	8002f1a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0212 	mvn.w	r2, #18
 8002f74:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d123      	bne.n	8002fd8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d11f      	bne.n	8002fd8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d006      	beq.n	8002fb4 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d111      	bne.n	8002fd8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d105      	bne.n	8002fd8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	f043 0201 	orr.w	r2, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x1c>
 8003014:	2302      	movs	r3, #2
 8003016:	e113      	b.n	8003240 <HAL_ADC_ConfigChannel+0x244>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b09      	cmp	r3, #9
 8003026:	d925      	bls.n	8003074 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68d9      	ldr	r1, [r3, #12]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	4613      	mov	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4413      	add	r3, r2
 800303c:	3b1e      	subs	r3, #30
 800303e:	2207      	movs	r2, #7
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43da      	mvns	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	400a      	ands	r2, r1
 800304c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68d9      	ldr	r1, [r3, #12]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	b29b      	uxth	r3, r3
 800305e:	4618      	mov	r0, r3
 8003060:	4603      	mov	r3, r0
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	4403      	add	r3, r0
 8003066:	3b1e      	subs	r3, #30
 8003068:	409a      	lsls	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	e022      	b.n	80030ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6919      	ldr	r1, [r3, #16]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	4613      	mov	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4413      	add	r3, r2
 8003088:	2207      	movs	r2, #7
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43da      	mvns	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	400a      	ands	r2, r1
 8003096:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6919      	ldr	r1, [r3, #16]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	4618      	mov	r0, r3
 80030aa:	4603      	mov	r3, r0
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4403      	add	r3, r0
 80030b0:	409a      	lsls	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d824      	bhi.n	800310c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	3b05      	subs	r3, #5
 80030d4:	221f      	movs	r2, #31
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43da      	mvns	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	400a      	ands	r2, r1
 80030e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	4618      	mov	r0, r3
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	3b05      	subs	r3, #5
 80030fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	635a      	str	r2, [r3, #52]	@ 0x34
 800310a:	e04c      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b0c      	cmp	r3, #12
 8003112:	d824      	bhi.n	800315e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	3b23      	subs	r3, #35	@ 0x23
 8003126:	221f      	movs	r2, #31
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43da      	mvns	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	400a      	ands	r2, r1
 8003134:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	b29b      	uxth	r3, r3
 8003142:	4618      	mov	r0, r3
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	3b23      	subs	r3, #35	@ 0x23
 8003150:	fa00 f203 	lsl.w	r2, r0, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	631a      	str	r2, [r3, #48]	@ 0x30
 800315c:	e023      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	3b41      	subs	r3, #65	@ 0x41
 8003170:	221f      	movs	r2, #31
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43da      	mvns	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	400a      	ands	r2, r1
 800317e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	4618      	mov	r0, r3
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	3b41      	subs	r3, #65	@ 0x41
 800319a:	fa00 f203 	lsl.w	r2, r0, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031a6:	4b29      	ldr	r3, [pc, #164]	@ (800324c <HAL_ADC_ConfigChannel+0x250>)
 80031a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a28      	ldr	r2, [pc, #160]	@ (8003250 <HAL_ADC_ConfigChannel+0x254>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d10f      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x1d8>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b12      	cmp	r3, #18
 80031ba:	d10b      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003250 <HAL_ADC_ConfigChannel+0x254>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d12b      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x23a>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003254 <HAL_ADC_ConfigChannel+0x258>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d003      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0x1f4>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b11      	cmp	r3, #17
 80031ee:	d122      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a11      	ldr	r2, [pc, #68]	@ (8003254 <HAL_ADC_ConfigChannel+0x258>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d111      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003212:	4b11      	ldr	r3, [pc, #68]	@ (8003258 <HAL_ADC_ConfigChannel+0x25c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a11      	ldr	r2, [pc, #68]	@ (800325c <HAL_ADC_ConfigChannel+0x260>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	0c9a      	lsrs	r2, r3, #18
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003228:	e002      	b.n	8003230 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	3b01      	subs	r3, #1
 800322e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f9      	bne.n	800322a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	40012300 	.word	0x40012300
 8003250:	40012000 	.word	0x40012000
 8003254:	10000012 	.word	0x10000012
 8003258:	20000004 	.word	0x20000004
 800325c:	431bde83 	.word	0x431bde83

08003260 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003268:	4b79      	ldr	r3, [pc, #484]	@ (8003450 <ADC_Init+0x1f0>)
 800326a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	431a      	orrs	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003294:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	021a      	lsls	r2, r3, #8
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80032b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6899      	ldr	r1, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f2:	4a58      	ldr	r2, [pc, #352]	@ (8003454 <ADC_Init+0x1f4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d022      	beq.n	800333e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003306:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6899      	ldr	r1, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003328:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6899      	ldr	r1, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	e00f      	b.n	800335e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800334c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800335c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0202 	bic.w	r2, r2, #2
 800336c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6899      	ldr	r1, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	7e1b      	ldrb	r3, [r3, #24]
 8003378:	005a      	lsls	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01b      	beq.n	80033c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800339a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80033aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6859      	ldr	r1, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	3b01      	subs	r3, #1
 80033b8:	035a      	lsls	r2, r3, #13
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	e007      	b.n	80033d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80033e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	051a      	lsls	r2, r3, #20
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003408:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6899      	ldr	r1, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003416:	025a      	lsls	r2, r3, #9
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800342e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6899      	ldr	r1, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	029a      	lsls	r2, r3, #10
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	609a      	str	r2, [r3, #8]
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	40012300 	.word	0x40012300
 8003454:	0f000001 	.word	0x0f000001

08003458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003468:	4b0c      	ldr	r3, [pc, #48]	@ (800349c <__NVIC_SetPriorityGrouping+0x44>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003474:	4013      	ands	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003480:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800348a:	4a04      	ldr	r2, [pc, #16]	@ (800349c <__NVIC_SetPriorityGrouping+0x44>)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	60d3      	str	r3, [r2, #12]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	e000ed00 	.word	0xe000ed00

080034a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034a4:	4b04      	ldr	r3, [pc, #16]	@ (80034b8 <__NVIC_GetPriorityGrouping+0x18>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	0a1b      	lsrs	r3, r3, #8
 80034aa:	f003 0307 	and.w	r3, r3, #7
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	db0b      	blt.n	80034e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	f003 021f 	and.w	r2, r3, #31
 80034d4:	4907      	ldr	r1, [pc, #28]	@ (80034f4 <__NVIC_EnableIRQ+0x38>)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	2001      	movs	r0, #1
 80034de:	fa00 f202 	lsl.w	r2, r0, r2
 80034e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	e000e100 	.word	0xe000e100

080034f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	6039      	str	r1, [r7, #0]
 8003502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003508:	2b00      	cmp	r3, #0
 800350a:	db0a      	blt.n	8003522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	b2da      	uxtb	r2, r3
 8003510:	490c      	ldr	r1, [pc, #48]	@ (8003544 <__NVIC_SetPriority+0x4c>)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	0112      	lsls	r2, r2, #4
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	440b      	add	r3, r1
 800351c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003520:	e00a      	b.n	8003538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	b2da      	uxtb	r2, r3
 8003526:	4908      	ldr	r1, [pc, #32]	@ (8003548 <__NVIC_SetPriority+0x50>)
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	3b04      	subs	r3, #4
 8003530:	0112      	lsls	r2, r2, #4
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	440b      	add	r3, r1
 8003536:	761a      	strb	r2, [r3, #24]
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	e000e100 	.word	0xe000e100
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800354c:	b480      	push	{r7}
 800354e:	b089      	sub	sp, #36	@ 0x24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f1c3 0307 	rsb	r3, r3, #7
 8003566:	2b04      	cmp	r3, #4
 8003568:	bf28      	it	cs
 800356a:	2304      	movcs	r3, #4
 800356c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3304      	adds	r3, #4
 8003572:	2b06      	cmp	r3, #6
 8003574:	d902      	bls.n	800357c <NVIC_EncodePriority+0x30>
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3b03      	subs	r3, #3
 800357a:	e000      	b.n	800357e <NVIC_EncodePriority+0x32>
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003580:	f04f 32ff 	mov.w	r2, #4294967295
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43da      	mvns	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	401a      	ands	r2, r3
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003594:	f04f 31ff 	mov.w	r1, #4294967295
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	fa01 f303 	lsl.w	r3, r1, r3
 800359e:	43d9      	mvns	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a4:	4313      	orrs	r3, r2
         );
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3724      	adds	r7, #36	@ 0x24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3b01      	subs	r3, #1
 80035c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035c4:	d301      	bcc.n	80035ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035c6:	2301      	movs	r3, #1
 80035c8:	e00f      	b.n	80035ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ca:	4a0a      	ldr	r2, [pc, #40]	@ (80035f4 <SysTick_Config+0x40>)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035d2:	210f      	movs	r1, #15
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295
 80035d8:	f7ff ff8e 	bl	80034f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035dc:	4b05      	ldr	r3, [pc, #20]	@ (80035f4 <SysTick_Config+0x40>)
 80035de:	2200      	movs	r2, #0
 80035e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035e2:	4b04      	ldr	r3, [pc, #16]	@ (80035f4 <SysTick_Config+0x40>)
 80035e4:	2207      	movs	r2, #7
 80035e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	e000e010 	.word	0xe000e010

080035f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff ff29 	bl	8003458 <__NVIC_SetPriorityGrouping>
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800360e:	b580      	push	{r7, lr}
 8003610:	b086      	sub	sp, #24
 8003612:	af00      	add	r7, sp, #0
 8003614:	4603      	mov	r3, r0
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
 800361a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003620:	f7ff ff3e 	bl	80034a0 <__NVIC_GetPriorityGrouping>
 8003624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	6978      	ldr	r0, [r7, #20]
 800362c:	f7ff ff8e 	bl	800354c <NVIC_EncodePriority>
 8003630:	4602      	mov	r2, r0
 8003632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003636:	4611      	mov	r1, r2
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff5d 	bl	80034f8 <__NVIC_SetPriority>
}
 800363e:	bf00      	nop
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	4603      	mov	r3, r0
 800364e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ff31 	bl	80034bc <__NVIC_EnableIRQ>
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff ffa2 	bl	80035b4 <SysTick_Config>
 8003670:	4603      	mov	r3, r0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003686:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003688:	f7ff faf8 	bl	8002c7c <HAL_GetTick>
 800368c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d008      	beq.n	80036ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2280      	movs	r2, #128	@ 0x80
 800369e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e052      	b.n	8003752 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0216 	bic.w	r2, r2, #22
 80036ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d103      	bne.n	80036dc <HAL_DMA_Abort+0x62>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d007      	beq.n	80036ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0208 	bic.w	r2, r2, #8
 80036ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036fc:	e013      	b.n	8003726 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036fe:	f7ff fabd 	bl	8002c7c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b05      	cmp	r3, #5
 800370a:	d90c      	bls.n	8003726 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2203      	movs	r2, #3
 8003716:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e015      	b.n	8003752 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e4      	bne.n	80036fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003738:	223f      	movs	r2, #63	@ 0x3f
 800373a:	409a      	lsls	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d004      	beq.n	8003778 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2280      	movs	r2, #128	@ 0x80
 8003772:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e00c      	b.n	8003792 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2205      	movs	r2, #5
 800377c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b089      	sub	sp, #36	@ 0x24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	e159      	b.n	8003a70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037bc:	2201      	movs	r2, #1
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4013      	ands	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	f040 8148 	bne.w	8003a6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d005      	beq.n	80037f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d130      	bne.n	8003854 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	2203      	movs	r2, #3
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003828:	2201      	movs	r2, #1
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4013      	ands	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	f003 0201 	and.w	r2, r3, #1
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2b03      	cmp	r3, #3
 800385e:	d017      	beq.n	8003890 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	2203      	movs	r2, #3
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d123      	bne.n	80038e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	08da      	lsrs	r2, r3, #3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3208      	adds	r2, #8
 80038a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	220f      	movs	r2, #15
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	08da      	lsrs	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3208      	adds	r2, #8
 80038de:	69b9      	ldr	r1, [r7, #24]
 80038e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	2203      	movs	r2, #3
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0203 	and.w	r2, r3, #3
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80a2 	beq.w	8003a6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	4b57      	ldr	r3, [pc, #348]	@ (8003a88 <HAL_GPIO_Init+0x2e8>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392e:	4a56      	ldr	r2, [pc, #344]	@ (8003a88 <HAL_GPIO_Init+0x2e8>)
 8003930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003934:	6453      	str	r3, [r2, #68]	@ 0x44
 8003936:	4b54      	ldr	r3, [pc, #336]	@ (8003a88 <HAL_GPIO_Init+0x2e8>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003942:	4a52      	ldr	r2, [pc, #328]	@ (8003a8c <HAL_GPIO_Init+0x2ec>)
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	3302      	adds	r3, #2
 800394a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	220f      	movs	r2, #15
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a49      	ldr	r2, [pc, #292]	@ (8003a90 <HAL_GPIO_Init+0x2f0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d019      	beq.n	80039a2 <HAL_GPIO_Init+0x202>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a48      	ldr	r2, [pc, #288]	@ (8003a94 <HAL_GPIO_Init+0x2f4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d013      	beq.n	800399e <HAL_GPIO_Init+0x1fe>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a47      	ldr	r2, [pc, #284]	@ (8003a98 <HAL_GPIO_Init+0x2f8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00d      	beq.n	800399a <HAL_GPIO_Init+0x1fa>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a46      	ldr	r2, [pc, #280]	@ (8003a9c <HAL_GPIO_Init+0x2fc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d007      	beq.n	8003996 <HAL_GPIO_Init+0x1f6>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a45      	ldr	r2, [pc, #276]	@ (8003aa0 <HAL_GPIO_Init+0x300>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d101      	bne.n	8003992 <HAL_GPIO_Init+0x1f2>
 800398e:	2304      	movs	r3, #4
 8003990:	e008      	b.n	80039a4 <HAL_GPIO_Init+0x204>
 8003992:	2307      	movs	r3, #7
 8003994:	e006      	b.n	80039a4 <HAL_GPIO_Init+0x204>
 8003996:	2303      	movs	r3, #3
 8003998:	e004      	b.n	80039a4 <HAL_GPIO_Init+0x204>
 800399a:	2302      	movs	r3, #2
 800399c:	e002      	b.n	80039a4 <HAL_GPIO_Init+0x204>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <HAL_GPIO_Init+0x204>
 80039a2:	2300      	movs	r3, #0
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	f002 0203 	and.w	r2, r2, #3
 80039aa:	0092      	lsls	r2, r2, #2
 80039ac:	4093      	lsls	r3, r2
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039b4:	4935      	ldr	r1, [pc, #212]	@ (8003a8c <HAL_GPIO_Init+0x2ec>)
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	089b      	lsrs	r3, r3, #2
 80039ba:	3302      	adds	r3, #2
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039c2:	4b38      	ldr	r3, [pc, #224]	@ (8003aa4 <HAL_GPIO_Init+0x304>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	43db      	mvns	r3, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4013      	ands	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039e6:	4a2f      	ldr	r2, [pc, #188]	@ (8003aa4 <HAL_GPIO_Init+0x304>)
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039ec:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa4 <HAL_GPIO_Init+0x304>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a10:	4a24      	ldr	r2, [pc, #144]	@ (8003aa4 <HAL_GPIO_Init+0x304>)
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a16:	4b23      	ldr	r3, [pc, #140]	@ (8003aa4 <HAL_GPIO_Init+0x304>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4013      	ands	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa4 <HAL_GPIO_Init+0x304>)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a40:	4b18      	ldr	r3, [pc, #96]	@ (8003aa4 <HAL_GPIO_Init+0x304>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a64:	4a0f      	ldr	r2, [pc, #60]	@ (8003aa4 <HAL_GPIO_Init+0x304>)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	61fb      	str	r3, [r7, #28]
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b0f      	cmp	r3, #15
 8003a74:	f67f aea2 	bls.w	80037bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a78:	bf00      	nop
 8003a7a:	bf00      	nop
 8003a7c:	3724      	adds	r7, #36	@ 0x24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40013800 	.word	0x40013800
 8003a90:	40020000 	.word	0x40020000
 8003a94:	40020400 	.word	0x40020400
 8003a98:	40020800 	.word	0x40020800
 8003a9c:	40020c00 	.word	0x40020c00
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40013c00 	.word	0x40013c00

08003aa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	887b      	ldrh	r3, [r7, #2]
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
 8003ac4:	e001      	b.n	8003aca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	807b      	strh	r3, [r7, #2]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ae8:	787b      	ldrb	r3, [r7, #1]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aee:	887a      	ldrh	r2, [r7, #2]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003af4:	e003      	b.n	8003afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003af6:	887b      	ldrh	r3, [r7, #2]
 8003af8:	041a      	lsls	r2, r3, #16
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	619a      	str	r2, [r3, #24]
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b16:	4b08      	ldr	r3, [pc, #32]	@ (8003b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d006      	beq.n	8003b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b22:	4a05      	ldr	r2, [pc, #20]	@ (8003b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b24:	88fb      	ldrh	r3, [r7, #6]
 8003b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b28:	88fb      	ldrh	r3, [r7, #6]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 f806 	bl	8003b3c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40013c00 	.word	0x40013c00

08003b3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
	...

08003b54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e267      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d075      	beq.n	8003c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b72:	4b88      	ldr	r3, [pc, #544]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 030c 	and.w	r3, r3, #12
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d00c      	beq.n	8003b98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b7e:	4b85      	ldr	r3, [pc, #532]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d112      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b8a:	4b82      	ldr	r3, [pc, #520]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b96:	d10b      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b98:	4b7e      	ldr	r3, [pc, #504]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d05b      	beq.n	8003c5c <HAL_RCC_OscConfig+0x108>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d157      	bne.n	8003c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e242      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb8:	d106      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x74>
 8003bba:	4b76      	ldr	r3, [pc, #472]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a75      	ldr	r2, [pc, #468]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e01d      	b.n	8003c04 <HAL_RCC_OscConfig+0xb0>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCC_OscConfig+0x98>
 8003bd2:	4b70      	ldr	r3, [pc, #448]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a6f      	ldr	r2, [pc, #444]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	4b6d      	ldr	r3, [pc, #436]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a6c      	ldr	r2, [pc, #432]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e00b      	b.n	8003c04 <HAL_RCC_OscConfig+0xb0>
 8003bec:	4b69      	ldr	r3, [pc, #420]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a68      	ldr	r2, [pc, #416]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	4b66      	ldr	r3, [pc, #408]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a65      	ldr	r2, [pc, #404]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d013      	beq.n	8003c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7ff f836 	bl	8002c7c <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c14:	f7ff f832 	bl	8002c7c <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b64      	cmp	r3, #100	@ 0x64
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e207      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c26:	4b5b      	ldr	r3, [pc, #364]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0xc0>
 8003c32:	e014      	b.n	8003c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7ff f822 	bl	8002c7c <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7ff f81e 	bl	8002c7c <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	@ 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e1f3      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c4e:	4b51      	ldr	r3, [pc, #324]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0xe8>
 8003c5a:	e000      	b.n	8003c5e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d063      	beq.n	8003d32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c76:	4b47      	ldr	r3, [pc, #284]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d11c      	bne.n	8003cbc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c82:	4b44      	ldr	r3, [pc, #272]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d116      	bne.n	8003cbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8e:	4b41      	ldr	r3, [pc, #260]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d005      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x152>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d001      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e1c7      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca6:	4b3b      	ldr	r3, [pc, #236]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4937      	ldr	r1, [pc, #220]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cba:	e03a      	b.n	8003d32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d020      	beq.n	8003d06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cc4:	4b34      	ldr	r3, [pc, #208]	@ (8003d98 <HAL_RCC_OscConfig+0x244>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fe ffd7 	bl	8002c7c <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd2:	f7fe ffd3 	bl	8002c7c <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e1a8      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf0:	4b28      	ldr	r3, [pc, #160]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4925      	ldr	r1, [pc, #148]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	600b      	str	r3, [r1, #0]
 8003d04:	e015      	b.n	8003d32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d06:	4b24      	ldr	r3, [pc, #144]	@ (8003d98 <HAL_RCC_OscConfig+0x244>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fe ffb6 	bl	8002c7c <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d14:	f7fe ffb2 	bl	8002c7c <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e187      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d26:	4b1b      	ldr	r3, [pc, #108]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d036      	beq.n	8003dac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d016      	beq.n	8003d74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d46:	4b15      	ldr	r3, [pc, #84]	@ (8003d9c <HAL_RCC_OscConfig+0x248>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4c:	f7fe ff96 	bl	8002c7c <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d54:	f7fe ff92 	bl	8002c7c <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e167      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d66:	4b0b      	ldr	r3, [pc, #44]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x200>
 8003d72:	e01b      	b.n	8003dac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d74:	4b09      	ldr	r3, [pc, #36]	@ (8003d9c <HAL_RCC_OscConfig+0x248>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7a:	f7fe ff7f 	bl	8002c7c <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d80:	e00e      	b.n	8003da0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d82:	f7fe ff7b 	bl	8002c7c <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d907      	bls.n	8003da0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e150      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
 8003d94:	40023800 	.word	0x40023800
 8003d98:	42470000 	.word	0x42470000
 8003d9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da0:	4b88      	ldr	r3, [pc, #544]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003da2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1ea      	bne.n	8003d82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8097 	beq.w	8003ee8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dbe:	4b81      	ldr	r3, [pc, #516]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	4b7d      	ldr	r3, [pc, #500]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	4a7c      	ldr	r2, [pc, #496]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dda:	4b7a      	ldr	r3, [pc, #488]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de6:	2301      	movs	r3, #1
 8003de8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dea:	4b77      	ldr	r3, [pc, #476]	@ (8003fc8 <HAL_RCC_OscConfig+0x474>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d118      	bne.n	8003e28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003df6:	4b74      	ldr	r3, [pc, #464]	@ (8003fc8 <HAL_RCC_OscConfig+0x474>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a73      	ldr	r2, [pc, #460]	@ (8003fc8 <HAL_RCC_OscConfig+0x474>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e02:	f7fe ff3b 	bl	8002c7c <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e0a:	f7fe ff37 	bl	8002c7c <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e10c      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1c:	4b6a      	ldr	r3, [pc, #424]	@ (8003fc8 <HAL_RCC_OscConfig+0x474>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0f0      	beq.n	8003e0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d106      	bne.n	8003e3e <HAL_RCC_OscConfig+0x2ea>
 8003e30:	4b64      	ldr	r3, [pc, #400]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e34:	4a63      	ldr	r2, [pc, #396]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e3c:	e01c      	b.n	8003e78 <HAL_RCC_OscConfig+0x324>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b05      	cmp	r3, #5
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCC_OscConfig+0x30c>
 8003e46:	4b5f      	ldr	r3, [pc, #380]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4a:	4a5e      	ldr	r2, [pc, #376]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	f043 0304 	orr.w	r3, r3, #4
 8003e50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e52:	4b5c      	ldr	r3, [pc, #368]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e56:	4a5b      	ldr	r2, [pc, #364]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e5e:	e00b      	b.n	8003e78 <HAL_RCC_OscConfig+0x324>
 8003e60:	4b58      	ldr	r3, [pc, #352]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e64:	4a57      	ldr	r2, [pc, #348]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e66:	f023 0301 	bic.w	r3, r3, #1
 8003e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e6c:	4b55      	ldr	r3, [pc, #340]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e70:	4a54      	ldr	r2, [pc, #336]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e72:	f023 0304 	bic.w	r3, r3, #4
 8003e76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d015      	beq.n	8003eac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e80:	f7fe fefc 	bl	8002c7c <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e86:	e00a      	b.n	8003e9e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e88:	f7fe fef8 	bl	8002c7c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e0cb      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9e:	4b49      	ldr	r3, [pc, #292]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0ee      	beq.n	8003e88 <HAL_RCC_OscConfig+0x334>
 8003eaa:	e014      	b.n	8003ed6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eac:	f7fe fee6 	bl	8002c7c <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb4:	f7fe fee2 	bl	8002c7c <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e0b5      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eca:	4b3e      	ldr	r3, [pc, #248]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1ee      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d105      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003edc:	4b39      	ldr	r3, [pc, #228]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	4a38      	ldr	r2, [pc, #224]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ee6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 80a1 	beq.w	8004034 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ef2:	4b34      	ldr	r3, [pc, #208]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d05c      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d141      	bne.n	8003f8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f06:	4b31      	ldr	r3, [pc, #196]	@ (8003fcc <HAL_RCC_OscConfig+0x478>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0c:	f7fe feb6 	bl	8002c7c <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fe feb2 	bl	8002c7c <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e087      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f26:	4b27      	ldr	r3, [pc, #156]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69da      	ldr	r2, [r3, #28]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f40:	019b      	lsls	r3, r3, #6
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	041b      	lsls	r3, r3, #16
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f54:	061b      	lsls	r3, r3, #24
 8003f56:	491b      	ldr	r1, [pc, #108]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fcc <HAL_RCC_OscConfig+0x478>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f62:	f7fe fe8b 	bl	8002c7c <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6a:	f7fe fe87 	bl	8002c7c <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e05c      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7c:	4b11      	ldr	r3, [pc, #68]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x416>
 8003f88:	e054      	b.n	8004034 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8a:	4b10      	ldr	r3, [pc, #64]	@ (8003fcc <HAL_RCC_OscConfig+0x478>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7fe fe74 	bl	8002c7c <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fe fe70 	bl	8002c7c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e045      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003faa:	4b06      	ldr	r3, [pc, #24]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x444>
 8003fb6:	e03d      	b.n	8004034 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d107      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e038      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40007000 	.word	0x40007000
 8003fcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004040 <HAL_RCC_OscConfig+0x4ec>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d028      	beq.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d121      	bne.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d11a      	bne.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004000:	4013      	ands	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004006:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004008:	4293      	cmp	r3, r2
 800400a:	d111      	bne.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	3b01      	subs	r3, #1
 800401a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800401c:	429a      	cmp	r2, r3
 800401e:	d107      	bne.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800402c:	429a      	cmp	r2, r3
 800402e:	d001      	beq.n	8004034 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40023800 	.word	0x40023800

08004044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e0cc      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004058:	4b68      	ldr	r3, [pc, #416]	@ (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d90c      	bls.n	8004080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004066:	4b65      	ldr	r3, [pc, #404]	@ (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800406e:	4b63      	ldr	r3, [pc, #396]	@ (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d001      	beq.n	8004080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0b8      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d020      	beq.n	80040ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004098:	4b59      	ldr	r3, [pc, #356]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4a58      	ldr	r2, [pc, #352]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040b0:	4b53      	ldr	r3, [pc, #332]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4a52      	ldr	r2, [pc, #328]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040bc:	4b50      	ldr	r3, [pc, #320]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	494d      	ldr	r1, [pc, #308]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d044      	beq.n	8004164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d107      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e2:	4b47      	ldr	r3, [pc, #284]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d119      	bne.n	8004122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e07f      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d003      	beq.n	8004102 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d107      	bne.n	8004112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004102:	4b3f      	ldr	r3, [pc, #252]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e06f      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004112:	4b3b      	ldr	r3, [pc, #236]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e067      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004122:	4b37      	ldr	r3, [pc, #220]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f023 0203 	bic.w	r2, r3, #3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4934      	ldr	r1, [pc, #208]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	4313      	orrs	r3, r2
 8004132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004134:	f7fe fda2 	bl	8002c7c <HAL_GetTick>
 8004138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413a:	e00a      	b.n	8004152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800413c:	f7fe fd9e 	bl	8002c7c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e04f      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004152:	4b2b      	ldr	r3, [pc, #172]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 020c 	and.w	r2, r3, #12
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	429a      	cmp	r2, r3
 8004162:	d1eb      	bne.n	800413c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004164:	4b25      	ldr	r3, [pc, #148]	@ (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d20c      	bcs.n	800418c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004172:	4b22      	ldr	r3, [pc, #136]	@ (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800417a:	4b20      	ldr	r3, [pc, #128]	@ (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d001      	beq.n	800418c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e032      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004198:	4b19      	ldr	r3, [pc, #100]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4916      	ldr	r1, [pc, #88]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041b6:	4b12      	ldr	r3, [pc, #72]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	490e      	ldr	r1, [pc, #56]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041ca:	f000 f821 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 80041ce:	4602      	mov	r2, r0
 80041d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	490a      	ldr	r1, [pc, #40]	@ (8004204 <HAL_RCC_ClockConfig+0x1c0>)
 80041dc:	5ccb      	ldrb	r3, [r1, r3]
 80041de:	fa22 f303 	lsr.w	r3, r2, r3
 80041e2:	4a09      	ldr	r2, [pc, #36]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 80041e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80041e6:	4b09      	ldr	r3, [pc, #36]	@ (800420c <HAL_RCC_ClockConfig+0x1c8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fe fd02 	bl	8002bf4 <HAL_InitTick>

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40023c00 	.word	0x40023c00
 8004200:	40023800 	.word	0x40023800
 8004204:	08008d4c 	.word	0x08008d4c
 8004208:	20000004 	.word	0x20000004
 800420c:	20000008 	.word	0x20000008

08004210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004214:	b094      	sub	sp, #80	@ 0x50
 8004216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004228:	4b79      	ldr	r3, [pc, #484]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b08      	cmp	r3, #8
 8004232:	d00d      	beq.n	8004250 <HAL_RCC_GetSysClockFreq+0x40>
 8004234:	2b08      	cmp	r3, #8
 8004236:	f200 80e1 	bhi.w	80043fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_RCC_GetSysClockFreq+0x34>
 800423e:	2b04      	cmp	r3, #4
 8004240:	d003      	beq.n	800424a <HAL_RCC_GetSysClockFreq+0x3a>
 8004242:	e0db      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004244:	4b73      	ldr	r3, [pc, #460]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x204>)
 8004246:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004248:	e0db      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800424a:	4b73      	ldr	r3, [pc, #460]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x208>)
 800424c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800424e:	e0d8      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004250:	4b6f      	ldr	r3, [pc, #444]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004258:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800425a:	4b6d      	ldr	r3, [pc, #436]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d063      	beq.n	800432e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004266:	4b6a      	ldr	r3, [pc, #424]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	099b      	lsrs	r3, r3, #6
 800426c:	2200      	movs	r2, #0
 800426e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004270:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004278:	633b      	str	r3, [r7, #48]	@ 0x30
 800427a:	2300      	movs	r3, #0
 800427c:	637b      	str	r3, [r7, #52]	@ 0x34
 800427e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004282:	4622      	mov	r2, r4
 8004284:	462b      	mov	r3, r5
 8004286:	f04f 0000 	mov.w	r0, #0
 800428a:	f04f 0100 	mov.w	r1, #0
 800428e:	0159      	lsls	r1, r3, #5
 8004290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004294:	0150      	lsls	r0, r2, #5
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4621      	mov	r1, r4
 800429c:	1a51      	subs	r1, r2, r1
 800429e:	6139      	str	r1, [r7, #16]
 80042a0:	4629      	mov	r1, r5
 80042a2:	eb63 0301 	sbc.w	r3, r3, r1
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042b4:	4659      	mov	r1, fp
 80042b6:	018b      	lsls	r3, r1, #6
 80042b8:	4651      	mov	r1, sl
 80042ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042be:	4651      	mov	r1, sl
 80042c0:	018a      	lsls	r2, r1, #6
 80042c2:	4651      	mov	r1, sl
 80042c4:	ebb2 0801 	subs.w	r8, r2, r1
 80042c8:	4659      	mov	r1, fp
 80042ca:	eb63 0901 	sbc.w	r9, r3, r1
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042e2:	4690      	mov	r8, r2
 80042e4:	4699      	mov	r9, r3
 80042e6:	4623      	mov	r3, r4
 80042e8:	eb18 0303 	adds.w	r3, r8, r3
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	462b      	mov	r3, r5
 80042f0:	eb49 0303 	adc.w	r3, r9, r3
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004302:	4629      	mov	r1, r5
 8004304:	024b      	lsls	r3, r1, #9
 8004306:	4621      	mov	r1, r4
 8004308:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800430c:	4621      	mov	r1, r4
 800430e:	024a      	lsls	r2, r1, #9
 8004310:	4610      	mov	r0, r2
 8004312:	4619      	mov	r1, r3
 8004314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004316:	2200      	movs	r2, #0
 8004318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800431a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800431c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004320:	f7fc fc82 	bl	8000c28 <__aeabi_uldivmod>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4613      	mov	r3, r2
 800432a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800432c:	e058      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432e:	4b38      	ldr	r3, [pc, #224]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	099b      	lsrs	r3, r3, #6
 8004334:	2200      	movs	r2, #0
 8004336:	4618      	mov	r0, r3
 8004338:	4611      	mov	r1, r2
 800433a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800433e:	623b      	str	r3, [r7, #32]
 8004340:	2300      	movs	r3, #0
 8004342:	627b      	str	r3, [r7, #36]	@ 0x24
 8004344:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004348:	4642      	mov	r2, r8
 800434a:	464b      	mov	r3, r9
 800434c:	f04f 0000 	mov.w	r0, #0
 8004350:	f04f 0100 	mov.w	r1, #0
 8004354:	0159      	lsls	r1, r3, #5
 8004356:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800435a:	0150      	lsls	r0, r2, #5
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4641      	mov	r1, r8
 8004362:	ebb2 0a01 	subs.w	sl, r2, r1
 8004366:	4649      	mov	r1, r9
 8004368:	eb63 0b01 	sbc.w	fp, r3, r1
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004378:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800437c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004380:	ebb2 040a 	subs.w	r4, r2, sl
 8004384:	eb63 050b 	sbc.w	r5, r3, fp
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	00eb      	lsls	r3, r5, #3
 8004392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004396:	00e2      	lsls	r2, r4, #3
 8004398:	4614      	mov	r4, r2
 800439a:	461d      	mov	r5, r3
 800439c:	4643      	mov	r3, r8
 800439e:	18e3      	adds	r3, r4, r3
 80043a0:	603b      	str	r3, [r7, #0]
 80043a2:	464b      	mov	r3, r9
 80043a4:	eb45 0303 	adc.w	r3, r5, r3
 80043a8:	607b      	str	r3, [r7, #4]
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043b6:	4629      	mov	r1, r5
 80043b8:	028b      	lsls	r3, r1, #10
 80043ba:	4621      	mov	r1, r4
 80043bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043c0:	4621      	mov	r1, r4
 80043c2:	028a      	lsls	r2, r1, #10
 80043c4:	4610      	mov	r0, r2
 80043c6:	4619      	mov	r1, r3
 80043c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ca:	2200      	movs	r2, #0
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	61fa      	str	r2, [r7, #28]
 80043d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043d4:	f7fc fc28 	bl	8000c28 <__aeabi_uldivmod>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4613      	mov	r3, r2
 80043de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	3301      	adds	r3, #1
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80043f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043fa:	e002      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043fc:	4b05      	ldr	r3, [pc, #20]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x204>)
 80043fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004404:	4618      	mov	r0, r3
 8004406:	3750      	adds	r7, #80	@ 0x50
 8004408:	46bd      	mov	sp, r7
 800440a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800440e:	bf00      	nop
 8004410:	40023800 	.word	0x40023800
 8004414:	00f42400 	.word	0x00f42400
 8004418:	007a1200 	.word	0x007a1200

0800441c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004420:	4b03      	ldr	r3, [pc, #12]	@ (8004430 <HAL_RCC_GetHCLKFreq+0x14>)
 8004422:	681b      	ldr	r3, [r3, #0]
}
 8004424:	4618      	mov	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	20000004 	.word	0x20000004

08004434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004438:	f7ff fff0 	bl	800441c <HAL_RCC_GetHCLKFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	4b05      	ldr	r3, [pc, #20]	@ (8004454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	0a9b      	lsrs	r3, r3, #10
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	4903      	ldr	r1, [pc, #12]	@ (8004458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40023800 	.word	0x40023800
 8004458:	08008d5c 	.word	0x08008d5c

0800445c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004460:	f7ff ffdc 	bl	800441c <HAL_RCC_GetHCLKFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b05      	ldr	r3, [pc, #20]	@ (800447c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	0b5b      	lsrs	r3, r3, #13
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	4903      	ldr	r1, [pc, #12]	@ (8004480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40023800 	.word	0x40023800
 8004480:	08008d5c 	.word	0x08008d5c

08004484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e041      	b.n	800451a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fe f8a6 	bl	80025fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3304      	adds	r3, #4
 80044c0:	4619      	mov	r1, r3
 80044c2:	4610      	mov	r0, r2
 80044c4:	f000 fbd8 	bl	8004c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e041      	b.n	80045b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d106      	bne.n	800454e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f839 	bl	80045c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3304      	adds	r3, #4
 800455e:	4619      	mov	r1, r3
 8004560:	4610      	mov	r0, r2
 8004562:	f000 fb89 	bl	8004c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d109      	bne.n	80045f8 <HAL_TIM_PWM_Start+0x24>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	bf14      	ite	ne
 80045f0:	2301      	movne	r3, #1
 80045f2:	2300      	moveq	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	e022      	b.n	800463e <HAL_TIM_PWM_Start+0x6a>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d109      	bne.n	8004612 <HAL_TIM_PWM_Start+0x3e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b01      	cmp	r3, #1
 8004608:	bf14      	ite	ne
 800460a:	2301      	movne	r3, #1
 800460c:	2300      	moveq	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	e015      	b.n	800463e <HAL_TIM_PWM_Start+0x6a>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b08      	cmp	r3, #8
 8004616:	d109      	bne.n	800462c <HAL_TIM_PWM_Start+0x58>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b01      	cmp	r3, #1
 8004622:	bf14      	ite	ne
 8004624:	2301      	movne	r3, #1
 8004626:	2300      	moveq	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	e008      	b.n	800463e <HAL_TIM_PWM_Start+0x6a>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	bf14      	ite	ne
 8004638:	2301      	movne	r3, #1
 800463a:	2300      	moveq	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e068      	b.n	8004718 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d104      	bne.n	8004656 <HAL_TIM_PWM_Start+0x82>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004654:	e013      	b.n	800467e <HAL_TIM_PWM_Start+0xaa>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b04      	cmp	r3, #4
 800465a:	d104      	bne.n	8004666 <HAL_TIM_PWM_Start+0x92>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004664:	e00b      	b.n	800467e <HAL_TIM_PWM_Start+0xaa>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d104      	bne.n	8004676 <HAL_TIM_PWM_Start+0xa2>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004674:	e003      	b.n	800467e <HAL_TIM_PWM_Start+0xaa>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2202      	movs	r2, #2
 800467a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2201      	movs	r2, #1
 8004684:	6839      	ldr	r1, [r7, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fda2 	bl	80051d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a23      	ldr	r2, [pc, #140]	@ (8004720 <HAL_TIM_PWM_Start+0x14c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d107      	bne.n	80046a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004720 <HAL_TIM_PWM_Start+0x14c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d018      	beq.n	80046e2 <HAL_TIM_PWM_Start+0x10e>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b8:	d013      	beq.n	80046e2 <HAL_TIM_PWM_Start+0x10e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a19      	ldr	r2, [pc, #100]	@ (8004724 <HAL_TIM_PWM_Start+0x150>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00e      	beq.n	80046e2 <HAL_TIM_PWM_Start+0x10e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a17      	ldr	r2, [pc, #92]	@ (8004728 <HAL_TIM_PWM_Start+0x154>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d009      	beq.n	80046e2 <HAL_TIM_PWM_Start+0x10e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a16      	ldr	r2, [pc, #88]	@ (800472c <HAL_TIM_PWM_Start+0x158>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d004      	beq.n	80046e2 <HAL_TIM_PWM_Start+0x10e>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a14      	ldr	r2, [pc, #80]	@ (8004730 <HAL_TIM_PWM_Start+0x15c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d111      	bne.n	8004706 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b06      	cmp	r3, #6
 80046f2:	d010      	beq.n	8004716 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004704:	e007      	b.n	8004716 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0201 	orr.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40010000 	.word	0x40010000
 8004724:	40000400 	.word	0x40000400
 8004728:	40000800 	.word	0x40000800
 800472c:	40000c00 	.word	0x40000c00
 8004730:	40014000 	.word	0x40014000

08004734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d020      	beq.n	8004798 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01b      	beq.n	8004798 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0202 	mvn.w	r2, #2
 8004768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fa5b 	bl	8004c3a <HAL_TIM_IC_CaptureCallback>
 8004784:	e005      	b.n	8004792 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fa4d 	bl	8004c26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fa5e 	bl	8004c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d020      	beq.n	80047e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d01b      	beq.n	80047e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f06f 0204 	mvn.w	r2, #4
 80047b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2202      	movs	r2, #2
 80047ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fa35 	bl	8004c3a <HAL_TIM_IC_CaptureCallback>
 80047d0:	e005      	b.n	80047de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fa27 	bl	8004c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fa38 	bl	8004c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d020      	beq.n	8004830 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01b      	beq.n	8004830 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0208 	mvn.w	r2, #8
 8004800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2204      	movs	r2, #4
 8004806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fa0f 	bl	8004c3a <HAL_TIM_IC_CaptureCallback>
 800481c:	e005      	b.n	800482a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa01 	bl	8004c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fa12 	bl	8004c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	2b00      	cmp	r3, #0
 8004838:	d020      	beq.n	800487c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f003 0310 	and.w	r3, r3, #16
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01b      	beq.n	800487c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0210 	mvn.w	r2, #16
 800484c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2208      	movs	r2, #8
 8004852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f9e9 	bl	8004c3a <HAL_TIM_IC_CaptureCallback>
 8004868:	e005      	b.n	8004876 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f9db 	bl	8004c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f9ec 	bl	8004c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00c      	beq.n	80048a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0201 	mvn.w	r2, #1
 8004898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fd fce8 	bl	8002270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00c      	beq.n	80048c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d007      	beq.n	80048c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80048bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fd76 	bl	80053b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00c      	beq.n	80048e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d007      	beq.n	80048e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f9bd 	bl	8004c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00c      	beq.n	800490c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d007      	beq.n	800490c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f06f 0220 	mvn.w	r2, #32
 8004904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fd48 	bl	800539c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800492e:	2302      	movs	r3, #2
 8004930:	e0ae      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b0c      	cmp	r3, #12
 800493e:	f200 809f 	bhi.w	8004a80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004942:	a201      	add	r2, pc, #4	@ (adr r2, 8004948 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004948:	0800497d 	.word	0x0800497d
 800494c:	08004a81 	.word	0x08004a81
 8004950:	08004a81 	.word	0x08004a81
 8004954:	08004a81 	.word	0x08004a81
 8004958:	080049bd 	.word	0x080049bd
 800495c:	08004a81 	.word	0x08004a81
 8004960:	08004a81 	.word	0x08004a81
 8004964:	08004a81 	.word	0x08004a81
 8004968:	080049ff 	.word	0x080049ff
 800496c:	08004a81 	.word	0x08004a81
 8004970:	08004a81 	.word	0x08004a81
 8004974:	08004a81 	.word	0x08004a81
 8004978:	08004a3f 	.word	0x08004a3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	4618      	mov	r0, r3
 8004984:	f000 f9fe 	bl	8004d84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0208 	orr.w	r2, r2, #8
 8004996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0204 	bic.w	r2, r2, #4
 80049a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6999      	ldr	r1, [r3, #24]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	691a      	ldr	r2, [r3, #16]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	619a      	str	r2, [r3, #24]
      break;
 80049ba:	e064      	b.n	8004a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fa44 	bl	8004e50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6999      	ldr	r1, [r3, #24]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	021a      	lsls	r2, r3, #8
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	619a      	str	r2, [r3, #24]
      break;
 80049fc:	e043      	b.n	8004a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68b9      	ldr	r1, [r7, #8]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fa8f 	bl	8004f28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69da      	ldr	r2, [r3, #28]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0208 	orr.w	r2, r2, #8
 8004a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	69da      	ldr	r2, [r3, #28]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0204 	bic.w	r2, r2, #4
 8004a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	69d9      	ldr	r1, [r3, #28]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	61da      	str	r2, [r3, #28]
      break;
 8004a3c:	e023      	b.n	8004a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fad9 	bl	8004ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69da      	ldr	r2, [r3, #28]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69d9      	ldr	r1, [r3, #28]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	021a      	lsls	r2, r3, #8
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	61da      	str	r2, [r3, #28]
      break;
 8004a7e:	e002      	b.n	8004a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	75fb      	strb	r3, [r7, #23]
      break;
 8004a84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e0b4      	b.n	8004c1e <HAL_TIM_ConfigClockSource+0x186>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aec:	d03e      	beq.n	8004b6c <HAL_TIM_ConfigClockSource+0xd4>
 8004aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004af2:	f200 8087 	bhi.w	8004c04 <HAL_TIM_ConfigClockSource+0x16c>
 8004af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004afa:	f000 8086 	beq.w	8004c0a <HAL_TIM_ConfigClockSource+0x172>
 8004afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b02:	d87f      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x16c>
 8004b04:	2b70      	cmp	r3, #112	@ 0x70
 8004b06:	d01a      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0xa6>
 8004b08:	2b70      	cmp	r3, #112	@ 0x70
 8004b0a:	d87b      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x16c>
 8004b0c:	2b60      	cmp	r3, #96	@ 0x60
 8004b0e:	d050      	beq.n	8004bb2 <HAL_TIM_ConfigClockSource+0x11a>
 8004b10:	2b60      	cmp	r3, #96	@ 0x60
 8004b12:	d877      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x16c>
 8004b14:	2b50      	cmp	r3, #80	@ 0x50
 8004b16:	d03c      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0xfa>
 8004b18:	2b50      	cmp	r3, #80	@ 0x50
 8004b1a:	d873      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x16c>
 8004b1c:	2b40      	cmp	r3, #64	@ 0x40
 8004b1e:	d058      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0x13a>
 8004b20:	2b40      	cmp	r3, #64	@ 0x40
 8004b22:	d86f      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x16c>
 8004b24:	2b30      	cmp	r3, #48	@ 0x30
 8004b26:	d064      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8004b28:	2b30      	cmp	r3, #48	@ 0x30
 8004b2a:	d86b      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x16c>
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d060      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d867      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x16c>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d05c      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d05a      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8004b3c:	e062      	b.n	8004c04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b4e:	f000 fb1f 	bl	8005190 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	609a      	str	r2, [r3, #8]
      break;
 8004b6a:	e04f      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b7c:	f000 fb08 	bl	8005190 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b8e:	609a      	str	r2, [r3, #8]
      break;
 8004b90:	e03c      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f000 fa7c 	bl	800509c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2150      	movs	r1, #80	@ 0x50
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 fad5 	bl	800515a <TIM_ITRx_SetConfig>
      break;
 8004bb0:	e02c      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f000 fa9b 	bl	80050fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2160      	movs	r1, #96	@ 0x60
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fac5 	bl	800515a <TIM_ITRx_SetConfig>
      break;
 8004bd0:	e01c      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bde:	461a      	mov	r2, r3
 8004be0:	f000 fa5c 	bl	800509c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2140      	movs	r1, #64	@ 0x40
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fab5 	bl	800515a <TIM_ITRx_SetConfig>
      break;
 8004bf0:	e00c      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	f000 faac 	bl	800515a <TIM_ITRx_SetConfig>
      break;
 8004c02:	e003      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
      break;
 8004c08:	e000      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
	...

08004c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a37      	ldr	r2, [pc, #220]	@ (8004d68 <TIM_Base_SetConfig+0xf0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00f      	beq.n	8004cb0 <TIM_Base_SetConfig+0x38>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c96:	d00b      	beq.n	8004cb0 <TIM_Base_SetConfig+0x38>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a34      	ldr	r2, [pc, #208]	@ (8004d6c <TIM_Base_SetConfig+0xf4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d007      	beq.n	8004cb0 <TIM_Base_SetConfig+0x38>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a33      	ldr	r2, [pc, #204]	@ (8004d70 <TIM_Base_SetConfig+0xf8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_Base_SetConfig+0x38>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a32      	ldr	r2, [pc, #200]	@ (8004d74 <TIM_Base_SetConfig+0xfc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d108      	bne.n	8004cc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a28      	ldr	r2, [pc, #160]	@ (8004d68 <TIM_Base_SetConfig+0xf0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d01b      	beq.n	8004d02 <TIM_Base_SetConfig+0x8a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cd0:	d017      	beq.n	8004d02 <TIM_Base_SetConfig+0x8a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a25      	ldr	r2, [pc, #148]	@ (8004d6c <TIM_Base_SetConfig+0xf4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d013      	beq.n	8004d02 <TIM_Base_SetConfig+0x8a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a24      	ldr	r2, [pc, #144]	@ (8004d70 <TIM_Base_SetConfig+0xf8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00f      	beq.n	8004d02 <TIM_Base_SetConfig+0x8a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a23      	ldr	r2, [pc, #140]	@ (8004d74 <TIM_Base_SetConfig+0xfc>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00b      	beq.n	8004d02 <TIM_Base_SetConfig+0x8a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a22      	ldr	r2, [pc, #136]	@ (8004d78 <TIM_Base_SetConfig+0x100>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d007      	beq.n	8004d02 <TIM_Base_SetConfig+0x8a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a21      	ldr	r2, [pc, #132]	@ (8004d7c <TIM_Base_SetConfig+0x104>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d003      	beq.n	8004d02 <TIM_Base_SetConfig+0x8a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a20      	ldr	r2, [pc, #128]	@ (8004d80 <TIM_Base_SetConfig+0x108>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d108      	bne.n	8004d14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a0c      	ldr	r2, [pc, #48]	@ (8004d68 <TIM_Base_SetConfig+0xf0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d103      	bne.n	8004d42 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f043 0204 	orr.w	r2, r3, #4
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	601a      	str	r2, [r3, #0]
}
 8004d5a:	bf00      	nop
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40010000 	.word	0x40010000
 8004d6c:	40000400 	.word	0x40000400
 8004d70:	40000800 	.word	0x40000800
 8004d74:	40000c00 	.word	0x40000c00
 8004d78:	40014000 	.word	0x40014000
 8004d7c:	40014400 	.word	0x40014400
 8004d80:	40014800 	.word	0x40014800

08004d84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	f023 0201 	bic.w	r2, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0303 	bic.w	r3, r3, #3
 8004dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f023 0302 	bic.w	r3, r3, #2
 8004dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a1c      	ldr	r2, [pc, #112]	@ (8004e4c <TIM_OC1_SetConfig+0xc8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d10c      	bne.n	8004dfa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f023 0308 	bic.w	r3, r3, #8
 8004de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f023 0304 	bic.w	r3, r3, #4
 8004df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a13      	ldr	r2, [pc, #76]	@ (8004e4c <TIM_OC1_SetConfig+0xc8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d111      	bne.n	8004e26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	621a      	str	r2, [r3, #32]
}
 8004e40:	bf00      	nop
 8004e42:	371c      	adds	r7, #28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	40010000 	.word	0x40010000

08004e50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	f023 0210 	bic.w	r2, r3, #16
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	021b      	lsls	r3, r3, #8
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f023 0320 	bic.w	r3, r3, #32
 8004e9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8004f24 <TIM_OC2_SetConfig+0xd4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d10d      	bne.n	8004ecc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a15      	ldr	r2, [pc, #84]	@ (8004f24 <TIM_OC2_SetConfig+0xd4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d113      	bne.n	8004efc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004eda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	621a      	str	r2, [r3, #32]
}
 8004f16:	bf00      	nop
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40010000 	.word	0x40010000

08004f28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0303 	bic.w	r3, r3, #3
 8004f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	021b      	lsls	r3, r3, #8
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff8 <TIM_OC3_SetConfig+0xd0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d10d      	bne.n	8004fa2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a14      	ldr	r2, [pc, #80]	@ (8004ff8 <TIM_OC3_SetConfig+0xd0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d113      	bne.n	8004fd2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	621a      	str	r2, [r3, #32]
}
 8004fec:	bf00      	nop
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	40010000 	.word	0x40010000

08004ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800502a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	031b      	lsls	r3, r3, #12
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a10      	ldr	r2, [pc, #64]	@ (8005098 <TIM_OC4_SetConfig+0x9c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d109      	bne.n	8005070 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	019b      	lsls	r3, r3, #6
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	621a      	str	r2, [r3, #32]
}
 800508a:	bf00      	nop
 800508c:	371c      	adds	r7, #28
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40010000 	.word	0x40010000

0800509c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	f023 0201 	bic.w	r2, r3, #1
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f023 030a 	bic.w	r3, r3, #10
 80050d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b087      	sub	sp, #28
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f023 0210 	bic.w	r2, r3, #16
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005124:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	031b      	lsls	r3, r3, #12
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005136:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	621a      	str	r2, [r3, #32]
}
 800514e:	bf00      	nop
 8005150:	371c      	adds	r7, #28
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800515a:	b480      	push	{r7}
 800515c:	b085      	sub	sp, #20
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005170:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	f043 0307 	orr.w	r3, r3, #7
 800517c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	609a      	str	r2, [r3, #8]
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	021a      	lsls	r2, r3, #8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	609a      	str	r2, [r3, #8]
}
 80051c4:	bf00      	nop
 80051c6:	371c      	adds	r7, #28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f003 031f 	and.w	r3, r3, #31
 80051e2:	2201      	movs	r2, #1
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a1a      	ldr	r2, [r3, #32]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	43db      	mvns	r3, r3
 80051f2:	401a      	ands	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1a      	ldr	r2, [r3, #32]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f003 031f 	and.w	r3, r3, #31
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	fa01 f303 	lsl.w	r3, r1, r3
 8005208:	431a      	orrs	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	621a      	str	r2, [r3, #32]
}
 800520e:	bf00      	nop
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
	...

0800521c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005230:	2302      	movs	r3, #2
 8005232:	e050      	b.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800525a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1c      	ldr	r2, [pc, #112]	@ (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d018      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005280:	d013      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a18      	ldr	r2, [pc, #96]	@ (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00e      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a16      	ldr	r2, [pc, #88]	@ (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d009      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a15      	ldr	r2, [pc, #84]	@ (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d004      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a13      	ldr	r2, [pc, #76]	@ (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d10c      	bne.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40010000 	.word	0x40010000
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40000c00 	.word	0x40000c00
 80052f4:	40014000 	.word	0x40014000

080052f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005302:	2300      	movs	r3, #0
 8005304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005310:	2302      	movs	r3, #2
 8005312:	e03d      	b.n	8005390 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4313      	orrs	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e042      	b.n	800545c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d106      	bne.n	80053f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fd f9ea 	bl	80027c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2224      	movs	r2, #36	@ 0x24
 80053f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005406:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fdd3 	bl	8005fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800541c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695a      	ldr	r2, [r3, #20]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800542c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800543c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08a      	sub	sp, #40	@ 0x28
 8005468:	af02      	add	r7, sp, #8
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	4613      	mov	r3, r2
 8005472:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b20      	cmp	r3, #32
 8005482:	d175      	bne.n	8005570 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_UART_Transmit+0x2c>
 800548a:	88fb      	ldrh	r3, [r7, #6]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e06e      	b.n	8005572 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2221      	movs	r2, #33	@ 0x21
 800549e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054a2:	f7fd fbeb 	bl	8002c7c <HAL_GetTick>
 80054a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	88fa      	ldrh	r2, [r7, #6]
 80054ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	88fa      	ldrh	r2, [r7, #6]
 80054b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054bc:	d108      	bne.n	80054d0 <HAL_UART_Transmit+0x6c>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d104      	bne.n	80054d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054c6:	2300      	movs	r3, #0
 80054c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	e003      	b.n	80054d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054d4:	2300      	movs	r3, #0
 80054d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054d8:	e02e      	b.n	8005538 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2200      	movs	r2, #0
 80054e2:	2180      	movs	r1, #128	@ 0x80
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 fb37 	bl	8005b58 <UART_WaitOnFlagUntilTimeout>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e03a      	b.n	8005572 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10b      	bne.n	800551a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005510:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	3302      	adds	r3, #2
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	e007      	b.n	800552a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	781a      	ldrb	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	3301      	adds	r3, #1
 8005528:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800552e:	b29b      	uxth	r3, r3
 8005530:	3b01      	subs	r3, #1
 8005532:	b29a      	uxth	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1cb      	bne.n	80054da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2200      	movs	r2, #0
 800554a:	2140      	movs	r1, #64	@ 0x40
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 fb03 	bl	8005b58 <UART_WaitOnFlagUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e006      	b.n	8005572 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	e000      	b.n	8005572 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005570:	2302      	movs	r3, #2
  }
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	4613      	mov	r3, r2
 8005586:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b20      	cmp	r3, #32
 8005592:	d112      	bne.n	80055ba <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <HAL_UART_Receive_IT+0x26>
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e00b      	b.n	80055bc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	461a      	mov	r2, r3
 80055ae:	68b9      	ldr	r1, [r7, #8]
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 fb2a 	bl	8005c0a <UART_Start_Receive_IT>
 80055b6:	4603      	mov	r3, r0
 80055b8:	e000      	b.n	80055bc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80055ba:	2302      	movs	r3, #2
  }
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b0ba      	sub	sp, #232	@ 0xe8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10f      	bne.n	800562a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800560a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <HAL_UART_IRQHandler+0x66>
 8005616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fc07 	bl	8005e36 <UART_Receive_IT>
      return;
 8005628:	e273      	b.n	8005b12 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800562a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 80de 	beq.w	80057f0 <HAL_UART_IRQHandler+0x22c>
 8005634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	d106      	bne.n	800564e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005644:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 80d1 	beq.w	80057f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800564e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00b      	beq.n	8005672 <HAL_UART_IRQHandler+0xae>
 800565a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800565e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005662:	2b00      	cmp	r3, #0
 8005664:	d005      	beq.n	8005672 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800566a:	f043 0201 	orr.w	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005676:	f003 0304 	and.w	r3, r3, #4
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00b      	beq.n	8005696 <HAL_UART_IRQHandler+0xd2>
 800567e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d005      	beq.n	8005696 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800568e:	f043 0202 	orr.w	r2, r3, #2
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00b      	beq.n	80056ba <HAL_UART_IRQHandler+0xf6>
 80056a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d005      	beq.n	80056ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b2:	f043 0204 	orr.w	r2, r3, #4
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d011      	beq.n	80056ea <HAL_UART_IRQHandler+0x126>
 80056c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d105      	bne.n	80056de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e2:	f043 0208 	orr.w	r2, r3, #8
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 820a 	beq.w	8005b08 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d008      	beq.n	8005712 <HAL_UART_IRQHandler+0x14e>
 8005700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fb92 	bl	8005e36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800571c:	2b40      	cmp	r3, #64	@ 0x40
 800571e:	bf0c      	ite	eq
 8005720:	2301      	moveq	r3, #1
 8005722:	2300      	movne	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d103      	bne.n	800573e <HAL_UART_IRQHandler+0x17a>
 8005736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800573a:	2b00      	cmp	r3, #0
 800573c:	d04f      	beq.n	80057de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fa9d 	bl	8005c7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574e:	2b40      	cmp	r3, #64	@ 0x40
 8005750:	d141      	bne.n	80057d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3314      	adds	r3, #20
 8005758:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005760:	e853 3f00 	ldrex	r3, [r3]
 8005764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005768:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800576c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005770:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3314      	adds	r3, #20
 800577a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800577e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005782:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800578a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1d9      	bne.n	8005752 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d013      	beq.n	80057ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057aa:	4a8a      	ldr	r2, [pc, #552]	@ (80059d4 <HAL_UART_IRQHandler+0x410>)
 80057ac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fd ffd1 	bl	800375a <HAL_DMA_Abort_IT>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d016      	beq.n	80057ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057c8:	4610      	mov	r0, r2
 80057ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057cc:	e00e      	b.n	80057ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f9ac 	bl	8005b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d4:	e00a      	b.n	80057ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f9a8 	bl	8005b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057dc:	e006      	b.n	80057ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f9a4 	bl	8005b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80057ea:	e18d      	b.n	8005b08 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ec:	bf00      	nop
    return;
 80057ee:	e18b      	b.n	8005b08 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	f040 8167 	bne.w	8005ac8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057fe:	f003 0310 	and.w	r3, r3, #16
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 8160 	beq.w	8005ac8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800580c:	f003 0310 	and.w	r3, r3, #16
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 8159 	beq.w	8005ac8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005816:	2300      	movs	r3, #0
 8005818:	60bb      	str	r3, [r7, #8]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60bb      	str	r3, [r7, #8]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	60bb      	str	r3, [r7, #8]
 800582a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005836:	2b40      	cmp	r3, #64	@ 0x40
 8005838:	f040 80ce 	bne.w	80059d8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005848:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 80a9 	beq.w	80059a4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800585a:	429a      	cmp	r2, r3
 800585c:	f080 80a2 	bcs.w	80059a4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005866:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005872:	f000 8088 	beq.w	8005986 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	330c      	adds	r3, #12
 800587c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800588c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005894:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	330c      	adds	r3, #12
 800589e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80058a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80058ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80058ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1d9      	bne.n	8005876 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3314      	adds	r3, #20
 80058c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058cc:	e853 3f00 	ldrex	r3, [r3]
 80058d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058d4:	f023 0301 	bic.w	r3, r3, #1
 80058d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3314      	adds	r3, #20
 80058e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80058ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80058f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1e1      	bne.n	80058c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3314      	adds	r3, #20
 8005904:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005906:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800590e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005910:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005914:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3314      	adds	r3, #20
 800591e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005922:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005924:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005928:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800592a:	e841 2300 	strex	r3, r2, [r1]
 800592e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005930:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1e3      	bne.n	80058fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330c      	adds	r3, #12
 800594a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005954:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005956:	f023 0310 	bic.w	r3, r3, #16
 800595a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	330c      	adds	r3, #12
 8005964:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005968:	65ba      	str	r2, [r7, #88]	@ 0x58
 800596a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800596e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e3      	bne.n	8005944 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005980:	4618      	mov	r0, r3
 8005982:	f7fd fe7a 	bl	800367a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2202      	movs	r2, #2
 800598a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005994:	b29b      	uxth	r3, r3
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	b29b      	uxth	r3, r3
 800599a:	4619      	mov	r1, r3
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f8cf 	bl	8005b40 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80059a2:	e0b3      	b.n	8005b0c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059ac:	429a      	cmp	r2, r3
 80059ae:	f040 80ad 	bne.w	8005b0c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059bc:	f040 80a6 	bne.w	8005b0c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f8b7 	bl	8005b40 <HAL_UARTEx_RxEventCallback>
      return;
 80059d2:	e09b      	b.n	8005b0c <HAL_UART_IRQHandler+0x548>
 80059d4:	08005d45 	.word	0x08005d45
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 808e 	beq.w	8005b10 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80059f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 8089 	beq.w	8005b10 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	330c      	adds	r3, #12
 8005a04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a08:	e853 3f00 	ldrex	r3, [r3]
 8005a0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	330c      	adds	r3, #12
 8005a1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a22:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e3      	bne.n	80059fe <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3314      	adds	r3, #20
 8005a3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	623b      	str	r3, [r7, #32]
   return(result);
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	f023 0301 	bic.w	r3, r3, #1
 8005a4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3314      	adds	r3, #20
 8005a56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e3      	bne.n	8005a36 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	330c      	adds	r3, #12
 8005a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0310 	bic.w	r3, r3, #16
 8005a92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005aa0:	61fa      	str	r2, [r7, #28]
 8005aa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	69b9      	ldr	r1, [r7, #24]
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	e841 2300 	strex	r3, r2, [r1]
 8005aac:	617b      	str	r3, [r7, #20]
   return(result);
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e3      	bne.n	8005a7c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005aba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005abe:	4619      	mov	r1, r3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f83d 	bl	8005b40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ac6:	e023      	b.n	8005b10 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d009      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x524>
 8005ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f940 	bl	8005d66 <UART_Transmit_IT>
    return;
 8005ae6:	e014      	b.n	8005b12 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00e      	beq.n	8005b12 <HAL_UART_IRQHandler+0x54e>
 8005af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d008      	beq.n	8005b12 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f980 	bl	8005e06 <UART_EndTransmit_IT>
    return;
 8005b06:	e004      	b.n	8005b12 <HAL_UART_IRQHandler+0x54e>
    return;
 8005b08:	bf00      	nop
 8005b0a:	e002      	b.n	8005b12 <HAL_UART_IRQHandler+0x54e>
      return;
 8005b0c:	bf00      	nop
 8005b0e:	e000      	b.n	8005b12 <HAL_UART_IRQHandler+0x54e>
      return;
 8005b10:	bf00      	nop
  }
}
 8005b12:	37e8      	adds	r7, #232	@ 0xe8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	603b      	str	r3, [r7, #0]
 8005b64:	4613      	mov	r3, r2
 8005b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b68:	e03b      	b.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b70:	d037      	beq.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b72:	f7fd f883 	bl	8002c7c <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	6a3a      	ldr	r2, [r7, #32]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d302      	bcc.n	8005b88 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e03a      	b.n	8005c02 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f003 0304 	and.w	r3, r3, #4
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d023      	beq.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2b80      	cmp	r3, #128	@ 0x80
 8005b9e:	d020      	beq.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b40      	cmp	r3, #64	@ 0x40
 8005ba4:	d01d      	beq.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d116      	bne.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 f857 	bl	8005c7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2208      	movs	r2, #8
 8005bd4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e00f      	b.n	8005c02 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4013      	ands	r3, r2
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	bf0c      	ite	eq
 8005bf2:	2301      	moveq	r3, #1
 8005bf4:	2300      	movne	r3, #0
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	79fb      	ldrb	r3, [r7, #7]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d0b4      	beq.n	8005b6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b085      	sub	sp, #20
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	60f8      	str	r0, [r7, #12]
 8005c12:	60b9      	str	r1, [r7, #8]
 8005c14:	4613      	mov	r3, r2
 8005c16:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	88fa      	ldrh	r2, [r7, #6]
 8005c22:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	88fa      	ldrh	r2, [r7, #6]
 8005c28:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2222      	movs	r2, #34	@ 0x22
 8005c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d007      	beq.n	8005c50 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c4e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695a      	ldr	r2, [r3, #20]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0220 	orr.w	r2, r2, #32
 8005c6e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b095      	sub	sp, #84	@ 0x54
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	330c      	adds	r3, #12
 8005c8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	330c      	adds	r3, #12
 8005ca4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ca6:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e5      	bne.n	8005c86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3314      	adds	r3, #20
 8005cc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	f023 0301 	bic.w	r3, r3, #1
 8005cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3314      	adds	r3, #20
 8005cd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ce0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e5      	bne.n	8005cba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d119      	bne.n	8005d2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	330c      	adds	r3, #12
 8005cfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f023 0310 	bic.w	r3, r3, #16
 8005d0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	330c      	adds	r3, #12
 8005d14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d16:	61ba      	str	r2, [r7, #24]
 8005d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	6979      	ldr	r1, [r7, #20]
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	613b      	str	r3, [r7, #16]
   return(result);
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e5      	bne.n	8005cf6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d38:	bf00      	nop
 8005d3a:	3754      	adds	r7, #84	@ 0x54
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f7ff fee7 	bl	8005b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b21      	cmp	r3, #33	@ 0x21
 8005d78:	d13e      	bne.n	8005df8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d82:	d114      	bne.n	8005dae <UART_Transmit_IT+0x48>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d110      	bne.n	8005dae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005da0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	1c9a      	adds	r2, r3, #2
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	621a      	str	r2, [r3, #32]
 8005dac:	e008      	b.n	8005dc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	1c59      	adds	r1, r3, #1
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6211      	str	r1, [r2, #32]
 8005db8:	781a      	ldrb	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10f      	bne.n	8005df4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005de2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005df2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	e000      	b.n	8005dfa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005df8:	2302      	movs	r3, #2
  }
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b082      	sub	sp, #8
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7ff fe76 	bl	8005b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b08c      	sub	sp, #48	@ 0x30
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b22      	cmp	r3, #34	@ 0x22
 8005e50:	f040 80aa 	bne.w	8005fa8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e5c:	d115      	bne.n	8005e8a <UART_Receive_IT+0x54>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d111      	bne.n	8005e8a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e82:	1c9a      	adds	r2, r3, #2
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e88:	e024      	b.n	8005ed4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e98:	d007      	beq.n	8005eaa <UART_Receive_IT+0x74>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <UART_Receive_IT+0x82>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d106      	bne.n	8005eb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	e008      	b.n	8005eca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	3b01      	subs	r3, #1
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d15d      	bne.n	8005fa4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0220 	bic.w	r2, r2, #32
 8005ef6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695a      	ldr	r2, [r3, #20]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0201 	bic.w	r2, r2, #1
 8005f16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d135      	bne.n	8005f9a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	330c      	adds	r3, #12
 8005f3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	613b      	str	r3, [r7, #16]
   return(result);
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f023 0310 	bic.w	r3, r3, #16
 8005f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	330c      	adds	r3, #12
 8005f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f54:	623a      	str	r2, [r7, #32]
 8005f56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	69f9      	ldr	r1, [r7, #28]
 8005f5a:	6a3a      	ldr	r2, [r7, #32]
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e5      	bne.n	8005f34 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0310 	and.w	r3, r3, #16
 8005f72:	2b10      	cmp	r3, #16
 8005f74:	d10a      	bne.n	8005f8c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f76:	2300      	movs	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff fdd4 	bl	8005b40 <HAL_UARTEx_RxEventCallback>
 8005f98:	e002      	b.n	8005fa0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7fb fb16 	bl	80015cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e002      	b.n	8005faa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e000      	b.n	8005faa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005fa8:	2302      	movs	r3, #2
  }
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3730      	adds	r7, #48	@ 0x30
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fb8:	b0c0      	sub	sp, #256	@ 0x100
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd0:	68d9      	ldr	r1, [r3, #12]
 8005fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	ea40 0301 	orr.w	r3, r0, r1
 8005fdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	431a      	orrs	r2, r3
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800600c:	f021 010c 	bic.w	r1, r1, #12
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800601a:	430b      	orrs	r3, r1
 800601c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800601e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800602a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800602e:	6999      	ldr	r1, [r3, #24]
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	ea40 0301 	orr.w	r3, r0, r1
 800603a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800603c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	4b8f      	ldr	r3, [pc, #572]	@ (8006280 <UART_SetConfig+0x2cc>)
 8006044:	429a      	cmp	r2, r3
 8006046:	d005      	beq.n	8006054 <UART_SetConfig+0xa0>
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	4b8d      	ldr	r3, [pc, #564]	@ (8006284 <UART_SetConfig+0x2d0>)
 8006050:	429a      	cmp	r2, r3
 8006052:	d104      	bne.n	800605e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006054:	f7fe fa02 	bl	800445c <HAL_RCC_GetPCLK2Freq>
 8006058:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800605c:	e003      	b.n	8006066 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800605e:	f7fe f9e9 	bl	8004434 <HAL_RCC_GetPCLK1Freq>
 8006062:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006070:	f040 810c 	bne.w	800628c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006078:	2200      	movs	r2, #0
 800607a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800607e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006082:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006086:	4622      	mov	r2, r4
 8006088:	462b      	mov	r3, r5
 800608a:	1891      	adds	r1, r2, r2
 800608c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800608e:	415b      	adcs	r3, r3
 8006090:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006092:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006096:	4621      	mov	r1, r4
 8006098:	eb12 0801 	adds.w	r8, r2, r1
 800609c:	4629      	mov	r1, r5
 800609e:	eb43 0901 	adc.w	r9, r3, r1
 80060a2:	f04f 0200 	mov.w	r2, #0
 80060a6:	f04f 0300 	mov.w	r3, #0
 80060aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060b6:	4690      	mov	r8, r2
 80060b8:	4699      	mov	r9, r3
 80060ba:	4623      	mov	r3, r4
 80060bc:	eb18 0303 	adds.w	r3, r8, r3
 80060c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060c4:	462b      	mov	r3, r5
 80060c6:	eb49 0303 	adc.w	r3, r9, r3
 80060ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80060de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060e2:	460b      	mov	r3, r1
 80060e4:	18db      	adds	r3, r3, r3
 80060e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80060e8:	4613      	mov	r3, r2
 80060ea:	eb42 0303 	adc.w	r3, r2, r3
 80060ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80060f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80060f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80060f8:	f7fa fd96 	bl	8000c28 <__aeabi_uldivmod>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4b61      	ldr	r3, [pc, #388]	@ (8006288 <UART_SetConfig+0x2d4>)
 8006102:	fba3 2302 	umull	r2, r3, r3, r2
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	011c      	lsls	r4, r3, #4
 800610a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800610e:	2200      	movs	r2, #0
 8006110:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006114:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006118:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800611c:	4642      	mov	r2, r8
 800611e:	464b      	mov	r3, r9
 8006120:	1891      	adds	r1, r2, r2
 8006122:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006124:	415b      	adcs	r3, r3
 8006126:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006128:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800612c:	4641      	mov	r1, r8
 800612e:	eb12 0a01 	adds.w	sl, r2, r1
 8006132:	4649      	mov	r1, r9
 8006134:	eb43 0b01 	adc.w	fp, r3, r1
 8006138:	f04f 0200 	mov.w	r2, #0
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006144:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006148:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800614c:	4692      	mov	sl, r2
 800614e:	469b      	mov	fp, r3
 8006150:	4643      	mov	r3, r8
 8006152:	eb1a 0303 	adds.w	r3, sl, r3
 8006156:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800615a:	464b      	mov	r3, r9
 800615c:	eb4b 0303 	adc.w	r3, fp, r3
 8006160:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006170:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006174:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006178:	460b      	mov	r3, r1
 800617a:	18db      	adds	r3, r3, r3
 800617c:	643b      	str	r3, [r7, #64]	@ 0x40
 800617e:	4613      	mov	r3, r2
 8006180:	eb42 0303 	adc.w	r3, r2, r3
 8006184:	647b      	str	r3, [r7, #68]	@ 0x44
 8006186:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800618a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800618e:	f7fa fd4b 	bl	8000c28 <__aeabi_uldivmod>
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	4611      	mov	r1, r2
 8006198:	4b3b      	ldr	r3, [pc, #236]	@ (8006288 <UART_SetConfig+0x2d4>)
 800619a:	fba3 2301 	umull	r2, r3, r3, r1
 800619e:	095b      	lsrs	r3, r3, #5
 80061a0:	2264      	movs	r2, #100	@ 0x64
 80061a2:	fb02 f303 	mul.w	r3, r2, r3
 80061a6:	1acb      	subs	r3, r1, r3
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80061ae:	4b36      	ldr	r3, [pc, #216]	@ (8006288 <UART_SetConfig+0x2d4>)
 80061b0:	fba3 2302 	umull	r2, r3, r3, r2
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80061bc:	441c      	add	r4, r3
 80061be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80061cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80061d0:	4642      	mov	r2, r8
 80061d2:	464b      	mov	r3, r9
 80061d4:	1891      	adds	r1, r2, r2
 80061d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80061d8:	415b      	adcs	r3, r3
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80061e0:	4641      	mov	r1, r8
 80061e2:	1851      	adds	r1, r2, r1
 80061e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80061e6:	4649      	mov	r1, r9
 80061e8:	414b      	adcs	r3, r1
 80061ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80061f8:	4659      	mov	r1, fp
 80061fa:	00cb      	lsls	r3, r1, #3
 80061fc:	4651      	mov	r1, sl
 80061fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006202:	4651      	mov	r1, sl
 8006204:	00ca      	lsls	r2, r1, #3
 8006206:	4610      	mov	r0, r2
 8006208:	4619      	mov	r1, r3
 800620a:	4603      	mov	r3, r0
 800620c:	4642      	mov	r2, r8
 800620e:	189b      	adds	r3, r3, r2
 8006210:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006214:	464b      	mov	r3, r9
 8006216:	460a      	mov	r2, r1
 8006218:	eb42 0303 	adc.w	r3, r2, r3
 800621c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800622c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006230:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006234:	460b      	mov	r3, r1
 8006236:	18db      	adds	r3, r3, r3
 8006238:	62bb      	str	r3, [r7, #40]	@ 0x28
 800623a:	4613      	mov	r3, r2
 800623c:	eb42 0303 	adc.w	r3, r2, r3
 8006240:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006246:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800624a:	f7fa fced 	bl	8000c28 <__aeabi_uldivmod>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4b0d      	ldr	r3, [pc, #52]	@ (8006288 <UART_SetConfig+0x2d4>)
 8006254:	fba3 1302 	umull	r1, r3, r3, r2
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	2164      	movs	r1, #100	@ 0x64
 800625c:	fb01 f303 	mul.w	r3, r1, r3
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	3332      	adds	r3, #50	@ 0x32
 8006266:	4a08      	ldr	r2, [pc, #32]	@ (8006288 <UART_SetConfig+0x2d4>)
 8006268:	fba2 2303 	umull	r2, r3, r2, r3
 800626c:	095b      	lsrs	r3, r3, #5
 800626e:	f003 0207 	and.w	r2, r3, #7
 8006272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4422      	add	r2, r4
 800627a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800627c:	e106      	b.n	800648c <UART_SetConfig+0x4d8>
 800627e:	bf00      	nop
 8006280:	40011000 	.word	0x40011000
 8006284:	40011400 	.word	0x40011400
 8006288:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800628c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006290:	2200      	movs	r2, #0
 8006292:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006296:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800629a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800629e:	4642      	mov	r2, r8
 80062a0:	464b      	mov	r3, r9
 80062a2:	1891      	adds	r1, r2, r2
 80062a4:	6239      	str	r1, [r7, #32]
 80062a6:	415b      	adcs	r3, r3
 80062a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062ae:	4641      	mov	r1, r8
 80062b0:	1854      	adds	r4, r2, r1
 80062b2:	4649      	mov	r1, r9
 80062b4:	eb43 0501 	adc.w	r5, r3, r1
 80062b8:	f04f 0200 	mov.w	r2, #0
 80062bc:	f04f 0300 	mov.w	r3, #0
 80062c0:	00eb      	lsls	r3, r5, #3
 80062c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062c6:	00e2      	lsls	r2, r4, #3
 80062c8:	4614      	mov	r4, r2
 80062ca:	461d      	mov	r5, r3
 80062cc:	4643      	mov	r3, r8
 80062ce:	18e3      	adds	r3, r4, r3
 80062d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80062d4:	464b      	mov	r3, r9
 80062d6:	eb45 0303 	adc.w	r3, r5, r3
 80062da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80062fa:	4629      	mov	r1, r5
 80062fc:	008b      	lsls	r3, r1, #2
 80062fe:	4621      	mov	r1, r4
 8006300:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006304:	4621      	mov	r1, r4
 8006306:	008a      	lsls	r2, r1, #2
 8006308:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800630c:	f7fa fc8c 	bl	8000c28 <__aeabi_uldivmod>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4b60      	ldr	r3, [pc, #384]	@ (8006498 <UART_SetConfig+0x4e4>)
 8006316:	fba3 2302 	umull	r2, r3, r3, r2
 800631a:	095b      	lsrs	r3, r3, #5
 800631c:	011c      	lsls	r4, r3, #4
 800631e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006322:	2200      	movs	r2, #0
 8006324:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006328:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800632c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006330:	4642      	mov	r2, r8
 8006332:	464b      	mov	r3, r9
 8006334:	1891      	adds	r1, r2, r2
 8006336:	61b9      	str	r1, [r7, #24]
 8006338:	415b      	adcs	r3, r3
 800633a:	61fb      	str	r3, [r7, #28]
 800633c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006340:	4641      	mov	r1, r8
 8006342:	1851      	adds	r1, r2, r1
 8006344:	6139      	str	r1, [r7, #16]
 8006346:	4649      	mov	r1, r9
 8006348:	414b      	adcs	r3, r1
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	f04f 0200 	mov.w	r2, #0
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006358:	4659      	mov	r1, fp
 800635a:	00cb      	lsls	r3, r1, #3
 800635c:	4651      	mov	r1, sl
 800635e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006362:	4651      	mov	r1, sl
 8006364:	00ca      	lsls	r2, r1, #3
 8006366:	4610      	mov	r0, r2
 8006368:	4619      	mov	r1, r3
 800636a:	4603      	mov	r3, r0
 800636c:	4642      	mov	r2, r8
 800636e:	189b      	adds	r3, r3, r2
 8006370:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006374:	464b      	mov	r3, r9
 8006376:	460a      	mov	r2, r1
 8006378:	eb42 0303 	adc.w	r3, r2, r3
 800637c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	67bb      	str	r3, [r7, #120]	@ 0x78
 800638a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006398:	4649      	mov	r1, r9
 800639a:	008b      	lsls	r3, r1, #2
 800639c:	4641      	mov	r1, r8
 800639e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063a2:	4641      	mov	r1, r8
 80063a4:	008a      	lsls	r2, r1, #2
 80063a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80063aa:	f7fa fc3d 	bl	8000c28 <__aeabi_uldivmod>
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	4611      	mov	r1, r2
 80063b4:	4b38      	ldr	r3, [pc, #224]	@ (8006498 <UART_SetConfig+0x4e4>)
 80063b6:	fba3 2301 	umull	r2, r3, r3, r1
 80063ba:	095b      	lsrs	r3, r3, #5
 80063bc:	2264      	movs	r2, #100	@ 0x64
 80063be:	fb02 f303 	mul.w	r3, r2, r3
 80063c2:	1acb      	subs	r3, r1, r3
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	3332      	adds	r3, #50	@ 0x32
 80063c8:	4a33      	ldr	r2, [pc, #204]	@ (8006498 <UART_SetConfig+0x4e4>)
 80063ca:	fba2 2303 	umull	r2, r3, r2, r3
 80063ce:	095b      	lsrs	r3, r3, #5
 80063d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063d4:	441c      	add	r4, r3
 80063d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063da:	2200      	movs	r2, #0
 80063dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80063de:	677a      	str	r2, [r7, #116]	@ 0x74
 80063e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80063e4:	4642      	mov	r2, r8
 80063e6:	464b      	mov	r3, r9
 80063e8:	1891      	adds	r1, r2, r2
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	415b      	adcs	r3, r3
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063f4:	4641      	mov	r1, r8
 80063f6:	1851      	adds	r1, r2, r1
 80063f8:	6039      	str	r1, [r7, #0]
 80063fa:	4649      	mov	r1, r9
 80063fc:	414b      	adcs	r3, r1
 80063fe:	607b      	str	r3, [r7, #4]
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800640c:	4659      	mov	r1, fp
 800640e:	00cb      	lsls	r3, r1, #3
 8006410:	4651      	mov	r1, sl
 8006412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006416:	4651      	mov	r1, sl
 8006418:	00ca      	lsls	r2, r1, #3
 800641a:	4610      	mov	r0, r2
 800641c:	4619      	mov	r1, r3
 800641e:	4603      	mov	r3, r0
 8006420:	4642      	mov	r2, r8
 8006422:	189b      	adds	r3, r3, r2
 8006424:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006426:	464b      	mov	r3, r9
 8006428:	460a      	mov	r2, r1
 800642a:	eb42 0303 	adc.w	r3, r2, r3
 800642e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	663b      	str	r3, [r7, #96]	@ 0x60
 800643a:	667a      	str	r2, [r7, #100]	@ 0x64
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006448:	4649      	mov	r1, r9
 800644a:	008b      	lsls	r3, r1, #2
 800644c:	4641      	mov	r1, r8
 800644e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006452:	4641      	mov	r1, r8
 8006454:	008a      	lsls	r2, r1, #2
 8006456:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800645a:	f7fa fbe5 	bl	8000c28 <__aeabi_uldivmod>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	4b0d      	ldr	r3, [pc, #52]	@ (8006498 <UART_SetConfig+0x4e4>)
 8006464:	fba3 1302 	umull	r1, r3, r3, r2
 8006468:	095b      	lsrs	r3, r3, #5
 800646a:	2164      	movs	r1, #100	@ 0x64
 800646c:	fb01 f303 	mul.w	r3, r1, r3
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	3332      	adds	r3, #50	@ 0x32
 8006476:	4a08      	ldr	r2, [pc, #32]	@ (8006498 <UART_SetConfig+0x4e4>)
 8006478:	fba2 2303 	umull	r2, r3, r2, r3
 800647c:	095b      	lsrs	r3, r3, #5
 800647e:	f003 020f 	and.w	r2, r3, #15
 8006482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4422      	add	r2, r4
 800648a:	609a      	str	r2, [r3, #8]
}
 800648c:	bf00      	nop
 800648e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006492:	46bd      	mov	sp, r7
 8006494:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006498:	51eb851f 	.word	0x51eb851f

0800649c <atoi>:
 800649c:	220a      	movs	r2, #10
 800649e:	2100      	movs	r1, #0
 80064a0:	f000 b87a 	b.w	8006598 <strtol>

080064a4 <_strtol_l.isra.0>:
 80064a4:	2b24      	cmp	r3, #36	@ 0x24
 80064a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064aa:	4686      	mov	lr, r0
 80064ac:	4690      	mov	r8, r2
 80064ae:	d801      	bhi.n	80064b4 <_strtol_l.isra.0+0x10>
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d106      	bne.n	80064c2 <_strtol_l.isra.0+0x1e>
 80064b4:	f000 fb8e 	bl	8006bd4 <__errno>
 80064b8:	2316      	movs	r3, #22
 80064ba:	6003      	str	r3, [r0, #0]
 80064bc:	2000      	movs	r0, #0
 80064be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c2:	4834      	ldr	r0, [pc, #208]	@ (8006594 <_strtol_l.isra.0+0xf0>)
 80064c4:	460d      	mov	r5, r1
 80064c6:	462a      	mov	r2, r5
 80064c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064cc:	5d06      	ldrb	r6, [r0, r4]
 80064ce:	f016 0608 	ands.w	r6, r6, #8
 80064d2:	d1f8      	bne.n	80064c6 <_strtol_l.isra.0+0x22>
 80064d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80064d6:	d110      	bne.n	80064fa <_strtol_l.isra.0+0x56>
 80064d8:	782c      	ldrb	r4, [r5, #0]
 80064da:	2601      	movs	r6, #1
 80064dc:	1c95      	adds	r5, r2, #2
 80064de:	f033 0210 	bics.w	r2, r3, #16
 80064e2:	d115      	bne.n	8006510 <_strtol_l.isra.0+0x6c>
 80064e4:	2c30      	cmp	r4, #48	@ 0x30
 80064e6:	d10d      	bne.n	8006504 <_strtol_l.isra.0+0x60>
 80064e8:	782a      	ldrb	r2, [r5, #0]
 80064ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80064ee:	2a58      	cmp	r2, #88	@ 0x58
 80064f0:	d108      	bne.n	8006504 <_strtol_l.isra.0+0x60>
 80064f2:	786c      	ldrb	r4, [r5, #1]
 80064f4:	3502      	adds	r5, #2
 80064f6:	2310      	movs	r3, #16
 80064f8:	e00a      	b.n	8006510 <_strtol_l.isra.0+0x6c>
 80064fa:	2c2b      	cmp	r4, #43	@ 0x2b
 80064fc:	bf04      	itt	eq
 80064fe:	782c      	ldrbeq	r4, [r5, #0]
 8006500:	1c95      	addeq	r5, r2, #2
 8006502:	e7ec      	b.n	80064de <_strtol_l.isra.0+0x3a>
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1f6      	bne.n	80064f6 <_strtol_l.isra.0+0x52>
 8006508:	2c30      	cmp	r4, #48	@ 0x30
 800650a:	bf14      	ite	ne
 800650c:	230a      	movne	r3, #10
 800650e:	2308      	moveq	r3, #8
 8006510:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006514:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006518:	2200      	movs	r2, #0
 800651a:	fbbc f9f3 	udiv	r9, ip, r3
 800651e:	4610      	mov	r0, r2
 8006520:	fb03 ca19 	mls	sl, r3, r9, ip
 8006524:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006528:	2f09      	cmp	r7, #9
 800652a:	d80f      	bhi.n	800654c <_strtol_l.isra.0+0xa8>
 800652c:	463c      	mov	r4, r7
 800652e:	42a3      	cmp	r3, r4
 8006530:	dd1b      	ble.n	800656a <_strtol_l.isra.0+0xc6>
 8006532:	1c57      	adds	r7, r2, #1
 8006534:	d007      	beq.n	8006546 <_strtol_l.isra.0+0xa2>
 8006536:	4581      	cmp	r9, r0
 8006538:	d314      	bcc.n	8006564 <_strtol_l.isra.0+0xc0>
 800653a:	d101      	bne.n	8006540 <_strtol_l.isra.0+0x9c>
 800653c:	45a2      	cmp	sl, r4
 800653e:	db11      	blt.n	8006564 <_strtol_l.isra.0+0xc0>
 8006540:	fb00 4003 	mla	r0, r0, r3, r4
 8006544:	2201      	movs	r2, #1
 8006546:	f815 4b01 	ldrb.w	r4, [r5], #1
 800654a:	e7eb      	b.n	8006524 <_strtol_l.isra.0+0x80>
 800654c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006550:	2f19      	cmp	r7, #25
 8006552:	d801      	bhi.n	8006558 <_strtol_l.isra.0+0xb4>
 8006554:	3c37      	subs	r4, #55	@ 0x37
 8006556:	e7ea      	b.n	800652e <_strtol_l.isra.0+0x8a>
 8006558:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800655c:	2f19      	cmp	r7, #25
 800655e:	d804      	bhi.n	800656a <_strtol_l.isra.0+0xc6>
 8006560:	3c57      	subs	r4, #87	@ 0x57
 8006562:	e7e4      	b.n	800652e <_strtol_l.isra.0+0x8a>
 8006564:	f04f 32ff 	mov.w	r2, #4294967295
 8006568:	e7ed      	b.n	8006546 <_strtol_l.isra.0+0xa2>
 800656a:	1c53      	adds	r3, r2, #1
 800656c:	d108      	bne.n	8006580 <_strtol_l.isra.0+0xdc>
 800656e:	2322      	movs	r3, #34	@ 0x22
 8006570:	f8ce 3000 	str.w	r3, [lr]
 8006574:	4660      	mov	r0, ip
 8006576:	f1b8 0f00 	cmp.w	r8, #0
 800657a:	d0a0      	beq.n	80064be <_strtol_l.isra.0+0x1a>
 800657c:	1e69      	subs	r1, r5, #1
 800657e:	e006      	b.n	800658e <_strtol_l.isra.0+0xea>
 8006580:	b106      	cbz	r6, 8006584 <_strtol_l.isra.0+0xe0>
 8006582:	4240      	negs	r0, r0
 8006584:	f1b8 0f00 	cmp.w	r8, #0
 8006588:	d099      	beq.n	80064be <_strtol_l.isra.0+0x1a>
 800658a:	2a00      	cmp	r2, #0
 800658c:	d1f6      	bne.n	800657c <_strtol_l.isra.0+0xd8>
 800658e:	f8c8 1000 	str.w	r1, [r8]
 8006592:	e794      	b.n	80064be <_strtol_l.isra.0+0x1a>
 8006594:	08008d65 	.word	0x08008d65

08006598 <strtol>:
 8006598:	4613      	mov	r3, r2
 800659a:	460a      	mov	r2, r1
 800659c:	4601      	mov	r1, r0
 800659e:	4802      	ldr	r0, [pc, #8]	@ (80065a8 <strtol+0x10>)
 80065a0:	6800      	ldr	r0, [r0, #0]
 80065a2:	f7ff bf7f 	b.w	80064a4 <_strtol_l.isra.0>
 80065a6:	bf00      	nop
 80065a8:	2000001c 	.word	0x2000001c

080065ac <std>:
 80065ac:	2300      	movs	r3, #0
 80065ae:	b510      	push	{r4, lr}
 80065b0:	4604      	mov	r4, r0
 80065b2:	e9c0 3300 	strd	r3, r3, [r0]
 80065b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065ba:	6083      	str	r3, [r0, #8]
 80065bc:	8181      	strh	r1, [r0, #12]
 80065be:	6643      	str	r3, [r0, #100]	@ 0x64
 80065c0:	81c2      	strh	r2, [r0, #14]
 80065c2:	6183      	str	r3, [r0, #24]
 80065c4:	4619      	mov	r1, r3
 80065c6:	2208      	movs	r2, #8
 80065c8:	305c      	adds	r0, #92	@ 0x5c
 80065ca:	f000 fa23 	bl	8006a14 <memset>
 80065ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006604 <std+0x58>)
 80065d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80065d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006608 <std+0x5c>)
 80065d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80065d6:	4b0d      	ldr	r3, [pc, #52]	@ (800660c <std+0x60>)
 80065d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80065da:	4b0d      	ldr	r3, [pc, #52]	@ (8006610 <std+0x64>)
 80065dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80065de:	4b0d      	ldr	r3, [pc, #52]	@ (8006614 <std+0x68>)
 80065e0:	6224      	str	r4, [r4, #32]
 80065e2:	429c      	cmp	r4, r3
 80065e4:	d006      	beq.n	80065f4 <std+0x48>
 80065e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80065ea:	4294      	cmp	r4, r2
 80065ec:	d002      	beq.n	80065f4 <std+0x48>
 80065ee:	33d0      	adds	r3, #208	@ 0xd0
 80065f0:	429c      	cmp	r4, r3
 80065f2:	d105      	bne.n	8006600 <std+0x54>
 80065f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065fc:	f000 bb14 	b.w	8006c28 <__retarget_lock_init_recursive>
 8006600:	bd10      	pop	{r4, pc}
 8006602:	bf00      	nop
 8006604:	08006865 	.word	0x08006865
 8006608:	08006887 	.word	0x08006887
 800660c:	080068bf 	.word	0x080068bf
 8006610:	080068e3 	.word	0x080068e3
 8006614:	20000af8 	.word	0x20000af8

08006618 <stdio_exit_handler>:
 8006618:	4a02      	ldr	r2, [pc, #8]	@ (8006624 <stdio_exit_handler+0xc>)
 800661a:	4903      	ldr	r1, [pc, #12]	@ (8006628 <stdio_exit_handler+0x10>)
 800661c:	4803      	ldr	r0, [pc, #12]	@ (800662c <stdio_exit_handler+0x14>)
 800661e:	f000 b869 	b.w	80066f4 <_fwalk_sglue>
 8006622:	bf00      	nop
 8006624:	20000010 	.word	0x20000010
 8006628:	080077ed 	.word	0x080077ed
 800662c:	20000020 	.word	0x20000020

08006630 <cleanup_stdio>:
 8006630:	6841      	ldr	r1, [r0, #4]
 8006632:	4b0c      	ldr	r3, [pc, #48]	@ (8006664 <cleanup_stdio+0x34>)
 8006634:	4299      	cmp	r1, r3
 8006636:	b510      	push	{r4, lr}
 8006638:	4604      	mov	r4, r0
 800663a:	d001      	beq.n	8006640 <cleanup_stdio+0x10>
 800663c:	f001 f8d6 	bl	80077ec <_fflush_r>
 8006640:	68a1      	ldr	r1, [r4, #8]
 8006642:	4b09      	ldr	r3, [pc, #36]	@ (8006668 <cleanup_stdio+0x38>)
 8006644:	4299      	cmp	r1, r3
 8006646:	d002      	beq.n	800664e <cleanup_stdio+0x1e>
 8006648:	4620      	mov	r0, r4
 800664a:	f001 f8cf 	bl	80077ec <_fflush_r>
 800664e:	68e1      	ldr	r1, [r4, #12]
 8006650:	4b06      	ldr	r3, [pc, #24]	@ (800666c <cleanup_stdio+0x3c>)
 8006652:	4299      	cmp	r1, r3
 8006654:	d004      	beq.n	8006660 <cleanup_stdio+0x30>
 8006656:	4620      	mov	r0, r4
 8006658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800665c:	f001 b8c6 	b.w	80077ec <_fflush_r>
 8006660:	bd10      	pop	{r4, pc}
 8006662:	bf00      	nop
 8006664:	20000af8 	.word	0x20000af8
 8006668:	20000b60 	.word	0x20000b60
 800666c:	20000bc8 	.word	0x20000bc8

08006670 <global_stdio_init.part.0>:
 8006670:	b510      	push	{r4, lr}
 8006672:	4b0b      	ldr	r3, [pc, #44]	@ (80066a0 <global_stdio_init.part.0+0x30>)
 8006674:	4c0b      	ldr	r4, [pc, #44]	@ (80066a4 <global_stdio_init.part.0+0x34>)
 8006676:	4a0c      	ldr	r2, [pc, #48]	@ (80066a8 <global_stdio_init.part.0+0x38>)
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	4620      	mov	r0, r4
 800667c:	2200      	movs	r2, #0
 800667e:	2104      	movs	r1, #4
 8006680:	f7ff ff94 	bl	80065ac <std>
 8006684:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006688:	2201      	movs	r2, #1
 800668a:	2109      	movs	r1, #9
 800668c:	f7ff ff8e 	bl	80065ac <std>
 8006690:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006694:	2202      	movs	r2, #2
 8006696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800669a:	2112      	movs	r1, #18
 800669c:	f7ff bf86 	b.w	80065ac <std>
 80066a0:	20000c30 	.word	0x20000c30
 80066a4:	20000af8 	.word	0x20000af8
 80066a8:	08006619 	.word	0x08006619

080066ac <__sfp_lock_acquire>:
 80066ac:	4801      	ldr	r0, [pc, #4]	@ (80066b4 <__sfp_lock_acquire+0x8>)
 80066ae:	f000 babc 	b.w	8006c2a <__retarget_lock_acquire_recursive>
 80066b2:	bf00      	nop
 80066b4:	20000c39 	.word	0x20000c39

080066b8 <__sfp_lock_release>:
 80066b8:	4801      	ldr	r0, [pc, #4]	@ (80066c0 <__sfp_lock_release+0x8>)
 80066ba:	f000 bab7 	b.w	8006c2c <__retarget_lock_release_recursive>
 80066be:	bf00      	nop
 80066c0:	20000c39 	.word	0x20000c39

080066c4 <__sinit>:
 80066c4:	b510      	push	{r4, lr}
 80066c6:	4604      	mov	r4, r0
 80066c8:	f7ff fff0 	bl	80066ac <__sfp_lock_acquire>
 80066cc:	6a23      	ldr	r3, [r4, #32]
 80066ce:	b11b      	cbz	r3, 80066d8 <__sinit+0x14>
 80066d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d4:	f7ff bff0 	b.w	80066b8 <__sfp_lock_release>
 80066d8:	4b04      	ldr	r3, [pc, #16]	@ (80066ec <__sinit+0x28>)
 80066da:	6223      	str	r3, [r4, #32]
 80066dc:	4b04      	ldr	r3, [pc, #16]	@ (80066f0 <__sinit+0x2c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1f5      	bne.n	80066d0 <__sinit+0xc>
 80066e4:	f7ff ffc4 	bl	8006670 <global_stdio_init.part.0>
 80066e8:	e7f2      	b.n	80066d0 <__sinit+0xc>
 80066ea:	bf00      	nop
 80066ec:	08006631 	.word	0x08006631
 80066f0:	20000c30 	.word	0x20000c30

080066f4 <_fwalk_sglue>:
 80066f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f8:	4607      	mov	r7, r0
 80066fa:	4688      	mov	r8, r1
 80066fc:	4614      	mov	r4, r2
 80066fe:	2600      	movs	r6, #0
 8006700:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006704:	f1b9 0901 	subs.w	r9, r9, #1
 8006708:	d505      	bpl.n	8006716 <_fwalk_sglue+0x22>
 800670a:	6824      	ldr	r4, [r4, #0]
 800670c:	2c00      	cmp	r4, #0
 800670e:	d1f7      	bne.n	8006700 <_fwalk_sglue+0xc>
 8006710:	4630      	mov	r0, r6
 8006712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006716:	89ab      	ldrh	r3, [r5, #12]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d907      	bls.n	800672c <_fwalk_sglue+0x38>
 800671c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006720:	3301      	adds	r3, #1
 8006722:	d003      	beq.n	800672c <_fwalk_sglue+0x38>
 8006724:	4629      	mov	r1, r5
 8006726:	4638      	mov	r0, r7
 8006728:	47c0      	blx	r8
 800672a:	4306      	orrs	r6, r0
 800672c:	3568      	adds	r5, #104	@ 0x68
 800672e:	e7e9      	b.n	8006704 <_fwalk_sglue+0x10>

08006730 <iprintf>:
 8006730:	b40f      	push	{r0, r1, r2, r3}
 8006732:	b507      	push	{r0, r1, r2, lr}
 8006734:	4906      	ldr	r1, [pc, #24]	@ (8006750 <iprintf+0x20>)
 8006736:	ab04      	add	r3, sp, #16
 8006738:	6808      	ldr	r0, [r1, #0]
 800673a:	f853 2b04 	ldr.w	r2, [r3], #4
 800673e:	6881      	ldr	r1, [r0, #8]
 8006740:	9301      	str	r3, [sp, #4]
 8006742:	f000 fd2b 	bl	800719c <_vfiprintf_r>
 8006746:	b003      	add	sp, #12
 8006748:	f85d eb04 	ldr.w	lr, [sp], #4
 800674c:	b004      	add	sp, #16
 800674e:	4770      	bx	lr
 8006750:	2000001c 	.word	0x2000001c

08006754 <putchar>:
 8006754:	4b02      	ldr	r3, [pc, #8]	@ (8006760 <putchar+0xc>)
 8006756:	4601      	mov	r1, r0
 8006758:	6818      	ldr	r0, [r3, #0]
 800675a:	6882      	ldr	r2, [r0, #8]
 800675c:	f001 b8e2 	b.w	8007924 <_putc_r>
 8006760:	2000001c 	.word	0x2000001c

08006764 <_puts_r>:
 8006764:	6a03      	ldr	r3, [r0, #32]
 8006766:	b570      	push	{r4, r5, r6, lr}
 8006768:	6884      	ldr	r4, [r0, #8]
 800676a:	4605      	mov	r5, r0
 800676c:	460e      	mov	r6, r1
 800676e:	b90b      	cbnz	r3, 8006774 <_puts_r+0x10>
 8006770:	f7ff ffa8 	bl	80066c4 <__sinit>
 8006774:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006776:	07db      	lsls	r3, r3, #31
 8006778:	d405      	bmi.n	8006786 <_puts_r+0x22>
 800677a:	89a3      	ldrh	r3, [r4, #12]
 800677c:	0598      	lsls	r0, r3, #22
 800677e:	d402      	bmi.n	8006786 <_puts_r+0x22>
 8006780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006782:	f000 fa52 	bl	8006c2a <__retarget_lock_acquire_recursive>
 8006786:	89a3      	ldrh	r3, [r4, #12]
 8006788:	0719      	lsls	r1, r3, #28
 800678a:	d502      	bpl.n	8006792 <_puts_r+0x2e>
 800678c:	6923      	ldr	r3, [r4, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d135      	bne.n	80067fe <_puts_r+0x9a>
 8006792:	4621      	mov	r1, r4
 8006794:	4628      	mov	r0, r5
 8006796:	f000 f8e7 	bl	8006968 <__swsetup_r>
 800679a:	b380      	cbz	r0, 80067fe <_puts_r+0x9a>
 800679c:	f04f 35ff 	mov.w	r5, #4294967295
 80067a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067a2:	07da      	lsls	r2, r3, #31
 80067a4:	d405      	bmi.n	80067b2 <_puts_r+0x4e>
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	059b      	lsls	r3, r3, #22
 80067aa:	d402      	bmi.n	80067b2 <_puts_r+0x4e>
 80067ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067ae:	f000 fa3d 	bl	8006c2c <__retarget_lock_release_recursive>
 80067b2:	4628      	mov	r0, r5
 80067b4:	bd70      	pop	{r4, r5, r6, pc}
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	da04      	bge.n	80067c4 <_puts_r+0x60>
 80067ba:	69a2      	ldr	r2, [r4, #24]
 80067bc:	429a      	cmp	r2, r3
 80067be:	dc17      	bgt.n	80067f0 <_puts_r+0x8c>
 80067c0:	290a      	cmp	r1, #10
 80067c2:	d015      	beq.n	80067f0 <_puts_r+0x8c>
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	6022      	str	r2, [r4, #0]
 80067ca:	7019      	strb	r1, [r3, #0]
 80067cc:	68a3      	ldr	r3, [r4, #8]
 80067ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067d2:	3b01      	subs	r3, #1
 80067d4:	60a3      	str	r3, [r4, #8]
 80067d6:	2900      	cmp	r1, #0
 80067d8:	d1ed      	bne.n	80067b6 <_puts_r+0x52>
 80067da:	2b00      	cmp	r3, #0
 80067dc:	da11      	bge.n	8006802 <_puts_r+0x9e>
 80067de:	4622      	mov	r2, r4
 80067e0:	210a      	movs	r1, #10
 80067e2:	4628      	mov	r0, r5
 80067e4:	f000 f881 	bl	80068ea <__swbuf_r>
 80067e8:	3001      	adds	r0, #1
 80067ea:	d0d7      	beq.n	800679c <_puts_r+0x38>
 80067ec:	250a      	movs	r5, #10
 80067ee:	e7d7      	b.n	80067a0 <_puts_r+0x3c>
 80067f0:	4622      	mov	r2, r4
 80067f2:	4628      	mov	r0, r5
 80067f4:	f000 f879 	bl	80068ea <__swbuf_r>
 80067f8:	3001      	adds	r0, #1
 80067fa:	d1e7      	bne.n	80067cc <_puts_r+0x68>
 80067fc:	e7ce      	b.n	800679c <_puts_r+0x38>
 80067fe:	3e01      	subs	r6, #1
 8006800:	e7e4      	b.n	80067cc <_puts_r+0x68>
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	6022      	str	r2, [r4, #0]
 8006808:	220a      	movs	r2, #10
 800680a:	701a      	strb	r2, [r3, #0]
 800680c:	e7ee      	b.n	80067ec <_puts_r+0x88>
	...

08006810 <puts>:
 8006810:	4b02      	ldr	r3, [pc, #8]	@ (800681c <puts+0xc>)
 8006812:	4601      	mov	r1, r0
 8006814:	6818      	ldr	r0, [r3, #0]
 8006816:	f7ff bfa5 	b.w	8006764 <_puts_r>
 800681a:	bf00      	nop
 800681c:	2000001c 	.word	0x2000001c

08006820 <siprintf>:
 8006820:	b40e      	push	{r1, r2, r3}
 8006822:	b510      	push	{r4, lr}
 8006824:	b09d      	sub	sp, #116	@ 0x74
 8006826:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006828:	9002      	str	r0, [sp, #8]
 800682a:	9006      	str	r0, [sp, #24]
 800682c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006830:	480a      	ldr	r0, [pc, #40]	@ (800685c <siprintf+0x3c>)
 8006832:	9107      	str	r1, [sp, #28]
 8006834:	9104      	str	r1, [sp, #16]
 8006836:	490a      	ldr	r1, [pc, #40]	@ (8006860 <siprintf+0x40>)
 8006838:	f853 2b04 	ldr.w	r2, [r3], #4
 800683c:	9105      	str	r1, [sp, #20]
 800683e:	2400      	movs	r4, #0
 8006840:	a902      	add	r1, sp, #8
 8006842:	6800      	ldr	r0, [r0, #0]
 8006844:	9301      	str	r3, [sp, #4]
 8006846:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006848:	f000 fb82 	bl	8006f50 <_svfiprintf_r>
 800684c:	9b02      	ldr	r3, [sp, #8]
 800684e:	701c      	strb	r4, [r3, #0]
 8006850:	b01d      	add	sp, #116	@ 0x74
 8006852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006856:	b003      	add	sp, #12
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	2000001c 	.word	0x2000001c
 8006860:	ffff0208 	.word	0xffff0208

08006864 <__sread>:
 8006864:	b510      	push	{r4, lr}
 8006866:	460c      	mov	r4, r1
 8006868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800686c:	f000 f98e 	bl	8006b8c <_read_r>
 8006870:	2800      	cmp	r0, #0
 8006872:	bfab      	itete	ge
 8006874:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006876:	89a3      	ldrhlt	r3, [r4, #12]
 8006878:	181b      	addge	r3, r3, r0
 800687a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800687e:	bfac      	ite	ge
 8006880:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006882:	81a3      	strhlt	r3, [r4, #12]
 8006884:	bd10      	pop	{r4, pc}

08006886 <__swrite>:
 8006886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800688a:	461f      	mov	r7, r3
 800688c:	898b      	ldrh	r3, [r1, #12]
 800688e:	05db      	lsls	r3, r3, #23
 8006890:	4605      	mov	r5, r0
 8006892:	460c      	mov	r4, r1
 8006894:	4616      	mov	r6, r2
 8006896:	d505      	bpl.n	80068a4 <__swrite+0x1e>
 8006898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800689c:	2302      	movs	r3, #2
 800689e:	2200      	movs	r2, #0
 80068a0:	f000 f962 	bl	8006b68 <_lseek_r>
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068ae:	81a3      	strh	r3, [r4, #12]
 80068b0:	4632      	mov	r2, r6
 80068b2:	463b      	mov	r3, r7
 80068b4:	4628      	mov	r0, r5
 80068b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ba:	f000 b979 	b.w	8006bb0 <_write_r>

080068be <__sseek>:
 80068be:	b510      	push	{r4, lr}
 80068c0:	460c      	mov	r4, r1
 80068c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c6:	f000 f94f 	bl	8006b68 <_lseek_r>
 80068ca:	1c43      	adds	r3, r0, #1
 80068cc:	89a3      	ldrh	r3, [r4, #12]
 80068ce:	bf15      	itete	ne
 80068d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80068d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80068d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80068da:	81a3      	strheq	r3, [r4, #12]
 80068dc:	bf18      	it	ne
 80068de:	81a3      	strhne	r3, [r4, #12]
 80068e0:	bd10      	pop	{r4, pc}

080068e2 <__sclose>:
 80068e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e6:	f000 b92f 	b.w	8006b48 <_close_r>

080068ea <__swbuf_r>:
 80068ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ec:	460e      	mov	r6, r1
 80068ee:	4614      	mov	r4, r2
 80068f0:	4605      	mov	r5, r0
 80068f2:	b118      	cbz	r0, 80068fc <__swbuf_r+0x12>
 80068f4:	6a03      	ldr	r3, [r0, #32]
 80068f6:	b90b      	cbnz	r3, 80068fc <__swbuf_r+0x12>
 80068f8:	f7ff fee4 	bl	80066c4 <__sinit>
 80068fc:	69a3      	ldr	r3, [r4, #24]
 80068fe:	60a3      	str	r3, [r4, #8]
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	071a      	lsls	r2, r3, #28
 8006904:	d501      	bpl.n	800690a <__swbuf_r+0x20>
 8006906:	6923      	ldr	r3, [r4, #16]
 8006908:	b943      	cbnz	r3, 800691c <__swbuf_r+0x32>
 800690a:	4621      	mov	r1, r4
 800690c:	4628      	mov	r0, r5
 800690e:	f000 f82b 	bl	8006968 <__swsetup_r>
 8006912:	b118      	cbz	r0, 800691c <__swbuf_r+0x32>
 8006914:	f04f 37ff 	mov.w	r7, #4294967295
 8006918:	4638      	mov	r0, r7
 800691a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	6922      	ldr	r2, [r4, #16]
 8006920:	1a98      	subs	r0, r3, r2
 8006922:	6963      	ldr	r3, [r4, #20]
 8006924:	b2f6      	uxtb	r6, r6
 8006926:	4283      	cmp	r3, r0
 8006928:	4637      	mov	r7, r6
 800692a:	dc05      	bgt.n	8006938 <__swbuf_r+0x4e>
 800692c:	4621      	mov	r1, r4
 800692e:	4628      	mov	r0, r5
 8006930:	f000 ff5c 	bl	80077ec <_fflush_r>
 8006934:	2800      	cmp	r0, #0
 8006936:	d1ed      	bne.n	8006914 <__swbuf_r+0x2a>
 8006938:	68a3      	ldr	r3, [r4, #8]
 800693a:	3b01      	subs	r3, #1
 800693c:	60a3      	str	r3, [r4, #8]
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	6022      	str	r2, [r4, #0]
 8006944:	701e      	strb	r6, [r3, #0]
 8006946:	6962      	ldr	r2, [r4, #20]
 8006948:	1c43      	adds	r3, r0, #1
 800694a:	429a      	cmp	r2, r3
 800694c:	d004      	beq.n	8006958 <__swbuf_r+0x6e>
 800694e:	89a3      	ldrh	r3, [r4, #12]
 8006950:	07db      	lsls	r3, r3, #31
 8006952:	d5e1      	bpl.n	8006918 <__swbuf_r+0x2e>
 8006954:	2e0a      	cmp	r6, #10
 8006956:	d1df      	bne.n	8006918 <__swbuf_r+0x2e>
 8006958:	4621      	mov	r1, r4
 800695a:	4628      	mov	r0, r5
 800695c:	f000 ff46 	bl	80077ec <_fflush_r>
 8006960:	2800      	cmp	r0, #0
 8006962:	d0d9      	beq.n	8006918 <__swbuf_r+0x2e>
 8006964:	e7d6      	b.n	8006914 <__swbuf_r+0x2a>
	...

08006968 <__swsetup_r>:
 8006968:	b538      	push	{r3, r4, r5, lr}
 800696a:	4b29      	ldr	r3, [pc, #164]	@ (8006a10 <__swsetup_r+0xa8>)
 800696c:	4605      	mov	r5, r0
 800696e:	6818      	ldr	r0, [r3, #0]
 8006970:	460c      	mov	r4, r1
 8006972:	b118      	cbz	r0, 800697c <__swsetup_r+0x14>
 8006974:	6a03      	ldr	r3, [r0, #32]
 8006976:	b90b      	cbnz	r3, 800697c <__swsetup_r+0x14>
 8006978:	f7ff fea4 	bl	80066c4 <__sinit>
 800697c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006980:	0719      	lsls	r1, r3, #28
 8006982:	d422      	bmi.n	80069ca <__swsetup_r+0x62>
 8006984:	06da      	lsls	r2, r3, #27
 8006986:	d407      	bmi.n	8006998 <__swsetup_r+0x30>
 8006988:	2209      	movs	r2, #9
 800698a:	602a      	str	r2, [r5, #0]
 800698c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006990:	81a3      	strh	r3, [r4, #12]
 8006992:	f04f 30ff 	mov.w	r0, #4294967295
 8006996:	e033      	b.n	8006a00 <__swsetup_r+0x98>
 8006998:	0758      	lsls	r0, r3, #29
 800699a:	d512      	bpl.n	80069c2 <__swsetup_r+0x5a>
 800699c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800699e:	b141      	cbz	r1, 80069b2 <__swsetup_r+0x4a>
 80069a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069a4:	4299      	cmp	r1, r3
 80069a6:	d002      	beq.n	80069ae <__swsetup_r+0x46>
 80069a8:	4628      	mov	r0, r5
 80069aa:	f000 f975 	bl	8006c98 <_free_r>
 80069ae:	2300      	movs	r3, #0
 80069b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80069b2:	89a3      	ldrh	r3, [r4, #12]
 80069b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80069b8:	81a3      	strh	r3, [r4, #12]
 80069ba:	2300      	movs	r3, #0
 80069bc:	6063      	str	r3, [r4, #4]
 80069be:	6923      	ldr	r3, [r4, #16]
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	f043 0308 	orr.w	r3, r3, #8
 80069c8:	81a3      	strh	r3, [r4, #12]
 80069ca:	6923      	ldr	r3, [r4, #16]
 80069cc:	b94b      	cbnz	r3, 80069e2 <__swsetup_r+0x7a>
 80069ce:	89a3      	ldrh	r3, [r4, #12]
 80069d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80069d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069d8:	d003      	beq.n	80069e2 <__swsetup_r+0x7a>
 80069da:	4621      	mov	r1, r4
 80069dc:	4628      	mov	r0, r5
 80069de:	f000 ff65 	bl	80078ac <__smakebuf_r>
 80069e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069e6:	f013 0201 	ands.w	r2, r3, #1
 80069ea:	d00a      	beq.n	8006a02 <__swsetup_r+0x9a>
 80069ec:	2200      	movs	r2, #0
 80069ee:	60a2      	str	r2, [r4, #8]
 80069f0:	6962      	ldr	r2, [r4, #20]
 80069f2:	4252      	negs	r2, r2
 80069f4:	61a2      	str	r2, [r4, #24]
 80069f6:	6922      	ldr	r2, [r4, #16]
 80069f8:	b942      	cbnz	r2, 8006a0c <__swsetup_r+0xa4>
 80069fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80069fe:	d1c5      	bne.n	800698c <__swsetup_r+0x24>
 8006a00:	bd38      	pop	{r3, r4, r5, pc}
 8006a02:	0799      	lsls	r1, r3, #30
 8006a04:	bf58      	it	pl
 8006a06:	6962      	ldrpl	r2, [r4, #20]
 8006a08:	60a2      	str	r2, [r4, #8]
 8006a0a:	e7f4      	b.n	80069f6 <__swsetup_r+0x8e>
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	e7f7      	b.n	8006a00 <__swsetup_r+0x98>
 8006a10:	2000001c 	.word	0x2000001c

08006a14 <memset>:
 8006a14:	4402      	add	r2, r0
 8006a16:	4603      	mov	r3, r0
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d100      	bne.n	8006a1e <memset+0xa>
 8006a1c:	4770      	bx	lr
 8006a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a22:	e7f9      	b.n	8006a18 <memset+0x4>

08006a24 <strchr>:
 8006a24:	b2c9      	uxtb	r1, r1
 8006a26:	4603      	mov	r3, r0
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a2e:	b112      	cbz	r2, 8006a36 <strchr+0x12>
 8006a30:	428a      	cmp	r2, r1
 8006a32:	d1f9      	bne.n	8006a28 <strchr+0x4>
 8006a34:	4770      	bx	lr
 8006a36:	2900      	cmp	r1, #0
 8006a38:	bf18      	it	ne
 8006a3a:	2000      	movne	r0, #0
 8006a3c:	4770      	bx	lr

08006a3e <strncmp>:
 8006a3e:	b510      	push	{r4, lr}
 8006a40:	b16a      	cbz	r2, 8006a5e <strncmp+0x20>
 8006a42:	3901      	subs	r1, #1
 8006a44:	1884      	adds	r4, r0, r2
 8006a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a4a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d103      	bne.n	8006a5a <strncmp+0x1c>
 8006a52:	42a0      	cmp	r0, r4
 8006a54:	d001      	beq.n	8006a5a <strncmp+0x1c>
 8006a56:	2a00      	cmp	r2, #0
 8006a58:	d1f5      	bne.n	8006a46 <strncmp+0x8>
 8006a5a:	1ad0      	subs	r0, r2, r3
 8006a5c:	bd10      	pop	{r4, pc}
 8006a5e:	4610      	mov	r0, r2
 8006a60:	e7fc      	b.n	8006a5c <strncmp+0x1e>
	...

08006a64 <strtok>:
 8006a64:	4b16      	ldr	r3, [pc, #88]	@ (8006ac0 <strtok+0x5c>)
 8006a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a6a:	681f      	ldr	r7, [r3, #0]
 8006a6c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8006a6e:	4605      	mov	r5, r0
 8006a70:	460e      	mov	r6, r1
 8006a72:	b9ec      	cbnz	r4, 8006ab0 <strtok+0x4c>
 8006a74:	2050      	movs	r0, #80	@ 0x50
 8006a76:	f000 f959 	bl	8006d2c <malloc>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	6478      	str	r0, [r7, #68]	@ 0x44
 8006a7e:	b920      	cbnz	r0, 8006a8a <strtok+0x26>
 8006a80:	4b10      	ldr	r3, [pc, #64]	@ (8006ac4 <strtok+0x60>)
 8006a82:	4811      	ldr	r0, [pc, #68]	@ (8006ac8 <strtok+0x64>)
 8006a84:	215b      	movs	r1, #91	@ 0x5b
 8006a86:	f000 f8e9 	bl	8006c5c <__assert_func>
 8006a8a:	e9c0 4400 	strd	r4, r4, [r0]
 8006a8e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006a92:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006a96:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006a9a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006a9e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006aa2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006aa6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006aaa:	6184      	str	r4, [r0, #24]
 8006aac:	7704      	strb	r4, [r0, #28]
 8006aae:	6244      	str	r4, [r0, #36]	@ 0x24
 8006ab0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006abc:	f000 b806 	b.w	8006acc <__strtok_r>
 8006ac0:	2000001c 	.word	0x2000001c
 8006ac4:	08008e65 	.word	0x08008e65
 8006ac8:	08008e7c 	.word	0x08008e7c

08006acc <__strtok_r>:
 8006acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ace:	4604      	mov	r4, r0
 8006ad0:	b908      	cbnz	r0, 8006ad6 <__strtok_r+0xa>
 8006ad2:	6814      	ldr	r4, [r2, #0]
 8006ad4:	b144      	cbz	r4, 8006ae8 <__strtok_r+0x1c>
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006adc:	460f      	mov	r7, r1
 8006ade:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006ae2:	b91e      	cbnz	r6, 8006aec <__strtok_r+0x20>
 8006ae4:	b965      	cbnz	r5, 8006b00 <__strtok_r+0x34>
 8006ae6:	6015      	str	r5, [r2, #0]
 8006ae8:	2000      	movs	r0, #0
 8006aea:	e005      	b.n	8006af8 <__strtok_r+0x2c>
 8006aec:	42b5      	cmp	r5, r6
 8006aee:	d1f6      	bne.n	8006ade <__strtok_r+0x12>
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1f0      	bne.n	8006ad6 <__strtok_r+0xa>
 8006af4:	6014      	str	r4, [r2, #0]
 8006af6:	7003      	strb	r3, [r0, #0]
 8006af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006afa:	461c      	mov	r4, r3
 8006afc:	e00c      	b.n	8006b18 <__strtok_r+0x4c>
 8006afe:	b91d      	cbnz	r5, 8006b08 <__strtok_r+0x3c>
 8006b00:	4627      	mov	r7, r4
 8006b02:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b06:	460e      	mov	r6, r1
 8006b08:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006b0c:	42ab      	cmp	r3, r5
 8006b0e:	d1f6      	bne.n	8006afe <__strtok_r+0x32>
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0f2      	beq.n	8006afa <__strtok_r+0x2e>
 8006b14:	2300      	movs	r3, #0
 8006b16:	703b      	strb	r3, [r7, #0]
 8006b18:	6014      	str	r4, [r2, #0]
 8006b1a:	e7ed      	b.n	8006af8 <__strtok_r+0x2c>

08006b1c <strstr>:
 8006b1c:	780a      	ldrb	r2, [r1, #0]
 8006b1e:	b570      	push	{r4, r5, r6, lr}
 8006b20:	b96a      	cbnz	r2, 8006b3e <strstr+0x22>
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d109      	bne.n	8006b3c <strstr+0x20>
 8006b28:	460c      	mov	r4, r1
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0f6      	beq.n	8006b22 <strstr+0x6>
 8006b34:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006b38:	429e      	cmp	r6, r3
 8006b3a:	d0f7      	beq.n	8006b2c <strstr+0x10>
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	7803      	ldrb	r3, [r0, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1ef      	bne.n	8006b24 <strstr+0x8>
 8006b44:	4618      	mov	r0, r3
 8006b46:	e7ec      	b.n	8006b22 <strstr+0x6>

08006b48 <_close_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	4d06      	ldr	r5, [pc, #24]	@ (8006b64 <_close_r+0x1c>)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4604      	mov	r4, r0
 8006b50:	4608      	mov	r0, r1
 8006b52:	602b      	str	r3, [r5, #0]
 8006b54:	f7fb ff86 	bl	8002a64 <_close>
 8006b58:	1c43      	adds	r3, r0, #1
 8006b5a:	d102      	bne.n	8006b62 <_close_r+0x1a>
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	b103      	cbz	r3, 8006b62 <_close_r+0x1a>
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	20000c34 	.word	0x20000c34

08006b68 <_lseek_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4d07      	ldr	r5, [pc, #28]	@ (8006b88 <_lseek_r+0x20>)
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	4608      	mov	r0, r1
 8006b70:	4611      	mov	r1, r2
 8006b72:	2200      	movs	r2, #0
 8006b74:	602a      	str	r2, [r5, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	f7fb ff9b 	bl	8002ab2 <_lseek>
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	d102      	bne.n	8006b86 <_lseek_r+0x1e>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	b103      	cbz	r3, 8006b86 <_lseek_r+0x1e>
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
 8006b88:	20000c34 	.word	0x20000c34

08006b8c <_read_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	4d07      	ldr	r5, [pc, #28]	@ (8006bac <_read_r+0x20>)
 8006b90:	4604      	mov	r4, r0
 8006b92:	4608      	mov	r0, r1
 8006b94:	4611      	mov	r1, r2
 8006b96:	2200      	movs	r2, #0
 8006b98:	602a      	str	r2, [r5, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f7fb ff29 	bl	80029f2 <_read>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d102      	bne.n	8006baa <_read_r+0x1e>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	b103      	cbz	r3, 8006baa <_read_r+0x1e>
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	20000c34 	.word	0x20000c34

08006bb0 <_write_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4d07      	ldr	r5, [pc, #28]	@ (8006bd0 <_write_r+0x20>)
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	4608      	mov	r0, r1
 8006bb8:	4611      	mov	r1, r2
 8006bba:	2200      	movs	r2, #0
 8006bbc:	602a      	str	r2, [r5, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f7fb ff34 	bl	8002a2c <_write>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d102      	bne.n	8006bce <_write_r+0x1e>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	b103      	cbz	r3, 8006bce <_write_r+0x1e>
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	bd38      	pop	{r3, r4, r5, pc}
 8006bd0:	20000c34 	.word	0x20000c34

08006bd4 <__errno>:
 8006bd4:	4b01      	ldr	r3, [pc, #4]	@ (8006bdc <__errno+0x8>)
 8006bd6:	6818      	ldr	r0, [r3, #0]
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	2000001c 	.word	0x2000001c

08006be0 <__libc_init_array>:
 8006be0:	b570      	push	{r4, r5, r6, lr}
 8006be2:	4d0d      	ldr	r5, [pc, #52]	@ (8006c18 <__libc_init_array+0x38>)
 8006be4:	4c0d      	ldr	r4, [pc, #52]	@ (8006c1c <__libc_init_array+0x3c>)
 8006be6:	1b64      	subs	r4, r4, r5
 8006be8:	10a4      	asrs	r4, r4, #2
 8006bea:	2600      	movs	r6, #0
 8006bec:	42a6      	cmp	r6, r4
 8006bee:	d109      	bne.n	8006c04 <__libc_init_array+0x24>
 8006bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8006c20 <__libc_init_array+0x40>)
 8006bf2:	4c0c      	ldr	r4, [pc, #48]	@ (8006c24 <__libc_init_array+0x44>)
 8006bf4:	f001 fef6 	bl	80089e4 <_init>
 8006bf8:	1b64      	subs	r4, r4, r5
 8006bfa:	10a4      	asrs	r4, r4, #2
 8006bfc:	2600      	movs	r6, #0
 8006bfe:	42a6      	cmp	r6, r4
 8006c00:	d105      	bne.n	8006c0e <__libc_init_array+0x2e>
 8006c02:	bd70      	pop	{r4, r5, r6, pc}
 8006c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c08:	4798      	blx	r3
 8006c0a:	3601      	adds	r6, #1
 8006c0c:	e7ee      	b.n	8006bec <__libc_init_array+0xc>
 8006c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c12:	4798      	blx	r3
 8006c14:	3601      	adds	r6, #1
 8006c16:	e7f2      	b.n	8006bfe <__libc_init_array+0x1e>
 8006c18:	08008f90 	.word	0x08008f90
 8006c1c:	08008f90 	.word	0x08008f90
 8006c20:	08008f90 	.word	0x08008f90
 8006c24:	08008f94 	.word	0x08008f94

08006c28 <__retarget_lock_init_recursive>:
 8006c28:	4770      	bx	lr

08006c2a <__retarget_lock_acquire_recursive>:
 8006c2a:	4770      	bx	lr

08006c2c <__retarget_lock_release_recursive>:
 8006c2c:	4770      	bx	lr

08006c2e <strcpy>:
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c34:	f803 2b01 	strb.w	r2, [r3], #1
 8006c38:	2a00      	cmp	r2, #0
 8006c3a:	d1f9      	bne.n	8006c30 <strcpy+0x2>
 8006c3c:	4770      	bx	lr

08006c3e <memcpy>:
 8006c3e:	440a      	add	r2, r1
 8006c40:	4291      	cmp	r1, r2
 8006c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c46:	d100      	bne.n	8006c4a <memcpy+0xc>
 8006c48:	4770      	bx	lr
 8006c4a:	b510      	push	{r4, lr}
 8006c4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c54:	4291      	cmp	r1, r2
 8006c56:	d1f9      	bne.n	8006c4c <memcpy+0xe>
 8006c58:	bd10      	pop	{r4, pc}
	...

08006c5c <__assert_func>:
 8006c5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c5e:	4614      	mov	r4, r2
 8006c60:	461a      	mov	r2, r3
 8006c62:	4b09      	ldr	r3, [pc, #36]	@ (8006c88 <__assert_func+0x2c>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4605      	mov	r5, r0
 8006c68:	68d8      	ldr	r0, [r3, #12]
 8006c6a:	b14c      	cbz	r4, 8006c80 <__assert_func+0x24>
 8006c6c:	4b07      	ldr	r3, [pc, #28]	@ (8006c8c <__assert_func+0x30>)
 8006c6e:	9100      	str	r1, [sp, #0]
 8006c70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c74:	4906      	ldr	r1, [pc, #24]	@ (8006c90 <__assert_func+0x34>)
 8006c76:	462b      	mov	r3, r5
 8006c78:	f000 fde0 	bl	800783c <fiprintf>
 8006c7c:	f000 fed2 	bl	8007a24 <abort>
 8006c80:	4b04      	ldr	r3, [pc, #16]	@ (8006c94 <__assert_func+0x38>)
 8006c82:	461c      	mov	r4, r3
 8006c84:	e7f3      	b.n	8006c6e <__assert_func+0x12>
 8006c86:	bf00      	nop
 8006c88:	2000001c 	.word	0x2000001c
 8006c8c:	08008ed6 	.word	0x08008ed6
 8006c90:	08008ee3 	.word	0x08008ee3
 8006c94:	08008f11 	.word	0x08008f11

08006c98 <_free_r>:
 8006c98:	b538      	push	{r3, r4, r5, lr}
 8006c9a:	4605      	mov	r5, r0
 8006c9c:	2900      	cmp	r1, #0
 8006c9e:	d041      	beq.n	8006d24 <_free_r+0x8c>
 8006ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ca4:	1f0c      	subs	r4, r1, #4
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	bfb8      	it	lt
 8006caa:	18e4      	addlt	r4, r4, r3
 8006cac:	f000 f8e8 	bl	8006e80 <__malloc_lock>
 8006cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d28 <_free_r+0x90>)
 8006cb2:	6813      	ldr	r3, [r2, #0]
 8006cb4:	b933      	cbnz	r3, 8006cc4 <_free_r+0x2c>
 8006cb6:	6063      	str	r3, [r4, #4]
 8006cb8:	6014      	str	r4, [r2, #0]
 8006cba:	4628      	mov	r0, r5
 8006cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cc0:	f000 b8e4 	b.w	8006e8c <__malloc_unlock>
 8006cc4:	42a3      	cmp	r3, r4
 8006cc6:	d908      	bls.n	8006cda <_free_r+0x42>
 8006cc8:	6820      	ldr	r0, [r4, #0]
 8006cca:	1821      	adds	r1, r4, r0
 8006ccc:	428b      	cmp	r3, r1
 8006cce:	bf01      	itttt	eq
 8006cd0:	6819      	ldreq	r1, [r3, #0]
 8006cd2:	685b      	ldreq	r3, [r3, #4]
 8006cd4:	1809      	addeq	r1, r1, r0
 8006cd6:	6021      	streq	r1, [r4, #0]
 8006cd8:	e7ed      	b.n	8006cb6 <_free_r+0x1e>
 8006cda:	461a      	mov	r2, r3
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	b10b      	cbz	r3, 8006ce4 <_free_r+0x4c>
 8006ce0:	42a3      	cmp	r3, r4
 8006ce2:	d9fa      	bls.n	8006cda <_free_r+0x42>
 8006ce4:	6811      	ldr	r1, [r2, #0]
 8006ce6:	1850      	adds	r0, r2, r1
 8006ce8:	42a0      	cmp	r0, r4
 8006cea:	d10b      	bne.n	8006d04 <_free_r+0x6c>
 8006cec:	6820      	ldr	r0, [r4, #0]
 8006cee:	4401      	add	r1, r0
 8006cf0:	1850      	adds	r0, r2, r1
 8006cf2:	4283      	cmp	r3, r0
 8006cf4:	6011      	str	r1, [r2, #0]
 8006cf6:	d1e0      	bne.n	8006cba <_free_r+0x22>
 8006cf8:	6818      	ldr	r0, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	6053      	str	r3, [r2, #4]
 8006cfe:	4408      	add	r0, r1
 8006d00:	6010      	str	r0, [r2, #0]
 8006d02:	e7da      	b.n	8006cba <_free_r+0x22>
 8006d04:	d902      	bls.n	8006d0c <_free_r+0x74>
 8006d06:	230c      	movs	r3, #12
 8006d08:	602b      	str	r3, [r5, #0]
 8006d0a:	e7d6      	b.n	8006cba <_free_r+0x22>
 8006d0c:	6820      	ldr	r0, [r4, #0]
 8006d0e:	1821      	adds	r1, r4, r0
 8006d10:	428b      	cmp	r3, r1
 8006d12:	bf04      	itt	eq
 8006d14:	6819      	ldreq	r1, [r3, #0]
 8006d16:	685b      	ldreq	r3, [r3, #4]
 8006d18:	6063      	str	r3, [r4, #4]
 8006d1a:	bf04      	itt	eq
 8006d1c:	1809      	addeq	r1, r1, r0
 8006d1e:	6021      	streq	r1, [r4, #0]
 8006d20:	6054      	str	r4, [r2, #4]
 8006d22:	e7ca      	b.n	8006cba <_free_r+0x22>
 8006d24:	bd38      	pop	{r3, r4, r5, pc}
 8006d26:	bf00      	nop
 8006d28:	20000c40 	.word	0x20000c40

08006d2c <malloc>:
 8006d2c:	4b02      	ldr	r3, [pc, #8]	@ (8006d38 <malloc+0xc>)
 8006d2e:	4601      	mov	r1, r0
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	f000 b825 	b.w	8006d80 <_malloc_r>
 8006d36:	bf00      	nop
 8006d38:	2000001c 	.word	0x2000001c

08006d3c <sbrk_aligned>:
 8006d3c:	b570      	push	{r4, r5, r6, lr}
 8006d3e:	4e0f      	ldr	r6, [pc, #60]	@ (8006d7c <sbrk_aligned+0x40>)
 8006d40:	460c      	mov	r4, r1
 8006d42:	6831      	ldr	r1, [r6, #0]
 8006d44:	4605      	mov	r5, r0
 8006d46:	b911      	cbnz	r1, 8006d4e <sbrk_aligned+0x12>
 8006d48:	f000 fe5c 	bl	8007a04 <_sbrk_r>
 8006d4c:	6030      	str	r0, [r6, #0]
 8006d4e:	4621      	mov	r1, r4
 8006d50:	4628      	mov	r0, r5
 8006d52:	f000 fe57 	bl	8007a04 <_sbrk_r>
 8006d56:	1c43      	adds	r3, r0, #1
 8006d58:	d103      	bne.n	8006d62 <sbrk_aligned+0x26>
 8006d5a:	f04f 34ff 	mov.w	r4, #4294967295
 8006d5e:	4620      	mov	r0, r4
 8006d60:	bd70      	pop	{r4, r5, r6, pc}
 8006d62:	1cc4      	adds	r4, r0, #3
 8006d64:	f024 0403 	bic.w	r4, r4, #3
 8006d68:	42a0      	cmp	r0, r4
 8006d6a:	d0f8      	beq.n	8006d5e <sbrk_aligned+0x22>
 8006d6c:	1a21      	subs	r1, r4, r0
 8006d6e:	4628      	mov	r0, r5
 8006d70:	f000 fe48 	bl	8007a04 <_sbrk_r>
 8006d74:	3001      	adds	r0, #1
 8006d76:	d1f2      	bne.n	8006d5e <sbrk_aligned+0x22>
 8006d78:	e7ef      	b.n	8006d5a <sbrk_aligned+0x1e>
 8006d7a:	bf00      	nop
 8006d7c:	20000c3c 	.word	0x20000c3c

08006d80 <_malloc_r>:
 8006d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d84:	1ccd      	adds	r5, r1, #3
 8006d86:	f025 0503 	bic.w	r5, r5, #3
 8006d8a:	3508      	adds	r5, #8
 8006d8c:	2d0c      	cmp	r5, #12
 8006d8e:	bf38      	it	cc
 8006d90:	250c      	movcc	r5, #12
 8006d92:	2d00      	cmp	r5, #0
 8006d94:	4606      	mov	r6, r0
 8006d96:	db01      	blt.n	8006d9c <_malloc_r+0x1c>
 8006d98:	42a9      	cmp	r1, r5
 8006d9a:	d904      	bls.n	8006da6 <_malloc_r+0x26>
 8006d9c:	230c      	movs	r3, #12
 8006d9e:	6033      	str	r3, [r6, #0]
 8006da0:	2000      	movs	r0, #0
 8006da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006da6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e7c <_malloc_r+0xfc>
 8006daa:	f000 f869 	bl	8006e80 <__malloc_lock>
 8006dae:	f8d8 3000 	ldr.w	r3, [r8]
 8006db2:	461c      	mov	r4, r3
 8006db4:	bb44      	cbnz	r4, 8006e08 <_malloc_r+0x88>
 8006db6:	4629      	mov	r1, r5
 8006db8:	4630      	mov	r0, r6
 8006dba:	f7ff ffbf 	bl	8006d3c <sbrk_aligned>
 8006dbe:	1c43      	adds	r3, r0, #1
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	d158      	bne.n	8006e76 <_malloc_r+0xf6>
 8006dc4:	f8d8 4000 	ldr.w	r4, [r8]
 8006dc8:	4627      	mov	r7, r4
 8006dca:	2f00      	cmp	r7, #0
 8006dcc:	d143      	bne.n	8006e56 <_malloc_r+0xd6>
 8006dce:	2c00      	cmp	r4, #0
 8006dd0:	d04b      	beq.n	8006e6a <_malloc_r+0xea>
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	4639      	mov	r1, r7
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	eb04 0903 	add.w	r9, r4, r3
 8006ddc:	f000 fe12 	bl	8007a04 <_sbrk_r>
 8006de0:	4581      	cmp	r9, r0
 8006de2:	d142      	bne.n	8006e6a <_malloc_r+0xea>
 8006de4:	6821      	ldr	r1, [r4, #0]
 8006de6:	1a6d      	subs	r5, r5, r1
 8006de8:	4629      	mov	r1, r5
 8006dea:	4630      	mov	r0, r6
 8006dec:	f7ff ffa6 	bl	8006d3c <sbrk_aligned>
 8006df0:	3001      	adds	r0, #1
 8006df2:	d03a      	beq.n	8006e6a <_malloc_r+0xea>
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	442b      	add	r3, r5
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	f8d8 3000 	ldr.w	r3, [r8]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	bb62      	cbnz	r2, 8006e5c <_malloc_r+0xdc>
 8006e02:	f8c8 7000 	str.w	r7, [r8]
 8006e06:	e00f      	b.n	8006e28 <_malloc_r+0xa8>
 8006e08:	6822      	ldr	r2, [r4, #0]
 8006e0a:	1b52      	subs	r2, r2, r5
 8006e0c:	d420      	bmi.n	8006e50 <_malloc_r+0xd0>
 8006e0e:	2a0b      	cmp	r2, #11
 8006e10:	d917      	bls.n	8006e42 <_malloc_r+0xc2>
 8006e12:	1961      	adds	r1, r4, r5
 8006e14:	42a3      	cmp	r3, r4
 8006e16:	6025      	str	r5, [r4, #0]
 8006e18:	bf18      	it	ne
 8006e1a:	6059      	strne	r1, [r3, #4]
 8006e1c:	6863      	ldr	r3, [r4, #4]
 8006e1e:	bf08      	it	eq
 8006e20:	f8c8 1000 	streq.w	r1, [r8]
 8006e24:	5162      	str	r2, [r4, r5]
 8006e26:	604b      	str	r3, [r1, #4]
 8006e28:	4630      	mov	r0, r6
 8006e2a:	f000 f82f 	bl	8006e8c <__malloc_unlock>
 8006e2e:	f104 000b 	add.w	r0, r4, #11
 8006e32:	1d23      	adds	r3, r4, #4
 8006e34:	f020 0007 	bic.w	r0, r0, #7
 8006e38:	1ac2      	subs	r2, r0, r3
 8006e3a:	bf1c      	itt	ne
 8006e3c:	1a1b      	subne	r3, r3, r0
 8006e3e:	50a3      	strne	r3, [r4, r2]
 8006e40:	e7af      	b.n	8006da2 <_malloc_r+0x22>
 8006e42:	6862      	ldr	r2, [r4, #4]
 8006e44:	42a3      	cmp	r3, r4
 8006e46:	bf0c      	ite	eq
 8006e48:	f8c8 2000 	streq.w	r2, [r8]
 8006e4c:	605a      	strne	r2, [r3, #4]
 8006e4e:	e7eb      	b.n	8006e28 <_malloc_r+0xa8>
 8006e50:	4623      	mov	r3, r4
 8006e52:	6864      	ldr	r4, [r4, #4]
 8006e54:	e7ae      	b.n	8006db4 <_malloc_r+0x34>
 8006e56:	463c      	mov	r4, r7
 8006e58:	687f      	ldr	r7, [r7, #4]
 8006e5a:	e7b6      	b.n	8006dca <_malloc_r+0x4a>
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	42a3      	cmp	r3, r4
 8006e62:	d1fb      	bne.n	8006e5c <_malloc_r+0xdc>
 8006e64:	2300      	movs	r3, #0
 8006e66:	6053      	str	r3, [r2, #4]
 8006e68:	e7de      	b.n	8006e28 <_malloc_r+0xa8>
 8006e6a:	230c      	movs	r3, #12
 8006e6c:	6033      	str	r3, [r6, #0]
 8006e6e:	4630      	mov	r0, r6
 8006e70:	f000 f80c 	bl	8006e8c <__malloc_unlock>
 8006e74:	e794      	b.n	8006da0 <_malloc_r+0x20>
 8006e76:	6005      	str	r5, [r0, #0]
 8006e78:	e7d6      	b.n	8006e28 <_malloc_r+0xa8>
 8006e7a:	bf00      	nop
 8006e7c:	20000c40 	.word	0x20000c40

08006e80 <__malloc_lock>:
 8006e80:	4801      	ldr	r0, [pc, #4]	@ (8006e88 <__malloc_lock+0x8>)
 8006e82:	f7ff bed2 	b.w	8006c2a <__retarget_lock_acquire_recursive>
 8006e86:	bf00      	nop
 8006e88:	20000c38 	.word	0x20000c38

08006e8c <__malloc_unlock>:
 8006e8c:	4801      	ldr	r0, [pc, #4]	@ (8006e94 <__malloc_unlock+0x8>)
 8006e8e:	f7ff becd 	b.w	8006c2c <__retarget_lock_release_recursive>
 8006e92:	bf00      	nop
 8006e94:	20000c38 	.word	0x20000c38

08006e98 <__ssputs_r>:
 8006e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e9c:	688e      	ldr	r6, [r1, #8]
 8006e9e:	461f      	mov	r7, r3
 8006ea0:	42be      	cmp	r6, r7
 8006ea2:	680b      	ldr	r3, [r1, #0]
 8006ea4:	4682      	mov	sl, r0
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	4690      	mov	r8, r2
 8006eaa:	d82d      	bhi.n	8006f08 <__ssputs_r+0x70>
 8006eac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006eb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006eb4:	d026      	beq.n	8006f04 <__ssputs_r+0x6c>
 8006eb6:	6965      	ldr	r5, [r4, #20]
 8006eb8:	6909      	ldr	r1, [r1, #16]
 8006eba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ebe:	eba3 0901 	sub.w	r9, r3, r1
 8006ec2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ec6:	1c7b      	adds	r3, r7, #1
 8006ec8:	444b      	add	r3, r9
 8006eca:	106d      	asrs	r5, r5, #1
 8006ecc:	429d      	cmp	r5, r3
 8006ece:	bf38      	it	cc
 8006ed0:	461d      	movcc	r5, r3
 8006ed2:	0553      	lsls	r3, r2, #21
 8006ed4:	d527      	bpl.n	8006f26 <__ssputs_r+0x8e>
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	f7ff ff52 	bl	8006d80 <_malloc_r>
 8006edc:	4606      	mov	r6, r0
 8006ede:	b360      	cbz	r0, 8006f3a <__ssputs_r+0xa2>
 8006ee0:	6921      	ldr	r1, [r4, #16]
 8006ee2:	464a      	mov	r2, r9
 8006ee4:	f7ff feab 	bl	8006c3e <memcpy>
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ef2:	81a3      	strh	r3, [r4, #12]
 8006ef4:	6126      	str	r6, [r4, #16]
 8006ef6:	6165      	str	r5, [r4, #20]
 8006ef8:	444e      	add	r6, r9
 8006efa:	eba5 0509 	sub.w	r5, r5, r9
 8006efe:	6026      	str	r6, [r4, #0]
 8006f00:	60a5      	str	r5, [r4, #8]
 8006f02:	463e      	mov	r6, r7
 8006f04:	42be      	cmp	r6, r7
 8006f06:	d900      	bls.n	8006f0a <__ssputs_r+0x72>
 8006f08:	463e      	mov	r6, r7
 8006f0a:	6820      	ldr	r0, [r4, #0]
 8006f0c:	4632      	mov	r2, r6
 8006f0e:	4641      	mov	r1, r8
 8006f10:	f000 fd3c 	bl	800798c <memmove>
 8006f14:	68a3      	ldr	r3, [r4, #8]
 8006f16:	1b9b      	subs	r3, r3, r6
 8006f18:	60a3      	str	r3, [r4, #8]
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	4433      	add	r3, r6
 8006f1e:	6023      	str	r3, [r4, #0]
 8006f20:	2000      	movs	r0, #0
 8006f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f26:	462a      	mov	r2, r5
 8006f28:	f000 fd83 	bl	8007a32 <_realloc_r>
 8006f2c:	4606      	mov	r6, r0
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d1e0      	bne.n	8006ef4 <__ssputs_r+0x5c>
 8006f32:	6921      	ldr	r1, [r4, #16]
 8006f34:	4650      	mov	r0, sl
 8006f36:	f7ff feaf 	bl	8006c98 <_free_r>
 8006f3a:	230c      	movs	r3, #12
 8006f3c:	f8ca 3000 	str.w	r3, [sl]
 8006f40:	89a3      	ldrh	r3, [r4, #12]
 8006f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f46:	81a3      	strh	r3, [r4, #12]
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4c:	e7e9      	b.n	8006f22 <__ssputs_r+0x8a>
	...

08006f50 <_svfiprintf_r>:
 8006f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f54:	4698      	mov	r8, r3
 8006f56:	898b      	ldrh	r3, [r1, #12]
 8006f58:	061b      	lsls	r3, r3, #24
 8006f5a:	b09d      	sub	sp, #116	@ 0x74
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	460d      	mov	r5, r1
 8006f60:	4614      	mov	r4, r2
 8006f62:	d510      	bpl.n	8006f86 <_svfiprintf_r+0x36>
 8006f64:	690b      	ldr	r3, [r1, #16]
 8006f66:	b973      	cbnz	r3, 8006f86 <_svfiprintf_r+0x36>
 8006f68:	2140      	movs	r1, #64	@ 0x40
 8006f6a:	f7ff ff09 	bl	8006d80 <_malloc_r>
 8006f6e:	6028      	str	r0, [r5, #0]
 8006f70:	6128      	str	r0, [r5, #16]
 8006f72:	b930      	cbnz	r0, 8006f82 <_svfiprintf_r+0x32>
 8006f74:	230c      	movs	r3, #12
 8006f76:	603b      	str	r3, [r7, #0]
 8006f78:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7c:	b01d      	add	sp, #116	@ 0x74
 8006f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f82:	2340      	movs	r3, #64	@ 0x40
 8006f84:	616b      	str	r3, [r5, #20]
 8006f86:	2300      	movs	r3, #0
 8006f88:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f8a:	2320      	movs	r3, #32
 8006f8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f90:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f94:	2330      	movs	r3, #48	@ 0x30
 8006f96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007134 <_svfiprintf_r+0x1e4>
 8006f9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f9e:	f04f 0901 	mov.w	r9, #1
 8006fa2:	4623      	mov	r3, r4
 8006fa4:	469a      	mov	sl, r3
 8006fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006faa:	b10a      	cbz	r2, 8006fb0 <_svfiprintf_r+0x60>
 8006fac:	2a25      	cmp	r2, #37	@ 0x25
 8006fae:	d1f9      	bne.n	8006fa4 <_svfiprintf_r+0x54>
 8006fb0:	ebba 0b04 	subs.w	fp, sl, r4
 8006fb4:	d00b      	beq.n	8006fce <_svfiprintf_r+0x7e>
 8006fb6:	465b      	mov	r3, fp
 8006fb8:	4622      	mov	r2, r4
 8006fba:	4629      	mov	r1, r5
 8006fbc:	4638      	mov	r0, r7
 8006fbe:	f7ff ff6b 	bl	8006e98 <__ssputs_r>
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	f000 80a7 	beq.w	8007116 <_svfiprintf_r+0x1c6>
 8006fc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fca:	445a      	add	r2, fp
 8006fcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fce:	f89a 3000 	ldrb.w	r3, [sl]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 809f 	beq.w	8007116 <_svfiprintf_r+0x1c6>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f04f 32ff 	mov.w	r2, #4294967295
 8006fde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fe2:	f10a 0a01 	add.w	sl, sl, #1
 8006fe6:	9304      	str	r3, [sp, #16]
 8006fe8:	9307      	str	r3, [sp, #28]
 8006fea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006fee:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ff0:	4654      	mov	r4, sl
 8006ff2:	2205      	movs	r2, #5
 8006ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ff8:	484e      	ldr	r0, [pc, #312]	@ (8007134 <_svfiprintf_r+0x1e4>)
 8006ffa:	f7f9 f909 	bl	8000210 <memchr>
 8006ffe:	9a04      	ldr	r2, [sp, #16]
 8007000:	b9d8      	cbnz	r0, 800703a <_svfiprintf_r+0xea>
 8007002:	06d0      	lsls	r0, r2, #27
 8007004:	bf44      	itt	mi
 8007006:	2320      	movmi	r3, #32
 8007008:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800700c:	0711      	lsls	r1, r2, #28
 800700e:	bf44      	itt	mi
 8007010:	232b      	movmi	r3, #43	@ 0x2b
 8007012:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007016:	f89a 3000 	ldrb.w	r3, [sl]
 800701a:	2b2a      	cmp	r3, #42	@ 0x2a
 800701c:	d015      	beq.n	800704a <_svfiprintf_r+0xfa>
 800701e:	9a07      	ldr	r2, [sp, #28]
 8007020:	4654      	mov	r4, sl
 8007022:	2000      	movs	r0, #0
 8007024:	f04f 0c0a 	mov.w	ip, #10
 8007028:	4621      	mov	r1, r4
 800702a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800702e:	3b30      	subs	r3, #48	@ 0x30
 8007030:	2b09      	cmp	r3, #9
 8007032:	d94b      	bls.n	80070cc <_svfiprintf_r+0x17c>
 8007034:	b1b0      	cbz	r0, 8007064 <_svfiprintf_r+0x114>
 8007036:	9207      	str	r2, [sp, #28]
 8007038:	e014      	b.n	8007064 <_svfiprintf_r+0x114>
 800703a:	eba0 0308 	sub.w	r3, r0, r8
 800703e:	fa09 f303 	lsl.w	r3, r9, r3
 8007042:	4313      	orrs	r3, r2
 8007044:	9304      	str	r3, [sp, #16]
 8007046:	46a2      	mov	sl, r4
 8007048:	e7d2      	b.n	8006ff0 <_svfiprintf_r+0xa0>
 800704a:	9b03      	ldr	r3, [sp, #12]
 800704c:	1d19      	adds	r1, r3, #4
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	9103      	str	r1, [sp, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	bfbb      	ittet	lt
 8007056:	425b      	neglt	r3, r3
 8007058:	f042 0202 	orrlt.w	r2, r2, #2
 800705c:	9307      	strge	r3, [sp, #28]
 800705e:	9307      	strlt	r3, [sp, #28]
 8007060:	bfb8      	it	lt
 8007062:	9204      	strlt	r2, [sp, #16]
 8007064:	7823      	ldrb	r3, [r4, #0]
 8007066:	2b2e      	cmp	r3, #46	@ 0x2e
 8007068:	d10a      	bne.n	8007080 <_svfiprintf_r+0x130>
 800706a:	7863      	ldrb	r3, [r4, #1]
 800706c:	2b2a      	cmp	r3, #42	@ 0x2a
 800706e:	d132      	bne.n	80070d6 <_svfiprintf_r+0x186>
 8007070:	9b03      	ldr	r3, [sp, #12]
 8007072:	1d1a      	adds	r2, r3, #4
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	9203      	str	r2, [sp, #12]
 8007078:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800707c:	3402      	adds	r4, #2
 800707e:	9305      	str	r3, [sp, #20]
 8007080:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007144 <_svfiprintf_r+0x1f4>
 8007084:	7821      	ldrb	r1, [r4, #0]
 8007086:	2203      	movs	r2, #3
 8007088:	4650      	mov	r0, sl
 800708a:	f7f9 f8c1 	bl	8000210 <memchr>
 800708e:	b138      	cbz	r0, 80070a0 <_svfiprintf_r+0x150>
 8007090:	9b04      	ldr	r3, [sp, #16]
 8007092:	eba0 000a 	sub.w	r0, r0, sl
 8007096:	2240      	movs	r2, #64	@ 0x40
 8007098:	4082      	lsls	r2, r0
 800709a:	4313      	orrs	r3, r2
 800709c:	3401      	adds	r4, #1
 800709e:	9304      	str	r3, [sp, #16]
 80070a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a4:	4824      	ldr	r0, [pc, #144]	@ (8007138 <_svfiprintf_r+0x1e8>)
 80070a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070aa:	2206      	movs	r2, #6
 80070ac:	f7f9 f8b0 	bl	8000210 <memchr>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d036      	beq.n	8007122 <_svfiprintf_r+0x1d2>
 80070b4:	4b21      	ldr	r3, [pc, #132]	@ (800713c <_svfiprintf_r+0x1ec>)
 80070b6:	bb1b      	cbnz	r3, 8007100 <_svfiprintf_r+0x1b0>
 80070b8:	9b03      	ldr	r3, [sp, #12]
 80070ba:	3307      	adds	r3, #7
 80070bc:	f023 0307 	bic.w	r3, r3, #7
 80070c0:	3308      	adds	r3, #8
 80070c2:	9303      	str	r3, [sp, #12]
 80070c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070c6:	4433      	add	r3, r6
 80070c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80070ca:	e76a      	b.n	8006fa2 <_svfiprintf_r+0x52>
 80070cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80070d0:	460c      	mov	r4, r1
 80070d2:	2001      	movs	r0, #1
 80070d4:	e7a8      	b.n	8007028 <_svfiprintf_r+0xd8>
 80070d6:	2300      	movs	r3, #0
 80070d8:	3401      	adds	r4, #1
 80070da:	9305      	str	r3, [sp, #20]
 80070dc:	4619      	mov	r1, r3
 80070de:	f04f 0c0a 	mov.w	ip, #10
 80070e2:	4620      	mov	r0, r4
 80070e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070e8:	3a30      	subs	r2, #48	@ 0x30
 80070ea:	2a09      	cmp	r2, #9
 80070ec:	d903      	bls.n	80070f6 <_svfiprintf_r+0x1a6>
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d0c6      	beq.n	8007080 <_svfiprintf_r+0x130>
 80070f2:	9105      	str	r1, [sp, #20]
 80070f4:	e7c4      	b.n	8007080 <_svfiprintf_r+0x130>
 80070f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80070fa:	4604      	mov	r4, r0
 80070fc:	2301      	movs	r3, #1
 80070fe:	e7f0      	b.n	80070e2 <_svfiprintf_r+0x192>
 8007100:	ab03      	add	r3, sp, #12
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	462a      	mov	r2, r5
 8007106:	4b0e      	ldr	r3, [pc, #56]	@ (8007140 <_svfiprintf_r+0x1f0>)
 8007108:	a904      	add	r1, sp, #16
 800710a:	4638      	mov	r0, r7
 800710c:	f3af 8000 	nop.w
 8007110:	1c42      	adds	r2, r0, #1
 8007112:	4606      	mov	r6, r0
 8007114:	d1d6      	bne.n	80070c4 <_svfiprintf_r+0x174>
 8007116:	89ab      	ldrh	r3, [r5, #12]
 8007118:	065b      	lsls	r3, r3, #25
 800711a:	f53f af2d 	bmi.w	8006f78 <_svfiprintf_r+0x28>
 800711e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007120:	e72c      	b.n	8006f7c <_svfiprintf_r+0x2c>
 8007122:	ab03      	add	r3, sp, #12
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	462a      	mov	r2, r5
 8007128:	4b05      	ldr	r3, [pc, #20]	@ (8007140 <_svfiprintf_r+0x1f0>)
 800712a:	a904      	add	r1, sp, #16
 800712c:	4638      	mov	r0, r7
 800712e:	f000 f9bb 	bl	80074a8 <_printf_i>
 8007132:	e7ed      	b.n	8007110 <_svfiprintf_r+0x1c0>
 8007134:	08008f12 	.word	0x08008f12
 8007138:	08008f1c 	.word	0x08008f1c
 800713c:	00000000 	.word	0x00000000
 8007140:	08006e99 	.word	0x08006e99
 8007144:	08008f18 	.word	0x08008f18

08007148 <__sfputc_r>:
 8007148:	6893      	ldr	r3, [r2, #8]
 800714a:	3b01      	subs	r3, #1
 800714c:	2b00      	cmp	r3, #0
 800714e:	b410      	push	{r4}
 8007150:	6093      	str	r3, [r2, #8]
 8007152:	da08      	bge.n	8007166 <__sfputc_r+0x1e>
 8007154:	6994      	ldr	r4, [r2, #24]
 8007156:	42a3      	cmp	r3, r4
 8007158:	db01      	blt.n	800715e <__sfputc_r+0x16>
 800715a:	290a      	cmp	r1, #10
 800715c:	d103      	bne.n	8007166 <__sfputc_r+0x1e>
 800715e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007162:	f7ff bbc2 	b.w	80068ea <__swbuf_r>
 8007166:	6813      	ldr	r3, [r2, #0]
 8007168:	1c58      	adds	r0, r3, #1
 800716a:	6010      	str	r0, [r2, #0]
 800716c:	7019      	strb	r1, [r3, #0]
 800716e:	4608      	mov	r0, r1
 8007170:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007174:	4770      	bx	lr

08007176 <__sfputs_r>:
 8007176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007178:	4606      	mov	r6, r0
 800717a:	460f      	mov	r7, r1
 800717c:	4614      	mov	r4, r2
 800717e:	18d5      	adds	r5, r2, r3
 8007180:	42ac      	cmp	r4, r5
 8007182:	d101      	bne.n	8007188 <__sfputs_r+0x12>
 8007184:	2000      	movs	r0, #0
 8007186:	e007      	b.n	8007198 <__sfputs_r+0x22>
 8007188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800718c:	463a      	mov	r2, r7
 800718e:	4630      	mov	r0, r6
 8007190:	f7ff ffda 	bl	8007148 <__sfputc_r>
 8007194:	1c43      	adds	r3, r0, #1
 8007196:	d1f3      	bne.n	8007180 <__sfputs_r+0xa>
 8007198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800719c <_vfiprintf_r>:
 800719c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a0:	460d      	mov	r5, r1
 80071a2:	b09d      	sub	sp, #116	@ 0x74
 80071a4:	4614      	mov	r4, r2
 80071a6:	4698      	mov	r8, r3
 80071a8:	4606      	mov	r6, r0
 80071aa:	b118      	cbz	r0, 80071b4 <_vfiprintf_r+0x18>
 80071ac:	6a03      	ldr	r3, [r0, #32]
 80071ae:	b90b      	cbnz	r3, 80071b4 <_vfiprintf_r+0x18>
 80071b0:	f7ff fa88 	bl	80066c4 <__sinit>
 80071b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071b6:	07d9      	lsls	r1, r3, #31
 80071b8:	d405      	bmi.n	80071c6 <_vfiprintf_r+0x2a>
 80071ba:	89ab      	ldrh	r3, [r5, #12]
 80071bc:	059a      	lsls	r2, r3, #22
 80071be:	d402      	bmi.n	80071c6 <_vfiprintf_r+0x2a>
 80071c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071c2:	f7ff fd32 	bl	8006c2a <__retarget_lock_acquire_recursive>
 80071c6:	89ab      	ldrh	r3, [r5, #12]
 80071c8:	071b      	lsls	r3, r3, #28
 80071ca:	d501      	bpl.n	80071d0 <_vfiprintf_r+0x34>
 80071cc:	692b      	ldr	r3, [r5, #16]
 80071ce:	b99b      	cbnz	r3, 80071f8 <_vfiprintf_r+0x5c>
 80071d0:	4629      	mov	r1, r5
 80071d2:	4630      	mov	r0, r6
 80071d4:	f7ff fbc8 	bl	8006968 <__swsetup_r>
 80071d8:	b170      	cbz	r0, 80071f8 <_vfiprintf_r+0x5c>
 80071da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071dc:	07dc      	lsls	r4, r3, #31
 80071de:	d504      	bpl.n	80071ea <_vfiprintf_r+0x4e>
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295
 80071e4:	b01d      	add	sp, #116	@ 0x74
 80071e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ea:	89ab      	ldrh	r3, [r5, #12]
 80071ec:	0598      	lsls	r0, r3, #22
 80071ee:	d4f7      	bmi.n	80071e0 <_vfiprintf_r+0x44>
 80071f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071f2:	f7ff fd1b 	bl	8006c2c <__retarget_lock_release_recursive>
 80071f6:	e7f3      	b.n	80071e0 <_vfiprintf_r+0x44>
 80071f8:	2300      	movs	r3, #0
 80071fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80071fc:	2320      	movs	r3, #32
 80071fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007202:	f8cd 800c 	str.w	r8, [sp, #12]
 8007206:	2330      	movs	r3, #48	@ 0x30
 8007208:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80073b8 <_vfiprintf_r+0x21c>
 800720c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007210:	f04f 0901 	mov.w	r9, #1
 8007214:	4623      	mov	r3, r4
 8007216:	469a      	mov	sl, r3
 8007218:	f813 2b01 	ldrb.w	r2, [r3], #1
 800721c:	b10a      	cbz	r2, 8007222 <_vfiprintf_r+0x86>
 800721e:	2a25      	cmp	r2, #37	@ 0x25
 8007220:	d1f9      	bne.n	8007216 <_vfiprintf_r+0x7a>
 8007222:	ebba 0b04 	subs.w	fp, sl, r4
 8007226:	d00b      	beq.n	8007240 <_vfiprintf_r+0xa4>
 8007228:	465b      	mov	r3, fp
 800722a:	4622      	mov	r2, r4
 800722c:	4629      	mov	r1, r5
 800722e:	4630      	mov	r0, r6
 8007230:	f7ff ffa1 	bl	8007176 <__sfputs_r>
 8007234:	3001      	adds	r0, #1
 8007236:	f000 80a7 	beq.w	8007388 <_vfiprintf_r+0x1ec>
 800723a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800723c:	445a      	add	r2, fp
 800723e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007240:	f89a 3000 	ldrb.w	r3, [sl]
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 809f 	beq.w	8007388 <_vfiprintf_r+0x1ec>
 800724a:	2300      	movs	r3, #0
 800724c:	f04f 32ff 	mov.w	r2, #4294967295
 8007250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007254:	f10a 0a01 	add.w	sl, sl, #1
 8007258:	9304      	str	r3, [sp, #16]
 800725a:	9307      	str	r3, [sp, #28]
 800725c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007260:	931a      	str	r3, [sp, #104]	@ 0x68
 8007262:	4654      	mov	r4, sl
 8007264:	2205      	movs	r2, #5
 8007266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800726a:	4853      	ldr	r0, [pc, #332]	@ (80073b8 <_vfiprintf_r+0x21c>)
 800726c:	f7f8 ffd0 	bl	8000210 <memchr>
 8007270:	9a04      	ldr	r2, [sp, #16]
 8007272:	b9d8      	cbnz	r0, 80072ac <_vfiprintf_r+0x110>
 8007274:	06d1      	lsls	r1, r2, #27
 8007276:	bf44      	itt	mi
 8007278:	2320      	movmi	r3, #32
 800727a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800727e:	0713      	lsls	r3, r2, #28
 8007280:	bf44      	itt	mi
 8007282:	232b      	movmi	r3, #43	@ 0x2b
 8007284:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007288:	f89a 3000 	ldrb.w	r3, [sl]
 800728c:	2b2a      	cmp	r3, #42	@ 0x2a
 800728e:	d015      	beq.n	80072bc <_vfiprintf_r+0x120>
 8007290:	9a07      	ldr	r2, [sp, #28]
 8007292:	4654      	mov	r4, sl
 8007294:	2000      	movs	r0, #0
 8007296:	f04f 0c0a 	mov.w	ip, #10
 800729a:	4621      	mov	r1, r4
 800729c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072a0:	3b30      	subs	r3, #48	@ 0x30
 80072a2:	2b09      	cmp	r3, #9
 80072a4:	d94b      	bls.n	800733e <_vfiprintf_r+0x1a2>
 80072a6:	b1b0      	cbz	r0, 80072d6 <_vfiprintf_r+0x13a>
 80072a8:	9207      	str	r2, [sp, #28]
 80072aa:	e014      	b.n	80072d6 <_vfiprintf_r+0x13a>
 80072ac:	eba0 0308 	sub.w	r3, r0, r8
 80072b0:	fa09 f303 	lsl.w	r3, r9, r3
 80072b4:	4313      	orrs	r3, r2
 80072b6:	9304      	str	r3, [sp, #16]
 80072b8:	46a2      	mov	sl, r4
 80072ba:	e7d2      	b.n	8007262 <_vfiprintf_r+0xc6>
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	1d19      	adds	r1, r3, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	9103      	str	r1, [sp, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	bfbb      	ittet	lt
 80072c8:	425b      	neglt	r3, r3
 80072ca:	f042 0202 	orrlt.w	r2, r2, #2
 80072ce:	9307      	strge	r3, [sp, #28]
 80072d0:	9307      	strlt	r3, [sp, #28]
 80072d2:	bfb8      	it	lt
 80072d4:	9204      	strlt	r2, [sp, #16]
 80072d6:	7823      	ldrb	r3, [r4, #0]
 80072d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80072da:	d10a      	bne.n	80072f2 <_vfiprintf_r+0x156>
 80072dc:	7863      	ldrb	r3, [r4, #1]
 80072de:	2b2a      	cmp	r3, #42	@ 0x2a
 80072e0:	d132      	bne.n	8007348 <_vfiprintf_r+0x1ac>
 80072e2:	9b03      	ldr	r3, [sp, #12]
 80072e4:	1d1a      	adds	r2, r3, #4
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	9203      	str	r2, [sp, #12]
 80072ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072ee:	3402      	adds	r4, #2
 80072f0:	9305      	str	r3, [sp, #20]
 80072f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80073c8 <_vfiprintf_r+0x22c>
 80072f6:	7821      	ldrb	r1, [r4, #0]
 80072f8:	2203      	movs	r2, #3
 80072fa:	4650      	mov	r0, sl
 80072fc:	f7f8 ff88 	bl	8000210 <memchr>
 8007300:	b138      	cbz	r0, 8007312 <_vfiprintf_r+0x176>
 8007302:	9b04      	ldr	r3, [sp, #16]
 8007304:	eba0 000a 	sub.w	r0, r0, sl
 8007308:	2240      	movs	r2, #64	@ 0x40
 800730a:	4082      	lsls	r2, r0
 800730c:	4313      	orrs	r3, r2
 800730e:	3401      	adds	r4, #1
 8007310:	9304      	str	r3, [sp, #16]
 8007312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007316:	4829      	ldr	r0, [pc, #164]	@ (80073bc <_vfiprintf_r+0x220>)
 8007318:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800731c:	2206      	movs	r2, #6
 800731e:	f7f8 ff77 	bl	8000210 <memchr>
 8007322:	2800      	cmp	r0, #0
 8007324:	d03f      	beq.n	80073a6 <_vfiprintf_r+0x20a>
 8007326:	4b26      	ldr	r3, [pc, #152]	@ (80073c0 <_vfiprintf_r+0x224>)
 8007328:	bb1b      	cbnz	r3, 8007372 <_vfiprintf_r+0x1d6>
 800732a:	9b03      	ldr	r3, [sp, #12]
 800732c:	3307      	adds	r3, #7
 800732e:	f023 0307 	bic.w	r3, r3, #7
 8007332:	3308      	adds	r3, #8
 8007334:	9303      	str	r3, [sp, #12]
 8007336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007338:	443b      	add	r3, r7
 800733a:	9309      	str	r3, [sp, #36]	@ 0x24
 800733c:	e76a      	b.n	8007214 <_vfiprintf_r+0x78>
 800733e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007342:	460c      	mov	r4, r1
 8007344:	2001      	movs	r0, #1
 8007346:	e7a8      	b.n	800729a <_vfiprintf_r+0xfe>
 8007348:	2300      	movs	r3, #0
 800734a:	3401      	adds	r4, #1
 800734c:	9305      	str	r3, [sp, #20]
 800734e:	4619      	mov	r1, r3
 8007350:	f04f 0c0a 	mov.w	ip, #10
 8007354:	4620      	mov	r0, r4
 8007356:	f810 2b01 	ldrb.w	r2, [r0], #1
 800735a:	3a30      	subs	r2, #48	@ 0x30
 800735c:	2a09      	cmp	r2, #9
 800735e:	d903      	bls.n	8007368 <_vfiprintf_r+0x1cc>
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0c6      	beq.n	80072f2 <_vfiprintf_r+0x156>
 8007364:	9105      	str	r1, [sp, #20]
 8007366:	e7c4      	b.n	80072f2 <_vfiprintf_r+0x156>
 8007368:	fb0c 2101 	mla	r1, ip, r1, r2
 800736c:	4604      	mov	r4, r0
 800736e:	2301      	movs	r3, #1
 8007370:	e7f0      	b.n	8007354 <_vfiprintf_r+0x1b8>
 8007372:	ab03      	add	r3, sp, #12
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	462a      	mov	r2, r5
 8007378:	4b12      	ldr	r3, [pc, #72]	@ (80073c4 <_vfiprintf_r+0x228>)
 800737a:	a904      	add	r1, sp, #16
 800737c:	4630      	mov	r0, r6
 800737e:	f3af 8000 	nop.w
 8007382:	4607      	mov	r7, r0
 8007384:	1c78      	adds	r0, r7, #1
 8007386:	d1d6      	bne.n	8007336 <_vfiprintf_r+0x19a>
 8007388:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800738a:	07d9      	lsls	r1, r3, #31
 800738c:	d405      	bmi.n	800739a <_vfiprintf_r+0x1fe>
 800738e:	89ab      	ldrh	r3, [r5, #12]
 8007390:	059a      	lsls	r2, r3, #22
 8007392:	d402      	bmi.n	800739a <_vfiprintf_r+0x1fe>
 8007394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007396:	f7ff fc49 	bl	8006c2c <__retarget_lock_release_recursive>
 800739a:	89ab      	ldrh	r3, [r5, #12]
 800739c:	065b      	lsls	r3, r3, #25
 800739e:	f53f af1f 	bmi.w	80071e0 <_vfiprintf_r+0x44>
 80073a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073a4:	e71e      	b.n	80071e4 <_vfiprintf_r+0x48>
 80073a6:	ab03      	add	r3, sp, #12
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	462a      	mov	r2, r5
 80073ac:	4b05      	ldr	r3, [pc, #20]	@ (80073c4 <_vfiprintf_r+0x228>)
 80073ae:	a904      	add	r1, sp, #16
 80073b0:	4630      	mov	r0, r6
 80073b2:	f000 f879 	bl	80074a8 <_printf_i>
 80073b6:	e7e4      	b.n	8007382 <_vfiprintf_r+0x1e6>
 80073b8:	08008f12 	.word	0x08008f12
 80073bc:	08008f1c 	.word	0x08008f1c
 80073c0:	00000000 	.word	0x00000000
 80073c4:	08007177 	.word	0x08007177
 80073c8:	08008f18 	.word	0x08008f18

080073cc <_printf_common>:
 80073cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d0:	4616      	mov	r6, r2
 80073d2:	4698      	mov	r8, r3
 80073d4:	688a      	ldr	r2, [r1, #8]
 80073d6:	690b      	ldr	r3, [r1, #16]
 80073d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073dc:	4293      	cmp	r3, r2
 80073de:	bfb8      	it	lt
 80073e0:	4613      	movlt	r3, r2
 80073e2:	6033      	str	r3, [r6, #0]
 80073e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073e8:	4607      	mov	r7, r0
 80073ea:	460c      	mov	r4, r1
 80073ec:	b10a      	cbz	r2, 80073f2 <_printf_common+0x26>
 80073ee:	3301      	adds	r3, #1
 80073f0:	6033      	str	r3, [r6, #0]
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	0699      	lsls	r1, r3, #26
 80073f6:	bf42      	ittt	mi
 80073f8:	6833      	ldrmi	r3, [r6, #0]
 80073fa:	3302      	addmi	r3, #2
 80073fc:	6033      	strmi	r3, [r6, #0]
 80073fe:	6825      	ldr	r5, [r4, #0]
 8007400:	f015 0506 	ands.w	r5, r5, #6
 8007404:	d106      	bne.n	8007414 <_printf_common+0x48>
 8007406:	f104 0a19 	add.w	sl, r4, #25
 800740a:	68e3      	ldr	r3, [r4, #12]
 800740c:	6832      	ldr	r2, [r6, #0]
 800740e:	1a9b      	subs	r3, r3, r2
 8007410:	42ab      	cmp	r3, r5
 8007412:	dc26      	bgt.n	8007462 <_printf_common+0x96>
 8007414:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007418:	6822      	ldr	r2, [r4, #0]
 800741a:	3b00      	subs	r3, #0
 800741c:	bf18      	it	ne
 800741e:	2301      	movne	r3, #1
 8007420:	0692      	lsls	r2, r2, #26
 8007422:	d42b      	bmi.n	800747c <_printf_common+0xb0>
 8007424:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007428:	4641      	mov	r1, r8
 800742a:	4638      	mov	r0, r7
 800742c:	47c8      	blx	r9
 800742e:	3001      	adds	r0, #1
 8007430:	d01e      	beq.n	8007470 <_printf_common+0xa4>
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	6922      	ldr	r2, [r4, #16]
 8007436:	f003 0306 	and.w	r3, r3, #6
 800743a:	2b04      	cmp	r3, #4
 800743c:	bf02      	ittt	eq
 800743e:	68e5      	ldreq	r5, [r4, #12]
 8007440:	6833      	ldreq	r3, [r6, #0]
 8007442:	1aed      	subeq	r5, r5, r3
 8007444:	68a3      	ldr	r3, [r4, #8]
 8007446:	bf0c      	ite	eq
 8007448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800744c:	2500      	movne	r5, #0
 800744e:	4293      	cmp	r3, r2
 8007450:	bfc4      	itt	gt
 8007452:	1a9b      	subgt	r3, r3, r2
 8007454:	18ed      	addgt	r5, r5, r3
 8007456:	2600      	movs	r6, #0
 8007458:	341a      	adds	r4, #26
 800745a:	42b5      	cmp	r5, r6
 800745c:	d11a      	bne.n	8007494 <_printf_common+0xc8>
 800745e:	2000      	movs	r0, #0
 8007460:	e008      	b.n	8007474 <_printf_common+0xa8>
 8007462:	2301      	movs	r3, #1
 8007464:	4652      	mov	r2, sl
 8007466:	4641      	mov	r1, r8
 8007468:	4638      	mov	r0, r7
 800746a:	47c8      	blx	r9
 800746c:	3001      	adds	r0, #1
 800746e:	d103      	bne.n	8007478 <_printf_common+0xac>
 8007470:	f04f 30ff 	mov.w	r0, #4294967295
 8007474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007478:	3501      	adds	r5, #1
 800747a:	e7c6      	b.n	800740a <_printf_common+0x3e>
 800747c:	18e1      	adds	r1, r4, r3
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	2030      	movs	r0, #48	@ 0x30
 8007482:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007486:	4422      	add	r2, r4
 8007488:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800748c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007490:	3302      	adds	r3, #2
 8007492:	e7c7      	b.n	8007424 <_printf_common+0x58>
 8007494:	2301      	movs	r3, #1
 8007496:	4622      	mov	r2, r4
 8007498:	4641      	mov	r1, r8
 800749a:	4638      	mov	r0, r7
 800749c:	47c8      	blx	r9
 800749e:	3001      	adds	r0, #1
 80074a0:	d0e6      	beq.n	8007470 <_printf_common+0xa4>
 80074a2:	3601      	adds	r6, #1
 80074a4:	e7d9      	b.n	800745a <_printf_common+0x8e>
	...

080074a8 <_printf_i>:
 80074a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074ac:	7e0f      	ldrb	r7, [r1, #24]
 80074ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074b0:	2f78      	cmp	r7, #120	@ 0x78
 80074b2:	4691      	mov	r9, r2
 80074b4:	4680      	mov	r8, r0
 80074b6:	460c      	mov	r4, r1
 80074b8:	469a      	mov	sl, r3
 80074ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80074be:	d807      	bhi.n	80074d0 <_printf_i+0x28>
 80074c0:	2f62      	cmp	r7, #98	@ 0x62
 80074c2:	d80a      	bhi.n	80074da <_printf_i+0x32>
 80074c4:	2f00      	cmp	r7, #0
 80074c6:	f000 80d1 	beq.w	800766c <_printf_i+0x1c4>
 80074ca:	2f58      	cmp	r7, #88	@ 0x58
 80074cc:	f000 80b8 	beq.w	8007640 <_printf_i+0x198>
 80074d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074d8:	e03a      	b.n	8007550 <_printf_i+0xa8>
 80074da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074de:	2b15      	cmp	r3, #21
 80074e0:	d8f6      	bhi.n	80074d0 <_printf_i+0x28>
 80074e2:	a101      	add	r1, pc, #4	@ (adr r1, 80074e8 <_printf_i+0x40>)
 80074e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074e8:	08007541 	.word	0x08007541
 80074ec:	08007555 	.word	0x08007555
 80074f0:	080074d1 	.word	0x080074d1
 80074f4:	080074d1 	.word	0x080074d1
 80074f8:	080074d1 	.word	0x080074d1
 80074fc:	080074d1 	.word	0x080074d1
 8007500:	08007555 	.word	0x08007555
 8007504:	080074d1 	.word	0x080074d1
 8007508:	080074d1 	.word	0x080074d1
 800750c:	080074d1 	.word	0x080074d1
 8007510:	080074d1 	.word	0x080074d1
 8007514:	08007653 	.word	0x08007653
 8007518:	0800757f 	.word	0x0800757f
 800751c:	0800760d 	.word	0x0800760d
 8007520:	080074d1 	.word	0x080074d1
 8007524:	080074d1 	.word	0x080074d1
 8007528:	08007675 	.word	0x08007675
 800752c:	080074d1 	.word	0x080074d1
 8007530:	0800757f 	.word	0x0800757f
 8007534:	080074d1 	.word	0x080074d1
 8007538:	080074d1 	.word	0x080074d1
 800753c:	08007615 	.word	0x08007615
 8007540:	6833      	ldr	r3, [r6, #0]
 8007542:	1d1a      	adds	r2, r3, #4
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6032      	str	r2, [r6, #0]
 8007548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800754c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007550:	2301      	movs	r3, #1
 8007552:	e09c      	b.n	800768e <_printf_i+0x1e6>
 8007554:	6833      	ldr	r3, [r6, #0]
 8007556:	6820      	ldr	r0, [r4, #0]
 8007558:	1d19      	adds	r1, r3, #4
 800755a:	6031      	str	r1, [r6, #0]
 800755c:	0606      	lsls	r6, r0, #24
 800755e:	d501      	bpl.n	8007564 <_printf_i+0xbc>
 8007560:	681d      	ldr	r5, [r3, #0]
 8007562:	e003      	b.n	800756c <_printf_i+0xc4>
 8007564:	0645      	lsls	r5, r0, #25
 8007566:	d5fb      	bpl.n	8007560 <_printf_i+0xb8>
 8007568:	f9b3 5000 	ldrsh.w	r5, [r3]
 800756c:	2d00      	cmp	r5, #0
 800756e:	da03      	bge.n	8007578 <_printf_i+0xd0>
 8007570:	232d      	movs	r3, #45	@ 0x2d
 8007572:	426d      	negs	r5, r5
 8007574:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007578:	4858      	ldr	r0, [pc, #352]	@ (80076dc <_printf_i+0x234>)
 800757a:	230a      	movs	r3, #10
 800757c:	e011      	b.n	80075a2 <_printf_i+0xfa>
 800757e:	6821      	ldr	r1, [r4, #0]
 8007580:	6833      	ldr	r3, [r6, #0]
 8007582:	0608      	lsls	r0, r1, #24
 8007584:	f853 5b04 	ldr.w	r5, [r3], #4
 8007588:	d402      	bmi.n	8007590 <_printf_i+0xe8>
 800758a:	0649      	lsls	r1, r1, #25
 800758c:	bf48      	it	mi
 800758e:	b2ad      	uxthmi	r5, r5
 8007590:	2f6f      	cmp	r7, #111	@ 0x6f
 8007592:	4852      	ldr	r0, [pc, #328]	@ (80076dc <_printf_i+0x234>)
 8007594:	6033      	str	r3, [r6, #0]
 8007596:	bf14      	ite	ne
 8007598:	230a      	movne	r3, #10
 800759a:	2308      	moveq	r3, #8
 800759c:	2100      	movs	r1, #0
 800759e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075a2:	6866      	ldr	r6, [r4, #4]
 80075a4:	60a6      	str	r6, [r4, #8]
 80075a6:	2e00      	cmp	r6, #0
 80075a8:	db05      	blt.n	80075b6 <_printf_i+0x10e>
 80075aa:	6821      	ldr	r1, [r4, #0]
 80075ac:	432e      	orrs	r6, r5
 80075ae:	f021 0104 	bic.w	r1, r1, #4
 80075b2:	6021      	str	r1, [r4, #0]
 80075b4:	d04b      	beq.n	800764e <_printf_i+0x1a6>
 80075b6:	4616      	mov	r6, r2
 80075b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80075bc:	fb03 5711 	mls	r7, r3, r1, r5
 80075c0:	5dc7      	ldrb	r7, [r0, r7]
 80075c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075c6:	462f      	mov	r7, r5
 80075c8:	42bb      	cmp	r3, r7
 80075ca:	460d      	mov	r5, r1
 80075cc:	d9f4      	bls.n	80075b8 <_printf_i+0x110>
 80075ce:	2b08      	cmp	r3, #8
 80075d0:	d10b      	bne.n	80075ea <_printf_i+0x142>
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	07df      	lsls	r7, r3, #31
 80075d6:	d508      	bpl.n	80075ea <_printf_i+0x142>
 80075d8:	6923      	ldr	r3, [r4, #16]
 80075da:	6861      	ldr	r1, [r4, #4]
 80075dc:	4299      	cmp	r1, r3
 80075de:	bfde      	ittt	le
 80075e0:	2330      	movle	r3, #48	@ 0x30
 80075e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075ea:	1b92      	subs	r2, r2, r6
 80075ec:	6122      	str	r2, [r4, #16]
 80075ee:	f8cd a000 	str.w	sl, [sp]
 80075f2:	464b      	mov	r3, r9
 80075f4:	aa03      	add	r2, sp, #12
 80075f6:	4621      	mov	r1, r4
 80075f8:	4640      	mov	r0, r8
 80075fa:	f7ff fee7 	bl	80073cc <_printf_common>
 80075fe:	3001      	adds	r0, #1
 8007600:	d14a      	bne.n	8007698 <_printf_i+0x1f0>
 8007602:	f04f 30ff 	mov.w	r0, #4294967295
 8007606:	b004      	add	sp, #16
 8007608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	f043 0320 	orr.w	r3, r3, #32
 8007612:	6023      	str	r3, [r4, #0]
 8007614:	4832      	ldr	r0, [pc, #200]	@ (80076e0 <_printf_i+0x238>)
 8007616:	2778      	movs	r7, #120	@ 0x78
 8007618:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	6831      	ldr	r1, [r6, #0]
 8007620:	061f      	lsls	r7, r3, #24
 8007622:	f851 5b04 	ldr.w	r5, [r1], #4
 8007626:	d402      	bmi.n	800762e <_printf_i+0x186>
 8007628:	065f      	lsls	r7, r3, #25
 800762a:	bf48      	it	mi
 800762c:	b2ad      	uxthmi	r5, r5
 800762e:	6031      	str	r1, [r6, #0]
 8007630:	07d9      	lsls	r1, r3, #31
 8007632:	bf44      	itt	mi
 8007634:	f043 0320 	orrmi.w	r3, r3, #32
 8007638:	6023      	strmi	r3, [r4, #0]
 800763a:	b11d      	cbz	r5, 8007644 <_printf_i+0x19c>
 800763c:	2310      	movs	r3, #16
 800763e:	e7ad      	b.n	800759c <_printf_i+0xf4>
 8007640:	4826      	ldr	r0, [pc, #152]	@ (80076dc <_printf_i+0x234>)
 8007642:	e7e9      	b.n	8007618 <_printf_i+0x170>
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	f023 0320 	bic.w	r3, r3, #32
 800764a:	6023      	str	r3, [r4, #0]
 800764c:	e7f6      	b.n	800763c <_printf_i+0x194>
 800764e:	4616      	mov	r6, r2
 8007650:	e7bd      	b.n	80075ce <_printf_i+0x126>
 8007652:	6833      	ldr	r3, [r6, #0]
 8007654:	6825      	ldr	r5, [r4, #0]
 8007656:	6961      	ldr	r1, [r4, #20]
 8007658:	1d18      	adds	r0, r3, #4
 800765a:	6030      	str	r0, [r6, #0]
 800765c:	062e      	lsls	r6, r5, #24
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	d501      	bpl.n	8007666 <_printf_i+0x1be>
 8007662:	6019      	str	r1, [r3, #0]
 8007664:	e002      	b.n	800766c <_printf_i+0x1c4>
 8007666:	0668      	lsls	r0, r5, #25
 8007668:	d5fb      	bpl.n	8007662 <_printf_i+0x1ba>
 800766a:	8019      	strh	r1, [r3, #0]
 800766c:	2300      	movs	r3, #0
 800766e:	6123      	str	r3, [r4, #16]
 8007670:	4616      	mov	r6, r2
 8007672:	e7bc      	b.n	80075ee <_printf_i+0x146>
 8007674:	6833      	ldr	r3, [r6, #0]
 8007676:	1d1a      	adds	r2, r3, #4
 8007678:	6032      	str	r2, [r6, #0]
 800767a:	681e      	ldr	r6, [r3, #0]
 800767c:	6862      	ldr	r2, [r4, #4]
 800767e:	2100      	movs	r1, #0
 8007680:	4630      	mov	r0, r6
 8007682:	f7f8 fdc5 	bl	8000210 <memchr>
 8007686:	b108      	cbz	r0, 800768c <_printf_i+0x1e4>
 8007688:	1b80      	subs	r0, r0, r6
 800768a:	6060      	str	r0, [r4, #4]
 800768c:	6863      	ldr	r3, [r4, #4]
 800768e:	6123      	str	r3, [r4, #16]
 8007690:	2300      	movs	r3, #0
 8007692:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007696:	e7aa      	b.n	80075ee <_printf_i+0x146>
 8007698:	6923      	ldr	r3, [r4, #16]
 800769a:	4632      	mov	r2, r6
 800769c:	4649      	mov	r1, r9
 800769e:	4640      	mov	r0, r8
 80076a0:	47d0      	blx	sl
 80076a2:	3001      	adds	r0, #1
 80076a4:	d0ad      	beq.n	8007602 <_printf_i+0x15a>
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	079b      	lsls	r3, r3, #30
 80076aa:	d413      	bmi.n	80076d4 <_printf_i+0x22c>
 80076ac:	68e0      	ldr	r0, [r4, #12]
 80076ae:	9b03      	ldr	r3, [sp, #12]
 80076b0:	4298      	cmp	r0, r3
 80076b2:	bfb8      	it	lt
 80076b4:	4618      	movlt	r0, r3
 80076b6:	e7a6      	b.n	8007606 <_printf_i+0x15e>
 80076b8:	2301      	movs	r3, #1
 80076ba:	4632      	mov	r2, r6
 80076bc:	4649      	mov	r1, r9
 80076be:	4640      	mov	r0, r8
 80076c0:	47d0      	blx	sl
 80076c2:	3001      	adds	r0, #1
 80076c4:	d09d      	beq.n	8007602 <_printf_i+0x15a>
 80076c6:	3501      	adds	r5, #1
 80076c8:	68e3      	ldr	r3, [r4, #12]
 80076ca:	9903      	ldr	r1, [sp, #12]
 80076cc:	1a5b      	subs	r3, r3, r1
 80076ce:	42ab      	cmp	r3, r5
 80076d0:	dcf2      	bgt.n	80076b8 <_printf_i+0x210>
 80076d2:	e7eb      	b.n	80076ac <_printf_i+0x204>
 80076d4:	2500      	movs	r5, #0
 80076d6:	f104 0619 	add.w	r6, r4, #25
 80076da:	e7f5      	b.n	80076c8 <_printf_i+0x220>
 80076dc:	08008f23 	.word	0x08008f23
 80076e0:	08008f34 	.word	0x08008f34

080076e4 <__sflush_r>:
 80076e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ec:	0716      	lsls	r6, r2, #28
 80076ee:	4605      	mov	r5, r0
 80076f0:	460c      	mov	r4, r1
 80076f2:	d454      	bmi.n	800779e <__sflush_r+0xba>
 80076f4:	684b      	ldr	r3, [r1, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	dc02      	bgt.n	8007700 <__sflush_r+0x1c>
 80076fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	dd48      	ble.n	8007792 <__sflush_r+0xae>
 8007700:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007702:	2e00      	cmp	r6, #0
 8007704:	d045      	beq.n	8007792 <__sflush_r+0xae>
 8007706:	2300      	movs	r3, #0
 8007708:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800770c:	682f      	ldr	r7, [r5, #0]
 800770e:	6a21      	ldr	r1, [r4, #32]
 8007710:	602b      	str	r3, [r5, #0]
 8007712:	d030      	beq.n	8007776 <__sflush_r+0x92>
 8007714:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007716:	89a3      	ldrh	r3, [r4, #12]
 8007718:	0759      	lsls	r1, r3, #29
 800771a:	d505      	bpl.n	8007728 <__sflush_r+0x44>
 800771c:	6863      	ldr	r3, [r4, #4]
 800771e:	1ad2      	subs	r2, r2, r3
 8007720:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007722:	b10b      	cbz	r3, 8007728 <__sflush_r+0x44>
 8007724:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007726:	1ad2      	subs	r2, r2, r3
 8007728:	2300      	movs	r3, #0
 800772a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800772c:	6a21      	ldr	r1, [r4, #32]
 800772e:	4628      	mov	r0, r5
 8007730:	47b0      	blx	r6
 8007732:	1c43      	adds	r3, r0, #1
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	d106      	bne.n	8007746 <__sflush_r+0x62>
 8007738:	6829      	ldr	r1, [r5, #0]
 800773a:	291d      	cmp	r1, #29
 800773c:	d82b      	bhi.n	8007796 <__sflush_r+0xb2>
 800773e:	4a2a      	ldr	r2, [pc, #168]	@ (80077e8 <__sflush_r+0x104>)
 8007740:	40ca      	lsrs	r2, r1
 8007742:	07d6      	lsls	r6, r2, #31
 8007744:	d527      	bpl.n	8007796 <__sflush_r+0xb2>
 8007746:	2200      	movs	r2, #0
 8007748:	6062      	str	r2, [r4, #4]
 800774a:	04d9      	lsls	r1, r3, #19
 800774c:	6922      	ldr	r2, [r4, #16]
 800774e:	6022      	str	r2, [r4, #0]
 8007750:	d504      	bpl.n	800775c <__sflush_r+0x78>
 8007752:	1c42      	adds	r2, r0, #1
 8007754:	d101      	bne.n	800775a <__sflush_r+0x76>
 8007756:	682b      	ldr	r3, [r5, #0]
 8007758:	b903      	cbnz	r3, 800775c <__sflush_r+0x78>
 800775a:	6560      	str	r0, [r4, #84]	@ 0x54
 800775c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800775e:	602f      	str	r7, [r5, #0]
 8007760:	b1b9      	cbz	r1, 8007792 <__sflush_r+0xae>
 8007762:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007766:	4299      	cmp	r1, r3
 8007768:	d002      	beq.n	8007770 <__sflush_r+0x8c>
 800776a:	4628      	mov	r0, r5
 800776c:	f7ff fa94 	bl	8006c98 <_free_r>
 8007770:	2300      	movs	r3, #0
 8007772:	6363      	str	r3, [r4, #52]	@ 0x34
 8007774:	e00d      	b.n	8007792 <__sflush_r+0xae>
 8007776:	2301      	movs	r3, #1
 8007778:	4628      	mov	r0, r5
 800777a:	47b0      	blx	r6
 800777c:	4602      	mov	r2, r0
 800777e:	1c50      	adds	r0, r2, #1
 8007780:	d1c9      	bne.n	8007716 <__sflush_r+0x32>
 8007782:	682b      	ldr	r3, [r5, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d0c6      	beq.n	8007716 <__sflush_r+0x32>
 8007788:	2b1d      	cmp	r3, #29
 800778a:	d001      	beq.n	8007790 <__sflush_r+0xac>
 800778c:	2b16      	cmp	r3, #22
 800778e:	d11e      	bne.n	80077ce <__sflush_r+0xea>
 8007790:	602f      	str	r7, [r5, #0]
 8007792:	2000      	movs	r0, #0
 8007794:	e022      	b.n	80077dc <__sflush_r+0xf8>
 8007796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800779a:	b21b      	sxth	r3, r3
 800779c:	e01b      	b.n	80077d6 <__sflush_r+0xf2>
 800779e:	690f      	ldr	r7, [r1, #16]
 80077a0:	2f00      	cmp	r7, #0
 80077a2:	d0f6      	beq.n	8007792 <__sflush_r+0xae>
 80077a4:	0793      	lsls	r3, r2, #30
 80077a6:	680e      	ldr	r6, [r1, #0]
 80077a8:	bf08      	it	eq
 80077aa:	694b      	ldreq	r3, [r1, #20]
 80077ac:	600f      	str	r7, [r1, #0]
 80077ae:	bf18      	it	ne
 80077b0:	2300      	movne	r3, #0
 80077b2:	eba6 0807 	sub.w	r8, r6, r7
 80077b6:	608b      	str	r3, [r1, #8]
 80077b8:	f1b8 0f00 	cmp.w	r8, #0
 80077bc:	dde9      	ble.n	8007792 <__sflush_r+0xae>
 80077be:	6a21      	ldr	r1, [r4, #32]
 80077c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80077c2:	4643      	mov	r3, r8
 80077c4:	463a      	mov	r2, r7
 80077c6:	4628      	mov	r0, r5
 80077c8:	47b0      	blx	r6
 80077ca:	2800      	cmp	r0, #0
 80077cc:	dc08      	bgt.n	80077e0 <__sflush_r+0xfc>
 80077ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077d6:	81a3      	strh	r3, [r4, #12]
 80077d8:	f04f 30ff 	mov.w	r0, #4294967295
 80077dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077e0:	4407      	add	r7, r0
 80077e2:	eba8 0800 	sub.w	r8, r8, r0
 80077e6:	e7e7      	b.n	80077b8 <__sflush_r+0xd4>
 80077e8:	20400001 	.word	0x20400001

080077ec <_fflush_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	690b      	ldr	r3, [r1, #16]
 80077f0:	4605      	mov	r5, r0
 80077f2:	460c      	mov	r4, r1
 80077f4:	b913      	cbnz	r3, 80077fc <_fflush_r+0x10>
 80077f6:	2500      	movs	r5, #0
 80077f8:	4628      	mov	r0, r5
 80077fa:	bd38      	pop	{r3, r4, r5, pc}
 80077fc:	b118      	cbz	r0, 8007806 <_fflush_r+0x1a>
 80077fe:	6a03      	ldr	r3, [r0, #32]
 8007800:	b90b      	cbnz	r3, 8007806 <_fflush_r+0x1a>
 8007802:	f7fe ff5f 	bl	80066c4 <__sinit>
 8007806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0f3      	beq.n	80077f6 <_fflush_r+0xa>
 800780e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007810:	07d0      	lsls	r0, r2, #31
 8007812:	d404      	bmi.n	800781e <_fflush_r+0x32>
 8007814:	0599      	lsls	r1, r3, #22
 8007816:	d402      	bmi.n	800781e <_fflush_r+0x32>
 8007818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800781a:	f7ff fa06 	bl	8006c2a <__retarget_lock_acquire_recursive>
 800781e:	4628      	mov	r0, r5
 8007820:	4621      	mov	r1, r4
 8007822:	f7ff ff5f 	bl	80076e4 <__sflush_r>
 8007826:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007828:	07da      	lsls	r2, r3, #31
 800782a:	4605      	mov	r5, r0
 800782c:	d4e4      	bmi.n	80077f8 <_fflush_r+0xc>
 800782e:	89a3      	ldrh	r3, [r4, #12]
 8007830:	059b      	lsls	r3, r3, #22
 8007832:	d4e1      	bmi.n	80077f8 <_fflush_r+0xc>
 8007834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007836:	f7ff f9f9 	bl	8006c2c <__retarget_lock_release_recursive>
 800783a:	e7dd      	b.n	80077f8 <_fflush_r+0xc>

0800783c <fiprintf>:
 800783c:	b40e      	push	{r1, r2, r3}
 800783e:	b503      	push	{r0, r1, lr}
 8007840:	4601      	mov	r1, r0
 8007842:	ab03      	add	r3, sp, #12
 8007844:	4805      	ldr	r0, [pc, #20]	@ (800785c <fiprintf+0x20>)
 8007846:	f853 2b04 	ldr.w	r2, [r3], #4
 800784a:	6800      	ldr	r0, [r0, #0]
 800784c:	9301      	str	r3, [sp, #4]
 800784e:	f7ff fca5 	bl	800719c <_vfiprintf_r>
 8007852:	b002      	add	sp, #8
 8007854:	f85d eb04 	ldr.w	lr, [sp], #4
 8007858:	b003      	add	sp, #12
 800785a:	4770      	bx	lr
 800785c:	2000001c 	.word	0x2000001c

08007860 <__swhatbuf_r>:
 8007860:	b570      	push	{r4, r5, r6, lr}
 8007862:	460c      	mov	r4, r1
 8007864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007868:	2900      	cmp	r1, #0
 800786a:	b096      	sub	sp, #88	@ 0x58
 800786c:	4615      	mov	r5, r2
 800786e:	461e      	mov	r6, r3
 8007870:	da0d      	bge.n	800788e <__swhatbuf_r+0x2e>
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007878:	f04f 0100 	mov.w	r1, #0
 800787c:	bf14      	ite	ne
 800787e:	2340      	movne	r3, #64	@ 0x40
 8007880:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007884:	2000      	movs	r0, #0
 8007886:	6031      	str	r1, [r6, #0]
 8007888:	602b      	str	r3, [r5, #0]
 800788a:	b016      	add	sp, #88	@ 0x58
 800788c:	bd70      	pop	{r4, r5, r6, pc}
 800788e:	466a      	mov	r2, sp
 8007890:	f000 f896 	bl	80079c0 <_fstat_r>
 8007894:	2800      	cmp	r0, #0
 8007896:	dbec      	blt.n	8007872 <__swhatbuf_r+0x12>
 8007898:	9901      	ldr	r1, [sp, #4]
 800789a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800789e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80078a2:	4259      	negs	r1, r3
 80078a4:	4159      	adcs	r1, r3
 80078a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078aa:	e7eb      	b.n	8007884 <__swhatbuf_r+0x24>

080078ac <__smakebuf_r>:
 80078ac:	898b      	ldrh	r3, [r1, #12]
 80078ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078b0:	079d      	lsls	r5, r3, #30
 80078b2:	4606      	mov	r6, r0
 80078b4:	460c      	mov	r4, r1
 80078b6:	d507      	bpl.n	80078c8 <__smakebuf_r+0x1c>
 80078b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80078bc:	6023      	str	r3, [r4, #0]
 80078be:	6123      	str	r3, [r4, #16]
 80078c0:	2301      	movs	r3, #1
 80078c2:	6163      	str	r3, [r4, #20]
 80078c4:	b003      	add	sp, #12
 80078c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078c8:	ab01      	add	r3, sp, #4
 80078ca:	466a      	mov	r2, sp
 80078cc:	f7ff ffc8 	bl	8007860 <__swhatbuf_r>
 80078d0:	9f00      	ldr	r7, [sp, #0]
 80078d2:	4605      	mov	r5, r0
 80078d4:	4639      	mov	r1, r7
 80078d6:	4630      	mov	r0, r6
 80078d8:	f7ff fa52 	bl	8006d80 <_malloc_r>
 80078dc:	b948      	cbnz	r0, 80078f2 <__smakebuf_r+0x46>
 80078de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078e2:	059a      	lsls	r2, r3, #22
 80078e4:	d4ee      	bmi.n	80078c4 <__smakebuf_r+0x18>
 80078e6:	f023 0303 	bic.w	r3, r3, #3
 80078ea:	f043 0302 	orr.w	r3, r3, #2
 80078ee:	81a3      	strh	r3, [r4, #12]
 80078f0:	e7e2      	b.n	80078b8 <__smakebuf_r+0xc>
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	6020      	str	r0, [r4, #0]
 80078f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078fa:	81a3      	strh	r3, [r4, #12]
 80078fc:	9b01      	ldr	r3, [sp, #4]
 80078fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007902:	b15b      	cbz	r3, 800791c <__smakebuf_r+0x70>
 8007904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007908:	4630      	mov	r0, r6
 800790a:	f000 f86b 	bl	80079e4 <_isatty_r>
 800790e:	b128      	cbz	r0, 800791c <__smakebuf_r+0x70>
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	f023 0303 	bic.w	r3, r3, #3
 8007916:	f043 0301 	orr.w	r3, r3, #1
 800791a:	81a3      	strh	r3, [r4, #12]
 800791c:	89a3      	ldrh	r3, [r4, #12]
 800791e:	431d      	orrs	r5, r3
 8007920:	81a5      	strh	r5, [r4, #12]
 8007922:	e7cf      	b.n	80078c4 <__smakebuf_r+0x18>

08007924 <_putc_r>:
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	460d      	mov	r5, r1
 8007928:	4614      	mov	r4, r2
 800792a:	4606      	mov	r6, r0
 800792c:	b118      	cbz	r0, 8007936 <_putc_r+0x12>
 800792e:	6a03      	ldr	r3, [r0, #32]
 8007930:	b90b      	cbnz	r3, 8007936 <_putc_r+0x12>
 8007932:	f7fe fec7 	bl	80066c4 <__sinit>
 8007936:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007938:	07d8      	lsls	r0, r3, #31
 800793a:	d405      	bmi.n	8007948 <_putc_r+0x24>
 800793c:	89a3      	ldrh	r3, [r4, #12]
 800793e:	0599      	lsls	r1, r3, #22
 8007940:	d402      	bmi.n	8007948 <_putc_r+0x24>
 8007942:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007944:	f7ff f971 	bl	8006c2a <__retarget_lock_acquire_recursive>
 8007948:	68a3      	ldr	r3, [r4, #8]
 800794a:	3b01      	subs	r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	60a3      	str	r3, [r4, #8]
 8007950:	da05      	bge.n	800795e <_putc_r+0x3a>
 8007952:	69a2      	ldr	r2, [r4, #24]
 8007954:	4293      	cmp	r3, r2
 8007956:	db12      	blt.n	800797e <_putc_r+0x5a>
 8007958:	b2eb      	uxtb	r3, r5
 800795a:	2b0a      	cmp	r3, #10
 800795c:	d00f      	beq.n	800797e <_putc_r+0x5a>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	1c5a      	adds	r2, r3, #1
 8007962:	6022      	str	r2, [r4, #0]
 8007964:	701d      	strb	r5, [r3, #0]
 8007966:	b2ed      	uxtb	r5, r5
 8007968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800796a:	07da      	lsls	r2, r3, #31
 800796c:	d405      	bmi.n	800797a <_putc_r+0x56>
 800796e:	89a3      	ldrh	r3, [r4, #12]
 8007970:	059b      	lsls	r3, r3, #22
 8007972:	d402      	bmi.n	800797a <_putc_r+0x56>
 8007974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007976:	f7ff f959 	bl	8006c2c <__retarget_lock_release_recursive>
 800797a:	4628      	mov	r0, r5
 800797c:	bd70      	pop	{r4, r5, r6, pc}
 800797e:	4629      	mov	r1, r5
 8007980:	4622      	mov	r2, r4
 8007982:	4630      	mov	r0, r6
 8007984:	f7fe ffb1 	bl	80068ea <__swbuf_r>
 8007988:	4605      	mov	r5, r0
 800798a:	e7ed      	b.n	8007968 <_putc_r+0x44>

0800798c <memmove>:
 800798c:	4288      	cmp	r0, r1
 800798e:	b510      	push	{r4, lr}
 8007990:	eb01 0402 	add.w	r4, r1, r2
 8007994:	d902      	bls.n	800799c <memmove+0x10>
 8007996:	4284      	cmp	r4, r0
 8007998:	4623      	mov	r3, r4
 800799a:	d807      	bhi.n	80079ac <memmove+0x20>
 800799c:	1e43      	subs	r3, r0, #1
 800799e:	42a1      	cmp	r1, r4
 80079a0:	d008      	beq.n	80079b4 <memmove+0x28>
 80079a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079aa:	e7f8      	b.n	800799e <memmove+0x12>
 80079ac:	4402      	add	r2, r0
 80079ae:	4601      	mov	r1, r0
 80079b0:	428a      	cmp	r2, r1
 80079b2:	d100      	bne.n	80079b6 <memmove+0x2a>
 80079b4:	bd10      	pop	{r4, pc}
 80079b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079be:	e7f7      	b.n	80079b0 <memmove+0x24>

080079c0 <_fstat_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4d07      	ldr	r5, [pc, #28]	@ (80079e0 <_fstat_r+0x20>)
 80079c4:	2300      	movs	r3, #0
 80079c6:	4604      	mov	r4, r0
 80079c8:	4608      	mov	r0, r1
 80079ca:	4611      	mov	r1, r2
 80079cc:	602b      	str	r3, [r5, #0]
 80079ce:	f7fb f855 	bl	8002a7c <_fstat>
 80079d2:	1c43      	adds	r3, r0, #1
 80079d4:	d102      	bne.n	80079dc <_fstat_r+0x1c>
 80079d6:	682b      	ldr	r3, [r5, #0]
 80079d8:	b103      	cbz	r3, 80079dc <_fstat_r+0x1c>
 80079da:	6023      	str	r3, [r4, #0]
 80079dc:	bd38      	pop	{r3, r4, r5, pc}
 80079de:	bf00      	nop
 80079e0:	20000c34 	.word	0x20000c34

080079e4 <_isatty_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	4d06      	ldr	r5, [pc, #24]	@ (8007a00 <_isatty_r+0x1c>)
 80079e8:	2300      	movs	r3, #0
 80079ea:	4604      	mov	r4, r0
 80079ec:	4608      	mov	r0, r1
 80079ee:	602b      	str	r3, [r5, #0]
 80079f0:	f7fb f854 	bl	8002a9c <_isatty>
 80079f4:	1c43      	adds	r3, r0, #1
 80079f6:	d102      	bne.n	80079fe <_isatty_r+0x1a>
 80079f8:	682b      	ldr	r3, [r5, #0]
 80079fa:	b103      	cbz	r3, 80079fe <_isatty_r+0x1a>
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	20000c34 	.word	0x20000c34

08007a04 <_sbrk_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4d06      	ldr	r5, [pc, #24]	@ (8007a20 <_sbrk_r+0x1c>)
 8007a08:	2300      	movs	r3, #0
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	602b      	str	r3, [r5, #0]
 8007a10:	f7fb f85c 	bl	8002acc <_sbrk>
 8007a14:	1c43      	adds	r3, r0, #1
 8007a16:	d102      	bne.n	8007a1e <_sbrk_r+0x1a>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	b103      	cbz	r3, 8007a1e <_sbrk_r+0x1a>
 8007a1c:	6023      	str	r3, [r4, #0]
 8007a1e:	bd38      	pop	{r3, r4, r5, pc}
 8007a20:	20000c34 	.word	0x20000c34

08007a24 <abort>:
 8007a24:	b508      	push	{r3, lr}
 8007a26:	2006      	movs	r0, #6
 8007a28:	f000 f85a 	bl	8007ae0 <raise>
 8007a2c:	2001      	movs	r0, #1
 8007a2e:	f7fa ffd5 	bl	80029dc <_exit>

08007a32 <_realloc_r>:
 8007a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a36:	4607      	mov	r7, r0
 8007a38:	4614      	mov	r4, r2
 8007a3a:	460d      	mov	r5, r1
 8007a3c:	b921      	cbnz	r1, 8007a48 <_realloc_r+0x16>
 8007a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a42:	4611      	mov	r1, r2
 8007a44:	f7ff b99c 	b.w	8006d80 <_malloc_r>
 8007a48:	b92a      	cbnz	r2, 8007a56 <_realloc_r+0x24>
 8007a4a:	f7ff f925 	bl	8006c98 <_free_r>
 8007a4e:	4625      	mov	r5, r4
 8007a50:	4628      	mov	r0, r5
 8007a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a56:	f000 f85f 	bl	8007b18 <_malloc_usable_size_r>
 8007a5a:	4284      	cmp	r4, r0
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	d802      	bhi.n	8007a66 <_realloc_r+0x34>
 8007a60:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a64:	d8f4      	bhi.n	8007a50 <_realloc_r+0x1e>
 8007a66:	4621      	mov	r1, r4
 8007a68:	4638      	mov	r0, r7
 8007a6a:	f7ff f989 	bl	8006d80 <_malloc_r>
 8007a6e:	4680      	mov	r8, r0
 8007a70:	b908      	cbnz	r0, 8007a76 <_realloc_r+0x44>
 8007a72:	4645      	mov	r5, r8
 8007a74:	e7ec      	b.n	8007a50 <_realloc_r+0x1e>
 8007a76:	42b4      	cmp	r4, r6
 8007a78:	4622      	mov	r2, r4
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	bf28      	it	cs
 8007a7e:	4632      	movcs	r2, r6
 8007a80:	f7ff f8dd 	bl	8006c3e <memcpy>
 8007a84:	4629      	mov	r1, r5
 8007a86:	4638      	mov	r0, r7
 8007a88:	f7ff f906 	bl	8006c98 <_free_r>
 8007a8c:	e7f1      	b.n	8007a72 <_realloc_r+0x40>

08007a8e <_raise_r>:
 8007a8e:	291f      	cmp	r1, #31
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4605      	mov	r5, r0
 8007a94:	460c      	mov	r4, r1
 8007a96:	d904      	bls.n	8007aa2 <_raise_r+0x14>
 8007a98:	2316      	movs	r3, #22
 8007a9a:	6003      	str	r3, [r0, #0]
 8007a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa0:	bd38      	pop	{r3, r4, r5, pc}
 8007aa2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007aa4:	b112      	cbz	r2, 8007aac <_raise_r+0x1e>
 8007aa6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007aaa:	b94b      	cbnz	r3, 8007ac0 <_raise_r+0x32>
 8007aac:	4628      	mov	r0, r5
 8007aae:	f000 f831 	bl	8007b14 <_getpid_r>
 8007ab2:	4622      	mov	r2, r4
 8007ab4:	4601      	mov	r1, r0
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007abc:	f000 b818 	b.w	8007af0 <_kill_r>
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d00a      	beq.n	8007ada <_raise_r+0x4c>
 8007ac4:	1c59      	adds	r1, r3, #1
 8007ac6:	d103      	bne.n	8007ad0 <_raise_r+0x42>
 8007ac8:	2316      	movs	r3, #22
 8007aca:	6003      	str	r3, [r0, #0]
 8007acc:	2001      	movs	r0, #1
 8007ace:	e7e7      	b.n	8007aa0 <_raise_r+0x12>
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	4798      	blx	r3
 8007ada:	2000      	movs	r0, #0
 8007adc:	e7e0      	b.n	8007aa0 <_raise_r+0x12>
	...

08007ae0 <raise>:
 8007ae0:	4b02      	ldr	r3, [pc, #8]	@ (8007aec <raise+0xc>)
 8007ae2:	4601      	mov	r1, r0
 8007ae4:	6818      	ldr	r0, [r3, #0]
 8007ae6:	f7ff bfd2 	b.w	8007a8e <_raise_r>
 8007aea:	bf00      	nop
 8007aec:	2000001c 	.word	0x2000001c

08007af0 <_kill_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	4d07      	ldr	r5, [pc, #28]	@ (8007b10 <_kill_r+0x20>)
 8007af4:	2300      	movs	r3, #0
 8007af6:	4604      	mov	r4, r0
 8007af8:	4608      	mov	r0, r1
 8007afa:	4611      	mov	r1, r2
 8007afc:	602b      	str	r3, [r5, #0]
 8007afe:	f7fa ff5d 	bl	80029bc <_kill>
 8007b02:	1c43      	adds	r3, r0, #1
 8007b04:	d102      	bne.n	8007b0c <_kill_r+0x1c>
 8007b06:	682b      	ldr	r3, [r5, #0]
 8007b08:	b103      	cbz	r3, 8007b0c <_kill_r+0x1c>
 8007b0a:	6023      	str	r3, [r4, #0]
 8007b0c:	bd38      	pop	{r3, r4, r5, pc}
 8007b0e:	bf00      	nop
 8007b10:	20000c34 	.word	0x20000c34

08007b14 <_getpid_r>:
 8007b14:	f7fa bf4a 	b.w	80029ac <_getpid>

08007b18 <_malloc_usable_size_r>:
 8007b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b1c:	1f18      	subs	r0, r3, #4
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	bfbc      	itt	lt
 8007b22:	580b      	ldrlt	r3, [r1, r0]
 8007b24:	18c0      	addlt	r0, r0, r3
 8007b26:	4770      	bx	lr

08007b28 <pow>:
 8007b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2a:	ed2d 8b02 	vpush	{d8}
 8007b2e:	eeb0 8a40 	vmov.f32	s16, s0
 8007b32:	eef0 8a60 	vmov.f32	s17, s1
 8007b36:	ec55 4b11 	vmov	r4, r5, d1
 8007b3a:	f000 f871 	bl	8007c20 <__ieee754_pow>
 8007b3e:	4622      	mov	r2, r4
 8007b40:	462b      	mov	r3, r5
 8007b42:	4620      	mov	r0, r4
 8007b44:	4629      	mov	r1, r5
 8007b46:	ec57 6b10 	vmov	r6, r7, d0
 8007b4a:	f7f9 f807 	bl	8000b5c <__aeabi_dcmpun>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d13b      	bne.n	8007bca <pow+0xa2>
 8007b52:	ec51 0b18 	vmov	r0, r1, d8
 8007b56:	2200      	movs	r2, #0
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f7f8 ffcd 	bl	8000af8 <__aeabi_dcmpeq>
 8007b5e:	b1b8      	cbz	r0, 8007b90 <pow+0x68>
 8007b60:	2200      	movs	r2, #0
 8007b62:	2300      	movs	r3, #0
 8007b64:	4620      	mov	r0, r4
 8007b66:	4629      	mov	r1, r5
 8007b68:	f7f8 ffc6 	bl	8000af8 <__aeabi_dcmpeq>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	d146      	bne.n	8007bfe <pow+0xd6>
 8007b70:	ec45 4b10 	vmov	d0, r4, r5
 8007b74:	f000 f848 	bl	8007c08 <finite>
 8007b78:	b338      	cbz	r0, 8007bca <pow+0xa2>
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	4620      	mov	r0, r4
 8007b80:	4629      	mov	r1, r5
 8007b82:	f7f8 ffc3 	bl	8000b0c <__aeabi_dcmplt>
 8007b86:	b300      	cbz	r0, 8007bca <pow+0xa2>
 8007b88:	f7ff f824 	bl	8006bd4 <__errno>
 8007b8c:	2322      	movs	r3, #34	@ 0x22
 8007b8e:	e01b      	b.n	8007bc8 <pow+0xa0>
 8007b90:	ec47 6b10 	vmov	d0, r6, r7
 8007b94:	f000 f838 	bl	8007c08 <finite>
 8007b98:	b9e0      	cbnz	r0, 8007bd4 <pow+0xac>
 8007b9a:	eeb0 0a48 	vmov.f32	s0, s16
 8007b9e:	eef0 0a68 	vmov.f32	s1, s17
 8007ba2:	f000 f831 	bl	8007c08 <finite>
 8007ba6:	b1a8      	cbz	r0, 8007bd4 <pow+0xac>
 8007ba8:	ec45 4b10 	vmov	d0, r4, r5
 8007bac:	f000 f82c 	bl	8007c08 <finite>
 8007bb0:	b180      	cbz	r0, 8007bd4 <pow+0xac>
 8007bb2:	4632      	mov	r2, r6
 8007bb4:	463b      	mov	r3, r7
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	4639      	mov	r1, r7
 8007bba:	f7f8 ffcf 	bl	8000b5c <__aeabi_dcmpun>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d0e2      	beq.n	8007b88 <pow+0x60>
 8007bc2:	f7ff f807 	bl	8006bd4 <__errno>
 8007bc6:	2321      	movs	r3, #33	@ 0x21
 8007bc8:	6003      	str	r3, [r0, #0]
 8007bca:	ecbd 8b02 	vpop	{d8}
 8007bce:	ec47 6b10 	vmov	d0, r6, r7
 8007bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	4630      	mov	r0, r6
 8007bda:	4639      	mov	r1, r7
 8007bdc:	f7f8 ff8c 	bl	8000af8 <__aeabi_dcmpeq>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	d0f2      	beq.n	8007bca <pow+0xa2>
 8007be4:	eeb0 0a48 	vmov.f32	s0, s16
 8007be8:	eef0 0a68 	vmov.f32	s1, s17
 8007bec:	f000 f80c 	bl	8007c08 <finite>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	d0ea      	beq.n	8007bca <pow+0xa2>
 8007bf4:	ec45 4b10 	vmov	d0, r4, r5
 8007bf8:	f000 f806 	bl	8007c08 <finite>
 8007bfc:	e7c3      	b.n	8007b86 <pow+0x5e>
 8007bfe:	4f01      	ldr	r7, [pc, #4]	@ (8007c04 <pow+0xdc>)
 8007c00:	2600      	movs	r6, #0
 8007c02:	e7e2      	b.n	8007bca <pow+0xa2>
 8007c04:	3ff00000 	.word	0x3ff00000

08007c08 <finite>:
 8007c08:	b082      	sub	sp, #8
 8007c0a:	ed8d 0b00 	vstr	d0, [sp]
 8007c0e:	9801      	ldr	r0, [sp, #4]
 8007c10:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007c14:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007c18:	0fc0      	lsrs	r0, r0, #31
 8007c1a:	b002      	add	sp, #8
 8007c1c:	4770      	bx	lr
	...

08007c20 <__ieee754_pow>:
 8007c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	b091      	sub	sp, #68	@ 0x44
 8007c26:	ed8d 1b00 	vstr	d1, [sp]
 8007c2a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8007c2e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8007c32:	ea5a 0001 	orrs.w	r0, sl, r1
 8007c36:	ec57 6b10 	vmov	r6, r7, d0
 8007c3a:	d113      	bne.n	8007c64 <__ieee754_pow+0x44>
 8007c3c:	19b3      	adds	r3, r6, r6
 8007c3e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8007c42:	4152      	adcs	r2, r2
 8007c44:	4298      	cmp	r0, r3
 8007c46:	4b9a      	ldr	r3, [pc, #616]	@ (8007eb0 <__ieee754_pow+0x290>)
 8007c48:	4193      	sbcs	r3, r2
 8007c4a:	f080 84ee 	bcs.w	800862a <__ieee754_pow+0xa0a>
 8007c4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c52:	4630      	mov	r0, r6
 8007c54:	4639      	mov	r1, r7
 8007c56:	f7f8 fb31 	bl	80002bc <__adddf3>
 8007c5a:	ec41 0b10 	vmov	d0, r0, r1
 8007c5e:	b011      	add	sp, #68	@ 0x44
 8007c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c64:	4a93      	ldr	r2, [pc, #588]	@ (8007eb4 <__ieee754_pow+0x294>)
 8007c66:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8007c6a:	4295      	cmp	r5, r2
 8007c6c:	46b8      	mov	r8, r7
 8007c6e:	4633      	mov	r3, r6
 8007c70:	d80a      	bhi.n	8007c88 <__ieee754_pow+0x68>
 8007c72:	d104      	bne.n	8007c7e <__ieee754_pow+0x5e>
 8007c74:	2e00      	cmp	r6, #0
 8007c76:	d1ea      	bne.n	8007c4e <__ieee754_pow+0x2e>
 8007c78:	45aa      	cmp	sl, r5
 8007c7a:	d8e8      	bhi.n	8007c4e <__ieee754_pow+0x2e>
 8007c7c:	e001      	b.n	8007c82 <__ieee754_pow+0x62>
 8007c7e:	4592      	cmp	sl, r2
 8007c80:	d802      	bhi.n	8007c88 <__ieee754_pow+0x68>
 8007c82:	4592      	cmp	sl, r2
 8007c84:	d10f      	bne.n	8007ca6 <__ieee754_pow+0x86>
 8007c86:	b171      	cbz	r1, 8007ca6 <__ieee754_pow+0x86>
 8007c88:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8007c8c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007c90:	ea58 0803 	orrs.w	r8, r8, r3
 8007c94:	d1db      	bne.n	8007c4e <__ieee754_pow+0x2e>
 8007c96:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007c9a:	18db      	adds	r3, r3, r3
 8007c9c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007ca0:	4152      	adcs	r2, r2
 8007ca2:	4598      	cmp	r8, r3
 8007ca4:	e7cf      	b.n	8007c46 <__ieee754_pow+0x26>
 8007ca6:	f1b8 0f00 	cmp.w	r8, #0
 8007caa:	46ab      	mov	fp, r5
 8007cac:	da43      	bge.n	8007d36 <__ieee754_pow+0x116>
 8007cae:	4a82      	ldr	r2, [pc, #520]	@ (8007eb8 <__ieee754_pow+0x298>)
 8007cb0:	4592      	cmp	sl, r2
 8007cb2:	d856      	bhi.n	8007d62 <__ieee754_pow+0x142>
 8007cb4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007cb8:	4592      	cmp	sl, r2
 8007cba:	f240 84c5 	bls.w	8008648 <__ieee754_pow+0xa28>
 8007cbe:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007cc2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007cc6:	2a14      	cmp	r2, #20
 8007cc8:	dd18      	ble.n	8007cfc <__ieee754_pow+0xdc>
 8007cca:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007cce:	fa21 f402 	lsr.w	r4, r1, r2
 8007cd2:	fa04 f202 	lsl.w	r2, r4, r2
 8007cd6:	428a      	cmp	r2, r1
 8007cd8:	f040 84b6 	bne.w	8008648 <__ieee754_pow+0xa28>
 8007cdc:	f004 0401 	and.w	r4, r4, #1
 8007ce0:	f1c4 0402 	rsb	r4, r4, #2
 8007ce4:	2900      	cmp	r1, #0
 8007ce6:	d159      	bne.n	8007d9c <__ieee754_pow+0x17c>
 8007ce8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8007cec:	d148      	bne.n	8007d80 <__ieee754_pow+0x160>
 8007cee:	4632      	mov	r2, r6
 8007cf0:	463b      	mov	r3, r7
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	4639      	mov	r1, r7
 8007cf6:	f7f8 fc97 	bl	8000628 <__aeabi_dmul>
 8007cfa:	e7ae      	b.n	8007c5a <__ieee754_pow+0x3a>
 8007cfc:	2900      	cmp	r1, #0
 8007cfe:	d14c      	bne.n	8007d9a <__ieee754_pow+0x17a>
 8007d00:	f1c2 0214 	rsb	r2, r2, #20
 8007d04:	fa4a f402 	asr.w	r4, sl, r2
 8007d08:	fa04 f202 	lsl.w	r2, r4, r2
 8007d0c:	4552      	cmp	r2, sl
 8007d0e:	f040 8498 	bne.w	8008642 <__ieee754_pow+0xa22>
 8007d12:	f004 0401 	and.w	r4, r4, #1
 8007d16:	f1c4 0402 	rsb	r4, r4, #2
 8007d1a:	4a68      	ldr	r2, [pc, #416]	@ (8007ebc <__ieee754_pow+0x29c>)
 8007d1c:	4592      	cmp	sl, r2
 8007d1e:	d1e3      	bne.n	8007ce8 <__ieee754_pow+0xc8>
 8007d20:	f1b9 0f00 	cmp.w	r9, #0
 8007d24:	f280 8489 	bge.w	800863a <__ieee754_pow+0xa1a>
 8007d28:	4964      	ldr	r1, [pc, #400]	@ (8007ebc <__ieee754_pow+0x29c>)
 8007d2a:	4632      	mov	r2, r6
 8007d2c:	463b      	mov	r3, r7
 8007d2e:	2000      	movs	r0, #0
 8007d30:	f7f8 fda4 	bl	800087c <__aeabi_ddiv>
 8007d34:	e791      	b.n	8007c5a <__ieee754_pow+0x3a>
 8007d36:	2400      	movs	r4, #0
 8007d38:	bb81      	cbnz	r1, 8007d9c <__ieee754_pow+0x17c>
 8007d3a:	4a5e      	ldr	r2, [pc, #376]	@ (8007eb4 <__ieee754_pow+0x294>)
 8007d3c:	4592      	cmp	sl, r2
 8007d3e:	d1ec      	bne.n	8007d1a <__ieee754_pow+0xfa>
 8007d40:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8007d44:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8007d48:	431a      	orrs	r2, r3
 8007d4a:	f000 846e 	beq.w	800862a <__ieee754_pow+0xa0a>
 8007d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8007ec0 <__ieee754_pow+0x2a0>)
 8007d50:	429d      	cmp	r5, r3
 8007d52:	d908      	bls.n	8007d66 <__ieee754_pow+0x146>
 8007d54:	f1b9 0f00 	cmp.w	r9, #0
 8007d58:	f280 846b 	bge.w	8008632 <__ieee754_pow+0xa12>
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	2100      	movs	r1, #0
 8007d60:	e77b      	b.n	8007c5a <__ieee754_pow+0x3a>
 8007d62:	2402      	movs	r4, #2
 8007d64:	e7e8      	b.n	8007d38 <__ieee754_pow+0x118>
 8007d66:	f1b9 0f00 	cmp.w	r9, #0
 8007d6a:	f04f 0000 	mov.w	r0, #0
 8007d6e:	f04f 0100 	mov.w	r1, #0
 8007d72:	f6bf af72 	bge.w	8007c5a <__ieee754_pow+0x3a>
 8007d76:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007d7a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007d7e:	e76c      	b.n	8007c5a <__ieee754_pow+0x3a>
 8007d80:	4a50      	ldr	r2, [pc, #320]	@ (8007ec4 <__ieee754_pow+0x2a4>)
 8007d82:	4591      	cmp	r9, r2
 8007d84:	d10a      	bne.n	8007d9c <__ieee754_pow+0x17c>
 8007d86:	f1b8 0f00 	cmp.w	r8, #0
 8007d8a:	db07      	blt.n	8007d9c <__ieee754_pow+0x17c>
 8007d8c:	ec47 6b10 	vmov	d0, r6, r7
 8007d90:	b011      	add	sp, #68	@ 0x44
 8007d92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d96:	f000 bd4f 	b.w	8008838 <__ieee754_sqrt>
 8007d9a:	2400      	movs	r4, #0
 8007d9c:	ec47 6b10 	vmov	d0, r6, r7
 8007da0:	9302      	str	r3, [sp, #8]
 8007da2:	f000 fc87 	bl	80086b4 <fabs>
 8007da6:	9b02      	ldr	r3, [sp, #8]
 8007da8:	ec51 0b10 	vmov	r0, r1, d0
 8007dac:	bb43      	cbnz	r3, 8007e00 <__ieee754_pow+0x1e0>
 8007dae:	4b43      	ldr	r3, [pc, #268]	@ (8007ebc <__ieee754_pow+0x29c>)
 8007db0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d000      	beq.n	8007dba <__ieee754_pow+0x19a>
 8007db8:	bb15      	cbnz	r5, 8007e00 <__ieee754_pow+0x1e0>
 8007dba:	f1b9 0f00 	cmp.w	r9, #0
 8007dbe:	da05      	bge.n	8007dcc <__ieee754_pow+0x1ac>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	493d      	ldr	r1, [pc, #244]	@ (8007ebc <__ieee754_pow+0x29c>)
 8007dc8:	f7f8 fd58 	bl	800087c <__aeabi_ddiv>
 8007dcc:	f1b8 0f00 	cmp.w	r8, #0
 8007dd0:	f6bf af43 	bge.w	8007c5a <__ieee754_pow+0x3a>
 8007dd4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007dd8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007ddc:	4325      	orrs	r5, r4
 8007dde:	d108      	bne.n	8007df2 <__ieee754_pow+0x1d2>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	4610      	mov	r0, r2
 8007de6:	4619      	mov	r1, r3
 8007de8:	f7f8 fa66 	bl	80002b8 <__aeabi_dsub>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	e79e      	b.n	8007d30 <__ieee754_pow+0x110>
 8007df2:	2c01      	cmp	r4, #1
 8007df4:	f47f af31 	bne.w	8007c5a <__ieee754_pow+0x3a>
 8007df8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	e72c      	b.n	8007c5a <__ieee754_pow+0x3a>
 8007e00:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8007e04:	3b01      	subs	r3, #1
 8007e06:	ea53 0204 	orrs.w	r2, r3, r4
 8007e0a:	d102      	bne.n	8007e12 <__ieee754_pow+0x1f2>
 8007e0c:	4632      	mov	r2, r6
 8007e0e:	463b      	mov	r3, r7
 8007e10:	e7e8      	b.n	8007de4 <__ieee754_pow+0x1c4>
 8007e12:	3c01      	subs	r4, #1
 8007e14:	431c      	orrs	r4, r3
 8007e16:	d016      	beq.n	8007e46 <__ieee754_pow+0x226>
 8007e18:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007ea0 <__ieee754_pow+0x280>
 8007e1c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8007e20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e24:	f240 8110 	bls.w	8008048 <__ieee754_pow+0x428>
 8007e28:	4b27      	ldr	r3, [pc, #156]	@ (8007ec8 <__ieee754_pow+0x2a8>)
 8007e2a:	459a      	cmp	sl, r3
 8007e2c:	4b24      	ldr	r3, [pc, #144]	@ (8007ec0 <__ieee754_pow+0x2a0>)
 8007e2e:	d916      	bls.n	8007e5e <__ieee754_pow+0x23e>
 8007e30:	429d      	cmp	r5, r3
 8007e32:	d80b      	bhi.n	8007e4c <__ieee754_pow+0x22c>
 8007e34:	f1b9 0f00 	cmp.w	r9, #0
 8007e38:	da0b      	bge.n	8007e52 <__ieee754_pow+0x232>
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	b011      	add	sp, #68	@ 0x44
 8007e3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e42:	f000 bcf1 	b.w	8008828 <__math_oflow>
 8007e46:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8007ea8 <__ieee754_pow+0x288>
 8007e4a:	e7e7      	b.n	8007e1c <__ieee754_pow+0x1fc>
 8007e4c:	f1b9 0f00 	cmp.w	r9, #0
 8007e50:	dcf3      	bgt.n	8007e3a <__ieee754_pow+0x21a>
 8007e52:	2000      	movs	r0, #0
 8007e54:	b011      	add	sp, #68	@ 0x44
 8007e56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5a:	f000 bcdd 	b.w	8008818 <__math_uflow>
 8007e5e:	429d      	cmp	r5, r3
 8007e60:	d20c      	bcs.n	8007e7c <__ieee754_pow+0x25c>
 8007e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e66:	2200      	movs	r2, #0
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f7f8 fe4f 	bl	8000b0c <__aeabi_dcmplt>
 8007e6e:	3800      	subs	r0, #0
 8007e70:	bf18      	it	ne
 8007e72:	2001      	movne	r0, #1
 8007e74:	f1b9 0f00 	cmp.w	r9, #0
 8007e78:	daec      	bge.n	8007e54 <__ieee754_pow+0x234>
 8007e7a:	e7df      	b.n	8007e3c <__ieee754_pow+0x21c>
 8007e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8007ebc <__ieee754_pow+0x29c>)
 8007e7e:	429d      	cmp	r5, r3
 8007e80:	f04f 0200 	mov.w	r2, #0
 8007e84:	d922      	bls.n	8007ecc <__ieee754_pow+0x2ac>
 8007e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	f7f8 fe3e 	bl	8000b0c <__aeabi_dcmplt>
 8007e90:	3800      	subs	r0, #0
 8007e92:	bf18      	it	ne
 8007e94:	2001      	movne	r0, #1
 8007e96:	f1b9 0f00 	cmp.w	r9, #0
 8007e9a:	dccf      	bgt.n	8007e3c <__ieee754_pow+0x21c>
 8007e9c:	e7da      	b.n	8007e54 <__ieee754_pow+0x234>
 8007e9e:	bf00      	nop
 8007ea0:	00000000 	.word	0x00000000
 8007ea4:	3ff00000 	.word	0x3ff00000
 8007ea8:	00000000 	.word	0x00000000
 8007eac:	bff00000 	.word	0xbff00000
 8007eb0:	fff00000 	.word	0xfff00000
 8007eb4:	7ff00000 	.word	0x7ff00000
 8007eb8:	433fffff 	.word	0x433fffff
 8007ebc:	3ff00000 	.word	0x3ff00000
 8007ec0:	3fefffff 	.word	0x3fefffff
 8007ec4:	3fe00000 	.word	0x3fe00000
 8007ec8:	43f00000 	.word	0x43f00000
 8007ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8008038 <__ieee754_pow+0x418>)
 8007ece:	f7f8 f9f3 	bl	80002b8 <__aeabi_dsub>
 8007ed2:	a351      	add	r3, pc, #324	@ (adr r3, 8008018 <__ieee754_pow+0x3f8>)
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	4604      	mov	r4, r0
 8007eda:	460d      	mov	r5, r1
 8007edc:	f7f8 fba4 	bl	8000628 <__aeabi_dmul>
 8007ee0:	a34f      	add	r3, pc, #316	@ (adr r3, 8008020 <__ieee754_pow+0x400>)
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	460f      	mov	r7, r1
 8007eea:	4620      	mov	r0, r4
 8007eec:	4629      	mov	r1, r5
 8007eee:	f7f8 fb9b 	bl	8000628 <__aeabi_dmul>
 8007ef2:	4b52      	ldr	r3, [pc, #328]	@ (800803c <__ieee754_pow+0x41c>)
 8007ef4:	4682      	mov	sl, r0
 8007ef6:	468b      	mov	fp, r1
 8007ef8:	2200      	movs	r2, #0
 8007efa:	4620      	mov	r0, r4
 8007efc:	4629      	mov	r1, r5
 8007efe:	f7f8 fb93 	bl	8000628 <__aeabi_dmul>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	a148      	add	r1, pc, #288	@ (adr r1, 8008028 <__ieee754_pow+0x408>)
 8007f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f0c:	f7f8 f9d4 	bl	80002b8 <__aeabi_dsub>
 8007f10:	4622      	mov	r2, r4
 8007f12:	462b      	mov	r3, r5
 8007f14:	f7f8 fb88 	bl	8000628 <__aeabi_dmul>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	4948      	ldr	r1, [pc, #288]	@ (8008040 <__ieee754_pow+0x420>)
 8007f20:	f7f8 f9ca 	bl	80002b8 <__aeabi_dsub>
 8007f24:	4622      	mov	r2, r4
 8007f26:	4680      	mov	r8, r0
 8007f28:	4689      	mov	r9, r1
 8007f2a:	462b      	mov	r3, r5
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	4629      	mov	r1, r5
 8007f30:	f7f8 fb7a 	bl	8000628 <__aeabi_dmul>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	4640      	mov	r0, r8
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	f7f8 fb74 	bl	8000628 <__aeabi_dmul>
 8007f40:	a33b      	add	r3, pc, #236	@ (adr r3, 8008030 <__ieee754_pow+0x410>)
 8007f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f46:	f7f8 fb6f 	bl	8000628 <__aeabi_dmul>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	4650      	mov	r0, sl
 8007f50:	4659      	mov	r1, fp
 8007f52:	f7f8 f9b1 	bl	80002b8 <__aeabi_dsub>
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	4680      	mov	r8, r0
 8007f5c:	4689      	mov	r9, r1
 8007f5e:	4630      	mov	r0, r6
 8007f60:	4639      	mov	r1, r7
 8007f62:	f7f8 f9ab 	bl	80002bc <__adddf3>
 8007f66:	2400      	movs	r4, #0
 8007f68:	4632      	mov	r2, r6
 8007f6a:	463b      	mov	r3, r7
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	460d      	mov	r5, r1
 8007f70:	f7f8 f9a2 	bl	80002b8 <__aeabi_dsub>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	4640      	mov	r0, r8
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	f7f8 f99c 	bl	80002b8 <__aeabi_dsub>
 8007f80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f88:	2300      	movs	r3, #0
 8007f8a:	9304      	str	r3, [sp, #16]
 8007f8c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007f90:	4606      	mov	r6, r0
 8007f92:	460f      	mov	r7, r1
 8007f94:	465b      	mov	r3, fp
 8007f96:	4652      	mov	r2, sl
 8007f98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f9c:	f7f8 f98c 	bl	80002b8 <__aeabi_dsub>
 8007fa0:	4622      	mov	r2, r4
 8007fa2:	462b      	mov	r3, r5
 8007fa4:	f7f8 fb40 	bl	8000628 <__aeabi_dmul>
 8007fa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fac:	4680      	mov	r8, r0
 8007fae:	4689      	mov	r9, r1
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	4639      	mov	r1, r7
 8007fb4:	f7f8 fb38 	bl	8000628 <__aeabi_dmul>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	460b      	mov	r3, r1
 8007fbc:	4640      	mov	r0, r8
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	f7f8 f97c 	bl	80002bc <__adddf3>
 8007fc4:	465b      	mov	r3, fp
 8007fc6:	4606      	mov	r6, r0
 8007fc8:	460f      	mov	r7, r1
 8007fca:	4652      	mov	r2, sl
 8007fcc:	4620      	mov	r0, r4
 8007fce:	4629      	mov	r1, r5
 8007fd0:	f7f8 fb2a 	bl	8000628 <__aeabi_dmul>
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	4680      	mov	r8, r0
 8007fda:	4689      	mov	r9, r1
 8007fdc:	4630      	mov	r0, r6
 8007fde:	4639      	mov	r1, r7
 8007fe0:	f7f8 f96c 	bl	80002bc <__adddf3>
 8007fe4:	4b17      	ldr	r3, [pc, #92]	@ (8008044 <__ieee754_pow+0x424>)
 8007fe6:	4299      	cmp	r1, r3
 8007fe8:	4604      	mov	r4, r0
 8007fea:	460d      	mov	r5, r1
 8007fec:	468b      	mov	fp, r1
 8007fee:	f340 820b 	ble.w	8008408 <__ieee754_pow+0x7e8>
 8007ff2:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007ff6:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007ffa:	4303      	orrs	r3, r0
 8007ffc:	f000 81ea 	beq.w	80083d4 <__ieee754_pow+0x7b4>
 8008000:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008004:	2200      	movs	r2, #0
 8008006:	2300      	movs	r3, #0
 8008008:	f7f8 fd80 	bl	8000b0c <__aeabi_dcmplt>
 800800c:	3800      	subs	r0, #0
 800800e:	bf18      	it	ne
 8008010:	2001      	movne	r0, #1
 8008012:	e713      	b.n	8007e3c <__ieee754_pow+0x21c>
 8008014:	f3af 8000 	nop.w
 8008018:	60000000 	.word	0x60000000
 800801c:	3ff71547 	.word	0x3ff71547
 8008020:	f85ddf44 	.word	0xf85ddf44
 8008024:	3e54ae0b 	.word	0x3e54ae0b
 8008028:	55555555 	.word	0x55555555
 800802c:	3fd55555 	.word	0x3fd55555
 8008030:	652b82fe 	.word	0x652b82fe
 8008034:	3ff71547 	.word	0x3ff71547
 8008038:	3ff00000 	.word	0x3ff00000
 800803c:	3fd00000 	.word	0x3fd00000
 8008040:	3fe00000 	.word	0x3fe00000
 8008044:	408fffff 	.word	0x408fffff
 8008048:	4bd5      	ldr	r3, [pc, #852]	@ (80083a0 <__ieee754_pow+0x780>)
 800804a:	ea08 0303 	and.w	r3, r8, r3
 800804e:	2200      	movs	r2, #0
 8008050:	b92b      	cbnz	r3, 800805e <__ieee754_pow+0x43e>
 8008052:	4bd4      	ldr	r3, [pc, #848]	@ (80083a4 <__ieee754_pow+0x784>)
 8008054:	f7f8 fae8 	bl	8000628 <__aeabi_dmul>
 8008058:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800805c:	468b      	mov	fp, r1
 800805e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008062:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008066:	4413      	add	r3, r2
 8008068:	930a      	str	r3, [sp, #40]	@ 0x28
 800806a:	4bcf      	ldr	r3, [pc, #828]	@ (80083a8 <__ieee754_pow+0x788>)
 800806c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008070:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8008074:	459b      	cmp	fp, r3
 8008076:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800807a:	dd08      	ble.n	800808e <__ieee754_pow+0x46e>
 800807c:	4bcb      	ldr	r3, [pc, #812]	@ (80083ac <__ieee754_pow+0x78c>)
 800807e:	459b      	cmp	fp, r3
 8008080:	f340 81a5 	ble.w	80083ce <__ieee754_pow+0x7ae>
 8008084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008086:	3301      	adds	r3, #1
 8008088:	930a      	str	r3, [sp, #40]	@ 0x28
 800808a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800808e:	f04f 0a00 	mov.w	sl, #0
 8008092:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008096:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008098:	4bc5      	ldr	r3, [pc, #788]	@ (80083b0 <__ieee754_pow+0x790>)
 800809a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800809e:	ed93 7b00 	vldr	d7, [r3]
 80080a2:	4629      	mov	r1, r5
 80080a4:	ec53 2b17 	vmov	r2, r3, d7
 80080a8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80080ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80080b0:	f7f8 f902 	bl	80002b8 <__aeabi_dsub>
 80080b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80080b8:	4606      	mov	r6, r0
 80080ba:	460f      	mov	r7, r1
 80080bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080c0:	f7f8 f8fc 	bl	80002bc <__adddf3>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	2000      	movs	r0, #0
 80080ca:	49ba      	ldr	r1, [pc, #744]	@ (80083b4 <__ieee754_pow+0x794>)
 80080cc:	f7f8 fbd6 	bl	800087c <__aeabi_ddiv>
 80080d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4630      	mov	r0, r6
 80080da:	4639      	mov	r1, r7
 80080dc:	f7f8 faa4 	bl	8000628 <__aeabi_dmul>
 80080e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080e4:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80080e8:	106d      	asrs	r5, r5, #1
 80080ea:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80080ee:	f04f 0b00 	mov.w	fp, #0
 80080f2:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80080f6:	4661      	mov	r1, ip
 80080f8:	2200      	movs	r2, #0
 80080fa:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80080fe:	4658      	mov	r0, fp
 8008100:	46e1      	mov	r9, ip
 8008102:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8008106:	4614      	mov	r4, r2
 8008108:	461d      	mov	r5, r3
 800810a:	f7f8 fa8d 	bl	8000628 <__aeabi_dmul>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	4630      	mov	r0, r6
 8008114:	4639      	mov	r1, r7
 8008116:	f7f8 f8cf 	bl	80002b8 <__aeabi_dsub>
 800811a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800811e:	4606      	mov	r6, r0
 8008120:	460f      	mov	r7, r1
 8008122:	4620      	mov	r0, r4
 8008124:	4629      	mov	r1, r5
 8008126:	f7f8 f8c7 	bl	80002b8 <__aeabi_dsub>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008132:	f7f8 f8c1 	bl	80002b8 <__aeabi_dsub>
 8008136:	465a      	mov	r2, fp
 8008138:	464b      	mov	r3, r9
 800813a:	f7f8 fa75 	bl	8000628 <__aeabi_dmul>
 800813e:	4602      	mov	r2, r0
 8008140:	460b      	mov	r3, r1
 8008142:	4630      	mov	r0, r6
 8008144:	4639      	mov	r1, r7
 8008146:	f7f8 f8b7 	bl	80002b8 <__aeabi_dsub>
 800814a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800814e:	f7f8 fa6b 	bl	8000628 <__aeabi_dmul>
 8008152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008156:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800815a:	4610      	mov	r0, r2
 800815c:	4619      	mov	r1, r3
 800815e:	f7f8 fa63 	bl	8000628 <__aeabi_dmul>
 8008162:	a37d      	add	r3, pc, #500	@ (adr r3, 8008358 <__ieee754_pow+0x738>)
 8008164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008168:	4604      	mov	r4, r0
 800816a:	460d      	mov	r5, r1
 800816c:	f7f8 fa5c 	bl	8000628 <__aeabi_dmul>
 8008170:	a37b      	add	r3, pc, #492	@ (adr r3, 8008360 <__ieee754_pow+0x740>)
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	f7f8 f8a1 	bl	80002bc <__adddf3>
 800817a:	4622      	mov	r2, r4
 800817c:	462b      	mov	r3, r5
 800817e:	f7f8 fa53 	bl	8000628 <__aeabi_dmul>
 8008182:	a379      	add	r3, pc, #484	@ (adr r3, 8008368 <__ieee754_pow+0x748>)
 8008184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008188:	f7f8 f898 	bl	80002bc <__adddf3>
 800818c:	4622      	mov	r2, r4
 800818e:	462b      	mov	r3, r5
 8008190:	f7f8 fa4a 	bl	8000628 <__aeabi_dmul>
 8008194:	a376      	add	r3, pc, #472	@ (adr r3, 8008370 <__ieee754_pow+0x750>)
 8008196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819a:	f7f8 f88f 	bl	80002bc <__adddf3>
 800819e:	4622      	mov	r2, r4
 80081a0:	462b      	mov	r3, r5
 80081a2:	f7f8 fa41 	bl	8000628 <__aeabi_dmul>
 80081a6:	a374      	add	r3, pc, #464	@ (adr r3, 8008378 <__ieee754_pow+0x758>)
 80081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ac:	f7f8 f886 	bl	80002bc <__adddf3>
 80081b0:	4622      	mov	r2, r4
 80081b2:	462b      	mov	r3, r5
 80081b4:	f7f8 fa38 	bl	8000628 <__aeabi_dmul>
 80081b8:	a371      	add	r3, pc, #452	@ (adr r3, 8008380 <__ieee754_pow+0x760>)
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	f7f8 f87d 	bl	80002bc <__adddf3>
 80081c2:	4622      	mov	r2, r4
 80081c4:	4606      	mov	r6, r0
 80081c6:	460f      	mov	r7, r1
 80081c8:	462b      	mov	r3, r5
 80081ca:	4620      	mov	r0, r4
 80081cc:	4629      	mov	r1, r5
 80081ce:	f7f8 fa2b 	bl	8000628 <__aeabi_dmul>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4630      	mov	r0, r6
 80081d8:	4639      	mov	r1, r7
 80081da:	f7f8 fa25 	bl	8000628 <__aeabi_dmul>
 80081de:	465a      	mov	r2, fp
 80081e0:	4604      	mov	r4, r0
 80081e2:	460d      	mov	r5, r1
 80081e4:	464b      	mov	r3, r9
 80081e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081ea:	f7f8 f867 	bl	80002bc <__adddf3>
 80081ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081f2:	f7f8 fa19 	bl	8000628 <__aeabi_dmul>
 80081f6:	4622      	mov	r2, r4
 80081f8:	462b      	mov	r3, r5
 80081fa:	f7f8 f85f 	bl	80002bc <__adddf3>
 80081fe:	465a      	mov	r2, fp
 8008200:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008204:	464b      	mov	r3, r9
 8008206:	4658      	mov	r0, fp
 8008208:	4649      	mov	r1, r9
 800820a:	f7f8 fa0d 	bl	8000628 <__aeabi_dmul>
 800820e:	4b6a      	ldr	r3, [pc, #424]	@ (80083b8 <__ieee754_pow+0x798>)
 8008210:	2200      	movs	r2, #0
 8008212:	4606      	mov	r6, r0
 8008214:	460f      	mov	r7, r1
 8008216:	f7f8 f851 	bl	80002bc <__adddf3>
 800821a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800821e:	f7f8 f84d 	bl	80002bc <__adddf3>
 8008222:	46d8      	mov	r8, fp
 8008224:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008228:	460d      	mov	r5, r1
 800822a:	465a      	mov	r2, fp
 800822c:	460b      	mov	r3, r1
 800822e:	4640      	mov	r0, r8
 8008230:	4649      	mov	r1, r9
 8008232:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8008236:	f7f8 f9f7 	bl	8000628 <__aeabi_dmul>
 800823a:	465c      	mov	r4, fp
 800823c:	4680      	mov	r8, r0
 800823e:	4689      	mov	r9, r1
 8008240:	4b5d      	ldr	r3, [pc, #372]	@ (80083b8 <__ieee754_pow+0x798>)
 8008242:	2200      	movs	r2, #0
 8008244:	4620      	mov	r0, r4
 8008246:	4629      	mov	r1, r5
 8008248:	f7f8 f836 	bl	80002b8 <__aeabi_dsub>
 800824c:	4632      	mov	r2, r6
 800824e:	463b      	mov	r3, r7
 8008250:	f7f8 f832 	bl	80002b8 <__aeabi_dsub>
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800825c:	f7f8 f82c 	bl	80002b8 <__aeabi_dsub>
 8008260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008264:	f7f8 f9e0 	bl	8000628 <__aeabi_dmul>
 8008268:	4622      	mov	r2, r4
 800826a:	4606      	mov	r6, r0
 800826c:	460f      	mov	r7, r1
 800826e:	462b      	mov	r3, r5
 8008270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008274:	f7f8 f9d8 	bl	8000628 <__aeabi_dmul>
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	4630      	mov	r0, r6
 800827e:	4639      	mov	r1, r7
 8008280:	f7f8 f81c 	bl	80002bc <__adddf3>
 8008284:	4606      	mov	r6, r0
 8008286:	460f      	mov	r7, r1
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4640      	mov	r0, r8
 800828e:	4649      	mov	r1, r9
 8008290:	f7f8 f814 	bl	80002bc <__adddf3>
 8008294:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008298:	a33b      	add	r3, pc, #236	@ (adr r3, 8008388 <__ieee754_pow+0x768>)
 800829a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829e:	4658      	mov	r0, fp
 80082a0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80082a4:	460d      	mov	r5, r1
 80082a6:	f7f8 f9bf 	bl	8000628 <__aeabi_dmul>
 80082aa:	465c      	mov	r4, fp
 80082ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082b0:	4642      	mov	r2, r8
 80082b2:	464b      	mov	r3, r9
 80082b4:	4620      	mov	r0, r4
 80082b6:	4629      	mov	r1, r5
 80082b8:	f7f7 fffe 	bl	80002b8 <__aeabi_dsub>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	4630      	mov	r0, r6
 80082c2:	4639      	mov	r1, r7
 80082c4:	f7f7 fff8 	bl	80002b8 <__aeabi_dsub>
 80082c8:	a331      	add	r3, pc, #196	@ (adr r3, 8008390 <__ieee754_pow+0x770>)
 80082ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ce:	f7f8 f9ab 	bl	8000628 <__aeabi_dmul>
 80082d2:	a331      	add	r3, pc, #196	@ (adr r3, 8008398 <__ieee754_pow+0x778>)
 80082d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d8:	4606      	mov	r6, r0
 80082da:	460f      	mov	r7, r1
 80082dc:	4620      	mov	r0, r4
 80082de:	4629      	mov	r1, r5
 80082e0:	f7f8 f9a2 	bl	8000628 <__aeabi_dmul>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4630      	mov	r0, r6
 80082ea:	4639      	mov	r1, r7
 80082ec:	f7f7 ffe6 	bl	80002bc <__adddf3>
 80082f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80082f2:	4b32      	ldr	r3, [pc, #200]	@ (80083bc <__ieee754_pow+0x79c>)
 80082f4:	4413      	add	r3, r2
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	f7f7 ffdf 	bl	80002bc <__adddf3>
 80082fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008302:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008304:	f7f8 f926 	bl	8000554 <__aeabi_i2d>
 8008308:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800830a:	4b2d      	ldr	r3, [pc, #180]	@ (80083c0 <__ieee754_pow+0x7a0>)
 800830c:	4413      	add	r3, r2
 800830e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008312:	4606      	mov	r6, r0
 8008314:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008318:	460f      	mov	r7, r1
 800831a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800831e:	f7f7 ffcd 	bl	80002bc <__adddf3>
 8008322:	4642      	mov	r2, r8
 8008324:	464b      	mov	r3, r9
 8008326:	f7f7 ffc9 	bl	80002bc <__adddf3>
 800832a:	4632      	mov	r2, r6
 800832c:	463b      	mov	r3, r7
 800832e:	f7f7 ffc5 	bl	80002bc <__adddf3>
 8008332:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8008336:	4632      	mov	r2, r6
 8008338:	463b      	mov	r3, r7
 800833a:	4658      	mov	r0, fp
 800833c:	460d      	mov	r5, r1
 800833e:	f7f7 ffbb 	bl	80002b8 <__aeabi_dsub>
 8008342:	4642      	mov	r2, r8
 8008344:	464b      	mov	r3, r9
 8008346:	f7f7 ffb7 	bl	80002b8 <__aeabi_dsub>
 800834a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800834e:	f7f7 ffb3 	bl	80002b8 <__aeabi_dsub>
 8008352:	465c      	mov	r4, fp
 8008354:	e036      	b.n	80083c4 <__ieee754_pow+0x7a4>
 8008356:	bf00      	nop
 8008358:	4a454eef 	.word	0x4a454eef
 800835c:	3fca7e28 	.word	0x3fca7e28
 8008360:	93c9db65 	.word	0x93c9db65
 8008364:	3fcd864a 	.word	0x3fcd864a
 8008368:	a91d4101 	.word	0xa91d4101
 800836c:	3fd17460 	.word	0x3fd17460
 8008370:	518f264d 	.word	0x518f264d
 8008374:	3fd55555 	.word	0x3fd55555
 8008378:	db6fabff 	.word	0xdb6fabff
 800837c:	3fdb6db6 	.word	0x3fdb6db6
 8008380:	33333303 	.word	0x33333303
 8008384:	3fe33333 	.word	0x3fe33333
 8008388:	e0000000 	.word	0xe0000000
 800838c:	3feec709 	.word	0x3feec709
 8008390:	dc3a03fd 	.word	0xdc3a03fd
 8008394:	3feec709 	.word	0x3feec709
 8008398:	145b01f5 	.word	0x145b01f5
 800839c:	be3e2fe0 	.word	0xbe3e2fe0
 80083a0:	7ff00000 	.word	0x7ff00000
 80083a4:	43400000 	.word	0x43400000
 80083a8:	0003988e 	.word	0x0003988e
 80083ac:	000bb679 	.word	0x000bb679
 80083b0:	08008f68 	.word	0x08008f68
 80083b4:	3ff00000 	.word	0x3ff00000
 80083b8:	40080000 	.word	0x40080000
 80083bc:	08008f48 	.word	0x08008f48
 80083c0:	08008f58 	.word	0x08008f58
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083cc:	e5d6      	b.n	8007f7c <__ieee754_pow+0x35c>
 80083ce:	f04f 0a01 	mov.w	sl, #1
 80083d2:	e65e      	b.n	8008092 <__ieee754_pow+0x472>
 80083d4:	a3b5      	add	r3, pc, #724	@ (adr r3, 80086ac <__ieee754_pow+0xa8c>)
 80083d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083da:	4630      	mov	r0, r6
 80083dc:	4639      	mov	r1, r7
 80083de:	f7f7 ff6d 	bl	80002bc <__adddf3>
 80083e2:	4642      	mov	r2, r8
 80083e4:	e9cd 0100 	strd	r0, r1, [sp]
 80083e8:	464b      	mov	r3, r9
 80083ea:	4620      	mov	r0, r4
 80083ec:	4629      	mov	r1, r5
 80083ee:	f7f7 ff63 	bl	80002b8 <__aeabi_dsub>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083fa:	f7f8 fba5 	bl	8000b48 <__aeabi_dcmpgt>
 80083fe:	2800      	cmp	r0, #0
 8008400:	f47f adfe 	bne.w	8008000 <__ieee754_pow+0x3e0>
 8008404:	4ba2      	ldr	r3, [pc, #648]	@ (8008690 <__ieee754_pow+0xa70>)
 8008406:	e022      	b.n	800844e <__ieee754_pow+0x82e>
 8008408:	4ca2      	ldr	r4, [pc, #648]	@ (8008694 <__ieee754_pow+0xa74>)
 800840a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800840e:	42a3      	cmp	r3, r4
 8008410:	d919      	bls.n	8008446 <__ieee754_pow+0x826>
 8008412:	4ba1      	ldr	r3, [pc, #644]	@ (8008698 <__ieee754_pow+0xa78>)
 8008414:	440b      	add	r3, r1
 8008416:	4303      	orrs	r3, r0
 8008418:	d009      	beq.n	800842e <__ieee754_pow+0x80e>
 800841a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800841e:	2200      	movs	r2, #0
 8008420:	2300      	movs	r3, #0
 8008422:	f7f8 fb73 	bl	8000b0c <__aeabi_dcmplt>
 8008426:	3800      	subs	r0, #0
 8008428:	bf18      	it	ne
 800842a:	2001      	movne	r0, #1
 800842c:	e512      	b.n	8007e54 <__ieee754_pow+0x234>
 800842e:	4642      	mov	r2, r8
 8008430:	464b      	mov	r3, r9
 8008432:	f7f7 ff41 	bl	80002b8 <__aeabi_dsub>
 8008436:	4632      	mov	r2, r6
 8008438:	463b      	mov	r3, r7
 800843a:	f7f8 fb7b 	bl	8000b34 <__aeabi_dcmpge>
 800843e:	2800      	cmp	r0, #0
 8008440:	d1eb      	bne.n	800841a <__ieee754_pow+0x7fa>
 8008442:	4b96      	ldr	r3, [pc, #600]	@ (800869c <__ieee754_pow+0xa7c>)
 8008444:	e003      	b.n	800844e <__ieee754_pow+0x82e>
 8008446:	4a96      	ldr	r2, [pc, #600]	@ (80086a0 <__ieee754_pow+0xa80>)
 8008448:	4293      	cmp	r3, r2
 800844a:	f240 80e7 	bls.w	800861c <__ieee754_pow+0x9fc>
 800844e:	151b      	asrs	r3, r3, #20
 8008450:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8008454:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8008458:	fa4a fa03 	asr.w	sl, sl, r3
 800845c:	44da      	add	sl, fp
 800845e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008462:	4890      	ldr	r0, [pc, #576]	@ (80086a4 <__ieee754_pow+0xa84>)
 8008464:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008468:	4108      	asrs	r0, r1
 800846a:	ea00 030a 	and.w	r3, r0, sl
 800846e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008472:	f1c1 0114 	rsb	r1, r1, #20
 8008476:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800847a:	fa4a fa01 	asr.w	sl, sl, r1
 800847e:	f1bb 0f00 	cmp.w	fp, #0
 8008482:	4640      	mov	r0, r8
 8008484:	4649      	mov	r1, r9
 8008486:	f04f 0200 	mov.w	r2, #0
 800848a:	bfb8      	it	lt
 800848c:	f1ca 0a00 	rsblt	sl, sl, #0
 8008490:	f7f7 ff12 	bl	80002b8 <__aeabi_dsub>
 8008494:	4680      	mov	r8, r0
 8008496:	4689      	mov	r9, r1
 8008498:	4632      	mov	r2, r6
 800849a:	463b      	mov	r3, r7
 800849c:	4640      	mov	r0, r8
 800849e:	4649      	mov	r1, r9
 80084a0:	f7f7 ff0c 	bl	80002bc <__adddf3>
 80084a4:	2400      	movs	r4, #0
 80084a6:	a36a      	add	r3, pc, #424	@ (adr r3, 8008650 <__ieee754_pow+0xa30>)
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	4620      	mov	r0, r4
 80084ae:	460d      	mov	r5, r1
 80084b0:	f7f8 f8ba 	bl	8000628 <__aeabi_dmul>
 80084b4:	4642      	mov	r2, r8
 80084b6:	e9cd 0100 	strd	r0, r1, [sp]
 80084ba:	464b      	mov	r3, r9
 80084bc:	4620      	mov	r0, r4
 80084be:	4629      	mov	r1, r5
 80084c0:	f7f7 fefa 	bl	80002b8 <__aeabi_dsub>
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	4630      	mov	r0, r6
 80084ca:	4639      	mov	r1, r7
 80084cc:	f7f7 fef4 	bl	80002b8 <__aeabi_dsub>
 80084d0:	a361      	add	r3, pc, #388	@ (adr r3, 8008658 <__ieee754_pow+0xa38>)
 80084d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d6:	f7f8 f8a7 	bl	8000628 <__aeabi_dmul>
 80084da:	a361      	add	r3, pc, #388	@ (adr r3, 8008660 <__ieee754_pow+0xa40>)
 80084dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e0:	4680      	mov	r8, r0
 80084e2:	4689      	mov	r9, r1
 80084e4:	4620      	mov	r0, r4
 80084e6:	4629      	mov	r1, r5
 80084e8:	f7f8 f89e 	bl	8000628 <__aeabi_dmul>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	4640      	mov	r0, r8
 80084f2:	4649      	mov	r1, r9
 80084f4:	f7f7 fee2 	bl	80002bc <__adddf3>
 80084f8:	4604      	mov	r4, r0
 80084fa:	460d      	mov	r5, r1
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008504:	f7f7 feda 	bl	80002bc <__adddf3>
 8008508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800850c:	4680      	mov	r8, r0
 800850e:	4689      	mov	r9, r1
 8008510:	f7f7 fed2 	bl	80002b8 <__aeabi_dsub>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	4620      	mov	r0, r4
 800851a:	4629      	mov	r1, r5
 800851c:	f7f7 fecc 	bl	80002b8 <__aeabi_dsub>
 8008520:	4642      	mov	r2, r8
 8008522:	4606      	mov	r6, r0
 8008524:	460f      	mov	r7, r1
 8008526:	464b      	mov	r3, r9
 8008528:	4640      	mov	r0, r8
 800852a:	4649      	mov	r1, r9
 800852c:	f7f8 f87c 	bl	8000628 <__aeabi_dmul>
 8008530:	a34d      	add	r3, pc, #308	@ (adr r3, 8008668 <__ieee754_pow+0xa48>)
 8008532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008536:	4604      	mov	r4, r0
 8008538:	460d      	mov	r5, r1
 800853a:	f7f8 f875 	bl	8000628 <__aeabi_dmul>
 800853e:	a34c      	add	r3, pc, #304	@ (adr r3, 8008670 <__ieee754_pow+0xa50>)
 8008540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008544:	f7f7 feb8 	bl	80002b8 <__aeabi_dsub>
 8008548:	4622      	mov	r2, r4
 800854a:	462b      	mov	r3, r5
 800854c:	f7f8 f86c 	bl	8000628 <__aeabi_dmul>
 8008550:	a349      	add	r3, pc, #292	@ (adr r3, 8008678 <__ieee754_pow+0xa58>)
 8008552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008556:	f7f7 feb1 	bl	80002bc <__adddf3>
 800855a:	4622      	mov	r2, r4
 800855c:	462b      	mov	r3, r5
 800855e:	f7f8 f863 	bl	8000628 <__aeabi_dmul>
 8008562:	a347      	add	r3, pc, #284	@ (adr r3, 8008680 <__ieee754_pow+0xa60>)
 8008564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008568:	f7f7 fea6 	bl	80002b8 <__aeabi_dsub>
 800856c:	4622      	mov	r2, r4
 800856e:	462b      	mov	r3, r5
 8008570:	f7f8 f85a 	bl	8000628 <__aeabi_dmul>
 8008574:	a344      	add	r3, pc, #272	@ (adr r3, 8008688 <__ieee754_pow+0xa68>)
 8008576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857a:	f7f7 fe9f 	bl	80002bc <__adddf3>
 800857e:	4622      	mov	r2, r4
 8008580:	462b      	mov	r3, r5
 8008582:	f7f8 f851 	bl	8000628 <__aeabi_dmul>
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	4640      	mov	r0, r8
 800858c:	4649      	mov	r1, r9
 800858e:	f7f7 fe93 	bl	80002b8 <__aeabi_dsub>
 8008592:	4604      	mov	r4, r0
 8008594:	460d      	mov	r5, r1
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	4640      	mov	r0, r8
 800859c:	4649      	mov	r1, r9
 800859e:	f7f8 f843 	bl	8000628 <__aeabi_dmul>
 80085a2:	2200      	movs	r2, #0
 80085a4:	e9cd 0100 	strd	r0, r1, [sp]
 80085a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80085ac:	4620      	mov	r0, r4
 80085ae:	4629      	mov	r1, r5
 80085b0:	f7f7 fe82 	bl	80002b8 <__aeabi_dsub>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085bc:	f7f8 f95e 	bl	800087c <__aeabi_ddiv>
 80085c0:	4632      	mov	r2, r6
 80085c2:	4604      	mov	r4, r0
 80085c4:	460d      	mov	r5, r1
 80085c6:	463b      	mov	r3, r7
 80085c8:	4640      	mov	r0, r8
 80085ca:	4649      	mov	r1, r9
 80085cc:	f7f8 f82c 	bl	8000628 <__aeabi_dmul>
 80085d0:	4632      	mov	r2, r6
 80085d2:	463b      	mov	r3, r7
 80085d4:	f7f7 fe72 	bl	80002bc <__adddf3>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	4620      	mov	r0, r4
 80085de:	4629      	mov	r1, r5
 80085e0:	f7f7 fe6a 	bl	80002b8 <__aeabi_dsub>
 80085e4:	4642      	mov	r2, r8
 80085e6:	464b      	mov	r3, r9
 80085e8:	f7f7 fe66 	bl	80002b8 <__aeabi_dsub>
 80085ec:	460b      	mov	r3, r1
 80085ee:	4602      	mov	r2, r0
 80085f0:	492d      	ldr	r1, [pc, #180]	@ (80086a8 <__ieee754_pow+0xa88>)
 80085f2:	2000      	movs	r0, #0
 80085f4:	f7f7 fe60 	bl	80002b8 <__aeabi_dsub>
 80085f8:	ec41 0b10 	vmov	d0, r0, r1
 80085fc:	ee10 3a90 	vmov	r3, s1
 8008600:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008604:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008608:	da0b      	bge.n	8008622 <__ieee754_pow+0xa02>
 800860a:	4650      	mov	r0, sl
 800860c:	f000 f85c 	bl	80086c8 <scalbn>
 8008610:	ec51 0b10 	vmov	r0, r1, d0
 8008614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008618:	f7ff bb6d 	b.w	8007cf6 <__ieee754_pow+0xd6>
 800861c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008620:	e73a      	b.n	8008498 <__ieee754_pow+0x878>
 8008622:	ec51 0b10 	vmov	r0, r1, d0
 8008626:	4619      	mov	r1, r3
 8008628:	e7f4      	b.n	8008614 <__ieee754_pow+0x9f4>
 800862a:	491f      	ldr	r1, [pc, #124]	@ (80086a8 <__ieee754_pow+0xa88>)
 800862c:	2000      	movs	r0, #0
 800862e:	f7ff bb14 	b.w	8007c5a <__ieee754_pow+0x3a>
 8008632:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008636:	f7ff bb10 	b.w	8007c5a <__ieee754_pow+0x3a>
 800863a:	4630      	mov	r0, r6
 800863c:	4639      	mov	r1, r7
 800863e:	f7ff bb0c 	b.w	8007c5a <__ieee754_pow+0x3a>
 8008642:	460c      	mov	r4, r1
 8008644:	f7ff bb69 	b.w	8007d1a <__ieee754_pow+0xfa>
 8008648:	2400      	movs	r4, #0
 800864a:	f7ff bb4b 	b.w	8007ce4 <__ieee754_pow+0xc4>
 800864e:	bf00      	nop
 8008650:	00000000 	.word	0x00000000
 8008654:	3fe62e43 	.word	0x3fe62e43
 8008658:	fefa39ef 	.word	0xfefa39ef
 800865c:	3fe62e42 	.word	0x3fe62e42
 8008660:	0ca86c39 	.word	0x0ca86c39
 8008664:	be205c61 	.word	0xbe205c61
 8008668:	72bea4d0 	.word	0x72bea4d0
 800866c:	3e663769 	.word	0x3e663769
 8008670:	c5d26bf1 	.word	0xc5d26bf1
 8008674:	3ebbbd41 	.word	0x3ebbbd41
 8008678:	af25de2c 	.word	0xaf25de2c
 800867c:	3f11566a 	.word	0x3f11566a
 8008680:	16bebd93 	.word	0x16bebd93
 8008684:	3f66c16c 	.word	0x3f66c16c
 8008688:	5555553e 	.word	0x5555553e
 800868c:	3fc55555 	.word	0x3fc55555
 8008690:	40900000 	.word	0x40900000
 8008694:	4090cbff 	.word	0x4090cbff
 8008698:	3f6f3400 	.word	0x3f6f3400
 800869c:	4090cc00 	.word	0x4090cc00
 80086a0:	3fe00000 	.word	0x3fe00000
 80086a4:	fff00000 	.word	0xfff00000
 80086a8:	3ff00000 	.word	0x3ff00000
 80086ac:	652b82fe 	.word	0x652b82fe
 80086b0:	3c971547 	.word	0x3c971547

080086b4 <fabs>:
 80086b4:	ec51 0b10 	vmov	r0, r1, d0
 80086b8:	4602      	mov	r2, r0
 80086ba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80086be:	ec43 2b10 	vmov	d0, r2, r3
 80086c2:	4770      	bx	lr
 80086c4:	0000      	movs	r0, r0
	...

080086c8 <scalbn>:
 80086c8:	b570      	push	{r4, r5, r6, lr}
 80086ca:	ec55 4b10 	vmov	r4, r5, d0
 80086ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80086d2:	4606      	mov	r6, r0
 80086d4:	462b      	mov	r3, r5
 80086d6:	b991      	cbnz	r1, 80086fe <scalbn+0x36>
 80086d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80086dc:	4323      	orrs	r3, r4
 80086de:	d03b      	beq.n	8008758 <scalbn+0x90>
 80086e0:	4b33      	ldr	r3, [pc, #204]	@ (80087b0 <scalbn+0xe8>)
 80086e2:	4620      	mov	r0, r4
 80086e4:	4629      	mov	r1, r5
 80086e6:	2200      	movs	r2, #0
 80086e8:	f7f7 ff9e 	bl	8000628 <__aeabi_dmul>
 80086ec:	4b31      	ldr	r3, [pc, #196]	@ (80087b4 <scalbn+0xec>)
 80086ee:	429e      	cmp	r6, r3
 80086f0:	4604      	mov	r4, r0
 80086f2:	460d      	mov	r5, r1
 80086f4:	da0f      	bge.n	8008716 <scalbn+0x4e>
 80086f6:	a326      	add	r3, pc, #152	@ (adr r3, 8008790 <scalbn+0xc8>)
 80086f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fc:	e01e      	b.n	800873c <scalbn+0x74>
 80086fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008702:	4291      	cmp	r1, r2
 8008704:	d10b      	bne.n	800871e <scalbn+0x56>
 8008706:	4622      	mov	r2, r4
 8008708:	4620      	mov	r0, r4
 800870a:	4629      	mov	r1, r5
 800870c:	f7f7 fdd6 	bl	80002bc <__adddf3>
 8008710:	4604      	mov	r4, r0
 8008712:	460d      	mov	r5, r1
 8008714:	e020      	b.n	8008758 <scalbn+0x90>
 8008716:	460b      	mov	r3, r1
 8008718:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800871c:	3936      	subs	r1, #54	@ 0x36
 800871e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008722:	4296      	cmp	r6, r2
 8008724:	dd0d      	ble.n	8008742 <scalbn+0x7a>
 8008726:	2d00      	cmp	r5, #0
 8008728:	a11b      	add	r1, pc, #108	@ (adr r1, 8008798 <scalbn+0xd0>)
 800872a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800872e:	da02      	bge.n	8008736 <scalbn+0x6e>
 8008730:	a11b      	add	r1, pc, #108	@ (adr r1, 80087a0 <scalbn+0xd8>)
 8008732:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008736:	a318      	add	r3, pc, #96	@ (adr r3, 8008798 <scalbn+0xd0>)
 8008738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873c:	f7f7 ff74 	bl	8000628 <__aeabi_dmul>
 8008740:	e7e6      	b.n	8008710 <scalbn+0x48>
 8008742:	1872      	adds	r2, r6, r1
 8008744:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008748:	428a      	cmp	r2, r1
 800874a:	dcec      	bgt.n	8008726 <scalbn+0x5e>
 800874c:	2a00      	cmp	r2, #0
 800874e:	dd06      	ble.n	800875e <scalbn+0x96>
 8008750:	f36f 531e 	bfc	r3, #20, #11
 8008754:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008758:	ec45 4b10 	vmov	d0, r4, r5
 800875c:	bd70      	pop	{r4, r5, r6, pc}
 800875e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008762:	da08      	bge.n	8008776 <scalbn+0xae>
 8008764:	2d00      	cmp	r5, #0
 8008766:	a10a      	add	r1, pc, #40	@ (adr r1, 8008790 <scalbn+0xc8>)
 8008768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800876c:	dac3      	bge.n	80086f6 <scalbn+0x2e>
 800876e:	a10e      	add	r1, pc, #56	@ (adr r1, 80087a8 <scalbn+0xe0>)
 8008770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008774:	e7bf      	b.n	80086f6 <scalbn+0x2e>
 8008776:	3236      	adds	r2, #54	@ 0x36
 8008778:	f36f 531e 	bfc	r3, #20, #11
 800877c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008780:	4620      	mov	r0, r4
 8008782:	4b0d      	ldr	r3, [pc, #52]	@ (80087b8 <scalbn+0xf0>)
 8008784:	4629      	mov	r1, r5
 8008786:	2200      	movs	r2, #0
 8008788:	e7d8      	b.n	800873c <scalbn+0x74>
 800878a:	bf00      	nop
 800878c:	f3af 8000 	nop.w
 8008790:	c2f8f359 	.word	0xc2f8f359
 8008794:	01a56e1f 	.word	0x01a56e1f
 8008798:	8800759c 	.word	0x8800759c
 800879c:	7e37e43c 	.word	0x7e37e43c
 80087a0:	8800759c 	.word	0x8800759c
 80087a4:	fe37e43c 	.word	0xfe37e43c
 80087a8:	c2f8f359 	.word	0xc2f8f359
 80087ac:	81a56e1f 	.word	0x81a56e1f
 80087b0:	43500000 	.word	0x43500000
 80087b4:	ffff3cb0 	.word	0xffff3cb0
 80087b8:	3c900000 	.word	0x3c900000

080087bc <with_errno>:
 80087bc:	b510      	push	{r4, lr}
 80087be:	ed2d 8b02 	vpush	{d8}
 80087c2:	eeb0 8a40 	vmov.f32	s16, s0
 80087c6:	eef0 8a60 	vmov.f32	s17, s1
 80087ca:	4604      	mov	r4, r0
 80087cc:	f7fe fa02 	bl	8006bd4 <__errno>
 80087d0:	eeb0 0a48 	vmov.f32	s0, s16
 80087d4:	eef0 0a68 	vmov.f32	s1, s17
 80087d8:	ecbd 8b02 	vpop	{d8}
 80087dc:	6004      	str	r4, [r0, #0]
 80087de:	bd10      	pop	{r4, pc}

080087e0 <xflow>:
 80087e0:	4603      	mov	r3, r0
 80087e2:	b507      	push	{r0, r1, r2, lr}
 80087e4:	ec51 0b10 	vmov	r0, r1, d0
 80087e8:	b183      	cbz	r3, 800880c <xflow+0x2c>
 80087ea:	4602      	mov	r2, r0
 80087ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80087f0:	e9cd 2300 	strd	r2, r3, [sp]
 80087f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087f8:	f7f7 ff16 	bl	8000628 <__aeabi_dmul>
 80087fc:	ec41 0b10 	vmov	d0, r0, r1
 8008800:	2022      	movs	r0, #34	@ 0x22
 8008802:	b003      	add	sp, #12
 8008804:	f85d eb04 	ldr.w	lr, [sp], #4
 8008808:	f7ff bfd8 	b.w	80087bc <with_errno>
 800880c:	4602      	mov	r2, r0
 800880e:	460b      	mov	r3, r1
 8008810:	e7ee      	b.n	80087f0 <xflow+0x10>
 8008812:	0000      	movs	r0, r0
 8008814:	0000      	movs	r0, r0
	...

08008818 <__math_uflow>:
 8008818:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008820 <__math_uflow+0x8>
 800881c:	f7ff bfe0 	b.w	80087e0 <xflow>
 8008820:	00000000 	.word	0x00000000
 8008824:	10000000 	.word	0x10000000

08008828 <__math_oflow>:
 8008828:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008830 <__math_oflow+0x8>
 800882c:	f7ff bfd8 	b.w	80087e0 <xflow>
 8008830:	00000000 	.word	0x00000000
 8008834:	70000000 	.word	0x70000000

08008838 <__ieee754_sqrt>:
 8008838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	4a66      	ldr	r2, [pc, #408]	@ (80089d8 <__ieee754_sqrt+0x1a0>)
 800883e:	ec55 4b10 	vmov	r4, r5, d0
 8008842:	43aa      	bics	r2, r5
 8008844:	462b      	mov	r3, r5
 8008846:	4621      	mov	r1, r4
 8008848:	d110      	bne.n	800886c <__ieee754_sqrt+0x34>
 800884a:	4622      	mov	r2, r4
 800884c:	4620      	mov	r0, r4
 800884e:	4629      	mov	r1, r5
 8008850:	f7f7 feea 	bl	8000628 <__aeabi_dmul>
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	4620      	mov	r0, r4
 800885a:	4629      	mov	r1, r5
 800885c:	f7f7 fd2e 	bl	80002bc <__adddf3>
 8008860:	4604      	mov	r4, r0
 8008862:	460d      	mov	r5, r1
 8008864:	ec45 4b10 	vmov	d0, r4, r5
 8008868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886c:	2d00      	cmp	r5, #0
 800886e:	dc0e      	bgt.n	800888e <__ieee754_sqrt+0x56>
 8008870:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008874:	4322      	orrs	r2, r4
 8008876:	d0f5      	beq.n	8008864 <__ieee754_sqrt+0x2c>
 8008878:	b19d      	cbz	r5, 80088a2 <__ieee754_sqrt+0x6a>
 800887a:	4622      	mov	r2, r4
 800887c:	4620      	mov	r0, r4
 800887e:	4629      	mov	r1, r5
 8008880:	f7f7 fd1a 	bl	80002b8 <__aeabi_dsub>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	f7f7 fff8 	bl	800087c <__aeabi_ddiv>
 800888c:	e7e8      	b.n	8008860 <__ieee754_sqrt+0x28>
 800888e:	152a      	asrs	r2, r5, #20
 8008890:	d115      	bne.n	80088be <__ieee754_sqrt+0x86>
 8008892:	2000      	movs	r0, #0
 8008894:	e009      	b.n	80088aa <__ieee754_sqrt+0x72>
 8008896:	0acb      	lsrs	r3, r1, #11
 8008898:	3a15      	subs	r2, #21
 800889a:	0549      	lsls	r1, r1, #21
 800889c:	2b00      	cmp	r3, #0
 800889e:	d0fa      	beq.n	8008896 <__ieee754_sqrt+0x5e>
 80088a0:	e7f7      	b.n	8008892 <__ieee754_sqrt+0x5a>
 80088a2:	462a      	mov	r2, r5
 80088a4:	e7fa      	b.n	800889c <__ieee754_sqrt+0x64>
 80088a6:	005b      	lsls	r3, r3, #1
 80088a8:	3001      	adds	r0, #1
 80088aa:	02dc      	lsls	r4, r3, #11
 80088ac:	d5fb      	bpl.n	80088a6 <__ieee754_sqrt+0x6e>
 80088ae:	1e44      	subs	r4, r0, #1
 80088b0:	1b12      	subs	r2, r2, r4
 80088b2:	f1c0 0420 	rsb	r4, r0, #32
 80088b6:	fa21 f404 	lsr.w	r4, r1, r4
 80088ba:	4323      	orrs	r3, r4
 80088bc:	4081      	lsls	r1, r0
 80088be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088c2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80088c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088ca:	07d2      	lsls	r2, r2, #31
 80088cc:	bf5c      	itt	pl
 80088ce:	005b      	lslpl	r3, r3, #1
 80088d0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80088d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80088d8:	bf58      	it	pl
 80088da:	0049      	lslpl	r1, r1, #1
 80088dc:	2600      	movs	r6, #0
 80088de:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80088e2:	107f      	asrs	r7, r7, #1
 80088e4:	0049      	lsls	r1, r1, #1
 80088e6:	2016      	movs	r0, #22
 80088e8:	4632      	mov	r2, r6
 80088ea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80088ee:	1915      	adds	r5, r2, r4
 80088f0:	429d      	cmp	r5, r3
 80088f2:	bfde      	ittt	le
 80088f4:	192a      	addle	r2, r5, r4
 80088f6:	1b5b      	suble	r3, r3, r5
 80088f8:	1936      	addle	r6, r6, r4
 80088fa:	0fcd      	lsrs	r5, r1, #31
 80088fc:	3801      	subs	r0, #1
 80088fe:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008902:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008906:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800890a:	d1f0      	bne.n	80088ee <__ieee754_sqrt+0xb6>
 800890c:	4605      	mov	r5, r0
 800890e:	2420      	movs	r4, #32
 8008910:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008914:	4293      	cmp	r3, r2
 8008916:	eb0c 0e00 	add.w	lr, ip, r0
 800891a:	dc02      	bgt.n	8008922 <__ieee754_sqrt+0xea>
 800891c:	d113      	bne.n	8008946 <__ieee754_sqrt+0x10e>
 800891e:	458e      	cmp	lr, r1
 8008920:	d811      	bhi.n	8008946 <__ieee754_sqrt+0x10e>
 8008922:	f1be 0f00 	cmp.w	lr, #0
 8008926:	eb0e 000c 	add.w	r0, lr, ip
 800892a:	da3f      	bge.n	80089ac <__ieee754_sqrt+0x174>
 800892c:	2800      	cmp	r0, #0
 800892e:	db3d      	blt.n	80089ac <__ieee754_sqrt+0x174>
 8008930:	f102 0801 	add.w	r8, r2, #1
 8008934:	1a9b      	subs	r3, r3, r2
 8008936:	458e      	cmp	lr, r1
 8008938:	bf88      	it	hi
 800893a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800893e:	eba1 010e 	sub.w	r1, r1, lr
 8008942:	4465      	add	r5, ip
 8008944:	4642      	mov	r2, r8
 8008946:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800894a:	3c01      	subs	r4, #1
 800894c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008950:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008954:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008958:	d1dc      	bne.n	8008914 <__ieee754_sqrt+0xdc>
 800895a:	4319      	orrs	r1, r3
 800895c:	d01b      	beq.n	8008996 <__ieee754_sqrt+0x15e>
 800895e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80089dc <__ieee754_sqrt+0x1a4>
 8008962:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80089e0 <__ieee754_sqrt+0x1a8>
 8008966:	e9da 0100 	ldrd	r0, r1, [sl]
 800896a:	e9db 2300 	ldrd	r2, r3, [fp]
 800896e:	f7f7 fca3 	bl	80002b8 <__aeabi_dsub>
 8008972:	e9da 8900 	ldrd	r8, r9, [sl]
 8008976:	4602      	mov	r2, r0
 8008978:	460b      	mov	r3, r1
 800897a:	4640      	mov	r0, r8
 800897c:	4649      	mov	r1, r9
 800897e:	f7f8 f8cf 	bl	8000b20 <__aeabi_dcmple>
 8008982:	b140      	cbz	r0, 8008996 <__ieee754_sqrt+0x15e>
 8008984:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008988:	e9da 0100 	ldrd	r0, r1, [sl]
 800898c:	e9db 2300 	ldrd	r2, r3, [fp]
 8008990:	d10e      	bne.n	80089b0 <__ieee754_sqrt+0x178>
 8008992:	3601      	adds	r6, #1
 8008994:	4625      	mov	r5, r4
 8008996:	1073      	asrs	r3, r6, #1
 8008998:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800899c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80089a0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80089a4:	086b      	lsrs	r3, r5, #1
 80089a6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80089aa:	e759      	b.n	8008860 <__ieee754_sqrt+0x28>
 80089ac:	4690      	mov	r8, r2
 80089ae:	e7c1      	b.n	8008934 <__ieee754_sqrt+0xfc>
 80089b0:	f7f7 fc84 	bl	80002bc <__adddf3>
 80089b4:	e9da 8900 	ldrd	r8, r9, [sl]
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	4640      	mov	r0, r8
 80089be:	4649      	mov	r1, r9
 80089c0:	f7f8 f8a4 	bl	8000b0c <__aeabi_dcmplt>
 80089c4:	b120      	cbz	r0, 80089d0 <__ieee754_sqrt+0x198>
 80089c6:	1cab      	adds	r3, r5, #2
 80089c8:	bf08      	it	eq
 80089ca:	3601      	addeq	r6, #1
 80089cc:	3502      	adds	r5, #2
 80089ce:	e7e2      	b.n	8008996 <__ieee754_sqrt+0x15e>
 80089d0:	1c6b      	adds	r3, r5, #1
 80089d2:	f023 0501 	bic.w	r5, r3, #1
 80089d6:	e7de      	b.n	8008996 <__ieee754_sqrt+0x15e>
 80089d8:	7ff00000 	.word	0x7ff00000
 80089dc:	08008f80 	.word	0x08008f80
 80089e0:	08008f78 	.word	0x08008f78

080089e4 <_init>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	bf00      	nop
 80089e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ea:	bc08      	pop	{r3}
 80089ec:	469e      	mov	lr, r3
 80089ee:	4770      	bx	lr

080089f0 <_fini>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	bf00      	nop
 80089f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089f6:	bc08      	pop	{r3}
 80089f8:	469e      	mov	lr, r3
 80089fa:	4770      	bx	lr
