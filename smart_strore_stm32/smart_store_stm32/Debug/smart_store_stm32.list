
smart_store_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc64  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  0800be08  0800be08  0000ce08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c688  0800c688  0000e1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c688  0800c688  0000d688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c690  0800c690  0000e1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c690  0800c690  0000d690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c694  0800c694  0000d694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800c698  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf8  200001dc  0800c874  0000e1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dd4  0800c874  0000edd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001123e  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002942  00000000  00000000  0001f44a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  00021d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c77  00000000  00000000  00022d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001931d  00000000  00000000  00023a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127be  00000000  00000000  0003cd24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d1b0  00000000  00000000  0004f4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec692  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cac  00000000  00000000  000ec6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000f2384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bdec 	.word	0x0800bdec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800bdec 	.word	0x0800bdec

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9be 	b.w	800104c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	468e      	mov	lr, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4688      	mov	r8, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d962      	bls.n	8000e30 <__udivmoddi4+0xdc>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	b14e      	cbz	r6, 8000d84 <__udivmoddi4+0x30>
 8000d70:	f1c6 0320 	rsb	r3, r6, #32
 8000d74:	fa01 f806 	lsl.w	r8, r1, r6
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	40b7      	lsls	r7, r6
 8000d7e:	ea43 0808 	orr.w	r8, r3, r8
 8000d82:	40b4      	lsls	r4, r6
 8000d84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d90:	0c23      	lsrs	r3, r4, #16
 8000d92:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000da8:	f080 80ea 	bcs.w	8000f80 <__udivmoddi4+0x22c>
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f240 80e7 	bls.w	8000f80 <__udivmoddi4+0x22c>
 8000db2:	3902      	subs	r1, #2
 8000db4:	443b      	add	r3, r7
 8000db6:	1a9a      	subs	r2, r3, r2
 8000db8:	b2a3      	uxth	r3, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dc6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dca:	459c      	cmp	ip, r3
 8000dcc:	d909      	bls.n	8000de2 <__udivmoddi4+0x8e>
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd4:	f080 80d6 	bcs.w	8000f84 <__udivmoddi4+0x230>
 8000dd8:	459c      	cmp	ip, r3
 8000dda:	f240 80d3 	bls.w	8000f84 <__udivmoddi4+0x230>
 8000dde:	443b      	add	r3, r7
 8000de0:	3802      	subs	r0, #2
 8000de2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de6:	eba3 030c 	sub.w	r3, r3, ip
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11d      	cbz	r5, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40f3      	lsrs	r3, r6
 8000df0:	2200      	movs	r2, #0
 8000df2:	e9c5 3200 	strd	r3, r2, [r5]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d905      	bls.n	8000e0a <__udivmoddi4+0xb6>
 8000dfe:	b10d      	cbz	r5, 8000e04 <__udivmoddi4+0xb0>
 8000e00:	e9c5 0100 	strd	r0, r1, [r5]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4608      	mov	r0, r1
 8000e08:	e7f5      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e0a:	fab3 f183 	clz	r1, r3
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	d146      	bne.n	8000ea0 <__udivmoddi4+0x14c>
 8000e12:	4573      	cmp	r3, lr
 8000e14:	d302      	bcc.n	8000e1c <__udivmoddi4+0xc8>
 8000e16:	4282      	cmp	r2, r0
 8000e18:	f200 8105 	bhi.w	8001026 <__udivmoddi4+0x2d2>
 8000e1c:	1a84      	subs	r4, r0, r2
 8000e1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	4690      	mov	r8, r2
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d0e5      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e2e:	e7e2      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	f000 8090 	beq.w	8000f56 <__udivmoddi4+0x202>
 8000e36:	fab2 f682 	clz	r6, r2
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	f040 80a4 	bne.w	8000f88 <__udivmoddi4+0x234>
 8000e40:	1a8a      	subs	r2, r1, r2
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	b2bc      	uxth	r4, r7
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x11e>
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x11c>
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	f200 80e0 	bhi.w	8001030 <__udivmoddi4+0x2dc>
 8000e70:	46c4      	mov	ip, r8
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e80:	fb02 f404 	mul.w	r4, r2, r4
 8000e84:	429c      	cmp	r4, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x144>
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x142>
 8000e90:	429c      	cmp	r4, r3
 8000e92:	f200 80ca 	bhi.w	800102a <__udivmoddi4+0x2d6>
 8000e96:	4602      	mov	r2, r0
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e9e:	e7a5      	b.n	8000dec <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eaa:	431f      	orrs	r7, r3
 8000eac:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb0:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000eb8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ebc:	4323      	orrs	r3, r4
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	fa1f fc87 	uxth.w	ip, r7
 8000ec6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eca:	0c1c      	lsrs	r4, r3, #16
 8000ecc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ed8:	45a6      	cmp	lr, r4
 8000eda:	fa02 f201 	lsl.w	r2, r2, r1
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x1a0>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	f080 809c 	bcs.w	8001022 <__udivmoddi4+0x2ce>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f240 8099 	bls.w	8001022 <__udivmoddi4+0x2ce>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	443c      	add	r4, r7
 8000ef4:	eba4 040e 	sub.w	r4, r4, lr
 8000ef8:	fa1f fe83 	uxth.w	lr, r3
 8000efc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f00:	fb09 4413 	mls	r4, r9, r3, r4
 8000f04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0c:	45a4      	cmp	ip, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x1ce>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f16:	f080 8082 	bcs.w	800101e <__udivmoddi4+0x2ca>
 8000f1a:	45a4      	cmp	ip, r4
 8000f1c:	d97f      	bls.n	800101e <__udivmoddi4+0x2ca>
 8000f1e:	3b02      	subs	r3, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f26:	eba4 040c 	sub.w	r4, r4, ip
 8000f2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f2e:	4564      	cmp	r4, ip
 8000f30:	4673      	mov	r3, lr
 8000f32:	46e1      	mov	r9, ip
 8000f34:	d362      	bcc.n	8000ffc <__udivmoddi4+0x2a8>
 8000f36:	d05f      	beq.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x1fe>
 8000f3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f42:	fa04 f606 	lsl.w	r6, r4, r6
 8000f46:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4a:	431e      	orrs	r6, r3
 8000f4c:	40cc      	lsrs	r4, r1
 8000f4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f52:	2100      	movs	r1, #0
 8000f54:	e74f      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000f56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5a:	0c01      	lsrs	r1, r0, #16
 8000f5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f60:	b280      	uxth	r0, r0
 8000f62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f66:	463b      	mov	r3, r7
 8000f68:	4638      	mov	r0, r7
 8000f6a:	463c      	mov	r4, r7
 8000f6c:	46b8      	mov	r8, r7
 8000f6e:	46be      	mov	lr, r7
 8000f70:	2620      	movs	r6, #32
 8000f72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f76:	eba2 0208 	sub.w	r2, r2, r8
 8000f7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f7e:	e766      	b.n	8000e4e <__udivmoddi4+0xfa>
 8000f80:	4601      	mov	r1, r0
 8000f82:	e718      	b.n	8000db6 <__udivmoddi4+0x62>
 8000f84:	4610      	mov	r0, r2
 8000f86:	e72c      	b.n	8000de2 <__udivmoddi4+0x8e>
 8000f88:	f1c6 0220 	rsb	r2, r6, #32
 8000f8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f90:	40b7      	lsls	r7, r6
 8000f92:	40b1      	lsls	r1, r6
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa2:	b2bc      	uxth	r4, r7
 8000fa4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fae:	fb08 f904 	mul.w	r9, r8, r4
 8000fb2:	40b0      	lsls	r0, r6
 8000fb4:	4589      	cmp	r9, r1
 8000fb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fba:	b280      	uxth	r0, r0
 8000fbc:	d93e      	bls.n	800103c <__udivmoddi4+0x2e8>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fc4:	d201      	bcs.n	8000fca <__udivmoddi4+0x276>
 8000fc6:	4589      	cmp	r9, r1
 8000fc8:	d81f      	bhi.n	800100a <__udivmoddi4+0x2b6>
 8000fca:	eba1 0109 	sub.w	r1, r1, r9
 8000fce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd2:	fb09 f804 	mul.w	r8, r9, r4
 8000fd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	4542      	cmp	r2, r8
 8000fe2:	d229      	bcs.n	8001038 <__udivmoddi4+0x2e4>
 8000fe4:	18ba      	adds	r2, r7, r2
 8000fe6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fea:	d2c4      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000fec:	4542      	cmp	r2, r8
 8000fee:	d2c2      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000ff0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff4:	443a      	add	r2, r7
 8000ff6:	e7be      	b.n	8000f76 <__udivmoddi4+0x222>
 8000ff8:	45f0      	cmp	r8, lr
 8000ffa:	d29d      	bcs.n	8000f38 <__udivmoddi4+0x1e4>
 8000ffc:	ebbe 0302 	subs.w	r3, lr, r2
 8001000:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001004:	3801      	subs	r0, #1
 8001006:	46e1      	mov	r9, ip
 8001008:	e796      	b.n	8000f38 <__udivmoddi4+0x1e4>
 800100a:	eba7 0909 	sub.w	r9, r7, r9
 800100e:	4449      	add	r1, r9
 8001010:	f1a8 0c02 	sub.w	ip, r8, #2
 8001014:	fbb1 f9fe 	udiv	r9, r1, lr
 8001018:	fb09 f804 	mul.w	r8, r9, r4
 800101c:	e7db      	b.n	8000fd6 <__udivmoddi4+0x282>
 800101e:	4673      	mov	r3, lr
 8001020:	e77f      	b.n	8000f22 <__udivmoddi4+0x1ce>
 8001022:	4650      	mov	r0, sl
 8001024:	e766      	b.n	8000ef4 <__udivmoddi4+0x1a0>
 8001026:	4608      	mov	r0, r1
 8001028:	e6fd      	b.n	8000e26 <__udivmoddi4+0xd2>
 800102a:	443b      	add	r3, r7
 800102c:	3a02      	subs	r2, #2
 800102e:	e733      	b.n	8000e98 <__udivmoddi4+0x144>
 8001030:	f1ac 0c02 	sub.w	ip, ip, #2
 8001034:	443b      	add	r3, r7
 8001036:	e71c      	b.n	8000e72 <__udivmoddi4+0x11e>
 8001038:	4649      	mov	r1, r9
 800103a:	e79c      	b.n	8000f76 <__udivmoddi4+0x222>
 800103c:	eba1 0109 	sub.w	r1, r1, r9
 8001040:	46c4      	mov	ip, r8
 8001042:	fbb1 f9fe 	udiv	r9, r1, lr
 8001046:	fb09 f804 	mul.w	r8, r9, r4
 800104a:	e7c4      	b.n	8000fd6 <__udivmoddi4+0x282>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <DWT_Delay_Init>:
 *      Author: IoT Main
 */

#include "DHT.h"
uint32_t DWT_Delay_Init(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001054:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <DWT_Delay_Init+0x58>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	4a13      	ldr	r2, [pc, #76]	@ (80010a8 <DWT_Delay_Init+0x58>)
 800105a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800105e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <DWT_Delay_Init+0x58>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	4a10      	ldr	r2, [pc, #64]	@ (80010a8 <DWT_Delay_Init+0x58>)
 8001066:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800106a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <DWT_Delay_Init+0x5c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0e      	ldr	r2, [pc, #56]	@ (80010ac <DWT_Delay_Init+0x5c>)
 8001072:	f023 0301 	bic.w	r3, r3, #1
 8001076:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <DWT_Delay_Init+0x5c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0b      	ldr	r2, [pc, #44]	@ (80010ac <DWT_Delay_Init+0x5c>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001084:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <DWT_Delay_Init+0x5c>)
 8001086:	2200      	movs	r2, #0
 8001088:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800108a:	bf00      	nop
  __ASM volatile ("NOP");
 800108c:	bf00      	nop
  __ASM volatile ("NOP");
 800108e:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <DWT_Delay_Init+0x5c>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 8001098:	2300      	movs	r3, #0
 800109a:	e000      	b.n	800109e <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 800109c:	2301      	movs	r3, #1
  }

}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000edf0 	.word	0xe000edf0
 80010ac:	e0001000 	.word	0xe0001000

080010b0 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80010b8:	4b0d      	ldr	r3, [pc, #52]	@ (80010f0 <DWT_Delay_us+0x40>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80010be:	f003 fbf1 	bl	80048a4 <HAL_RCC_GetHCLKFreq>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a0b      	ldr	r2, [pc, #44]	@ (80010f4 <DWT_Delay_us+0x44>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	0c9b      	lsrs	r3, r3, #18
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	fb02 f303 	mul.w	r3, r2, r3
 80010d2:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80010d4:	bf00      	nop
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <DWT_Delay_us+0x40>)
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	1ad2      	subs	r2, r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d3f8      	bcc.n	80010d6 <DWT_Delay_us+0x26>
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	e0001000 	.word	0xe0001000
 80010f4:	431bde83 	.word	0x431bde83

080010f8 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001114:	887b      	ldrh	r3, [r7, #2]
 8001116:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	4619      	mov	r1, r3
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f002 fd7e 	bl	8003c28 <HAL_GPIO_Init>
}
 800112c:	bf00      	nop
 800112e:	3720      	adds	r7, #32
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001150:	887b      	ldrh	r3, [r7, #2]
 8001152:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	4619      	mov	r1, r3
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f002 fd62 	bl	8003c28 <HAL_GPIO_Init>
}
 8001164:	bf00      	nop
 8001166:	3720      	adds	r7, #32
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <DHT11_Init>:

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001170:	f7ff ff6e 	bl	8001050 <DWT_Delay_Init>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001174:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001178:	4807      	ldr	r0, [pc, #28]	@ (8001198 <DHT11_Init+0x2c>)
 800117a:	f7ff ffbd 	bl	80010f8 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800117e:	2201      	movs	r2, #1
 8001180:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001184:	4804      	ldr	r0, [pc, #16]	@ (8001198 <DHT11_Init+0x2c>)
 8001186:	f002 feeb 	bl	8003f60 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800118a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800118e:	f001 ff17 	bl	8002fc0 <HAL_Delay>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40020800 	.word	0x40020800

0800119c <DHT11_Start>:

void DHT11_Start (void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80011a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011a4:	4811      	ldr	r0, [pc, #68]	@ (80011ec <DHT11_Start+0x50>)
 80011a6:	f7ff ffa7 	bl	80010f8 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011b0:	480e      	ldr	r0, [pc, #56]	@ (80011ec <DHT11_Start+0x50>)
 80011b2:	f002 fed5 	bl	8003f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011bc:	480b      	ldr	r0, [pc, #44]	@ (80011ec <DHT11_Start+0x50>)
 80011be:	f002 fecf 	bl	8003f60 <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);
 80011c2:	f244 6050 	movw	r0, #18000	@ 0x4650
 80011c6:	f7ff ff73 	bl	80010b0 <DWT_Delay_us>
	//delay_us (18000);   // wait for 18ms
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80011ca:	2201      	movs	r2, #1
 80011cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011d0:	4806      	ldr	r0, [pc, #24]	@ (80011ec <DHT11_Start+0x50>)
 80011d2:	f002 fec5 	bl	8003f60 <HAL_GPIO_WritePin>
	DWT_Delay_us(20);
 80011d6:	2014      	movs	r0, #20
 80011d8:	f7ff ff6a 	bl	80010b0 <DWT_Delay_us>
	//delay_us (20);   // wait for 20us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 80011dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011e0:	4802      	ldr	r0, [pc, #8]	@ (80011ec <DHT11_Start+0x50>)
 80011e2:	f7ff ffa7 	bl	8001134 <Set_Pin_Input>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40020800 	.word	0x40020800

080011f0 <DHT11_Stop>:

void DHT11_Stop (void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80011f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011f8:	4805      	ldr	r0, [pc, #20]	@ (8001210 <DHT11_Stop+0x20>)
 80011fa:	f7ff ff7d 	bl	80010f8 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80011fe:	2201      	movs	r2, #1
 8001200:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001204:	4802      	ldr	r0, [pc, #8]	@ (8001210 <DHT11_Stop+0x20>)
 8001206:	f002 feab 	bl	8003f60 <HAL_GPIO_WritePin>
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40020800 	.word	0x40020800

08001214 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	71fb      	strb	r3, [r7, #7]

	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800121e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001222:	4812      	ldr	r0, [pc, #72]	@ (800126c <DHT11_Check_Response+0x58>)
 8001224:	f002 fe84 	bl	8003f30 <HAL_GPIO_ReadPin>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10f      	bne.n	800124e <DHT11_Check_Response+0x3a>
	{
		DWT_Delay_us(80);
 800122e:	2050      	movs	r0, #80	@ 0x50
 8001230:	f7ff ff3e 	bl	80010b0 <DWT_Delay_us>
		//delay_us (80);
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001234:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001238:	480c      	ldr	r0, [pc, #48]	@ (800126c <DHT11_Check_Response+0x58>)
 800123a:	f002 fe79 	bl	8003f30 <HAL_GPIO_ReadPin>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <DHT11_Check_Response+0x36>
 8001244:	2301      	movs	r3, #1
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	e001      	b.n	800124e <DHT11_Check_Response+0x3a>
		else Response = -1; // 255
 800124a:	23ff      	movs	r3, #255	@ 0xff
 800124c:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 800124e:	bf00      	nop
 8001250:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001254:	4805      	ldr	r0, [pc, #20]	@ (800126c <DHT11_Check_Response+0x58>)
 8001256:	f002 fe6b 	bl	8003f30 <HAL_GPIO_ReadPin>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f7      	bne.n	8001250 <DHT11_Check_Response+0x3c>

	return Response;
 8001260:	79fb      	ldrb	r3, [r7, #7]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40020800 	.word	0x40020800

08001270 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001276:	2300      	movs	r3, #0
 8001278:	71bb      	strb	r3, [r7, #6]
 800127a:	e03a      	b.n	80012f2 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 800127c:	bf00      	nop
 800127e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001282:	4820      	ldr	r0, [pc, #128]	@ (8001304 <DHT11_Read+0x94>)
 8001284:	f002 fe54 	bl	8003f30 <HAL_GPIO_ReadPin>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f7      	beq.n	800127e <DHT11_Read+0xe>
		DWT_Delay_us(40);
 800128e:	2028      	movs	r0, #40	@ 0x28
 8001290:	f7ff ff0e 	bl	80010b0 <DWT_Delay_us>
		//delay_us (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001294:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001298:	481a      	ldr	r0, [pc, #104]	@ (8001304 <DHT11_Read+0x94>)
 800129a:	f002 fe49 	bl	8003f30 <HAL_GPIO_ReadPin>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d10e      	bne.n	80012c2 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 80012a4:	79bb      	ldrb	r3, [r7, #6]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2201      	movs	r2, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	b25a      	sxtb	r2, r3
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	4013      	ands	r3, r2
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	e00b      	b.n	80012da <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80012c2:	79bb      	ldrb	r3, [r7, #6]
 80012c4:	f1c3 0307 	rsb	r3, r3, #7
 80012c8:	2201      	movs	r2, #1
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	b25a      	sxtb	r2, r3
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80012da:	bf00      	nop
 80012dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012e0:	4808      	ldr	r0, [pc, #32]	@ (8001304 <DHT11_Read+0x94>)
 80012e2:	f002 fe25 	bl	8003f30 <HAL_GPIO_ReadPin>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1f7      	bne.n	80012dc <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	3301      	adds	r3, #1
 80012f0:	71bb      	strb	r3, [r7, #6]
 80012f2:	79bb      	ldrb	r3, [r7, #6]
 80012f4:	2b07      	cmp	r3, #7
 80012f6:	d9c1      	bls.n	800127c <DHT11_Read+0xc>
	}
	return i;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40020800 	.word	0x40020800

08001308 <DHT11_readData>:

DHT11_TypeDef DHT11_readData()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	DHT11_TypeDef dht11;
	DHT11_Start();
 8001310:	f7ff ff44 	bl	800119c <DHT11_Start>
	if ((dht11.status = DHT11_Check_Response()) < 0) return dht11;
 8001314:	f7ff ff7e 	bl	8001214 <DHT11_Check_Response>
 8001318:	4603      	mov	r3, r0
 800131a:	737b      	strb	r3, [r7, #13]
	dht11.rh_byte1 = DHT11_Read ();
 800131c:	f7ff ffa8 	bl	8001270 <DHT11_Read>
 8001320:	4603      	mov	r3, r0
 8001322:	723b      	strb	r3, [r7, #8]
	dht11.rh_byte2 = DHT11_Read ();
 8001324:	f7ff ffa4 	bl	8001270 <DHT11_Read>
 8001328:	4603      	mov	r3, r0
 800132a:	727b      	strb	r3, [r7, #9]
	dht11.temp_byte1 = DHT11_Read ();
 800132c:	f7ff ffa0 	bl	8001270 <DHT11_Read>
 8001330:	4603      	mov	r3, r0
 8001332:	72bb      	strb	r3, [r7, #10]
	dht11.temp_byte2 = DHT11_Read ();
 8001334:	f7ff ff9c 	bl	8001270 <DHT11_Read>
 8001338:	4603      	mov	r3, r0
 800133a:	72fb      	strb	r3, [r7, #11]
	dht11.checksum = DHT11_Read();
 800133c:	f7ff ff98 	bl	8001270 <DHT11_Read>
 8001340:	4603      	mov	r3, r0
 8001342:	733b      	strb	r3, [r7, #12]
	DHT11_Stop();
 8001344:	f7ff ff54 	bl	80011f0 <DHT11_Stop>
	return dht11;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	461a      	mov	r2, r3
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	6010      	str	r0, [r2, #0]
 8001354:	889b      	ldrh	r3, [r3, #4]
 8001356:	8093      	strh	r3, [r2, #4]
}
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	807b      	strh	r3, [r7, #2]
    *length = 0;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8001374:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001378:	2100      	movs	r1, #0
 800137a:	68b8      	ldr	r0, [r7, #8]
 800137c:	f007 f85a 	bl	8008434 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 8001380:	f240 4202 	movw	r2, #1026	@ 0x402
 8001384:	2100      	movs	r1, #0
 8001386:	4826      	ldr	r0, [pc, #152]	@ (8001420 <esp_at_command+0xc0>)
 8001388:	f007 f854 	bl	8008434 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7fe ff87 	bl	80002a0 <strlen>
 8001392:	4603      	mov	r3, r0
 8001394:	b29a      	uxth	r2, r3
 8001396:	2364      	movs	r3, #100	@ 0x64
 8001398:	68f9      	ldr	r1, [r7, #12]
 800139a:	4822      	ldr	r0, [pc, #136]	@ (8001424 <esp_at_command+0xc4>)
 800139c:	f004 fb0a 	bl	80059b4 <HAL_UART_Transmit>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d032      	beq.n	800140c <esp_at_command+0xac>
        return -1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	e035      	b.n	8001418 <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 80013ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <esp_at_command+0xc0>)
 80013ae:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80013b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013b6:	d302      	bcc.n	80013be <esp_at_command+0x5e>
            return -2;
 80013b8:	f06f 0301 	mvn.w	r3, #1
 80013bc:	e02c      	b.n	8001418 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 80013be:	491a      	ldr	r1, [pc, #104]	@ (8001428 <esp_at_command+0xc8>)
 80013c0:	4817      	ldr	r0, [pc, #92]	@ (8001420 <esp_at_command+0xc0>)
 80013c2:	f007 f8bb 	bl	800853c <strstr>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <esp_at_command+0x72>
            return -3;
 80013cc:	f06f 0302 	mvn.w	r3, #2
 80013d0:	e022      	b.n	8001418 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 80013d2:	4916      	ldr	r1, [pc, #88]	@ (800142c <esp_at_command+0xcc>)
 80013d4:	4812      	ldr	r0, [pc, #72]	@ (8001420 <esp_at_command+0xc0>)
 80013d6:	f007 f8b1 	bl	800853c <strstr>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00e      	beq.n	80013fe <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 80013e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <esp_at_command+0xc0>)
 80013e2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80013e6:	461a      	mov	r2, r3
 80013e8:	490d      	ldr	r1, [pc, #52]	@ (8001420 <esp_at_command+0xc0>)
 80013ea:	68b8      	ldr	r0, [r7, #8]
 80013ec:	f007 f93b 	bl	8008666 <memcpy>
            *length = cb_data.length;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001420 <esp_at_command+0xc0>)
 80013f2:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	801a      	strh	r2, [r3, #0]
            return 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e00c      	b.n	8001418 <esp_at_command+0xb8>
        }
        time_out -= 10;
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	3b0a      	subs	r3, #10
 8001402:	b29b      	uxth	r3, r3
 8001404:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 8001406:	200a      	movs	r0, #10
 8001408:	f001 fdda 	bl	8002fc0 <HAL_Delay>
    while(time_out > 0)
 800140c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001410:	2b00      	cmp	r3, #0
 8001412:	dccb      	bgt.n	80013ac <esp_at_command+0x4c>
    }
    return -4;
 8001414:	f06f 0303 	mvn.w	r3, #3
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000640 	.word	0x20000640
 8001424:	20000bb0 	.word	0x20000bb0
 8001428:	0800be08 	.word	0x0800be08
 800142c:	0800be10 	.word	0x0800be10

08001430 <esp_reset>:

static int esp_reset(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 800143a:	1dba      	adds	r2, r7, #6
 800143c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001440:	4909      	ldr	r1, [pc, #36]	@ (8001468 <esp_reset+0x38>)
 8001442:	480a      	ldr	r0, [pc, #40]	@ (800146c <esp_reset+0x3c>)
 8001444:	f7ff ff8c 	bl	8001360 <esp_at_command>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <esp_reset+0x24>
    {
    	return -1;
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	e004      	b.n	800145e <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 8001454:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001458:	f001 fdb2 	bl	8002fc0 <HAL_Delay>
    return 0;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000208 	.word	0x20000208
 800146c:	0800be14 	.word	0x0800be14

08001470 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 800147e:	f107 020a 	add.w	r2, r7, #10
 8001482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001486:	492d      	ldr	r1, [pc, #180]	@ (800153c <request_ip_addr+0xcc>)
 8001488:	482d      	ldr	r0, [pc, #180]	@ (8001540 <request_ip_addr+0xd0>)
 800148a:	f7ff ff69 	bl	8001360 <esp_at_command>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8001494:	482b      	ldr	r0, [pc, #172]	@ (8001544 <request_ip_addr+0xd4>)
 8001496:	f006 fecb 	bl	8008230 <puts>
 800149a:	e049      	b.n	8001530 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 800149c:	492a      	ldr	r1, [pc, #168]	@ (8001548 <request_ip_addr+0xd8>)
 800149e:	4827      	ldr	r0, [pc, #156]	@ (800153c <request_ip_addr+0xcc>)
 80014a0:	f006 fff0 	bl	8008484 <strtok>
 80014a4:	6178      	str	r0, [r7, #20]

        if(is_debug)
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d03e      	beq.n	800152a <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	e009      	b.n	80014c6 <request_ip_addr+0x56>
                printf("%c", response[i]);
 80014b2:	4a22      	ldr	r2, [pc, #136]	@ (800153c <request_ip_addr+0xcc>)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4413      	add	r3, r2
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f006 fe5a 	bl	8008174 <putchar>
            for(int i = 0 ; i < length ; i++)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	3301      	adds	r3, #1
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	897b      	ldrh	r3, [r7, #10]
 80014c8:	461a      	mov	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4293      	cmp	r3, r2
 80014ce:	dbf0      	blt.n	80014b2 <request_ip_addr+0x42>
        }

        while(line != NULL)
 80014d0:	e02b      	b.n	800152a <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 80014d2:	491e      	ldr	r1, [pc, #120]	@ (800154c <request_ip_addr+0xdc>)
 80014d4:	6978      	ldr	r0, [r7, #20]
 80014d6:	f007 f831 	bl	800853c <strstr>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d01f      	beq.n	8001520 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 80014e0:	491b      	ldr	r1, [pc, #108]	@ (8001550 <request_ip_addr+0xe0>)
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	f006 ffce 	bl	8008484 <strtok>
                ip = strtok(NULL, "\"");
 80014e8:	4919      	ldr	r1, [pc, #100]	@ (8001550 <request_ip_addr+0xe0>)
 80014ea:	2000      	movs	r0, #0
 80014ec:	f006 ffca 	bl	8008484 <strtok>
 80014f0:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 80014f2:	4918      	ldr	r1, [pc, #96]	@ (8001554 <request_ip_addr+0xe4>)
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f7fe fe73 	bl	80001e0 <strcmp>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00f      	beq.n	8001520 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8001500:	2210      	movs	r2, #16
 8001502:	2100      	movs	r1, #0
 8001504:	4814      	ldr	r0, [pc, #80]	@ (8001558 <request_ip_addr+0xe8>)
 8001506:	f006 ff95 	bl	8008434 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f7fe fec8 	bl	80002a0 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	68f9      	ldr	r1, [r7, #12]
 8001516:	4810      	ldr	r0, [pc, #64]	@ (8001558 <request_ip_addr+0xe8>)
 8001518:	f007 f8a5 	bl	8008666 <memcpy>
                    return 0;
 800151c:	2300      	movs	r3, #0
 800151e:	e009      	b.n	8001534 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8001520:	4909      	ldr	r1, [pc, #36]	@ (8001548 <request_ip_addr+0xd8>)
 8001522:	2000      	movs	r0, #0
 8001524:	f006 ffae 	bl	8008484 <strtok>
 8001528:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1d0      	bne.n	80014d2 <request_ip_addr+0x62>
        }
    }
    return -1;
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000208 	.word	0x20000208
 8001540:	0800be5c 	.word	0x0800be5c
 8001544:	0800be68 	.word	0x0800be68
 8001548:	0800be50 	.word	0x0800be50
 800154c:	0800be88 	.word	0x0800be88
 8001550:	0800be58 	.word	0x0800be58
 8001554:	0800be20 	.word	0x0800be20
 8001558:	200001f8 	.word	0x200001f8

0800155c <esp_client_conn>:
int esp_client_conn()
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b092      	sub	sp, #72	@ 0x48
 8001560:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	2240      	movs	r2, #64	@ 0x40
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f006 ff62 	bl	8008434 <memset>
  uint16_t length = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 8001574:	f107 0008 	add.w	r0, r7, #8
 8001578:	f241 3388 	movw	r3, #5000	@ 0x1388
 800157c:	4a09      	ldr	r2, [pc, #36]	@ (80015a4 <esp_client_conn+0x48>)
 800157e:	490a      	ldr	r1, [pc, #40]	@ (80015a8 <esp_client_conn+0x4c>)
 8001580:	f006 fe5e 	bl	8008240 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8001584:	1dba      	adds	r2, r7, #6
 8001586:	f107 0008 	add.w	r0, r7, #8
 800158a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158e:	4907      	ldr	r1, [pc, #28]	@ (80015ac <esp_client_conn+0x50>)
 8001590:	f7ff fee6 	bl	8001360 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8001594:	4806      	ldr	r0, [pc, #24]	@ (80015b0 <esp_client_conn+0x54>)
 8001596:	f000 f909 	bl	80017ac <esp_send_data>
	return 0;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3748      	adds	r7, #72	@ 0x48
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	0800be94 	.word	0x0800be94
 80015a8:	0800bea4 	.word	0x0800bea4
 80015ac:	20000208 	.word	0x20000208
 80015b0:	0800bec0 	.word	0x0800bec0

080015b4 <esp_get_status>:
int esp_get_status()
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 80015be:	1dba      	adds	r2, r7, #6
 80015c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015c4:	4909      	ldr	r1, [pc, #36]	@ (80015ec <esp_get_status+0x38>)
 80015c6:	480a      	ldr	r0, [pc, #40]	@ (80015f0 <esp_get_status+0x3c>)
 80015c8:	f7ff feca 	bl	8001360 <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 80015cc:	4909      	ldr	r1, [pc, #36]	@ (80015f4 <esp_get_status+0x40>)
 80015ce:	4807      	ldr	r0, [pc, #28]	@ (80015ec <esp_get_status+0x38>)
 80015d0:	f006 ffb4 	bl	800853c <strstr>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <esp_get_status+0x2a>
    {
    	return 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	e001      	b.n	80015e2 <esp_get_status+0x2e>
    }
	return -1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000208 	.word	0x20000208
 80015f0:	0800becc 	.word	0x0800becc
 80015f4:	0800bedc 	.word	0x0800bedc

080015f8 <drv_esp_init>:
int drv_esp_init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 80015fc:	2210      	movs	r2, #16
 80015fe:	2100      	movs	r1, #0
 8001600:	4806      	ldr	r0, [pc, #24]	@ (800161c <drv_esp_init+0x24>)
 8001602:	f006 ff17 	bl	8008434 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 8001606:	2201      	movs	r2, #1
 8001608:	4905      	ldr	r1, [pc, #20]	@ (8001620 <drv_esp_init+0x28>)
 800160a:	4806      	ldr	r0, [pc, #24]	@ (8001624 <drv_esp_init+0x2c>)
 800160c:	f004 fa5d 	bl	8005aca <HAL_UART_Receive_IT>

    return esp_reset();
 8001610:	f7ff ff0e 	bl	8001430 <esp_reset>
 8001614:	4603      	mov	r3, r0
}
 8001616:	4618      	mov	r0, r3
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200001f8 	.word	0x200001f8
 8001620:	2000063f 	.word	0x2000063f
 8001624:	20000bb0 	.word	0x20000bb0

08001628 <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b094      	sub	sp, #80	@ 0x50
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	2240      	movs	r2, #64	@ 0x40
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f006 fef7 	bl	8008434 <memset>
  if(ssid == NULL || passwd == NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <ap_conn_func+0x2a>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d103      	bne.n	800165a <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8001652:	4817      	ldr	r0, [pc, #92]	@ (80016b0 <ap_conn_func+0x88>)
 8001654:	f006 fdec 	bl	8008230 <puts>
 8001658:	e026      	b.n	80016a8 <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 800165a:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 800165e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001662:	4914      	ldr	r1, [pc, #80]	@ (80016b4 <ap_conn_func+0x8c>)
 8001664:	4814      	ldr	r0, [pc, #80]	@ (80016b8 <ap_conn_func+0x90>)
 8001666:	f7ff fe7b 	bl	8001360 <esp_at_command>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 8001670:	4812      	ldr	r0, [pc, #72]	@ (80016bc <ap_conn_func+0x94>)
 8001672:	f006 fddd 	bl	8008230 <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 8001676:	f107 000c 	add.w	r0, r7, #12
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4910      	ldr	r1, [pc, #64]	@ (80016c0 <ap_conn_func+0x98>)
 8001680:	f006 fdde 	bl	8008240 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8001684:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8001688:	f107 000c 	add.w	r0, r7, #12
 800168c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001690:	4908      	ldr	r1, [pc, #32]	@ (80016b4 <ap_conn_func+0x8c>)
 8001692:	f7ff fe65 	bl	8001360 <esp_at_command>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	4619      	mov	r1, r3
 80016a2:	4808      	ldr	r0, [pc, #32]	@ (80016c4 <ap_conn_func+0x9c>)
 80016a4:	f006 fd54 	bl	8008150 <iprintf>
}
 80016a8:	3750      	adds	r7, #80	@ 0x50
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	0800bf40 	.word	0x0800bf40
 80016b4:	20000208 	.word	0x20000208
 80016b8:	0800bf6c 	.word	0x0800bf6c
 80016bc:	0800bf7c 	.word	0x0800bf7c
 80016c0:	0800bf90 	.word	0x0800bf90
 80016c4:	0800bfa8 	.word	0x0800bfa8

080016c8 <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a23      	ldr	r2, [pc, #140]	@ (8001764 <HAL_UART_RxCpltCallback+0x9c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d117      	bne.n	800170a <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 80016da:	4b23      	ldr	r3, [pc, #140]	@ (8001768 <HAL_UART_RxCpltCallback+0xa0>)
 80016dc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80016e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016e4:	d20c      	bcs.n	8001700 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_UART_RxCpltCallback+0xa0>)
 80016e8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	b291      	uxth	r1, r2
 80016f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001768 <HAL_UART_RxCpltCallback+0xa0>)
 80016f2:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b1c      	ldr	r3, [pc, #112]	@ (800176c <HAL_UART_RxCpltCallback+0xa4>)
 80016fa:	7819      	ldrb	r1, [r3, #0]
 80016fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <HAL_UART_RxCpltCallback+0xa0>)
 80016fe:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 8001700:	2201      	movs	r2, #1
 8001702:	491a      	ldr	r1, [pc, #104]	@ (800176c <HAL_UART_RxCpltCallback+0xa4>)
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f004 f9e0 	bl	8005aca <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a18      	ldr	r2, [pc, #96]	@ (8001770 <HAL_UART_RxCpltCallback+0xa8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d122      	bne.n	800175a <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8001714:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <HAL_UART_RxCpltCallback+0xac>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a17      	ldr	r2, [pc, #92]	@ (8001778 <HAL_UART_RxCpltCallback+0xb0>)
 800171a:	7811      	ldrb	r1, [r2, #0]
 800171c:	4a17      	ldr	r2, [pc, #92]	@ (800177c <HAL_UART_RxCpltCallback+0xb4>)
 800171e:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 8001720:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <HAL_UART_RxCpltCallback+0xac>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a15      	ldr	r2, [pc, #84]	@ (800177c <HAL_UART_RxCpltCallback+0xb4>)
 8001726:	5cd3      	ldrb	r3, [r2, r3]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b0d      	cmp	r3, #13
 800172c:	d10b      	bne.n	8001746 <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 800172e:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <HAL_UART_RxCpltCallback+0xac>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a12      	ldr	r2, [pc, #72]	@ (800177c <HAL_UART_RxCpltCallback+0xb4>)
 8001734:	2100      	movs	r1, #0
 8001736:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8001738:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <HAL_UART_RxCpltCallback+0xb8>)
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
    		i = 0;
 800173e:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <HAL_UART_RxCpltCallback+0xac>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e004      	b.n	8001750 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 8001746:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <HAL_UART_RxCpltCallback+0xac>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <HAL_UART_RxCpltCallback+0xac>)
 800174e:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 8001750:	2201      	movs	r2, #1
 8001752:	4909      	ldr	r1, [pc, #36]	@ (8001778 <HAL_UART_RxCpltCallback+0xb0>)
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f004 f9b8 	bl	8005aca <HAL_UART_Receive_IT>
    }
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40011400 	.word	0x40011400
 8001768:	20000640 	.word	0x20000640
 800176c:	2000063f 	.word	0x2000063f
 8001770:	40004400 	.word	0x40004400
 8001774:	20000a44 	.word	0x20000a44
 8001778:	2000063e 	.word	0x2000063e
 800177c:	2000060c 	.word	0x2000060c
 8001780:	20000608 	.word	0x20000608

08001784 <AiotClient_Init>:


void AiotClient_Init()
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 8001788:	4906      	ldr	r1, [pc, #24]	@ (80017a4 <AiotClient_Init+0x20>)
 800178a:	4807      	ldr	r0, [pc, #28]	@ (80017a8 <AiotClient_Init+0x24>)
 800178c:	f7ff ff4c 	bl	8001628 <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff fe6d 	bl	8001470 <request_ip_addr>
	esp_client_conn();
 8001796:	f7ff fee1 	bl	800155c <esp_client_conn>
	esp_get_status();
 800179a:	f7ff ff0b 	bl	80015b4 <esp_get_status>
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	0800c008 	.word	0x0800c008
 80017a8:	0800c014 	.word	0x0800c014

080017ac <esp_send_data>:

void esp_send_data(char *data)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b094      	sub	sp, #80	@ 0x50
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	2240      	movs	r2, #64	@ 0x40
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f006 fe39 	bl	8008434 <memset>
	uint16_t length = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7fe fd6a 	bl	80002a0 <strlen>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	490e      	ldr	r1, [pc, #56]	@ (800180c <esp_send_data+0x60>)
 80017d4:	4618      	mov	r0, r3
 80017d6:	f006 fd33 	bl	8008240 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 80017da:	f107 020e 	add.w	r2, r7, #14
 80017de:	f107 0010 	add.w	r0, r7, #16
 80017e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017e6:	490a      	ldr	r1, [pc, #40]	@ (8001810 <esp_send_data+0x64>)
 80017e8:	f7ff fdba 	bl	8001360 <esp_at_command>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d107      	bne.n	8001802 <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 80017f2:	f107 020e 	add.w	r2, r7, #14
 80017f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017fa:	4905      	ldr	r1, [pc, #20]	@ (8001810 <esp_send_data+0x64>)
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff fdaf 	bl	8001360 <esp_at_command>
	}
}
 8001802:	bf00      	nop
 8001804:	3750      	adds	r7, #80	@ 0x50
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	0800c01c 	.word	0x0800c01c
 8001810:	20000208 	.word	0x20000208

08001814 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8001818:	2201      	movs	r2, #1
 800181a:	4903      	ldr	r1, [pc, #12]	@ (8001828 <drv_uart_init+0x14>)
 800181c:	4803      	ldr	r0, [pc, #12]	@ (800182c <drv_uart_init+0x18>)
 800181e:	f004 f954 	bl	8005aca <HAL_UART_Receive_IT>
    return 0;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2000063e 	.word	0x2000063e
 800182c:	20000b68 	.word	0x20000b68

08001830 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8001838:	1d39      	adds	r1, r7, #4
 800183a:	230a      	movs	r3, #10
 800183c:	2201      	movs	r2, #1
 800183e:	4807      	ldr	r0, [pc, #28]	@ (800185c <__io_putchar+0x2c>)
 8001840:	f004 f8b8 	bl	80059b4 <HAL_UART_Transmit>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <__io_putchar+0x1e>
        return ch;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	e001      	b.n	8001852 <__io_putchar+0x22>
    return -1;
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000b68 	.word	0x20000b68

08001860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b096      	sub	sp, #88	@ 0x58
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
    int ret = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	653b      	str	r3, [r7, #80]	@ 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800186a:	f001 fb37 	bl	8002edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186e:	f000 fa31 	bl	8001cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001872:	f000 fcd9 	bl	8002228 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001876:	f000 fc83 	bl	8002180 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800187a:	f000 fcab 	bl	80021d4 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 800187e:	f000 fc09 	bl	8002094 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001882:	f000 fb91 	bl	8001fa8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001886:	f000 faef 	bl	8001e68 <MX_TIM1_Init>
  MX_ADC1_Init();
 800188a:	f000 fa8d 	bl	8001da8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    printf("Start main() - wifi\r\n");
 800188e:	4880      	ldr	r0, [pc, #512]	@ (8001a90 <main+0x230>)
 8001890:	f006 fcce 	bl	8008230 <puts>
    ret |= drv_uart_init();
 8001894:	f7ff ffbe 	bl	8001814 <drv_uart_init>
 8001898:	4602      	mov	r2, r0
 800189a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800189c:	4313      	orrs	r3, r2
 800189e:	653b      	str	r3, [r7, #80]	@ 0x50
    ret |= drv_esp_init();
 80018a0:	f7ff feaa 	bl	80015f8 <drv_esp_init>
 80018a4:	4602      	mov	r2, r0
 80018a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018a8:	4313      	orrs	r3, r2
 80018aa:	653b      	str	r3, [r7, #80]	@ 0x50
    if (ret != 0)
 80018ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d004      	beq.n	80018bc <main+0x5c>
    {
        printf("Esp response error\r\n");
 80018b2:	4878      	ldr	r0, [pc, #480]	@ (8001a94 <main+0x234>)
 80018b4:	f006 fcbc 	bl	8008230 <puts>
        Error_Handler();
 80018b8:	f000 ffb2 	bl	8002820 <Error_Handler>
    }

    AiotClient_Init();
 80018bc:	f7ff ff62 	bl	8001784 <AiotClient_Init>

    DHT11_Init();
 80018c0:	f7ff fc54 	bl	800116c <DHT11_Init>

    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 80018c4:	2100      	movs	r1, #0
 80018c6:	4874      	ldr	r0, [pc, #464]	@ (8001a98 <main+0x238>)
 80018c8:	f003 f92c 	bl	8004b24 <HAL_TIM_PWM_Start>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <main+0x76>
        Error_Handler();
 80018d2:	f000 ffa5 	bl	8002820 <Error_Handler>
    if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 80018d6:	2100      	movs	r1, #0
 80018d8:	4870      	ldr	r0, [pc, #448]	@ (8001a9c <main+0x23c>)
 80018da:	f003 f923 	bl	8004b24 <HAL_TIM_PWM_Start>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <main+0x88>
        Error_Handler();
 80018e4:	f000 ff9c 	bl	8002820 <Error_Handler>
    if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 80018e8:	486c      	ldr	r0, [pc, #432]	@ (8001a9c <main+0x23c>)
 80018ea:	f003 f85f 	bl	80049ac <HAL_TIM_Base_Start_IT>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <main+0x98>
        Error_Handler();
 80018f4:	f000 ff94 	bl	8002820 <Error_Handler>

    if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 80018f8:	2100      	movs	r1, #0
 80018fa:	4869      	ldr	r0, [pc, #420]	@ (8001aa0 <main+0x240>)
 80018fc:	f003 f912 	bl	8004b24 <HAL_TIM_PWM_Start>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <main+0xaa>
        Error_Handler();
 8001906:	f000 ff8b 	bl	8002820 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        if (HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 800190a:	4866      	ldr	r0, [pc, #408]	@ (8001aa4 <main+0x244>)
 800190c:	f001 fbc0 	bl	8003090 <HAL_ADC_Start_IT>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <main+0xba>
            Error_Handler();
 8001916:	f000 ff83 	bl	8002820 <Error_Handler>
        if (strstr((char *)cb_data.buf, "+IPD") && cb_data.buf[cb_data.length - 1] == '\n')
 800191a:	4963      	ldr	r1, [pc, #396]	@ (8001aa8 <main+0x248>)
 800191c:	4863      	ldr	r0, [pc, #396]	@ (8001aac <main+0x24c>)
 800191e:	f006 fe0d 	bl	800853c <strstr>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d022      	beq.n	800196e <main+0x10e>
 8001928:	4b60      	ldr	r3, [pc, #384]	@ (8001aac <main+0x24c>)
 800192a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800192e:	3b01      	subs	r3, #1
 8001930:	4a5e      	ldr	r2, [pc, #376]	@ (8001aac <main+0x24c>)
 8001932:	5cd3      	ldrb	r3, [r2, r3]
 8001934:	2b0a      	cmp	r3, #10
 8001936:	d11a      	bne.n	800196e <main+0x10e>
        {
            //?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
            strcpy(strBuff, strchr((char *)cb_data.buf, '['));
 8001938:	215b      	movs	r1, #91	@ 0x5b
 800193a:	485c      	ldr	r0, [pc, #368]	@ (8001aac <main+0x24c>)
 800193c:	f006 fd82 	bl	8008444 <strchr>
 8001940:	4603      	mov	r3, r0
 8001942:	4619      	mov	r1, r3
 8001944:	485a      	ldr	r0, [pc, #360]	@ (8001ab0 <main+0x250>)
 8001946:	f006 fe86 	bl	8008656 <strcpy>
            memset(cb_data.buf, 0x0, sizeof(cb_data.buf));
 800194a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800194e:	2100      	movs	r1, #0
 8001950:	4856      	ldr	r0, [pc, #344]	@ (8001aac <main+0x24c>)
 8001952:	f006 fd6f 	bl	8008434 <memset>
            cb_data.length = 0;
 8001956:	4b55      	ldr	r3, [pc, #340]	@ (8001aac <main+0x24c>)
 8001958:	2200      	movs	r2, #0
 800195a:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
            ledControl(ledState);
 800195e:	4b55      	ldr	r3, [pc, #340]	@ (8001ab4 <main+0x254>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f000 fefc 	bl	8002760 <ledControl>
            esp_event(strBuff);
 8001968:	4851      	ldr	r0, [pc, #324]	@ (8001ab0 <main+0x250>)
 800196a:	f000 fcfd 	bl	8002368 <esp_event>
        }
        if (rx2Flag)
 800196e:	4b52      	ldr	r3, [pc, #328]	@ (8001ab8 <main+0x258>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <main+0x126>
        {
            printf("recv2 : %s\r\n", rx2Data);
 8001978:	4950      	ldr	r1, [pc, #320]	@ (8001abc <main+0x25c>)
 800197a:	4851      	ldr	r0, [pc, #324]	@ (8001ac0 <main+0x260>)
 800197c:	f006 fbe8 	bl	8008150 <iprintf>
            rx2Flag = 0;
 8001980:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab8 <main+0x258>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
        }
        if (tim3Flag1Sec) // 1초에 한번
 8001986:	4b4f      	ldr	r3, [pc, #316]	@ (8001ac4 <main+0x264>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0bd      	beq.n	800190a <main+0xaa>
        {
            tim3Flag1Sec = 0;
 800198e:	4b4d      	ldr	r3, [pc, #308]	@ (8001ac4 <main+0x264>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
            if (!(tim3Sec % 10)) // 10초에 한번
 8001994:	4b4c      	ldr	r3, [pc, #304]	@ (8001ac8 <main+0x268>)
 8001996:	6819      	ldr	r1, [r3, #0]
 8001998:	4b4c      	ldr	r3, [pc, #304]	@ (8001acc <main+0x26c>)
 800199a:	fba3 2301 	umull	r2, r3, r3, r1
 800199e:	08da      	lsrs	r2, r3, #3
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	1aca      	subs	r2, r1, r3
 80019aa:	2a00      	cmp	r2, #0
 80019ac:	d109      	bne.n	80019c2 <main+0x162>
            {
                if (esp_get_status() != 0)
 80019ae:	f7ff fe01 	bl	80015b4 <esp_get_status>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d004      	beq.n	80019c2 <main+0x162>
                {
                    printf("server connecting ...\r\n");
 80019b8:	4845      	ldr	r0, [pc, #276]	@ (8001ad0 <main+0x270>)
 80019ba:	f006 fc39 	bl	8008230 <puts>
                    esp_client_conn();
 80019be:	f7ff fdcd 	bl	800155c <esp_client_conn>
                }
            }
            if (!(tim3Sec % 5)) // 5초에 한번
 80019c2:	4b41      	ldr	r3, [pc, #260]	@ (8001ac8 <main+0x268>)
 80019c4:	6819      	ldr	r1, [r3, #0]
 80019c6:	4b41      	ldr	r3, [pc, #260]	@ (8001acc <main+0x26c>)
 80019c8:	fba3 2301 	umull	r2, r3, r3, r1
 80019cc:	089a      	lsrs	r2, r3, #2
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	1aca      	subs	r2, r1, r3
 80019d6:	2a00      	cmp	r2, #0
 80019d8:	f040 8085 	bne.w	8001ae6 <main+0x286>
            {
                // dht11에서 값 읽어오기
                dht11Data = DHT11_readData();
 80019dc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fc91 	bl	8001308 <DHT11_readData>
                if (dht11Data.rh_byte1 != 255)
 80019e6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80019ea:	2bff      	cmp	r3, #255	@ 0xff
 80019ec:	d078      	beq.n	8001ae0 <main+0x280>
                {
                    // 온도 데이터 전역변수 temp에 저장
                    sprintf(temp, "%d.%d", dht11Data.temp_byte1, dht11Data.temp_byte2);
 80019ee:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80019f2:	461a      	mov	r2, r3
 80019f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80019f8:	4936      	ldr	r1, [pc, #216]	@ (8001ad4 <main+0x274>)
 80019fa:	4837      	ldr	r0, [pc, #220]	@ (8001ad8 <main+0x278>)
 80019fc:	f006 fc20 	bl	8008240 <siprintf>
                    // 습도 데이터 전역변수 humi 에 저장
                    humi = dht11Data.rh_byte1;
 8001a00:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b35      	ldr	r3, [pc, #212]	@ (8001adc <main+0x27c>)
 8001a08:	601a      	str	r2, [r3, #0]

                    //온도에 따라 팬 속도 조절
                    float fanContorlTemp = atof(temp);
 8001a0a:	4833      	ldr	r0, [pc, #204]	@ (8001ad8 <main+0x278>)
 8001a0c:	f004 ffee 	bl	80069ec <atof>
 8001a10:	ec53 2b10 	vmov	r2, r3, d0
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f8fe 	bl	8000c18 <__aeabi_d2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
//                    if(fanContorlTemp > 22)
//                    	fanControl(300);
                    if(fanContorlTemp > 23)
 8001a20:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001a24:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8001a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	dd04      	ble.n	8001a3c <main+0x1dc>
                    	fanControl(400);
 8001a32:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001a36:	f000 fe83 	bl	8002740 <fanControl>
 8001a3a:	e054      	b.n	8001ae6 <main+0x286>
                    else if(fanContorlTemp > 25)
 8001a3c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001a40:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4c:	dd04      	ble.n	8001a58 <main+0x1f8>
                    	fanControl(600);
 8001a4e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001a52:	f000 fe75 	bl	8002740 <fanControl>
 8001a56:	e046      	b.n	8001ae6 <main+0x286>
                    else if(fanContorlTemp > 27)
 8001a58:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001a5c:	eeb3 7a0b 	vmov.f32	s14, #59	@ 0x41d80000  27.0
 8001a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a68:	dd04      	ble.n	8001a74 <main+0x214>
                    	fanControl(800);
 8001a6a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001a6e:	f000 fe67 	bl	8002740 <fanControl>
 8001a72:	e038      	b.n	8001ae6 <main+0x286>
                    else if(fanContorlTemp > 30)
 8001a74:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001a78:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	dd2f      	ble.n	8001ae6 <main+0x286>
                    	fanControl(1000);
 8001a86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a8a:	f000 fe59 	bl	8002740 <fanControl>
 8001a8e:	e02a      	b.n	8001ae6 <main+0x286>
 8001a90:	0800c02c 	.word	0x0800c02c
 8001a94:	0800c044 	.word	0x0800c044
 8001a98:	20000a90 	.word	0x20000a90
 8001a9c:	20000ad8 	.word	0x20000ad8
 8001aa0:	20000b20 	.word	0x20000b20
 8001aa4:	20000a48 	.word	0x20000a48
 8001aa8:	0800c058 	.word	0x0800c058
 8001aac:	20000640 	.word	0x20000640
 8001ab0:	20000c38 	.word	0x20000c38
 8001ab4:	20000004 	.word	0x20000004
 8001ab8:	20000608 	.word	0x20000608
 8001abc:	2000060c 	.word	0x2000060c
 8001ac0:	0800c060 	.word	0x0800c060
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000bf8 	.word	0x20000bf8
 8001acc:	cccccccd 	.word	0xcccccccd
 8001ad0:	0800c070 	.word	0x0800c070
 8001ad4:	0800c088 	.word	0x0800c088
 8001ad8:	20000c00 	.word	0x20000c00
 8001adc:	20000bfc 	.word	0x20000bfc

                }
                else
                    printf("DHT11 response error\r\n");
 8001ae0:	486d      	ldr	r0, [pc, #436]	@ (8001c98 <main+0x438>)
 8001ae2:	f006 fba5 	bl	8008230 <puts>
            }

			// outdoorsensor 거리 변환
			float voltage = (ADC1ConvertValue[0] / 4095.0f) * 3.3f; // 12-bit ADC의 최대 값은 4095
 8001ae6:	4b6d      	ldr	r3, [pc, #436]	@ (8001c9c <main+0x43c>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af4:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8001ca0 <main+0x440>
 8001af8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001afc:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8001ca4 <main+0x444>
 8001b00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b04:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
			if (voltage < 0.1f)
 8001b08:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001b0c:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8001ca8 <main+0x448>
 8001b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b18:	d501      	bpl.n	8001b1e <main+0x2be>
				voltage = 0.1f;
 8001b1a:	4b64      	ldr	r3, [pc, #400]	@ (8001cac <main+0x44c>)
 8001b1c:	657b      	str	r3, [r7, #84]	@ 0x54
			outDoorSensor.distance = 27.86f / pow(voltage, 1.15f);
 8001b1e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001b20:	f7fe fd2a 	bl	8000578 <__aeabi_f2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	ed9f 1b57 	vldr	d1, [pc, #348]	@ 8001c88 <main+0x428>
 8001b2c:	ec43 2b10 	vmov	d0, r2, r3
 8001b30:	f009 f9fc 	bl	800af2c <pow>
 8001b34:	ec53 2b10 	vmov	r2, r3, d0
 8001b38:	a155      	add	r1, pc, #340	@ (adr r1, 8001c90 <main+0x430>)
 8001b3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b3e:	f7fe fe9d 	bl	800087c <__aeabi_ddiv>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7ff f865 	bl	8000c18 <__aeabi_d2f>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a57      	ldr	r2, [pc, #348]	@ (8001cb0 <main+0x450>)
 8001b52:	6013      	str	r3, [r2, #0]

			// indoorsensor 거리 변환
			voltage = (ADC1ConvertValue[1] / 4095.0f) * 3.3f; // 12-bit ADC의 최대 값은 4095
 8001b54:	4b51      	ldr	r3, [pc, #324]	@ (8001c9c <main+0x43c>)
 8001b56:	885b      	ldrh	r3, [r3, #2]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	ee07 3a90 	vmov	s15, r3
 8001b5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b62:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001ca0 <main+0x440>
 8001b66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b6a:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001ca4 <main+0x444>
 8001b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b72:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
			if (voltage < 0.1f)
 8001b76:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001b7a:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001ca8 <main+0x448>
 8001b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b86:	d501      	bpl.n	8001b8c <main+0x32c>
				voltage = 0.1f;
 8001b88:	4b48      	ldr	r3, [pc, #288]	@ (8001cac <main+0x44c>)
 8001b8a:	657b      	str	r3, [r7, #84]	@ 0x54
			inDoorSensor.distance = 27.86f / pow(voltage, 1.15f);
 8001b8c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001b8e:	f7fe fcf3 	bl	8000578 <__aeabi_f2d>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	ed9f 1b3c 	vldr	d1, [pc, #240]	@ 8001c88 <main+0x428>
 8001b9a:	ec43 2b10 	vmov	d0, r2, r3
 8001b9e:	f009 f9c5 	bl	800af2c <pow>
 8001ba2:	ec53 2b10 	vmov	r2, r3, d0
 8001ba6:	a13a      	add	r1, pc, #232	@ (adr r1, 8001c90 <main+0x430>)
 8001ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bac:	f7fe fe66 	bl	800087c <__aeabi_ddiv>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7ff f82e 	bl	8000c18 <__aeabi_d2f>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4a3d      	ldr	r2, [pc, #244]	@ (8001cb4 <main+0x454>)
 8001bc0:	6013      	str	r3, [r2, #0]

			printf("in distance : %f\r\n", inDoorSensor.distance);
 8001bc2:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb4 <main+0x454>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fcd6 	bl	8000578 <__aeabi_f2d>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4839      	ldr	r0, [pc, #228]	@ (8001cb8 <main+0x458>)
 8001bd2:	f006 fabd 	bl	8008150 <iprintf>
			printf("out distance : %f\r\n", outDoorSensor.distance);
 8001bd6:	4b36      	ldr	r3, [pc, #216]	@ (8001cb0 <main+0x450>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fccc 	bl	8000578 <__aeabi_f2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4835      	ldr	r0, [pc, #212]	@ (8001cbc <main+0x45c>)
 8001be6:	f006 fab3 	bl	8008150 <iprintf>

			//led와 자동문, 오늘 손님 수 카운트
			if (outDoorSensor.distance < 17.0 || inDoorSensor.distance < 17.0)
 8001bea:	4b31      	ldr	r3, [pc, #196]	@ (8001cb0 <main+0x450>)
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	eeb3 7a01 	vmov.f32	s14, #49	@ 0x41880000  17.0
 8001bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfc:	d409      	bmi.n	8001c12 <main+0x3b2>
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb4 <main+0x454>)
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	eeb3 7a01 	vmov.f32	s14, #49	@ 0x41880000  17.0
 8001c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c10:	d523      	bpl.n	8001c5a <main+0x3fa>
			{
				if(outDoorSensor.distance < 17.0)
 8001c12:	4b27      	ldr	r3, [pc, #156]	@ (8001cb0 <main+0x450>)
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	eeb3 7a01 	vmov.f32	s14, #49	@ 0x41880000  17.0
 8001c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c24:	d504      	bpl.n	8001c30 <main+0x3d0>
					customerCount++;	//오늘 손님 누적
 8001c26:	4b26      	ldr	r3, [pc, #152]	@ (8001cc0 <main+0x460>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	4a24      	ldr	r2, [pc, #144]	@ (8001cc0 <main+0x460>)
 8001c2e:	6013      	str	r3, [r2, #0]

				ledControl(100);
 8001c30:	2064      	movs	r0, #100	@ 0x64
 8001c32:	f000 fd95 	bl	8002760 <ledControl>
				char sendBuf[MAX_UART_COMMAND_LEN] = {0};
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2240      	movs	r2, #64	@ 0x40
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f006 fbf9 	bl	8008434 <memset>

				inCustomer = true;
 8001c42:	4b20      	ldr	r3, [pc, #128]	@ (8001cc4 <main+0x464>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]

				sprintf(sendBuf, "[A_DOOR]DOOR@OPEN\n");
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	491f      	ldr	r1, [pc, #124]	@ (8001cc8 <main+0x468>)
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f006 faf7 	bl	8008240 <siprintf>
				esp_send_data(sendBuf);
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fda9 	bl	80017ac <esp_send_data>
			}

			if(inCustomer)
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc4 <main+0x464>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d004      	beq.n	8001c6c <main+0x40c>
				inCustomerTimer++;
 8001c62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <main+0x46c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	3301      	adds	r3, #1
 8001c68:	4a18      	ldr	r2, [pc, #96]	@ (8001ccc <main+0x46c>)
 8001c6a:	6013      	str	r3, [r2, #0]
			if(inCustomerTimer > 60)
 8001c6c:	4b17      	ldr	r3, [pc, #92]	@ (8001ccc <main+0x46c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b3c      	cmp	r3, #60	@ 0x3c
 8001c72:	f77f ae4a 	ble.w	800190a <main+0xaa>
			{
				inCustomerTimer = 0;
 8001c76:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <main+0x46c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
				ledControl(ledState);
 8001c7c:	4b14      	ldr	r3, [pc, #80]	@ (8001cd0 <main+0x470>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 fd6d 	bl	8002760 <ledControl>
        if (HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8001c86:	e640      	b.n	800190a <main+0xaa>
 8001c88:	60000000 	.word	0x60000000
 8001c8c:	3ff26666 	.word	0x3ff26666
 8001c90:	00000000 	.word	0x00000000
 8001c94:	403bdc29 	.word	0x403bdc29
 8001c98:	0800c090 	.word	0x0800c090
 8001c9c:	20000c14 	.word	0x20000c14
 8001ca0:	457ff000 	.word	0x457ff000
 8001ca4:	40533333 	.word	0x40533333
 8001ca8:	3dcccccd 	.word	0x3dcccccd
 8001cac:	3dcccccd 	.word	0x3dcccccd
 8001cb0:	20000c1c 	.word	0x20000c1c
 8001cb4:	20000c24 	.word	0x20000c24
 8001cb8:	0800c0a8 	.word	0x0800c0a8
 8001cbc:	0800c0bc 	.word	0x0800c0bc
 8001cc0:	20000c0c 	.word	0x20000c0c
 8001cc4:	20000c30 	.word	0x20000c30
 8001cc8:	0800c0d0 	.word	0x0800c0d0
 8001ccc:	20000c34 	.word	0x20000c34
 8001cd0:	20000004 	.word	0x20000004

08001cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b094      	sub	sp, #80	@ 0x50
 8001cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cda:	f107 0320 	add.w	r3, r7, #32
 8001cde:	2230      	movs	r2, #48	@ 0x30
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f006 fba6 	bl	8008434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	4b28      	ldr	r3, [pc, #160]	@ (8001da0 <SystemClock_Config+0xcc>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	4a27      	ldr	r2, [pc, #156]	@ (8001da0 <SystemClock_Config+0xcc>)
 8001d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d08:	4b25      	ldr	r3, [pc, #148]	@ (8001da0 <SystemClock_Config+0xcc>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d14:	2300      	movs	r3, #0
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	4b22      	ldr	r3, [pc, #136]	@ (8001da4 <SystemClock_Config+0xd0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a21      	ldr	r2, [pc, #132]	@ (8001da4 <SystemClock_Config+0xd0>)
 8001d1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b1f      	ldr	r3, [pc, #124]	@ (8001da4 <SystemClock_Config+0xd0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d30:	2301      	movs	r3, #1
 8001d32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d34:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d44:	2308      	movs	r3, #8
 8001d46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d48:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001d4c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d4e:	2304      	movs	r3, #4
 8001d50:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d52:	2304      	movs	r3, #4
 8001d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d56:	f107 0320 	add.w	r3, r7, #32
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 f93e 	bl	8003fdc <HAL_RCC_OscConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d66:	f000 fd5b 	bl	8002820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d6a:	230f      	movs	r3, #15
 8001d6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	2102      	movs	r1, #2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f002 fba0 	bl	80044cc <HAL_RCC_ClockConfig>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d92:	f000 fd45 	bl	8002820 <Error_Handler>
  }
}
 8001d96:	bf00      	nop
 8001d98:	3750      	adds	r7, #80	@ 0x50
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40007000 	.word	0x40007000

08001da8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dae:	463b      	mov	r3, r7
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dba:	4b28      	ldr	r3, [pc, #160]	@ (8001e5c <MX_ADC1_Init+0xb4>)
 8001dbc:	4a28      	ldr	r2, [pc, #160]	@ (8001e60 <MX_ADC1_Init+0xb8>)
 8001dbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001dc0:	4b26      	ldr	r3, [pc, #152]	@ (8001e5c <MX_ADC1_Init+0xb4>)
 8001dc2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001dc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001dc8:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <MX_ADC1_Init+0xb4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001dce:	4b23      	ldr	r3, [pc, #140]	@ (8001e5c <MX_ADC1_Init+0xb4>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001dd4:	4b21      	ldr	r3, [pc, #132]	@ (8001e5c <MX_ADC1_Init+0xb4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dda:	4b20      	ldr	r3, [pc, #128]	@ (8001e5c <MX_ADC1_Init+0xb4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001de2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <MX_ADC1_Init+0xb4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001de8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <MX_ADC1_Init+0xb4>)
 8001dea:	4a1e      	ldr	r2, [pc, #120]	@ (8001e64 <MX_ADC1_Init+0xbc>)
 8001dec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dee:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <MX_ADC1_Init+0xb4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001df4:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <MX_ADC1_Init+0xb4>)
 8001df6:	2202      	movs	r2, #2
 8001df8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dfa:	4b18      	ldr	r3, [pc, #96]	@ (8001e5c <MX_ADC1_Init+0xb4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e02:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <MX_ADC1_Init+0xb4>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e08:	4814      	ldr	r0, [pc, #80]	@ (8001e5c <MX_ADC1_Init+0xb4>)
 8001e0a:	f001 f8fd 	bl	8003008 <HAL_ADC_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e14:	f000 fd04 	bl	8002820 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001e20:	2304      	movs	r3, #4
 8001e22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e24:	463b      	mov	r3, r7
 8001e26:	4619      	mov	r1, r3
 8001e28:	480c      	ldr	r0, [pc, #48]	@ (8001e5c <MX_ADC1_Init+0xb4>)
 8001e2a:	f001 fb21 	bl	8003470 <HAL_ADC_ConfigChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e34:	f000 fcf4 	bl	8002820 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e40:	463b      	mov	r3, r7
 8001e42:	4619      	mov	r1, r3
 8001e44:	4805      	ldr	r0, [pc, #20]	@ (8001e5c <MX_ADC1_Init+0xb4>)
 8001e46:	f001 fb13 	bl	8003470 <HAL_ADC_ConfigChannel>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001e50:	f000 fce6 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000a48 	.word	0x20000a48
 8001e60:	40012000 	.word	0x40012000
 8001e64:	0f000001 	.word	0x0f000001

08001e68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b096      	sub	sp, #88	@ 0x58
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e6e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	611a      	str	r2, [r3, #16]
 8001e96:	615a      	str	r2, [r3, #20]
 8001e98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f006 fac7 	bl	8008434 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fa0 <MX_TIM1_Init+0x138>)
 8001ea8:	4a3e      	ldr	r2, [pc, #248]	@ (8001fa4 <MX_TIM1_Init+0x13c>)
 8001eaa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001eac:	4b3c      	ldr	r3, [pc, #240]	@ (8001fa0 <MX_TIM1_Init+0x138>)
 8001eae:	2253      	movs	r2, #83	@ 0x53
 8001eb0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa0 <MX_TIM1_Init+0x138>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001eb8:	4b39      	ldr	r3, [pc, #228]	@ (8001fa0 <MX_TIM1_Init+0x138>)
 8001eba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ebe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec0:	4b37      	ldr	r3, [pc, #220]	@ (8001fa0 <MX_TIM1_Init+0x138>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ec6:	4b36      	ldr	r3, [pc, #216]	@ (8001fa0 <MX_TIM1_Init+0x138>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ecc:	4b34      	ldr	r3, [pc, #208]	@ (8001fa0 <MX_TIM1_Init+0x138>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ed2:	4833      	ldr	r0, [pc, #204]	@ (8001fa0 <MX_TIM1_Init+0x138>)
 8001ed4:	f002 fd1a 	bl	800490c <HAL_TIM_Base_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001ede:	f000 fc9f 	bl	8002820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ee8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001eec:	4619      	mov	r1, r3
 8001eee:	482c      	ldr	r0, [pc, #176]	@ (8001fa0 <MX_TIM1_Init+0x138>)
 8001ef0:	f003 f87a 	bl	8004fe8 <HAL_TIM_ConfigClockSource>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001efa:	f000 fc91 	bl	8002820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001efe:	4828      	ldr	r0, [pc, #160]	@ (8001fa0 <MX_TIM1_Init+0x138>)
 8001f00:	f002 fdb6 	bl	8004a70 <HAL_TIM_PWM_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001f0a:	f000 fc89 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f16:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4820      	ldr	r0, [pc, #128]	@ (8001fa0 <MX_TIM1_Init+0x138>)
 8001f1e:	f003 fc25 	bl	800576c <HAL_TIMEx_MasterConfigSynchronization>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f28:	f000 fc7a 	bl	8002820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f2c:	2360      	movs	r3, #96	@ 0x60
 8001f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f44:	2300      	movs	r3, #0
 8001f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4813      	ldr	r0, [pc, #76]	@ (8001fa0 <MX_TIM1_Init+0x138>)
 8001f52:	f002 ff87 	bl	8004e64 <HAL_TIM_PWM_ConfigChannel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001f5c:	f000 fc60 	bl	8002820 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	4619      	mov	r1, r3
 8001f82:	4807      	ldr	r0, [pc, #28]	@ (8001fa0 <MX_TIM1_Init+0x138>)
 8001f84:	f003 fc60 	bl	8005848 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001f8e:	f000 fc47 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f92:	4803      	ldr	r0, [pc, #12]	@ (8001fa0 <MX_TIM1_Init+0x138>)
 8001f94:	f000 fd1a 	bl	80029cc <HAL_TIM_MspPostInit>

}
 8001f98:	bf00      	nop
 8001f9a:	3758      	adds	r7, #88	@ 0x58
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000a90 	.word	0x20000a90
 8001fa4:	40010000 	.word	0x40010000

08001fa8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08e      	sub	sp, #56	@ 0x38
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fbc:	f107 0320 	add.w	r3, r7, #32
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
 8001fd4:	615a      	str	r2, [r3, #20]
 8001fd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800208c <MX_TIM3_Init+0xe4>)
 8001fda:	4a2d      	ldr	r2, [pc, #180]	@ (8002090 <MX_TIM3_Init+0xe8>)
 8001fdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001fde:	4b2b      	ldr	r3, [pc, #172]	@ (800208c <MX_TIM3_Init+0xe4>)
 8001fe0:	2253      	movs	r2, #83	@ 0x53
 8001fe2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe4:	4b29      	ldr	r3, [pc, #164]	@ (800208c <MX_TIM3_Init+0xe4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001fea:	4b28      	ldr	r3, [pc, #160]	@ (800208c <MX_TIM3_Init+0xe4>)
 8001fec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ff0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff2:	4b26      	ldr	r3, [pc, #152]	@ (800208c <MX_TIM3_Init+0xe4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ff8:	4b24      	ldr	r3, [pc, #144]	@ (800208c <MX_TIM3_Init+0xe4>)
 8001ffa:	2280      	movs	r2, #128	@ 0x80
 8001ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ffe:	4823      	ldr	r0, [pc, #140]	@ (800208c <MX_TIM3_Init+0xe4>)
 8002000:	f002 fc84 	bl	800490c <HAL_TIM_Base_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800200a:	f000 fc09 	bl	8002820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800200e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002012:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002014:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002018:	4619      	mov	r1, r3
 800201a:	481c      	ldr	r0, [pc, #112]	@ (800208c <MX_TIM3_Init+0xe4>)
 800201c:	f002 ffe4 	bl	8004fe8 <HAL_TIM_ConfigClockSource>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002026:	f000 fbfb 	bl	8002820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800202a:	4818      	ldr	r0, [pc, #96]	@ (800208c <MX_TIM3_Init+0xe4>)
 800202c:	f002 fd20 	bl	8004a70 <HAL_TIM_PWM_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002036:	f000 fbf3 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002042:	f107 0320 	add.w	r3, r7, #32
 8002046:	4619      	mov	r1, r3
 8002048:	4810      	ldr	r0, [pc, #64]	@ (800208c <MX_TIM3_Init+0xe4>)
 800204a:	f003 fb8f 	bl	800576c <HAL_TIMEx_MasterConfigSynchronization>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002054:	f000 fbe4 	bl	8002820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002058:	2360      	movs	r3, #96	@ 0x60
 800205a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	2200      	movs	r2, #0
 800206c:	4619      	mov	r1, r3
 800206e:	4807      	ldr	r0, [pc, #28]	@ (800208c <MX_TIM3_Init+0xe4>)
 8002070:	f002 fef8 	bl	8004e64 <HAL_TIM_PWM_ConfigChannel>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800207a:	f000 fbd1 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800207e:	4803      	ldr	r0, [pc, #12]	@ (800208c <MX_TIM3_Init+0xe4>)
 8002080:	f000 fca4 	bl	80029cc <HAL_TIM_MspPostInit>

}
 8002084:	bf00      	nop
 8002086:	3738      	adds	r7, #56	@ 0x38
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000ad8 	.word	0x20000ad8
 8002090:	40000400 	.word	0x40000400

08002094 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08e      	sub	sp, #56	@ 0x38
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800209a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a8:	f107 0320 	add.w	r3, r7, #32
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
 80020c0:	615a      	str	r2, [r3, #20]
 80020c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002178 <MX_TIM4_Init+0xe4>)
 80020c6:	4a2d      	ldr	r2, [pc, #180]	@ (800217c <MX_TIM4_Init+0xe8>)
 80020c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80020ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002178 <MX_TIM4_Init+0xe4>)
 80020cc:	2253      	movs	r2, #83	@ 0x53
 80020ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d0:	4b29      	ldr	r3, [pc, #164]	@ (8002178 <MX_TIM4_Init+0xe4>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80020d6:	4b28      	ldr	r3, [pc, #160]	@ (8002178 <MX_TIM4_Init+0xe4>)
 80020d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020de:	4b26      	ldr	r3, [pc, #152]	@ (8002178 <MX_TIM4_Init+0xe4>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020e4:	4b24      	ldr	r3, [pc, #144]	@ (8002178 <MX_TIM4_Init+0xe4>)
 80020e6:	2280      	movs	r2, #128	@ 0x80
 80020e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80020ea:	4823      	ldr	r0, [pc, #140]	@ (8002178 <MX_TIM4_Init+0xe4>)
 80020ec:	f002 fc0e 	bl	800490c <HAL_TIM_Base_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80020f6:	f000 fb93 	bl	8002820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002100:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002104:	4619      	mov	r1, r3
 8002106:	481c      	ldr	r0, [pc, #112]	@ (8002178 <MX_TIM4_Init+0xe4>)
 8002108:	f002 ff6e 	bl	8004fe8 <HAL_TIM_ConfigClockSource>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002112:	f000 fb85 	bl	8002820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002116:	4818      	ldr	r0, [pc, #96]	@ (8002178 <MX_TIM4_Init+0xe4>)
 8002118:	f002 fcaa 	bl	8004a70 <HAL_TIM_PWM_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002122:	f000 fb7d 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800212e:	f107 0320 	add.w	r3, r7, #32
 8002132:	4619      	mov	r1, r3
 8002134:	4810      	ldr	r0, [pc, #64]	@ (8002178 <MX_TIM4_Init+0xe4>)
 8002136:	f003 fb19 	bl	800576c <HAL_TIMEx_MasterConfigSynchronization>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002140:	f000 fb6e 	bl	8002820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002144:	2360      	movs	r3, #96	@ 0x60
 8002146:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	2200      	movs	r2, #0
 8002158:	4619      	mov	r1, r3
 800215a:	4807      	ldr	r0, [pc, #28]	@ (8002178 <MX_TIM4_Init+0xe4>)
 800215c:	f002 fe82 	bl	8004e64 <HAL_TIM_PWM_ConfigChannel>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002166:	f000 fb5b 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800216a:	4803      	ldr	r0, [pc, #12]	@ (8002178 <MX_TIM4_Init+0xe4>)
 800216c:	f000 fc2e 	bl	80029cc <HAL_TIM_MspPostInit>

}
 8002170:	bf00      	nop
 8002172:	3738      	adds	r7, #56	@ 0x38
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000b20 	.word	0x20000b20
 800217c:	40000800 	.word	0x40000800

08002180 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002184:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <MX_USART2_UART_Init+0x4c>)
 8002186:	4a12      	ldr	r2, [pc, #72]	@ (80021d0 <MX_USART2_UART_Init+0x50>)
 8002188:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800218a:	4b10      	ldr	r3, [pc, #64]	@ (80021cc <MX_USART2_UART_Init+0x4c>)
 800218c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002190:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002192:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <MX_USART2_UART_Init+0x4c>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002198:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <MX_USART2_UART_Init+0x4c>)
 800219a:	2200      	movs	r2, #0
 800219c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800219e:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <MX_USART2_UART_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021a4:	4b09      	ldr	r3, [pc, #36]	@ (80021cc <MX_USART2_UART_Init+0x4c>)
 80021a6:	220c      	movs	r2, #12
 80021a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021aa:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <MX_USART2_UART_Init+0x4c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b0:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <MX_USART2_UART_Init+0x4c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021b6:	4805      	ldr	r0, [pc, #20]	@ (80021cc <MX_USART2_UART_Init+0x4c>)
 80021b8:	f003 fbac 	bl	8005914 <HAL_UART_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021c2:	f000 fb2d 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000b68 	.word	0x20000b68
 80021d0:	40004400 	.word	0x40004400

080021d4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021d8:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <MX_USART6_UART_Init+0x4c>)
 80021da:	4a12      	ldr	r2, [pc, #72]	@ (8002224 <MX_USART6_UART_Init+0x50>)
 80021dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 80021de:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <MX_USART6_UART_Init+0x4c>)
 80021e0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80021e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <MX_USART6_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <MX_USART6_UART_Init+0x4c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <MX_USART6_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80021f8:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <MX_USART6_UART_Init+0x4c>)
 80021fa:	220c      	movs	r2, #12
 80021fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fe:	4b08      	ldr	r3, [pc, #32]	@ (8002220 <MX_USART6_UART_Init+0x4c>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <MX_USART6_UART_Init+0x4c>)
 8002206:	2200      	movs	r2, #0
 8002208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800220a:	4805      	ldr	r0, [pc, #20]	@ (8002220 <MX_USART6_UART_Init+0x4c>)
 800220c:	f003 fb82 	bl	8005914 <HAL_UART_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002216:	f000 fb03 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000bb0 	.word	0x20000bb0
 8002224:	40011400 	.word	0x40011400

08002228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	@ 0x28
 800222c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	60da      	str	r2, [r3, #12]
 800223c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	4b46      	ldr	r3, [pc, #280]	@ (800235c <MX_GPIO_Init+0x134>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	4a45      	ldr	r2, [pc, #276]	@ (800235c <MX_GPIO_Init+0x134>)
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	6313      	str	r3, [r2, #48]	@ 0x30
 800224e:	4b43      	ldr	r3, [pc, #268]	@ (800235c <MX_GPIO_Init+0x134>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b3f      	ldr	r3, [pc, #252]	@ (800235c <MX_GPIO_Init+0x134>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a3e      	ldr	r2, [pc, #248]	@ (800235c <MX_GPIO_Init+0x134>)
 8002264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b3c      	ldr	r3, [pc, #240]	@ (800235c <MX_GPIO_Init+0x134>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	4b38      	ldr	r3, [pc, #224]	@ (800235c <MX_GPIO_Init+0x134>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a37      	ldr	r2, [pc, #220]	@ (800235c <MX_GPIO_Init+0x134>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b35      	ldr	r3, [pc, #212]	@ (800235c <MX_GPIO_Init+0x134>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	4b31      	ldr	r3, [pc, #196]	@ (800235c <MX_GPIO_Init+0x134>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	4a30      	ldr	r2, [pc, #192]	@ (800235c <MX_GPIO_Init+0x134>)
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a2:	4b2e      	ldr	r3, [pc, #184]	@ (800235c <MX_GPIO_Init+0x134>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2120      	movs	r1, #32
 80022b2:	482b      	ldr	r0, [pc, #172]	@ (8002360 <MX_GPIO_Init+0x138>)
 80022b4:	f001 fe54 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80022b8:	2200      	movs	r2, #0
 80022ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022be:	4829      	ldr	r0, [pc, #164]	@ (8002364 <MX_GPIO_Init+0x13c>)
 80022c0:	f001 fe4e 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80022c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022ca:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80022ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	4619      	mov	r1, r3
 80022da:	4822      	ldr	r0, [pc, #136]	@ (8002364 <MX_GPIO_Init+0x13c>)
 80022dc:	f001 fca4 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0_EXTI0_BUTTON_Pin */
  GPIO_InitStruct.Pin = PC0_EXTI0_BUTTON_Pin;
 80022e0:	2301      	movs	r3, #1
 80022e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PC0_EXTI0_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80022ee:	f107 0314 	add.w	r3, r7, #20
 80022f2:	4619      	mov	r1, r3
 80022f4:	481b      	ldr	r0, [pc, #108]	@ (8002364 <MX_GPIO_Init+0x13c>)
 80022f6:	f001 fc97 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80022fa:	2320      	movs	r3, #32
 80022fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fe:	2301      	movs	r3, #1
 8002300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4619      	mov	r1, r3
 8002310:	4813      	ldr	r0, [pc, #76]	@ (8002360 <MX_GPIO_Init+0x138>)
 8002312:	f001 fc89 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8002316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800231a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231c:	2301      	movs	r3, #1
 800231e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	2300      	movs	r3, #0
 8002326:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4619      	mov	r1, r3
 800232e:	480d      	ldr	r0, [pc, #52]	@ (8002364 <MX_GPIO_Init+0x13c>)
 8002330:	f001 fc7a 	bl	8003c28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	2100      	movs	r1, #0
 8002338:	2006      	movs	r0, #6
 800233a:	f001 fbac 	bl	8003a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800233e:	2006      	movs	r0, #6
 8002340:	f001 fbc5 	bl	8003ace <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002344:	2200      	movs	r2, #0
 8002346:	2100      	movs	r1, #0
 8002348:	2028      	movs	r0, #40	@ 0x28
 800234a:	f001 fba4 	bl	8003a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800234e:	2028      	movs	r0, #40	@ 0x28
 8002350:	f001 fbbd 	bl	8003ace <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002354:	bf00      	nop
 8002356:	3728      	adds	r7, #40	@ 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40023800 	.word	0x40023800
 8002360:	40020000 	.word	0x40020000
 8002364:	40020800 	.word	0x40020800

08002368 <esp_event>:
void MX_GPIO_LED_OFF(int pin)
{
    HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
}
void esp_event(char *recvBuf)
{
 8002368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236a:	b0d1      	sub	sp, #324	@ 0x144
 800236c:	af06      	add	r7, sp, #24
 800236e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002372:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002376:	6018      	str	r0, [r3, #0]
    int i = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    char *pToken;
    char *pArray[ARR_CNT] = {0};
 800237e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8002382:	2250      	movs	r2, #80	@ 0x50
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f006 f854 	bl	8008434 <memset>
    char sendBuf[200] = {0};
 800238c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002390:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002394:	4618      	mov	r0, r3
 8002396:	23c8      	movs	r3, #200	@ 0xc8
 8002398:	461a      	mov	r2, r3
 800239a:	2100      	movs	r1, #0
 800239c:	f006 f84a 	bl	8008434 <memset>

    strBuff[strlen(recvBuf) - 1] = '\0'; //'\n' cut
 80023a0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80023a4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	f7fd ff79 	bl	80002a0 <strlen>
 80023ae:	4603      	mov	r3, r0
 80023b0:	3b01      	subs	r3, #1
 80023b2:	4aaa      	ldr	r2, [pc, #680]	@ (800265c <esp_event+0x2f4>)
 80023b4:	2100      	movs	r1, #0
 80023b6:	54d1      	strb	r1, [r2, r3]
    printf("\r\nDebug recv : %s\r\n", recvBuf);
 80023b8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80023bc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80023c0:	6819      	ldr	r1, [r3, #0]
 80023c2:	48a7      	ldr	r0, [pc, #668]	@ (8002660 <esp_event+0x2f8>)
 80023c4:	f005 fec4 	bl	8008150 <iprintf>

    pToken = strtok(recvBuf, "[@]");
 80023c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80023cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80023d0:	49a4      	ldr	r1, [pc, #656]	@ (8002664 <esp_event+0x2fc>)
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	f006 f856 	bl	8008484 <strtok>
 80023d8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
    while (pToken != NULL)
 80023dc:	e018      	b.n	8002410 <esp_event+0xa8>
    {
        pArray[i] = pToken;
 80023de:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80023e8:	443b      	add	r3, r7
 80023ea:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80023ee:	f843 2c58 	str.w	r2, [r3, #-88]
        if (++i >= ARR_CNT)
 80023f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80023f6:	3301      	adds	r3, #1
 80023f8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80023fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002400:	2b13      	cmp	r3, #19
 8002402:	dc0a      	bgt.n	800241a <esp_event+0xb2>
            break;
        pToken = strtok(NULL, "[@]");
 8002404:	4997      	ldr	r1, [pc, #604]	@ (8002664 <esp_event+0x2fc>)
 8002406:	2000      	movs	r0, #0
 8002408:	f006 f83c 	bl	8008484 <strtok>
 800240c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
    while (pToken != NULL)
 8002410:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1e2      	bne.n	80023de <esp_event+0x76>
 8002418:	e000      	b.n	800241c <esp_event+0xb4>
            break;
 800241a:	bf00      	nop
    }

    if (!strcmp(pArray[1], "ALLSTOP"))
 800241c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002420:	4991      	ldr	r1, [pc, #580]	@ (8002668 <esp_event+0x300>)
 8002422:	4618      	mov	r0, r3
 8002424:	f7fd fedc 	bl	80001e0 <strcmp>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d141      	bne.n	80024b2 <esp_event+0x14a>
    {
        if (!strcmp(pArray[2], "ON"))
 800242e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002432:	498e      	ldr	r1, [pc, #568]	@ (800266c <esp_event+0x304>)
 8002434:	4618      	mov	r0, r3
 8002436:	f7fd fed3 	bl	80001e0 <strcmp>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d116      	bne.n	800246e <esp_event+0x106>
        {
            // 모든 장치 정지 명령 내리기(모든 플래그 True로)
        	fanControl(0);
 8002440:	2000      	movs	r0, #0
 8002442:	f000 f97d 	bl	8002740 <fanControl>
        	ledControl(0);
 8002446:	2000      	movs	r0, #0
 8002448:	f000 f98a 	bl	8002760 <ledControl>
        	lockFlag = 1;
 800244c:	4b88      	ldr	r3, [pc, #544]	@ (8002670 <esp_event+0x308>)
 800244e:	2201      	movs	r2, #1
 8002450:	601a      	str	r2, [r3, #0]
        	sprintf(sendBuf, "[%s]%s@%s\n", pArray[0], pArray[1], pArray[2]);
 8002452:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002456:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 800245a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800245e:	f107 0008 	add.w	r0, r7, #8
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	460b      	mov	r3, r1
 8002466:	4983      	ldr	r1, [pc, #524]	@ (8002674 <esp_event+0x30c>)
 8002468:	f005 feea 	bl	8008240 <siprintf>
 800246c:	e0e5      	b.n	800263a <esp_event+0x2d2>
        }
        else if (!strcmp(pArray[2], "OFF"))
 800246e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002472:	4981      	ldr	r1, [pc, #516]	@ (8002678 <esp_event+0x310>)
 8002474:	4618      	mov	r0, r3
 8002476:	f7fd feb3 	bl	80001e0 <strcmp>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	f040 80dc 	bne.w	800263a <esp_event+0x2d2>
        {
            // 모든 장치 정지 명령 취소(모든 플래그 false로)
        	fanControl(500);
 8002482:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002486:	f000 f95b 	bl	8002740 <fanControl>
        	ledControl(50);
 800248a:	2032      	movs	r0, #50	@ 0x32
 800248c:	f000 f968 	bl	8002760 <ledControl>
        	lockFlag = 0;
 8002490:	4b77      	ldr	r3, [pc, #476]	@ (8002670 <esp_event+0x308>)
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
        	sprintf(sendBuf, "[%s]%s@%s\n", pArray[0], pArray[1], pArray[2]);
 8002496:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800249a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 800249e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024a2:	f107 0008 	add.w	r0, r7, #8
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	460b      	mov	r3, r1
 80024aa:	4972      	ldr	r1, [pc, #456]	@ (8002674 <esp_event+0x30c>)
 80024ac:	f005 fec8 	bl	8008240 <siprintf>
 80024b0:	e0c3      	b.n	800263a <esp_event+0x2d2>
        }
    }
    else if (!strcmp(pArray[1], "STATE"))
 80024b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024b6:	4971      	ldr	r1, [pc, #452]	@ (800267c <esp_event+0x314>)
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fd fe91 	bl	80001e0 <strcmp>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d11e      	bne.n	8002502 <esp_event+0x19a>
    {
        // 현재 매장의 상태 전송하기
        sprintf(sendBuf, "[%s]%s@%s@%d@%d@%d@%d@%d\n", pArray[0], pArray[1], temp, humi, ledState, lockFlag, customerCount, fanSpeed);
 80024c4:	f8d7 60d0 	ldr.w	r6, [r7, #208]	@ 0xd0
 80024c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024cc:	603b      	str	r3, [r7, #0]
 80024ce:	4b6c      	ldr	r3, [pc, #432]	@ (8002680 <esp_event+0x318>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a6c      	ldr	r2, [pc, #432]	@ (8002684 <esp_event+0x31c>)
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	4966      	ldr	r1, [pc, #408]	@ (8002670 <esp_event+0x308>)
 80024d8:	6809      	ldr	r1, [r1, #0]
 80024da:	486b      	ldr	r0, [pc, #428]	@ (8002688 <esp_event+0x320>)
 80024dc:	6800      	ldr	r0, [r0, #0]
 80024de:	4c6b      	ldr	r4, [pc, #428]	@ (800268c <esp_event+0x324>)
 80024e0:	6824      	ldr	r4, [r4, #0]
 80024e2:	f107 0508 	add.w	r5, r7, #8
 80024e6:	9405      	str	r4, [sp, #20]
 80024e8:	9004      	str	r0, [sp, #16]
 80024ea:	9103      	str	r1, [sp, #12]
 80024ec:	9202      	str	r2, [sp, #8]
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	4b67      	ldr	r3, [pc, #412]	@ (8002690 <esp_event+0x328>)
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4632      	mov	r2, r6
 80024f8:	4966      	ldr	r1, [pc, #408]	@ (8002694 <esp_event+0x32c>)
 80024fa:	4628      	mov	r0, r5
 80024fc:	f005 fea0 	bl	8008240 <siprintf>
 8002500:	e09b      	b.n	800263a <esp_event+0x2d2>
    }
    else if (!strcmp(pArray[1], "FAN")) // 팬 회전수 0~1000
 8002502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002506:	4964      	ldr	r1, [pc, #400]	@ (8002698 <esp_event+0x330>)
 8002508:	4618      	mov	r0, r3
 800250a:	f7fd fe69 	bl	80001e0 <strcmp>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d11a      	bne.n	800254a <esp_event+0x1e2>
    {
        fanSpeed = atoi(pArray[2]);
 8002514:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002518:	4618      	mov	r0, r3
 800251a:	f004 fa6a 	bl	80069f2 <atoi>
 800251e:	4603      	mov	r3, r0
 8002520:	4a5a      	ldr	r2, [pc, #360]	@ (800268c <esp_event+0x324>)
 8002522:	6013      	str	r3, [r2, #0]
        fanControl(fanSpeed);
 8002524:	4b59      	ldr	r3, [pc, #356]	@ (800268c <esp_event+0x324>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f000 f909 	bl	8002740 <fanControl>
        sprintf(sendBuf, "[%s]%s@%d\n", pArray[0], pArray[1], fanSpeed);
 800252e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002532:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8002536:	4b55      	ldr	r3, [pc, #340]	@ (800268c <esp_event+0x324>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f107 0008 	add.w	r0, r7, #8
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	460b      	mov	r3, r1
 8002542:	4956      	ldr	r1, [pc, #344]	@ (800269c <esp_event+0x334>)
 8002544:	f005 fe7c 	bl	8008240 <siprintf>
 8002548:	e077      	b.n	800263a <esp_event+0x2d2>
    }
    else if (!strcmp(pArray[1], "DHTSTATE")) // 온습도 보내기
 800254a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800254e:	4954      	ldr	r1, [pc, #336]	@ (80026a0 <esp_event+0x338>)
 8002550:	4618      	mov	r0, r3
 8002552:	f7fd fe45 	bl	80001e0 <strcmp>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10f      	bne.n	800257c <esp_event+0x214>
    {
        sprintf(sendBuf, "[%s]%s@%s@%d\n", pArray[0], pArray[1], temp, humi);
 800255c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002560:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8002564:	4b46      	ldr	r3, [pc, #280]	@ (8002680 <esp_event+0x318>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f107 0008 	add.w	r0, r7, #8
 800256c:	9301      	str	r3, [sp, #4]
 800256e:	4b48      	ldr	r3, [pc, #288]	@ (8002690 <esp_event+0x328>)
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	460b      	mov	r3, r1
 8002574:	494b      	ldr	r1, [pc, #300]	@ (80026a4 <esp_event+0x33c>)
 8002576:	f005 fe63 	bl	8008240 <siprintf>
 800257a:	e05e      	b.n	800263a <esp_event+0x2d2>
    }
    else if (!strcmp(pArray[1], "LED")) //[매장명]LED@pArray[2]or[State]@
 800257c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002580:	4949      	ldr	r1, [pc, #292]	@ (80026a8 <esp_event+0x340>)
 8002582:	4618      	mov	r0, r3
 8002584:	f7fd fe2c 	bl	80001e0 <strcmp>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d135      	bne.n	80025fa <esp_event+0x292>
    {
        if (!strcmp(pArray[2], "STATE"))
 800258e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002592:	493a      	ldr	r1, [pc, #232]	@ (800267c <esp_event+0x314>)
 8002594:	4618      	mov	r0, r3
 8002596:	f7fd fe23 	bl	80001e0 <strcmp>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d111      	bne.n	80025c4 <esp_event+0x25c>
        {
            sprintf(sendBuf, "[%s]%s@%s@%d\n", pArray[0], pArray[1], pArray[2], ledState);
 80025a0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80025a4:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 80025a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80025ac:	4a35      	ldr	r2, [pc, #212]	@ (8002684 <esp_event+0x31c>)
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	f107 0008 	add.w	r0, r7, #8
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	4623      	mov	r3, r4
 80025ba:	460a      	mov	r2, r1
 80025bc:	4939      	ldr	r1, [pc, #228]	@ (80026a4 <esp_event+0x33c>)
 80025be:	f005 fe3f 	bl	8008240 <siprintf>
 80025c2:	e03a      	b.n	800263a <esp_event+0x2d2>
        }
        else
        {
        	ledState = atoi(pArray[2]);
 80025c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80025c8:	4618      	mov	r0, r3
 80025ca:	f004 fa12 	bl	80069f2 <atoi>
 80025ce:	4603      	mov	r3, r0
 80025d0:	4a2c      	ldr	r2, [pc, #176]	@ (8002684 <esp_event+0x31c>)
 80025d2:	6013      	str	r3, [r2, #0]
            ledControl(ledState);
 80025d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002684 <esp_event+0x31c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 f8c1 	bl	8002760 <ledControl>
            sprintf(sendBuf, "[%s]%s@%d\n", pArray[0], pArray[1], ledState);
 80025de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80025e2:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80025e6:	4b27      	ldr	r3, [pc, #156]	@ (8002684 <esp_event+0x31c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f107 0008 	add.w	r0, r7, #8
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	460b      	mov	r3, r1
 80025f2:	492a      	ldr	r1, [pc, #168]	@ (800269c <esp_event+0x334>)
 80025f4:	f005 fe24 	bl	8008240 <siprintf>
 80025f8:	e01f      	b.n	800263a <esp_event+0x2d2>
        }
    }
    else if (!strncmp(pArray[1], " New conn", 8))
 80025fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025fe:	2208      	movs	r2, #8
 8002600:	492a      	ldr	r1, [pc, #168]	@ (80026ac <esp_event+0x344>)
 8002602:	4618      	mov	r0, r3
 8002604:	f005 ff2b 	bl	800845e <strncmp>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d108      	bne.n	8002620 <esp_event+0x2b8>
    {
        printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
 800260e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002612:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002616:	4619      	mov	r1, r3
 8002618:	4825      	ldr	r0, [pc, #148]	@ (80026b0 <esp_event+0x348>)
 800261a:	f005 fd99 	bl	8008150 <iprintf>
 800261e:	e00c      	b.n	800263a <esp_event+0x2d2>
    }
    else if (!strncmp(pArray[1], " Already log", 8))
 8002620:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002624:	2208      	movs	r2, #8
 8002626:	4923      	ldr	r1, [pc, #140]	@ (80026b4 <esp_event+0x34c>)
 8002628:	4618      	mov	r0, r3
 800262a:	f005 ff18 	bl	800845e <strncmp>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10e      	bne.n	8002652 <esp_event+0x2ea>
    {
        esp_client_conn();
 8002634:	f7fe ff92 	bl	800155c <esp_client_conn>
        return;
 8002638:	e00c      	b.n	8002654 <esp_event+0x2ec>
    }
    else
        return;

    esp_send_data(sendBuf);
 800263a:	f107 0308 	add.w	r3, r7, #8
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff f8b4 	bl	80017ac <esp_send_data>
    printf("Debug send : %s\r\n",sendBuf);
 8002644:	f107 0308 	add.w	r3, r7, #8
 8002648:	4619      	mov	r1, r3
 800264a:	481b      	ldr	r0, [pc, #108]	@ (80026b8 <esp_event+0x350>)
 800264c:	f005 fd80 	bl	8008150 <iprintf>
 8002650:	e000      	b.n	8002654 <esp_event+0x2ec>
        return;
 8002652:	bf00      	nop

}
 8002654:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8002658:	46bd      	mov	sp, r7
 800265a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800265c:	20000c38 	.word	0x20000c38
 8002660:	0800c0e4 	.word	0x0800c0e4
 8002664:	0800c0f8 	.word	0x0800c0f8
 8002668:	0800c0fc 	.word	0x0800c0fc
 800266c:	0800c104 	.word	0x0800c104
 8002670:	20000c2c 	.word	0x20000c2c
 8002674:	0800c108 	.word	0x0800c108
 8002678:	0800c114 	.word	0x0800c114
 800267c:	0800c118 	.word	0x0800c118
 8002680:	20000bfc 	.word	0x20000bfc
 8002684:	20000004 	.word	0x20000004
 8002688:	20000c0c 	.word	0x20000c0c
 800268c:	20000c10 	.word	0x20000c10
 8002690:	20000c00 	.word	0x20000c00
 8002694:	0800c120 	.word	0x0800c120
 8002698:	0800c13c 	.word	0x0800c13c
 800269c:	0800c140 	.word	0x0800c140
 80026a0:	0800c14c 	.word	0x0800c14c
 80026a4:	0800c158 	.word	0x0800c158
 80026a8:	0800c168 	.word	0x0800c168
 80026ac:	0800c16c 	.word	0x0800c16c
 80026b0:	0800c178 	.word	0x0800c178
 80026b4:	0800c18c 	.word	0x0800c18c
 80026b8:	0800c19c 	.word	0x0800c19c

080026bc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // 1ms 마다 호출
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
    static int tim3Cnt = 0;
    tim3Cnt++;
 80026c4:	4b0d      	ldr	r3, [pc, #52]	@ (80026fc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	3301      	adds	r3, #1
 80026ca:	4a0c      	ldr	r2, [pc, #48]	@ (80026fc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80026cc:	6013      	str	r3, [r2, #0]
    if (tim3Cnt >= 1000) // 1ms * 1000 = 1Sec
 80026ce:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026d6:	db0a      	blt.n	80026ee <HAL_TIM_PeriodElapsedCallback+0x32>
    {
        tim3Flag1Sec = 1;
 80026d8:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
        tim3Sec++;
 80026de:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3301      	adds	r3, #1
 80026e4:	4a07      	ldr	r2, [pc, #28]	@ (8002704 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026e6:	6013      	str	r3, [r2, #0]
        tim3Cnt = 0;
 80026e8:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
    }
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000c78 	.word	0x20000c78
 8002700:	20000000 	.word	0x20000000
 8002704:	20000bf8 	.word	0x20000bf8

08002708 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	69b9      	ldr	r1, [r7, #24]
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	1a8a      	subs	r2, r1, r2
 8002722:	fb03 f202 	mul.w	r2, r3, r2
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	1acb      	subs	r3, r1, r3
 800272c:	fb92 f2f3 	sdiv	r2, r2, r3
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	4413      	add	r3, r2
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <fanControl>:

void fanControl(int fanSpeed)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, fanSpeed);
 8002748:	4b04      	ldr	r3, [pc, #16]	@ (800275c <fanControl+0x1c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	20000b20 	.word	0x20000b20

08002760 <ledControl>:

void ledControl(int bright)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af02      	add	r7, sp, #8
 8002766:	6078      	str	r0, [r7, #4]
//	ledState = bright;
	if (bright > 100)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b64      	cmp	r3, #100	@ 0x64
 800276c:	dd01      	ble.n	8002772 <ledControl+0x12>
		bright = 100;
 800276e:	2364      	movs	r3, #100	@ 0x64
 8002770:	607b      	str	r3, [r7, #4]
	int realLedState = map(bright, 0, 100, 0, 1000); // 써지는 실제값
 8002772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	2300      	movs	r3, #0
 800277a:	2264      	movs	r2, #100	@ 0x64
 800277c:	2100      	movs	r1, #0
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ffc2 	bl	8002708 <map>
 8002784:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, realLedState);
 8002786:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <ledControl+0x38>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000a90 	.word	0x20000a90

0800279c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
    static int channel = 0;
    if (channel == 0)
 80027a4:	4b19      	ldr	r3, [pc, #100]	@ (800280c <HAL_ADC_ConvCpltCallback+0x70>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d112      	bne.n	80027d2 <HAL_ADC_ConvCpltCallback+0x36>
    {
        ADC1ConvertValue[channel] = HAL_ADC_GetValue(hadc);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fe3d 	bl	800342c <HAL_ADC_GetValue>
 80027b2:	4602      	mov	r2, r0
 80027b4:	4b15      	ldr	r3, [pc, #84]	@ (800280c <HAL_ADC_ConvCpltCallback+0x70>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	b291      	uxth	r1, r2
 80027ba:	4a15      	ldr	r2, [pc, #84]	@ (8002810 <HAL_ADC_ConvCpltCallback+0x74>)
 80027bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        outDoorSensor.sensorReadTime = HAL_GetTick();	//들어오고 나가는 사라 카운트를 하기 위함
 80027c0:	f000 fbf2 	bl	8002fa8 <HAL_GetTick>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4a13      	ldr	r2, [pc, #76]	@ (8002814 <HAL_ADC_ConvCpltCallback+0x78>)
 80027c8:	6053      	str	r3, [r2, #4]
        channel = 1;
 80027ca:	4b10      	ldr	r3, [pc, #64]	@ (800280c <HAL_ADC_ConvCpltCallback+0x70>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
        ADC1ConvertValue[channel] = HAL_ADC_GetValue(hadc);
        inDoorSensor.sensorReadTime = HAL_GetTick(); //들어오고 나가는 사라 카운트하기 위함.
        channel = 0;
        adcFlag = 1;
    }
}
 80027d0:	e018      	b.n	8002804 <HAL_ADC_ConvCpltCallback+0x68>
    else if (channel == 1)
 80027d2:	4b0e      	ldr	r3, [pc, #56]	@ (800280c <HAL_ADC_ConvCpltCallback+0x70>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d114      	bne.n	8002804 <HAL_ADC_ConvCpltCallback+0x68>
        ADC1ConvertValue[channel] = HAL_ADC_GetValue(hadc);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 fe26 	bl	800342c <HAL_ADC_GetValue>
 80027e0:	4602      	mov	r2, r0
 80027e2:	4b0a      	ldr	r3, [pc, #40]	@ (800280c <HAL_ADC_ConvCpltCallback+0x70>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	b291      	uxth	r1, r2
 80027e8:	4a09      	ldr	r2, [pc, #36]	@ (8002810 <HAL_ADC_ConvCpltCallback+0x74>)
 80027ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        inDoorSensor.sensorReadTime = HAL_GetTick(); //들어오고 나가는 사라 카운트하기 위함.
 80027ee:	f000 fbdb 	bl	8002fa8 <HAL_GetTick>
 80027f2:	4603      	mov	r3, r0
 80027f4:	4a08      	ldr	r2, [pc, #32]	@ (8002818 <HAL_ADC_ConvCpltCallback+0x7c>)
 80027f6:	6053      	str	r3, [r2, #4]
        channel = 0;
 80027f8:	4b04      	ldr	r3, [pc, #16]	@ (800280c <HAL_ADC_ConvCpltCallback+0x70>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
        adcFlag = 1;
 80027fe:	4b07      	ldr	r3, [pc, #28]	@ (800281c <HAL_ADC_ConvCpltCallback+0x80>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000c7c 	.word	0x20000c7c
 8002810:	20000c14 	.word	0x20000c14
 8002814:	20000c1c 	.word	0x20000c1c
 8002818:	20000c24 	.word	0x20000c24
 800281c:	20000c18 	.word	0x20000c18

08002820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002824:	b672      	cpsid	i
}
 8002826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <Error_Handler+0x8>

0800282c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <HAL_MspInit+0x4c>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283a:	4a0f      	ldr	r2, [pc, #60]	@ (8002878 <HAL_MspInit+0x4c>)
 800283c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002840:	6453      	str	r3, [r2, #68]	@ 0x44
 8002842:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <HAL_MspInit+0x4c>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HAL_MspInit+0x4c>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	4a08      	ldr	r2, [pc, #32]	@ (8002878 <HAL_MspInit+0x4c>)
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800285c:	6413      	str	r3, [r2, #64]	@ 0x40
 800285e:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <HAL_MspInit+0x4c>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800286a:	2007      	movs	r0, #7
 800286c:	f001 f908 	bl	8003a80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40023800 	.word	0x40023800

0800287c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	@ 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a1b      	ldr	r2, [pc, #108]	@ (8002908 <HAL_ADC_MspInit+0x8c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d12f      	bne.n	80028fe <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	4b1a      	ldr	r3, [pc, #104]	@ (800290c <HAL_ADC_MspInit+0x90>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a6:	4a19      	ldr	r2, [pc, #100]	@ (800290c <HAL_ADC_MspInit+0x90>)
 80028a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ae:	4b17      	ldr	r3, [pc, #92]	@ (800290c <HAL_ADC_MspInit+0x90>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b13      	ldr	r3, [pc, #76]	@ (800290c <HAL_ADC_MspInit+0x90>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	4a12      	ldr	r2, [pc, #72]	@ (800290c <HAL_ADC_MspInit+0x90>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ca:	4b10      	ldr	r3, [pc, #64]	@ (800290c <HAL_ADC_MspInit+0x90>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028d6:	2303      	movs	r3, #3
 80028d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028da:	2303      	movs	r3, #3
 80028dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e2:	f107 0314 	add.w	r3, r7, #20
 80028e6:	4619      	mov	r1, r3
 80028e8:	4809      	ldr	r0, [pc, #36]	@ (8002910 <HAL_ADC_MspInit+0x94>)
 80028ea:	f001 f99d 	bl	8003c28 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2100      	movs	r1, #0
 80028f2:	2012      	movs	r0, #18
 80028f4:	f001 f8cf 	bl	8003a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80028f8:	2012      	movs	r0, #18
 80028fa:	f001 f8e8 	bl	8003ace <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80028fe:	bf00      	nop
 8002900:	3728      	adds	r7, #40	@ 0x28
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40012000 	.word	0x40012000
 800290c:	40023800 	.word	0x40023800
 8002910:	40020000 	.word	0x40020000

08002914 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a26      	ldr	r2, [pc, #152]	@ (80029bc <HAL_TIM_Base_MspInit+0xa8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10e      	bne.n	8002944 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	4b25      	ldr	r3, [pc, #148]	@ (80029c0 <HAL_TIM_Base_MspInit+0xac>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292e:	4a24      	ldr	r2, [pc, #144]	@ (80029c0 <HAL_TIM_Base_MspInit+0xac>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6453      	str	r3, [r2, #68]	@ 0x44
 8002936:	4b22      	ldr	r3, [pc, #136]	@ (80029c0 <HAL_TIM_Base_MspInit+0xac>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002942:	e036      	b.n	80029b2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a1e      	ldr	r2, [pc, #120]	@ (80029c4 <HAL_TIM_Base_MspInit+0xb0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d116      	bne.n	800297c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	4b1b      	ldr	r3, [pc, #108]	@ (80029c0 <HAL_TIM_Base_MspInit+0xac>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	4a1a      	ldr	r2, [pc, #104]	@ (80029c0 <HAL_TIM_Base_MspInit+0xac>)
 8002958:	f043 0302 	orr.w	r3, r3, #2
 800295c:	6413      	str	r3, [r2, #64]	@ 0x40
 800295e:	4b18      	ldr	r3, [pc, #96]	@ (80029c0 <HAL_TIM_Base_MspInit+0xac>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	201d      	movs	r0, #29
 8002970:	f001 f891 	bl	8003a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002974:	201d      	movs	r0, #29
 8002976:	f001 f8aa 	bl	8003ace <HAL_NVIC_EnableIRQ>
}
 800297a:	e01a      	b.n	80029b2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a11      	ldr	r2, [pc, #68]	@ (80029c8 <HAL_TIM_Base_MspInit+0xb4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d115      	bne.n	80029b2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b0d      	ldr	r3, [pc, #52]	@ (80029c0 <HAL_TIM_Base_MspInit+0xac>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	4a0c      	ldr	r2, [pc, #48]	@ (80029c0 <HAL_TIM_Base_MspInit+0xac>)
 8002990:	f043 0304 	orr.w	r3, r3, #4
 8002994:	6413      	str	r3, [r2, #64]	@ 0x40
 8002996:	4b0a      	ldr	r3, [pc, #40]	@ (80029c0 <HAL_TIM_Base_MspInit+0xac>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2100      	movs	r1, #0
 80029a6:	201e      	movs	r0, #30
 80029a8:	f001 f875 	bl	8003a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029ac:	201e      	movs	r0, #30
 80029ae:	f001 f88e 	bl	8003ace <HAL_NVIC_EnableIRQ>
}
 80029b2:	bf00      	nop
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40010000 	.word	0x40010000
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40000800 	.word	0x40000800

080029cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	@ 0x28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a36      	ldr	r2, [pc, #216]	@ (8002ac4 <HAL_TIM_MspPostInit+0xf8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d11f      	bne.n	8002a2e <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	4b35      	ldr	r3, [pc, #212]	@ (8002ac8 <HAL_TIM_MspPostInit+0xfc>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	4a34      	ldr	r2, [pc, #208]	@ (8002ac8 <HAL_TIM_MspPostInit+0xfc>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fe:	4b32      	ldr	r3, [pc, #200]	@ (8002ac8 <HAL_TIM_MspPostInit+0xfc>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	2302      	movs	r3, #2
 8002a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	4619      	mov	r1, r3
 8002a26:	4829      	ldr	r0, [pc, #164]	@ (8002acc <HAL_TIM_MspPostInit+0x100>)
 8002a28:	f001 f8fe 	bl	8003c28 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a2c:	e046      	b.n	8002abc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a27      	ldr	r2, [pc, #156]	@ (8002ad0 <HAL_TIM_MspPostInit+0x104>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d11e      	bne.n	8002a76 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	4b22      	ldr	r3, [pc, #136]	@ (8002ac8 <HAL_TIM_MspPostInit+0xfc>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a40:	4a21      	ldr	r2, [pc, #132]	@ (8002ac8 <HAL_TIM_MspPostInit+0xfc>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a48:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac8 <HAL_TIM_MspPostInit+0xfc>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a54:	2340      	movs	r3, #64	@ 0x40
 8002a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a60:	2300      	movs	r3, #0
 8002a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a64:	2302      	movs	r3, #2
 8002a66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4817      	ldr	r0, [pc, #92]	@ (8002acc <HAL_TIM_MspPostInit+0x100>)
 8002a70:	f001 f8da 	bl	8003c28 <HAL_GPIO_Init>
}
 8002a74:	e022      	b.n	8002abc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a16      	ldr	r2, [pc, #88]	@ (8002ad4 <HAL_TIM_MspPostInit+0x108>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d11d      	bne.n	8002abc <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a80:	2300      	movs	r3, #0
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	4b10      	ldr	r3, [pc, #64]	@ (8002ac8 <HAL_TIM_MspPostInit+0xfc>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a88:	4a0f      	ldr	r2, [pc, #60]	@ (8002ac8 <HAL_TIM_MspPostInit+0xfc>)
 8002a8a:	f043 0302 	orr.w	r3, r3, #2
 8002a8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a90:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac8 <HAL_TIM_MspPostInit+0xfc>)
 8002a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_fanMotor_Pin;
 8002a9c:	2340      	movs	r3, #64	@ 0x40
 8002a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002aac:	2302      	movs	r3, #2
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM4_fanMotor_GPIO_Port, &GPIO_InitStruct);
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4808      	ldr	r0, [pc, #32]	@ (8002ad8 <HAL_TIM_MspPostInit+0x10c>)
 8002ab8:	f001 f8b6 	bl	8003c28 <HAL_GPIO_Init>
}
 8002abc:	bf00      	nop
 8002abe:	3728      	adds	r7, #40	@ 0x28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40020000 	.word	0x40020000
 8002ad0:	40000400 	.word	0x40000400
 8002ad4:	40000800 	.word	0x40000800
 8002ad8:	40020400 	.word	0x40020400

08002adc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08c      	sub	sp, #48	@ 0x30
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 031c 	add.w	r3, r7, #28
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a3a      	ldr	r2, [pc, #232]	@ (8002be4 <HAL_UART_MspInit+0x108>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d134      	bne.n	8002b68 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	4b39      	ldr	r3, [pc, #228]	@ (8002be8 <HAL_UART_MspInit+0x10c>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	4a38      	ldr	r2, [pc, #224]	@ (8002be8 <HAL_UART_MspInit+0x10c>)
 8002b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b0e:	4b36      	ldr	r3, [pc, #216]	@ (8002be8 <HAL_UART_MspInit+0x10c>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b16:	61bb      	str	r3, [r7, #24]
 8002b18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	4b32      	ldr	r3, [pc, #200]	@ (8002be8 <HAL_UART_MspInit+0x10c>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	4a31      	ldr	r2, [pc, #196]	@ (8002be8 <HAL_UART_MspInit+0x10c>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8002be8 <HAL_UART_MspInit+0x10c>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b36:	230c      	movs	r3, #12
 8002b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b42:	2303      	movs	r3, #3
 8002b44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b46:	2307      	movs	r3, #7
 8002b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 031c 	add.w	r3, r7, #28
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4826      	ldr	r0, [pc, #152]	@ (8002bec <HAL_UART_MspInit+0x110>)
 8002b52:	f001 f869 	bl	8003c28 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2100      	movs	r1, #0
 8002b5a:	2026      	movs	r0, #38	@ 0x26
 8002b5c:	f000 ff9b 	bl	8003a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b60:	2026      	movs	r0, #38	@ 0x26
 8002b62:	f000 ffb4 	bl	8003ace <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002b66:	e038      	b.n	8002bda <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a20      	ldr	r2, [pc, #128]	@ (8002bf0 <HAL_UART_MspInit+0x114>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d133      	bne.n	8002bda <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	4b1c      	ldr	r3, [pc, #112]	@ (8002be8 <HAL_UART_MspInit+0x10c>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002be8 <HAL_UART_MspInit+0x10c>)
 8002b7c:	f043 0320 	orr.w	r3, r3, #32
 8002b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b82:	4b19      	ldr	r3, [pc, #100]	@ (8002be8 <HAL_UART_MspInit+0x10c>)
 8002b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b15      	ldr	r3, [pc, #84]	@ (8002be8 <HAL_UART_MspInit+0x10c>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	4a14      	ldr	r2, [pc, #80]	@ (8002be8 <HAL_UART_MspInit+0x10c>)
 8002b98:	f043 0304 	orr.w	r3, r3, #4
 8002b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b9e:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <HAL_UART_MspInit+0x10c>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_bluetooh_Pin|RX_bluetooh_Pin;
 8002baa:	23c0      	movs	r3, #192	@ 0xc0
 8002bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002bba:	2308      	movs	r3, #8
 8002bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bbe:	f107 031c 	add.w	r3, r7, #28
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	480b      	ldr	r0, [pc, #44]	@ (8002bf4 <HAL_UART_MspInit+0x118>)
 8002bc6:	f001 f82f 	bl	8003c28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2100      	movs	r1, #0
 8002bce:	2047      	movs	r0, #71	@ 0x47
 8002bd0:	f000 ff61 	bl	8003a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002bd4:	2047      	movs	r0, #71	@ 0x47
 8002bd6:	f000 ff7a 	bl	8003ace <HAL_NVIC_EnableIRQ>
}
 8002bda:	bf00      	nop
 8002bdc:	3730      	adds	r7, #48	@ 0x30
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40004400 	.word	0x40004400
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40020000 	.word	0x40020000
 8002bf0:	40011400 	.word	0x40011400
 8002bf4:	40020800 	.word	0x40020800

08002bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <NMI_Handler+0x4>

08002c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c04:	bf00      	nop
 8002c06:	e7fd      	b.n	8002c04 <HardFault_Handler+0x4>

08002c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c0c:	bf00      	nop
 8002c0e:	e7fd      	b.n	8002c0c <MemManage_Handler+0x4>

08002c10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c14:	bf00      	nop
 8002c16:	e7fd      	b.n	8002c14 <BusFault_Handler+0x4>

08002c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c1c:	bf00      	nop
 8002c1e:	e7fd      	b.n	8002c1c <UsageFault_Handler+0x4>

08002c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c4e:	f000 f997 	bl	8002f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC0_EXTI0_BUTTON_Pin);
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	f001 f99a 	bl	8003f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c68:	4802      	ldr	r0, [pc, #8]	@ (8002c74 <ADC_IRQHandler+0x10>)
 8002c6a:	f000 facf 	bl	800320c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000a48 	.word	0x20000a48

08002c78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c7c:	4802      	ldr	r0, [pc, #8]	@ (8002c88 <TIM3_IRQHandler+0x10>)
 8002c7e:	f002 f801 	bl	8004c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000ad8 	.word	0x20000ad8

08002c8c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c90:	4802      	ldr	r0, [pc, #8]	@ (8002c9c <TIM4_IRQHandler+0x10>)
 8002c92:	f001 fff7 	bl	8004c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000b20 	.word	0x20000b20

08002ca0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ca4:	4802      	ldr	r0, [pc, #8]	@ (8002cb0 <USART2_IRQHandler+0x10>)
 8002ca6:	f002 ff35 	bl	8005b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000b68 	.word	0x20000b68

08002cb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002cb8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002cbc:	f001 f96a 	bl	8003f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cc0:	bf00      	nop
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002cc8:	4802      	ldr	r0, [pc, #8]	@ (8002cd4 <USART6_IRQHandler+0x10>)
 8002cca:	f002 ff23 	bl	8005b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000bb0 	.word	0x20000bb0

08002cd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return 1;
 8002cdc:	2301      	movs	r3, #1
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <_kill>:

int _kill(int pid, int sig)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cf2:	f005 fc83 	bl	80085fc <__errno>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2216      	movs	r2, #22
 8002cfa:	601a      	str	r2, [r3, #0]
  return -1;
 8002cfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_exit>:

void _exit (int status)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d10:	f04f 31ff 	mov.w	r1, #4294967295
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7ff ffe7 	bl	8002ce8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d1a:	bf00      	nop
 8002d1c:	e7fd      	b.n	8002d1a <_exit+0x12>

08002d1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b086      	sub	sp, #24
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	e00a      	b.n	8002d46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d30:	f3af 8000 	nop.w
 8002d34:	4601      	mov	r1, r0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	60ba      	str	r2, [r7, #8]
 8002d3c:	b2ca      	uxtb	r2, r1
 8002d3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	3301      	adds	r3, #1
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	dbf0      	blt.n	8002d30 <_read+0x12>
  }

  return len;
 8002d4e:	687b      	ldr	r3, [r7, #4]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	e009      	b.n	8002d7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	60ba      	str	r2, [r7, #8]
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe fd5c 	bl	8001830 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	dbf1      	blt.n	8002d6a <_write+0x12>
  }
  return len;
 8002d86:	687b      	ldr	r3, [r7, #4]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <_close>:

int _close(int file)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002db8:	605a      	str	r2, [r3, #4]
  return 0;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <_isatty>:

int _isatty(int file)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dd0:	2301      	movs	r3, #1
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b085      	sub	sp, #20
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e00:	4a14      	ldr	r2, [pc, #80]	@ (8002e54 <_sbrk+0x5c>)
 8002e02:	4b15      	ldr	r3, [pc, #84]	@ (8002e58 <_sbrk+0x60>)
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e0c:	4b13      	ldr	r3, [pc, #76]	@ (8002e5c <_sbrk+0x64>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d102      	bne.n	8002e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e14:	4b11      	ldr	r3, [pc, #68]	@ (8002e5c <_sbrk+0x64>)
 8002e16:	4a12      	ldr	r2, [pc, #72]	@ (8002e60 <_sbrk+0x68>)
 8002e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e1a:	4b10      	ldr	r3, [pc, #64]	@ (8002e5c <_sbrk+0x64>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4413      	add	r3, r2
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d207      	bcs.n	8002e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e28:	f005 fbe8 	bl	80085fc <__errno>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	220c      	movs	r2, #12
 8002e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
 8002e36:	e009      	b.n	8002e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e38:	4b08      	ldr	r3, [pc, #32]	@ (8002e5c <_sbrk+0x64>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e3e:	4b07      	ldr	r3, [pc, #28]	@ (8002e5c <_sbrk+0x64>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	4a05      	ldr	r2, [pc, #20]	@ (8002e5c <_sbrk+0x64>)
 8002e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20020000 	.word	0x20020000
 8002e58:	00000400 	.word	0x00000400
 8002e5c:	20000c80 	.word	0x20000c80
 8002e60:	20000dd8 	.word	0x20000dd8

08002e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e68:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <SystemInit+0x20>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e6e:	4a05      	ldr	r2, [pc, #20]	@ (8002e84 <SystemInit+0x20>)
 8002e70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8002e88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ec0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e8c:	f7ff ffea 	bl	8002e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e90:	480c      	ldr	r0, [pc, #48]	@ (8002ec4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e92:	490d      	ldr	r1, [pc, #52]	@ (8002ec8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e94:	4a0d      	ldr	r2, [pc, #52]	@ (8002ecc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e98:	e002      	b.n	8002ea0 <LoopCopyDataInit>

08002e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e9e:	3304      	adds	r3, #4

08002ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea4:	d3f9      	bcc.n	8002e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ed4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eac:	e001      	b.n	8002eb2 <LoopFillZerobss>

08002eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eb0:	3204      	adds	r2, #4

08002eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb4:	d3fb      	bcc.n	8002eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eb6:	f005 fba7 	bl	8008608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eba:	f7fe fcd1 	bl	8001860 <main>
  bx  lr    
 8002ebe:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8002ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ec8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002ecc:	0800c698 	.word	0x0800c698
  ldr r2, =_sbss
 8002ed0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002ed4:	20000dd4 	.word	0x20000dd4

08002ed8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ed8:	e7fe      	b.n	8002ed8 <DMA1_Stream0_IRQHandler>
	...

08002edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f1c <HAL_Init+0x40>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8002f1c <HAL_Init+0x40>)
 8002ee6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002eec:	4b0b      	ldr	r3, [pc, #44]	@ (8002f1c <HAL_Init+0x40>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8002f1c <HAL_Init+0x40>)
 8002ef2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef8:	4b08      	ldr	r3, [pc, #32]	@ (8002f1c <HAL_Init+0x40>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a07      	ldr	r2, [pc, #28]	@ (8002f1c <HAL_Init+0x40>)
 8002efe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f04:	2003      	movs	r0, #3
 8002f06:	f000 fdbb 	bl	8003a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f000 f808 	bl	8002f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f10:	f7ff fc8c 	bl	800282c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023c00 	.word	0x40023c00

08002f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f28:	4b12      	ldr	r3, [pc, #72]	@ (8002f74 <HAL_InitTick+0x54>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b12      	ldr	r3, [pc, #72]	@ (8002f78 <HAL_InitTick+0x58>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	4619      	mov	r1, r3
 8002f32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fdd3 	bl	8003aea <HAL_SYSTICK_Config>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e00e      	b.n	8002f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b0f      	cmp	r3, #15
 8002f52:	d80a      	bhi.n	8002f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f54:	2200      	movs	r2, #0
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5c:	f000 fd9b 	bl	8003a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f60:	4a06      	ldr	r2, [pc, #24]	@ (8002f7c <HAL_InitTick+0x5c>)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	e000      	b.n	8002f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000008 	.word	0x20000008
 8002f78:	20000010 	.word	0x20000010
 8002f7c:	2000000c 	.word	0x2000000c

08002f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f84:	4b06      	ldr	r3, [pc, #24]	@ (8002fa0 <HAL_IncTick+0x20>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <HAL_IncTick+0x24>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4413      	add	r3, r2
 8002f90:	4a04      	ldr	r2, [pc, #16]	@ (8002fa4 <HAL_IncTick+0x24>)
 8002f92:	6013      	str	r3, [r2, #0]
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000010 	.word	0x20000010
 8002fa4:	20000c84 	.word	0x20000c84

08002fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return uwTick;
 8002fac:	4b03      	ldr	r3, [pc, #12]	@ (8002fbc <HAL_GetTick+0x14>)
 8002fae:	681b      	ldr	r3, [r3, #0]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20000c84 	.word	0x20000c84

08002fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fc8:	f7ff ffee 	bl	8002fa8 <HAL_GetTick>
 8002fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d005      	beq.n	8002fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fda:	4b0a      	ldr	r3, [pc, #40]	@ (8003004 <HAL_Delay+0x44>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fe6:	bf00      	nop
 8002fe8:	f7ff ffde 	bl	8002fa8 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d8f7      	bhi.n	8002fe8 <HAL_Delay+0x28>
  {
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000010 	.word	0x20000010

08003008 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e033      	b.n	8003086 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff fc28 	bl	800287c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b00      	cmp	r3, #0
 8003044:	d118      	bne.n	8003078 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800304e:	f023 0302 	bic.w	r3, r3, #2
 8003052:	f043 0202 	orr.w	r2, r3, #2
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fb3a 	bl	80036d4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	f023 0303 	bic.w	r3, r3, #3
 800306e:	f043 0201 	orr.w	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	641a      	str	r2, [r3, #64]	@ 0x40
 8003076:	e001      	b.n	800307c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003084:	7bfb      	ldrb	r3, [r7, #15]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_Start_IT+0x1a>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e0a1      	b.n	80031ee <HAL_ADC_Start_IT+0x15e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d018      	beq.n	80030f2 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030d0:	4b4a      	ldr	r3, [pc, #296]	@ (80031fc <HAL_ADC_Start_IT+0x16c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003200 <HAL_ADC_Start_IT+0x170>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	0c9a      	lsrs	r2, r3, #18
 80030dc:	4613      	mov	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80030e4:	e002      	b.n	80030ec <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f9      	bne.n	80030e6 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d169      	bne.n	80031d4 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800312a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800313a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800313e:	d106      	bne.n	800314e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003144:	f023 0206 	bic.w	r2, r3, #6
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	645a      	str	r2, [r3, #68]	@ 0x44
 800314c:	e002      	b.n	8003154 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800315c:	4b29      	ldr	r3, [pc, #164]	@ (8003204 <HAL_ADC_Start_IT+0x174>)
 800315e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003168:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003178:	f043 0320 	orr.w	r3, r3, #32
 800317c:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10f      	bne.n	80031aa <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d129      	bne.n	80031ec <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	e020      	b.n	80031ec <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a16      	ldr	r2, [pc, #88]	@ (8003208 <HAL_ADC_Start_IT+0x178>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d11b      	bne.n	80031ec <HAL_ADC_Start_IT+0x15c>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d114      	bne.n	80031ec <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80031d0:	609a      	str	r2, [r3, #8]
 80031d2:	e00b      	b.n	80031ec <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	f043 0210 	orr.w	r2, r3, #16
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e4:	f043 0201 	orr.w	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000008 	.word	0x20000008
 8003200:	431bde83 	.word	0x431bde83
 8003204:	40012300 	.word	0x40012300
 8003208:	40012000 	.word	0x40012000

0800320c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d049      	beq.n	80032d6 <HAL_ADC_IRQHandler+0xca>
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d046      	beq.n	80032d6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003258:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d12b      	bne.n	80032c6 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003272:	2b00      	cmp	r3, #0
 8003274:	d127      	bne.n	80032c6 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003280:	2b00      	cmp	r3, #0
 8003282:	d006      	beq.n	8003292 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800328e:	2b00      	cmp	r3, #0
 8003290:	d119      	bne.n	80032c6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0220 	bic.w	r2, r2, #32
 80032a0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d105      	bne.n	80032c6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	f043 0201 	orr.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff fa68 	bl	800279c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0212 	mvn.w	r2, #18
 80032d4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d057      	beq.n	800339c <HAL_ADC_IRQHandler+0x190>
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d054      	beq.n	800339c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d105      	bne.n	800330a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d139      	bne.n	800338c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003322:	2b00      	cmp	r3, #0
 8003324:	d006      	beq.n	8003334 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003330:	2b00      	cmp	r3, #0
 8003332:	d12b      	bne.n	800338c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800333e:	2b00      	cmp	r3, #0
 8003340:	d124      	bne.n	800338c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800334c:	2b00      	cmp	r3, #0
 800334e:	d11d      	bne.n	800338c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003354:	2b00      	cmp	r3, #0
 8003356:	d119      	bne.n	800338c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003366:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d105      	bne.n	800338c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	f043 0201 	orr.w	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fa9d 	bl	80038cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f06f 020c 	mvn.w	r2, #12
 800339a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033aa:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d017      	beq.n	80033e2 <HAL_ADC_IRQHandler+0x1d6>
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d014      	beq.n	80033e2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d10d      	bne.n	80033e2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f837 	bl	8003446 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0201 	mvn.w	r2, #1
 80033e0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033f0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d015      	beq.n	8003424 <HAL_ADC_IRQHandler+0x218>
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d012      	beq.n	8003424 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003402:	f043 0202 	orr.w	r2, r3, #2
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f06f 0220 	mvn.w	r2, #32
 8003412:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f820 	bl	800345a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f06f 0220 	mvn.w	r2, #32
 8003422:	601a      	str	r2, [r3, #0]
  }
}
 8003424:	bf00      	nop
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_ADC_ConfigChannel+0x1c>
 8003488:	2302      	movs	r3, #2
 800348a:	e113      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x244>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b09      	cmp	r3, #9
 800349a:	d925      	bls.n	80034e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68d9      	ldr	r1, [r3, #12]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	461a      	mov	r2, r3
 80034aa:	4613      	mov	r3, r2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	4413      	add	r3, r2
 80034b0:	3b1e      	subs	r3, #30
 80034b2:	2207      	movs	r2, #7
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43da      	mvns	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	400a      	ands	r2, r1
 80034c0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68d9      	ldr	r1, [r3, #12]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	4618      	mov	r0, r3
 80034d4:	4603      	mov	r3, r0
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4403      	add	r3, r0
 80034da:	3b1e      	subs	r3, #30
 80034dc:	409a      	lsls	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	e022      	b.n	800352e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6919      	ldr	r1, [r3, #16]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	4613      	mov	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	2207      	movs	r2, #7
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	400a      	ands	r2, r1
 800350a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6919      	ldr	r1, [r3, #16]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	4618      	mov	r0, r3
 800351e:	4603      	mov	r3, r0
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	4403      	add	r3, r0
 8003524:	409a      	lsls	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b06      	cmp	r3, #6
 8003534:	d824      	bhi.n	8003580 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	3b05      	subs	r3, #5
 8003548:	221f      	movs	r2, #31
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43da      	mvns	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	400a      	ands	r2, r1
 8003556:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	4618      	mov	r0, r3
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	3b05      	subs	r3, #5
 8003572:	fa00 f203 	lsl.w	r2, r0, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	635a      	str	r2, [r3, #52]	@ 0x34
 800357e:	e04c      	b.n	800361a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b0c      	cmp	r3, #12
 8003586:	d824      	bhi.n	80035d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	3b23      	subs	r3, #35	@ 0x23
 800359a:	221f      	movs	r2, #31
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43da      	mvns	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	400a      	ands	r2, r1
 80035a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	4618      	mov	r0, r3
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	3b23      	subs	r3, #35	@ 0x23
 80035c4:	fa00 f203 	lsl.w	r2, r0, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80035d0:	e023      	b.n	800361a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	3b41      	subs	r3, #65	@ 0x41
 80035e4:	221f      	movs	r2, #31
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43da      	mvns	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	400a      	ands	r2, r1
 80035f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	4618      	mov	r0, r3
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	3b41      	subs	r3, #65	@ 0x41
 800360e:	fa00 f203 	lsl.w	r2, r0, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800361a:	4b29      	ldr	r3, [pc, #164]	@ (80036c0 <HAL_ADC_ConfigChannel+0x250>)
 800361c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a28      	ldr	r2, [pc, #160]	@ (80036c4 <HAL_ADC_ConfigChannel+0x254>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d10f      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x1d8>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b12      	cmp	r3, #18
 800362e:	d10b      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a1d      	ldr	r2, [pc, #116]	@ (80036c4 <HAL_ADC_ConfigChannel+0x254>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d12b      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x23a>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a1c      	ldr	r2, [pc, #112]	@ (80036c8 <HAL_ADC_ConfigChannel+0x258>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d003      	beq.n	8003664 <HAL_ADC_ConfigChannel+0x1f4>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b11      	cmp	r3, #17
 8003662:	d122      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a11      	ldr	r2, [pc, #68]	@ (80036c8 <HAL_ADC_ConfigChannel+0x258>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d111      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003686:	4b11      	ldr	r3, [pc, #68]	@ (80036cc <HAL_ADC_ConfigChannel+0x25c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a11      	ldr	r2, [pc, #68]	@ (80036d0 <HAL_ADC_ConfigChannel+0x260>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	0c9a      	lsrs	r2, r3, #18
 8003692:	4613      	mov	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800369c:	e002      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f9      	bne.n	800369e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	40012300 	.word	0x40012300
 80036c4:	40012000 	.word	0x40012000
 80036c8:	10000012 	.word	0x10000012
 80036cc:	20000008 	.word	0x20000008
 80036d0:	431bde83 	.word	0x431bde83

080036d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036dc:	4b79      	ldr	r3, [pc, #484]	@ (80038c4 <ADC_Init+0x1f0>)
 80036de:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	431a      	orrs	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003708:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6859      	ldr	r1, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	021a      	lsls	r2, r3, #8
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800372c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800374e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6899      	ldr	r1, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003766:	4a58      	ldr	r2, [pc, #352]	@ (80038c8 <ADC_Init+0x1f4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d022      	beq.n	80037b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800377a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6899      	ldr	r1, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800379c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6899      	ldr	r1, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	e00f      	b.n	80037d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80037d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0202 	bic.w	r2, r2, #2
 80037e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6899      	ldr	r1, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	7e1b      	ldrb	r3, [r3, #24]
 80037ec:	005a      	lsls	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d01b      	beq.n	8003838 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800380e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800381e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	3b01      	subs	r3, #1
 800382c:	035a      	lsls	r2, r3, #13
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	e007      	b.n	8003848 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003846:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003856:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	3b01      	subs	r3, #1
 8003864:	051a      	lsls	r2, r3, #20
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800387c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6899      	ldr	r1, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800388a:	025a      	lsls	r2, r3, #9
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6899      	ldr	r1, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	029a      	lsls	r2, r3, #10
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	609a      	str	r2, [r3, #8]
}
 80038b8:	bf00      	nop
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	40012300 	.word	0x40012300
 80038c8:	0f000001 	.word	0x0f000001

080038cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003924 <__NVIC_SetPriorityGrouping+0x44>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038fc:	4013      	ands	r3, r2
 80038fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003908:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800390c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003912:	4a04      	ldr	r2, [pc, #16]	@ (8003924 <__NVIC_SetPriorityGrouping+0x44>)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	60d3      	str	r3, [r2, #12]
}
 8003918:	bf00      	nop
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800392c:	4b04      	ldr	r3, [pc, #16]	@ (8003940 <__NVIC_GetPriorityGrouping+0x18>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	0a1b      	lsrs	r3, r3, #8
 8003932:	f003 0307 	and.w	r3, r3, #7
}
 8003936:	4618      	mov	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	2b00      	cmp	r3, #0
 8003954:	db0b      	blt.n	800396e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	f003 021f 	and.w	r2, r3, #31
 800395c:	4907      	ldr	r1, [pc, #28]	@ (800397c <__NVIC_EnableIRQ+0x38>)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	2001      	movs	r0, #1
 8003966:	fa00 f202 	lsl.w	r2, r0, r2
 800396a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	e000e100 	.word	0xe000e100

08003980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	6039      	str	r1, [r7, #0]
 800398a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003990:	2b00      	cmp	r3, #0
 8003992:	db0a      	blt.n	80039aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	b2da      	uxtb	r2, r3
 8003998:	490c      	ldr	r1, [pc, #48]	@ (80039cc <__NVIC_SetPriority+0x4c>)
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	0112      	lsls	r2, r2, #4
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	440b      	add	r3, r1
 80039a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039a8:	e00a      	b.n	80039c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4908      	ldr	r1, [pc, #32]	@ (80039d0 <__NVIC_SetPriority+0x50>)
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	3b04      	subs	r3, #4
 80039b8:	0112      	lsls	r2, r2, #4
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	440b      	add	r3, r1
 80039be:	761a      	strb	r2, [r3, #24]
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	e000e100 	.word	0xe000e100
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b089      	sub	sp, #36	@ 0x24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f1c3 0307 	rsb	r3, r3, #7
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	bf28      	it	cs
 80039f2:	2304      	movcs	r3, #4
 80039f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	3304      	adds	r3, #4
 80039fa:	2b06      	cmp	r3, #6
 80039fc:	d902      	bls.n	8003a04 <NVIC_EncodePriority+0x30>
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3b03      	subs	r3, #3
 8003a02:	e000      	b.n	8003a06 <NVIC_EncodePriority+0x32>
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43da      	mvns	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	401a      	ands	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fa01 f303 	lsl.w	r3, r1, r3
 8003a26:	43d9      	mvns	r1, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	4313      	orrs	r3, r2
         );
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3724      	adds	r7, #36	@ 0x24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a4c:	d301      	bcc.n	8003a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e00f      	b.n	8003a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a52:	4a0a      	ldr	r2, [pc, #40]	@ (8003a7c <SysTick_Config+0x40>)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a5a:	210f      	movs	r1, #15
 8003a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a60:	f7ff ff8e 	bl	8003980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a64:	4b05      	ldr	r3, [pc, #20]	@ (8003a7c <SysTick_Config+0x40>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a6a:	4b04      	ldr	r3, [pc, #16]	@ (8003a7c <SysTick_Config+0x40>)
 8003a6c:	2207      	movs	r2, #7
 8003a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	e000e010 	.word	0xe000e010

08003a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff ff29 	bl	80038e0 <__NVIC_SetPriorityGrouping>
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b086      	sub	sp, #24
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003aa8:	f7ff ff3e 	bl	8003928 <__NVIC_GetPriorityGrouping>
 8003aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	6978      	ldr	r0, [r7, #20]
 8003ab4:	f7ff ff8e 	bl	80039d4 <NVIC_EncodePriority>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff ff5d 	bl	8003980 <__NVIC_SetPriority>
}
 8003ac6:	bf00      	nop
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff ff31 	bl	8003944 <__NVIC_EnableIRQ>
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff ffa2 	bl	8003a3c <SysTick_Config>
 8003af8:	4603      	mov	r3, r0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b10:	f7ff fa4a 	bl	8002fa8 <HAL_GetTick>
 8003b14:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d008      	beq.n	8003b34 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2280      	movs	r2, #128	@ 0x80
 8003b26:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e052      	b.n	8003bda <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0216 	bic.w	r2, r2, #22
 8003b42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b52:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d103      	bne.n	8003b64 <HAL_DMA_Abort+0x62>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0208 	bic.w	r2, r2, #8
 8003b72:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b84:	e013      	b.n	8003bae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b86:	f7ff fa0f 	bl	8002fa8 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b05      	cmp	r3, #5
 8003b92:	d90c      	bls.n	8003bae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e015      	b.n	8003bda <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e4      	bne.n	8003b86 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc0:	223f      	movs	r2, #63	@ 0x3f
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d004      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2280      	movs	r2, #128	@ 0x80
 8003bfa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e00c      	b.n	8003c1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2205      	movs	r2, #5
 8003c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0201 	bic.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b089      	sub	sp, #36	@ 0x24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	e159      	b.n	8003ef8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c44:	2201      	movs	r2, #1
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4013      	ands	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	f040 8148 	bne.w	8003ef2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d005      	beq.n	8003c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d130      	bne.n	8003cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	2203      	movs	r2, #3
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 0201 	and.w	r2, r3, #1
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d017      	beq.n	8003d18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d123      	bne.n	8003d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	08da      	lsrs	r2, r3, #3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3208      	adds	r2, #8
 8003d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	220f      	movs	r2, #15
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	08da      	lsrs	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3208      	adds	r2, #8
 8003d66:	69b9      	ldr	r1, [r7, #24]
 8003d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	2203      	movs	r2, #3
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0203 	and.w	r2, r3, #3
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80a2 	beq.w	8003ef2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	4b57      	ldr	r3, [pc, #348]	@ (8003f10 <HAL_GPIO_Init+0x2e8>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db6:	4a56      	ldr	r2, [pc, #344]	@ (8003f10 <HAL_GPIO_Init+0x2e8>)
 8003db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dbe:	4b54      	ldr	r3, [pc, #336]	@ (8003f10 <HAL_GPIO_Init+0x2e8>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dca:	4a52      	ldr	r2, [pc, #328]	@ (8003f14 <HAL_GPIO_Init+0x2ec>)
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	089b      	lsrs	r3, r3, #2
 8003dd0:	3302      	adds	r3, #2
 8003dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	220f      	movs	r2, #15
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4013      	ands	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a49      	ldr	r2, [pc, #292]	@ (8003f18 <HAL_GPIO_Init+0x2f0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d019      	beq.n	8003e2a <HAL_GPIO_Init+0x202>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a48      	ldr	r2, [pc, #288]	@ (8003f1c <HAL_GPIO_Init+0x2f4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d013      	beq.n	8003e26 <HAL_GPIO_Init+0x1fe>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a47      	ldr	r2, [pc, #284]	@ (8003f20 <HAL_GPIO_Init+0x2f8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00d      	beq.n	8003e22 <HAL_GPIO_Init+0x1fa>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a46      	ldr	r2, [pc, #280]	@ (8003f24 <HAL_GPIO_Init+0x2fc>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d007      	beq.n	8003e1e <HAL_GPIO_Init+0x1f6>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a45      	ldr	r2, [pc, #276]	@ (8003f28 <HAL_GPIO_Init+0x300>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d101      	bne.n	8003e1a <HAL_GPIO_Init+0x1f2>
 8003e16:	2304      	movs	r3, #4
 8003e18:	e008      	b.n	8003e2c <HAL_GPIO_Init+0x204>
 8003e1a:	2307      	movs	r3, #7
 8003e1c:	e006      	b.n	8003e2c <HAL_GPIO_Init+0x204>
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e004      	b.n	8003e2c <HAL_GPIO_Init+0x204>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e002      	b.n	8003e2c <HAL_GPIO_Init+0x204>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_GPIO_Init+0x204>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	f002 0203 	and.w	r2, r2, #3
 8003e32:	0092      	lsls	r2, r2, #2
 8003e34:	4093      	lsls	r3, r2
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e3c:	4935      	ldr	r1, [pc, #212]	@ (8003f14 <HAL_GPIO_Init+0x2ec>)
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	089b      	lsrs	r3, r3, #2
 8003e42:	3302      	adds	r3, #2
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e4a:	4b38      	ldr	r3, [pc, #224]	@ (8003f2c <HAL_GPIO_Init+0x304>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	43db      	mvns	r3, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4013      	ands	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e6e:	4a2f      	ldr	r2, [pc, #188]	@ (8003f2c <HAL_GPIO_Init+0x304>)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e74:	4b2d      	ldr	r3, [pc, #180]	@ (8003f2c <HAL_GPIO_Init+0x304>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e98:	4a24      	ldr	r2, [pc, #144]	@ (8003f2c <HAL_GPIO_Init+0x304>)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e9e:	4b23      	ldr	r3, [pc, #140]	@ (8003f2c <HAL_GPIO_Init+0x304>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f2c <HAL_GPIO_Init+0x304>)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ec8:	4b18      	ldr	r3, [pc, #96]	@ (8003f2c <HAL_GPIO_Init+0x304>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003eec:	4a0f      	ldr	r2, [pc, #60]	@ (8003f2c <HAL_GPIO_Init+0x304>)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	61fb      	str	r3, [r7, #28]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	2b0f      	cmp	r3, #15
 8003efc:	f67f aea2 	bls.w	8003c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f00:	bf00      	nop
 8003f02:	bf00      	nop
 8003f04:	3724      	adds	r7, #36	@ 0x24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800
 8003f14:	40013800 	.word	0x40013800
 8003f18:	40020000 	.word	0x40020000
 8003f1c:	40020400 	.word	0x40020400
 8003f20:	40020800 	.word	0x40020800
 8003f24:	40020c00 	.word	0x40020c00
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40013c00 	.word	0x40013c00

08003f30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	887b      	ldrh	r3, [r7, #2]
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
 8003f4c:	e001      	b.n	8003f52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	807b      	strh	r3, [r7, #2]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f70:	787b      	ldrb	r3, [r7, #1]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f7c:	e003      	b.n	8003f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f7e:	887b      	ldrh	r3, [r7, #2]
 8003f80:	041a      	lsls	r2, r3, #16
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	619a      	str	r2, [r3, #24]
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f9e:	4b08      	ldr	r3, [pc, #32]	@ (8003fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fa0:	695a      	ldr	r2, [r3, #20]
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d006      	beq.n	8003fb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003faa:	4a05      	ldr	r2, [pc, #20]	@ (8003fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f806 	bl	8003fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40013c00 	.word	0x40013c00

08003fc4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e267      	b.n	80044be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d075      	beq.n	80040e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ffa:	4b88      	ldr	r3, [pc, #544]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
 8004002:	2b04      	cmp	r3, #4
 8004004:	d00c      	beq.n	8004020 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004006:	4b85      	ldr	r3, [pc, #532]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800400e:	2b08      	cmp	r3, #8
 8004010:	d112      	bne.n	8004038 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004012:	4b82      	ldr	r3, [pc, #520]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800401a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800401e:	d10b      	bne.n	8004038 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004020:	4b7e      	ldr	r3, [pc, #504]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d05b      	beq.n	80040e4 <HAL_RCC_OscConfig+0x108>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d157      	bne.n	80040e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e242      	b.n	80044be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004040:	d106      	bne.n	8004050 <HAL_RCC_OscConfig+0x74>
 8004042:	4b76      	ldr	r3, [pc, #472]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a75      	ldr	r2, [pc, #468]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 8004048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	e01d      	b.n	800408c <HAL_RCC_OscConfig+0xb0>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004058:	d10c      	bne.n	8004074 <HAL_RCC_OscConfig+0x98>
 800405a:	4b70      	ldr	r3, [pc, #448]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a6f      	ldr	r2, [pc, #444]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 8004060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	4b6d      	ldr	r3, [pc, #436]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a6c      	ldr	r2, [pc, #432]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 800406c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	e00b      	b.n	800408c <HAL_RCC_OscConfig+0xb0>
 8004074:	4b69      	ldr	r3, [pc, #420]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a68      	ldr	r2, [pc, #416]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 800407a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	4b66      	ldr	r3, [pc, #408]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a65      	ldr	r2, [pc, #404]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 8004086:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800408a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d013      	beq.n	80040bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7fe ff88 	bl	8002fa8 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800409c:	f7fe ff84 	bl	8002fa8 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	@ 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e207      	b.n	80044be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ae:	4b5b      	ldr	r3, [pc, #364]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0xc0>
 80040ba:	e014      	b.n	80040e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040bc:	f7fe ff74 	bl	8002fa8 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c4:	f7fe ff70 	bl	8002fa8 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b64      	cmp	r3, #100	@ 0x64
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e1f3      	b.n	80044be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d6:	4b51      	ldr	r3, [pc, #324]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0xe8>
 80040e2:	e000      	b.n	80040e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d063      	beq.n	80041ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040f2:	4b4a      	ldr	r3, [pc, #296]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00b      	beq.n	8004116 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040fe:	4b47      	ldr	r3, [pc, #284]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004106:	2b08      	cmp	r3, #8
 8004108:	d11c      	bne.n	8004144 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800410a:	4b44      	ldr	r3, [pc, #272]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d116      	bne.n	8004144 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004116:	4b41      	ldr	r3, [pc, #260]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <HAL_RCC_OscConfig+0x152>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d001      	beq.n	800412e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e1c7      	b.n	80044be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800412e:	4b3b      	ldr	r3, [pc, #236]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	4937      	ldr	r1, [pc, #220]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 800413e:	4313      	orrs	r3, r2
 8004140:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004142:	e03a      	b.n	80041ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d020      	beq.n	800418e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800414c:	4b34      	ldr	r3, [pc, #208]	@ (8004220 <HAL_RCC_OscConfig+0x244>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004152:	f7fe ff29 	bl	8002fa8 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800415a:	f7fe ff25 	bl	8002fa8 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e1a8      	b.n	80044be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416c:	4b2b      	ldr	r3, [pc, #172]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004178:	4b28      	ldr	r3, [pc, #160]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	4925      	ldr	r1, [pc, #148]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 8004188:	4313      	orrs	r3, r2
 800418a:	600b      	str	r3, [r1, #0]
 800418c:	e015      	b.n	80041ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800418e:	4b24      	ldr	r3, [pc, #144]	@ (8004220 <HAL_RCC_OscConfig+0x244>)
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fe ff08 	bl	8002fa8 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800419c:	f7fe ff04 	bl	8002fa8 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e187      	b.n	80044be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ae:	4b1b      	ldr	r3, [pc, #108]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d036      	beq.n	8004234 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d016      	beq.n	80041fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ce:	4b15      	ldr	r3, [pc, #84]	@ (8004224 <HAL_RCC_OscConfig+0x248>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d4:	f7fe fee8 	bl	8002fa8 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041dc:	f7fe fee4 	bl	8002fa8 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e167      	b.n	80044be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ee:	4b0b      	ldr	r3, [pc, #44]	@ (800421c <HAL_RCC_OscConfig+0x240>)
 80041f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x200>
 80041fa:	e01b      	b.n	8004234 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041fc:	4b09      	ldr	r3, [pc, #36]	@ (8004224 <HAL_RCC_OscConfig+0x248>)
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004202:	f7fe fed1 	bl	8002fa8 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004208:	e00e      	b.n	8004228 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800420a:	f7fe fecd 	bl	8002fa8 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d907      	bls.n	8004228 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e150      	b.n	80044be <HAL_RCC_OscConfig+0x4e2>
 800421c:	40023800 	.word	0x40023800
 8004220:	42470000 	.word	0x42470000
 8004224:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004228:	4b88      	ldr	r3, [pc, #544]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 800422a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ea      	bne.n	800420a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8097 	beq.w	8004370 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004242:	2300      	movs	r3, #0
 8004244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004246:	4b81      	ldr	r3, [pc, #516]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10f      	bne.n	8004272 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	4b7d      	ldr	r3, [pc, #500]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	4a7c      	ldr	r2, [pc, #496]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 800425c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004260:	6413      	str	r3, [r2, #64]	@ 0x40
 8004262:	4b7a      	ldr	r3, [pc, #488]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426e:	2301      	movs	r3, #1
 8004270:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004272:	4b77      	ldr	r3, [pc, #476]	@ (8004450 <HAL_RCC_OscConfig+0x474>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427a:	2b00      	cmp	r3, #0
 800427c:	d118      	bne.n	80042b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800427e:	4b74      	ldr	r3, [pc, #464]	@ (8004450 <HAL_RCC_OscConfig+0x474>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a73      	ldr	r2, [pc, #460]	@ (8004450 <HAL_RCC_OscConfig+0x474>)
 8004284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800428a:	f7fe fe8d 	bl	8002fa8 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004292:	f7fe fe89 	bl	8002fa8 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e10c      	b.n	80044be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004450 <HAL_RCC_OscConfig+0x474>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d106      	bne.n	80042c6 <HAL_RCC_OscConfig+0x2ea>
 80042b8:	4b64      	ldr	r3, [pc, #400]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042bc:	4a63      	ldr	r2, [pc, #396]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c4:	e01c      	b.n	8004300 <HAL_RCC_OscConfig+0x324>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2b05      	cmp	r3, #5
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCC_OscConfig+0x30c>
 80042ce:	4b5f      	ldr	r3, [pc, #380]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d2:	4a5e      	ldr	r2, [pc, #376]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 80042d4:	f043 0304 	orr.w	r3, r3, #4
 80042d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042da:	4b5c      	ldr	r3, [pc, #368]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042de:	4a5b      	ldr	r2, [pc, #364]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e6:	e00b      	b.n	8004300 <HAL_RCC_OscConfig+0x324>
 80042e8:	4b58      	ldr	r3, [pc, #352]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ec:	4a57      	ldr	r2, [pc, #348]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 80042ee:	f023 0301 	bic.w	r3, r3, #1
 80042f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042f4:	4b55      	ldr	r3, [pc, #340]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f8:	4a54      	ldr	r2, [pc, #336]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 80042fa:	f023 0304 	bic.w	r3, r3, #4
 80042fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d015      	beq.n	8004334 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004308:	f7fe fe4e 	bl	8002fa8 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430e:	e00a      	b.n	8004326 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004310:	f7fe fe4a 	bl	8002fa8 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e0cb      	b.n	80044be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004326:	4b49      	ldr	r3, [pc, #292]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0ee      	beq.n	8004310 <HAL_RCC_OscConfig+0x334>
 8004332:	e014      	b.n	800435e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004334:	f7fe fe38 	bl	8002fa8 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800433a:	e00a      	b.n	8004352 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433c:	f7fe fe34 	bl	8002fa8 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e0b5      	b.n	80044be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004352:	4b3e      	ldr	r3, [pc, #248]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1ee      	bne.n	800433c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800435e:	7dfb      	ldrb	r3, [r7, #23]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d105      	bne.n	8004370 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004364:	4b39      	ldr	r3, [pc, #228]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	4a38      	ldr	r2, [pc, #224]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 800436a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800436e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80a1 	beq.w	80044bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800437a:	4b34      	ldr	r3, [pc, #208]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	2b08      	cmp	r3, #8
 8004384:	d05c      	beq.n	8004440 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d141      	bne.n	8004412 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438e:	4b31      	ldr	r3, [pc, #196]	@ (8004454 <HAL_RCC_OscConfig+0x478>)
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004394:	f7fe fe08 	bl	8002fa8 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439c:	f7fe fe04 	bl	8002fa8 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e087      	b.n	80044be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ae:	4b27      	ldr	r3, [pc, #156]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69da      	ldr	r2, [r3, #28]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c8:	019b      	lsls	r3, r3, #6
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d0:	085b      	lsrs	r3, r3, #1
 80043d2:	3b01      	subs	r3, #1
 80043d4:	041b      	lsls	r3, r3, #16
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	061b      	lsls	r3, r3, #24
 80043de:	491b      	ldr	r1, [pc, #108]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004454 <HAL_RCC_OscConfig+0x478>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ea:	f7fe fddd 	bl	8002fa8 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f2:	f7fe fdd9 	bl	8002fa8 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e05c      	b.n	80044be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004404:	4b11      	ldr	r3, [pc, #68]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0f0      	beq.n	80043f2 <HAL_RCC_OscConfig+0x416>
 8004410:	e054      	b.n	80044bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004412:	4b10      	ldr	r3, [pc, #64]	@ (8004454 <HAL_RCC_OscConfig+0x478>)
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004418:	f7fe fdc6 	bl	8002fa8 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004420:	f7fe fdc2 	bl	8002fa8 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e045      	b.n	80044be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004432:	4b06      	ldr	r3, [pc, #24]	@ (800444c <HAL_RCC_OscConfig+0x470>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x444>
 800443e:	e03d      	b.n	80044bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d107      	bne.n	8004458 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e038      	b.n	80044be <HAL_RCC_OscConfig+0x4e2>
 800444c:	40023800 	.word	0x40023800
 8004450:	40007000 	.word	0x40007000
 8004454:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004458:	4b1b      	ldr	r3, [pc, #108]	@ (80044c8 <HAL_RCC_OscConfig+0x4ec>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d028      	beq.n	80044b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004470:	429a      	cmp	r2, r3
 8004472:	d121      	bne.n	80044b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447e:	429a      	cmp	r2, r3
 8004480:	d11a      	bne.n	80044b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004488:	4013      	ands	r3, r2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800448e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004490:	4293      	cmp	r3, r2
 8004492:	d111      	bne.n	80044b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	3b01      	subs	r3, #1
 80044a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d107      	bne.n	80044b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d001      	beq.n	80044bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40023800 	.word	0x40023800

080044cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e0cc      	b.n	800467a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044e0:	4b68      	ldr	r3, [pc, #416]	@ (8004684 <HAL_RCC_ClockConfig+0x1b8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d90c      	bls.n	8004508 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ee:	4b65      	ldr	r3, [pc, #404]	@ (8004684 <HAL_RCC_ClockConfig+0x1b8>)
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f6:	4b63      	ldr	r3, [pc, #396]	@ (8004684 <HAL_RCC_ClockConfig+0x1b8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d001      	beq.n	8004508 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0b8      	b.n	800467a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d020      	beq.n	8004556 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004520:	4b59      	ldr	r3, [pc, #356]	@ (8004688 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	4a58      	ldr	r2, [pc, #352]	@ (8004688 <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800452a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004538:	4b53      	ldr	r3, [pc, #332]	@ (8004688 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	4a52      	ldr	r2, [pc, #328]	@ (8004688 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004542:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004544:	4b50      	ldr	r3, [pc, #320]	@ (8004688 <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	494d      	ldr	r1, [pc, #308]	@ (8004688 <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d044      	beq.n	80045ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d107      	bne.n	800457a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456a:	4b47      	ldr	r3, [pc, #284]	@ (8004688 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d119      	bne.n	80045aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e07f      	b.n	800467a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d003      	beq.n	800458a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004586:	2b03      	cmp	r3, #3
 8004588:	d107      	bne.n	800459a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800458a:	4b3f      	ldr	r3, [pc, #252]	@ (8004688 <HAL_RCC_ClockConfig+0x1bc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d109      	bne.n	80045aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e06f      	b.n	800467a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459a:	4b3b      	ldr	r3, [pc, #236]	@ (8004688 <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e067      	b.n	800467a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045aa:	4b37      	ldr	r3, [pc, #220]	@ (8004688 <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f023 0203 	bic.w	r2, r3, #3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	4934      	ldr	r1, [pc, #208]	@ (8004688 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045bc:	f7fe fcf4 	bl	8002fa8 <HAL_GetTick>
 80045c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c2:	e00a      	b.n	80045da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c4:	f7fe fcf0 	bl	8002fa8 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e04f      	b.n	800467a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045da:	4b2b      	ldr	r3, [pc, #172]	@ (8004688 <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 020c 	and.w	r2, r3, #12
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d1eb      	bne.n	80045c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045ec:	4b25      	ldr	r3, [pc, #148]	@ (8004684 <HAL_RCC_ClockConfig+0x1b8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d20c      	bcs.n	8004614 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fa:	4b22      	ldr	r3, [pc, #136]	@ (8004684 <HAL_RCC_ClockConfig+0x1b8>)
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004602:	4b20      	ldr	r3, [pc, #128]	@ (8004684 <HAL_RCC_ClockConfig+0x1b8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d001      	beq.n	8004614 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e032      	b.n	800467a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d008      	beq.n	8004632 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004620:	4b19      	ldr	r3, [pc, #100]	@ (8004688 <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	4916      	ldr	r1, [pc, #88]	@ (8004688 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	4313      	orrs	r3, r2
 8004630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d009      	beq.n	8004652 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800463e:	4b12      	ldr	r3, [pc, #72]	@ (8004688 <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	490e      	ldr	r1, [pc, #56]	@ (8004688 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	4313      	orrs	r3, r2
 8004650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004652:	f000 f821 	bl	8004698 <HAL_RCC_GetSysClockFreq>
 8004656:	4602      	mov	r2, r0
 8004658:	4b0b      	ldr	r3, [pc, #44]	@ (8004688 <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	091b      	lsrs	r3, r3, #4
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	490a      	ldr	r1, [pc, #40]	@ (800468c <HAL_RCC_ClockConfig+0x1c0>)
 8004664:	5ccb      	ldrb	r3, [r1, r3]
 8004666:	fa22 f303 	lsr.w	r3, r2, r3
 800466a:	4a09      	ldr	r2, [pc, #36]	@ (8004690 <HAL_RCC_ClockConfig+0x1c4>)
 800466c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800466e:	4b09      	ldr	r3, [pc, #36]	@ (8004694 <HAL_RCC_ClockConfig+0x1c8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe fc54 	bl	8002f20 <HAL_InitTick>

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40023c00 	.word	0x40023c00
 8004688:	40023800 	.word	0x40023800
 800468c:	0800c1b0 	.word	0x0800c1b0
 8004690:	20000008 	.word	0x20000008
 8004694:	2000000c 	.word	0x2000000c

08004698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800469c:	b094      	sub	sp, #80	@ 0x50
 800469e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046b0:	4b79      	ldr	r3, [pc, #484]	@ (8004898 <HAL_RCC_GetSysClockFreq+0x200>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 030c 	and.w	r3, r3, #12
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d00d      	beq.n	80046d8 <HAL_RCC_GetSysClockFreq+0x40>
 80046bc:	2b08      	cmp	r3, #8
 80046be:	f200 80e1 	bhi.w	8004884 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <HAL_RCC_GetSysClockFreq+0x34>
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d003      	beq.n	80046d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80046ca:	e0db      	b.n	8004884 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046cc:	4b73      	ldr	r3, [pc, #460]	@ (800489c <HAL_RCC_GetSysClockFreq+0x204>)
 80046ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046d0:	e0db      	b.n	800488a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046d2:	4b73      	ldr	r3, [pc, #460]	@ (80048a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80046d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046d6:	e0d8      	b.n	800488a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046d8:	4b6f      	ldr	r3, [pc, #444]	@ (8004898 <HAL_RCC_GetSysClockFreq+0x200>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004898 <HAL_RCC_GetSysClockFreq+0x200>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d063      	beq.n	80047b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004898 <HAL_RCC_GetSysClockFreq+0x200>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	099b      	lsrs	r3, r3, #6
 80046f4:	2200      	movs	r2, #0
 80046f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004700:	633b      	str	r3, [r7, #48]	@ 0x30
 8004702:	2300      	movs	r3, #0
 8004704:	637b      	str	r3, [r7, #52]	@ 0x34
 8004706:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800470a:	4622      	mov	r2, r4
 800470c:	462b      	mov	r3, r5
 800470e:	f04f 0000 	mov.w	r0, #0
 8004712:	f04f 0100 	mov.w	r1, #0
 8004716:	0159      	lsls	r1, r3, #5
 8004718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800471c:	0150      	lsls	r0, r2, #5
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4621      	mov	r1, r4
 8004724:	1a51      	subs	r1, r2, r1
 8004726:	6139      	str	r1, [r7, #16]
 8004728:	4629      	mov	r1, r5
 800472a:	eb63 0301 	sbc.w	r3, r3, r1
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800473c:	4659      	mov	r1, fp
 800473e:	018b      	lsls	r3, r1, #6
 8004740:	4651      	mov	r1, sl
 8004742:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004746:	4651      	mov	r1, sl
 8004748:	018a      	lsls	r2, r1, #6
 800474a:	4651      	mov	r1, sl
 800474c:	ebb2 0801 	subs.w	r8, r2, r1
 8004750:	4659      	mov	r1, fp
 8004752:	eb63 0901 	sbc.w	r9, r3, r1
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	f04f 0300 	mov.w	r3, #0
 800475e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004762:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004766:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800476a:	4690      	mov	r8, r2
 800476c:	4699      	mov	r9, r3
 800476e:	4623      	mov	r3, r4
 8004770:	eb18 0303 	adds.w	r3, r8, r3
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	462b      	mov	r3, r5
 8004778:	eb49 0303 	adc.w	r3, r9, r3
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800478a:	4629      	mov	r1, r5
 800478c:	024b      	lsls	r3, r1, #9
 800478e:	4621      	mov	r1, r4
 8004790:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004794:	4621      	mov	r1, r4
 8004796:	024a      	lsls	r2, r1, #9
 8004798:	4610      	mov	r0, r2
 800479a:	4619      	mov	r1, r3
 800479c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800479e:	2200      	movs	r2, #0
 80047a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047a8:	f7fc fa86 	bl	8000cb8 <__aeabi_uldivmod>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4613      	mov	r3, r2
 80047b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047b4:	e058      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b6:	4b38      	ldr	r3, [pc, #224]	@ (8004898 <HAL_RCC_GetSysClockFreq+0x200>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	099b      	lsrs	r3, r3, #6
 80047bc:	2200      	movs	r2, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	4611      	mov	r1, r2
 80047c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047c6:	623b      	str	r3, [r7, #32]
 80047c8:	2300      	movs	r3, #0
 80047ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80047cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047d0:	4642      	mov	r2, r8
 80047d2:	464b      	mov	r3, r9
 80047d4:	f04f 0000 	mov.w	r0, #0
 80047d8:	f04f 0100 	mov.w	r1, #0
 80047dc:	0159      	lsls	r1, r3, #5
 80047de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047e2:	0150      	lsls	r0, r2, #5
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4641      	mov	r1, r8
 80047ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80047ee:	4649      	mov	r1, r9
 80047f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004800:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004804:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004808:	ebb2 040a 	subs.w	r4, r2, sl
 800480c:	eb63 050b 	sbc.w	r5, r3, fp
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	00eb      	lsls	r3, r5, #3
 800481a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800481e:	00e2      	lsls	r2, r4, #3
 8004820:	4614      	mov	r4, r2
 8004822:	461d      	mov	r5, r3
 8004824:	4643      	mov	r3, r8
 8004826:	18e3      	adds	r3, r4, r3
 8004828:	603b      	str	r3, [r7, #0]
 800482a:	464b      	mov	r3, r9
 800482c:	eb45 0303 	adc.w	r3, r5, r3
 8004830:	607b      	str	r3, [r7, #4]
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800483e:	4629      	mov	r1, r5
 8004840:	028b      	lsls	r3, r1, #10
 8004842:	4621      	mov	r1, r4
 8004844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004848:	4621      	mov	r1, r4
 800484a:	028a      	lsls	r2, r1, #10
 800484c:	4610      	mov	r0, r2
 800484e:	4619      	mov	r1, r3
 8004850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004852:	2200      	movs	r2, #0
 8004854:	61bb      	str	r3, [r7, #24]
 8004856:	61fa      	str	r2, [r7, #28]
 8004858:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800485c:	f7fc fa2c 	bl	8000cb8 <__aeabi_uldivmod>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4613      	mov	r3, r2
 8004866:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004868:	4b0b      	ldr	r3, [pc, #44]	@ (8004898 <HAL_RCC_GetSysClockFreq+0x200>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	0c1b      	lsrs	r3, r3, #16
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	3301      	adds	r3, #1
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004878:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800487a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800487c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004880:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004882:	e002      	b.n	800488a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004884:	4b05      	ldr	r3, [pc, #20]	@ (800489c <HAL_RCC_GetSysClockFreq+0x204>)
 8004886:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800488a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800488c:	4618      	mov	r0, r3
 800488e:	3750      	adds	r7, #80	@ 0x50
 8004890:	46bd      	mov	sp, r7
 8004892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004896:	bf00      	nop
 8004898:	40023800 	.word	0x40023800
 800489c:	00f42400 	.word	0x00f42400
 80048a0:	007a1200 	.word	0x007a1200

080048a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048a8:	4b03      	ldr	r3, [pc, #12]	@ (80048b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048aa:	681b      	ldr	r3, [r3, #0]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	20000008 	.word	0x20000008

080048bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048c0:	f7ff fff0 	bl	80048a4 <HAL_RCC_GetHCLKFreq>
 80048c4:	4602      	mov	r2, r0
 80048c6:	4b05      	ldr	r3, [pc, #20]	@ (80048dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	0a9b      	lsrs	r3, r3, #10
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	4903      	ldr	r1, [pc, #12]	@ (80048e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048d2:	5ccb      	ldrb	r3, [r1, r3]
 80048d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d8:	4618      	mov	r0, r3
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40023800 	.word	0x40023800
 80048e0:	0800c1c0 	.word	0x0800c1c0

080048e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048e8:	f7ff ffdc 	bl	80048a4 <HAL_RCC_GetHCLKFreq>
 80048ec:	4602      	mov	r2, r0
 80048ee:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	0b5b      	lsrs	r3, r3, #13
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	4903      	ldr	r1, [pc, #12]	@ (8004908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048fa:	5ccb      	ldrb	r3, [r1, r3]
 80048fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004900:	4618      	mov	r0, r3
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40023800 	.word	0x40023800
 8004908:	0800c1c0 	.word	0x0800c1c0

0800490c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e041      	b.n	80049a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fd ffee 	bl	8002914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3304      	adds	r3, #4
 8004948:	4619      	mov	r1, r3
 800494a:	4610      	mov	r0, r2
 800494c:	f000 fc3c 	bl	80051c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d001      	beq.n	80049c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e044      	b.n	8004a4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1e      	ldr	r2, [pc, #120]	@ (8004a5c <HAL_TIM_Base_Start_IT+0xb0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d018      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x6c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ee:	d013      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x6c>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004a60 <HAL_TIM_Base_Start_IT+0xb4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00e      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x6c>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a19      	ldr	r2, [pc, #100]	@ (8004a64 <HAL_TIM_Base_Start_IT+0xb8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d009      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x6c>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a17      	ldr	r2, [pc, #92]	@ (8004a68 <HAL_TIM_Base_Start_IT+0xbc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d004      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x6c>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a16      	ldr	r2, [pc, #88]	@ (8004a6c <HAL_TIM_Base_Start_IT+0xc0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d111      	bne.n	8004a3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b06      	cmp	r3, #6
 8004a28:	d010      	beq.n	8004a4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0201 	orr.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3a:	e007      	b.n	8004a4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40010000 	.word	0x40010000
 8004a60:	40000400 	.word	0x40000400
 8004a64:	40000800 	.word	0x40000800
 8004a68:	40000c00 	.word	0x40000c00
 8004a6c:	40014000 	.word	0x40014000

08004a70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e041      	b.n	8004b06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f839 	bl	8004b0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	4619      	mov	r1, r3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	f000 fb8a 	bl	80051c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d109      	bne.n	8004b48 <HAL_TIM_PWM_Start+0x24>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	bf14      	ite	ne
 8004b40:	2301      	movne	r3, #1
 8004b42:	2300      	moveq	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	e022      	b.n	8004b8e <HAL_TIM_PWM_Start+0x6a>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d109      	bne.n	8004b62 <HAL_TIM_PWM_Start+0x3e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	bf14      	ite	ne
 8004b5a:	2301      	movne	r3, #1
 8004b5c:	2300      	moveq	r3, #0
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	e015      	b.n	8004b8e <HAL_TIM_PWM_Start+0x6a>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d109      	bne.n	8004b7c <HAL_TIM_PWM_Start+0x58>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	bf14      	ite	ne
 8004b74:	2301      	movne	r3, #1
 8004b76:	2300      	moveq	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	e008      	b.n	8004b8e <HAL_TIM_PWM_Start+0x6a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e068      	b.n	8004c68 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d104      	bne.n	8004ba6 <HAL_TIM_PWM_Start+0x82>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ba4:	e013      	b.n	8004bce <HAL_TIM_PWM_Start+0xaa>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d104      	bne.n	8004bb6 <HAL_TIM_PWM_Start+0x92>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bb4:	e00b      	b.n	8004bce <HAL_TIM_PWM_Start+0xaa>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d104      	bne.n	8004bc6 <HAL_TIM_PWM_Start+0xa2>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bc4:	e003      	b.n	8004bce <HAL_TIM_PWM_Start+0xaa>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	6839      	ldr	r1, [r7, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fda2 	bl	8005720 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a23      	ldr	r2, [pc, #140]	@ (8004c70 <HAL_TIM_PWM_Start+0x14c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d107      	bne.n	8004bf6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bf4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8004c70 <HAL_TIM_PWM_Start+0x14c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d018      	beq.n	8004c32 <HAL_TIM_PWM_Start+0x10e>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c08:	d013      	beq.n	8004c32 <HAL_TIM_PWM_Start+0x10e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a19      	ldr	r2, [pc, #100]	@ (8004c74 <HAL_TIM_PWM_Start+0x150>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00e      	beq.n	8004c32 <HAL_TIM_PWM_Start+0x10e>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a17      	ldr	r2, [pc, #92]	@ (8004c78 <HAL_TIM_PWM_Start+0x154>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d009      	beq.n	8004c32 <HAL_TIM_PWM_Start+0x10e>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a16      	ldr	r2, [pc, #88]	@ (8004c7c <HAL_TIM_PWM_Start+0x158>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d004      	beq.n	8004c32 <HAL_TIM_PWM_Start+0x10e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a14      	ldr	r2, [pc, #80]	@ (8004c80 <HAL_TIM_PWM_Start+0x15c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d111      	bne.n	8004c56 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b06      	cmp	r3, #6
 8004c42:	d010      	beq.n	8004c66 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c54:	e007      	b.n	8004c66 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 0201 	orr.w	r2, r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40010000 	.word	0x40010000
 8004c74:	40000400 	.word	0x40000400
 8004c78:	40000800 	.word	0x40000800
 8004c7c:	40000c00 	.word	0x40000c00
 8004c80:	40014000 	.word	0x40014000

08004c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d020      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01b      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0202 	mvn.w	r2, #2
 8004cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fa5b 	bl	800518a <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e005      	b.n	8004ce2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fa4d 	bl	8005176 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fa5e 	bl	800519e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d020      	beq.n	8004d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01b      	beq.n	8004d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0204 	mvn.w	r2, #4
 8004d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fa35 	bl	800518a <HAL_TIM_IC_CaptureCallback>
 8004d20:	e005      	b.n	8004d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fa27 	bl	8005176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fa38 	bl	800519e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d020      	beq.n	8004d80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01b      	beq.n	8004d80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0208 	mvn.w	r2, #8
 8004d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2204      	movs	r2, #4
 8004d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fa0f 	bl	800518a <HAL_TIM_IC_CaptureCallback>
 8004d6c:	e005      	b.n	8004d7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fa01 	bl	8005176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fa12 	bl	800519e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d020      	beq.n	8004dcc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d01b      	beq.n	8004dcc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f06f 0210 	mvn.w	r2, #16
 8004d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2208      	movs	r2, #8
 8004da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f9e9 	bl	800518a <HAL_TIM_IC_CaptureCallback>
 8004db8:	e005      	b.n	8004dc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f9db 	bl	8005176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f9ec 	bl	800519e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00c      	beq.n	8004df0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f06f 0201 	mvn.w	r2, #1
 8004de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fd fc66 	bl	80026bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00c      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d007      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fd76 	bl	8005900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00c      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d007      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f9bd 	bl	80051b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00c      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0220 	mvn.w	r2, #32
 8004e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fd48 	bl	80058ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e5c:	bf00      	nop
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e0ae      	b.n	8004fe0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b0c      	cmp	r3, #12
 8004e8e:	f200 809f 	bhi.w	8004fd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e92:	a201      	add	r2, pc, #4	@ (adr r2, 8004e98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004ecd 	.word	0x08004ecd
 8004e9c:	08004fd1 	.word	0x08004fd1
 8004ea0:	08004fd1 	.word	0x08004fd1
 8004ea4:	08004fd1 	.word	0x08004fd1
 8004ea8:	08004f0d 	.word	0x08004f0d
 8004eac:	08004fd1 	.word	0x08004fd1
 8004eb0:	08004fd1 	.word	0x08004fd1
 8004eb4:	08004fd1 	.word	0x08004fd1
 8004eb8:	08004f4f 	.word	0x08004f4f
 8004ebc:	08004fd1 	.word	0x08004fd1
 8004ec0:	08004fd1 	.word	0x08004fd1
 8004ec4:	08004fd1 	.word	0x08004fd1
 8004ec8:	08004f8f 	.word	0x08004f8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 f9fe 	bl	80052d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0208 	orr.w	r2, r2, #8
 8004ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0204 	bic.w	r2, r2, #4
 8004ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6999      	ldr	r1, [r3, #24]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	691a      	ldr	r2, [r3, #16]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	619a      	str	r2, [r3, #24]
      break;
 8004f0a:	e064      	b.n	8004fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fa44 	bl	80053a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6999      	ldr	r1, [r3, #24]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	021a      	lsls	r2, r3, #8
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	619a      	str	r2, [r3, #24]
      break;
 8004f4c:	e043      	b.n	8004fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fa8f 	bl	8005478 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69da      	ldr	r2, [r3, #28]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0208 	orr.w	r2, r2, #8
 8004f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0204 	bic.w	r2, r2, #4
 8004f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69d9      	ldr	r1, [r3, #28]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	61da      	str	r2, [r3, #28]
      break;
 8004f8c:	e023      	b.n	8004fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68b9      	ldr	r1, [r7, #8]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fad9 	bl	800554c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69da      	ldr	r2, [r3, #28]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69d9      	ldr	r1, [r3, #28]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	021a      	lsls	r2, r3, #8
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	61da      	str	r2, [r3, #28]
      break;
 8004fce:	e002      	b.n	8004fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_TIM_ConfigClockSource+0x1c>
 8005000:	2302      	movs	r3, #2
 8005002:	e0b4      	b.n	800516e <HAL_TIM_ConfigClockSource+0x186>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800502a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800503c:	d03e      	beq.n	80050bc <HAL_TIM_ConfigClockSource+0xd4>
 800503e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005042:	f200 8087 	bhi.w	8005154 <HAL_TIM_ConfigClockSource+0x16c>
 8005046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800504a:	f000 8086 	beq.w	800515a <HAL_TIM_ConfigClockSource+0x172>
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005052:	d87f      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x16c>
 8005054:	2b70      	cmp	r3, #112	@ 0x70
 8005056:	d01a      	beq.n	800508e <HAL_TIM_ConfigClockSource+0xa6>
 8005058:	2b70      	cmp	r3, #112	@ 0x70
 800505a:	d87b      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x16c>
 800505c:	2b60      	cmp	r3, #96	@ 0x60
 800505e:	d050      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0x11a>
 8005060:	2b60      	cmp	r3, #96	@ 0x60
 8005062:	d877      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x16c>
 8005064:	2b50      	cmp	r3, #80	@ 0x50
 8005066:	d03c      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0xfa>
 8005068:	2b50      	cmp	r3, #80	@ 0x50
 800506a:	d873      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x16c>
 800506c:	2b40      	cmp	r3, #64	@ 0x40
 800506e:	d058      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0x13a>
 8005070:	2b40      	cmp	r3, #64	@ 0x40
 8005072:	d86f      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x16c>
 8005074:	2b30      	cmp	r3, #48	@ 0x30
 8005076:	d064      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x15a>
 8005078:	2b30      	cmp	r3, #48	@ 0x30
 800507a:	d86b      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x16c>
 800507c:	2b20      	cmp	r3, #32
 800507e:	d060      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x15a>
 8005080:	2b20      	cmp	r3, #32
 8005082:	d867      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	2b00      	cmp	r3, #0
 8005086:	d05c      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x15a>
 8005088:	2b10      	cmp	r3, #16
 800508a:	d05a      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x15a>
 800508c:	e062      	b.n	8005154 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800509e:	f000 fb1f 	bl	80056e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	609a      	str	r2, [r3, #8]
      break;
 80050ba:	e04f      	b.n	800515c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050cc:	f000 fb08 	bl	80056e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050de:	609a      	str	r2, [r3, #8]
      break;
 80050e0:	e03c      	b.n	800515c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ee:	461a      	mov	r2, r3
 80050f0:	f000 fa7c 	bl	80055ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2150      	movs	r1, #80	@ 0x50
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fad5 	bl	80056aa <TIM_ITRx_SetConfig>
      break;
 8005100:	e02c      	b.n	800515c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800510e:	461a      	mov	r2, r3
 8005110:	f000 fa9b 	bl	800564a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2160      	movs	r1, #96	@ 0x60
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fac5 	bl	80056aa <TIM_ITRx_SetConfig>
      break;
 8005120:	e01c      	b.n	800515c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800512e:	461a      	mov	r2, r3
 8005130:	f000 fa5c 	bl	80055ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2140      	movs	r1, #64	@ 0x40
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fab5 	bl	80056aa <TIM_ITRx_SetConfig>
      break;
 8005140:	e00c      	b.n	800515c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4619      	mov	r1, r3
 800514c:	4610      	mov	r0, r2
 800514e:	f000 faac 	bl	80056aa <TIM_ITRx_SetConfig>
      break;
 8005152:	e003      	b.n	800515c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	73fb      	strb	r3, [r7, #15]
      break;
 8005158:	e000      	b.n	800515c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800515a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800516c:	7bfb      	ldrb	r3, [r7, #15]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
	...

080051c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a37      	ldr	r2, [pc, #220]	@ (80052b8 <TIM_Base_SetConfig+0xf0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00f      	beq.n	8005200 <TIM_Base_SetConfig+0x38>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e6:	d00b      	beq.n	8005200 <TIM_Base_SetConfig+0x38>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a34      	ldr	r2, [pc, #208]	@ (80052bc <TIM_Base_SetConfig+0xf4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d007      	beq.n	8005200 <TIM_Base_SetConfig+0x38>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a33      	ldr	r2, [pc, #204]	@ (80052c0 <TIM_Base_SetConfig+0xf8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d003      	beq.n	8005200 <TIM_Base_SetConfig+0x38>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a32      	ldr	r2, [pc, #200]	@ (80052c4 <TIM_Base_SetConfig+0xfc>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d108      	bne.n	8005212 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a28      	ldr	r2, [pc, #160]	@ (80052b8 <TIM_Base_SetConfig+0xf0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d01b      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005220:	d017      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a25      	ldr	r2, [pc, #148]	@ (80052bc <TIM_Base_SetConfig+0xf4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a24      	ldr	r2, [pc, #144]	@ (80052c0 <TIM_Base_SetConfig+0xf8>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00f      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a23      	ldr	r2, [pc, #140]	@ (80052c4 <TIM_Base_SetConfig+0xfc>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00b      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a22      	ldr	r2, [pc, #136]	@ (80052c8 <TIM_Base_SetConfig+0x100>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d007      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a21      	ldr	r2, [pc, #132]	@ (80052cc <TIM_Base_SetConfig+0x104>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d003      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a20      	ldr	r2, [pc, #128]	@ (80052d0 <TIM_Base_SetConfig+0x108>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d108      	bne.n	8005264 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a0c      	ldr	r2, [pc, #48]	@ (80052b8 <TIM_Base_SetConfig+0xf0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d103      	bne.n	8005292 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	691a      	ldr	r2, [r3, #16]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f043 0204 	orr.w	r2, r3, #4
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	601a      	str	r2, [r3, #0]
}
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40010000 	.word	0x40010000
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40000c00 	.word	0x40000c00
 80052c8:	40014000 	.word	0x40014000
 80052cc:	40014400 	.word	0x40014400
 80052d0:	40014800 	.word	0x40014800

080052d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	f023 0201 	bic.w	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0303 	bic.w	r3, r3, #3
 800530a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f023 0302 	bic.w	r3, r3, #2
 800531c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a1c      	ldr	r2, [pc, #112]	@ (800539c <TIM_OC1_SetConfig+0xc8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d10c      	bne.n	800534a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f023 0308 	bic.w	r3, r3, #8
 8005336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f023 0304 	bic.w	r3, r3, #4
 8005348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a13      	ldr	r2, [pc, #76]	@ (800539c <TIM_OC1_SetConfig+0xc8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d111      	bne.n	8005376 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	621a      	str	r2, [r3, #32]
}
 8005390:	bf00      	nop
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	40010000 	.word	0x40010000

080053a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	f023 0210 	bic.w	r2, r3, #16
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f023 0320 	bic.w	r3, r3, #32
 80053ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005474 <TIM_OC2_SetConfig+0xd4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d10d      	bne.n	800541c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800541a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a15      	ldr	r2, [pc, #84]	@ (8005474 <TIM_OC2_SetConfig+0xd4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d113      	bne.n	800544c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800542a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	621a      	str	r2, [r3, #32]
}
 8005466:	bf00      	nop
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40010000 	.word	0x40010000

08005478 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0303 	bic.w	r3, r3, #3
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005548 <TIM_OC3_SetConfig+0xd0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d10d      	bne.n	80054f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a14      	ldr	r2, [pc, #80]	@ (8005548 <TIM_OC3_SetConfig+0xd0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d113      	bne.n	8005522 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	621a      	str	r2, [r3, #32]
}
 800553c:	bf00      	nop
 800553e:	371c      	adds	r7, #28
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	40010000 	.word	0x40010000

0800554c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800557a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	021b      	lsls	r3, r3, #8
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005596:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	031b      	lsls	r3, r3, #12
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a10      	ldr	r2, [pc, #64]	@ (80055e8 <TIM_OC4_SetConfig+0x9c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d109      	bne.n	80055c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	019b      	lsls	r3, r3, #6
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	621a      	str	r2, [r3, #32]
}
 80055da:	bf00      	nop
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40010000 	.word	0x40010000

080055ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	f023 0201 	bic.w	r2, r3, #1
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f023 030a 	bic.w	r3, r3, #10
 8005628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4313      	orrs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	621a      	str	r2, [r3, #32]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800564a:	b480      	push	{r7}
 800564c:	b087      	sub	sp, #28
 800564e:	af00      	add	r7, sp, #0
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	f023 0210 	bic.w	r2, r3, #16
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005674:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	031b      	lsls	r3, r3, #12
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005686:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f043 0307 	orr.w	r3, r3, #7
 80056cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	609a      	str	r2, [r3, #8]
}
 80056d4:	bf00      	nop
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	021a      	lsls	r2, r3, #8
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	431a      	orrs	r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4313      	orrs	r3, r2
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	4313      	orrs	r3, r2
 800570c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	609a      	str	r2, [r3, #8]
}
 8005714:	bf00      	nop
 8005716:	371c      	adds	r7, #28
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	2201      	movs	r2, #1
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a1a      	ldr	r2, [r3, #32]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	43db      	mvns	r3, r3
 8005742:	401a      	ands	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a1a      	ldr	r2, [r3, #32]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	fa01 f303 	lsl.w	r3, r1, r3
 8005758:	431a      	orrs	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	621a      	str	r2, [r3, #32]
}
 800575e:	bf00      	nop
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
	...

0800576c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005780:	2302      	movs	r3, #2
 8005782:	e050      	b.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d018      	beq.n	80057fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d0:	d013      	beq.n	80057fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a18      	ldr	r2, [pc, #96]	@ (8005838 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00e      	beq.n	80057fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a16      	ldr	r2, [pc, #88]	@ (800583c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d009      	beq.n	80057fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a15      	ldr	r2, [pc, #84]	@ (8005840 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d004      	beq.n	80057fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a13      	ldr	r2, [pc, #76]	@ (8005844 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d10c      	bne.n	8005814 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005800:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	4313      	orrs	r3, r2
 800580a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40010000 	.word	0x40010000
 8005838:	40000400 	.word	0x40000400
 800583c:	40000800 	.word	0x40000800
 8005840:	40000c00 	.word	0x40000c00
 8005844:	40014000 	.word	0x40014000

08005848 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005860:	2302      	movs	r3, #2
 8005862:	e03d      	b.n	80058e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e042      	b.n	80059ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fd f8ce 	bl	8002adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2224      	movs	r2, #36	@ 0x24
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005956:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fdd3 	bl	8006504 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800596c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695a      	ldr	r2, [r3, #20]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800597c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68da      	ldr	r2, [r3, #12]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800598c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08a      	sub	sp, #40	@ 0x28
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	4613      	mov	r3, r2
 80059c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	d175      	bne.n	8005ac0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_UART_Transmit+0x2c>
 80059da:	88fb      	ldrh	r3, [r7, #6]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e06e      	b.n	8005ac2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2221      	movs	r2, #33	@ 0x21
 80059ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059f2:	f7fd fad9 	bl	8002fa8 <HAL_GetTick>
 80059f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	88fa      	ldrh	r2, [r7, #6]
 80059fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	88fa      	ldrh	r2, [r7, #6]
 8005a02:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a0c:	d108      	bne.n	8005a20 <HAL_UART_Transmit+0x6c>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d104      	bne.n	8005a20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	61bb      	str	r3, [r7, #24]
 8005a1e:	e003      	b.n	8005a28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a28:	e02e      	b.n	8005a88 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2200      	movs	r2, #0
 8005a32:	2180      	movs	r1, #128	@ 0x80
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 fb37 	bl	80060a8 <UART_WaitOnFlagUntilTimeout>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e03a      	b.n	8005ac2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10b      	bne.n	8005a6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	3302      	adds	r3, #2
 8005a66:	61bb      	str	r3, [r7, #24]
 8005a68:	e007      	b.n	8005a7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	781a      	ldrb	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	3301      	adds	r3, #1
 8005a78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1cb      	bne.n	8005a2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	2140      	movs	r1, #64	@ 0x40
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 fb03 	bl	80060a8 <UART_WaitOnFlagUntilTimeout>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d005      	beq.n	8005ab4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e006      	b.n	8005ac2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	e000      	b.n	8005ac2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ac0:	2302      	movs	r3, #2
  }
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3720      	adds	r7, #32
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	60f8      	str	r0, [r7, #12]
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	d112      	bne.n	8005b0a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <HAL_UART_Receive_IT+0x26>
 8005aea:	88fb      	ldrh	r3, [r7, #6]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e00b      	b.n	8005b0c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	461a      	mov	r2, r3
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 fb2a 	bl	800615a <UART_Start_Receive_IT>
 8005b06:	4603      	mov	r3, r0
 8005b08:	e000      	b.n	8005b0c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005b0a:	2302      	movs	r3, #2
  }
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b0ba      	sub	sp, #232	@ 0xe8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10f      	bne.n	8005b7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <HAL_UART_IRQHandler+0x66>
 8005b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fc07 	bl	8006386 <UART_Receive_IT>
      return;
 8005b78:	e273      	b.n	8006062 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 80de 	beq.w	8005d40 <HAL_UART_IRQHandler+0x22c>
 8005b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d106      	bne.n	8005b9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b94:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 80d1 	beq.w	8005d40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00b      	beq.n	8005bc2 <HAL_UART_IRQHandler+0xae>
 8005baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d005      	beq.n	8005bc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bba:	f043 0201 	orr.w	r2, r3, #1
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bc6:	f003 0304 	and.w	r3, r3, #4
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00b      	beq.n	8005be6 <HAL_UART_IRQHandler+0xd2>
 8005bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d005      	beq.n	8005be6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bde:	f043 0202 	orr.w	r2, r3, #2
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00b      	beq.n	8005c0a <HAL_UART_IRQHandler+0xf6>
 8005bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d005      	beq.n	8005c0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c02:	f043 0204 	orr.w	r2, r3, #4
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d011      	beq.n	8005c3a <HAL_UART_IRQHandler+0x126>
 8005c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d105      	bne.n	8005c2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d005      	beq.n	8005c3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c32:	f043 0208 	orr.w	r2, r3, #8
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 820a 	beq.w	8006058 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c48:	f003 0320 	and.w	r3, r3, #32
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d008      	beq.n	8005c62 <HAL_UART_IRQHandler+0x14e>
 8005c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fb92 	bl	8006386 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6c:	2b40      	cmp	r3, #64	@ 0x40
 8005c6e:	bf0c      	ite	eq
 8005c70:	2301      	moveq	r3, #1
 8005c72:	2300      	movne	r3, #0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d103      	bne.n	8005c8e <HAL_UART_IRQHandler+0x17a>
 8005c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d04f      	beq.n	8005d2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fa9d 	bl	80061ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ca0:	d141      	bne.n	8005d26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3314      	adds	r3, #20
 8005ca8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3314      	adds	r3, #20
 8005cca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005cce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005cda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005cde:	e841 2300 	strex	r3, r2, [r1]
 8005ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005ce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1d9      	bne.n	8005ca2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d013      	beq.n	8005d1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfa:	4a8a      	ldr	r2, [pc, #552]	@ (8005f24 <HAL_UART_IRQHandler+0x410>)
 8005cfc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fd ff6d 	bl	8003be2 <HAL_DMA_Abort_IT>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d016      	beq.n	8005d3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005d18:	4610      	mov	r0, r2
 8005d1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d1c:	e00e      	b.n	8005d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f9ac 	bl	800607c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d24:	e00a      	b.n	8005d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f9a8 	bl	800607c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d2c:	e006      	b.n	8005d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f9a4 	bl	800607c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005d3a:	e18d      	b.n	8006058 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d3c:	bf00      	nop
    return;
 8005d3e:	e18b      	b.n	8006058 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	f040 8167 	bne.w	8006018 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d4e:	f003 0310 	and.w	r3, r3, #16
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 8160 	beq.w	8006018 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d5c:	f003 0310 	and.w	r3, r3, #16
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8159 	beq.w	8006018 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d66:	2300      	movs	r3, #0
 8005d68:	60bb      	str	r3, [r7, #8]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	60bb      	str	r3, [r7, #8]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d86:	2b40      	cmp	r3, #64	@ 0x40
 8005d88:	f040 80ce 	bne.w	8005f28 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 80a9 	beq.w	8005ef4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005daa:	429a      	cmp	r2, r3
 8005dac:	f080 80a2 	bcs.w	8005ef4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005db6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dc2:	f000 8088 	beq.w	8005ed6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	330c      	adds	r3, #12
 8005dcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005dd4:	e853 3f00 	ldrex	r3, [r3]
 8005dd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005de4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	330c      	adds	r3, #12
 8005dee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005df2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005df6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005dfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1d9      	bne.n	8005dc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3314      	adds	r3, #20
 8005e18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e1c:	e853 3f00 	ldrex	r3, [r3]
 8005e20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e24:	f023 0301 	bic.w	r3, r3, #1
 8005e28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3314      	adds	r3, #20
 8005e32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005e3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005e3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005e48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e1      	bne.n	8005e12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3314      	adds	r3, #20
 8005e54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e58:	e853 3f00 	ldrex	r3, [r3]
 8005e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005e5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3314      	adds	r3, #20
 8005e6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005e72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e3      	bne.n	8005e4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	330c      	adds	r3, #12
 8005e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ea4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ea6:	f023 0310 	bic.w	r3, r3, #16
 8005eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	330c      	adds	r3, #12
 8005eb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005eb8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005eba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ebe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e3      	bne.n	8005e94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fd fe16 	bl	8003b02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f8cf 	bl	8006090 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005ef2:	e0b3      	b.n	800605c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ef8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005efc:	429a      	cmp	r2, r3
 8005efe:	f040 80ad 	bne.w	800605c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f0c:	f040 80a6 	bne.w	800605c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f8b7 	bl	8006090 <HAL_UARTEx_RxEventCallback>
      return;
 8005f22:	e09b      	b.n	800605c <HAL_UART_IRQHandler+0x548>
 8005f24:	08006295 	.word	0x08006295
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 808e 	beq.w	8006060 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005f44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 8089 	beq.w	8006060 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	330c      	adds	r3, #12
 8005f54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f58:	e853 3f00 	ldrex	r3, [r3]
 8005f5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005f72:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1e3      	bne.n	8005f4e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3314      	adds	r3, #20
 8005f8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	623b      	str	r3, [r7, #32]
   return(result);
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	f023 0301 	bic.w	r3, r3, #1
 8005f9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3314      	adds	r3, #20
 8005fa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005faa:	633a      	str	r2, [r7, #48]	@ 0x30
 8005fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e3      	bne.n	8005f86 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	330c      	adds	r3, #12
 8005fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0310 	bic.w	r3, r3, #16
 8005fe2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	330c      	adds	r3, #12
 8005fec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005ff0:	61fa      	str	r2, [r7, #28]
 8005ff2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	69b9      	ldr	r1, [r7, #24]
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e3      	bne.n	8005fcc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800600a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800600e:	4619      	mov	r1, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f83d 	bl	8006090 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006016:	e023      	b.n	8006060 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800601c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006020:	2b00      	cmp	r3, #0
 8006022:	d009      	beq.n	8006038 <HAL_UART_IRQHandler+0x524>
 8006024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f940 	bl	80062b6 <UART_Transmit_IT>
    return;
 8006036:	e014      	b.n	8006062 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800603c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00e      	beq.n	8006062 <HAL_UART_IRQHandler+0x54e>
 8006044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d008      	beq.n	8006062 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f980 	bl	8006356 <UART_EndTransmit_IT>
    return;
 8006056:	e004      	b.n	8006062 <HAL_UART_IRQHandler+0x54e>
    return;
 8006058:	bf00      	nop
 800605a:	e002      	b.n	8006062 <HAL_UART_IRQHandler+0x54e>
      return;
 800605c:	bf00      	nop
 800605e:	e000      	b.n	8006062 <HAL_UART_IRQHandler+0x54e>
      return;
 8006060:	bf00      	nop
  }
}
 8006062:	37e8      	adds	r7, #232	@ 0xe8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	603b      	str	r3, [r7, #0]
 80060b4:	4613      	mov	r3, r2
 80060b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060b8:	e03b      	b.n	8006132 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d037      	beq.n	8006132 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c2:	f7fc ff71 	bl	8002fa8 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	6a3a      	ldr	r2, [r7, #32]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d302      	bcc.n	80060d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e03a      	b.n	8006152 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f003 0304 	and.w	r3, r3, #4
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d023      	beq.n	8006132 <UART_WaitOnFlagUntilTimeout+0x8a>
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2b80      	cmp	r3, #128	@ 0x80
 80060ee:	d020      	beq.n	8006132 <UART_WaitOnFlagUntilTimeout+0x8a>
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b40      	cmp	r3, #64	@ 0x40
 80060f4:	d01d      	beq.n	8006132 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b08      	cmp	r3, #8
 8006102:	d116      	bne.n	8006132 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006104:	2300      	movs	r3, #0
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	617b      	str	r3, [r7, #20]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 f857 	bl	80061ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2208      	movs	r2, #8
 8006124:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e00f      	b.n	8006152 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4013      	ands	r3, r2
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	429a      	cmp	r2, r3
 8006140:	bf0c      	ite	eq
 8006142:	2301      	moveq	r3, #1
 8006144:	2300      	movne	r3, #0
 8006146:	b2db      	uxtb	r3, r3
 8006148:	461a      	mov	r2, r3
 800614a:	79fb      	ldrb	r3, [r7, #7]
 800614c:	429a      	cmp	r2, r3
 800614e:	d0b4      	beq.n	80060ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800615a:	b480      	push	{r7}
 800615c:	b085      	sub	sp, #20
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	4613      	mov	r3, r2
 8006166:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	88fa      	ldrh	r2, [r7, #6]
 8006172:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	88fa      	ldrh	r2, [r7, #6]
 8006178:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2222      	movs	r2, #34	@ 0x22
 8006184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d007      	beq.n	80061a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800619e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695a      	ldr	r2, [r3, #20]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0201 	orr.w	r2, r2, #1
 80061ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0220 	orr.w	r2, r2, #32
 80061be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b095      	sub	sp, #84	@ 0x54
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	330c      	adds	r3, #12
 80061dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	330c      	adds	r3, #12
 80061f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80061f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e5      	bne.n	80061d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3314      	adds	r3, #20
 8006210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	61fb      	str	r3, [r7, #28]
   return(result);
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	f023 0301 	bic.w	r3, r3, #1
 8006220:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3314      	adds	r3, #20
 8006228:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800622a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800622c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e5      	bne.n	800620a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006242:	2b01      	cmp	r3, #1
 8006244:	d119      	bne.n	800627a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	330c      	adds	r3, #12
 800624c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	e853 3f00 	ldrex	r3, [r3]
 8006254:	60bb      	str	r3, [r7, #8]
   return(result);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f023 0310 	bic.w	r3, r3, #16
 800625c:	647b      	str	r3, [r7, #68]	@ 0x44
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	330c      	adds	r3, #12
 8006264:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006266:	61ba      	str	r2, [r7, #24]
 8006268:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626a:	6979      	ldr	r1, [r7, #20]
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	e841 2300 	strex	r3, r2, [r1]
 8006272:	613b      	str	r3, [r7, #16]
   return(result);
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1e5      	bne.n	8006246 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2220      	movs	r2, #32
 800627e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006288:	bf00      	nop
 800628a:	3754      	adds	r7, #84	@ 0x54
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f7ff fee7 	bl	800607c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062ae:	bf00      	nop
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b085      	sub	sp, #20
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b21      	cmp	r3, #33	@ 0x21
 80062c8:	d13e      	bne.n	8006348 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062d2:	d114      	bne.n	80062fe <UART_Transmit_IT+0x48>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d110      	bne.n	80062fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	1c9a      	adds	r2, r3, #2
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	621a      	str	r2, [r3, #32]
 80062fc:	e008      	b.n	8006310 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	1c59      	adds	r1, r3, #1
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6211      	str	r1, [r2, #32]
 8006308:	781a      	ldrb	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b01      	subs	r3, #1
 8006318:	b29b      	uxth	r3, r3
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	4619      	mov	r1, r3
 800631e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10f      	bne.n	8006344 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006332:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006342:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	e000      	b.n	800634a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006348:	2302      	movs	r3, #2
  }
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b082      	sub	sp, #8
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800636c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2220      	movs	r2, #32
 8006372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff fe76 	bl	8006068 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b08c      	sub	sp, #48	@ 0x30
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800638e:	2300      	movs	r3, #0
 8006390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006392:	2300      	movs	r3, #0
 8006394:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b22      	cmp	r3, #34	@ 0x22
 80063a0:	f040 80aa 	bne.w	80064f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ac:	d115      	bne.n	80063da <UART_Receive_IT+0x54>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d111      	bne.n	80063da <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d2:	1c9a      	adds	r2, r3, #2
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80063d8:	e024      	b.n	8006424 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063e8:	d007      	beq.n	80063fa <UART_Receive_IT+0x74>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10a      	bne.n	8006408 <UART_Receive_IT+0x82>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d106      	bne.n	8006408 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	b2da      	uxtb	r2, r3
 8006402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	e008      	b.n	800641a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	b2db      	uxtb	r3, r3
 8006410:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006414:	b2da      	uxtb	r2, r3
 8006416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006418:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b29b      	uxth	r3, r3
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	4619      	mov	r1, r3
 8006432:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006434:	2b00      	cmp	r3, #0
 8006436:	d15d      	bne.n	80064f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0220 	bic.w	r2, r2, #32
 8006446:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	695a      	ldr	r2, [r3, #20]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0201 	bic.w	r2, r2, #1
 8006466:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2220      	movs	r2, #32
 800646c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800647a:	2b01      	cmp	r3, #1
 800647c:	d135      	bne.n	80064ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	330c      	adds	r3, #12
 800648a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	613b      	str	r3, [r7, #16]
   return(result);
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f023 0310 	bic.w	r3, r3, #16
 800649a:	627b      	str	r3, [r7, #36]	@ 0x24
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	330c      	adds	r3, #12
 80064a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064a4:	623a      	str	r2, [r7, #32]
 80064a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	69f9      	ldr	r1, [r7, #28]
 80064aa:	6a3a      	ldr	r2, [r7, #32]
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e5      	bne.n	8006484 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0310 	and.w	r3, r3, #16
 80064c2:	2b10      	cmp	r3, #16
 80064c4:	d10a      	bne.n	80064dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff fdd4 	bl	8006090 <HAL_UARTEx_RxEventCallback>
 80064e8:	e002      	b.n	80064f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fb f8ec 	bl	80016c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	e002      	b.n	80064fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	e000      	b.n	80064fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80064f8:	2302      	movs	r3, #2
  }
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3730      	adds	r7, #48	@ 0x30
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006508:	b0c0      	sub	sp, #256	@ 0x100
 800650a:	af00      	add	r7, sp, #0
 800650c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800651c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006520:	68d9      	ldr	r1, [r3, #12]
 8006522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	ea40 0301 	orr.w	r3, r0, r1
 800652c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800652e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	431a      	orrs	r2, r3
 800653c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	431a      	orrs	r2, r3
 8006544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	4313      	orrs	r3, r2
 800654c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800655c:	f021 010c 	bic.w	r1, r1, #12
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800656a:	430b      	orrs	r3, r1
 800656c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800656e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800657a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657e:	6999      	ldr	r1, [r3, #24]
 8006580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	ea40 0301 	orr.w	r3, r0, r1
 800658a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800658c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4b8f      	ldr	r3, [pc, #572]	@ (80067d0 <UART_SetConfig+0x2cc>)
 8006594:	429a      	cmp	r2, r3
 8006596:	d005      	beq.n	80065a4 <UART_SetConfig+0xa0>
 8006598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	4b8d      	ldr	r3, [pc, #564]	@ (80067d4 <UART_SetConfig+0x2d0>)
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d104      	bne.n	80065ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065a4:	f7fe f99e 	bl	80048e4 <HAL_RCC_GetPCLK2Freq>
 80065a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80065ac:	e003      	b.n	80065b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065ae:	f7fe f985 	bl	80048bc <HAL_RCC_GetPCLK1Freq>
 80065b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065c0:	f040 810c 	bne.w	80067dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80065d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065d6:	4622      	mov	r2, r4
 80065d8:	462b      	mov	r3, r5
 80065da:	1891      	adds	r1, r2, r2
 80065dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80065de:	415b      	adcs	r3, r3
 80065e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065e6:	4621      	mov	r1, r4
 80065e8:	eb12 0801 	adds.w	r8, r2, r1
 80065ec:	4629      	mov	r1, r5
 80065ee:	eb43 0901 	adc.w	r9, r3, r1
 80065f2:	f04f 0200 	mov.w	r2, #0
 80065f6:	f04f 0300 	mov.w	r3, #0
 80065fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006602:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006606:	4690      	mov	r8, r2
 8006608:	4699      	mov	r9, r3
 800660a:	4623      	mov	r3, r4
 800660c:	eb18 0303 	adds.w	r3, r8, r3
 8006610:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006614:	462b      	mov	r3, r5
 8006616:	eb49 0303 	adc.w	r3, r9, r3
 800661a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800661e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800662a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800662e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006632:	460b      	mov	r3, r1
 8006634:	18db      	adds	r3, r3, r3
 8006636:	653b      	str	r3, [r7, #80]	@ 0x50
 8006638:	4613      	mov	r3, r2
 800663a:	eb42 0303 	adc.w	r3, r2, r3
 800663e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006640:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006644:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006648:	f7fa fb36 	bl	8000cb8 <__aeabi_uldivmod>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4b61      	ldr	r3, [pc, #388]	@ (80067d8 <UART_SetConfig+0x2d4>)
 8006652:	fba3 2302 	umull	r2, r3, r3, r2
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	011c      	lsls	r4, r3, #4
 800665a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800665e:	2200      	movs	r2, #0
 8006660:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006664:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006668:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800666c:	4642      	mov	r2, r8
 800666e:	464b      	mov	r3, r9
 8006670:	1891      	adds	r1, r2, r2
 8006672:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006674:	415b      	adcs	r3, r3
 8006676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006678:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800667c:	4641      	mov	r1, r8
 800667e:	eb12 0a01 	adds.w	sl, r2, r1
 8006682:	4649      	mov	r1, r9
 8006684:	eb43 0b01 	adc.w	fp, r3, r1
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	f04f 0300 	mov.w	r3, #0
 8006690:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006694:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006698:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800669c:	4692      	mov	sl, r2
 800669e:	469b      	mov	fp, r3
 80066a0:	4643      	mov	r3, r8
 80066a2:	eb1a 0303 	adds.w	r3, sl, r3
 80066a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066aa:	464b      	mov	r3, r9
 80066ac:	eb4b 0303 	adc.w	r3, fp, r3
 80066b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80066c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80066c8:	460b      	mov	r3, r1
 80066ca:	18db      	adds	r3, r3, r3
 80066cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80066ce:	4613      	mov	r3, r2
 80066d0:	eb42 0303 	adc.w	r3, r2, r3
 80066d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80066d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80066de:	f7fa faeb 	bl	8000cb8 <__aeabi_uldivmod>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4611      	mov	r1, r2
 80066e8:	4b3b      	ldr	r3, [pc, #236]	@ (80067d8 <UART_SetConfig+0x2d4>)
 80066ea:	fba3 2301 	umull	r2, r3, r3, r1
 80066ee:	095b      	lsrs	r3, r3, #5
 80066f0:	2264      	movs	r2, #100	@ 0x64
 80066f2:	fb02 f303 	mul.w	r3, r2, r3
 80066f6:	1acb      	subs	r3, r1, r3
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066fe:	4b36      	ldr	r3, [pc, #216]	@ (80067d8 <UART_SetConfig+0x2d4>)
 8006700:	fba3 2302 	umull	r2, r3, r3, r2
 8006704:	095b      	lsrs	r3, r3, #5
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800670c:	441c      	add	r4, r3
 800670e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006712:	2200      	movs	r2, #0
 8006714:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006718:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800671c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006720:	4642      	mov	r2, r8
 8006722:	464b      	mov	r3, r9
 8006724:	1891      	adds	r1, r2, r2
 8006726:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006728:	415b      	adcs	r3, r3
 800672a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800672c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006730:	4641      	mov	r1, r8
 8006732:	1851      	adds	r1, r2, r1
 8006734:	6339      	str	r1, [r7, #48]	@ 0x30
 8006736:	4649      	mov	r1, r9
 8006738:	414b      	adcs	r3, r1
 800673a:	637b      	str	r3, [r7, #52]	@ 0x34
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	f04f 0300 	mov.w	r3, #0
 8006744:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006748:	4659      	mov	r1, fp
 800674a:	00cb      	lsls	r3, r1, #3
 800674c:	4651      	mov	r1, sl
 800674e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006752:	4651      	mov	r1, sl
 8006754:	00ca      	lsls	r2, r1, #3
 8006756:	4610      	mov	r0, r2
 8006758:	4619      	mov	r1, r3
 800675a:	4603      	mov	r3, r0
 800675c:	4642      	mov	r2, r8
 800675e:	189b      	adds	r3, r3, r2
 8006760:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006764:	464b      	mov	r3, r9
 8006766:	460a      	mov	r2, r1
 8006768:	eb42 0303 	adc.w	r3, r2, r3
 800676c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800677c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006780:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006784:	460b      	mov	r3, r1
 8006786:	18db      	adds	r3, r3, r3
 8006788:	62bb      	str	r3, [r7, #40]	@ 0x28
 800678a:	4613      	mov	r3, r2
 800678c:	eb42 0303 	adc.w	r3, r2, r3
 8006790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006792:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006796:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800679a:	f7fa fa8d 	bl	8000cb8 <__aeabi_uldivmod>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	4b0d      	ldr	r3, [pc, #52]	@ (80067d8 <UART_SetConfig+0x2d4>)
 80067a4:	fba3 1302 	umull	r1, r3, r3, r2
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	2164      	movs	r1, #100	@ 0x64
 80067ac:	fb01 f303 	mul.w	r3, r1, r3
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	3332      	adds	r3, #50	@ 0x32
 80067b6:	4a08      	ldr	r2, [pc, #32]	@ (80067d8 <UART_SetConfig+0x2d4>)
 80067b8:	fba2 2303 	umull	r2, r3, r2, r3
 80067bc:	095b      	lsrs	r3, r3, #5
 80067be:	f003 0207 	and.w	r2, r3, #7
 80067c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4422      	add	r2, r4
 80067ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067cc:	e106      	b.n	80069dc <UART_SetConfig+0x4d8>
 80067ce:	bf00      	nop
 80067d0:	40011000 	.word	0x40011000
 80067d4:	40011400 	.word	0x40011400
 80067d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067e0:	2200      	movs	r2, #0
 80067e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80067ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80067ee:	4642      	mov	r2, r8
 80067f0:	464b      	mov	r3, r9
 80067f2:	1891      	adds	r1, r2, r2
 80067f4:	6239      	str	r1, [r7, #32]
 80067f6:	415b      	adcs	r3, r3
 80067f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067fe:	4641      	mov	r1, r8
 8006800:	1854      	adds	r4, r2, r1
 8006802:	4649      	mov	r1, r9
 8006804:	eb43 0501 	adc.w	r5, r3, r1
 8006808:	f04f 0200 	mov.w	r2, #0
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	00eb      	lsls	r3, r5, #3
 8006812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006816:	00e2      	lsls	r2, r4, #3
 8006818:	4614      	mov	r4, r2
 800681a:	461d      	mov	r5, r3
 800681c:	4643      	mov	r3, r8
 800681e:	18e3      	adds	r3, r4, r3
 8006820:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006824:	464b      	mov	r3, r9
 8006826:	eb45 0303 	adc.w	r3, r5, r3
 800682a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800682e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800683a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800683e:	f04f 0200 	mov.w	r2, #0
 8006842:	f04f 0300 	mov.w	r3, #0
 8006846:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800684a:	4629      	mov	r1, r5
 800684c:	008b      	lsls	r3, r1, #2
 800684e:	4621      	mov	r1, r4
 8006850:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006854:	4621      	mov	r1, r4
 8006856:	008a      	lsls	r2, r1, #2
 8006858:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800685c:	f7fa fa2c 	bl	8000cb8 <__aeabi_uldivmod>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	4b60      	ldr	r3, [pc, #384]	@ (80069e8 <UART_SetConfig+0x4e4>)
 8006866:	fba3 2302 	umull	r2, r3, r3, r2
 800686a:	095b      	lsrs	r3, r3, #5
 800686c:	011c      	lsls	r4, r3, #4
 800686e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006872:	2200      	movs	r2, #0
 8006874:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006878:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800687c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006880:	4642      	mov	r2, r8
 8006882:	464b      	mov	r3, r9
 8006884:	1891      	adds	r1, r2, r2
 8006886:	61b9      	str	r1, [r7, #24]
 8006888:	415b      	adcs	r3, r3
 800688a:	61fb      	str	r3, [r7, #28]
 800688c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006890:	4641      	mov	r1, r8
 8006892:	1851      	adds	r1, r2, r1
 8006894:	6139      	str	r1, [r7, #16]
 8006896:	4649      	mov	r1, r9
 8006898:	414b      	adcs	r3, r1
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068a8:	4659      	mov	r1, fp
 80068aa:	00cb      	lsls	r3, r1, #3
 80068ac:	4651      	mov	r1, sl
 80068ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068b2:	4651      	mov	r1, sl
 80068b4:	00ca      	lsls	r2, r1, #3
 80068b6:	4610      	mov	r0, r2
 80068b8:	4619      	mov	r1, r3
 80068ba:	4603      	mov	r3, r0
 80068bc:	4642      	mov	r2, r8
 80068be:	189b      	adds	r3, r3, r2
 80068c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068c4:	464b      	mov	r3, r9
 80068c6:	460a      	mov	r2, r1
 80068c8:	eb42 0303 	adc.w	r3, r2, r3
 80068cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80068e8:	4649      	mov	r1, r9
 80068ea:	008b      	lsls	r3, r1, #2
 80068ec:	4641      	mov	r1, r8
 80068ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068f2:	4641      	mov	r1, r8
 80068f4:	008a      	lsls	r2, r1, #2
 80068f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80068fa:	f7fa f9dd 	bl	8000cb8 <__aeabi_uldivmod>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4611      	mov	r1, r2
 8006904:	4b38      	ldr	r3, [pc, #224]	@ (80069e8 <UART_SetConfig+0x4e4>)
 8006906:	fba3 2301 	umull	r2, r3, r3, r1
 800690a:	095b      	lsrs	r3, r3, #5
 800690c:	2264      	movs	r2, #100	@ 0x64
 800690e:	fb02 f303 	mul.w	r3, r2, r3
 8006912:	1acb      	subs	r3, r1, r3
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	3332      	adds	r3, #50	@ 0x32
 8006918:	4a33      	ldr	r2, [pc, #204]	@ (80069e8 <UART_SetConfig+0x4e4>)
 800691a:	fba2 2303 	umull	r2, r3, r2, r3
 800691e:	095b      	lsrs	r3, r3, #5
 8006920:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006924:	441c      	add	r4, r3
 8006926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800692a:	2200      	movs	r2, #0
 800692c:	673b      	str	r3, [r7, #112]	@ 0x70
 800692e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006930:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006934:	4642      	mov	r2, r8
 8006936:	464b      	mov	r3, r9
 8006938:	1891      	adds	r1, r2, r2
 800693a:	60b9      	str	r1, [r7, #8]
 800693c:	415b      	adcs	r3, r3
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006944:	4641      	mov	r1, r8
 8006946:	1851      	adds	r1, r2, r1
 8006948:	6039      	str	r1, [r7, #0]
 800694a:	4649      	mov	r1, r9
 800694c:	414b      	adcs	r3, r1
 800694e:	607b      	str	r3, [r7, #4]
 8006950:	f04f 0200 	mov.w	r2, #0
 8006954:	f04f 0300 	mov.w	r3, #0
 8006958:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800695c:	4659      	mov	r1, fp
 800695e:	00cb      	lsls	r3, r1, #3
 8006960:	4651      	mov	r1, sl
 8006962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006966:	4651      	mov	r1, sl
 8006968:	00ca      	lsls	r2, r1, #3
 800696a:	4610      	mov	r0, r2
 800696c:	4619      	mov	r1, r3
 800696e:	4603      	mov	r3, r0
 8006970:	4642      	mov	r2, r8
 8006972:	189b      	adds	r3, r3, r2
 8006974:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006976:	464b      	mov	r3, r9
 8006978:	460a      	mov	r2, r1
 800697a:	eb42 0303 	adc.w	r3, r2, r3
 800697e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	663b      	str	r3, [r7, #96]	@ 0x60
 800698a:	667a      	str	r2, [r7, #100]	@ 0x64
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	f04f 0300 	mov.w	r3, #0
 8006994:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006998:	4649      	mov	r1, r9
 800699a:	008b      	lsls	r3, r1, #2
 800699c:	4641      	mov	r1, r8
 800699e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069a2:	4641      	mov	r1, r8
 80069a4:	008a      	lsls	r2, r1, #2
 80069a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80069aa:	f7fa f985 	bl	8000cb8 <__aeabi_uldivmod>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	4b0d      	ldr	r3, [pc, #52]	@ (80069e8 <UART_SetConfig+0x4e4>)
 80069b4:	fba3 1302 	umull	r1, r3, r3, r2
 80069b8:	095b      	lsrs	r3, r3, #5
 80069ba:	2164      	movs	r1, #100	@ 0x64
 80069bc:	fb01 f303 	mul.w	r3, r1, r3
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	011b      	lsls	r3, r3, #4
 80069c4:	3332      	adds	r3, #50	@ 0x32
 80069c6:	4a08      	ldr	r2, [pc, #32]	@ (80069e8 <UART_SetConfig+0x4e4>)
 80069c8:	fba2 2303 	umull	r2, r3, r2, r3
 80069cc:	095b      	lsrs	r3, r3, #5
 80069ce:	f003 020f 	and.w	r2, r3, #15
 80069d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4422      	add	r2, r4
 80069da:	609a      	str	r2, [r3, #8]
}
 80069dc:	bf00      	nop
 80069de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069e2:	46bd      	mov	sp, r7
 80069e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069e8:	51eb851f 	.word	0x51eb851f

080069ec <atof>:
 80069ec:	2100      	movs	r1, #0
 80069ee:	f000 be07 	b.w	8007600 <strtod>

080069f2 <atoi>:
 80069f2:	220a      	movs	r2, #10
 80069f4:	2100      	movs	r1, #0
 80069f6:	f000 be89 	b.w	800770c <strtol>

080069fa <sulp>:
 80069fa:	b570      	push	{r4, r5, r6, lr}
 80069fc:	4604      	mov	r4, r0
 80069fe:	460d      	mov	r5, r1
 8006a00:	ec45 4b10 	vmov	d0, r4, r5
 8006a04:	4616      	mov	r6, r2
 8006a06:	f003 fc77 	bl	800a2f8 <__ulp>
 8006a0a:	ec51 0b10 	vmov	r0, r1, d0
 8006a0e:	b17e      	cbz	r6, 8006a30 <sulp+0x36>
 8006a10:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006a14:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	dd09      	ble.n	8006a30 <sulp+0x36>
 8006a1c:	051b      	lsls	r3, r3, #20
 8006a1e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006a22:	2400      	movs	r4, #0
 8006a24:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006a28:	4622      	mov	r2, r4
 8006a2a:	462b      	mov	r3, r5
 8006a2c:	f7f9 fdfc 	bl	8000628 <__aeabi_dmul>
 8006a30:	ec41 0b10 	vmov	d0, r0, r1
 8006a34:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a38 <_strtod_l>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	b09f      	sub	sp, #124	@ 0x7c
 8006a3e:	460c      	mov	r4, r1
 8006a40:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006a42:	2200      	movs	r2, #0
 8006a44:	921a      	str	r2, [sp, #104]	@ 0x68
 8006a46:	9005      	str	r0, [sp, #20]
 8006a48:	f04f 0a00 	mov.w	sl, #0
 8006a4c:	f04f 0b00 	mov.w	fp, #0
 8006a50:	460a      	mov	r2, r1
 8006a52:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a54:	7811      	ldrb	r1, [r2, #0]
 8006a56:	292b      	cmp	r1, #43	@ 0x2b
 8006a58:	d04a      	beq.n	8006af0 <_strtod_l+0xb8>
 8006a5a:	d838      	bhi.n	8006ace <_strtod_l+0x96>
 8006a5c:	290d      	cmp	r1, #13
 8006a5e:	d832      	bhi.n	8006ac6 <_strtod_l+0x8e>
 8006a60:	2908      	cmp	r1, #8
 8006a62:	d832      	bhi.n	8006aca <_strtod_l+0x92>
 8006a64:	2900      	cmp	r1, #0
 8006a66:	d03b      	beq.n	8006ae0 <_strtod_l+0xa8>
 8006a68:	2200      	movs	r2, #0
 8006a6a:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a6c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006a6e:	782a      	ldrb	r2, [r5, #0]
 8006a70:	2a30      	cmp	r2, #48	@ 0x30
 8006a72:	f040 80b2 	bne.w	8006bda <_strtod_l+0x1a2>
 8006a76:	786a      	ldrb	r2, [r5, #1]
 8006a78:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006a7c:	2a58      	cmp	r2, #88	@ 0x58
 8006a7e:	d16e      	bne.n	8006b5e <_strtod_l+0x126>
 8006a80:	9302      	str	r3, [sp, #8]
 8006a82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a84:	9301      	str	r3, [sp, #4]
 8006a86:	ab1a      	add	r3, sp, #104	@ 0x68
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	4a8f      	ldr	r2, [pc, #572]	@ (8006cc8 <_strtod_l+0x290>)
 8006a8c:	9805      	ldr	r0, [sp, #20]
 8006a8e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006a90:	a919      	add	r1, sp, #100	@ 0x64
 8006a92:	f002 fd2b 	bl	80094ec <__gethex>
 8006a96:	f010 060f 	ands.w	r6, r0, #15
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	d005      	beq.n	8006aaa <_strtod_l+0x72>
 8006a9e:	2e06      	cmp	r6, #6
 8006aa0:	d128      	bne.n	8006af4 <_strtod_l+0xbc>
 8006aa2:	3501      	adds	r5, #1
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	9519      	str	r5, [sp, #100]	@ 0x64
 8006aa8:	930e      	str	r3, [sp, #56]	@ 0x38
 8006aaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f040 858e 	bne.w	80075ce <_strtod_l+0xb96>
 8006ab2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ab4:	b1cb      	cbz	r3, 8006aea <_strtod_l+0xb2>
 8006ab6:	4652      	mov	r2, sl
 8006ab8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006abc:	ec43 2b10 	vmov	d0, r2, r3
 8006ac0:	b01f      	add	sp, #124	@ 0x7c
 8006ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac6:	2920      	cmp	r1, #32
 8006ac8:	d1ce      	bne.n	8006a68 <_strtod_l+0x30>
 8006aca:	3201      	adds	r2, #1
 8006acc:	e7c1      	b.n	8006a52 <_strtod_l+0x1a>
 8006ace:	292d      	cmp	r1, #45	@ 0x2d
 8006ad0:	d1ca      	bne.n	8006a68 <_strtod_l+0x30>
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	910e      	str	r1, [sp, #56]	@ 0x38
 8006ad6:	1c51      	adds	r1, r2, #1
 8006ad8:	9119      	str	r1, [sp, #100]	@ 0x64
 8006ada:	7852      	ldrb	r2, [r2, #1]
 8006adc:	2a00      	cmp	r2, #0
 8006ade:	d1c5      	bne.n	8006a6c <_strtod_l+0x34>
 8006ae0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006ae2:	9419      	str	r4, [sp, #100]	@ 0x64
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f040 8570 	bne.w	80075ca <_strtod_l+0xb92>
 8006aea:	4652      	mov	r2, sl
 8006aec:	465b      	mov	r3, fp
 8006aee:	e7e5      	b.n	8006abc <_strtod_l+0x84>
 8006af0:	2100      	movs	r1, #0
 8006af2:	e7ef      	b.n	8006ad4 <_strtod_l+0x9c>
 8006af4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006af6:	b13a      	cbz	r2, 8006b08 <_strtod_l+0xd0>
 8006af8:	2135      	movs	r1, #53	@ 0x35
 8006afa:	a81c      	add	r0, sp, #112	@ 0x70
 8006afc:	f003 fcf6 	bl	800a4ec <__copybits>
 8006b00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b02:	9805      	ldr	r0, [sp, #20]
 8006b04:	f003 f8cc 	bl	8009ca0 <_Bfree>
 8006b08:	3e01      	subs	r6, #1
 8006b0a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006b0c:	2e04      	cmp	r6, #4
 8006b0e:	d806      	bhi.n	8006b1e <_strtod_l+0xe6>
 8006b10:	e8df f006 	tbb	[pc, r6]
 8006b14:	201d0314 	.word	0x201d0314
 8006b18:	14          	.byte	0x14
 8006b19:	00          	.byte	0x00
 8006b1a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006b1e:	05e1      	lsls	r1, r4, #23
 8006b20:	bf48      	it	mi
 8006b22:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006b26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006b2a:	0d1b      	lsrs	r3, r3, #20
 8006b2c:	051b      	lsls	r3, r3, #20
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1bb      	bne.n	8006aaa <_strtod_l+0x72>
 8006b32:	f001 fd63 	bl	80085fc <__errno>
 8006b36:	2322      	movs	r3, #34	@ 0x22
 8006b38:	6003      	str	r3, [r0, #0]
 8006b3a:	e7b6      	b.n	8006aaa <_strtod_l+0x72>
 8006b3c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006b40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006b44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006b48:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006b4c:	e7e7      	b.n	8006b1e <_strtod_l+0xe6>
 8006b4e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8006cd0 <_strtod_l+0x298>
 8006b52:	e7e4      	b.n	8006b1e <_strtod_l+0xe6>
 8006b54:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006b58:	f04f 3aff 	mov.w	sl, #4294967295
 8006b5c:	e7df      	b.n	8006b1e <_strtod_l+0xe6>
 8006b5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b60:	1c5a      	adds	r2, r3, #1
 8006b62:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b64:	785b      	ldrb	r3, [r3, #1]
 8006b66:	2b30      	cmp	r3, #48	@ 0x30
 8006b68:	d0f9      	beq.n	8006b5e <_strtod_l+0x126>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d09d      	beq.n	8006aaa <_strtod_l+0x72>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	2700      	movs	r7, #0
 8006b72:	9308      	str	r3, [sp, #32]
 8006b74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b76:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b78:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006b7a:	46b9      	mov	r9, r7
 8006b7c:	220a      	movs	r2, #10
 8006b7e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006b80:	7805      	ldrb	r5, [r0, #0]
 8006b82:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006b86:	b2d9      	uxtb	r1, r3
 8006b88:	2909      	cmp	r1, #9
 8006b8a:	d928      	bls.n	8006bde <_strtod_l+0x1a6>
 8006b8c:	494f      	ldr	r1, [pc, #316]	@ (8006ccc <_strtod_l+0x294>)
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f001 fc65 	bl	800845e <strncmp>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d032      	beq.n	8006bfe <_strtod_l+0x1c6>
 8006b98:	2000      	movs	r0, #0
 8006b9a:	462a      	mov	r2, r5
 8006b9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006b9e:	464d      	mov	r5, r9
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2a65      	cmp	r2, #101	@ 0x65
 8006ba4:	d001      	beq.n	8006baa <_strtod_l+0x172>
 8006ba6:	2a45      	cmp	r2, #69	@ 0x45
 8006ba8:	d114      	bne.n	8006bd4 <_strtod_l+0x19c>
 8006baa:	b91d      	cbnz	r5, 8006bb4 <_strtod_l+0x17c>
 8006bac:	9a08      	ldr	r2, [sp, #32]
 8006bae:	4302      	orrs	r2, r0
 8006bb0:	d096      	beq.n	8006ae0 <_strtod_l+0xa8>
 8006bb2:	2500      	movs	r5, #0
 8006bb4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006bb6:	1c62      	adds	r2, r4, #1
 8006bb8:	9219      	str	r2, [sp, #100]	@ 0x64
 8006bba:	7862      	ldrb	r2, [r4, #1]
 8006bbc:	2a2b      	cmp	r2, #43	@ 0x2b
 8006bbe:	d07a      	beq.n	8006cb6 <_strtod_l+0x27e>
 8006bc0:	2a2d      	cmp	r2, #45	@ 0x2d
 8006bc2:	d07e      	beq.n	8006cc2 <_strtod_l+0x28a>
 8006bc4:	f04f 0c00 	mov.w	ip, #0
 8006bc8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006bcc:	2909      	cmp	r1, #9
 8006bce:	f240 8085 	bls.w	8006cdc <_strtod_l+0x2a4>
 8006bd2:	9419      	str	r4, [sp, #100]	@ 0x64
 8006bd4:	f04f 0800 	mov.w	r8, #0
 8006bd8:	e0a5      	b.n	8006d26 <_strtod_l+0x2ee>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e7c8      	b.n	8006b70 <_strtod_l+0x138>
 8006bde:	f1b9 0f08 	cmp.w	r9, #8
 8006be2:	bfd8      	it	le
 8006be4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006be6:	f100 0001 	add.w	r0, r0, #1
 8006bea:	bfda      	itte	le
 8006bec:	fb02 3301 	mlale	r3, r2, r1, r3
 8006bf0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006bf2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006bf6:	f109 0901 	add.w	r9, r9, #1
 8006bfa:	9019      	str	r0, [sp, #100]	@ 0x64
 8006bfc:	e7bf      	b.n	8006b7e <_strtod_l+0x146>
 8006bfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c04:	785a      	ldrb	r2, [r3, #1]
 8006c06:	f1b9 0f00 	cmp.w	r9, #0
 8006c0a:	d03b      	beq.n	8006c84 <_strtod_l+0x24c>
 8006c0c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006c0e:	464d      	mov	r5, r9
 8006c10:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006c14:	2b09      	cmp	r3, #9
 8006c16:	d912      	bls.n	8006c3e <_strtod_l+0x206>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e7c2      	b.n	8006ba2 <_strtod_l+0x16a>
 8006c1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c22:	785a      	ldrb	r2, [r3, #1]
 8006c24:	3001      	adds	r0, #1
 8006c26:	2a30      	cmp	r2, #48	@ 0x30
 8006c28:	d0f8      	beq.n	8006c1c <_strtod_l+0x1e4>
 8006c2a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	f200 84d2 	bhi.w	80075d8 <_strtod_l+0xba0>
 8006c34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c36:	900a      	str	r0, [sp, #40]	@ 0x28
 8006c38:	2000      	movs	r0, #0
 8006c3a:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c3c:	4605      	mov	r5, r0
 8006c3e:	3a30      	subs	r2, #48	@ 0x30
 8006c40:	f100 0301 	add.w	r3, r0, #1
 8006c44:	d018      	beq.n	8006c78 <_strtod_l+0x240>
 8006c46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c48:	4419      	add	r1, r3
 8006c4a:	910a      	str	r1, [sp, #40]	@ 0x28
 8006c4c:	462e      	mov	r6, r5
 8006c4e:	f04f 0e0a 	mov.w	lr, #10
 8006c52:	1c71      	adds	r1, r6, #1
 8006c54:	eba1 0c05 	sub.w	ip, r1, r5
 8006c58:	4563      	cmp	r3, ip
 8006c5a:	dc15      	bgt.n	8006c88 <_strtod_l+0x250>
 8006c5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006c60:	182b      	adds	r3, r5, r0
 8006c62:	2b08      	cmp	r3, #8
 8006c64:	f105 0501 	add.w	r5, r5, #1
 8006c68:	4405      	add	r5, r0
 8006c6a:	dc1a      	bgt.n	8006ca2 <_strtod_l+0x26a>
 8006c6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c6e:	230a      	movs	r3, #10
 8006c70:	fb03 2301 	mla	r3, r3, r1, r2
 8006c74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c76:	2300      	movs	r3, #0
 8006c78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006c7a:	1c51      	adds	r1, r2, #1
 8006c7c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006c7e:	7852      	ldrb	r2, [r2, #1]
 8006c80:	4618      	mov	r0, r3
 8006c82:	e7c5      	b.n	8006c10 <_strtod_l+0x1d8>
 8006c84:	4648      	mov	r0, r9
 8006c86:	e7ce      	b.n	8006c26 <_strtod_l+0x1ee>
 8006c88:	2e08      	cmp	r6, #8
 8006c8a:	dc05      	bgt.n	8006c98 <_strtod_l+0x260>
 8006c8c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006c8e:	fb0e f606 	mul.w	r6, lr, r6
 8006c92:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006c94:	460e      	mov	r6, r1
 8006c96:	e7dc      	b.n	8006c52 <_strtod_l+0x21a>
 8006c98:	2910      	cmp	r1, #16
 8006c9a:	bfd8      	it	le
 8006c9c:	fb0e f707 	mulle.w	r7, lr, r7
 8006ca0:	e7f8      	b.n	8006c94 <_strtod_l+0x25c>
 8006ca2:	2b0f      	cmp	r3, #15
 8006ca4:	bfdc      	itt	le
 8006ca6:	230a      	movle	r3, #10
 8006ca8:	fb03 2707 	mlale	r7, r3, r7, r2
 8006cac:	e7e3      	b.n	8006c76 <_strtod_l+0x23e>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e77a      	b.n	8006bac <_strtod_l+0x174>
 8006cb6:	f04f 0c00 	mov.w	ip, #0
 8006cba:	1ca2      	adds	r2, r4, #2
 8006cbc:	9219      	str	r2, [sp, #100]	@ 0x64
 8006cbe:	78a2      	ldrb	r2, [r4, #2]
 8006cc0:	e782      	b.n	8006bc8 <_strtod_l+0x190>
 8006cc2:	f04f 0c01 	mov.w	ip, #1
 8006cc6:	e7f8      	b.n	8006cba <_strtod_l+0x282>
 8006cc8:	0800c408 	.word	0x0800c408
 8006ccc:	0800c1c8 	.word	0x0800c1c8
 8006cd0:	7ff00000 	.word	0x7ff00000
 8006cd4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006cd6:	1c51      	adds	r1, r2, #1
 8006cd8:	9119      	str	r1, [sp, #100]	@ 0x64
 8006cda:	7852      	ldrb	r2, [r2, #1]
 8006cdc:	2a30      	cmp	r2, #48	@ 0x30
 8006cde:	d0f9      	beq.n	8006cd4 <_strtod_l+0x29c>
 8006ce0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006ce4:	2908      	cmp	r1, #8
 8006ce6:	f63f af75 	bhi.w	8006bd4 <_strtod_l+0x19c>
 8006cea:	3a30      	subs	r2, #48	@ 0x30
 8006cec:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006cf0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006cf2:	f04f 080a 	mov.w	r8, #10
 8006cf6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006cf8:	1c56      	adds	r6, r2, #1
 8006cfa:	9619      	str	r6, [sp, #100]	@ 0x64
 8006cfc:	7852      	ldrb	r2, [r2, #1]
 8006cfe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006d02:	f1be 0f09 	cmp.w	lr, #9
 8006d06:	d939      	bls.n	8006d7c <_strtod_l+0x344>
 8006d08:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006d0a:	1a76      	subs	r6, r6, r1
 8006d0c:	2e08      	cmp	r6, #8
 8006d0e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006d12:	dc03      	bgt.n	8006d1c <_strtod_l+0x2e4>
 8006d14:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d16:	4588      	cmp	r8, r1
 8006d18:	bfa8      	it	ge
 8006d1a:	4688      	movge	r8, r1
 8006d1c:	f1bc 0f00 	cmp.w	ip, #0
 8006d20:	d001      	beq.n	8006d26 <_strtod_l+0x2ee>
 8006d22:	f1c8 0800 	rsb	r8, r8, #0
 8006d26:	2d00      	cmp	r5, #0
 8006d28:	d14e      	bne.n	8006dc8 <_strtod_l+0x390>
 8006d2a:	9908      	ldr	r1, [sp, #32]
 8006d2c:	4308      	orrs	r0, r1
 8006d2e:	f47f aebc 	bne.w	8006aaa <_strtod_l+0x72>
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f47f aed4 	bne.w	8006ae0 <_strtod_l+0xa8>
 8006d38:	2a69      	cmp	r2, #105	@ 0x69
 8006d3a:	d028      	beq.n	8006d8e <_strtod_l+0x356>
 8006d3c:	dc25      	bgt.n	8006d8a <_strtod_l+0x352>
 8006d3e:	2a49      	cmp	r2, #73	@ 0x49
 8006d40:	d025      	beq.n	8006d8e <_strtod_l+0x356>
 8006d42:	2a4e      	cmp	r2, #78	@ 0x4e
 8006d44:	f47f aecc 	bne.w	8006ae0 <_strtod_l+0xa8>
 8006d48:	499a      	ldr	r1, [pc, #616]	@ (8006fb4 <_strtod_l+0x57c>)
 8006d4a:	a819      	add	r0, sp, #100	@ 0x64
 8006d4c:	f002 fdf0 	bl	8009930 <__match>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	f43f aec5 	beq.w	8006ae0 <_strtod_l+0xa8>
 8006d56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	2b28      	cmp	r3, #40	@ 0x28
 8006d5c:	d12e      	bne.n	8006dbc <_strtod_l+0x384>
 8006d5e:	4996      	ldr	r1, [pc, #600]	@ (8006fb8 <_strtod_l+0x580>)
 8006d60:	aa1c      	add	r2, sp, #112	@ 0x70
 8006d62:	a819      	add	r0, sp, #100	@ 0x64
 8006d64:	f002 fdf8 	bl	8009958 <__hexnan>
 8006d68:	2805      	cmp	r0, #5
 8006d6a:	d127      	bne.n	8006dbc <_strtod_l+0x384>
 8006d6c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006d6e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006d72:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006d76:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006d7a:	e696      	b.n	8006aaa <_strtod_l+0x72>
 8006d7c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d7e:	fb08 2101 	mla	r1, r8, r1, r2
 8006d82:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006d86:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d88:	e7b5      	b.n	8006cf6 <_strtod_l+0x2be>
 8006d8a:	2a6e      	cmp	r2, #110	@ 0x6e
 8006d8c:	e7da      	b.n	8006d44 <_strtod_l+0x30c>
 8006d8e:	498b      	ldr	r1, [pc, #556]	@ (8006fbc <_strtod_l+0x584>)
 8006d90:	a819      	add	r0, sp, #100	@ 0x64
 8006d92:	f002 fdcd 	bl	8009930 <__match>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	f43f aea2 	beq.w	8006ae0 <_strtod_l+0xa8>
 8006d9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d9e:	4988      	ldr	r1, [pc, #544]	@ (8006fc0 <_strtod_l+0x588>)
 8006da0:	3b01      	subs	r3, #1
 8006da2:	a819      	add	r0, sp, #100	@ 0x64
 8006da4:	9319      	str	r3, [sp, #100]	@ 0x64
 8006da6:	f002 fdc3 	bl	8009930 <__match>
 8006daa:	b910      	cbnz	r0, 8006db2 <_strtod_l+0x37a>
 8006dac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006dae:	3301      	adds	r3, #1
 8006db0:	9319      	str	r3, [sp, #100]	@ 0x64
 8006db2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8006fd0 <_strtod_l+0x598>
 8006db6:	f04f 0a00 	mov.w	sl, #0
 8006dba:	e676      	b.n	8006aaa <_strtod_l+0x72>
 8006dbc:	4881      	ldr	r0, [pc, #516]	@ (8006fc4 <_strtod_l+0x58c>)
 8006dbe:	f001 fc63 	bl	8008688 <nan>
 8006dc2:	ec5b ab10 	vmov	sl, fp, d0
 8006dc6:	e670      	b.n	8006aaa <_strtod_l+0x72>
 8006dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006dcc:	eba8 0303 	sub.w	r3, r8, r3
 8006dd0:	f1b9 0f00 	cmp.w	r9, #0
 8006dd4:	bf08      	it	eq
 8006dd6:	46a9      	moveq	r9, r5
 8006dd8:	2d10      	cmp	r5, #16
 8006dda:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ddc:	462c      	mov	r4, r5
 8006dde:	bfa8      	it	ge
 8006de0:	2410      	movge	r4, #16
 8006de2:	f7f9 fba7 	bl	8000534 <__aeabi_ui2d>
 8006de6:	2d09      	cmp	r5, #9
 8006de8:	4682      	mov	sl, r0
 8006dea:	468b      	mov	fp, r1
 8006dec:	dc13      	bgt.n	8006e16 <_strtod_l+0x3de>
 8006dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f43f ae5a 	beq.w	8006aaa <_strtod_l+0x72>
 8006df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df8:	dd78      	ble.n	8006eec <_strtod_l+0x4b4>
 8006dfa:	2b16      	cmp	r3, #22
 8006dfc:	dc5f      	bgt.n	8006ebe <_strtod_l+0x486>
 8006dfe:	4972      	ldr	r1, [pc, #456]	@ (8006fc8 <_strtod_l+0x590>)
 8006e00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e08:	4652      	mov	r2, sl
 8006e0a:	465b      	mov	r3, fp
 8006e0c:	f7f9 fc0c 	bl	8000628 <__aeabi_dmul>
 8006e10:	4682      	mov	sl, r0
 8006e12:	468b      	mov	fp, r1
 8006e14:	e649      	b.n	8006aaa <_strtod_l+0x72>
 8006e16:	4b6c      	ldr	r3, [pc, #432]	@ (8006fc8 <_strtod_l+0x590>)
 8006e18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e1c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006e20:	f7f9 fc02 	bl	8000628 <__aeabi_dmul>
 8006e24:	4682      	mov	sl, r0
 8006e26:	4638      	mov	r0, r7
 8006e28:	468b      	mov	fp, r1
 8006e2a:	f7f9 fb83 	bl	8000534 <__aeabi_ui2d>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4650      	mov	r0, sl
 8006e34:	4659      	mov	r1, fp
 8006e36:	f7f9 fa41 	bl	80002bc <__adddf3>
 8006e3a:	2d0f      	cmp	r5, #15
 8006e3c:	4682      	mov	sl, r0
 8006e3e:	468b      	mov	fp, r1
 8006e40:	ddd5      	ble.n	8006dee <_strtod_l+0x3b6>
 8006e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e44:	1b2c      	subs	r4, r5, r4
 8006e46:	441c      	add	r4, r3
 8006e48:	2c00      	cmp	r4, #0
 8006e4a:	f340 8093 	ble.w	8006f74 <_strtod_l+0x53c>
 8006e4e:	f014 030f 	ands.w	r3, r4, #15
 8006e52:	d00a      	beq.n	8006e6a <_strtod_l+0x432>
 8006e54:	495c      	ldr	r1, [pc, #368]	@ (8006fc8 <_strtod_l+0x590>)
 8006e56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e5a:	4652      	mov	r2, sl
 8006e5c:	465b      	mov	r3, fp
 8006e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e62:	f7f9 fbe1 	bl	8000628 <__aeabi_dmul>
 8006e66:	4682      	mov	sl, r0
 8006e68:	468b      	mov	fp, r1
 8006e6a:	f034 040f 	bics.w	r4, r4, #15
 8006e6e:	d073      	beq.n	8006f58 <_strtod_l+0x520>
 8006e70:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006e74:	dd49      	ble.n	8006f0a <_strtod_l+0x4d2>
 8006e76:	2400      	movs	r4, #0
 8006e78:	46a0      	mov	r8, r4
 8006e7a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e7c:	46a1      	mov	r9, r4
 8006e7e:	9a05      	ldr	r2, [sp, #20]
 8006e80:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8006fd0 <_strtod_l+0x598>
 8006e84:	2322      	movs	r3, #34	@ 0x22
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	f04f 0a00 	mov.w	sl, #0
 8006e8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f43f ae0b 	beq.w	8006aaa <_strtod_l+0x72>
 8006e94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e96:	9805      	ldr	r0, [sp, #20]
 8006e98:	f002 ff02 	bl	8009ca0 <_Bfree>
 8006e9c:	9805      	ldr	r0, [sp, #20]
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	f002 fefe 	bl	8009ca0 <_Bfree>
 8006ea4:	9805      	ldr	r0, [sp, #20]
 8006ea6:	4641      	mov	r1, r8
 8006ea8:	f002 fefa 	bl	8009ca0 <_Bfree>
 8006eac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006eae:	9805      	ldr	r0, [sp, #20]
 8006eb0:	f002 fef6 	bl	8009ca0 <_Bfree>
 8006eb4:	9805      	ldr	r0, [sp, #20]
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	f002 fef2 	bl	8009ca0 <_Bfree>
 8006ebc:	e5f5      	b.n	8006aaa <_strtod_l+0x72>
 8006ebe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ec0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	dbbc      	blt.n	8006e42 <_strtod_l+0x40a>
 8006ec8:	4c3f      	ldr	r4, [pc, #252]	@ (8006fc8 <_strtod_l+0x590>)
 8006eca:	f1c5 050f 	rsb	r5, r5, #15
 8006ece:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006ed2:	4652      	mov	r2, sl
 8006ed4:	465b      	mov	r3, fp
 8006ed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eda:	f7f9 fba5 	bl	8000628 <__aeabi_dmul>
 8006ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee0:	1b5d      	subs	r5, r3, r5
 8006ee2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006ee6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006eea:	e78f      	b.n	8006e0c <_strtod_l+0x3d4>
 8006eec:	3316      	adds	r3, #22
 8006eee:	dba8      	blt.n	8006e42 <_strtod_l+0x40a>
 8006ef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ef2:	eba3 0808 	sub.w	r8, r3, r8
 8006ef6:	4b34      	ldr	r3, [pc, #208]	@ (8006fc8 <_strtod_l+0x590>)
 8006ef8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006efc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006f00:	4650      	mov	r0, sl
 8006f02:	4659      	mov	r1, fp
 8006f04:	f7f9 fcba 	bl	800087c <__aeabi_ddiv>
 8006f08:	e782      	b.n	8006e10 <_strtod_l+0x3d8>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	4f2f      	ldr	r7, [pc, #188]	@ (8006fcc <_strtod_l+0x594>)
 8006f0e:	1124      	asrs	r4, r4, #4
 8006f10:	4650      	mov	r0, sl
 8006f12:	4659      	mov	r1, fp
 8006f14:	461e      	mov	r6, r3
 8006f16:	2c01      	cmp	r4, #1
 8006f18:	dc21      	bgt.n	8006f5e <_strtod_l+0x526>
 8006f1a:	b10b      	cbz	r3, 8006f20 <_strtod_l+0x4e8>
 8006f1c:	4682      	mov	sl, r0
 8006f1e:	468b      	mov	fp, r1
 8006f20:	492a      	ldr	r1, [pc, #168]	@ (8006fcc <_strtod_l+0x594>)
 8006f22:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006f26:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006f2a:	4652      	mov	r2, sl
 8006f2c:	465b      	mov	r3, fp
 8006f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f32:	f7f9 fb79 	bl	8000628 <__aeabi_dmul>
 8006f36:	4b26      	ldr	r3, [pc, #152]	@ (8006fd0 <_strtod_l+0x598>)
 8006f38:	460a      	mov	r2, r1
 8006f3a:	400b      	ands	r3, r1
 8006f3c:	4925      	ldr	r1, [pc, #148]	@ (8006fd4 <_strtod_l+0x59c>)
 8006f3e:	428b      	cmp	r3, r1
 8006f40:	4682      	mov	sl, r0
 8006f42:	d898      	bhi.n	8006e76 <_strtod_l+0x43e>
 8006f44:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006f48:	428b      	cmp	r3, r1
 8006f4a:	bf86      	itte	hi
 8006f4c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8006fd8 <_strtod_l+0x5a0>
 8006f50:	f04f 3aff 	movhi.w	sl, #4294967295
 8006f54:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006f58:	2300      	movs	r3, #0
 8006f5a:	9308      	str	r3, [sp, #32]
 8006f5c:	e076      	b.n	800704c <_strtod_l+0x614>
 8006f5e:	07e2      	lsls	r2, r4, #31
 8006f60:	d504      	bpl.n	8006f6c <_strtod_l+0x534>
 8006f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f66:	f7f9 fb5f 	bl	8000628 <__aeabi_dmul>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	3601      	adds	r6, #1
 8006f6e:	1064      	asrs	r4, r4, #1
 8006f70:	3708      	adds	r7, #8
 8006f72:	e7d0      	b.n	8006f16 <_strtod_l+0x4de>
 8006f74:	d0f0      	beq.n	8006f58 <_strtod_l+0x520>
 8006f76:	4264      	negs	r4, r4
 8006f78:	f014 020f 	ands.w	r2, r4, #15
 8006f7c:	d00a      	beq.n	8006f94 <_strtod_l+0x55c>
 8006f7e:	4b12      	ldr	r3, [pc, #72]	@ (8006fc8 <_strtod_l+0x590>)
 8006f80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f84:	4650      	mov	r0, sl
 8006f86:	4659      	mov	r1, fp
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	f7f9 fc76 	bl	800087c <__aeabi_ddiv>
 8006f90:	4682      	mov	sl, r0
 8006f92:	468b      	mov	fp, r1
 8006f94:	1124      	asrs	r4, r4, #4
 8006f96:	d0df      	beq.n	8006f58 <_strtod_l+0x520>
 8006f98:	2c1f      	cmp	r4, #31
 8006f9a:	dd1f      	ble.n	8006fdc <_strtod_l+0x5a4>
 8006f9c:	2400      	movs	r4, #0
 8006f9e:	46a0      	mov	r8, r4
 8006fa0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006fa2:	46a1      	mov	r9, r4
 8006fa4:	9a05      	ldr	r2, [sp, #20]
 8006fa6:	2322      	movs	r3, #34	@ 0x22
 8006fa8:	f04f 0a00 	mov.w	sl, #0
 8006fac:	f04f 0b00 	mov.w	fp, #0
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	e76b      	b.n	8006e8c <_strtod_l+0x454>
 8006fb4:	0800c1d7 	.word	0x0800c1d7
 8006fb8:	0800c3f4 	.word	0x0800c3f4
 8006fbc:	0800c1cf 	.word	0x0800c1cf
 8006fc0:	0800c2b6 	.word	0x0800c2b6
 8006fc4:	0800c2b2 	.word	0x0800c2b2
 8006fc8:	0800c580 	.word	0x0800c580
 8006fcc:	0800c558 	.word	0x0800c558
 8006fd0:	7ff00000 	.word	0x7ff00000
 8006fd4:	7ca00000 	.word	0x7ca00000
 8006fd8:	7fefffff 	.word	0x7fefffff
 8006fdc:	f014 0310 	ands.w	r3, r4, #16
 8006fe0:	bf18      	it	ne
 8006fe2:	236a      	movne	r3, #106	@ 0x6a
 8006fe4:	4ea9      	ldr	r6, [pc, #676]	@ (800728c <_strtod_l+0x854>)
 8006fe6:	9308      	str	r3, [sp, #32]
 8006fe8:	4650      	mov	r0, sl
 8006fea:	4659      	mov	r1, fp
 8006fec:	2300      	movs	r3, #0
 8006fee:	07e7      	lsls	r7, r4, #31
 8006ff0:	d504      	bpl.n	8006ffc <_strtod_l+0x5c4>
 8006ff2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ff6:	f7f9 fb17 	bl	8000628 <__aeabi_dmul>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	1064      	asrs	r4, r4, #1
 8006ffe:	f106 0608 	add.w	r6, r6, #8
 8007002:	d1f4      	bne.n	8006fee <_strtod_l+0x5b6>
 8007004:	b10b      	cbz	r3, 800700a <_strtod_l+0x5d2>
 8007006:	4682      	mov	sl, r0
 8007008:	468b      	mov	fp, r1
 800700a:	9b08      	ldr	r3, [sp, #32]
 800700c:	b1b3      	cbz	r3, 800703c <_strtod_l+0x604>
 800700e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007012:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007016:	2b00      	cmp	r3, #0
 8007018:	4659      	mov	r1, fp
 800701a:	dd0f      	ble.n	800703c <_strtod_l+0x604>
 800701c:	2b1f      	cmp	r3, #31
 800701e:	dd56      	ble.n	80070ce <_strtod_l+0x696>
 8007020:	2b34      	cmp	r3, #52	@ 0x34
 8007022:	bfde      	ittt	le
 8007024:	f04f 33ff 	movle.w	r3, #4294967295
 8007028:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800702c:	4093      	lslle	r3, r2
 800702e:	f04f 0a00 	mov.w	sl, #0
 8007032:	bfcc      	ite	gt
 8007034:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007038:	ea03 0b01 	andle.w	fp, r3, r1
 800703c:	2200      	movs	r2, #0
 800703e:	2300      	movs	r3, #0
 8007040:	4650      	mov	r0, sl
 8007042:	4659      	mov	r1, fp
 8007044:	f7f9 fd58 	bl	8000af8 <__aeabi_dcmpeq>
 8007048:	2800      	cmp	r0, #0
 800704a:	d1a7      	bne.n	8006f9c <_strtod_l+0x564>
 800704c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007052:	9805      	ldr	r0, [sp, #20]
 8007054:	462b      	mov	r3, r5
 8007056:	464a      	mov	r2, r9
 8007058:	f002 fe8a 	bl	8009d70 <__s2b>
 800705c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800705e:	2800      	cmp	r0, #0
 8007060:	f43f af09 	beq.w	8006e76 <_strtod_l+0x43e>
 8007064:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007066:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007068:	2a00      	cmp	r2, #0
 800706a:	eba3 0308 	sub.w	r3, r3, r8
 800706e:	bfa8      	it	ge
 8007070:	2300      	movge	r3, #0
 8007072:	9312      	str	r3, [sp, #72]	@ 0x48
 8007074:	2400      	movs	r4, #0
 8007076:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800707a:	9316      	str	r3, [sp, #88]	@ 0x58
 800707c:	46a0      	mov	r8, r4
 800707e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007080:	9805      	ldr	r0, [sp, #20]
 8007082:	6859      	ldr	r1, [r3, #4]
 8007084:	f002 fdcc 	bl	8009c20 <_Balloc>
 8007088:	4681      	mov	r9, r0
 800708a:	2800      	cmp	r0, #0
 800708c:	f43f aef7 	beq.w	8006e7e <_strtod_l+0x446>
 8007090:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007092:	691a      	ldr	r2, [r3, #16]
 8007094:	3202      	adds	r2, #2
 8007096:	f103 010c 	add.w	r1, r3, #12
 800709a:	0092      	lsls	r2, r2, #2
 800709c:	300c      	adds	r0, #12
 800709e:	f001 fae2 	bl	8008666 <memcpy>
 80070a2:	ec4b ab10 	vmov	d0, sl, fp
 80070a6:	9805      	ldr	r0, [sp, #20]
 80070a8:	aa1c      	add	r2, sp, #112	@ 0x70
 80070aa:	a91b      	add	r1, sp, #108	@ 0x6c
 80070ac:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80070b0:	f003 f992 	bl	800a3d8 <__d2b>
 80070b4:	901a      	str	r0, [sp, #104]	@ 0x68
 80070b6:	2800      	cmp	r0, #0
 80070b8:	f43f aee1 	beq.w	8006e7e <_strtod_l+0x446>
 80070bc:	9805      	ldr	r0, [sp, #20]
 80070be:	2101      	movs	r1, #1
 80070c0:	f002 feec 	bl	8009e9c <__i2b>
 80070c4:	4680      	mov	r8, r0
 80070c6:	b948      	cbnz	r0, 80070dc <_strtod_l+0x6a4>
 80070c8:	f04f 0800 	mov.w	r8, #0
 80070cc:	e6d7      	b.n	8006e7e <_strtod_l+0x446>
 80070ce:	f04f 32ff 	mov.w	r2, #4294967295
 80070d2:	fa02 f303 	lsl.w	r3, r2, r3
 80070d6:	ea03 0a0a 	and.w	sl, r3, sl
 80070da:	e7af      	b.n	800703c <_strtod_l+0x604>
 80070dc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80070de:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80070e0:	2d00      	cmp	r5, #0
 80070e2:	bfab      	itete	ge
 80070e4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80070e6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80070e8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80070ea:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80070ec:	bfac      	ite	ge
 80070ee:	18ef      	addge	r7, r5, r3
 80070f0:	1b5e      	sublt	r6, r3, r5
 80070f2:	9b08      	ldr	r3, [sp, #32]
 80070f4:	1aed      	subs	r5, r5, r3
 80070f6:	4415      	add	r5, r2
 80070f8:	4b65      	ldr	r3, [pc, #404]	@ (8007290 <_strtod_l+0x858>)
 80070fa:	3d01      	subs	r5, #1
 80070fc:	429d      	cmp	r5, r3
 80070fe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007102:	da50      	bge.n	80071a6 <_strtod_l+0x76e>
 8007104:	1b5b      	subs	r3, r3, r5
 8007106:	2b1f      	cmp	r3, #31
 8007108:	eba2 0203 	sub.w	r2, r2, r3
 800710c:	f04f 0101 	mov.w	r1, #1
 8007110:	dc3d      	bgt.n	800718e <_strtod_l+0x756>
 8007112:	fa01 f303 	lsl.w	r3, r1, r3
 8007116:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007118:	2300      	movs	r3, #0
 800711a:	9310      	str	r3, [sp, #64]	@ 0x40
 800711c:	18bd      	adds	r5, r7, r2
 800711e:	9b08      	ldr	r3, [sp, #32]
 8007120:	42af      	cmp	r7, r5
 8007122:	4416      	add	r6, r2
 8007124:	441e      	add	r6, r3
 8007126:	463b      	mov	r3, r7
 8007128:	bfa8      	it	ge
 800712a:	462b      	movge	r3, r5
 800712c:	42b3      	cmp	r3, r6
 800712e:	bfa8      	it	ge
 8007130:	4633      	movge	r3, r6
 8007132:	2b00      	cmp	r3, #0
 8007134:	bfc2      	ittt	gt
 8007136:	1aed      	subgt	r5, r5, r3
 8007138:	1af6      	subgt	r6, r6, r3
 800713a:	1aff      	subgt	r7, r7, r3
 800713c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800713e:	2b00      	cmp	r3, #0
 8007140:	dd16      	ble.n	8007170 <_strtod_l+0x738>
 8007142:	4641      	mov	r1, r8
 8007144:	9805      	ldr	r0, [sp, #20]
 8007146:	461a      	mov	r2, r3
 8007148:	f002 ff60 	bl	800a00c <__pow5mult>
 800714c:	4680      	mov	r8, r0
 800714e:	2800      	cmp	r0, #0
 8007150:	d0ba      	beq.n	80070c8 <_strtod_l+0x690>
 8007152:	4601      	mov	r1, r0
 8007154:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007156:	9805      	ldr	r0, [sp, #20]
 8007158:	f002 feb6 	bl	8009ec8 <__multiply>
 800715c:	900a      	str	r0, [sp, #40]	@ 0x28
 800715e:	2800      	cmp	r0, #0
 8007160:	f43f ae8d 	beq.w	8006e7e <_strtod_l+0x446>
 8007164:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007166:	9805      	ldr	r0, [sp, #20]
 8007168:	f002 fd9a 	bl	8009ca0 <_Bfree>
 800716c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800716e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007170:	2d00      	cmp	r5, #0
 8007172:	dc1d      	bgt.n	80071b0 <_strtod_l+0x778>
 8007174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007176:	2b00      	cmp	r3, #0
 8007178:	dd23      	ble.n	80071c2 <_strtod_l+0x78a>
 800717a:	4649      	mov	r1, r9
 800717c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800717e:	9805      	ldr	r0, [sp, #20]
 8007180:	f002 ff44 	bl	800a00c <__pow5mult>
 8007184:	4681      	mov	r9, r0
 8007186:	b9e0      	cbnz	r0, 80071c2 <_strtod_l+0x78a>
 8007188:	f04f 0900 	mov.w	r9, #0
 800718c:	e677      	b.n	8006e7e <_strtod_l+0x446>
 800718e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007192:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007196:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800719a:	35e2      	adds	r5, #226	@ 0xe2
 800719c:	fa01 f305 	lsl.w	r3, r1, r5
 80071a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80071a2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80071a4:	e7ba      	b.n	800711c <_strtod_l+0x6e4>
 80071a6:	2300      	movs	r3, #0
 80071a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80071aa:	2301      	movs	r3, #1
 80071ac:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071ae:	e7b5      	b.n	800711c <_strtod_l+0x6e4>
 80071b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80071b2:	9805      	ldr	r0, [sp, #20]
 80071b4:	462a      	mov	r2, r5
 80071b6:	f002 ff83 	bl	800a0c0 <__lshift>
 80071ba:	901a      	str	r0, [sp, #104]	@ 0x68
 80071bc:	2800      	cmp	r0, #0
 80071be:	d1d9      	bne.n	8007174 <_strtod_l+0x73c>
 80071c0:	e65d      	b.n	8006e7e <_strtod_l+0x446>
 80071c2:	2e00      	cmp	r6, #0
 80071c4:	dd07      	ble.n	80071d6 <_strtod_l+0x79e>
 80071c6:	4649      	mov	r1, r9
 80071c8:	9805      	ldr	r0, [sp, #20]
 80071ca:	4632      	mov	r2, r6
 80071cc:	f002 ff78 	bl	800a0c0 <__lshift>
 80071d0:	4681      	mov	r9, r0
 80071d2:	2800      	cmp	r0, #0
 80071d4:	d0d8      	beq.n	8007188 <_strtod_l+0x750>
 80071d6:	2f00      	cmp	r7, #0
 80071d8:	dd08      	ble.n	80071ec <_strtod_l+0x7b4>
 80071da:	4641      	mov	r1, r8
 80071dc:	9805      	ldr	r0, [sp, #20]
 80071de:	463a      	mov	r2, r7
 80071e0:	f002 ff6e 	bl	800a0c0 <__lshift>
 80071e4:	4680      	mov	r8, r0
 80071e6:	2800      	cmp	r0, #0
 80071e8:	f43f ae49 	beq.w	8006e7e <_strtod_l+0x446>
 80071ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80071ee:	9805      	ldr	r0, [sp, #20]
 80071f0:	464a      	mov	r2, r9
 80071f2:	f002 ffed 	bl	800a1d0 <__mdiff>
 80071f6:	4604      	mov	r4, r0
 80071f8:	2800      	cmp	r0, #0
 80071fa:	f43f ae40 	beq.w	8006e7e <_strtod_l+0x446>
 80071fe:	68c3      	ldr	r3, [r0, #12]
 8007200:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007202:	2300      	movs	r3, #0
 8007204:	60c3      	str	r3, [r0, #12]
 8007206:	4641      	mov	r1, r8
 8007208:	f002 ffc6 	bl	800a198 <__mcmp>
 800720c:	2800      	cmp	r0, #0
 800720e:	da45      	bge.n	800729c <_strtod_l+0x864>
 8007210:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007212:	ea53 030a 	orrs.w	r3, r3, sl
 8007216:	d16b      	bne.n	80072f0 <_strtod_l+0x8b8>
 8007218:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800721c:	2b00      	cmp	r3, #0
 800721e:	d167      	bne.n	80072f0 <_strtod_l+0x8b8>
 8007220:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007224:	0d1b      	lsrs	r3, r3, #20
 8007226:	051b      	lsls	r3, r3, #20
 8007228:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800722c:	d960      	bls.n	80072f0 <_strtod_l+0x8b8>
 800722e:	6963      	ldr	r3, [r4, #20]
 8007230:	b913      	cbnz	r3, 8007238 <_strtod_l+0x800>
 8007232:	6923      	ldr	r3, [r4, #16]
 8007234:	2b01      	cmp	r3, #1
 8007236:	dd5b      	ble.n	80072f0 <_strtod_l+0x8b8>
 8007238:	4621      	mov	r1, r4
 800723a:	2201      	movs	r2, #1
 800723c:	9805      	ldr	r0, [sp, #20]
 800723e:	f002 ff3f 	bl	800a0c0 <__lshift>
 8007242:	4641      	mov	r1, r8
 8007244:	4604      	mov	r4, r0
 8007246:	f002 ffa7 	bl	800a198 <__mcmp>
 800724a:	2800      	cmp	r0, #0
 800724c:	dd50      	ble.n	80072f0 <_strtod_l+0x8b8>
 800724e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007252:	9a08      	ldr	r2, [sp, #32]
 8007254:	0d1b      	lsrs	r3, r3, #20
 8007256:	051b      	lsls	r3, r3, #20
 8007258:	2a00      	cmp	r2, #0
 800725a:	d06a      	beq.n	8007332 <_strtod_l+0x8fa>
 800725c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007260:	d867      	bhi.n	8007332 <_strtod_l+0x8fa>
 8007262:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007266:	f67f ae9d 	bls.w	8006fa4 <_strtod_l+0x56c>
 800726a:	4b0a      	ldr	r3, [pc, #40]	@ (8007294 <_strtod_l+0x85c>)
 800726c:	4650      	mov	r0, sl
 800726e:	4659      	mov	r1, fp
 8007270:	2200      	movs	r2, #0
 8007272:	f7f9 f9d9 	bl	8000628 <__aeabi_dmul>
 8007276:	4b08      	ldr	r3, [pc, #32]	@ (8007298 <_strtod_l+0x860>)
 8007278:	400b      	ands	r3, r1
 800727a:	4682      	mov	sl, r0
 800727c:	468b      	mov	fp, r1
 800727e:	2b00      	cmp	r3, #0
 8007280:	f47f ae08 	bne.w	8006e94 <_strtod_l+0x45c>
 8007284:	9a05      	ldr	r2, [sp, #20]
 8007286:	2322      	movs	r3, #34	@ 0x22
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	e603      	b.n	8006e94 <_strtod_l+0x45c>
 800728c:	0800c420 	.word	0x0800c420
 8007290:	fffffc02 	.word	0xfffffc02
 8007294:	39500000 	.word	0x39500000
 8007298:	7ff00000 	.word	0x7ff00000
 800729c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80072a0:	d165      	bne.n	800736e <_strtod_l+0x936>
 80072a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80072a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072a8:	b35a      	cbz	r2, 8007302 <_strtod_l+0x8ca>
 80072aa:	4a9f      	ldr	r2, [pc, #636]	@ (8007528 <_strtod_l+0xaf0>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d12b      	bne.n	8007308 <_strtod_l+0x8d0>
 80072b0:	9b08      	ldr	r3, [sp, #32]
 80072b2:	4651      	mov	r1, sl
 80072b4:	b303      	cbz	r3, 80072f8 <_strtod_l+0x8c0>
 80072b6:	4b9d      	ldr	r3, [pc, #628]	@ (800752c <_strtod_l+0xaf4>)
 80072b8:	465a      	mov	r2, fp
 80072ba:	4013      	ands	r3, r2
 80072bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80072c0:	f04f 32ff 	mov.w	r2, #4294967295
 80072c4:	d81b      	bhi.n	80072fe <_strtod_l+0x8c6>
 80072c6:	0d1b      	lsrs	r3, r3, #20
 80072c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80072cc:	fa02 f303 	lsl.w	r3, r2, r3
 80072d0:	4299      	cmp	r1, r3
 80072d2:	d119      	bne.n	8007308 <_strtod_l+0x8d0>
 80072d4:	4b96      	ldr	r3, [pc, #600]	@ (8007530 <_strtod_l+0xaf8>)
 80072d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072d8:	429a      	cmp	r2, r3
 80072da:	d102      	bne.n	80072e2 <_strtod_l+0x8aa>
 80072dc:	3101      	adds	r1, #1
 80072de:	f43f adce 	beq.w	8006e7e <_strtod_l+0x446>
 80072e2:	4b92      	ldr	r3, [pc, #584]	@ (800752c <_strtod_l+0xaf4>)
 80072e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072e6:	401a      	ands	r2, r3
 80072e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80072ec:	f04f 0a00 	mov.w	sl, #0
 80072f0:	9b08      	ldr	r3, [sp, #32]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1b9      	bne.n	800726a <_strtod_l+0x832>
 80072f6:	e5cd      	b.n	8006e94 <_strtod_l+0x45c>
 80072f8:	f04f 33ff 	mov.w	r3, #4294967295
 80072fc:	e7e8      	b.n	80072d0 <_strtod_l+0x898>
 80072fe:	4613      	mov	r3, r2
 8007300:	e7e6      	b.n	80072d0 <_strtod_l+0x898>
 8007302:	ea53 030a 	orrs.w	r3, r3, sl
 8007306:	d0a2      	beq.n	800724e <_strtod_l+0x816>
 8007308:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800730a:	b1db      	cbz	r3, 8007344 <_strtod_l+0x90c>
 800730c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800730e:	4213      	tst	r3, r2
 8007310:	d0ee      	beq.n	80072f0 <_strtod_l+0x8b8>
 8007312:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007314:	9a08      	ldr	r2, [sp, #32]
 8007316:	4650      	mov	r0, sl
 8007318:	4659      	mov	r1, fp
 800731a:	b1bb      	cbz	r3, 800734c <_strtod_l+0x914>
 800731c:	f7ff fb6d 	bl	80069fa <sulp>
 8007320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007324:	ec53 2b10 	vmov	r2, r3, d0
 8007328:	f7f8 ffc8 	bl	80002bc <__adddf3>
 800732c:	4682      	mov	sl, r0
 800732e:	468b      	mov	fp, r1
 8007330:	e7de      	b.n	80072f0 <_strtod_l+0x8b8>
 8007332:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007336:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800733a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800733e:	f04f 3aff 	mov.w	sl, #4294967295
 8007342:	e7d5      	b.n	80072f0 <_strtod_l+0x8b8>
 8007344:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007346:	ea13 0f0a 	tst.w	r3, sl
 800734a:	e7e1      	b.n	8007310 <_strtod_l+0x8d8>
 800734c:	f7ff fb55 	bl	80069fa <sulp>
 8007350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007354:	ec53 2b10 	vmov	r2, r3, d0
 8007358:	f7f8 ffae 	bl	80002b8 <__aeabi_dsub>
 800735c:	2200      	movs	r2, #0
 800735e:	2300      	movs	r3, #0
 8007360:	4682      	mov	sl, r0
 8007362:	468b      	mov	fp, r1
 8007364:	f7f9 fbc8 	bl	8000af8 <__aeabi_dcmpeq>
 8007368:	2800      	cmp	r0, #0
 800736a:	d0c1      	beq.n	80072f0 <_strtod_l+0x8b8>
 800736c:	e61a      	b.n	8006fa4 <_strtod_l+0x56c>
 800736e:	4641      	mov	r1, r8
 8007370:	4620      	mov	r0, r4
 8007372:	f003 f889 	bl	800a488 <__ratio>
 8007376:	ec57 6b10 	vmov	r6, r7, d0
 800737a:	2200      	movs	r2, #0
 800737c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007380:	4630      	mov	r0, r6
 8007382:	4639      	mov	r1, r7
 8007384:	f7f9 fbcc 	bl	8000b20 <__aeabi_dcmple>
 8007388:	2800      	cmp	r0, #0
 800738a:	d06f      	beq.n	800746c <_strtod_l+0xa34>
 800738c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800738e:	2b00      	cmp	r3, #0
 8007390:	d17a      	bne.n	8007488 <_strtod_l+0xa50>
 8007392:	f1ba 0f00 	cmp.w	sl, #0
 8007396:	d158      	bne.n	800744a <_strtod_l+0xa12>
 8007398:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800739a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d15a      	bne.n	8007458 <_strtod_l+0xa20>
 80073a2:	4b64      	ldr	r3, [pc, #400]	@ (8007534 <_strtod_l+0xafc>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	4630      	mov	r0, r6
 80073a8:	4639      	mov	r1, r7
 80073aa:	f7f9 fbaf 	bl	8000b0c <__aeabi_dcmplt>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d159      	bne.n	8007466 <_strtod_l+0xa2e>
 80073b2:	4630      	mov	r0, r6
 80073b4:	4639      	mov	r1, r7
 80073b6:	4b60      	ldr	r3, [pc, #384]	@ (8007538 <_strtod_l+0xb00>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	f7f9 f935 	bl	8000628 <__aeabi_dmul>
 80073be:	4606      	mov	r6, r0
 80073c0:	460f      	mov	r7, r1
 80073c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80073c6:	9606      	str	r6, [sp, #24]
 80073c8:	9307      	str	r3, [sp, #28]
 80073ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073ce:	4d57      	ldr	r5, [pc, #348]	@ (800752c <_strtod_l+0xaf4>)
 80073d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80073d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073d6:	401d      	ands	r5, r3
 80073d8:	4b58      	ldr	r3, [pc, #352]	@ (800753c <_strtod_l+0xb04>)
 80073da:	429d      	cmp	r5, r3
 80073dc:	f040 80b2 	bne.w	8007544 <_strtod_l+0xb0c>
 80073e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80073e6:	ec4b ab10 	vmov	d0, sl, fp
 80073ea:	f002 ff85 	bl	800a2f8 <__ulp>
 80073ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073f2:	ec51 0b10 	vmov	r0, r1, d0
 80073f6:	f7f9 f917 	bl	8000628 <__aeabi_dmul>
 80073fa:	4652      	mov	r2, sl
 80073fc:	465b      	mov	r3, fp
 80073fe:	f7f8 ff5d 	bl	80002bc <__adddf3>
 8007402:	460b      	mov	r3, r1
 8007404:	4949      	ldr	r1, [pc, #292]	@ (800752c <_strtod_l+0xaf4>)
 8007406:	4a4e      	ldr	r2, [pc, #312]	@ (8007540 <_strtod_l+0xb08>)
 8007408:	4019      	ands	r1, r3
 800740a:	4291      	cmp	r1, r2
 800740c:	4682      	mov	sl, r0
 800740e:	d942      	bls.n	8007496 <_strtod_l+0xa5e>
 8007410:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007412:	4b47      	ldr	r3, [pc, #284]	@ (8007530 <_strtod_l+0xaf8>)
 8007414:	429a      	cmp	r2, r3
 8007416:	d103      	bne.n	8007420 <_strtod_l+0x9e8>
 8007418:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800741a:	3301      	adds	r3, #1
 800741c:	f43f ad2f 	beq.w	8006e7e <_strtod_l+0x446>
 8007420:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007530 <_strtod_l+0xaf8>
 8007424:	f04f 3aff 	mov.w	sl, #4294967295
 8007428:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800742a:	9805      	ldr	r0, [sp, #20]
 800742c:	f002 fc38 	bl	8009ca0 <_Bfree>
 8007430:	9805      	ldr	r0, [sp, #20]
 8007432:	4649      	mov	r1, r9
 8007434:	f002 fc34 	bl	8009ca0 <_Bfree>
 8007438:	9805      	ldr	r0, [sp, #20]
 800743a:	4641      	mov	r1, r8
 800743c:	f002 fc30 	bl	8009ca0 <_Bfree>
 8007440:	9805      	ldr	r0, [sp, #20]
 8007442:	4621      	mov	r1, r4
 8007444:	f002 fc2c 	bl	8009ca0 <_Bfree>
 8007448:	e619      	b.n	800707e <_strtod_l+0x646>
 800744a:	f1ba 0f01 	cmp.w	sl, #1
 800744e:	d103      	bne.n	8007458 <_strtod_l+0xa20>
 8007450:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007452:	2b00      	cmp	r3, #0
 8007454:	f43f ada6 	beq.w	8006fa4 <_strtod_l+0x56c>
 8007458:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007508 <_strtod_l+0xad0>
 800745c:	4f35      	ldr	r7, [pc, #212]	@ (8007534 <_strtod_l+0xafc>)
 800745e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007462:	2600      	movs	r6, #0
 8007464:	e7b1      	b.n	80073ca <_strtod_l+0x992>
 8007466:	4f34      	ldr	r7, [pc, #208]	@ (8007538 <_strtod_l+0xb00>)
 8007468:	2600      	movs	r6, #0
 800746a:	e7aa      	b.n	80073c2 <_strtod_l+0x98a>
 800746c:	4b32      	ldr	r3, [pc, #200]	@ (8007538 <_strtod_l+0xb00>)
 800746e:	4630      	mov	r0, r6
 8007470:	4639      	mov	r1, r7
 8007472:	2200      	movs	r2, #0
 8007474:	f7f9 f8d8 	bl	8000628 <__aeabi_dmul>
 8007478:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800747a:	4606      	mov	r6, r0
 800747c:	460f      	mov	r7, r1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d09f      	beq.n	80073c2 <_strtod_l+0x98a>
 8007482:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007486:	e7a0      	b.n	80073ca <_strtod_l+0x992>
 8007488:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007510 <_strtod_l+0xad8>
 800748c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007490:	ec57 6b17 	vmov	r6, r7, d7
 8007494:	e799      	b.n	80073ca <_strtod_l+0x992>
 8007496:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800749a:	9b08      	ldr	r3, [sp, #32]
 800749c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1c1      	bne.n	8007428 <_strtod_l+0x9f0>
 80074a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80074a8:	0d1b      	lsrs	r3, r3, #20
 80074aa:	051b      	lsls	r3, r3, #20
 80074ac:	429d      	cmp	r5, r3
 80074ae:	d1bb      	bne.n	8007428 <_strtod_l+0x9f0>
 80074b0:	4630      	mov	r0, r6
 80074b2:	4639      	mov	r1, r7
 80074b4:	f7f9 fc18 	bl	8000ce8 <__aeabi_d2lz>
 80074b8:	f7f9 f888 	bl	80005cc <__aeabi_l2d>
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	4630      	mov	r0, r6
 80074c2:	4639      	mov	r1, r7
 80074c4:	f7f8 fef8 	bl	80002b8 <__aeabi_dsub>
 80074c8:	460b      	mov	r3, r1
 80074ca:	4602      	mov	r2, r0
 80074cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80074d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80074d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074d6:	ea46 060a 	orr.w	r6, r6, sl
 80074da:	431e      	orrs	r6, r3
 80074dc:	d06f      	beq.n	80075be <_strtod_l+0xb86>
 80074de:	a30e      	add	r3, pc, #56	@ (adr r3, 8007518 <_strtod_l+0xae0>)
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	f7f9 fb12 	bl	8000b0c <__aeabi_dcmplt>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	f47f acd3 	bne.w	8006e94 <_strtod_l+0x45c>
 80074ee:	a30c      	add	r3, pc, #48	@ (adr r3, 8007520 <_strtod_l+0xae8>)
 80074f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074f8:	f7f9 fb26 	bl	8000b48 <__aeabi_dcmpgt>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d093      	beq.n	8007428 <_strtod_l+0x9f0>
 8007500:	e4c8      	b.n	8006e94 <_strtod_l+0x45c>
 8007502:	bf00      	nop
 8007504:	f3af 8000 	nop.w
 8007508:	00000000 	.word	0x00000000
 800750c:	bff00000 	.word	0xbff00000
 8007510:	00000000 	.word	0x00000000
 8007514:	3ff00000 	.word	0x3ff00000
 8007518:	94a03595 	.word	0x94a03595
 800751c:	3fdfffff 	.word	0x3fdfffff
 8007520:	35afe535 	.word	0x35afe535
 8007524:	3fe00000 	.word	0x3fe00000
 8007528:	000fffff 	.word	0x000fffff
 800752c:	7ff00000 	.word	0x7ff00000
 8007530:	7fefffff 	.word	0x7fefffff
 8007534:	3ff00000 	.word	0x3ff00000
 8007538:	3fe00000 	.word	0x3fe00000
 800753c:	7fe00000 	.word	0x7fe00000
 8007540:	7c9fffff 	.word	0x7c9fffff
 8007544:	9b08      	ldr	r3, [sp, #32]
 8007546:	b323      	cbz	r3, 8007592 <_strtod_l+0xb5a>
 8007548:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800754c:	d821      	bhi.n	8007592 <_strtod_l+0xb5a>
 800754e:	a328      	add	r3, pc, #160	@ (adr r3, 80075f0 <_strtod_l+0xbb8>)
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	4630      	mov	r0, r6
 8007556:	4639      	mov	r1, r7
 8007558:	f7f9 fae2 	bl	8000b20 <__aeabi_dcmple>
 800755c:	b1a0      	cbz	r0, 8007588 <_strtod_l+0xb50>
 800755e:	4639      	mov	r1, r7
 8007560:	4630      	mov	r0, r6
 8007562:	f7f9 fb39 	bl	8000bd8 <__aeabi_d2uiz>
 8007566:	2801      	cmp	r0, #1
 8007568:	bf38      	it	cc
 800756a:	2001      	movcc	r0, #1
 800756c:	f7f8 ffe2 	bl	8000534 <__aeabi_ui2d>
 8007570:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007572:	4606      	mov	r6, r0
 8007574:	460f      	mov	r7, r1
 8007576:	b9fb      	cbnz	r3, 80075b8 <_strtod_l+0xb80>
 8007578:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800757c:	9014      	str	r0, [sp, #80]	@ 0x50
 800757e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007580:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007584:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007588:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800758a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800758e:	1b5b      	subs	r3, r3, r5
 8007590:	9311      	str	r3, [sp, #68]	@ 0x44
 8007592:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007596:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800759a:	f002 fead 	bl	800a2f8 <__ulp>
 800759e:	4650      	mov	r0, sl
 80075a0:	ec53 2b10 	vmov	r2, r3, d0
 80075a4:	4659      	mov	r1, fp
 80075a6:	f7f9 f83f 	bl	8000628 <__aeabi_dmul>
 80075aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80075ae:	f7f8 fe85 	bl	80002bc <__adddf3>
 80075b2:	4682      	mov	sl, r0
 80075b4:	468b      	mov	fp, r1
 80075b6:	e770      	b.n	800749a <_strtod_l+0xa62>
 80075b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80075bc:	e7e0      	b.n	8007580 <_strtod_l+0xb48>
 80075be:	a30e      	add	r3, pc, #56	@ (adr r3, 80075f8 <_strtod_l+0xbc0>)
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f7f9 faa2 	bl	8000b0c <__aeabi_dcmplt>
 80075c8:	e798      	b.n	80074fc <_strtod_l+0xac4>
 80075ca:	2300      	movs	r3, #0
 80075cc:	930e      	str	r3, [sp, #56]	@ 0x38
 80075ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80075d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	f7ff ba6d 	b.w	8006ab2 <_strtod_l+0x7a>
 80075d8:	2a65      	cmp	r2, #101	@ 0x65
 80075da:	f43f ab68 	beq.w	8006cae <_strtod_l+0x276>
 80075de:	2a45      	cmp	r2, #69	@ 0x45
 80075e0:	f43f ab65 	beq.w	8006cae <_strtod_l+0x276>
 80075e4:	2301      	movs	r3, #1
 80075e6:	f7ff bba0 	b.w	8006d2a <_strtod_l+0x2f2>
 80075ea:	bf00      	nop
 80075ec:	f3af 8000 	nop.w
 80075f0:	ffc00000 	.word	0xffc00000
 80075f4:	41dfffff 	.word	0x41dfffff
 80075f8:	94a03595 	.word	0x94a03595
 80075fc:	3fcfffff 	.word	0x3fcfffff

08007600 <strtod>:
 8007600:	460a      	mov	r2, r1
 8007602:	4601      	mov	r1, r0
 8007604:	4802      	ldr	r0, [pc, #8]	@ (8007610 <strtod+0x10>)
 8007606:	4b03      	ldr	r3, [pc, #12]	@ (8007614 <strtod+0x14>)
 8007608:	6800      	ldr	r0, [r0, #0]
 800760a:	f7ff ba15 	b.w	8006a38 <_strtod_l>
 800760e:	bf00      	nop
 8007610:	2000018c 	.word	0x2000018c
 8007614:	20000020 	.word	0x20000020

08007618 <_strtol_l.isra.0>:
 8007618:	2b24      	cmp	r3, #36	@ 0x24
 800761a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800761e:	4686      	mov	lr, r0
 8007620:	4690      	mov	r8, r2
 8007622:	d801      	bhi.n	8007628 <_strtol_l.isra.0+0x10>
 8007624:	2b01      	cmp	r3, #1
 8007626:	d106      	bne.n	8007636 <_strtol_l.isra.0+0x1e>
 8007628:	f000 ffe8 	bl	80085fc <__errno>
 800762c:	2316      	movs	r3, #22
 800762e:	6003      	str	r3, [r0, #0]
 8007630:	2000      	movs	r0, #0
 8007632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007636:	4834      	ldr	r0, [pc, #208]	@ (8007708 <_strtol_l.isra.0+0xf0>)
 8007638:	460d      	mov	r5, r1
 800763a:	462a      	mov	r2, r5
 800763c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007640:	5d06      	ldrb	r6, [r0, r4]
 8007642:	f016 0608 	ands.w	r6, r6, #8
 8007646:	d1f8      	bne.n	800763a <_strtol_l.isra.0+0x22>
 8007648:	2c2d      	cmp	r4, #45	@ 0x2d
 800764a:	d110      	bne.n	800766e <_strtol_l.isra.0+0x56>
 800764c:	782c      	ldrb	r4, [r5, #0]
 800764e:	2601      	movs	r6, #1
 8007650:	1c95      	adds	r5, r2, #2
 8007652:	f033 0210 	bics.w	r2, r3, #16
 8007656:	d115      	bne.n	8007684 <_strtol_l.isra.0+0x6c>
 8007658:	2c30      	cmp	r4, #48	@ 0x30
 800765a:	d10d      	bne.n	8007678 <_strtol_l.isra.0+0x60>
 800765c:	782a      	ldrb	r2, [r5, #0]
 800765e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007662:	2a58      	cmp	r2, #88	@ 0x58
 8007664:	d108      	bne.n	8007678 <_strtol_l.isra.0+0x60>
 8007666:	786c      	ldrb	r4, [r5, #1]
 8007668:	3502      	adds	r5, #2
 800766a:	2310      	movs	r3, #16
 800766c:	e00a      	b.n	8007684 <_strtol_l.isra.0+0x6c>
 800766e:	2c2b      	cmp	r4, #43	@ 0x2b
 8007670:	bf04      	itt	eq
 8007672:	782c      	ldrbeq	r4, [r5, #0]
 8007674:	1c95      	addeq	r5, r2, #2
 8007676:	e7ec      	b.n	8007652 <_strtol_l.isra.0+0x3a>
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1f6      	bne.n	800766a <_strtol_l.isra.0+0x52>
 800767c:	2c30      	cmp	r4, #48	@ 0x30
 800767e:	bf14      	ite	ne
 8007680:	230a      	movne	r3, #10
 8007682:	2308      	moveq	r3, #8
 8007684:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007688:	f10c 3cff 	add.w	ip, ip, #4294967295
 800768c:	2200      	movs	r2, #0
 800768e:	fbbc f9f3 	udiv	r9, ip, r3
 8007692:	4610      	mov	r0, r2
 8007694:	fb03 ca19 	mls	sl, r3, r9, ip
 8007698:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800769c:	2f09      	cmp	r7, #9
 800769e:	d80f      	bhi.n	80076c0 <_strtol_l.isra.0+0xa8>
 80076a0:	463c      	mov	r4, r7
 80076a2:	42a3      	cmp	r3, r4
 80076a4:	dd1b      	ble.n	80076de <_strtol_l.isra.0+0xc6>
 80076a6:	1c57      	adds	r7, r2, #1
 80076a8:	d007      	beq.n	80076ba <_strtol_l.isra.0+0xa2>
 80076aa:	4581      	cmp	r9, r0
 80076ac:	d314      	bcc.n	80076d8 <_strtol_l.isra.0+0xc0>
 80076ae:	d101      	bne.n	80076b4 <_strtol_l.isra.0+0x9c>
 80076b0:	45a2      	cmp	sl, r4
 80076b2:	db11      	blt.n	80076d8 <_strtol_l.isra.0+0xc0>
 80076b4:	fb00 4003 	mla	r0, r0, r3, r4
 80076b8:	2201      	movs	r2, #1
 80076ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076be:	e7eb      	b.n	8007698 <_strtol_l.isra.0+0x80>
 80076c0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80076c4:	2f19      	cmp	r7, #25
 80076c6:	d801      	bhi.n	80076cc <_strtol_l.isra.0+0xb4>
 80076c8:	3c37      	subs	r4, #55	@ 0x37
 80076ca:	e7ea      	b.n	80076a2 <_strtol_l.isra.0+0x8a>
 80076cc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80076d0:	2f19      	cmp	r7, #25
 80076d2:	d804      	bhi.n	80076de <_strtol_l.isra.0+0xc6>
 80076d4:	3c57      	subs	r4, #87	@ 0x57
 80076d6:	e7e4      	b.n	80076a2 <_strtol_l.isra.0+0x8a>
 80076d8:	f04f 32ff 	mov.w	r2, #4294967295
 80076dc:	e7ed      	b.n	80076ba <_strtol_l.isra.0+0xa2>
 80076de:	1c53      	adds	r3, r2, #1
 80076e0:	d108      	bne.n	80076f4 <_strtol_l.isra.0+0xdc>
 80076e2:	2322      	movs	r3, #34	@ 0x22
 80076e4:	f8ce 3000 	str.w	r3, [lr]
 80076e8:	4660      	mov	r0, ip
 80076ea:	f1b8 0f00 	cmp.w	r8, #0
 80076ee:	d0a0      	beq.n	8007632 <_strtol_l.isra.0+0x1a>
 80076f0:	1e69      	subs	r1, r5, #1
 80076f2:	e006      	b.n	8007702 <_strtol_l.isra.0+0xea>
 80076f4:	b106      	cbz	r6, 80076f8 <_strtol_l.isra.0+0xe0>
 80076f6:	4240      	negs	r0, r0
 80076f8:	f1b8 0f00 	cmp.w	r8, #0
 80076fc:	d099      	beq.n	8007632 <_strtol_l.isra.0+0x1a>
 80076fe:	2a00      	cmp	r2, #0
 8007700:	d1f6      	bne.n	80076f0 <_strtol_l.isra.0+0xd8>
 8007702:	f8c8 1000 	str.w	r1, [r8]
 8007706:	e794      	b.n	8007632 <_strtol_l.isra.0+0x1a>
 8007708:	0800c449 	.word	0x0800c449

0800770c <strtol>:
 800770c:	4613      	mov	r3, r2
 800770e:	460a      	mov	r2, r1
 8007710:	4601      	mov	r1, r0
 8007712:	4802      	ldr	r0, [pc, #8]	@ (800771c <strtol+0x10>)
 8007714:	6800      	ldr	r0, [r0, #0]
 8007716:	f7ff bf7f 	b.w	8007618 <_strtol_l.isra.0>
 800771a:	bf00      	nop
 800771c:	2000018c 	.word	0x2000018c

08007720 <__cvt>:
 8007720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007724:	ec57 6b10 	vmov	r6, r7, d0
 8007728:	2f00      	cmp	r7, #0
 800772a:	460c      	mov	r4, r1
 800772c:	4619      	mov	r1, r3
 800772e:	463b      	mov	r3, r7
 8007730:	bfbb      	ittet	lt
 8007732:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007736:	461f      	movlt	r7, r3
 8007738:	2300      	movge	r3, #0
 800773a:	232d      	movlt	r3, #45	@ 0x2d
 800773c:	700b      	strb	r3, [r1, #0]
 800773e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007740:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007744:	4691      	mov	r9, r2
 8007746:	f023 0820 	bic.w	r8, r3, #32
 800774a:	bfbc      	itt	lt
 800774c:	4632      	movlt	r2, r6
 800774e:	4616      	movlt	r6, r2
 8007750:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007754:	d005      	beq.n	8007762 <__cvt+0x42>
 8007756:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800775a:	d100      	bne.n	800775e <__cvt+0x3e>
 800775c:	3401      	adds	r4, #1
 800775e:	2102      	movs	r1, #2
 8007760:	e000      	b.n	8007764 <__cvt+0x44>
 8007762:	2103      	movs	r1, #3
 8007764:	ab03      	add	r3, sp, #12
 8007766:	9301      	str	r3, [sp, #4]
 8007768:	ab02      	add	r3, sp, #8
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	ec47 6b10 	vmov	d0, r6, r7
 8007770:	4653      	mov	r3, sl
 8007772:	4622      	mov	r2, r4
 8007774:	f001 f838 	bl	80087e8 <_dtoa_r>
 8007778:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800777c:	4605      	mov	r5, r0
 800777e:	d119      	bne.n	80077b4 <__cvt+0x94>
 8007780:	f019 0f01 	tst.w	r9, #1
 8007784:	d00e      	beq.n	80077a4 <__cvt+0x84>
 8007786:	eb00 0904 	add.w	r9, r0, r4
 800778a:	2200      	movs	r2, #0
 800778c:	2300      	movs	r3, #0
 800778e:	4630      	mov	r0, r6
 8007790:	4639      	mov	r1, r7
 8007792:	f7f9 f9b1 	bl	8000af8 <__aeabi_dcmpeq>
 8007796:	b108      	cbz	r0, 800779c <__cvt+0x7c>
 8007798:	f8cd 900c 	str.w	r9, [sp, #12]
 800779c:	2230      	movs	r2, #48	@ 0x30
 800779e:	9b03      	ldr	r3, [sp, #12]
 80077a0:	454b      	cmp	r3, r9
 80077a2:	d31e      	bcc.n	80077e2 <__cvt+0xc2>
 80077a4:	9b03      	ldr	r3, [sp, #12]
 80077a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077a8:	1b5b      	subs	r3, r3, r5
 80077aa:	4628      	mov	r0, r5
 80077ac:	6013      	str	r3, [r2, #0]
 80077ae:	b004      	add	sp, #16
 80077b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80077b8:	eb00 0904 	add.w	r9, r0, r4
 80077bc:	d1e5      	bne.n	800778a <__cvt+0x6a>
 80077be:	7803      	ldrb	r3, [r0, #0]
 80077c0:	2b30      	cmp	r3, #48	@ 0x30
 80077c2:	d10a      	bne.n	80077da <__cvt+0xba>
 80077c4:	2200      	movs	r2, #0
 80077c6:	2300      	movs	r3, #0
 80077c8:	4630      	mov	r0, r6
 80077ca:	4639      	mov	r1, r7
 80077cc:	f7f9 f994 	bl	8000af8 <__aeabi_dcmpeq>
 80077d0:	b918      	cbnz	r0, 80077da <__cvt+0xba>
 80077d2:	f1c4 0401 	rsb	r4, r4, #1
 80077d6:	f8ca 4000 	str.w	r4, [sl]
 80077da:	f8da 3000 	ldr.w	r3, [sl]
 80077de:	4499      	add	r9, r3
 80077e0:	e7d3      	b.n	800778a <__cvt+0x6a>
 80077e2:	1c59      	adds	r1, r3, #1
 80077e4:	9103      	str	r1, [sp, #12]
 80077e6:	701a      	strb	r2, [r3, #0]
 80077e8:	e7d9      	b.n	800779e <__cvt+0x7e>

080077ea <__exponent>:
 80077ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077ec:	2900      	cmp	r1, #0
 80077ee:	bfba      	itte	lt
 80077f0:	4249      	neglt	r1, r1
 80077f2:	232d      	movlt	r3, #45	@ 0x2d
 80077f4:	232b      	movge	r3, #43	@ 0x2b
 80077f6:	2909      	cmp	r1, #9
 80077f8:	7002      	strb	r2, [r0, #0]
 80077fa:	7043      	strb	r3, [r0, #1]
 80077fc:	dd29      	ble.n	8007852 <__exponent+0x68>
 80077fe:	f10d 0307 	add.w	r3, sp, #7
 8007802:	461d      	mov	r5, r3
 8007804:	270a      	movs	r7, #10
 8007806:	461a      	mov	r2, r3
 8007808:	fbb1 f6f7 	udiv	r6, r1, r7
 800780c:	fb07 1416 	mls	r4, r7, r6, r1
 8007810:	3430      	adds	r4, #48	@ 0x30
 8007812:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007816:	460c      	mov	r4, r1
 8007818:	2c63      	cmp	r4, #99	@ 0x63
 800781a:	f103 33ff 	add.w	r3, r3, #4294967295
 800781e:	4631      	mov	r1, r6
 8007820:	dcf1      	bgt.n	8007806 <__exponent+0x1c>
 8007822:	3130      	adds	r1, #48	@ 0x30
 8007824:	1e94      	subs	r4, r2, #2
 8007826:	f803 1c01 	strb.w	r1, [r3, #-1]
 800782a:	1c41      	adds	r1, r0, #1
 800782c:	4623      	mov	r3, r4
 800782e:	42ab      	cmp	r3, r5
 8007830:	d30a      	bcc.n	8007848 <__exponent+0x5e>
 8007832:	f10d 0309 	add.w	r3, sp, #9
 8007836:	1a9b      	subs	r3, r3, r2
 8007838:	42ac      	cmp	r4, r5
 800783a:	bf88      	it	hi
 800783c:	2300      	movhi	r3, #0
 800783e:	3302      	adds	r3, #2
 8007840:	4403      	add	r3, r0
 8007842:	1a18      	subs	r0, r3, r0
 8007844:	b003      	add	sp, #12
 8007846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007848:	f813 6b01 	ldrb.w	r6, [r3], #1
 800784c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007850:	e7ed      	b.n	800782e <__exponent+0x44>
 8007852:	2330      	movs	r3, #48	@ 0x30
 8007854:	3130      	adds	r1, #48	@ 0x30
 8007856:	7083      	strb	r3, [r0, #2]
 8007858:	70c1      	strb	r1, [r0, #3]
 800785a:	1d03      	adds	r3, r0, #4
 800785c:	e7f1      	b.n	8007842 <__exponent+0x58>
	...

08007860 <_printf_float>:
 8007860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007864:	b08d      	sub	sp, #52	@ 0x34
 8007866:	460c      	mov	r4, r1
 8007868:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800786c:	4616      	mov	r6, r2
 800786e:	461f      	mov	r7, r3
 8007870:	4605      	mov	r5, r0
 8007872:	f000 fe79 	bl	8008568 <_localeconv_r>
 8007876:	6803      	ldr	r3, [r0, #0]
 8007878:	9304      	str	r3, [sp, #16]
 800787a:	4618      	mov	r0, r3
 800787c:	f7f8 fd10 	bl	80002a0 <strlen>
 8007880:	2300      	movs	r3, #0
 8007882:	930a      	str	r3, [sp, #40]	@ 0x28
 8007884:	f8d8 3000 	ldr.w	r3, [r8]
 8007888:	9005      	str	r0, [sp, #20]
 800788a:	3307      	adds	r3, #7
 800788c:	f023 0307 	bic.w	r3, r3, #7
 8007890:	f103 0208 	add.w	r2, r3, #8
 8007894:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007898:	f8d4 b000 	ldr.w	fp, [r4]
 800789c:	f8c8 2000 	str.w	r2, [r8]
 80078a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80078a8:	9307      	str	r3, [sp, #28]
 80078aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80078ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80078b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078b6:	4b9c      	ldr	r3, [pc, #624]	@ (8007b28 <_printf_float+0x2c8>)
 80078b8:	f04f 32ff 	mov.w	r2, #4294967295
 80078bc:	f7f9 f94e 	bl	8000b5c <__aeabi_dcmpun>
 80078c0:	bb70      	cbnz	r0, 8007920 <_printf_float+0xc0>
 80078c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078c6:	4b98      	ldr	r3, [pc, #608]	@ (8007b28 <_printf_float+0x2c8>)
 80078c8:	f04f 32ff 	mov.w	r2, #4294967295
 80078cc:	f7f9 f928 	bl	8000b20 <__aeabi_dcmple>
 80078d0:	bb30      	cbnz	r0, 8007920 <_printf_float+0xc0>
 80078d2:	2200      	movs	r2, #0
 80078d4:	2300      	movs	r3, #0
 80078d6:	4640      	mov	r0, r8
 80078d8:	4649      	mov	r1, r9
 80078da:	f7f9 f917 	bl	8000b0c <__aeabi_dcmplt>
 80078de:	b110      	cbz	r0, 80078e6 <_printf_float+0x86>
 80078e0:	232d      	movs	r3, #45	@ 0x2d
 80078e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078e6:	4a91      	ldr	r2, [pc, #580]	@ (8007b2c <_printf_float+0x2cc>)
 80078e8:	4b91      	ldr	r3, [pc, #580]	@ (8007b30 <_printf_float+0x2d0>)
 80078ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80078ee:	bf8c      	ite	hi
 80078f0:	4690      	movhi	r8, r2
 80078f2:	4698      	movls	r8, r3
 80078f4:	2303      	movs	r3, #3
 80078f6:	6123      	str	r3, [r4, #16]
 80078f8:	f02b 0304 	bic.w	r3, fp, #4
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	f04f 0900 	mov.w	r9, #0
 8007902:	9700      	str	r7, [sp, #0]
 8007904:	4633      	mov	r3, r6
 8007906:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007908:	4621      	mov	r1, r4
 800790a:	4628      	mov	r0, r5
 800790c:	f000 f9d2 	bl	8007cb4 <_printf_common>
 8007910:	3001      	adds	r0, #1
 8007912:	f040 808d 	bne.w	8007a30 <_printf_float+0x1d0>
 8007916:	f04f 30ff 	mov.w	r0, #4294967295
 800791a:	b00d      	add	sp, #52	@ 0x34
 800791c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007920:	4642      	mov	r2, r8
 8007922:	464b      	mov	r3, r9
 8007924:	4640      	mov	r0, r8
 8007926:	4649      	mov	r1, r9
 8007928:	f7f9 f918 	bl	8000b5c <__aeabi_dcmpun>
 800792c:	b140      	cbz	r0, 8007940 <_printf_float+0xe0>
 800792e:	464b      	mov	r3, r9
 8007930:	2b00      	cmp	r3, #0
 8007932:	bfbc      	itt	lt
 8007934:	232d      	movlt	r3, #45	@ 0x2d
 8007936:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800793a:	4a7e      	ldr	r2, [pc, #504]	@ (8007b34 <_printf_float+0x2d4>)
 800793c:	4b7e      	ldr	r3, [pc, #504]	@ (8007b38 <_printf_float+0x2d8>)
 800793e:	e7d4      	b.n	80078ea <_printf_float+0x8a>
 8007940:	6863      	ldr	r3, [r4, #4]
 8007942:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007946:	9206      	str	r2, [sp, #24]
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	d13b      	bne.n	80079c4 <_printf_float+0x164>
 800794c:	2306      	movs	r3, #6
 800794e:	6063      	str	r3, [r4, #4]
 8007950:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007954:	2300      	movs	r3, #0
 8007956:	6022      	str	r2, [r4, #0]
 8007958:	9303      	str	r3, [sp, #12]
 800795a:	ab0a      	add	r3, sp, #40	@ 0x28
 800795c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007960:	ab09      	add	r3, sp, #36	@ 0x24
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	6861      	ldr	r1, [r4, #4]
 8007966:	ec49 8b10 	vmov	d0, r8, r9
 800796a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800796e:	4628      	mov	r0, r5
 8007970:	f7ff fed6 	bl	8007720 <__cvt>
 8007974:	9b06      	ldr	r3, [sp, #24]
 8007976:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007978:	2b47      	cmp	r3, #71	@ 0x47
 800797a:	4680      	mov	r8, r0
 800797c:	d129      	bne.n	80079d2 <_printf_float+0x172>
 800797e:	1cc8      	adds	r0, r1, #3
 8007980:	db02      	blt.n	8007988 <_printf_float+0x128>
 8007982:	6863      	ldr	r3, [r4, #4]
 8007984:	4299      	cmp	r1, r3
 8007986:	dd41      	ble.n	8007a0c <_printf_float+0x1ac>
 8007988:	f1aa 0a02 	sub.w	sl, sl, #2
 800798c:	fa5f fa8a 	uxtb.w	sl, sl
 8007990:	3901      	subs	r1, #1
 8007992:	4652      	mov	r2, sl
 8007994:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007998:	9109      	str	r1, [sp, #36]	@ 0x24
 800799a:	f7ff ff26 	bl	80077ea <__exponent>
 800799e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079a0:	1813      	adds	r3, r2, r0
 80079a2:	2a01      	cmp	r2, #1
 80079a4:	4681      	mov	r9, r0
 80079a6:	6123      	str	r3, [r4, #16]
 80079a8:	dc02      	bgt.n	80079b0 <_printf_float+0x150>
 80079aa:	6822      	ldr	r2, [r4, #0]
 80079ac:	07d2      	lsls	r2, r2, #31
 80079ae:	d501      	bpl.n	80079b4 <_printf_float+0x154>
 80079b0:	3301      	adds	r3, #1
 80079b2:	6123      	str	r3, [r4, #16]
 80079b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0a2      	beq.n	8007902 <_printf_float+0xa2>
 80079bc:	232d      	movs	r3, #45	@ 0x2d
 80079be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079c2:	e79e      	b.n	8007902 <_printf_float+0xa2>
 80079c4:	9a06      	ldr	r2, [sp, #24]
 80079c6:	2a47      	cmp	r2, #71	@ 0x47
 80079c8:	d1c2      	bne.n	8007950 <_printf_float+0xf0>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1c0      	bne.n	8007950 <_printf_float+0xf0>
 80079ce:	2301      	movs	r3, #1
 80079d0:	e7bd      	b.n	800794e <_printf_float+0xee>
 80079d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079d6:	d9db      	bls.n	8007990 <_printf_float+0x130>
 80079d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80079dc:	d118      	bne.n	8007a10 <_printf_float+0x1b0>
 80079de:	2900      	cmp	r1, #0
 80079e0:	6863      	ldr	r3, [r4, #4]
 80079e2:	dd0b      	ble.n	80079fc <_printf_float+0x19c>
 80079e4:	6121      	str	r1, [r4, #16]
 80079e6:	b913      	cbnz	r3, 80079ee <_printf_float+0x18e>
 80079e8:	6822      	ldr	r2, [r4, #0]
 80079ea:	07d0      	lsls	r0, r2, #31
 80079ec:	d502      	bpl.n	80079f4 <_printf_float+0x194>
 80079ee:	3301      	adds	r3, #1
 80079f0:	440b      	add	r3, r1
 80079f2:	6123      	str	r3, [r4, #16]
 80079f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80079f6:	f04f 0900 	mov.w	r9, #0
 80079fa:	e7db      	b.n	80079b4 <_printf_float+0x154>
 80079fc:	b913      	cbnz	r3, 8007a04 <_printf_float+0x1a4>
 80079fe:	6822      	ldr	r2, [r4, #0]
 8007a00:	07d2      	lsls	r2, r2, #31
 8007a02:	d501      	bpl.n	8007a08 <_printf_float+0x1a8>
 8007a04:	3302      	adds	r3, #2
 8007a06:	e7f4      	b.n	80079f2 <_printf_float+0x192>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e7f2      	b.n	80079f2 <_printf_float+0x192>
 8007a0c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007a10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a12:	4299      	cmp	r1, r3
 8007a14:	db05      	blt.n	8007a22 <_printf_float+0x1c2>
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	6121      	str	r1, [r4, #16]
 8007a1a:	07d8      	lsls	r0, r3, #31
 8007a1c:	d5ea      	bpl.n	80079f4 <_printf_float+0x194>
 8007a1e:	1c4b      	adds	r3, r1, #1
 8007a20:	e7e7      	b.n	80079f2 <_printf_float+0x192>
 8007a22:	2900      	cmp	r1, #0
 8007a24:	bfd4      	ite	le
 8007a26:	f1c1 0202 	rsble	r2, r1, #2
 8007a2a:	2201      	movgt	r2, #1
 8007a2c:	4413      	add	r3, r2
 8007a2e:	e7e0      	b.n	80079f2 <_printf_float+0x192>
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	055a      	lsls	r2, r3, #21
 8007a34:	d407      	bmi.n	8007a46 <_printf_float+0x1e6>
 8007a36:	6923      	ldr	r3, [r4, #16]
 8007a38:	4642      	mov	r2, r8
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	47b8      	blx	r7
 8007a40:	3001      	adds	r0, #1
 8007a42:	d12b      	bne.n	8007a9c <_printf_float+0x23c>
 8007a44:	e767      	b.n	8007916 <_printf_float+0xb6>
 8007a46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a4a:	f240 80dd 	bls.w	8007c08 <_printf_float+0x3a8>
 8007a4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a52:	2200      	movs	r2, #0
 8007a54:	2300      	movs	r3, #0
 8007a56:	f7f9 f84f 	bl	8000af8 <__aeabi_dcmpeq>
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	d033      	beq.n	8007ac6 <_printf_float+0x266>
 8007a5e:	4a37      	ldr	r2, [pc, #220]	@ (8007b3c <_printf_float+0x2dc>)
 8007a60:	2301      	movs	r3, #1
 8007a62:	4631      	mov	r1, r6
 8007a64:	4628      	mov	r0, r5
 8007a66:	47b8      	blx	r7
 8007a68:	3001      	adds	r0, #1
 8007a6a:	f43f af54 	beq.w	8007916 <_printf_float+0xb6>
 8007a6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007a72:	4543      	cmp	r3, r8
 8007a74:	db02      	blt.n	8007a7c <_printf_float+0x21c>
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	07d8      	lsls	r0, r3, #31
 8007a7a:	d50f      	bpl.n	8007a9c <_printf_float+0x23c>
 8007a7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a80:	4631      	mov	r1, r6
 8007a82:	4628      	mov	r0, r5
 8007a84:	47b8      	blx	r7
 8007a86:	3001      	adds	r0, #1
 8007a88:	f43f af45 	beq.w	8007916 <_printf_float+0xb6>
 8007a8c:	f04f 0900 	mov.w	r9, #0
 8007a90:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a94:	f104 0a1a 	add.w	sl, r4, #26
 8007a98:	45c8      	cmp	r8, r9
 8007a9a:	dc09      	bgt.n	8007ab0 <_printf_float+0x250>
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	079b      	lsls	r3, r3, #30
 8007aa0:	f100 8103 	bmi.w	8007caa <_printf_float+0x44a>
 8007aa4:	68e0      	ldr	r0, [r4, #12]
 8007aa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007aa8:	4298      	cmp	r0, r3
 8007aaa:	bfb8      	it	lt
 8007aac:	4618      	movlt	r0, r3
 8007aae:	e734      	b.n	800791a <_printf_float+0xba>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	4652      	mov	r2, sl
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	47b8      	blx	r7
 8007aba:	3001      	adds	r0, #1
 8007abc:	f43f af2b 	beq.w	8007916 <_printf_float+0xb6>
 8007ac0:	f109 0901 	add.w	r9, r9, #1
 8007ac4:	e7e8      	b.n	8007a98 <_printf_float+0x238>
 8007ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	dc39      	bgt.n	8007b40 <_printf_float+0x2e0>
 8007acc:	4a1b      	ldr	r2, [pc, #108]	@ (8007b3c <_printf_float+0x2dc>)
 8007ace:	2301      	movs	r3, #1
 8007ad0:	4631      	mov	r1, r6
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	47b8      	blx	r7
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	f43f af1d 	beq.w	8007916 <_printf_float+0xb6>
 8007adc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007ae0:	ea59 0303 	orrs.w	r3, r9, r3
 8007ae4:	d102      	bne.n	8007aec <_printf_float+0x28c>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	07d9      	lsls	r1, r3, #31
 8007aea:	d5d7      	bpl.n	8007a9c <_printf_float+0x23c>
 8007aec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007af0:	4631      	mov	r1, r6
 8007af2:	4628      	mov	r0, r5
 8007af4:	47b8      	blx	r7
 8007af6:	3001      	adds	r0, #1
 8007af8:	f43f af0d 	beq.w	8007916 <_printf_float+0xb6>
 8007afc:	f04f 0a00 	mov.w	sl, #0
 8007b00:	f104 0b1a 	add.w	fp, r4, #26
 8007b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b06:	425b      	negs	r3, r3
 8007b08:	4553      	cmp	r3, sl
 8007b0a:	dc01      	bgt.n	8007b10 <_printf_float+0x2b0>
 8007b0c:	464b      	mov	r3, r9
 8007b0e:	e793      	b.n	8007a38 <_printf_float+0x1d8>
 8007b10:	2301      	movs	r3, #1
 8007b12:	465a      	mov	r2, fp
 8007b14:	4631      	mov	r1, r6
 8007b16:	4628      	mov	r0, r5
 8007b18:	47b8      	blx	r7
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	f43f aefb 	beq.w	8007916 <_printf_float+0xb6>
 8007b20:	f10a 0a01 	add.w	sl, sl, #1
 8007b24:	e7ee      	b.n	8007b04 <_printf_float+0x2a4>
 8007b26:	bf00      	nop
 8007b28:	7fefffff 	.word	0x7fefffff
 8007b2c:	0800c1ce 	.word	0x0800c1ce
 8007b30:	0800c1ca 	.word	0x0800c1ca
 8007b34:	0800c1d6 	.word	0x0800c1d6
 8007b38:	0800c1d2 	.word	0x0800c1d2
 8007b3c:	0800c1da 	.word	0x0800c1da
 8007b40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b42:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b46:	4553      	cmp	r3, sl
 8007b48:	bfa8      	it	ge
 8007b4a:	4653      	movge	r3, sl
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	4699      	mov	r9, r3
 8007b50:	dc36      	bgt.n	8007bc0 <_printf_float+0x360>
 8007b52:	f04f 0b00 	mov.w	fp, #0
 8007b56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b5a:	f104 021a 	add.w	r2, r4, #26
 8007b5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b60:	9306      	str	r3, [sp, #24]
 8007b62:	eba3 0309 	sub.w	r3, r3, r9
 8007b66:	455b      	cmp	r3, fp
 8007b68:	dc31      	bgt.n	8007bce <_printf_float+0x36e>
 8007b6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b6c:	459a      	cmp	sl, r3
 8007b6e:	dc3a      	bgt.n	8007be6 <_printf_float+0x386>
 8007b70:	6823      	ldr	r3, [r4, #0]
 8007b72:	07da      	lsls	r2, r3, #31
 8007b74:	d437      	bmi.n	8007be6 <_printf_float+0x386>
 8007b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b78:	ebaa 0903 	sub.w	r9, sl, r3
 8007b7c:	9b06      	ldr	r3, [sp, #24]
 8007b7e:	ebaa 0303 	sub.w	r3, sl, r3
 8007b82:	4599      	cmp	r9, r3
 8007b84:	bfa8      	it	ge
 8007b86:	4699      	movge	r9, r3
 8007b88:	f1b9 0f00 	cmp.w	r9, #0
 8007b8c:	dc33      	bgt.n	8007bf6 <_printf_float+0x396>
 8007b8e:	f04f 0800 	mov.w	r8, #0
 8007b92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b96:	f104 0b1a 	add.w	fp, r4, #26
 8007b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b9c:	ebaa 0303 	sub.w	r3, sl, r3
 8007ba0:	eba3 0309 	sub.w	r3, r3, r9
 8007ba4:	4543      	cmp	r3, r8
 8007ba6:	f77f af79 	ble.w	8007a9c <_printf_float+0x23c>
 8007baa:	2301      	movs	r3, #1
 8007bac:	465a      	mov	r2, fp
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	47b8      	blx	r7
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	f43f aeae 	beq.w	8007916 <_printf_float+0xb6>
 8007bba:	f108 0801 	add.w	r8, r8, #1
 8007bbe:	e7ec      	b.n	8007b9a <_printf_float+0x33a>
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	4631      	mov	r1, r6
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	47b8      	blx	r7
 8007bc8:	3001      	adds	r0, #1
 8007bca:	d1c2      	bne.n	8007b52 <_printf_float+0x2f2>
 8007bcc:	e6a3      	b.n	8007916 <_printf_float+0xb6>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	9206      	str	r2, [sp, #24]
 8007bd6:	47b8      	blx	r7
 8007bd8:	3001      	adds	r0, #1
 8007bda:	f43f ae9c 	beq.w	8007916 <_printf_float+0xb6>
 8007bde:	9a06      	ldr	r2, [sp, #24]
 8007be0:	f10b 0b01 	add.w	fp, fp, #1
 8007be4:	e7bb      	b.n	8007b5e <_printf_float+0x2fe>
 8007be6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bea:	4631      	mov	r1, r6
 8007bec:	4628      	mov	r0, r5
 8007bee:	47b8      	blx	r7
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d1c0      	bne.n	8007b76 <_printf_float+0x316>
 8007bf4:	e68f      	b.n	8007916 <_printf_float+0xb6>
 8007bf6:	9a06      	ldr	r2, [sp, #24]
 8007bf8:	464b      	mov	r3, r9
 8007bfa:	4442      	add	r2, r8
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4628      	mov	r0, r5
 8007c00:	47b8      	blx	r7
 8007c02:	3001      	adds	r0, #1
 8007c04:	d1c3      	bne.n	8007b8e <_printf_float+0x32e>
 8007c06:	e686      	b.n	8007916 <_printf_float+0xb6>
 8007c08:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c0c:	f1ba 0f01 	cmp.w	sl, #1
 8007c10:	dc01      	bgt.n	8007c16 <_printf_float+0x3b6>
 8007c12:	07db      	lsls	r3, r3, #31
 8007c14:	d536      	bpl.n	8007c84 <_printf_float+0x424>
 8007c16:	2301      	movs	r3, #1
 8007c18:	4642      	mov	r2, r8
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	47b8      	blx	r7
 8007c20:	3001      	adds	r0, #1
 8007c22:	f43f ae78 	beq.w	8007916 <_printf_float+0xb6>
 8007c26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c2a:	4631      	mov	r1, r6
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	47b8      	blx	r7
 8007c30:	3001      	adds	r0, #1
 8007c32:	f43f ae70 	beq.w	8007916 <_printf_float+0xb6>
 8007c36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c42:	f7f8 ff59 	bl	8000af8 <__aeabi_dcmpeq>
 8007c46:	b9c0      	cbnz	r0, 8007c7a <_printf_float+0x41a>
 8007c48:	4653      	mov	r3, sl
 8007c4a:	f108 0201 	add.w	r2, r8, #1
 8007c4e:	4631      	mov	r1, r6
 8007c50:	4628      	mov	r0, r5
 8007c52:	47b8      	blx	r7
 8007c54:	3001      	adds	r0, #1
 8007c56:	d10c      	bne.n	8007c72 <_printf_float+0x412>
 8007c58:	e65d      	b.n	8007916 <_printf_float+0xb6>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	465a      	mov	r2, fp
 8007c5e:	4631      	mov	r1, r6
 8007c60:	4628      	mov	r0, r5
 8007c62:	47b8      	blx	r7
 8007c64:	3001      	adds	r0, #1
 8007c66:	f43f ae56 	beq.w	8007916 <_printf_float+0xb6>
 8007c6a:	f108 0801 	add.w	r8, r8, #1
 8007c6e:	45d0      	cmp	r8, sl
 8007c70:	dbf3      	blt.n	8007c5a <_printf_float+0x3fa>
 8007c72:	464b      	mov	r3, r9
 8007c74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c78:	e6df      	b.n	8007a3a <_printf_float+0x1da>
 8007c7a:	f04f 0800 	mov.w	r8, #0
 8007c7e:	f104 0b1a 	add.w	fp, r4, #26
 8007c82:	e7f4      	b.n	8007c6e <_printf_float+0x40e>
 8007c84:	2301      	movs	r3, #1
 8007c86:	4642      	mov	r2, r8
 8007c88:	e7e1      	b.n	8007c4e <_printf_float+0x3ee>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	464a      	mov	r2, r9
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4628      	mov	r0, r5
 8007c92:	47b8      	blx	r7
 8007c94:	3001      	adds	r0, #1
 8007c96:	f43f ae3e 	beq.w	8007916 <_printf_float+0xb6>
 8007c9a:	f108 0801 	add.w	r8, r8, #1
 8007c9e:	68e3      	ldr	r3, [r4, #12]
 8007ca0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ca2:	1a5b      	subs	r3, r3, r1
 8007ca4:	4543      	cmp	r3, r8
 8007ca6:	dcf0      	bgt.n	8007c8a <_printf_float+0x42a>
 8007ca8:	e6fc      	b.n	8007aa4 <_printf_float+0x244>
 8007caa:	f04f 0800 	mov.w	r8, #0
 8007cae:	f104 0919 	add.w	r9, r4, #25
 8007cb2:	e7f4      	b.n	8007c9e <_printf_float+0x43e>

08007cb4 <_printf_common>:
 8007cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb8:	4616      	mov	r6, r2
 8007cba:	4698      	mov	r8, r3
 8007cbc:	688a      	ldr	r2, [r1, #8]
 8007cbe:	690b      	ldr	r3, [r1, #16]
 8007cc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	bfb8      	it	lt
 8007cc8:	4613      	movlt	r3, r2
 8007cca:	6033      	str	r3, [r6, #0]
 8007ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007cd0:	4607      	mov	r7, r0
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	b10a      	cbz	r2, 8007cda <_printf_common+0x26>
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	6033      	str	r3, [r6, #0]
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	0699      	lsls	r1, r3, #26
 8007cde:	bf42      	ittt	mi
 8007ce0:	6833      	ldrmi	r3, [r6, #0]
 8007ce2:	3302      	addmi	r3, #2
 8007ce4:	6033      	strmi	r3, [r6, #0]
 8007ce6:	6825      	ldr	r5, [r4, #0]
 8007ce8:	f015 0506 	ands.w	r5, r5, #6
 8007cec:	d106      	bne.n	8007cfc <_printf_common+0x48>
 8007cee:	f104 0a19 	add.w	sl, r4, #25
 8007cf2:	68e3      	ldr	r3, [r4, #12]
 8007cf4:	6832      	ldr	r2, [r6, #0]
 8007cf6:	1a9b      	subs	r3, r3, r2
 8007cf8:	42ab      	cmp	r3, r5
 8007cfa:	dc26      	bgt.n	8007d4a <_printf_common+0x96>
 8007cfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d00:	6822      	ldr	r2, [r4, #0]
 8007d02:	3b00      	subs	r3, #0
 8007d04:	bf18      	it	ne
 8007d06:	2301      	movne	r3, #1
 8007d08:	0692      	lsls	r2, r2, #26
 8007d0a:	d42b      	bmi.n	8007d64 <_printf_common+0xb0>
 8007d0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d10:	4641      	mov	r1, r8
 8007d12:	4638      	mov	r0, r7
 8007d14:	47c8      	blx	r9
 8007d16:	3001      	adds	r0, #1
 8007d18:	d01e      	beq.n	8007d58 <_printf_common+0xa4>
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	6922      	ldr	r2, [r4, #16]
 8007d1e:	f003 0306 	and.w	r3, r3, #6
 8007d22:	2b04      	cmp	r3, #4
 8007d24:	bf02      	ittt	eq
 8007d26:	68e5      	ldreq	r5, [r4, #12]
 8007d28:	6833      	ldreq	r3, [r6, #0]
 8007d2a:	1aed      	subeq	r5, r5, r3
 8007d2c:	68a3      	ldr	r3, [r4, #8]
 8007d2e:	bf0c      	ite	eq
 8007d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d34:	2500      	movne	r5, #0
 8007d36:	4293      	cmp	r3, r2
 8007d38:	bfc4      	itt	gt
 8007d3a:	1a9b      	subgt	r3, r3, r2
 8007d3c:	18ed      	addgt	r5, r5, r3
 8007d3e:	2600      	movs	r6, #0
 8007d40:	341a      	adds	r4, #26
 8007d42:	42b5      	cmp	r5, r6
 8007d44:	d11a      	bne.n	8007d7c <_printf_common+0xc8>
 8007d46:	2000      	movs	r0, #0
 8007d48:	e008      	b.n	8007d5c <_printf_common+0xa8>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	4652      	mov	r2, sl
 8007d4e:	4641      	mov	r1, r8
 8007d50:	4638      	mov	r0, r7
 8007d52:	47c8      	blx	r9
 8007d54:	3001      	adds	r0, #1
 8007d56:	d103      	bne.n	8007d60 <_printf_common+0xac>
 8007d58:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d60:	3501      	adds	r5, #1
 8007d62:	e7c6      	b.n	8007cf2 <_printf_common+0x3e>
 8007d64:	18e1      	adds	r1, r4, r3
 8007d66:	1c5a      	adds	r2, r3, #1
 8007d68:	2030      	movs	r0, #48	@ 0x30
 8007d6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d6e:	4422      	add	r2, r4
 8007d70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d78:	3302      	adds	r3, #2
 8007d7a:	e7c7      	b.n	8007d0c <_printf_common+0x58>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	4622      	mov	r2, r4
 8007d80:	4641      	mov	r1, r8
 8007d82:	4638      	mov	r0, r7
 8007d84:	47c8      	blx	r9
 8007d86:	3001      	adds	r0, #1
 8007d88:	d0e6      	beq.n	8007d58 <_printf_common+0xa4>
 8007d8a:	3601      	adds	r6, #1
 8007d8c:	e7d9      	b.n	8007d42 <_printf_common+0x8e>
	...

08007d90 <_printf_i>:
 8007d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d94:	7e0f      	ldrb	r7, [r1, #24]
 8007d96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d98:	2f78      	cmp	r7, #120	@ 0x78
 8007d9a:	4691      	mov	r9, r2
 8007d9c:	4680      	mov	r8, r0
 8007d9e:	460c      	mov	r4, r1
 8007da0:	469a      	mov	sl, r3
 8007da2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007da6:	d807      	bhi.n	8007db8 <_printf_i+0x28>
 8007da8:	2f62      	cmp	r7, #98	@ 0x62
 8007daa:	d80a      	bhi.n	8007dc2 <_printf_i+0x32>
 8007dac:	2f00      	cmp	r7, #0
 8007dae:	f000 80d1 	beq.w	8007f54 <_printf_i+0x1c4>
 8007db2:	2f58      	cmp	r7, #88	@ 0x58
 8007db4:	f000 80b8 	beq.w	8007f28 <_printf_i+0x198>
 8007db8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007dc0:	e03a      	b.n	8007e38 <_printf_i+0xa8>
 8007dc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007dc6:	2b15      	cmp	r3, #21
 8007dc8:	d8f6      	bhi.n	8007db8 <_printf_i+0x28>
 8007dca:	a101      	add	r1, pc, #4	@ (adr r1, 8007dd0 <_printf_i+0x40>)
 8007dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dd0:	08007e29 	.word	0x08007e29
 8007dd4:	08007e3d 	.word	0x08007e3d
 8007dd8:	08007db9 	.word	0x08007db9
 8007ddc:	08007db9 	.word	0x08007db9
 8007de0:	08007db9 	.word	0x08007db9
 8007de4:	08007db9 	.word	0x08007db9
 8007de8:	08007e3d 	.word	0x08007e3d
 8007dec:	08007db9 	.word	0x08007db9
 8007df0:	08007db9 	.word	0x08007db9
 8007df4:	08007db9 	.word	0x08007db9
 8007df8:	08007db9 	.word	0x08007db9
 8007dfc:	08007f3b 	.word	0x08007f3b
 8007e00:	08007e67 	.word	0x08007e67
 8007e04:	08007ef5 	.word	0x08007ef5
 8007e08:	08007db9 	.word	0x08007db9
 8007e0c:	08007db9 	.word	0x08007db9
 8007e10:	08007f5d 	.word	0x08007f5d
 8007e14:	08007db9 	.word	0x08007db9
 8007e18:	08007e67 	.word	0x08007e67
 8007e1c:	08007db9 	.word	0x08007db9
 8007e20:	08007db9 	.word	0x08007db9
 8007e24:	08007efd 	.word	0x08007efd
 8007e28:	6833      	ldr	r3, [r6, #0]
 8007e2a:	1d1a      	adds	r2, r3, #4
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6032      	str	r2, [r6, #0]
 8007e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e09c      	b.n	8007f76 <_printf_i+0x1e6>
 8007e3c:	6833      	ldr	r3, [r6, #0]
 8007e3e:	6820      	ldr	r0, [r4, #0]
 8007e40:	1d19      	adds	r1, r3, #4
 8007e42:	6031      	str	r1, [r6, #0]
 8007e44:	0606      	lsls	r6, r0, #24
 8007e46:	d501      	bpl.n	8007e4c <_printf_i+0xbc>
 8007e48:	681d      	ldr	r5, [r3, #0]
 8007e4a:	e003      	b.n	8007e54 <_printf_i+0xc4>
 8007e4c:	0645      	lsls	r5, r0, #25
 8007e4e:	d5fb      	bpl.n	8007e48 <_printf_i+0xb8>
 8007e50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e54:	2d00      	cmp	r5, #0
 8007e56:	da03      	bge.n	8007e60 <_printf_i+0xd0>
 8007e58:	232d      	movs	r3, #45	@ 0x2d
 8007e5a:	426d      	negs	r5, r5
 8007e5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e60:	4858      	ldr	r0, [pc, #352]	@ (8007fc4 <_printf_i+0x234>)
 8007e62:	230a      	movs	r3, #10
 8007e64:	e011      	b.n	8007e8a <_printf_i+0xfa>
 8007e66:	6821      	ldr	r1, [r4, #0]
 8007e68:	6833      	ldr	r3, [r6, #0]
 8007e6a:	0608      	lsls	r0, r1, #24
 8007e6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e70:	d402      	bmi.n	8007e78 <_printf_i+0xe8>
 8007e72:	0649      	lsls	r1, r1, #25
 8007e74:	bf48      	it	mi
 8007e76:	b2ad      	uxthmi	r5, r5
 8007e78:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e7a:	4852      	ldr	r0, [pc, #328]	@ (8007fc4 <_printf_i+0x234>)
 8007e7c:	6033      	str	r3, [r6, #0]
 8007e7e:	bf14      	ite	ne
 8007e80:	230a      	movne	r3, #10
 8007e82:	2308      	moveq	r3, #8
 8007e84:	2100      	movs	r1, #0
 8007e86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e8a:	6866      	ldr	r6, [r4, #4]
 8007e8c:	60a6      	str	r6, [r4, #8]
 8007e8e:	2e00      	cmp	r6, #0
 8007e90:	db05      	blt.n	8007e9e <_printf_i+0x10e>
 8007e92:	6821      	ldr	r1, [r4, #0]
 8007e94:	432e      	orrs	r6, r5
 8007e96:	f021 0104 	bic.w	r1, r1, #4
 8007e9a:	6021      	str	r1, [r4, #0]
 8007e9c:	d04b      	beq.n	8007f36 <_printf_i+0x1a6>
 8007e9e:	4616      	mov	r6, r2
 8007ea0:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ea4:	fb03 5711 	mls	r7, r3, r1, r5
 8007ea8:	5dc7      	ldrb	r7, [r0, r7]
 8007eaa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007eae:	462f      	mov	r7, r5
 8007eb0:	42bb      	cmp	r3, r7
 8007eb2:	460d      	mov	r5, r1
 8007eb4:	d9f4      	bls.n	8007ea0 <_printf_i+0x110>
 8007eb6:	2b08      	cmp	r3, #8
 8007eb8:	d10b      	bne.n	8007ed2 <_printf_i+0x142>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	07df      	lsls	r7, r3, #31
 8007ebe:	d508      	bpl.n	8007ed2 <_printf_i+0x142>
 8007ec0:	6923      	ldr	r3, [r4, #16]
 8007ec2:	6861      	ldr	r1, [r4, #4]
 8007ec4:	4299      	cmp	r1, r3
 8007ec6:	bfde      	ittt	le
 8007ec8:	2330      	movle	r3, #48	@ 0x30
 8007eca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ece:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ed2:	1b92      	subs	r2, r2, r6
 8007ed4:	6122      	str	r2, [r4, #16]
 8007ed6:	f8cd a000 	str.w	sl, [sp]
 8007eda:	464b      	mov	r3, r9
 8007edc:	aa03      	add	r2, sp, #12
 8007ede:	4621      	mov	r1, r4
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	f7ff fee7 	bl	8007cb4 <_printf_common>
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	d14a      	bne.n	8007f80 <_printf_i+0x1f0>
 8007eea:	f04f 30ff 	mov.w	r0, #4294967295
 8007eee:	b004      	add	sp, #16
 8007ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	f043 0320 	orr.w	r3, r3, #32
 8007efa:	6023      	str	r3, [r4, #0]
 8007efc:	4832      	ldr	r0, [pc, #200]	@ (8007fc8 <_printf_i+0x238>)
 8007efe:	2778      	movs	r7, #120	@ 0x78
 8007f00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	6831      	ldr	r1, [r6, #0]
 8007f08:	061f      	lsls	r7, r3, #24
 8007f0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f0e:	d402      	bmi.n	8007f16 <_printf_i+0x186>
 8007f10:	065f      	lsls	r7, r3, #25
 8007f12:	bf48      	it	mi
 8007f14:	b2ad      	uxthmi	r5, r5
 8007f16:	6031      	str	r1, [r6, #0]
 8007f18:	07d9      	lsls	r1, r3, #31
 8007f1a:	bf44      	itt	mi
 8007f1c:	f043 0320 	orrmi.w	r3, r3, #32
 8007f20:	6023      	strmi	r3, [r4, #0]
 8007f22:	b11d      	cbz	r5, 8007f2c <_printf_i+0x19c>
 8007f24:	2310      	movs	r3, #16
 8007f26:	e7ad      	b.n	8007e84 <_printf_i+0xf4>
 8007f28:	4826      	ldr	r0, [pc, #152]	@ (8007fc4 <_printf_i+0x234>)
 8007f2a:	e7e9      	b.n	8007f00 <_printf_i+0x170>
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	f023 0320 	bic.w	r3, r3, #32
 8007f32:	6023      	str	r3, [r4, #0]
 8007f34:	e7f6      	b.n	8007f24 <_printf_i+0x194>
 8007f36:	4616      	mov	r6, r2
 8007f38:	e7bd      	b.n	8007eb6 <_printf_i+0x126>
 8007f3a:	6833      	ldr	r3, [r6, #0]
 8007f3c:	6825      	ldr	r5, [r4, #0]
 8007f3e:	6961      	ldr	r1, [r4, #20]
 8007f40:	1d18      	adds	r0, r3, #4
 8007f42:	6030      	str	r0, [r6, #0]
 8007f44:	062e      	lsls	r6, r5, #24
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	d501      	bpl.n	8007f4e <_printf_i+0x1be>
 8007f4a:	6019      	str	r1, [r3, #0]
 8007f4c:	e002      	b.n	8007f54 <_printf_i+0x1c4>
 8007f4e:	0668      	lsls	r0, r5, #25
 8007f50:	d5fb      	bpl.n	8007f4a <_printf_i+0x1ba>
 8007f52:	8019      	strh	r1, [r3, #0]
 8007f54:	2300      	movs	r3, #0
 8007f56:	6123      	str	r3, [r4, #16]
 8007f58:	4616      	mov	r6, r2
 8007f5a:	e7bc      	b.n	8007ed6 <_printf_i+0x146>
 8007f5c:	6833      	ldr	r3, [r6, #0]
 8007f5e:	1d1a      	adds	r2, r3, #4
 8007f60:	6032      	str	r2, [r6, #0]
 8007f62:	681e      	ldr	r6, [r3, #0]
 8007f64:	6862      	ldr	r2, [r4, #4]
 8007f66:	2100      	movs	r1, #0
 8007f68:	4630      	mov	r0, r6
 8007f6a:	f7f8 f949 	bl	8000200 <memchr>
 8007f6e:	b108      	cbz	r0, 8007f74 <_printf_i+0x1e4>
 8007f70:	1b80      	subs	r0, r0, r6
 8007f72:	6060      	str	r0, [r4, #4]
 8007f74:	6863      	ldr	r3, [r4, #4]
 8007f76:	6123      	str	r3, [r4, #16]
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f7e:	e7aa      	b.n	8007ed6 <_printf_i+0x146>
 8007f80:	6923      	ldr	r3, [r4, #16]
 8007f82:	4632      	mov	r2, r6
 8007f84:	4649      	mov	r1, r9
 8007f86:	4640      	mov	r0, r8
 8007f88:	47d0      	blx	sl
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	d0ad      	beq.n	8007eea <_printf_i+0x15a>
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	079b      	lsls	r3, r3, #30
 8007f92:	d413      	bmi.n	8007fbc <_printf_i+0x22c>
 8007f94:	68e0      	ldr	r0, [r4, #12]
 8007f96:	9b03      	ldr	r3, [sp, #12]
 8007f98:	4298      	cmp	r0, r3
 8007f9a:	bfb8      	it	lt
 8007f9c:	4618      	movlt	r0, r3
 8007f9e:	e7a6      	b.n	8007eee <_printf_i+0x15e>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	4632      	mov	r2, r6
 8007fa4:	4649      	mov	r1, r9
 8007fa6:	4640      	mov	r0, r8
 8007fa8:	47d0      	blx	sl
 8007faa:	3001      	adds	r0, #1
 8007fac:	d09d      	beq.n	8007eea <_printf_i+0x15a>
 8007fae:	3501      	adds	r5, #1
 8007fb0:	68e3      	ldr	r3, [r4, #12]
 8007fb2:	9903      	ldr	r1, [sp, #12]
 8007fb4:	1a5b      	subs	r3, r3, r1
 8007fb6:	42ab      	cmp	r3, r5
 8007fb8:	dcf2      	bgt.n	8007fa0 <_printf_i+0x210>
 8007fba:	e7eb      	b.n	8007f94 <_printf_i+0x204>
 8007fbc:	2500      	movs	r5, #0
 8007fbe:	f104 0619 	add.w	r6, r4, #25
 8007fc2:	e7f5      	b.n	8007fb0 <_printf_i+0x220>
 8007fc4:	0800c1dc 	.word	0x0800c1dc
 8007fc8:	0800c1ed 	.word	0x0800c1ed

08007fcc <std>:
 8007fcc:	2300      	movs	r3, #0
 8007fce:	b510      	push	{r4, lr}
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	e9c0 3300 	strd	r3, r3, [r0]
 8007fd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fda:	6083      	str	r3, [r0, #8]
 8007fdc:	8181      	strh	r1, [r0, #12]
 8007fde:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fe0:	81c2      	strh	r2, [r0, #14]
 8007fe2:	6183      	str	r3, [r0, #24]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	2208      	movs	r2, #8
 8007fe8:	305c      	adds	r0, #92	@ 0x5c
 8007fea:	f000 fa23 	bl	8008434 <memset>
 8007fee:	4b0d      	ldr	r3, [pc, #52]	@ (8008024 <std+0x58>)
 8007ff0:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8008028 <std+0x5c>)
 8007ff4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800802c <std+0x60>)
 8007ff8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8008030 <std+0x64>)
 8007ffc:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8008034 <std+0x68>)
 8008000:	6224      	str	r4, [r4, #32]
 8008002:	429c      	cmp	r4, r3
 8008004:	d006      	beq.n	8008014 <std+0x48>
 8008006:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800800a:	4294      	cmp	r4, r2
 800800c:	d002      	beq.n	8008014 <std+0x48>
 800800e:	33d0      	adds	r3, #208	@ 0xd0
 8008010:	429c      	cmp	r4, r3
 8008012:	d105      	bne.n	8008020 <std+0x54>
 8008014:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800801c:	f000 bb18 	b.w	8008650 <__retarget_lock_init_recursive>
 8008020:	bd10      	pop	{r4, pc}
 8008022:	bf00      	nop
 8008024:	08008285 	.word	0x08008285
 8008028:	080082a7 	.word	0x080082a7
 800802c:	080082df 	.word	0x080082df
 8008030:	08008303 	.word	0x08008303
 8008034:	20000c88 	.word	0x20000c88

08008038 <stdio_exit_handler>:
 8008038:	4a02      	ldr	r2, [pc, #8]	@ (8008044 <stdio_exit_handler+0xc>)
 800803a:	4903      	ldr	r1, [pc, #12]	@ (8008048 <stdio_exit_handler+0x10>)
 800803c:	4803      	ldr	r0, [pc, #12]	@ (800804c <stdio_exit_handler+0x14>)
 800803e:	f000 b869 	b.w	8008114 <_fwalk_sglue>
 8008042:	bf00      	nop
 8008044:	20000014 	.word	0x20000014
 8008048:	0800abc9 	.word	0x0800abc9
 800804c:	20000190 	.word	0x20000190

08008050 <cleanup_stdio>:
 8008050:	6841      	ldr	r1, [r0, #4]
 8008052:	4b0c      	ldr	r3, [pc, #48]	@ (8008084 <cleanup_stdio+0x34>)
 8008054:	4299      	cmp	r1, r3
 8008056:	b510      	push	{r4, lr}
 8008058:	4604      	mov	r4, r0
 800805a:	d001      	beq.n	8008060 <cleanup_stdio+0x10>
 800805c:	f002 fdb4 	bl	800abc8 <_fflush_r>
 8008060:	68a1      	ldr	r1, [r4, #8]
 8008062:	4b09      	ldr	r3, [pc, #36]	@ (8008088 <cleanup_stdio+0x38>)
 8008064:	4299      	cmp	r1, r3
 8008066:	d002      	beq.n	800806e <cleanup_stdio+0x1e>
 8008068:	4620      	mov	r0, r4
 800806a:	f002 fdad 	bl	800abc8 <_fflush_r>
 800806e:	68e1      	ldr	r1, [r4, #12]
 8008070:	4b06      	ldr	r3, [pc, #24]	@ (800808c <cleanup_stdio+0x3c>)
 8008072:	4299      	cmp	r1, r3
 8008074:	d004      	beq.n	8008080 <cleanup_stdio+0x30>
 8008076:	4620      	mov	r0, r4
 8008078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800807c:	f002 bda4 	b.w	800abc8 <_fflush_r>
 8008080:	bd10      	pop	{r4, pc}
 8008082:	bf00      	nop
 8008084:	20000c88 	.word	0x20000c88
 8008088:	20000cf0 	.word	0x20000cf0
 800808c:	20000d58 	.word	0x20000d58

08008090 <global_stdio_init.part.0>:
 8008090:	b510      	push	{r4, lr}
 8008092:	4b0b      	ldr	r3, [pc, #44]	@ (80080c0 <global_stdio_init.part.0+0x30>)
 8008094:	4c0b      	ldr	r4, [pc, #44]	@ (80080c4 <global_stdio_init.part.0+0x34>)
 8008096:	4a0c      	ldr	r2, [pc, #48]	@ (80080c8 <global_stdio_init.part.0+0x38>)
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	4620      	mov	r0, r4
 800809c:	2200      	movs	r2, #0
 800809e:	2104      	movs	r1, #4
 80080a0:	f7ff ff94 	bl	8007fcc <std>
 80080a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80080a8:	2201      	movs	r2, #1
 80080aa:	2109      	movs	r1, #9
 80080ac:	f7ff ff8e 	bl	8007fcc <std>
 80080b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80080b4:	2202      	movs	r2, #2
 80080b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080ba:	2112      	movs	r1, #18
 80080bc:	f7ff bf86 	b.w	8007fcc <std>
 80080c0:	20000dc0 	.word	0x20000dc0
 80080c4:	20000c88 	.word	0x20000c88
 80080c8:	08008039 	.word	0x08008039

080080cc <__sfp_lock_acquire>:
 80080cc:	4801      	ldr	r0, [pc, #4]	@ (80080d4 <__sfp_lock_acquire+0x8>)
 80080ce:	f000 bac0 	b.w	8008652 <__retarget_lock_acquire_recursive>
 80080d2:	bf00      	nop
 80080d4:	20000dc9 	.word	0x20000dc9

080080d8 <__sfp_lock_release>:
 80080d8:	4801      	ldr	r0, [pc, #4]	@ (80080e0 <__sfp_lock_release+0x8>)
 80080da:	f000 babb 	b.w	8008654 <__retarget_lock_release_recursive>
 80080de:	bf00      	nop
 80080e0:	20000dc9 	.word	0x20000dc9

080080e4 <__sinit>:
 80080e4:	b510      	push	{r4, lr}
 80080e6:	4604      	mov	r4, r0
 80080e8:	f7ff fff0 	bl	80080cc <__sfp_lock_acquire>
 80080ec:	6a23      	ldr	r3, [r4, #32]
 80080ee:	b11b      	cbz	r3, 80080f8 <__sinit+0x14>
 80080f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080f4:	f7ff bff0 	b.w	80080d8 <__sfp_lock_release>
 80080f8:	4b04      	ldr	r3, [pc, #16]	@ (800810c <__sinit+0x28>)
 80080fa:	6223      	str	r3, [r4, #32]
 80080fc:	4b04      	ldr	r3, [pc, #16]	@ (8008110 <__sinit+0x2c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1f5      	bne.n	80080f0 <__sinit+0xc>
 8008104:	f7ff ffc4 	bl	8008090 <global_stdio_init.part.0>
 8008108:	e7f2      	b.n	80080f0 <__sinit+0xc>
 800810a:	bf00      	nop
 800810c:	08008051 	.word	0x08008051
 8008110:	20000dc0 	.word	0x20000dc0

08008114 <_fwalk_sglue>:
 8008114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008118:	4607      	mov	r7, r0
 800811a:	4688      	mov	r8, r1
 800811c:	4614      	mov	r4, r2
 800811e:	2600      	movs	r6, #0
 8008120:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008124:	f1b9 0901 	subs.w	r9, r9, #1
 8008128:	d505      	bpl.n	8008136 <_fwalk_sglue+0x22>
 800812a:	6824      	ldr	r4, [r4, #0]
 800812c:	2c00      	cmp	r4, #0
 800812e:	d1f7      	bne.n	8008120 <_fwalk_sglue+0xc>
 8008130:	4630      	mov	r0, r6
 8008132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008136:	89ab      	ldrh	r3, [r5, #12]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d907      	bls.n	800814c <_fwalk_sglue+0x38>
 800813c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008140:	3301      	adds	r3, #1
 8008142:	d003      	beq.n	800814c <_fwalk_sglue+0x38>
 8008144:	4629      	mov	r1, r5
 8008146:	4638      	mov	r0, r7
 8008148:	47c0      	blx	r8
 800814a:	4306      	orrs	r6, r0
 800814c:	3568      	adds	r5, #104	@ 0x68
 800814e:	e7e9      	b.n	8008124 <_fwalk_sglue+0x10>

08008150 <iprintf>:
 8008150:	b40f      	push	{r0, r1, r2, r3}
 8008152:	b507      	push	{r0, r1, r2, lr}
 8008154:	4906      	ldr	r1, [pc, #24]	@ (8008170 <iprintf+0x20>)
 8008156:	ab04      	add	r3, sp, #16
 8008158:	6808      	ldr	r0, [r1, #0]
 800815a:	f853 2b04 	ldr.w	r2, [r3], #4
 800815e:	6881      	ldr	r1, [r0, #8]
 8008160:	9301      	str	r3, [sp, #4]
 8008162:	f002 fb95 	bl	800a890 <_vfiprintf_r>
 8008166:	b003      	add	sp, #12
 8008168:	f85d eb04 	ldr.w	lr, [sp], #4
 800816c:	b004      	add	sp, #16
 800816e:	4770      	bx	lr
 8008170:	2000018c 	.word	0x2000018c

08008174 <putchar>:
 8008174:	4b02      	ldr	r3, [pc, #8]	@ (8008180 <putchar+0xc>)
 8008176:	4601      	mov	r1, r0
 8008178:	6818      	ldr	r0, [r3, #0]
 800817a:	6882      	ldr	r2, [r0, #8]
 800817c:	f002 bdc0 	b.w	800ad00 <_putc_r>
 8008180:	2000018c 	.word	0x2000018c

08008184 <_puts_r>:
 8008184:	6a03      	ldr	r3, [r0, #32]
 8008186:	b570      	push	{r4, r5, r6, lr}
 8008188:	6884      	ldr	r4, [r0, #8]
 800818a:	4605      	mov	r5, r0
 800818c:	460e      	mov	r6, r1
 800818e:	b90b      	cbnz	r3, 8008194 <_puts_r+0x10>
 8008190:	f7ff ffa8 	bl	80080e4 <__sinit>
 8008194:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008196:	07db      	lsls	r3, r3, #31
 8008198:	d405      	bmi.n	80081a6 <_puts_r+0x22>
 800819a:	89a3      	ldrh	r3, [r4, #12]
 800819c:	0598      	lsls	r0, r3, #22
 800819e:	d402      	bmi.n	80081a6 <_puts_r+0x22>
 80081a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081a2:	f000 fa56 	bl	8008652 <__retarget_lock_acquire_recursive>
 80081a6:	89a3      	ldrh	r3, [r4, #12]
 80081a8:	0719      	lsls	r1, r3, #28
 80081aa:	d502      	bpl.n	80081b2 <_puts_r+0x2e>
 80081ac:	6923      	ldr	r3, [r4, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d135      	bne.n	800821e <_puts_r+0x9a>
 80081b2:	4621      	mov	r1, r4
 80081b4:	4628      	mov	r0, r5
 80081b6:	f000 f8e7 	bl	8008388 <__swsetup_r>
 80081ba:	b380      	cbz	r0, 800821e <_puts_r+0x9a>
 80081bc:	f04f 35ff 	mov.w	r5, #4294967295
 80081c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081c2:	07da      	lsls	r2, r3, #31
 80081c4:	d405      	bmi.n	80081d2 <_puts_r+0x4e>
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	059b      	lsls	r3, r3, #22
 80081ca:	d402      	bmi.n	80081d2 <_puts_r+0x4e>
 80081cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081ce:	f000 fa41 	bl	8008654 <__retarget_lock_release_recursive>
 80081d2:	4628      	mov	r0, r5
 80081d4:	bd70      	pop	{r4, r5, r6, pc}
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	da04      	bge.n	80081e4 <_puts_r+0x60>
 80081da:	69a2      	ldr	r2, [r4, #24]
 80081dc:	429a      	cmp	r2, r3
 80081de:	dc17      	bgt.n	8008210 <_puts_r+0x8c>
 80081e0:	290a      	cmp	r1, #10
 80081e2:	d015      	beq.n	8008210 <_puts_r+0x8c>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	1c5a      	adds	r2, r3, #1
 80081e8:	6022      	str	r2, [r4, #0]
 80081ea:	7019      	strb	r1, [r3, #0]
 80081ec:	68a3      	ldr	r3, [r4, #8]
 80081ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081f2:	3b01      	subs	r3, #1
 80081f4:	60a3      	str	r3, [r4, #8]
 80081f6:	2900      	cmp	r1, #0
 80081f8:	d1ed      	bne.n	80081d6 <_puts_r+0x52>
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	da11      	bge.n	8008222 <_puts_r+0x9e>
 80081fe:	4622      	mov	r2, r4
 8008200:	210a      	movs	r1, #10
 8008202:	4628      	mov	r0, r5
 8008204:	f000 f881 	bl	800830a <__swbuf_r>
 8008208:	3001      	adds	r0, #1
 800820a:	d0d7      	beq.n	80081bc <_puts_r+0x38>
 800820c:	250a      	movs	r5, #10
 800820e:	e7d7      	b.n	80081c0 <_puts_r+0x3c>
 8008210:	4622      	mov	r2, r4
 8008212:	4628      	mov	r0, r5
 8008214:	f000 f879 	bl	800830a <__swbuf_r>
 8008218:	3001      	adds	r0, #1
 800821a:	d1e7      	bne.n	80081ec <_puts_r+0x68>
 800821c:	e7ce      	b.n	80081bc <_puts_r+0x38>
 800821e:	3e01      	subs	r6, #1
 8008220:	e7e4      	b.n	80081ec <_puts_r+0x68>
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	1c5a      	adds	r2, r3, #1
 8008226:	6022      	str	r2, [r4, #0]
 8008228:	220a      	movs	r2, #10
 800822a:	701a      	strb	r2, [r3, #0]
 800822c:	e7ee      	b.n	800820c <_puts_r+0x88>
	...

08008230 <puts>:
 8008230:	4b02      	ldr	r3, [pc, #8]	@ (800823c <puts+0xc>)
 8008232:	4601      	mov	r1, r0
 8008234:	6818      	ldr	r0, [r3, #0]
 8008236:	f7ff bfa5 	b.w	8008184 <_puts_r>
 800823a:	bf00      	nop
 800823c:	2000018c 	.word	0x2000018c

08008240 <siprintf>:
 8008240:	b40e      	push	{r1, r2, r3}
 8008242:	b510      	push	{r4, lr}
 8008244:	b09d      	sub	sp, #116	@ 0x74
 8008246:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008248:	9002      	str	r0, [sp, #8]
 800824a:	9006      	str	r0, [sp, #24]
 800824c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008250:	480a      	ldr	r0, [pc, #40]	@ (800827c <siprintf+0x3c>)
 8008252:	9107      	str	r1, [sp, #28]
 8008254:	9104      	str	r1, [sp, #16]
 8008256:	490a      	ldr	r1, [pc, #40]	@ (8008280 <siprintf+0x40>)
 8008258:	f853 2b04 	ldr.w	r2, [r3], #4
 800825c:	9105      	str	r1, [sp, #20]
 800825e:	2400      	movs	r4, #0
 8008260:	a902      	add	r1, sp, #8
 8008262:	6800      	ldr	r0, [r0, #0]
 8008264:	9301      	str	r3, [sp, #4]
 8008266:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008268:	f002 f9ec 	bl	800a644 <_svfiprintf_r>
 800826c:	9b02      	ldr	r3, [sp, #8]
 800826e:	701c      	strb	r4, [r3, #0]
 8008270:	b01d      	add	sp, #116	@ 0x74
 8008272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008276:	b003      	add	sp, #12
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	2000018c 	.word	0x2000018c
 8008280:	ffff0208 	.word	0xffff0208

08008284 <__sread>:
 8008284:	b510      	push	{r4, lr}
 8008286:	460c      	mov	r4, r1
 8008288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800828c:	f000 f992 	bl	80085b4 <_read_r>
 8008290:	2800      	cmp	r0, #0
 8008292:	bfab      	itete	ge
 8008294:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008296:	89a3      	ldrhlt	r3, [r4, #12]
 8008298:	181b      	addge	r3, r3, r0
 800829a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800829e:	bfac      	ite	ge
 80082a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80082a2:	81a3      	strhlt	r3, [r4, #12]
 80082a4:	bd10      	pop	{r4, pc}

080082a6 <__swrite>:
 80082a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082aa:	461f      	mov	r7, r3
 80082ac:	898b      	ldrh	r3, [r1, #12]
 80082ae:	05db      	lsls	r3, r3, #23
 80082b0:	4605      	mov	r5, r0
 80082b2:	460c      	mov	r4, r1
 80082b4:	4616      	mov	r6, r2
 80082b6:	d505      	bpl.n	80082c4 <__swrite+0x1e>
 80082b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082bc:	2302      	movs	r3, #2
 80082be:	2200      	movs	r2, #0
 80082c0:	f000 f966 	bl	8008590 <_lseek_r>
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082ce:	81a3      	strh	r3, [r4, #12]
 80082d0:	4632      	mov	r2, r6
 80082d2:	463b      	mov	r3, r7
 80082d4:	4628      	mov	r0, r5
 80082d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082da:	f000 b97d 	b.w	80085d8 <_write_r>

080082de <__sseek>:
 80082de:	b510      	push	{r4, lr}
 80082e0:	460c      	mov	r4, r1
 80082e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e6:	f000 f953 	bl	8008590 <_lseek_r>
 80082ea:	1c43      	adds	r3, r0, #1
 80082ec:	89a3      	ldrh	r3, [r4, #12]
 80082ee:	bf15      	itete	ne
 80082f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082fa:	81a3      	strheq	r3, [r4, #12]
 80082fc:	bf18      	it	ne
 80082fe:	81a3      	strhne	r3, [r4, #12]
 8008300:	bd10      	pop	{r4, pc}

08008302 <__sclose>:
 8008302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008306:	f000 b933 	b.w	8008570 <_close_r>

0800830a <__swbuf_r>:
 800830a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830c:	460e      	mov	r6, r1
 800830e:	4614      	mov	r4, r2
 8008310:	4605      	mov	r5, r0
 8008312:	b118      	cbz	r0, 800831c <__swbuf_r+0x12>
 8008314:	6a03      	ldr	r3, [r0, #32]
 8008316:	b90b      	cbnz	r3, 800831c <__swbuf_r+0x12>
 8008318:	f7ff fee4 	bl	80080e4 <__sinit>
 800831c:	69a3      	ldr	r3, [r4, #24]
 800831e:	60a3      	str	r3, [r4, #8]
 8008320:	89a3      	ldrh	r3, [r4, #12]
 8008322:	071a      	lsls	r2, r3, #28
 8008324:	d501      	bpl.n	800832a <__swbuf_r+0x20>
 8008326:	6923      	ldr	r3, [r4, #16]
 8008328:	b943      	cbnz	r3, 800833c <__swbuf_r+0x32>
 800832a:	4621      	mov	r1, r4
 800832c:	4628      	mov	r0, r5
 800832e:	f000 f82b 	bl	8008388 <__swsetup_r>
 8008332:	b118      	cbz	r0, 800833c <__swbuf_r+0x32>
 8008334:	f04f 37ff 	mov.w	r7, #4294967295
 8008338:	4638      	mov	r0, r7
 800833a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	6922      	ldr	r2, [r4, #16]
 8008340:	1a98      	subs	r0, r3, r2
 8008342:	6963      	ldr	r3, [r4, #20]
 8008344:	b2f6      	uxtb	r6, r6
 8008346:	4283      	cmp	r3, r0
 8008348:	4637      	mov	r7, r6
 800834a:	dc05      	bgt.n	8008358 <__swbuf_r+0x4e>
 800834c:	4621      	mov	r1, r4
 800834e:	4628      	mov	r0, r5
 8008350:	f002 fc3a 	bl	800abc8 <_fflush_r>
 8008354:	2800      	cmp	r0, #0
 8008356:	d1ed      	bne.n	8008334 <__swbuf_r+0x2a>
 8008358:	68a3      	ldr	r3, [r4, #8]
 800835a:	3b01      	subs	r3, #1
 800835c:	60a3      	str	r3, [r4, #8]
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	6022      	str	r2, [r4, #0]
 8008364:	701e      	strb	r6, [r3, #0]
 8008366:	6962      	ldr	r2, [r4, #20]
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	429a      	cmp	r2, r3
 800836c:	d004      	beq.n	8008378 <__swbuf_r+0x6e>
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	07db      	lsls	r3, r3, #31
 8008372:	d5e1      	bpl.n	8008338 <__swbuf_r+0x2e>
 8008374:	2e0a      	cmp	r6, #10
 8008376:	d1df      	bne.n	8008338 <__swbuf_r+0x2e>
 8008378:	4621      	mov	r1, r4
 800837a:	4628      	mov	r0, r5
 800837c:	f002 fc24 	bl	800abc8 <_fflush_r>
 8008380:	2800      	cmp	r0, #0
 8008382:	d0d9      	beq.n	8008338 <__swbuf_r+0x2e>
 8008384:	e7d6      	b.n	8008334 <__swbuf_r+0x2a>
	...

08008388 <__swsetup_r>:
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	4b29      	ldr	r3, [pc, #164]	@ (8008430 <__swsetup_r+0xa8>)
 800838c:	4605      	mov	r5, r0
 800838e:	6818      	ldr	r0, [r3, #0]
 8008390:	460c      	mov	r4, r1
 8008392:	b118      	cbz	r0, 800839c <__swsetup_r+0x14>
 8008394:	6a03      	ldr	r3, [r0, #32]
 8008396:	b90b      	cbnz	r3, 800839c <__swsetup_r+0x14>
 8008398:	f7ff fea4 	bl	80080e4 <__sinit>
 800839c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083a0:	0719      	lsls	r1, r3, #28
 80083a2:	d422      	bmi.n	80083ea <__swsetup_r+0x62>
 80083a4:	06da      	lsls	r2, r3, #27
 80083a6:	d407      	bmi.n	80083b8 <__swsetup_r+0x30>
 80083a8:	2209      	movs	r2, #9
 80083aa:	602a      	str	r2, [r5, #0]
 80083ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083b0:	81a3      	strh	r3, [r4, #12]
 80083b2:	f04f 30ff 	mov.w	r0, #4294967295
 80083b6:	e033      	b.n	8008420 <__swsetup_r+0x98>
 80083b8:	0758      	lsls	r0, r3, #29
 80083ba:	d512      	bpl.n	80083e2 <__swsetup_r+0x5a>
 80083bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083be:	b141      	cbz	r1, 80083d2 <__swsetup_r+0x4a>
 80083c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083c4:	4299      	cmp	r1, r3
 80083c6:	d002      	beq.n	80083ce <__swsetup_r+0x46>
 80083c8:	4628      	mov	r0, r5
 80083ca:	f000 ffdd 	bl	8009388 <_free_r>
 80083ce:	2300      	movs	r3, #0
 80083d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80083d2:	89a3      	ldrh	r3, [r4, #12]
 80083d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083d8:	81a3      	strh	r3, [r4, #12]
 80083da:	2300      	movs	r3, #0
 80083dc:	6063      	str	r3, [r4, #4]
 80083de:	6923      	ldr	r3, [r4, #16]
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	89a3      	ldrh	r3, [r4, #12]
 80083e4:	f043 0308 	orr.w	r3, r3, #8
 80083e8:	81a3      	strh	r3, [r4, #12]
 80083ea:	6923      	ldr	r3, [r4, #16]
 80083ec:	b94b      	cbnz	r3, 8008402 <__swsetup_r+0x7a>
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80083f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083f8:	d003      	beq.n	8008402 <__swsetup_r+0x7a>
 80083fa:	4621      	mov	r1, r4
 80083fc:	4628      	mov	r0, r5
 80083fe:	f002 fc43 	bl	800ac88 <__smakebuf_r>
 8008402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008406:	f013 0201 	ands.w	r2, r3, #1
 800840a:	d00a      	beq.n	8008422 <__swsetup_r+0x9a>
 800840c:	2200      	movs	r2, #0
 800840e:	60a2      	str	r2, [r4, #8]
 8008410:	6962      	ldr	r2, [r4, #20]
 8008412:	4252      	negs	r2, r2
 8008414:	61a2      	str	r2, [r4, #24]
 8008416:	6922      	ldr	r2, [r4, #16]
 8008418:	b942      	cbnz	r2, 800842c <__swsetup_r+0xa4>
 800841a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800841e:	d1c5      	bne.n	80083ac <__swsetup_r+0x24>
 8008420:	bd38      	pop	{r3, r4, r5, pc}
 8008422:	0799      	lsls	r1, r3, #30
 8008424:	bf58      	it	pl
 8008426:	6962      	ldrpl	r2, [r4, #20]
 8008428:	60a2      	str	r2, [r4, #8]
 800842a:	e7f4      	b.n	8008416 <__swsetup_r+0x8e>
 800842c:	2000      	movs	r0, #0
 800842e:	e7f7      	b.n	8008420 <__swsetup_r+0x98>
 8008430:	2000018c 	.word	0x2000018c

08008434 <memset>:
 8008434:	4402      	add	r2, r0
 8008436:	4603      	mov	r3, r0
 8008438:	4293      	cmp	r3, r2
 800843a:	d100      	bne.n	800843e <memset+0xa>
 800843c:	4770      	bx	lr
 800843e:	f803 1b01 	strb.w	r1, [r3], #1
 8008442:	e7f9      	b.n	8008438 <memset+0x4>

08008444 <strchr>:
 8008444:	b2c9      	uxtb	r1, r1
 8008446:	4603      	mov	r3, r0
 8008448:	4618      	mov	r0, r3
 800844a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800844e:	b112      	cbz	r2, 8008456 <strchr+0x12>
 8008450:	428a      	cmp	r2, r1
 8008452:	d1f9      	bne.n	8008448 <strchr+0x4>
 8008454:	4770      	bx	lr
 8008456:	2900      	cmp	r1, #0
 8008458:	bf18      	it	ne
 800845a:	2000      	movne	r0, #0
 800845c:	4770      	bx	lr

0800845e <strncmp>:
 800845e:	b510      	push	{r4, lr}
 8008460:	b16a      	cbz	r2, 800847e <strncmp+0x20>
 8008462:	3901      	subs	r1, #1
 8008464:	1884      	adds	r4, r0, r2
 8008466:	f810 2b01 	ldrb.w	r2, [r0], #1
 800846a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800846e:	429a      	cmp	r2, r3
 8008470:	d103      	bne.n	800847a <strncmp+0x1c>
 8008472:	42a0      	cmp	r0, r4
 8008474:	d001      	beq.n	800847a <strncmp+0x1c>
 8008476:	2a00      	cmp	r2, #0
 8008478:	d1f5      	bne.n	8008466 <strncmp+0x8>
 800847a:	1ad0      	subs	r0, r2, r3
 800847c:	bd10      	pop	{r4, pc}
 800847e:	4610      	mov	r0, r2
 8008480:	e7fc      	b.n	800847c <strncmp+0x1e>
	...

08008484 <strtok>:
 8008484:	4b16      	ldr	r3, [pc, #88]	@ (80084e0 <strtok+0x5c>)
 8008486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800848a:	681f      	ldr	r7, [r3, #0]
 800848c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800848e:	4605      	mov	r5, r0
 8008490:	460e      	mov	r6, r1
 8008492:	b9ec      	cbnz	r4, 80084d0 <strtok+0x4c>
 8008494:	2050      	movs	r0, #80	@ 0x50
 8008496:	f001 fafb 	bl	8009a90 <malloc>
 800849a:	4602      	mov	r2, r0
 800849c:	6478      	str	r0, [r7, #68]	@ 0x44
 800849e:	b920      	cbnz	r0, 80084aa <strtok+0x26>
 80084a0:	4b10      	ldr	r3, [pc, #64]	@ (80084e4 <strtok+0x60>)
 80084a2:	4811      	ldr	r0, [pc, #68]	@ (80084e8 <strtok+0x64>)
 80084a4:	215b      	movs	r1, #91	@ 0x5b
 80084a6:	f000 f8f7 	bl	8008698 <__assert_func>
 80084aa:	e9c0 4400 	strd	r4, r4, [r0]
 80084ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80084b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80084b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80084ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80084be:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80084c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80084c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80084ca:	6184      	str	r4, [r0, #24]
 80084cc:	7704      	strb	r4, [r0, #28]
 80084ce:	6244      	str	r4, [r0, #36]	@ 0x24
 80084d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084d2:	4631      	mov	r1, r6
 80084d4:	4628      	mov	r0, r5
 80084d6:	2301      	movs	r3, #1
 80084d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084dc:	f000 b806 	b.w	80084ec <__strtok_r>
 80084e0:	2000018c 	.word	0x2000018c
 80084e4:	0800c1fe 	.word	0x0800c1fe
 80084e8:	0800c215 	.word	0x0800c215

080084ec <__strtok_r>:
 80084ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ee:	4604      	mov	r4, r0
 80084f0:	b908      	cbnz	r0, 80084f6 <__strtok_r+0xa>
 80084f2:	6814      	ldr	r4, [r2, #0]
 80084f4:	b144      	cbz	r4, 8008508 <__strtok_r+0x1c>
 80084f6:	4620      	mov	r0, r4
 80084f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80084fc:	460f      	mov	r7, r1
 80084fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008502:	b91e      	cbnz	r6, 800850c <__strtok_r+0x20>
 8008504:	b965      	cbnz	r5, 8008520 <__strtok_r+0x34>
 8008506:	6015      	str	r5, [r2, #0]
 8008508:	2000      	movs	r0, #0
 800850a:	e005      	b.n	8008518 <__strtok_r+0x2c>
 800850c:	42b5      	cmp	r5, r6
 800850e:	d1f6      	bne.n	80084fe <__strtok_r+0x12>
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1f0      	bne.n	80084f6 <__strtok_r+0xa>
 8008514:	6014      	str	r4, [r2, #0]
 8008516:	7003      	strb	r3, [r0, #0]
 8008518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800851a:	461c      	mov	r4, r3
 800851c:	e00c      	b.n	8008538 <__strtok_r+0x4c>
 800851e:	b91d      	cbnz	r5, 8008528 <__strtok_r+0x3c>
 8008520:	4627      	mov	r7, r4
 8008522:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008526:	460e      	mov	r6, r1
 8008528:	f816 5b01 	ldrb.w	r5, [r6], #1
 800852c:	42ab      	cmp	r3, r5
 800852e:	d1f6      	bne.n	800851e <__strtok_r+0x32>
 8008530:	2b00      	cmp	r3, #0
 8008532:	d0f2      	beq.n	800851a <__strtok_r+0x2e>
 8008534:	2300      	movs	r3, #0
 8008536:	703b      	strb	r3, [r7, #0]
 8008538:	6014      	str	r4, [r2, #0]
 800853a:	e7ed      	b.n	8008518 <__strtok_r+0x2c>

0800853c <strstr>:
 800853c:	780a      	ldrb	r2, [r1, #0]
 800853e:	b570      	push	{r4, r5, r6, lr}
 8008540:	b96a      	cbnz	r2, 800855e <strstr+0x22>
 8008542:	bd70      	pop	{r4, r5, r6, pc}
 8008544:	429a      	cmp	r2, r3
 8008546:	d109      	bne.n	800855c <strstr+0x20>
 8008548:	460c      	mov	r4, r1
 800854a:	4605      	mov	r5, r0
 800854c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008550:	2b00      	cmp	r3, #0
 8008552:	d0f6      	beq.n	8008542 <strstr+0x6>
 8008554:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008558:	429e      	cmp	r6, r3
 800855a:	d0f7      	beq.n	800854c <strstr+0x10>
 800855c:	3001      	adds	r0, #1
 800855e:	7803      	ldrb	r3, [r0, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1ef      	bne.n	8008544 <strstr+0x8>
 8008564:	4618      	mov	r0, r3
 8008566:	e7ec      	b.n	8008542 <strstr+0x6>

08008568 <_localeconv_r>:
 8008568:	4800      	ldr	r0, [pc, #0]	@ (800856c <_localeconv_r+0x4>)
 800856a:	4770      	bx	lr
 800856c:	20000110 	.word	0x20000110

08008570 <_close_r>:
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	4d06      	ldr	r5, [pc, #24]	@ (800858c <_close_r+0x1c>)
 8008574:	2300      	movs	r3, #0
 8008576:	4604      	mov	r4, r0
 8008578:	4608      	mov	r0, r1
 800857a:	602b      	str	r3, [r5, #0]
 800857c:	f7fa fc08 	bl	8002d90 <_close>
 8008580:	1c43      	adds	r3, r0, #1
 8008582:	d102      	bne.n	800858a <_close_r+0x1a>
 8008584:	682b      	ldr	r3, [r5, #0]
 8008586:	b103      	cbz	r3, 800858a <_close_r+0x1a>
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	bd38      	pop	{r3, r4, r5, pc}
 800858c:	20000dc4 	.word	0x20000dc4

08008590 <_lseek_r>:
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	4d07      	ldr	r5, [pc, #28]	@ (80085b0 <_lseek_r+0x20>)
 8008594:	4604      	mov	r4, r0
 8008596:	4608      	mov	r0, r1
 8008598:	4611      	mov	r1, r2
 800859a:	2200      	movs	r2, #0
 800859c:	602a      	str	r2, [r5, #0]
 800859e:	461a      	mov	r2, r3
 80085a0:	f7fa fc1d 	bl	8002dde <_lseek>
 80085a4:	1c43      	adds	r3, r0, #1
 80085a6:	d102      	bne.n	80085ae <_lseek_r+0x1e>
 80085a8:	682b      	ldr	r3, [r5, #0]
 80085aa:	b103      	cbz	r3, 80085ae <_lseek_r+0x1e>
 80085ac:	6023      	str	r3, [r4, #0]
 80085ae:	bd38      	pop	{r3, r4, r5, pc}
 80085b0:	20000dc4 	.word	0x20000dc4

080085b4 <_read_r>:
 80085b4:	b538      	push	{r3, r4, r5, lr}
 80085b6:	4d07      	ldr	r5, [pc, #28]	@ (80085d4 <_read_r+0x20>)
 80085b8:	4604      	mov	r4, r0
 80085ba:	4608      	mov	r0, r1
 80085bc:	4611      	mov	r1, r2
 80085be:	2200      	movs	r2, #0
 80085c0:	602a      	str	r2, [r5, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	f7fa fbab 	bl	8002d1e <_read>
 80085c8:	1c43      	adds	r3, r0, #1
 80085ca:	d102      	bne.n	80085d2 <_read_r+0x1e>
 80085cc:	682b      	ldr	r3, [r5, #0]
 80085ce:	b103      	cbz	r3, 80085d2 <_read_r+0x1e>
 80085d0:	6023      	str	r3, [r4, #0]
 80085d2:	bd38      	pop	{r3, r4, r5, pc}
 80085d4:	20000dc4 	.word	0x20000dc4

080085d8 <_write_r>:
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	4d07      	ldr	r5, [pc, #28]	@ (80085f8 <_write_r+0x20>)
 80085dc:	4604      	mov	r4, r0
 80085de:	4608      	mov	r0, r1
 80085e0:	4611      	mov	r1, r2
 80085e2:	2200      	movs	r2, #0
 80085e4:	602a      	str	r2, [r5, #0]
 80085e6:	461a      	mov	r2, r3
 80085e8:	f7fa fbb6 	bl	8002d58 <_write>
 80085ec:	1c43      	adds	r3, r0, #1
 80085ee:	d102      	bne.n	80085f6 <_write_r+0x1e>
 80085f0:	682b      	ldr	r3, [r5, #0]
 80085f2:	b103      	cbz	r3, 80085f6 <_write_r+0x1e>
 80085f4:	6023      	str	r3, [r4, #0]
 80085f6:	bd38      	pop	{r3, r4, r5, pc}
 80085f8:	20000dc4 	.word	0x20000dc4

080085fc <__errno>:
 80085fc:	4b01      	ldr	r3, [pc, #4]	@ (8008604 <__errno+0x8>)
 80085fe:	6818      	ldr	r0, [r3, #0]
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	2000018c 	.word	0x2000018c

08008608 <__libc_init_array>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	4d0d      	ldr	r5, [pc, #52]	@ (8008640 <__libc_init_array+0x38>)
 800860c:	4c0d      	ldr	r4, [pc, #52]	@ (8008644 <__libc_init_array+0x3c>)
 800860e:	1b64      	subs	r4, r4, r5
 8008610:	10a4      	asrs	r4, r4, #2
 8008612:	2600      	movs	r6, #0
 8008614:	42a6      	cmp	r6, r4
 8008616:	d109      	bne.n	800862c <__libc_init_array+0x24>
 8008618:	4d0b      	ldr	r5, [pc, #44]	@ (8008648 <__libc_init_array+0x40>)
 800861a:	4c0c      	ldr	r4, [pc, #48]	@ (800864c <__libc_init_array+0x44>)
 800861c:	f003 fbe6 	bl	800bdec <_init>
 8008620:	1b64      	subs	r4, r4, r5
 8008622:	10a4      	asrs	r4, r4, #2
 8008624:	2600      	movs	r6, #0
 8008626:	42a6      	cmp	r6, r4
 8008628:	d105      	bne.n	8008636 <__libc_init_array+0x2e>
 800862a:	bd70      	pop	{r4, r5, r6, pc}
 800862c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008630:	4798      	blx	r3
 8008632:	3601      	adds	r6, #1
 8008634:	e7ee      	b.n	8008614 <__libc_init_array+0xc>
 8008636:	f855 3b04 	ldr.w	r3, [r5], #4
 800863a:	4798      	blx	r3
 800863c:	3601      	adds	r6, #1
 800863e:	e7f2      	b.n	8008626 <__libc_init_array+0x1e>
 8008640:	0800c690 	.word	0x0800c690
 8008644:	0800c690 	.word	0x0800c690
 8008648:	0800c690 	.word	0x0800c690
 800864c:	0800c694 	.word	0x0800c694

08008650 <__retarget_lock_init_recursive>:
 8008650:	4770      	bx	lr

08008652 <__retarget_lock_acquire_recursive>:
 8008652:	4770      	bx	lr

08008654 <__retarget_lock_release_recursive>:
 8008654:	4770      	bx	lr

08008656 <strcpy>:
 8008656:	4603      	mov	r3, r0
 8008658:	f811 2b01 	ldrb.w	r2, [r1], #1
 800865c:	f803 2b01 	strb.w	r2, [r3], #1
 8008660:	2a00      	cmp	r2, #0
 8008662:	d1f9      	bne.n	8008658 <strcpy+0x2>
 8008664:	4770      	bx	lr

08008666 <memcpy>:
 8008666:	440a      	add	r2, r1
 8008668:	4291      	cmp	r1, r2
 800866a:	f100 33ff 	add.w	r3, r0, #4294967295
 800866e:	d100      	bne.n	8008672 <memcpy+0xc>
 8008670:	4770      	bx	lr
 8008672:	b510      	push	{r4, lr}
 8008674:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008678:	f803 4f01 	strb.w	r4, [r3, #1]!
 800867c:	4291      	cmp	r1, r2
 800867e:	d1f9      	bne.n	8008674 <memcpy+0xe>
 8008680:	bd10      	pop	{r4, pc}
 8008682:	0000      	movs	r0, r0
 8008684:	0000      	movs	r0, r0
	...

08008688 <nan>:
 8008688:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008690 <nan+0x8>
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	00000000 	.word	0x00000000
 8008694:	7ff80000 	.word	0x7ff80000

08008698 <__assert_func>:
 8008698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800869a:	4614      	mov	r4, r2
 800869c:	461a      	mov	r2, r3
 800869e:	4b09      	ldr	r3, [pc, #36]	@ (80086c4 <__assert_func+0x2c>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4605      	mov	r5, r0
 80086a4:	68d8      	ldr	r0, [r3, #12]
 80086a6:	b14c      	cbz	r4, 80086bc <__assert_func+0x24>
 80086a8:	4b07      	ldr	r3, [pc, #28]	@ (80086c8 <__assert_func+0x30>)
 80086aa:	9100      	str	r1, [sp, #0]
 80086ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086b0:	4906      	ldr	r1, [pc, #24]	@ (80086cc <__assert_func+0x34>)
 80086b2:	462b      	mov	r3, r5
 80086b4:	f002 fab0 	bl	800ac18 <fiprintf>
 80086b8:	f002 fba2 	bl	800ae00 <abort>
 80086bc:	4b04      	ldr	r3, [pc, #16]	@ (80086d0 <__assert_func+0x38>)
 80086be:	461c      	mov	r4, r3
 80086c0:	e7f3      	b.n	80086aa <__assert_func+0x12>
 80086c2:	bf00      	nop
 80086c4:	2000018c 	.word	0x2000018c
 80086c8:	0800c277 	.word	0x0800c277
 80086cc:	0800c284 	.word	0x0800c284
 80086d0:	0800c2b2 	.word	0x0800c2b2

080086d4 <quorem>:
 80086d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d8:	6903      	ldr	r3, [r0, #16]
 80086da:	690c      	ldr	r4, [r1, #16]
 80086dc:	42a3      	cmp	r3, r4
 80086de:	4607      	mov	r7, r0
 80086e0:	db7e      	blt.n	80087e0 <quorem+0x10c>
 80086e2:	3c01      	subs	r4, #1
 80086e4:	f101 0814 	add.w	r8, r1, #20
 80086e8:	00a3      	lsls	r3, r4, #2
 80086ea:	f100 0514 	add.w	r5, r0, #20
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086f4:	9301      	str	r3, [sp, #4]
 80086f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80086fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086fe:	3301      	adds	r3, #1
 8008700:	429a      	cmp	r2, r3
 8008702:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008706:	fbb2 f6f3 	udiv	r6, r2, r3
 800870a:	d32e      	bcc.n	800876a <quorem+0x96>
 800870c:	f04f 0a00 	mov.w	sl, #0
 8008710:	46c4      	mov	ip, r8
 8008712:	46ae      	mov	lr, r5
 8008714:	46d3      	mov	fp, sl
 8008716:	f85c 3b04 	ldr.w	r3, [ip], #4
 800871a:	b298      	uxth	r0, r3
 800871c:	fb06 a000 	mla	r0, r6, r0, sl
 8008720:	0c02      	lsrs	r2, r0, #16
 8008722:	0c1b      	lsrs	r3, r3, #16
 8008724:	fb06 2303 	mla	r3, r6, r3, r2
 8008728:	f8de 2000 	ldr.w	r2, [lr]
 800872c:	b280      	uxth	r0, r0
 800872e:	b292      	uxth	r2, r2
 8008730:	1a12      	subs	r2, r2, r0
 8008732:	445a      	add	r2, fp
 8008734:	f8de 0000 	ldr.w	r0, [lr]
 8008738:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800873c:	b29b      	uxth	r3, r3
 800873e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008742:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008746:	b292      	uxth	r2, r2
 8008748:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800874c:	45e1      	cmp	r9, ip
 800874e:	f84e 2b04 	str.w	r2, [lr], #4
 8008752:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008756:	d2de      	bcs.n	8008716 <quorem+0x42>
 8008758:	9b00      	ldr	r3, [sp, #0]
 800875a:	58eb      	ldr	r3, [r5, r3]
 800875c:	b92b      	cbnz	r3, 800876a <quorem+0x96>
 800875e:	9b01      	ldr	r3, [sp, #4]
 8008760:	3b04      	subs	r3, #4
 8008762:	429d      	cmp	r5, r3
 8008764:	461a      	mov	r2, r3
 8008766:	d32f      	bcc.n	80087c8 <quorem+0xf4>
 8008768:	613c      	str	r4, [r7, #16]
 800876a:	4638      	mov	r0, r7
 800876c:	f001 fd14 	bl	800a198 <__mcmp>
 8008770:	2800      	cmp	r0, #0
 8008772:	db25      	blt.n	80087c0 <quorem+0xec>
 8008774:	4629      	mov	r1, r5
 8008776:	2000      	movs	r0, #0
 8008778:	f858 2b04 	ldr.w	r2, [r8], #4
 800877c:	f8d1 c000 	ldr.w	ip, [r1]
 8008780:	fa1f fe82 	uxth.w	lr, r2
 8008784:	fa1f f38c 	uxth.w	r3, ip
 8008788:	eba3 030e 	sub.w	r3, r3, lr
 800878c:	4403      	add	r3, r0
 800878e:	0c12      	lsrs	r2, r2, #16
 8008790:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008794:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008798:	b29b      	uxth	r3, r3
 800879a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800879e:	45c1      	cmp	r9, r8
 80087a0:	f841 3b04 	str.w	r3, [r1], #4
 80087a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80087a8:	d2e6      	bcs.n	8008778 <quorem+0xa4>
 80087aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087b2:	b922      	cbnz	r2, 80087be <quorem+0xea>
 80087b4:	3b04      	subs	r3, #4
 80087b6:	429d      	cmp	r5, r3
 80087b8:	461a      	mov	r2, r3
 80087ba:	d30b      	bcc.n	80087d4 <quorem+0x100>
 80087bc:	613c      	str	r4, [r7, #16]
 80087be:	3601      	adds	r6, #1
 80087c0:	4630      	mov	r0, r6
 80087c2:	b003      	add	sp, #12
 80087c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c8:	6812      	ldr	r2, [r2, #0]
 80087ca:	3b04      	subs	r3, #4
 80087cc:	2a00      	cmp	r2, #0
 80087ce:	d1cb      	bne.n	8008768 <quorem+0x94>
 80087d0:	3c01      	subs	r4, #1
 80087d2:	e7c6      	b.n	8008762 <quorem+0x8e>
 80087d4:	6812      	ldr	r2, [r2, #0]
 80087d6:	3b04      	subs	r3, #4
 80087d8:	2a00      	cmp	r2, #0
 80087da:	d1ef      	bne.n	80087bc <quorem+0xe8>
 80087dc:	3c01      	subs	r4, #1
 80087de:	e7ea      	b.n	80087b6 <quorem+0xe2>
 80087e0:	2000      	movs	r0, #0
 80087e2:	e7ee      	b.n	80087c2 <quorem+0xee>
 80087e4:	0000      	movs	r0, r0
	...

080087e8 <_dtoa_r>:
 80087e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	69c7      	ldr	r7, [r0, #28]
 80087ee:	b097      	sub	sp, #92	@ 0x5c
 80087f0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80087f4:	ec55 4b10 	vmov	r4, r5, d0
 80087f8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80087fa:	9107      	str	r1, [sp, #28]
 80087fc:	4681      	mov	r9, r0
 80087fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8008800:	9311      	str	r3, [sp, #68]	@ 0x44
 8008802:	b97f      	cbnz	r7, 8008824 <_dtoa_r+0x3c>
 8008804:	2010      	movs	r0, #16
 8008806:	f001 f943 	bl	8009a90 <malloc>
 800880a:	4602      	mov	r2, r0
 800880c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008810:	b920      	cbnz	r0, 800881c <_dtoa_r+0x34>
 8008812:	4ba9      	ldr	r3, [pc, #676]	@ (8008ab8 <_dtoa_r+0x2d0>)
 8008814:	21ef      	movs	r1, #239	@ 0xef
 8008816:	48a9      	ldr	r0, [pc, #676]	@ (8008abc <_dtoa_r+0x2d4>)
 8008818:	f7ff ff3e 	bl	8008698 <__assert_func>
 800881c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008820:	6007      	str	r7, [r0, #0]
 8008822:	60c7      	str	r7, [r0, #12]
 8008824:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008828:	6819      	ldr	r1, [r3, #0]
 800882a:	b159      	cbz	r1, 8008844 <_dtoa_r+0x5c>
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	604a      	str	r2, [r1, #4]
 8008830:	2301      	movs	r3, #1
 8008832:	4093      	lsls	r3, r2
 8008834:	608b      	str	r3, [r1, #8]
 8008836:	4648      	mov	r0, r9
 8008838:	f001 fa32 	bl	8009ca0 <_Bfree>
 800883c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	1e2b      	subs	r3, r5, #0
 8008846:	bfb9      	ittee	lt
 8008848:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800884c:	9305      	strlt	r3, [sp, #20]
 800884e:	2300      	movge	r3, #0
 8008850:	6033      	strge	r3, [r6, #0]
 8008852:	9f05      	ldr	r7, [sp, #20]
 8008854:	4b9a      	ldr	r3, [pc, #616]	@ (8008ac0 <_dtoa_r+0x2d8>)
 8008856:	bfbc      	itt	lt
 8008858:	2201      	movlt	r2, #1
 800885a:	6032      	strlt	r2, [r6, #0]
 800885c:	43bb      	bics	r3, r7
 800885e:	d112      	bne.n	8008886 <_dtoa_r+0x9e>
 8008860:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008862:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008866:	6013      	str	r3, [r2, #0]
 8008868:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800886c:	4323      	orrs	r3, r4
 800886e:	f000 855a 	beq.w	8009326 <_dtoa_r+0xb3e>
 8008872:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008874:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008ad4 <_dtoa_r+0x2ec>
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 855c 	beq.w	8009336 <_dtoa_r+0xb4e>
 800887e:	f10a 0303 	add.w	r3, sl, #3
 8008882:	f000 bd56 	b.w	8009332 <_dtoa_r+0xb4a>
 8008886:	ed9d 7b04 	vldr	d7, [sp, #16]
 800888a:	2200      	movs	r2, #0
 800888c:	ec51 0b17 	vmov	r0, r1, d7
 8008890:	2300      	movs	r3, #0
 8008892:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008896:	f7f8 f92f 	bl	8000af8 <__aeabi_dcmpeq>
 800889a:	4680      	mov	r8, r0
 800889c:	b158      	cbz	r0, 80088b6 <_dtoa_r+0xce>
 800889e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80088a0:	2301      	movs	r3, #1
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80088a6:	b113      	cbz	r3, 80088ae <_dtoa_r+0xc6>
 80088a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80088aa:	4b86      	ldr	r3, [pc, #536]	@ (8008ac4 <_dtoa_r+0x2dc>)
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008ad8 <_dtoa_r+0x2f0>
 80088b2:	f000 bd40 	b.w	8009336 <_dtoa_r+0xb4e>
 80088b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80088ba:	aa14      	add	r2, sp, #80	@ 0x50
 80088bc:	a915      	add	r1, sp, #84	@ 0x54
 80088be:	4648      	mov	r0, r9
 80088c0:	f001 fd8a 	bl	800a3d8 <__d2b>
 80088c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80088c8:	9002      	str	r0, [sp, #8]
 80088ca:	2e00      	cmp	r6, #0
 80088cc:	d078      	beq.n	80089c0 <_dtoa_r+0x1d8>
 80088ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088d0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80088d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80088dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80088e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80088e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80088e8:	4619      	mov	r1, r3
 80088ea:	2200      	movs	r2, #0
 80088ec:	4b76      	ldr	r3, [pc, #472]	@ (8008ac8 <_dtoa_r+0x2e0>)
 80088ee:	f7f7 fce3 	bl	80002b8 <__aeabi_dsub>
 80088f2:	a36b      	add	r3, pc, #428	@ (adr r3, 8008aa0 <_dtoa_r+0x2b8>)
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	f7f7 fe96 	bl	8000628 <__aeabi_dmul>
 80088fc:	a36a      	add	r3, pc, #424	@ (adr r3, 8008aa8 <_dtoa_r+0x2c0>)
 80088fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008902:	f7f7 fcdb 	bl	80002bc <__adddf3>
 8008906:	4604      	mov	r4, r0
 8008908:	4630      	mov	r0, r6
 800890a:	460d      	mov	r5, r1
 800890c:	f7f7 fe22 	bl	8000554 <__aeabi_i2d>
 8008910:	a367      	add	r3, pc, #412	@ (adr r3, 8008ab0 <_dtoa_r+0x2c8>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	f7f7 fe87 	bl	8000628 <__aeabi_dmul>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	4620      	mov	r0, r4
 8008920:	4629      	mov	r1, r5
 8008922:	f7f7 fccb 	bl	80002bc <__adddf3>
 8008926:	4604      	mov	r4, r0
 8008928:	460d      	mov	r5, r1
 800892a:	f7f8 f92d 	bl	8000b88 <__aeabi_d2iz>
 800892e:	2200      	movs	r2, #0
 8008930:	4607      	mov	r7, r0
 8008932:	2300      	movs	r3, #0
 8008934:	4620      	mov	r0, r4
 8008936:	4629      	mov	r1, r5
 8008938:	f7f8 f8e8 	bl	8000b0c <__aeabi_dcmplt>
 800893c:	b140      	cbz	r0, 8008950 <_dtoa_r+0x168>
 800893e:	4638      	mov	r0, r7
 8008940:	f7f7 fe08 	bl	8000554 <__aeabi_i2d>
 8008944:	4622      	mov	r2, r4
 8008946:	462b      	mov	r3, r5
 8008948:	f7f8 f8d6 	bl	8000af8 <__aeabi_dcmpeq>
 800894c:	b900      	cbnz	r0, 8008950 <_dtoa_r+0x168>
 800894e:	3f01      	subs	r7, #1
 8008950:	2f16      	cmp	r7, #22
 8008952:	d852      	bhi.n	80089fa <_dtoa_r+0x212>
 8008954:	4b5d      	ldr	r3, [pc, #372]	@ (8008acc <_dtoa_r+0x2e4>)
 8008956:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800895a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008962:	f7f8 f8d3 	bl	8000b0c <__aeabi_dcmplt>
 8008966:	2800      	cmp	r0, #0
 8008968:	d049      	beq.n	80089fe <_dtoa_r+0x216>
 800896a:	3f01      	subs	r7, #1
 800896c:	2300      	movs	r3, #0
 800896e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008970:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008972:	1b9b      	subs	r3, r3, r6
 8008974:	1e5a      	subs	r2, r3, #1
 8008976:	bf45      	ittet	mi
 8008978:	f1c3 0301 	rsbmi	r3, r3, #1
 800897c:	9300      	strmi	r3, [sp, #0]
 800897e:	2300      	movpl	r3, #0
 8008980:	2300      	movmi	r3, #0
 8008982:	9206      	str	r2, [sp, #24]
 8008984:	bf54      	ite	pl
 8008986:	9300      	strpl	r3, [sp, #0]
 8008988:	9306      	strmi	r3, [sp, #24]
 800898a:	2f00      	cmp	r7, #0
 800898c:	db39      	blt.n	8008a02 <_dtoa_r+0x21a>
 800898e:	9b06      	ldr	r3, [sp, #24]
 8008990:	970d      	str	r7, [sp, #52]	@ 0x34
 8008992:	443b      	add	r3, r7
 8008994:	9306      	str	r3, [sp, #24]
 8008996:	2300      	movs	r3, #0
 8008998:	9308      	str	r3, [sp, #32]
 800899a:	9b07      	ldr	r3, [sp, #28]
 800899c:	2b09      	cmp	r3, #9
 800899e:	d863      	bhi.n	8008a68 <_dtoa_r+0x280>
 80089a0:	2b05      	cmp	r3, #5
 80089a2:	bfc4      	itt	gt
 80089a4:	3b04      	subgt	r3, #4
 80089a6:	9307      	strgt	r3, [sp, #28]
 80089a8:	9b07      	ldr	r3, [sp, #28]
 80089aa:	f1a3 0302 	sub.w	r3, r3, #2
 80089ae:	bfcc      	ite	gt
 80089b0:	2400      	movgt	r4, #0
 80089b2:	2401      	movle	r4, #1
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	d863      	bhi.n	8008a80 <_dtoa_r+0x298>
 80089b8:	e8df f003 	tbb	[pc, r3]
 80089bc:	2b375452 	.word	0x2b375452
 80089c0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80089c4:	441e      	add	r6, r3
 80089c6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80089ca:	2b20      	cmp	r3, #32
 80089cc:	bfc1      	itttt	gt
 80089ce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80089d2:	409f      	lslgt	r7, r3
 80089d4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80089d8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80089dc:	bfd6      	itet	le
 80089de:	f1c3 0320 	rsble	r3, r3, #32
 80089e2:	ea47 0003 	orrgt.w	r0, r7, r3
 80089e6:	fa04 f003 	lslle.w	r0, r4, r3
 80089ea:	f7f7 fda3 	bl	8000534 <__aeabi_ui2d>
 80089ee:	2201      	movs	r2, #1
 80089f0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80089f4:	3e01      	subs	r6, #1
 80089f6:	9212      	str	r2, [sp, #72]	@ 0x48
 80089f8:	e776      	b.n	80088e8 <_dtoa_r+0x100>
 80089fa:	2301      	movs	r3, #1
 80089fc:	e7b7      	b.n	800896e <_dtoa_r+0x186>
 80089fe:	9010      	str	r0, [sp, #64]	@ 0x40
 8008a00:	e7b6      	b.n	8008970 <_dtoa_r+0x188>
 8008a02:	9b00      	ldr	r3, [sp, #0]
 8008a04:	1bdb      	subs	r3, r3, r7
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	427b      	negs	r3, r7
 8008a0a:	9308      	str	r3, [sp, #32]
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008a10:	e7c3      	b.n	800899a <_dtoa_r+0x1b2>
 8008a12:	2301      	movs	r3, #1
 8008a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a18:	eb07 0b03 	add.w	fp, r7, r3
 8008a1c:	f10b 0301 	add.w	r3, fp, #1
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	9303      	str	r3, [sp, #12]
 8008a24:	bfb8      	it	lt
 8008a26:	2301      	movlt	r3, #1
 8008a28:	e006      	b.n	8008a38 <_dtoa_r+0x250>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dd28      	ble.n	8008a86 <_dtoa_r+0x29e>
 8008a34:	469b      	mov	fp, r3
 8008a36:	9303      	str	r3, [sp, #12]
 8008a38:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	2204      	movs	r2, #4
 8008a40:	f102 0514 	add.w	r5, r2, #20
 8008a44:	429d      	cmp	r5, r3
 8008a46:	d926      	bls.n	8008a96 <_dtoa_r+0x2ae>
 8008a48:	6041      	str	r1, [r0, #4]
 8008a4a:	4648      	mov	r0, r9
 8008a4c:	f001 f8e8 	bl	8009c20 <_Balloc>
 8008a50:	4682      	mov	sl, r0
 8008a52:	2800      	cmp	r0, #0
 8008a54:	d142      	bne.n	8008adc <_dtoa_r+0x2f4>
 8008a56:	4b1e      	ldr	r3, [pc, #120]	@ (8008ad0 <_dtoa_r+0x2e8>)
 8008a58:	4602      	mov	r2, r0
 8008a5a:	f240 11af 	movw	r1, #431	@ 0x1af
 8008a5e:	e6da      	b.n	8008816 <_dtoa_r+0x2e>
 8008a60:	2300      	movs	r3, #0
 8008a62:	e7e3      	b.n	8008a2c <_dtoa_r+0x244>
 8008a64:	2300      	movs	r3, #0
 8008a66:	e7d5      	b.n	8008a14 <_dtoa_r+0x22c>
 8008a68:	2401      	movs	r4, #1
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	9307      	str	r3, [sp, #28]
 8008a6e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008a70:	f04f 3bff 	mov.w	fp, #4294967295
 8008a74:	2200      	movs	r2, #0
 8008a76:	f8cd b00c 	str.w	fp, [sp, #12]
 8008a7a:	2312      	movs	r3, #18
 8008a7c:	920c      	str	r2, [sp, #48]	@ 0x30
 8008a7e:	e7db      	b.n	8008a38 <_dtoa_r+0x250>
 8008a80:	2301      	movs	r3, #1
 8008a82:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a84:	e7f4      	b.n	8008a70 <_dtoa_r+0x288>
 8008a86:	f04f 0b01 	mov.w	fp, #1
 8008a8a:	f8cd b00c 	str.w	fp, [sp, #12]
 8008a8e:	465b      	mov	r3, fp
 8008a90:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008a94:	e7d0      	b.n	8008a38 <_dtoa_r+0x250>
 8008a96:	3101      	adds	r1, #1
 8008a98:	0052      	lsls	r2, r2, #1
 8008a9a:	e7d1      	b.n	8008a40 <_dtoa_r+0x258>
 8008a9c:	f3af 8000 	nop.w
 8008aa0:	636f4361 	.word	0x636f4361
 8008aa4:	3fd287a7 	.word	0x3fd287a7
 8008aa8:	8b60c8b3 	.word	0x8b60c8b3
 8008aac:	3fc68a28 	.word	0x3fc68a28
 8008ab0:	509f79fb 	.word	0x509f79fb
 8008ab4:	3fd34413 	.word	0x3fd34413
 8008ab8:	0800c1fe 	.word	0x0800c1fe
 8008abc:	0800c2c0 	.word	0x0800c2c0
 8008ac0:	7ff00000 	.word	0x7ff00000
 8008ac4:	0800c1db 	.word	0x0800c1db
 8008ac8:	3ff80000 	.word	0x3ff80000
 8008acc:	0800c580 	.word	0x0800c580
 8008ad0:	0800c318 	.word	0x0800c318
 8008ad4:	0800c2bc 	.word	0x0800c2bc
 8008ad8:	0800c1da 	.word	0x0800c1da
 8008adc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008ae0:	6018      	str	r0, [r3, #0]
 8008ae2:	9b03      	ldr	r3, [sp, #12]
 8008ae4:	2b0e      	cmp	r3, #14
 8008ae6:	f200 80a1 	bhi.w	8008c2c <_dtoa_r+0x444>
 8008aea:	2c00      	cmp	r4, #0
 8008aec:	f000 809e 	beq.w	8008c2c <_dtoa_r+0x444>
 8008af0:	2f00      	cmp	r7, #0
 8008af2:	dd33      	ble.n	8008b5c <_dtoa_r+0x374>
 8008af4:	4b9c      	ldr	r3, [pc, #624]	@ (8008d68 <_dtoa_r+0x580>)
 8008af6:	f007 020f 	and.w	r2, r7, #15
 8008afa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008afe:	ed93 7b00 	vldr	d7, [r3]
 8008b02:	05f8      	lsls	r0, r7, #23
 8008b04:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008b08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b0c:	d516      	bpl.n	8008b3c <_dtoa_r+0x354>
 8008b0e:	4b97      	ldr	r3, [pc, #604]	@ (8008d6c <_dtoa_r+0x584>)
 8008b10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008b14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b18:	f7f7 feb0 	bl	800087c <__aeabi_ddiv>
 8008b1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b20:	f004 040f 	and.w	r4, r4, #15
 8008b24:	2603      	movs	r6, #3
 8008b26:	4d91      	ldr	r5, [pc, #580]	@ (8008d6c <_dtoa_r+0x584>)
 8008b28:	b954      	cbnz	r4, 8008b40 <_dtoa_r+0x358>
 8008b2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008b2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b32:	f7f7 fea3 	bl	800087c <__aeabi_ddiv>
 8008b36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b3a:	e028      	b.n	8008b8e <_dtoa_r+0x3a6>
 8008b3c:	2602      	movs	r6, #2
 8008b3e:	e7f2      	b.n	8008b26 <_dtoa_r+0x33e>
 8008b40:	07e1      	lsls	r1, r4, #31
 8008b42:	d508      	bpl.n	8008b56 <_dtoa_r+0x36e>
 8008b44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008b48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b4c:	f7f7 fd6c 	bl	8000628 <__aeabi_dmul>
 8008b50:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008b54:	3601      	adds	r6, #1
 8008b56:	1064      	asrs	r4, r4, #1
 8008b58:	3508      	adds	r5, #8
 8008b5a:	e7e5      	b.n	8008b28 <_dtoa_r+0x340>
 8008b5c:	f000 80af 	beq.w	8008cbe <_dtoa_r+0x4d6>
 8008b60:	427c      	negs	r4, r7
 8008b62:	4b81      	ldr	r3, [pc, #516]	@ (8008d68 <_dtoa_r+0x580>)
 8008b64:	4d81      	ldr	r5, [pc, #516]	@ (8008d6c <_dtoa_r+0x584>)
 8008b66:	f004 020f 	and.w	r2, r4, #15
 8008b6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008b76:	f7f7 fd57 	bl	8000628 <__aeabi_dmul>
 8008b7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b7e:	1124      	asrs	r4, r4, #4
 8008b80:	2300      	movs	r3, #0
 8008b82:	2602      	movs	r6, #2
 8008b84:	2c00      	cmp	r4, #0
 8008b86:	f040 808f 	bne.w	8008ca8 <_dtoa_r+0x4c0>
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1d3      	bne.n	8008b36 <_dtoa_r+0x34e>
 8008b8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008b90:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 8094 	beq.w	8008cc2 <_dtoa_r+0x4da>
 8008b9a:	4b75      	ldr	r3, [pc, #468]	@ (8008d70 <_dtoa_r+0x588>)
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	f7f7 ffb3 	bl	8000b0c <__aeabi_dcmplt>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	f000 808b 	beq.w	8008cc2 <_dtoa_r+0x4da>
 8008bac:	9b03      	ldr	r3, [sp, #12]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 8087 	beq.w	8008cc2 <_dtoa_r+0x4da>
 8008bb4:	f1bb 0f00 	cmp.w	fp, #0
 8008bb8:	dd34      	ble.n	8008c24 <_dtoa_r+0x43c>
 8008bba:	4620      	mov	r0, r4
 8008bbc:	4b6d      	ldr	r3, [pc, #436]	@ (8008d74 <_dtoa_r+0x58c>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	f7f7 fd31 	bl	8000628 <__aeabi_dmul>
 8008bc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bca:	f107 38ff 	add.w	r8, r7, #4294967295
 8008bce:	3601      	adds	r6, #1
 8008bd0:	465c      	mov	r4, fp
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f7f7 fcbe 	bl	8000554 <__aeabi_i2d>
 8008bd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bdc:	f7f7 fd24 	bl	8000628 <__aeabi_dmul>
 8008be0:	4b65      	ldr	r3, [pc, #404]	@ (8008d78 <_dtoa_r+0x590>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	f7f7 fb6a 	bl	80002bc <__adddf3>
 8008be8:	4605      	mov	r5, r0
 8008bea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008bee:	2c00      	cmp	r4, #0
 8008bf0:	d16a      	bne.n	8008cc8 <_dtoa_r+0x4e0>
 8008bf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bf6:	4b61      	ldr	r3, [pc, #388]	@ (8008d7c <_dtoa_r+0x594>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f7f7 fb5d 	bl	80002b8 <__aeabi_dsub>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	460b      	mov	r3, r1
 8008c02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c06:	462a      	mov	r2, r5
 8008c08:	4633      	mov	r3, r6
 8008c0a:	f7f7 ff9d 	bl	8000b48 <__aeabi_dcmpgt>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	f040 8298 	bne.w	8009144 <_dtoa_r+0x95c>
 8008c14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c18:	462a      	mov	r2, r5
 8008c1a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008c1e:	f7f7 ff75 	bl	8000b0c <__aeabi_dcmplt>
 8008c22:	bb38      	cbnz	r0, 8008c74 <_dtoa_r+0x48c>
 8008c24:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008c28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008c2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f2c0 8157 	blt.w	8008ee2 <_dtoa_r+0x6fa>
 8008c34:	2f0e      	cmp	r7, #14
 8008c36:	f300 8154 	bgt.w	8008ee2 <_dtoa_r+0x6fa>
 8008c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8008d68 <_dtoa_r+0x580>)
 8008c3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c40:	ed93 7b00 	vldr	d7, [r3]
 8008c44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	ed8d 7b00 	vstr	d7, [sp]
 8008c4c:	f280 80e5 	bge.w	8008e1a <_dtoa_r+0x632>
 8008c50:	9b03      	ldr	r3, [sp, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f300 80e1 	bgt.w	8008e1a <_dtoa_r+0x632>
 8008c58:	d10c      	bne.n	8008c74 <_dtoa_r+0x48c>
 8008c5a:	4b48      	ldr	r3, [pc, #288]	@ (8008d7c <_dtoa_r+0x594>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	ec51 0b17 	vmov	r0, r1, d7
 8008c62:	f7f7 fce1 	bl	8000628 <__aeabi_dmul>
 8008c66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c6a:	f7f7 ff63 	bl	8000b34 <__aeabi_dcmpge>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	f000 8266 	beq.w	8009140 <_dtoa_r+0x958>
 8008c74:	2400      	movs	r4, #0
 8008c76:	4625      	mov	r5, r4
 8008c78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c7a:	4656      	mov	r6, sl
 8008c7c:	ea6f 0803 	mvn.w	r8, r3
 8008c80:	2700      	movs	r7, #0
 8008c82:	4621      	mov	r1, r4
 8008c84:	4648      	mov	r0, r9
 8008c86:	f001 f80b 	bl	8009ca0 <_Bfree>
 8008c8a:	2d00      	cmp	r5, #0
 8008c8c:	f000 80bd 	beq.w	8008e0a <_dtoa_r+0x622>
 8008c90:	b12f      	cbz	r7, 8008c9e <_dtoa_r+0x4b6>
 8008c92:	42af      	cmp	r7, r5
 8008c94:	d003      	beq.n	8008c9e <_dtoa_r+0x4b6>
 8008c96:	4639      	mov	r1, r7
 8008c98:	4648      	mov	r0, r9
 8008c9a:	f001 f801 	bl	8009ca0 <_Bfree>
 8008c9e:	4629      	mov	r1, r5
 8008ca0:	4648      	mov	r0, r9
 8008ca2:	f000 fffd 	bl	8009ca0 <_Bfree>
 8008ca6:	e0b0      	b.n	8008e0a <_dtoa_r+0x622>
 8008ca8:	07e2      	lsls	r2, r4, #31
 8008caa:	d505      	bpl.n	8008cb8 <_dtoa_r+0x4d0>
 8008cac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008cb0:	f7f7 fcba 	bl	8000628 <__aeabi_dmul>
 8008cb4:	3601      	adds	r6, #1
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	1064      	asrs	r4, r4, #1
 8008cba:	3508      	adds	r5, #8
 8008cbc:	e762      	b.n	8008b84 <_dtoa_r+0x39c>
 8008cbe:	2602      	movs	r6, #2
 8008cc0:	e765      	b.n	8008b8e <_dtoa_r+0x3a6>
 8008cc2:	9c03      	ldr	r4, [sp, #12]
 8008cc4:	46b8      	mov	r8, r7
 8008cc6:	e784      	b.n	8008bd2 <_dtoa_r+0x3ea>
 8008cc8:	4b27      	ldr	r3, [pc, #156]	@ (8008d68 <_dtoa_r+0x580>)
 8008cca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ccc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008cd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008cd4:	4454      	add	r4, sl
 8008cd6:	2900      	cmp	r1, #0
 8008cd8:	d054      	beq.n	8008d84 <_dtoa_r+0x59c>
 8008cda:	4929      	ldr	r1, [pc, #164]	@ (8008d80 <_dtoa_r+0x598>)
 8008cdc:	2000      	movs	r0, #0
 8008cde:	f7f7 fdcd 	bl	800087c <__aeabi_ddiv>
 8008ce2:	4633      	mov	r3, r6
 8008ce4:	462a      	mov	r2, r5
 8008ce6:	f7f7 fae7 	bl	80002b8 <__aeabi_dsub>
 8008cea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008cee:	4656      	mov	r6, sl
 8008cf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cf4:	f7f7 ff48 	bl	8000b88 <__aeabi_d2iz>
 8008cf8:	4605      	mov	r5, r0
 8008cfa:	f7f7 fc2b 	bl	8000554 <__aeabi_i2d>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d06:	f7f7 fad7 	bl	80002b8 <__aeabi_dsub>
 8008d0a:	3530      	adds	r5, #48	@ 0x30
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	460b      	mov	r3, r1
 8008d10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d14:	f806 5b01 	strb.w	r5, [r6], #1
 8008d18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008d1c:	f7f7 fef6 	bl	8000b0c <__aeabi_dcmplt>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d172      	bne.n	8008e0a <_dtoa_r+0x622>
 8008d24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d28:	4911      	ldr	r1, [pc, #68]	@ (8008d70 <_dtoa_r+0x588>)
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	f7f7 fac4 	bl	80002b8 <__aeabi_dsub>
 8008d30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008d34:	f7f7 feea 	bl	8000b0c <__aeabi_dcmplt>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	f040 80b4 	bne.w	8008ea6 <_dtoa_r+0x6be>
 8008d3e:	42a6      	cmp	r6, r4
 8008d40:	f43f af70 	beq.w	8008c24 <_dtoa_r+0x43c>
 8008d44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008d48:	4b0a      	ldr	r3, [pc, #40]	@ (8008d74 <_dtoa_r+0x58c>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f7f7 fc6c 	bl	8000628 <__aeabi_dmul>
 8008d50:	4b08      	ldr	r3, [pc, #32]	@ (8008d74 <_dtoa_r+0x58c>)
 8008d52:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008d56:	2200      	movs	r2, #0
 8008d58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d5c:	f7f7 fc64 	bl	8000628 <__aeabi_dmul>
 8008d60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d64:	e7c4      	b.n	8008cf0 <_dtoa_r+0x508>
 8008d66:	bf00      	nop
 8008d68:	0800c580 	.word	0x0800c580
 8008d6c:	0800c558 	.word	0x0800c558
 8008d70:	3ff00000 	.word	0x3ff00000
 8008d74:	40240000 	.word	0x40240000
 8008d78:	401c0000 	.word	0x401c0000
 8008d7c:	40140000 	.word	0x40140000
 8008d80:	3fe00000 	.word	0x3fe00000
 8008d84:	4631      	mov	r1, r6
 8008d86:	4628      	mov	r0, r5
 8008d88:	f7f7 fc4e 	bl	8000628 <__aeabi_dmul>
 8008d8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008d90:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008d92:	4656      	mov	r6, sl
 8008d94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d98:	f7f7 fef6 	bl	8000b88 <__aeabi_d2iz>
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	f7f7 fbd9 	bl	8000554 <__aeabi_i2d>
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008daa:	f7f7 fa85 	bl	80002b8 <__aeabi_dsub>
 8008dae:	3530      	adds	r5, #48	@ 0x30
 8008db0:	f806 5b01 	strb.w	r5, [r6], #1
 8008db4:	4602      	mov	r2, r0
 8008db6:	460b      	mov	r3, r1
 8008db8:	42a6      	cmp	r6, r4
 8008dba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008dbe:	f04f 0200 	mov.w	r2, #0
 8008dc2:	d124      	bne.n	8008e0e <_dtoa_r+0x626>
 8008dc4:	4baf      	ldr	r3, [pc, #700]	@ (8009084 <_dtoa_r+0x89c>)
 8008dc6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008dca:	f7f7 fa77 	bl	80002bc <__adddf3>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dd6:	f7f7 feb7 	bl	8000b48 <__aeabi_dcmpgt>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d163      	bne.n	8008ea6 <_dtoa_r+0x6be>
 8008dde:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008de2:	49a8      	ldr	r1, [pc, #672]	@ (8009084 <_dtoa_r+0x89c>)
 8008de4:	2000      	movs	r0, #0
 8008de6:	f7f7 fa67 	bl	80002b8 <__aeabi_dsub>
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008df2:	f7f7 fe8b 	bl	8000b0c <__aeabi_dcmplt>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	f43f af14 	beq.w	8008c24 <_dtoa_r+0x43c>
 8008dfc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008dfe:	1e73      	subs	r3, r6, #1
 8008e00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008e02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e06:	2b30      	cmp	r3, #48	@ 0x30
 8008e08:	d0f8      	beq.n	8008dfc <_dtoa_r+0x614>
 8008e0a:	4647      	mov	r7, r8
 8008e0c:	e03b      	b.n	8008e86 <_dtoa_r+0x69e>
 8008e0e:	4b9e      	ldr	r3, [pc, #632]	@ (8009088 <_dtoa_r+0x8a0>)
 8008e10:	f7f7 fc0a 	bl	8000628 <__aeabi_dmul>
 8008e14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e18:	e7bc      	b.n	8008d94 <_dtoa_r+0x5ac>
 8008e1a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008e1e:	4656      	mov	r6, sl
 8008e20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e24:	4620      	mov	r0, r4
 8008e26:	4629      	mov	r1, r5
 8008e28:	f7f7 fd28 	bl	800087c <__aeabi_ddiv>
 8008e2c:	f7f7 feac 	bl	8000b88 <__aeabi_d2iz>
 8008e30:	4680      	mov	r8, r0
 8008e32:	f7f7 fb8f 	bl	8000554 <__aeabi_i2d>
 8008e36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e3a:	f7f7 fbf5 	bl	8000628 <__aeabi_dmul>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	4620      	mov	r0, r4
 8008e44:	4629      	mov	r1, r5
 8008e46:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008e4a:	f7f7 fa35 	bl	80002b8 <__aeabi_dsub>
 8008e4e:	f806 4b01 	strb.w	r4, [r6], #1
 8008e52:	9d03      	ldr	r5, [sp, #12]
 8008e54:	eba6 040a 	sub.w	r4, r6, sl
 8008e58:	42a5      	cmp	r5, r4
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	d133      	bne.n	8008ec8 <_dtoa_r+0x6e0>
 8008e60:	f7f7 fa2c 	bl	80002bc <__adddf3>
 8008e64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e68:	4604      	mov	r4, r0
 8008e6a:	460d      	mov	r5, r1
 8008e6c:	f7f7 fe6c 	bl	8000b48 <__aeabi_dcmpgt>
 8008e70:	b9c0      	cbnz	r0, 8008ea4 <_dtoa_r+0x6bc>
 8008e72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e76:	4620      	mov	r0, r4
 8008e78:	4629      	mov	r1, r5
 8008e7a:	f7f7 fe3d 	bl	8000af8 <__aeabi_dcmpeq>
 8008e7e:	b110      	cbz	r0, 8008e86 <_dtoa_r+0x69e>
 8008e80:	f018 0f01 	tst.w	r8, #1
 8008e84:	d10e      	bne.n	8008ea4 <_dtoa_r+0x6bc>
 8008e86:	9902      	ldr	r1, [sp, #8]
 8008e88:	4648      	mov	r0, r9
 8008e8a:	f000 ff09 	bl	8009ca0 <_Bfree>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	7033      	strb	r3, [r6, #0]
 8008e92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e94:	3701      	adds	r7, #1
 8008e96:	601f      	str	r7, [r3, #0]
 8008e98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f000 824b 	beq.w	8009336 <_dtoa_r+0xb4e>
 8008ea0:	601e      	str	r6, [r3, #0]
 8008ea2:	e248      	b.n	8009336 <_dtoa_r+0xb4e>
 8008ea4:	46b8      	mov	r8, r7
 8008ea6:	4633      	mov	r3, r6
 8008ea8:	461e      	mov	r6, r3
 8008eaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008eae:	2a39      	cmp	r2, #57	@ 0x39
 8008eb0:	d106      	bne.n	8008ec0 <_dtoa_r+0x6d8>
 8008eb2:	459a      	cmp	sl, r3
 8008eb4:	d1f8      	bne.n	8008ea8 <_dtoa_r+0x6c0>
 8008eb6:	2230      	movs	r2, #48	@ 0x30
 8008eb8:	f108 0801 	add.w	r8, r8, #1
 8008ebc:	f88a 2000 	strb.w	r2, [sl]
 8008ec0:	781a      	ldrb	r2, [r3, #0]
 8008ec2:	3201      	adds	r2, #1
 8008ec4:	701a      	strb	r2, [r3, #0]
 8008ec6:	e7a0      	b.n	8008e0a <_dtoa_r+0x622>
 8008ec8:	4b6f      	ldr	r3, [pc, #444]	@ (8009088 <_dtoa_r+0x8a0>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f7f7 fbac 	bl	8000628 <__aeabi_dmul>
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	460d      	mov	r5, r1
 8008ed8:	f7f7 fe0e 	bl	8000af8 <__aeabi_dcmpeq>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d09f      	beq.n	8008e20 <_dtoa_r+0x638>
 8008ee0:	e7d1      	b.n	8008e86 <_dtoa_r+0x69e>
 8008ee2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ee4:	2a00      	cmp	r2, #0
 8008ee6:	f000 80ea 	beq.w	80090be <_dtoa_r+0x8d6>
 8008eea:	9a07      	ldr	r2, [sp, #28]
 8008eec:	2a01      	cmp	r2, #1
 8008eee:	f300 80cd 	bgt.w	800908c <_dtoa_r+0x8a4>
 8008ef2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008ef4:	2a00      	cmp	r2, #0
 8008ef6:	f000 80c1 	beq.w	800907c <_dtoa_r+0x894>
 8008efa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008efe:	9c08      	ldr	r4, [sp, #32]
 8008f00:	9e00      	ldr	r6, [sp, #0]
 8008f02:	9a00      	ldr	r2, [sp, #0]
 8008f04:	441a      	add	r2, r3
 8008f06:	9200      	str	r2, [sp, #0]
 8008f08:	9a06      	ldr	r2, [sp, #24]
 8008f0a:	2101      	movs	r1, #1
 8008f0c:	441a      	add	r2, r3
 8008f0e:	4648      	mov	r0, r9
 8008f10:	9206      	str	r2, [sp, #24]
 8008f12:	f000 ffc3 	bl	8009e9c <__i2b>
 8008f16:	4605      	mov	r5, r0
 8008f18:	b166      	cbz	r6, 8008f34 <_dtoa_r+0x74c>
 8008f1a:	9b06      	ldr	r3, [sp, #24]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	dd09      	ble.n	8008f34 <_dtoa_r+0x74c>
 8008f20:	42b3      	cmp	r3, r6
 8008f22:	9a00      	ldr	r2, [sp, #0]
 8008f24:	bfa8      	it	ge
 8008f26:	4633      	movge	r3, r6
 8008f28:	1ad2      	subs	r2, r2, r3
 8008f2a:	9200      	str	r2, [sp, #0]
 8008f2c:	9a06      	ldr	r2, [sp, #24]
 8008f2e:	1af6      	subs	r6, r6, r3
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	9306      	str	r3, [sp, #24]
 8008f34:	9b08      	ldr	r3, [sp, #32]
 8008f36:	b30b      	cbz	r3, 8008f7c <_dtoa_r+0x794>
 8008f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f000 80c6 	beq.w	80090cc <_dtoa_r+0x8e4>
 8008f40:	2c00      	cmp	r4, #0
 8008f42:	f000 80c0 	beq.w	80090c6 <_dtoa_r+0x8de>
 8008f46:	4629      	mov	r1, r5
 8008f48:	4622      	mov	r2, r4
 8008f4a:	4648      	mov	r0, r9
 8008f4c:	f001 f85e 	bl	800a00c <__pow5mult>
 8008f50:	9a02      	ldr	r2, [sp, #8]
 8008f52:	4601      	mov	r1, r0
 8008f54:	4605      	mov	r5, r0
 8008f56:	4648      	mov	r0, r9
 8008f58:	f000 ffb6 	bl	8009ec8 <__multiply>
 8008f5c:	9902      	ldr	r1, [sp, #8]
 8008f5e:	4680      	mov	r8, r0
 8008f60:	4648      	mov	r0, r9
 8008f62:	f000 fe9d 	bl	8009ca0 <_Bfree>
 8008f66:	9b08      	ldr	r3, [sp, #32]
 8008f68:	1b1b      	subs	r3, r3, r4
 8008f6a:	9308      	str	r3, [sp, #32]
 8008f6c:	f000 80b1 	beq.w	80090d2 <_dtoa_r+0x8ea>
 8008f70:	9a08      	ldr	r2, [sp, #32]
 8008f72:	4641      	mov	r1, r8
 8008f74:	4648      	mov	r0, r9
 8008f76:	f001 f849 	bl	800a00c <__pow5mult>
 8008f7a:	9002      	str	r0, [sp, #8]
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	4648      	mov	r0, r9
 8008f80:	f000 ff8c 	bl	8009e9c <__i2b>
 8008f84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f86:	4604      	mov	r4, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 81d8 	beq.w	800933e <_dtoa_r+0xb56>
 8008f8e:	461a      	mov	r2, r3
 8008f90:	4601      	mov	r1, r0
 8008f92:	4648      	mov	r0, r9
 8008f94:	f001 f83a 	bl	800a00c <__pow5mult>
 8008f98:	9b07      	ldr	r3, [sp, #28]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	4604      	mov	r4, r0
 8008f9e:	f300 809f 	bgt.w	80090e0 <_dtoa_r+0x8f8>
 8008fa2:	9b04      	ldr	r3, [sp, #16]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f040 8097 	bne.w	80090d8 <_dtoa_r+0x8f0>
 8008faa:	9b05      	ldr	r3, [sp, #20]
 8008fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f040 8093 	bne.w	80090dc <_dtoa_r+0x8f4>
 8008fb6:	9b05      	ldr	r3, [sp, #20]
 8008fb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fbc:	0d1b      	lsrs	r3, r3, #20
 8008fbe:	051b      	lsls	r3, r3, #20
 8008fc0:	b133      	cbz	r3, 8008fd0 <_dtoa_r+0x7e8>
 8008fc2:	9b00      	ldr	r3, [sp, #0]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	9b06      	ldr	r3, [sp, #24]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	9306      	str	r3, [sp, #24]
 8008fce:	2301      	movs	r3, #1
 8008fd0:	9308      	str	r3, [sp, #32]
 8008fd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 81b8 	beq.w	800934a <_dtoa_r+0xb62>
 8008fda:	6923      	ldr	r3, [r4, #16]
 8008fdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008fe0:	6918      	ldr	r0, [r3, #16]
 8008fe2:	f000 ff0f 	bl	8009e04 <__hi0bits>
 8008fe6:	f1c0 0020 	rsb	r0, r0, #32
 8008fea:	9b06      	ldr	r3, [sp, #24]
 8008fec:	4418      	add	r0, r3
 8008fee:	f010 001f 	ands.w	r0, r0, #31
 8008ff2:	f000 8082 	beq.w	80090fa <_dtoa_r+0x912>
 8008ff6:	f1c0 0320 	rsb	r3, r0, #32
 8008ffa:	2b04      	cmp	r3, #4
 8008ffc:	dd73      	ble.n	80090e6 <_dtoa_r+0x8fe>
 8008ffe:	9b00      	ldr	r3, [sp, #0]
 8009000:	f1c0 001c 	rsb	r0, r0, #28
 8009004:	4403      	add	r3, r0
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	9b06      	ldr	r3, [sp, #24]
 800900a:	4403      	add	r3, r0
 800900c:	4406      	add	r6, r0
 800900e:	9306      	str	r3, [sp, #24]
 8009010:	9b00      	ldr	r3, [sp, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	dd05      	ble.n	8009022 <_dtoa_r+0x83a>
 8009016:	9902      	ldr	r1, [sp, #8]
 8009018:	461a      	mov	r2, r3
 800901a:	4648      	mov	r0, r9
 800901c:	f001 f850 	bl	800a0c0 <__lshift>
 8009020:	9002      	str	r0, [sp, #8]
 8009022:	9b06      	ldr	r3, [sp, #24]
 8009024:	2b00      	cmp	r3, #0
 8009026:	dd05      	ble.n	8009034 <_dtoa_r+0x84c>
 8009028:	4621      	mov	r1, r4
 800902a:	461a      	mov	r2, r3
 800902c:	4648      	mov	r0, r9
 800902e:	f001 f847 	bl	800a0c0 <__lshift>
 8009032:	4604      	mov	r4, r0
 8009034:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009036:	2b00      	cmp	r3, #0
 8009038:	d061      	beq.n	80090fe <_dtoa_r+0x916>
 800903a:	9802      	ldr	r0, [sp, #8]
 800903c:	4621      	mov	r1, r4
 800903e:	f001 f8ab 	bl	800a198 <__mcmp>
 8009042:	2800      	cmp	r0, #0
 8009044:	da5b      	bge.n	80090fe <_dtoa_r+0x916>
 8009046:	2300      	movs	r3, #0
 8009048:	9902      	ldr	r1, [sp, #8]
 800904a:	220a      	movs	r2, #10
 800904c:	4648      	mov	r0, r9
 800904e:	f000 fe49 	bl	8009ce4 <__multadd>
 8009052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009054:	9002      	str	r0, [sp, #8]
 8009056:	f107 38ff 	add.w	r8, r7, #4294967295
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 8177 	beq.w	800934e <_dtoa_r+0xb66>
 8009060:	4629      	mov	r1, r5
 8009062:	2300      	movs	r3, #0
 8009064:	220a      	movs	r2, #10
 8009066:	4648      	mov	r0, r9
 8009068:	f000 fe3c 	bl	8009ce4 <__multadd>
 800906c:	f1bb 0f00 	cmp.w	fp, #0
 8009070:	4605      	mov	r5, r0
 8009072:	dc6f      	bgt.n	8009154 <_dtoa_r+0x96c>
 8009074:	9b07      	ldr	r3, [sp, #28]
 8009076:	2b02      	cmp	r3, #2
 8009078:	dc49      	bgt.n	800910e <_dtoa_r+0x926>
 800907a:	e06b      	b.n	8009154 <_dtoa_r+0x96c>
 800907c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800907e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009082:	e73c      	b.n	8008efe <_dtoa_r+0x716>
 8009084:	3fe00000 	.word	0x3fe00000
 8009088:	40240000 	.word	0x40240000
 800908c:	9b03      	ldr	r3, [sp, #12]
 800908e:	1e5c      	subs	r4, r3, #1
 8009090:	9b08      	ldr	r3, [sp, #32]
 8009092:	42a3      	cmp	r3, r4
 8009094:	db09      	blt.n	80090aa <_dtoa_r+0x8c2>
 8009096:	1b1c      	subs	r4, r3, r4
 8009098:	9b03      	ldr	r3, [sp, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	f6bf af30 	bge.w	8008f00 <_dtoa_r+0x718>
 80090a0:	9b00      	ldr	r3, [sp, #0]
 80090a2:	9a03      	ldr	r2, [sp, #12]
 80090a4:	1a9e      	subs	r6, r3, r2
 80090a6:	2300      	movs	r3, #0
 80090a8:	e72b      	b.n	8008f02 <_dtoa_r+0x71a>
 80090aa:	9b08      	ldr	r3, [sp, #32]
 80090ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80090ae:	9408      	str	r4, [sp, #32]
 80090b0:	1ae3      	subs	r3, r4, r3
 80090b2:	441a      	add	r2, r3
 80090b4:	9e00      	ldr	r6, [sp, #0]
 80090b6:	9b03      	ldr	r3, [sp, #12]
 80090b8:	920d      	str	r2, [sp, #52]	@ 0x34
 80090ba:	2400      	movs	r4, #0
 80090bc:	e721      	b.n	8008f02 <_dtoa_r+0x71a>
 80090be:	9c08      	ldr	r4, [sp, #32]
 80090c0:	9e00      	ldr	r6, [sp, #0]
 80090c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80090c4:	e728      	b.n	8008f18 <_dtoa_r+0x730>
 80090c6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80090ca:	e751      	b.n	8008f70 <_dtoa_r+0x788>
 80090cc:	9a08      	ldr	r2, [sp, #32]
 80090ce:	9902      	ldr	r1, [sp, #8]
 80090d0:	e750      	b.n	8008f74 <_dtoa_r+0x78c>
 80090d2:	f8cd 8008 	str.w	r8, [sp, #8]
 80090d6:	e751      	b.n	8008f7c <_dtoa_r+0x794>
 80090d8:	2300      	movs	r3, #0
 80090da:	e779      	b.n	8008fd0 <_dtoa_r+0x7e8>
 80090dc:	9b04      	ldr	r3, [sp, #16]
 80090de:	e777      	b.n	8008fd0 <_dtoa_r+0x7e8>
 80090e0:	2300      	movs	r3, #0
 80090e2:	9308      	str	r3, [sp, #32]
 80090e4:	e779      	b.n	8008fda <_dtoa_r+0x7f2>
 80090e6:	d093      	beq.n	8009010 <_dtoa_r+0x828>
 80090e8:	9a00      	ldr	r2, [sp, #0]
 80090ea:	331c      	adds	r3, #28
 80090ec:	441a      	add	r2, r3
 80090ee:	9200      	str	r2, [sp, #0]
 80090f0:	9a06      	ldr	r2, [sp, #24]
 80090f2:	441a      	add	r2, r3
 80090f4:	441e      	add	r6, r3
 80090f6:	9206      	str	r2, [sp, #24]
 80090f8:	e78a      	b.n	8009010 <_dtoa_r+0x828>
 80090fa:	4603      	mov	r3, r0
 80090fc:	e7f4      	b.n	80090e8 <_dtoa_r+0x900>
 80090fe:	9b03      	ldr	r3, [sp, #12]
 8009100:	2b00      	cmp	r3, #0
 8009102:	46b8      	mov	r8, r7
 8009104:	dc20      	bgt.n	8009148 <_dtoa_r+0x960>
 8009106:	469b      	mov	fp, r3
 8009108:	9b07      	ldr	r3, [sp, #28]
 800910a:	2b02      	cmp	r3, #2
 800910c:	dd1e      	ble.n	800914c <_dtoa_r+0x964>
 800910e:	f1bb 0f00 	cmp.w	fp, #0
 8009112:	f47f adb1 	bne.w	8008c78 <_dtoa_r+0x490>
 8009116:	4621      	mov	r1, r4
 8009118:	465b      	mov	r3, fp
 800911a:	2205      	movs	r2, #5
 800911c:	4648      	mov	r0, r9
 800911e:	f000 fde1 	bl	8009ce4 <__multadd>
 8009122:	4601      	mov	r1, r0
 8009124:	4604      	mov	r4, r0
 8009126:	9802      	ldr	r0, [sp, #8]
 8009128:	f001 f836 	bl	800a198 <__mcmp>
 800912c:	2800      	cmp	r0, #0
 800912e:	f77f ada3 	ble.w	8008c78 <_dtoa_r+0x490>
 8009132:	4656      	mov	r6, sl
 8009134:	2331      	movs	r3, #49	@ 0x31
 8009136:	f806 3b01 	strb.w	r3, [r6], #1
 800913a:	f108 0801 	add.w	r8, r8, #1
 800913e:	e59f      	b.n	8008c80 <_dtoa_r+0x498>
 8009140:	9c03      	ldr	r4, [sp, #12]
 8009142:	46b8      	mov	r8, r7
 8009144:	4625      	mov	r5, r4
 8009146:	e7f4      	b.n	8009132 <_dtoa_r+0x94a>
 8009148:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800914c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800914e:	2b00      	cmp	r3, #0
 8009150:	f000 8101 	beq.w	8009356 <_dtoa_r+0xb6e>
 8009154:	2e00      	cmp	r6, #0
 8009156:	dd05      	ble.n	8009164 <_dtoa_r+0x97c>
 8009158:	4629      	mov	r1, r5
 800915a:	4632      	mov	r2, r6
 800915c:	4648      	mov	r0, r9
 800915e:	f000 ffaf 	bl	800a0c0 <__lshift>
 8009162:	4605      	mov	r5, r0
 8009164:	9b08      	ldr	r3, [sp, #32]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d05c      	beq.n	8009224 <_dtoa_r+0xa3c>
 800916a:	6869      	ldr	r1, [r5, #4]
 800916c:	4648      	mov	r0, r9
 800916e:	f000 fd57 	bl	8009c20 <_Balloc>
 8009172:	4606      	mov	r6, r0
 8009174:	b928      	cbnz	r0, 8009182 <_dtoa_r+0x99a>
 8009176:	4b82      	ldr	r3, [pc, #520]	@ (8009380 <_dtoa_r+0xb98>)
 8009178:	4602      	mov	r2, r0
 800917a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800917e:	f7ff bb4a 	b.w	8008816 <_dtoa_r+0x2e>
 8009182:	692a      	ldr	r2, [r5, #16]
 8009184:	3202      	adds	r2, #2
 8009186:	0092      	lsls	r2, r2, #2
 8009188:	f105 010c 	add.w	r1, r5, #12
 800918c:	300c      	adds	r0, #12
 800918e:	f7ff fa6a 	bl	8008666 <memcpy>
 8009192:	2201      	movs	r2, #1
 8009194:	4631      	mov	r1, r6
 8009196:	4648      	mov	r0, r9
 8009198:	f000 ff92 	bl	800a0c0 <__lshift>
 800919c:	f10a 0301 	add.w	r3, sl, #1
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	eb0a 030b 	add.w	r3, sl, fp
 80091a6:	9308      	str	r3, [sp, #32]
 80091a8:	9b04      	ldr	r3, [sp, #16]
 80091aa:	f003 0301 	and.w	r3, r3, #1
 80091ae:	462f      	mov	r7, r5
 80091b0:	9306      	str	r3, [sp, #24]
 80091b2:	4605      	mov	r5, r0
 80091b4:	9b00      	ldr	r3, [sp, #0]
 80091b6:	9802      	ldr	r0, [sp, #8]
 80091b8:	4621      	mov	r1, r4
 80091ba:	f103 3bff 	add.w	fp, r3, #4294967295
 80091be:	f7ff fa89 	bl	80086d4 <quorem>
 80091c2:	4603      	mov	r3, r0
 80091c4:	3330      	adds	r3, #48	@ 0x30
 80091c6:	9003      	str	r0, [sp, #12]
 80091c8:	4639      	mov	r1, r7
 80091ca:	9802      	ldr	r0, [sp, #8]
 80091cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80091ce:	f000 ffe3 	bl	800a198 <__mcmp>
 80091d2:	462a      	mov	r2, r5
 80091d4:	9004      	str	r0, [sp, #16]
 80091d6:	4621      	mov	r1, r4
 80091d8:	4648      	mov	r0, r9
 80091da:	f000 fff9 	bl	800a1d0 <__mdiff>
 80091de:	68c2      	ldr	r2, [r0, #12]
 80091e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091e2:	4606      	mov	r6, r0
 80091e4:	bb02      	cbnz	r2, 8009228 <_dtoa_r+0xa40>
 80091e6:	4601      	mov	r1, r0
 80091e8:	9802      	ldr	r0, [sp, #8]
 80091ea:	f000 ffd5 	bl	800a198 <__mcmp>
 80091ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091f0:	4602      	mov	r2, r0
 80091f2:	4631      	mov	r1, r6
 80091f4:	4648      	mov	r0, r9
 80091f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80091f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80091fa:	f000 fd51 	bl	8009ca0 <_Bfree>
 80091fe:	9b07      	ldr	r3, [sp, #28]
 8009200:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009202:	9e00      	ldr	r6, [sp, #0]
 8009204:	ea42 0103 	orr.w	r1, r2, r3
 8009208:	9b06      	ldr	r3, [sp, #24]
 800920a:	4319      	orrs	r1, r3
 800920c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800920e:	d10d      	bne.n	800922c <_dtoa_r+0xa44>
 8009210:	2b39      	cmp	r3, #57	@ 0x39
 8009212:	d027      	beq.n	8009264 <_dtoa_r+0xa7c>
 8009214:	9a04      	ldr	r2, [sp, #16]
 8009216:	2a00      	cmp	r2, #0
 8009218:	dd01      	ble.n	800921e <_dtoa_r+0xa36>
 800921a:	9b03      	ldr	r3, [sp, #12]
 800921c:	3331      	adds	r3, #49	@ 0x31
 800921e:	f88b 3000 	strb.w	r3, [fp]
 8009222:	e52e      	b.n	8008c82 <_dtoa_r+0x49a>
 8009224:	4628      	mov	r0, r5
 8009226:	e7b9      	b.n	800919c <_dtoa_r+0x9b4>
 8009228:	2201      	movs	r2, #1
 800922a:	e7e2      	b.n	80091f2 <_dtoa_r+0xa0a>
 800922c:	9904      	ldr	r1, [sp, #16]
 800922e:	2900      	cmp	r1, #0
 8009230:	db04      	blt.n	800923c <_dtoa_r+0xa54>
 8009232:	9807      	ldr	r0, [sp, #28]
 8009234:	4301      	orrs	r1, r0
 8009236:	9806      	ldr	r0, [sp, #24]
 8009238:	4301      	orrs	r1, r0
 800923a:	d120      	bne.n	800927e <_dtoa_r+0xa96>
 800923c:	2a00      	cmp	r2, #0
 800923e:	ddee      	ble.n	800921e <_dtoa_r+0xa36>
 8009240:	9902      	ldr	r1, [sp, #8]
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	2201      	movs	r2, #1
 8009246:	4648      	mov	r0, r9
 8009248:	f000 ff3a 	bl	800a0c0 <__lshift>
 800924c:	4621      	mov	r1, r4
 800924e:	9002      	str	r0, [sp, #8]
 8009250:	f000 ffa2 	bl	800a198 <__mcmp>
 8009254:	2800      	cmp	r0, #0
 8009256:	9b00      	ldr	r3, [sp, #0]
 8009258:	dc02      	bgt.n	8009260 <_dtoa_r+0xa78>
 800925a:	d1e0      	bne.n	800921e <_dtoa_r+0xa36>
 800925c:	07da      	lsls	r2, r3, #31
 800925e:	d5de      	bpl.n	800921e <_dtoa_r+0xa36>
 8009260:	2b39      	cmp	r3, #57	@ 0x39
 8009262:	d1da      	bne.n	800921a <_dtoa_r+0xa32>
 8009264:	2339      	movs	r3, #57	@ 0x39
 8009266:	f88b 3000 	strb.w	r3, [fp]
 800926a:	4633      	mov	r3, r6
 800926c:	461e      	mov	r6, r3
 800926e:	3b01      	subs	r3, #1
 8009270:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009274:	2a39      	cmp	r2, #57	@ 0x39
 8009276:	d04e      	beq.n	8009316 <_dtoa_r+0xb2e>
 8009278:	3201      	adds	r2, #1
 800927a:	701a      	strb	r2, [r3, #0]
 800927c:	e501      	b.n	8008c82 <_dtoa_r+0x49a>
 800927e:	2a00      	cmp	r2, #0
 8009280:	dd03      	ble.n	800928a <_dtoa_r+0xaa2>
 8009282:	2b39      	cmp	r3, #57	@ 0x39
 8009284:	d0ee      	beq.n	8009264 <_dtoa_r+0xa7c>
 8009286:	3301      	adds	r3, #1
 8009288:	e7c9      	b.n	800921e <_dtoa_r+0xa36>
 800928a:	9a00      	ldr	r2, [sp, #0]
 800928c:	9908      	ldr	r1, [sp, #32]
 800928e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009292:	428a      	cmp	r2, r1
 8009294:	d028      	beq.n	80092e8 <_dtoa_r+0xb00>
 8009296:	9902      	ldr	r1, [sp, #8]
 8009298:	2300      	movs	r3, #0
 800929a:	220a      	movs	r2, #10
 800929c:	4648      	mov	r0, r9
 800929e:	f000 fd21 	bl	8009ce4 <__multadd>
 80092a2:	42af      	cmp	r7, r5
 80092a4:	9002      	str	r0, [sp, #8]
 80092a6:	f04f 0300 	mov.w	r3, #0
 80092aa:	f04f 020a 	mov.w	r2, #10
 80092ae:	4639      	mov	r1, r7
 80092b0:	4648      	mov	r0, r9
 80092b2:	d107      	bne.n	80092c4 <_dtoa_r+0xadc>
 80092b4:	f000 fd16 	bl	8009ce4 <__multadd>
 80092b8:	4607      	mov	r7, r0
 80092ba:	4605      	mov	r5, r0
 80092bc:	9b00      	ldr	r3, [sp, #0]
 80092be:	3301      	adds	r3, #1
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	e777      	b.n	80091b4 <_dtoa_r+0x9cc>
 80092c4:	f000 fd0e 	bl	8009ce4 <__multadd>
 80092c8:	4629      	mov	r1, r5
 80092ca:	4607      	mov	r7, r0
 80092cc:	2300      	movs	r3, #0
 80092ce:	220a      	movs	r2, #10
 80092d0:	4648      	mov	r0, r9
 80092d2:	f000 fd07 	bl	8009ce4 <__multadd>
 80092d6:	4605      	mov	r5, r0
 80092d8:	e7f0      	b.n	80092bc <_dtoa_r+0xad4>
 80092da:	f1bb 0f00 	cmp.w	fp, #0
 80092de:	bfcc      	ite	gt
 80092e0:	465e      	movgt	r6, fp
 80092e2:	2601      	movle	r6, #1
 80092e4:	4456      	add	r6, sl
 80092e6:	2700      	movs	r7, #0
 80092e8:	9902      	ldr	r1, [sp, #8]
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	2201      	movs	r2, #1
 80092ee:	4648      	mov	r0, r9
 80092f0:	f000 fee6 	bl	800a0c0 <__lshift>
 80092f4:	4621      	mov	r1, r4
 80092f6:	9002      	str	r0, [sp, #8]
 80092f8:	f000 ff4e 	bl	800a198 <__mcmp>
 80092fc:	2800      	cmp	r0, #0
 80092fe:	dcb4      	bgt.n	800926a <_dtoa_r+0xa82>
 8009300:	d102      	bne.n	8009308 <_dtoa_r+0xb20>
 8009302:	9b00      	ldr	r3, [sp, #0]
 8009304:	07db      	lsls	r3, r3, #31
 8009306:	d4b0      	bmi.n	800926a <_dtoa_r+0xa82>
 8009308:	4633      	mov	r3, r6
 800930a:	461e      	mov	r6, r3
 800930c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009310:	2a30      	cmp	r2, #48	@ 0x30
 8009312:	d0fa      	beq.n	800930a <_dtoa_r+0xb22>
 8009314:	e4b5      	b.n	8008c82 <_dtoa_r+0x49a>
 8009316:	459a      	cmp	sl, r3
 8009318:	d1a8      	bne.n	800926c <_dtoa_r+0xa84>
 800931a:	2331      	movs	r3, #49	@ 0x31
 800931c:	f108 0801 	add.w	r8, r8, #1
 8009320:	f88a 3000 	strb.w	r3, [sl]
 8009324:	e4ad      	b.n	8008c82 <_dtoa_r+0x49a>
 8009326:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009328:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009384 <_dtoa_r+0xb9c>
 800932c:	b11b      	cbz	r3, 8009336 <_dtoa_r+0xb4e>
 800932e:	f10a 0308 	add.w	r3, sl, #8
 8009332:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	4650      	mov	r0, sl
 8009338:	b017      	add	sp, #92	@ 0x5c
 800933a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933e:	9b07      	ldr	r3, [sp, #28]
 8009340:	2b01      	cmp	r3, #1
 8009342:	f77f ae2e 	ble.w	8008fa2 <_dtoa_r+0x7ba>
 8009346:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009348:	9308      	str	r3, [sp, #32]
 800934a:	2001      	movs	r0, #1
 800934c:	e64d      	b.n	8008fea <_dtoa_r+0x802>
 800934e:	f1bb 0f00 	cmp.w	fp, #0
 8009352:	f77f aed9 	ble.w	8009108 <_dtoa_r+0x920>
 8009356:	4656      	mov	r6, sl
 8009358:	9802      	ldr	r0, [sp, #8]
 800935a:	4621      	mov	r1, r4
 800935c:	f7ff f9ba 	bl	80086d4 <quorem>
 8009360:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009364:	f806 3b01 	strb.w	r3, [r6], #1
 8009368:	eba6 020a 	sub.w	r2, r6, sl
 800936c:	4593      	cmp	fp, r2
 800936e:	ddb4      	ble.n	80092da <_dtoa_r+0xaf2>
 8009370:	9902      	ldr	r1, [sp, #8]
 8009372:	2300      	movs	r3, #0
 8009374:	220a      	movs	r2, #10
 8009376:	4648      	mov	r0, r9
 8009378:	f000 fcb4 	bl	8009ce4 <__multadd>
 800937c:	9002      	str	r0, [sp, #8]
 800937e:	e7eb      	b.n	8009358 <_dtoa_r+0xb70>
 8009380:	0800c318 	.word	0x0800c318
 8009384:	0800c2b3 	.word	0x0800c2b3

08009388 <_free_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4605      	mov	r5, r0
 800938c:	2900      	cmp	r1, #0
 800938e:	d041      	beq.n	8009414 <_free_r+0x8c>
 8009390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009394:	1f0c      	subs	r4, r1, #4
 8009396:	2b00      	cmp	r3, #0
 8009398:	bfb8      	it	lt
 800939a:	18e4      	addlt	r4, r4, r3
 800939c:	f000 fc34 	bl	8009c08 <__malloc_lock>
 80093a0:	4a1d      	ldr	r2, [pc, #116]	@ (8009418 <_free_r+0x90>)
 80093a2:	6813      	ldr	r3, [r2, #0]
 80093a4:	b933      	cbnz	r3, 80093b4 <_free_r+0x2c>
 80093a6:	6063      	str	r3, [r4, #4]
 80093a8:	6014      	str	r4, [r2, #0]
 80093aa:	4628      	mov	r0, r5
 80093ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093b0:	f000 bc30 	b.w	8009c14 <__malloc_unlock>
 80093b4:	42a3      	cmp	r3, r4
 80093b6:	d908      	bls.n	80093ca <_free_r+0x42>
 80093b8:	6820      	ldr	r0, [r4, #0]
 80093ba:	1821      	adds	r1, r4, r0
 80093bc:	428b      	cmp	r3, r1
 80093be:	bf01      	itttt	eq
 80093c0:	6819      	ldreq	r1, [r3, #0]
 80093c2:	685b      	ldreq	r3, [r3, #4]
 80093c4:	1809      	addeq	r1, r1, r0
 80093c6:	6021      	streq	r1, [r4, #0]
 80093c8:	e7ed      	b.n	80093a6 <_free_r+0x1e>
 80093ca:	461a      	mov	r2, r3
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	b10b      	cbz	r3, 80093d4 <_free_r+0x4c>
 80093d0:	42a3      	cmp	r3, r4
 80093d2:	d9fa      	bls.n	80093ca <_free_r+0x42>
 80093d4:	6811      	ldr	r1, [r2, #0]
 80093d6:	1850      	adds	r0, r2, r1
 80093d8:	42a0      	cmp	r0, r4
 80093da:	d10b      	bne.n	80093f4 <_free_r+0x6c>
 80093dc:	6820      	ldr	r0, [r4, #0]
 80093de:	4401      	add	r1, r0
 80093e0:	1850      	adds	r0, r2, r1
 80093e2:	4283      	cmp	r3, r0
 80093e4:	6011      	str	r1, [r2, #0]
 80093e6:	d1e0      	bne.n	80093aa <_free_r+0x22>
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	6053      	str	r3, [r2, #4]
 80093ee:	4408      	add	r0, r1
 80093f0:	6010      	str	r0, [r2, #0]
 80093f2:	e7da      	b.n	80093aa <_free_r+0x22>
 80093f4:	d902      	bls.n	80093fc <_free_r+0x74>
 80093f6:	230c      	movs	r3, #12
 80093f8:	602b      	str	r3, [r5, #0]
 80093fa:	e7d6      	b.n	80093aa <_free_r+0x22>
 80093fc:	6820      	ldr	r0, [r4, #0]
 80093fe:	1821      	adds	r1, r4, r0
 8009400:	428b      	cmp	r3, r1
 8009402:	bf04      	itt	eq
 8009404:	6819      	ldreq	r1, [r3, #0]
 8009406:	685b      	ldreq	r3, [r3, #4]
 8009408:	6063      	str	r3, [r4, #4]
 800940a:	bf04      	itt	eq
 800940c:	1809      	addeq	r1, r1, r0
 800940e:	6021      	streq	r1, [r4, #0]
 8009410:	6054      	str	r4, [r2, #4]
 8009412:	e7ca      	b.n	80093aa <_free_r+0x22>
 8009414:	bd38      	pop	{r3, r4, r5, pc}
 8009416:	bf00      	nop
 8009418:	20000dd0 	.word	0x20000dd0

0800941c <rshift>:
 800941c:	6903      	ldr	r3, [r0, #16]
 800941e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009422:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009426:	ea4f 1261 	mov.w	r2, r1, asr #5
 800942a:	f100 0414 	add.w	r4, r0, #20
 800942e:	dd45      	ble.n	80094bc <rshift+0xa0>
 8009430:	f011 011f 	ands.w	r1, r1, #31
 8009434:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009438:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800943c:	d10c      	bne.n	8009458 <rshift+0x3c>
 800943e:	f100 0710 	add.w	r7, r0, #16
 8009442:	4629      	mov	r1, r5
 8009444:	42b1      	cmp	r1, r6
 8009446:	d334      	bcc.n	80094b2 <rshift+0x96>
 8009448:	1a9b      	subs	r3, r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	1eea      	subs	r2, r5, #3
 800944e:	4296      	cmp	r6, r2
 8009450:	bf38      	it	cc
 8009452:	2300      	movcc	r3, #0
 8009454:	4423      	add	r3, r4
 8009456:	e015      	b.n	8009484 <rshift+0x68>
 8009458:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800945c:	f1c1 0820 	rsb	r8, r1, #32
 8009460:	40cf      	lsrs	r7, r1
 8009462:	f105 0e04 	add.w	lr, r5, #4
 8009466:	46a1      	mov	r9, r4
 8009468:	4576      	cmp	r6, lr
 800946a:	46f4      	mov	ip, lr
 800946c:	d815      	bhi.n	800949a <rshift+0x7e>
 800946e:	1a9a      	subs	r2, r3, r2
 8009470:	0092      	lsls	r2, r2, #2
 8009472:	3a04      	subs	r2, #4
 8009474:	3501      	adds	r5, #1
 8009476:	42ae      	cmp	r6, r5
 8009478:	bf38      	it	cc
 800947a:	2200      	movcc	r2, #0
 800947c:	18a3      	adds	r3, r4, r2
 800947e:	50a7      	str	r7, [r4, r2]
 8009480:	b107      	cbz	r7, 8009484 <rshift+0x68>
 8009482:	3304      	adds	r3, #4
 8009484:	1b1a      	subs	r2, r3, r4
 8009486:	42a3      	cmp	r3, r4
 8009488:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800948c:	bf08      	it	eq
 800948e:	2300      	moveq	r3, #0
 8009490:	6102      	str	r2, [r0, #16]
 8009492:	bf08      	it	eq
 8009494:	6143      	streq	r3, [r0, #20]
 8009496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800949a:	f8dc c000 	ldr.w	ip, [ip]
 800949e:	fa0c fc08 	lsl.w	ip, ip, r8
 80094a2:	ea4c 0707 	orr.w	r7, ip, r7
 80094a6:	f849 7b04 	str.w	r7, [r9], #4
 80094aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80094ae:	40cf      	lsrs	r7, r1
 80094b0:	e7da      	b.n	8009468 <rshift+0x4c>
 80094b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80094b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80094ba:	e7c3      	b.n	8009444 <rshift+0x28>
 80094bc:	4623      	mov	r3, r4
 80094be:	e7e1      	b.n	8009484 <rshift+0x68>

080094c0 <__hexdig_fun>:
 80094c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80094c4:	2b09      	cmp	r3, #9
 80094c6:	d802      	bhi.n	80094ce <__hexdig_fun+0xe>
 80094c8:	3820      	subs	r0, #32
 80094ca:	b2c0      	uxtb	r0, r0
 80094cc:	4770      	bx	lr
 80094ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80094d2:	2b05      	cmp	r3, #5
 80094d4:	d801      	bhi.n	80094da <__hexdig_fun+0x1a>
 80094d6:	3847      	subs	r0, #71	@ 0x47
 80094d8:	e7f7      	b.n	80094ca <__hexdig_fun+0xa>
 80094da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80094de:	2b05      	cmp	r3, #5
 80094e0:	d801      	bhi.n	80094e6 <__hexdig_fun+0x26>
 80094e2:	3827      	subs	r0, #39	@ 0x27
 80094e4:	e7f1      	b.n	80094ca <__hexdig_fun+0xa>
 80094e6:	2000      	movs	r0, #0
 80094e8:	4770      	bx	lr
	...

080094ec <__gethex>:
 80094ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f0:	b085      	sub	sp, #20
 80094f2:	468a      	mov	sl, r1
 80094f4:	9302      	str	r3, [sp, #8]
 80094f6:	680b      	ldr	r3, [r1, #0]
 80094f8:	9001      	str	r0, [sp, #4]
 80094fa:	4690      	mov	r8, r2
 80094fc:	1c9c      	adds	r4, r3, #2
 80094fe:	46a1      	mov	r9, r4
 8009500:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009504:	2830      	cmp	r0, #48	@ 0x30
 8009506:	d0fa      	beq.n	80094fe <__gethex+0x12>
 8009508:	eba9 0303 	sub.w	r3, r9, r3
 800950c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009510:	f7ff ffd6 	bl	80094c0 <__hexdig_fun>
 8009514:	4605      	mov	r5, r0
 8009516:	2800      	cmp	r0, #0
 8009518:	d168      	bne.n	80095ec <__gethex+0x100>
 800951a:	49a0      	ldr	r1, [pc, #640]	@ (800979c <__gethex+0x2b0>)
 800951c:	2201      	movs	r2, #1
 800951e:	4648      	mov	r0, r9
 8009520:	f7fe ff9d 	bl	800845e <strncmp>
 8009524:	4607      	mov	r7, r0
 8009526:	2800      	cmp	r0, #0
 8009528:	d167      	bne.n	80095fa <__gethex+0x10e>
 800952a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800952e:	4626      	mov	r6, r4
 8009530:	f7ff ffc6 	bl	80094c0 <__hexdig_fun>
 8009534:	2800      	cmp	r0, #0
 8009536:	d062      	beq.n	80095fe <__gethex+0x112>
 8009538:	4623      	mov	r3, r4
 800953a:	7818      	ldrb	r0, [r3, #0]
 800953c:	2830      	cmp	r0, #48	@ 0x30
 800953e:	4699      	mov	r9, r3
 8009540:	f103 0301 	add.w	r3, r3, #1
 8009544:	d0f9      	beq.n	800953a <__gethex+0x4e>
 8009546:	f7ff ffbb 	bl	80094c0 <__hexdig_fun>
 800954a:	fab0 f580 	clz	r5, r0
 800954e:	096d      	lsrs	r5, r5, #5
 8009550:	f04f 0b01 	mov.w	fp, #1
 8009554:	464a      	mov	r2, r9
 8009556:	4616      	mov	r6, r2
 8009558:	3201      	adds	r2, #1
 800955a:	7830      	ldrb	r0, [r6, #0]
 800955c:	f7ff ffb0 	bl	80094c0 <__hexdig_fun>
 8009560:	2800      	cmp	r0, #0
 8009562:	d1f8      	bne.n	8009556 <__gethex+0x6a>
 8009564:	498d      	ldr	r1, [pc, #564]	@ (800979c <__gethex+0x2b0>)
 8009566:	2201      	movs	r2, #1
 8009568:	4630      	mov	r0, r6
 800956a:	f7fe ff78 	bl	800845e <strncmp>
 800956e:	2800      	cmp	r0, #0
 8009570:	d13f      	bne.n	80095f2 <__gethex+0x106>
 8009572:	b944      	cbnz	r4, 8009586 <__gethex+0x9a>
 8009574:	1c74      	adds	r4, r6, #1
 8009576:	4622      	mov	r2, r4
 8009578:	4616      	mov	r6, r2
 800957a:	3201      	adds	r2, #1
 800957c:	7830      	ldrb	r0, [r6, #0]
 800957e:	f7ff ff9f 	bl	80094c0 <__hexdig_fun>
 8009582:	2800      	cmp	r0, #0
 8009584:	d1f8      	bne.n	8009578 <__gethex+0x8c>
 8009586:	1ba4      	subs	r4, r4, r6
 8009588:	00a7      	lsls	r7, r4, #2
 800958a:	7833      	ldrb	r3, [r6, #0]
 800958c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009590:	2b50      	cmp	r3, #80	@ 0x50
 8009592:	d13e      	bne.n	8009612 <__gethex+0x126>
 8009594:	7873      	ldrb	r3, [r6, #1]
 8009596:	2b2b      	cmp	r3, #43	@ 0x2b
 8009598:	d033      	beq.n	8009602 <__gethex+0x116>
 800959a:	2b2d      	cmp	r3, #45	@ 0x2d
 800959c:	d034      	beq.n	8009608 <__gethex+0x11c>
 800959e:	1c71      	adds	r1, r6, #1
 80095a0:	2400      	movs	r4, #0
 80095a2:	7808      	ldrb	r0, [r1, #0]
 80095a4:	f7ff ff8c 	bl	80094c0 <__hexdig_fun>
 80095a8:	1e43      	subs	r3, r0, #1
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	2b18      	cmp	r3, #24
 80095ae:	d830      	bhi.n	8009612 <__gethex+0x126>
 80095b0:	f1a0 0210 	sub.w	r2, r0, #16
 80095b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80095b8:	f7ff ff82 	bl	80094c0 <__hexdig_fun>
 80095bc:	f100 3cff 	add.w	ip, r0, #4294967295
 80095c0:	fa5f fc8c 	uxtb.w	ip, ip
 80095c4:	f1bc 0f18 	cmp.w	ip, #24
 80095c8:	f04f 030a 	mov.w	r3, #10
 80095cc:	d91e      	bls.n	800960c <__gethex+0x120>
 80095ce:	b104      	cbz	r4, 80095d2 <__gethex+0xe6>
 80095d0:	4252      	negs	r2, r2
 80095d2:	4417      	add	r7, r2
 80095d4:	f8ca 1000 	str.w	r1, [sl]
 80095d8:	b1ed      	cbz	r5, 8009616 <__gethex+0x12a>
 80095da:	f1bb 0f00 	cmp.w	fp, #0
 80095de:	bf0c      	ite	eq
 80095e0:	2506      	moveq	r5, #6
 80095e2:	2500      	movne	r5, #0
 80095e4:	4628      	mov	r0, r5
 80095e6:	b005      	add	sp, #20
 80095e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ec:	2500      	movs	r5, #0
 80095ee:	462c      	mov	r4, r5
 80095f0:	e7b0      	b.n	8009554 <__gethex+0x68>
 80095f2:	2c00      	cmp	r4, #0
 80095f4:	d1c7      	bne.n	8009586 <__gethex+0x9a>
 80095f6:	4627      	mov	r7, r4
 80095f8:	e7c7      	b.n	800958a <__gethex+0x9e>
 80095fa:	464e      	mov	r6, r9
 80095fc:	462f      	mov	r7, r5
 80095fe:	2501      	movs	r5, #1
 8009600:	e7c3      	b.n	800958a <__gethex+0x9e>
 8009602:	2400      	movs	r4, #0
 8009604:	1cb1      	adds	r1, r6, #2
 8009606:	e7cc      	b.n	80095a2 <__gethex+0xb6>
 8009608:	2401      	movs	r4, #1
 800960a:	e7fb      	b.n	8009604 <__gethex+0x118>
 800960c:	fb03 0002 	mla	r0, r3, r2, r0
 8009610:	e7ce      	b.n	80095b0 <__gethex+0xc4>
 8009612:	4631      	mov	r1, r6
 8009614:	e7de      	b.n	80095d4 <__gethex+0xe8>
 8009616:	eba6 0309 	sub.w	r3, r6, r9
 800961a:	3b01      	subs	r3, #1
 800961c:	4629      	mov	r1, r5
 800961e:	2b07      	cmp	r3, #7
 8009620:	dc0a      	bgt.n	8009638 <__gethex+0x14c>
 8009622:	9801      	ldr	r0, [sp, #4]
 8009624:	f000 fafc 	bl	8009c20 <_Balloc>
 8009628:	4604      	mov	r4, r0
 800962a:	b940      	cbnz	r0, 800963e <__gethex+0x152>
 800962c:	4b5c      	ldr	r3, [pc, #368]	@ (80097a0 <__gethex+0x2b4>)
 800962e:	4602      	mov	r2, r0
 8009630:	21e4      	movs	r1, #228	@ 0xe4
 8009632:	485c      	ldr	r0, [pc, #368]	@ (80097a4 <__gethex+0x2b8>)
 8009634:	f7ff f830 	bl	8008698 <__assert_func>
 8009638:	3101      	adds	r1, #1
 800963a:	105b      	asrs	r3, r3, #1
 800963c:	e7ef      	b.n	800961e <__gethex+0x132>
 800963e:	f100 0a14 	add.w	sl, r0, #20
 8009642:	2300      	movs	r3, #0
 8009644:	4655      	mov	r5, sl
 8009646:	469b      	mov	fp, r3
 8009648:	45b1      	cmp	r9, r6
 800964a:	d337      	bcc.n	80096bc <__gethex+0x1d0>
 800964c:	f845 bb04 	str.w	fp, [r5], #4
 8009650:	eba5 050a 	sub.w	r5, r5, sl
 8009654:	10ad      	asrs	r5, r5, #2
 8009656:	6125      	str	r5, [r4, #16]
 8009658:	4658      	mov	r0, fp
 800965a:	f000 fbd3 	bl	8009e04 <__hi0bits>
 800965e:	016d      	lsls	r5, r5, #5
 8009660:	f8d8 6000 	ldr.w	r6, [r8]
 8009664:	1a2d      	subs	r5, r5, r0
 8009666:	42b5      	cmp	r5, r6
 8009668:	dd54      	ble.n	8009714 <__gethex+0x228>
 800966a:	1bad      	subs	r5, r5, r6
 800966c:	4629      	mov	r1, r5
 800966e:	4620      	mov	r0, r4
 8009670:	f000 ff5f 	bl	800a532 <__any_on>
 8009674:	4681      	mov	r9, r0
 8009676:	b178      	cbz	r0, 8009698 <__gethex+0x1ac>
 8009678:	1e6b      	subs	r3, r5, #1
 800967a:	1159      	asrs	r1, r3, #5
 800967c:	f003 021f 	and.w	r2, r3, #31
 8009680:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009684:	f04f 0901 	mov.w	r9, #1
 8009688:	fa09 f202 	lsl.w	r2, r9, r2
 800968c:	420a      	tst	r2, r1
 800968e:	d003      	beq.n	8009698 <__gethex+0x1ac>
 8009690:	454b      	cmp	r3, r9
 8009692:	dc36      	bgt.n	8009702 <__gethex+0x216>
 8009694:	f04f 0902 	mov.w	r9, #2
 8009698:	4629      	mov	r1, r5
 800969a:	4620      	mov	r0, r4
 800969c:	f7ff febe 	bl	800941c <rshift>
 80096a0:	442f      	add	r7, r5
 80096a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096a6:	42bb      	cmp	r3, r7
 80096a8:	da42      	bge.n	8009730 <__gethex+0x244>
 80096aa:	9801      	ldr	r0, [sp, #4]
 80096ac:	4621      	mov	r1, r4
 80096ae:	f000 faf7 	bl	8009ca0 <_Bfree>
 80096b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096b4:	2300      	movs	r3, #0
 80096b6:	6013      	str	r3, [r2, #0]
 80096b8:	25a3      	movs	r5, #163	@ 0xa3
 80096ba:	e793      	b.n	80095e4 <__gethex+0xf8>
 80096bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80096c0:	2a2e      	cmp	r2, #46	@ 0x2e
 80096c2:	d012      	beq.n	80096ea <__gethex+0x1fe>
 80096c4:	2b20      	cmp	r3, #32
 80096c6:	d104      	bne.n	80096d2 <__gethex+0x1e6>
 80096c8:	f845 bb04 	str.w	fp, [r5], #4
 80096cc:	f04f 0b00 	mov.w	fp, #0
 80096d0:	465b      	mov	r3, fp
 80096d2:	7830      	ldrb	r0, [r6, #0]
 80096d4:	9303      	str	r3, [sp, #12]
 80096d6:	f7ff fef3 	bl	80094c0 <__hexdig_fun>
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	f000 000f 	and.w	r0, r0, #15
 80096e0:	4098      	lsls	r0, r3
 80096e2:	ea4b 0b00 	orr.w	fp, fp, r0
 80096e6:	3304      	adds	r3, #4
 80096e8:	e7ae      	b.n	8009648 <__gethex+0x15c>
 80096ea:	45b1      	cmp	r9, r6
 80096ec:	d8ea      	bhi.n	80096c4 <__gethex+0x1d8>
 80096ee:	492b      	ldr	r1, [pc, #172]	@ (800979c <__gethex+0x2b0>)
 80096f0:	9303      	str	r3, [sp, #12]
 80096f2:	2201      	movs	r2, #1
 80096f4:	4630      	mov	r0, r6
 80096f6:	f7fe feb2 	bl	800845e <strncmp>
 80096fa:	9b03      	ldr	r3, [sp, #12]
 80096fc:	2800      	cmp	r0, #0
 80096fe:	d1e1      	bne.n	80096c4 <__gethex+0x1d8>
 8009700:	e7a2      	b.n	8009648 <__gethex+0x15c>
 8009702:	1ea9      	subs	r1, r5, #2
 8009704:	4620      	mov	r0, r4
 8009706:	f000 ff14 	bl	800a532 <__any_on>
 800970a:	2800      	cmp	r0, #0
 800970c:	d0c2      	beq.n	8009694 <__gethex+0x1a8>
 800970e:	f04f 0903 	mov.w	r9, #3
 8009712:	e7c1      	b.n	8009698 <__gethex+0x1ac>
 8009714:	da09      	bge.n	800972a <__gethex+0x23e>
 8009716:	1b75      	subs	r5, r6, r5
 8009718:	4621      	mov	r1, r4
 800971a:	9801      	ldr	r0, [sp, #4]
 800971c:	462a      	mov	r2, r5
 800971e:	f000 fccf 	bl	800a0c0 <__lshift>
 8009722:	1b7f      	subs	r7, r7, r5
 8009724:	4604      	mov	r4, r0
 8009726:	f100 0a14 	add.w	sl, r0, #20
 800972a:	f04f 0900 	mov.w	r9, #0
 800972e:	e7b8      	b.n	80096a2 <__gethex+0x1b6>
 8009730:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009734:	42bd      	cmp	r5, r7
 8009736:	dd6f      	ble.n	8009818 <__gethex+0x32c>
 8009738:	1bed      	subs	r5, r5, r7
 800973a:	42ae      	cmp	r6, r5
 800973c:	dc34      	bgt.n	80097a8 <__gethex+0x2bc>
 800973e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009742:	2b02      	cmp	r3, #2
 8009744:	d022      	beq.n	800978c <__gethex+0x2a0>
 8009746:	2b03      	cmp	r3, #3
 8009748:	d024      	beq.n	8009794 <__gethex+0x2a8>
 800974a:	2b01      	cmp	r3, #1
 800974c:	d115      	bne.n	800977a <__gethex+0x28e>
 800974e:	42ae      	cmp	r6, r5
 8009750:	d113      	bne.n	800977a <__gethex+0x28e>
 8009752:	2e01      	cmp	r6, #1
 8009754:	d10b      	bne.n	800976e <__gethex+0x282>
 8009756:	9a02      	ldr	r2, [sp, #8]
 8009758:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	2301      	movs	r3, #1
 8009760:	6123      	str	r3, [r4, #16]
 8009762:	f8ca 3000 	str.w	r3, [sl]
 8009766:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009768:	2562      	movs	r5, #98	@ 0x62
 800976a:	601c      	str	r4, [r3, #0]
 800976c:	e73a      	b.n	80095e4 <__gethex+0xf8>
 800976e:	1e71      	subs	r1, r6, #1
 8009770:	4620      	mov	r0, r4
 8009772:	f000 fede 	bl	800a532 <__any_on>
 8009776:	2800      	cmp	r0, #0
 8009778:	d1ed      	bne.n	8009756 <__gethex+0x26a>
 800977a:	9801      	ldr	r0, [sp, #4]
 800977c:	4621      	mov	r1, r4
 800977e:	f000 fa8f 	bl	8009ca0 <_Bfree>
 8009782:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009784:	2300      	movs	r3, #0
 8009786:	6013      	str	r3, [r2, #0]
 8009788:	2550      	movs	r5, #80	@ 0x50
 800978a:	e72b      	b.n	80095e4 <__gethex+0xf8>
 800978c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1f3      	bne.n	800977a <__gethex+0x28e>
 8009792:	e7e0      	b.n	8009756 <__gethex+0x26a>
 8009794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1dd      	bne.n	8009756 <__gethex+0x26a>
 800979a:	e7ee      	b.n	800977a <__gethex+0x28e>
 800979c:	0800c1c8 	.word	0x0800c1c8
 80097a0:	0800c318 	.word	0x0800c318
 80097a4:	0800c329 	.word	0x0800c329
 80097a8:	1e6f      	subs	r7, r5, #1
 80097aa:	f1b9 0f00 	cmp.w	r9, #0
 80097ae:	d130      	bne.n	8009812 <__gethex+0x326>
 80097b0:	b127      	cbz	r7, 80097bc <__gethex+0x2d0>
 80097b2:	4639      	mov	r1, r7
 80097b4:	4620      	mov	r0, r4
 80097b6:	f000 febc 	bl	800a532 <__any_on>
 80097ba:	4681      	mov	r9, r0
 80097bc:	117a      	asrs	r2, r7, #5
 80097be:	2301      	movs	r3, #1
 80097c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80097c4:	f007 071f 	and.w	r7, r7, #31
 80097c8:	40bb      	lsls	r3, r7
 80097ca:	4213      	tst	r3, r2
 80097cc:	4629      	mov	r1, r5
 80097ce:	4620      	mov	r0, r4
 80097d0:	bf18      	it	ne
 80097d2:	f049 0902 	orrne.w	r9, r9, #2
 80097d6:	f7ff fe21 	bl	800941c <rshift>
 80097da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80097de:	1b76      	subs	r6, r6, r5
 80097e0:	2502      	movs	r5, #2
 80097e2:	f1b9 0f00 	cmp.w	r9, #0
 80097e6:	d047      	beq.n	8009878 <__gethex+0x38c>
 80097e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d015      	beq.n	800981c <__gethex+0x330>
 80097f0:	2b03      	cmp	r3, #3
 80097f2:	d017      	beq.n	8009824 <__gethex+0x338>
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d109      	bne.n	800980c <__gethex+0x320>
 80097f8:	f019 0f02 	tst.w	r9, #2
 80097fc:	d006      	beq.n	800980c <__gethex+0x320>
 80097fe:	f8da 3000 	ldr.w	r3, [sl]
 8009802:	ea49 0903 	orr.w	r9, r9, r3
 8009806:	f019 0f01 	tst.w	r9, #1
 800980a:	d10e      	bne.n	800982a <__gethex+0x33e>
 800980c:	f045 0510 	orr.w	r5, r5, #16
 8009810:	e032      	b.n	8009878 <__gethex+0x38c>
 8009812:	f04f 0901 	mov.w	r9, #1
 8009816:	e7d1      	b.n	80097bc <__gethex+0x2d0>
 8009818:	2501      	movs	r5, #1
 800981a:	e7e2      	b.n	80097e2 <__gethex+0x2f6>
 800981c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800981e:	f1c3 0301 	rsb	r3, r3, #1
 8009822:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009826:	2b00      	cmp	r3, #0
 8009828:	d0f0      	beq.n	800980c <__gethex+0x320>
 800982a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800982e:	f104 0314 	add.w	r3, r4, #20
 8009832:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009836:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800983a:	f04f 0c00 	mov.w	ip, #0
 800983e:	4618      	mov	r0, r3
 8009840:	f853 2b04 	ldr.w	r2, [r3], #4
 8009844:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009848:	d01b      	beq.n	8009882 <__gethex+0x396>
 800984a:	3201      	adds	r2, #1
 800984c:	6002      	str	r2, [r0, #0]
 800984e:	2d02      	cmp	r5, #2
 8009850:	f104 0314 	add.w	r3, r4, #20
 8009854:	d13c      	bne.n	80098d0 <__gethex+0x3e4>
 8009856:	f8d8 2000 	ldr.w	r2, [r8]
 800985a:	3a01      	subs	r2, #1
 800985c:	42b2      	cmp	r2, r6
 800985e:	d109      	bne.n	8009874 <__gethex+0x388>
 8009860:	1171      	asrs	r1, r6, #5
 8009862:	2201      	movs	r2, #1
 8009864:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009868:	f006 061f 	and.w	r6, r6, #31
 800986c:	fa02 f606 	lsl.w	r6, r2, r6
 8009870:	421e      	tst	r6, r3
 8009872:	d13a      	bne.n	80098ea <__gethex+0x3fe>
 8009874:	f045 0520 	orr.w	r5, r5, #32
 8009878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800987a:	601c      	str	r4, [r3, #0]
 800987c:	9b02      	ldr	r3, [sp, #8]
 800987e:	601f      	str	r7, [r3, #0]
 8009880:	e6b0      	b.n	80095e4 <__gethex+0xf8>
 8009882:	4299      	cmp	r1, r3
 8009884:	f843 cc04 	str.w	ip, [r3, #-4]
 8009888:	d8d9      	bhi.n	800983e <__gethex+0x352>
 800988a:	68a3      	ldr	r3, [r4, #8]
 800988c:	459b      	cmp	fp, r3
 800988e:	db17      	blt.n	80098c0 <__gethex+0x3d4>
 8009890:	6861      	ldr	r1, [r4, #4]
 8009892:	9801      	ldr	r0, [sp, #4]
 8009894:	3101      	adds	r1, #1
 8009896:	f000 f9c3 	bl	8009c20 <_Balloc>
 800989a:	4681      	mov	r9, r0
 800989c:	b918      	cbnz	r0, 80098a6 <__gethex+0x3ba>
 800989e:	4b1a      	ldr	r3, [pc, #104]	@ (8009908 <__gethex+0x41c>)
 80098a0:	4602      	mov	r2, r0
 80098a2:	2184      	movs	r1, #132	@ 0x84
 80098a4:	e6c5      	b.n	8009632 <__gethex+0x146>
 80098a6:	6922      	ldr	r2, [r4, #16]
 80098a8:	3202      	adds	r2, #2
 80098aa:	f104 010c 	add.w	r1, r4, #12
 80098ae:	0092      	lsls	r2, r2, #2
 80098b0:	300c      	adds	r0, #12
 80098b2:	f7fe fed8 	bl	8008666 <memcpy>
 80098b6:	4621      	mov	r1, r4
 80098b8:	9801      	ldr	r0, [sp, #4]
 80098ba:	f000 f9f1 	bl	8009ca0 <_Bfree>
 80098be:	464c      	mov	r4, r9
 80098c0:	6923      	ldr	r3, [r4, #16]
 80098c2:	1c5a      	adds	r2, r3, #1
 80098c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098c8:	6122      	str	r2, [r4, #16]
 80098ca:	2201      	movs	r2, #1
 80098cc:	615a      	str	r2, [r3, #20]
 80098ce:	e7be      	b.n	800984e <__gethex+0x362>
 80098d0:	6922      	ldr	r2, [r4, #16]
 80098d2:	455a      	cmp	r2, fp
 80098d4:	dd0b      	ble.n	80098ee <__gethex+0x402>
 80098d6:	2101      	movs	r1, #1
 80098d8:	4620      	mov	r0, r4
 80098da:	f7ff fd9f 	bl	800941c <rshift>
 80098de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098e2:	3701      	adds	r7, #1
 80098e4:	42bb      	cmp	r3, r7
 80098e6:	f6ff aee0 	blt.w	80096aa <__gethex+0x1be>
 80098ea:	2501      	movs	r5, #1
 80098ec:	e7c2      	b.n	8009874 <__gethex+0x388>
 80098ee:	f016 061f 	ands.w	r6, r6, #31
 80098f2:	d0fa      	beq.n	80098ea <__gethex+0x3fe>
 80098f4:	4453      	add	r3, sl
 80098f6:	f1c6 0620 	rsb	r6, r6, #32
 80098fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80098fe:	f000 fa81 	bl	8009e04 <__hi0bits>
 8009902:	42b0      	cmp	r0, r6
 8009904:	dbe7      	blt.n	80098d6 <__gethex+0x3ea>
 8009906:	e7f0      	b.n	80098ea <__gethex+0x3fe>
 8009908:	0800c318 	.word	0x0800c318

0800990c <L_shift>:
 800990c:	f1c2 0208 	rsb	r2, r2, #8
 8009910:	0092      	lsls	r2, r2, #2
 8009912:	b570      	push	{r4, r5, r6, lr}
 8009914:	f1c2 0620 	rsb	r6, r2, #32
 8009918:	6843      	ldr	r3, [r0, #4]
 800991a:	6804      	ldr	r4, [r0, #0]
 800991c:	fa03 f506 	lsl.w	r5, r3, r6
 8009920:	432c      	orrs	r4, r5
 8009922:	40d3      	lsrs	r3, r2
 8009924:	6004      	str	r4, [r0, #0]
 8009926:	f840 3f04 	str.w	r3, [r0, #4]!
 800992a:	4288      	cmp	r0, r1
 800992c:	d3f4      	bcc.n	8009918 <L_shift+0xc>
 800992e:	bd70      	pop	{r4, r5, r6, pc}

08009930 <__match>:
 8009930:	b530      	push	{r4, r5, lr}
 8009932:	6803      	ldr	r3, [r0, #0]
 8009934:	3301      	adds	r3, #1
 8009936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800993a:	b914      	cbnz	r4, 8009942 <__match+0x12>
 800993c:	6003      	str	r3, [r0, #0]
 800993e:	2001      	movs	r0, #1
 8009940:	bd30      	pop	{r4, r5, pc}
 8009942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009946:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800994a:	2d19      	cmp	r5, #25
 800994c:	bf98      	it	ls
 800994e:	3220      	addls	r2, #32
 8009950:	42a2      	cmp	r2, r4
 8009952:	d0f0      	beq.n	8009936 <__match+0x6>
 8009954:	2000      	movs	r0, #0
 8009956:	e7f3      	b.n	8009940 <__match+0x10>

08009958 <__hexnan>:
 8009958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	680b      	ldr	r3, [r1, #0]
 800995e:	6801      	ldr	r1, [r0, #0]
 8009960:	115e      	asrs	r6, r3, #5
 8009962:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009966:	f013 031f 	ands.w	r3, r3, #31
 800996a:	b087      	sub	sp, #28
 800996c:	bf18      	it	ne
 800996e:	3604      	addne	r6, #4
 8009970:	2500      	movs	r5, #0
 8009972:	1f37      	subs	r7, r6, #4
 8009974:	4682      	mov	sl, r0
 8009976:	4690      	mov	r8, r2
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	f846 5c04 	str.w	r5, [r6, #-4]
 800997e:	46b9      	mov	r9, r7
 8009980:	463c      	mov	r4, r7
 8009982:	9502      	str	r5, [sp, #8]
 8009984:	46ab      	mov	fp, r5
 8009986:	784a      	ldrb	r2, [r1, #1]
 8009988:	1c4b      	adds	r3, r1, #1
 800998a:	9303      	str	r3, [sp, #12]
 800998c:	b342      	cbz	r2, 80099e0 <__hexnan+0x88>
 800998e:	4610      	mov	r0, r2
 8009990:	9105      	str	r1, [sp, #20]
 8009992:	9204      	str	r2, [sp, #16]
 8009994:	f7ff fd94 	bl	80094c0 <__hexdig_fun>
 8009998:	2800      	cmp	r0, #0
 800999a:	d151      	bne.n	8009a40 <__hexnan+0xe8>
 800999c:	9a04      	ldr	r2, [sp, #16]
 800999e:	9905      	ldr	r1, [sp, #20]
 80099a0:	2a20      	cmp	r2, #32
 80099a2:	d818      	bhi.n	80099d6 <__hexnan+0x7e>
 80099a4:	9b02      	ldr	r3, [sp, #8]
 80099a6:	459b      	cmp	fp, r3
 80099a8:	dd13      	ble.n	80099d2 <__hexnan+0x7a>
 80099aa:	454c      	cmp	r4, r9
 80099ac:	d206      	bcs.n	80099bc <__hexnan+0x64>
 80099ae:	2d07      	cmp	r5, #7
 80099b0:	dc04      	bgt.n	80099bc <__hexnan+0x64>
 80099b2:	462a      	mov	r2, r5
 80099b4:	4649      	mov	r1, r9
 80099b6:	4620      	mov	r0, r4
 80099b8:	f7ff ffa8 	bl	800990c <L_shift>
 80099bc:	4544      	cmp	r4, r8
 80099be:	d952      	bls.n	8009a66 <__hexnan+0x10e>
 80099c0:	2300      	movs	r3, #0
 80099c2:	f1a4 0904 	sub.w	r9, r4, #4
 80099c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80099ca:	f8cd b008 	str.w	fp, [sp, #8]
 80099ce:	464c      	mov	r4, r9
 80099d0:	461d      	mov	r5, r3
 80099d2:	9903      	ldr	r1, [sp, #12]
 80099d4:	e7d7      	b.n	8009986 <__hexnan+0x2e>
 80099d6:	2a29      	cmp	r2, #41	@ 0x29
 80099d8:	d157      	bne.n	8009a8a <__hexnan+0x132>
 80099da:	3102      	adds	r1, #2
 80099dc:	f8ca 1000 	str.w	r1, [sl]
 80099e0:	f1bb 0f00 	cmp.w	fp, #0
 80099e4:	d051      	beq.n	8009a8a <__hexnan+0x132>
 80099e6:	454c      	cmp	r4, r9
 80099e8:	d206      	bcs.n	80099f8 <__hexnan+0xa0>
 80099ea:	2d07      	cmp	r5, #7
 80099ec:	dc04      	bgt.n	80099f8 <__hexnan+0xa0>
 80099ee:	462a      	mov	r2, r5
 80099f0:	4649      	mov	r1, r9
 80099f2:	4620      	mov	r0, r4
 80099f4:	f7ff ff8a 	bl	800990c <L_shift>
 80099f8:	4544      	cmp	r4, r8
 80099fa:	d936      	bls.n	8009a6a <__hexnan+0x112>
 80099fc:	f1a8 0204 	sub.w	r2, r8, #4
 8009a00:	4623      	mov	r3, r4
 8009a02:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a06:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a0a:	429f      	cmp	r7, r3
 8009a0c:	d2f9      	bcs.n	8009a02 <__hexnan+0xaa>
 8009a0e:	1b3b      	subs	r3, r7, r4
 8009a10:	f023 0303 	bic.w	r3, r3, #3
 8009a14:	3304      	adds	r3, #4
 8009a16:	3401      	adds	r4, #1
 8009a18:	3e03      	subs	r6, #3
 8009a1a:	42b4      	cmp	r4, r6
 8009a1c:	bf88      	it	hi
 8009a1e:	2304      	movhi	r3, #4
 8009a20:	4443      	add	r3, r8
 8009a22:	2200      	movs	r2, #0
 8009a24:	f843 2b04 	str.w	r2, [r3], #4
 8009a28:	429f      	cmp	r7, r3
 8009a2a:	d2fb      	bcs.n	8009a24 <__hexnan+0xcc>
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	b91b      	cbnz	r3, 8009a38 <__hexnan+0xe0>
 8009a30:	4547      	cmp	r7, r8
 8009a32:	d128      	bne.n	8009a86 <__hexnan+0x12e>
 8009a34:	2301      	movs	r3, #1
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	2005      	movs	r0, #5
 8009a3a:	b007      	add	sp, #28
 8009a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a40:	3501      	adds	r5, #1
 8009a42:	2d08      	cmp	r5, #8
 8009a44:	f10b 0b01 	add.w	fp, fp, #1
 8009a48:	dd06      	ble.n	8009a58 <__hexnan+0x100>
 8009a4a:	4544      	cmp	r4, r8
 8009a4c:	d9c1      	bls.n	80099d2 <__hexnan+0x7a>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a54:	2501      	movs	r5, #1
 8009a56:	3c04      	subs	r4, #4
 8009a58:	6822      	ldr	r2, [r4, #0]
 8009a5a:	f000 000f 	and.w	r0, r0, #15
 8009a5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009a62:	6020      	str	r0, [r4, #0]
 8009a64:	e7b5      	b.n	80099d2 <__hexnan+0x7a>
 8009a66:	2508      	movs	r5, #8
 8009a68:	e7b3      	b.n	80099d2 <__hexnan+0x7a>
 8009a6a:	9b01      	ldr	r3, [sp, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d0dd      	beq.n	8009a2c <__hexnan+0xd4>
 8009a70:	f1c3 0320 	rsb	r3, r3, #32
 8009a74:	f04f 32ff 	mov.w	r2, #4294967295
 8009a78:	40da      	lsrs	r2, r3
 8009a7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009a7e:	4013      	ands	r3, r2
 8009a80:	f846 3c04 	str.w	r3, [r6, #-4]
 8009a84:	e7d2      	b.n	8009a2c <__hexnan+0xd4>
 8009a86:	3f04      	subs	r7, #4
 8009a88:	e7d0      	b.n	8009a2c <__hexnan+0xd4>
 8009a8a:	2004      	movs	r0, #4
 8009a8c:	e7d5      	b.n	8009a3a <__hexnan+0xe2>
	...

08009a90 <malloc>:
 8009a90:	4b02      	ldr	r3, [pc, #8]	@ (8009a9c <malloc+0xc>)
 8009a92:	4601      	mov	r1, r0
 8009a94:	6818      	ldr	r0, [r3, #0]
 8009a96:	f000 b825 	b.w	8009ae4 <_malloc_r>
 8009a9a:	bf00      	nop
 8009a9c:	2000018c 	.word	0x2000018c

08009aa0 <sbrk_aligned>:
 8009aa0:	b570      	push	{r4, r5, r6, lr}
 8009aa2:	4e0f      	ldr	r6, [pc, #60]	@ (8009ae0 <sbrk_aligned+0x40>)
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	6831      	ldr	r1, [r6, #0]
 8009aa8:	4605      	mov	r5, r0
 8009aaa:	b911      	cbnz	r1, 8009ab2 <sbrk_aligned+0x12>
 8009aac:	f001 f998 	bl	800ade0 <_sbrk_r>
 8009ab0:	6030      	str	r0, [r6, #0]
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	f001 f993 	bl	800ade0 <_sbrk_r>
 8009aba:	1c43      	adds	r3, r0, #1
 8009abc:	d103      	bne.n	8009ac6 <sbrk_aligned+0x26>
 8009abe:	f04f 34ff 	mov.w	r4, #4294967295
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	bd70      	pop	{r4, r5, r6, pc}
 8009ac6:	1cc4      	adds	r4, r0, #3
 8009ac8:	f024 0403 	bic.w	r4, r4, #3
 8009acc:	42a0      	cmp	r0, r4
 8009ace:	d0f8      	beq.n	8009ac2 <sbrk_aligned+0x22>
 8009ad0:	1a21      	subs	r1, r4, r0
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	f001 f984 	bl	800ade0 <_sbrk_r>
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d1f2      	bne.n	8009ac2 <sbrk_aligned+0x22>
 8009adc:	e7ef      	b.n	8009abe <sbrk_aligned+0x1e>
 8009ade:	bf00      	nop
 8009ae0:	20000dcc 	.word	0x20000dcc

08009ae4 <_malloc_r>:
 8009ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ae8:	1ccd      	adds	r5, r1, #3
 8009aea:	f025 0503 	bic.w	r5, r5, #3
 8009aee:	3508      	adds	r5, #8
 8009af0:	2d0c      	cmp	r5, #12
 8009af2:	bf38      	it	cc
 8009af4:	250c      	movcc	r5, #12
 8009af6:	2d00      	cmp	r5, #0
 8009af8:	4606      	mov	r6, r0
 8009afa:	db01      	blt.n	8009b00 <_malloc_r+0x1c>
 8009afc:	42a9      	cmp	r1, r5
 8009afe:	d904      	bls.n	8009b0a <_malloc_r+0x26>
 8009b00:	230c      	movs	r3, #12
 8009b02:	6033      	str	r3, [r6, #0]
 8009b04:	2000      	movs	r0, #0
 8009b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009be0 <_malloc_r+0xfc>
 8009b0e:	f000 f87b 	bl	8009c08 <__malloc_lock>
 8009b12:	f8d8 3000 	ldr.w	r3, [r8]
 8009b16:	461c      	mov	r4, r3
 8009b18:	bb44      	cbnz	r4, 8009b6c <_malloc_r+0x88>
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	f7ff ffbf 	bl	8009aa0 <sbrk_aligned>
 8009b22:	1c43      	adds	r3, r0, #1
 8009b24:	4604      	mov	r4, r0
 8009b26:	d158      	bne.n	8009bda <_malloc_r+0xf6>
 8009b28:	f8d8 4000 	ldr.w	r4, [r8]
 8009b2c:	4627      	mov	r7, r4
 8009b2e:	2f00      	cmp	r7, #0
 8009b30:	d143      	bne.n	8009bba <_malloc_r+0xd6>
 8009b32:	2c00      	cmp	r4, #0
 8009b34:	d04b      	beq.n	8009bce <_malloc_r+0xea>
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	4639      	mov	r1, r7
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	eb04 0903 	add.w	r9, r4, r3
 8009b40:	f001 f94e 	bl	800ade0 <_sbrk_r>
 8009b44:	4581      	cmp	r9, r0
 8009b46:	d142      	bne.n	8009bce <_malloc_r+0xea>
 8009b48:	6821      	ldr	r1, [r4, #0]
 8009b4a:	1a6d      	subs	r5, r5, r1
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	4630      	mov	r0, r6
 8009b50:	f7ff ffa6 	bl	8009aa0 <sbrk_aligned>
 8009b54:	3001      	adds	r0, #1
 8009b56:	d03a      	beq.n	8009bce <_malloc_r+0xea>
 8009b58:	6823      	ldr	r3, [r4, #0]
 8009b5a:	442b      	add	r3, r5
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8009b62:	685a      	ldr	r2, [r3, #4]
 8009b64:	bb62      	cbnz	r2, 8009bc0 <_malloc_r+0xdc>
 8009b66:	f8c8 7000 	str.w	r7, [r8]
 8009b6a:	e00f      	b.n	8009b8c <_malloc_r+0xa8>
 8009b6c:	6822      	ldr	r2, [r4, #0]
 8009b6e:	1b52      	subs	r2, r2, r5
 8009b70:	d420      	bmi.n	8009bb4 <_malloc_r+0xd0>
 8009b72:	2a0b      	cmp	r2, #11
 8009b74:	d917      	bls.n	8009ba6 <_malloc_r+0xc2>
 8009b76:	1961      	adds	r1, r4, r5
 8009b78:	42a3      	cmp	r3, r4
 8009b7a:	6025      	str	r5, [r4, #0]
 8009b7c:	bf18      	it	ne
 8009b7e:	6059      	strne	r1, [r3, #4]
 8009b80:	6863      	ldr	r3, [r4, #4]
 8009b82:	bf08      	it	eq
 8009b84:	f8c8 1000 	streq.w	r1, [r8]
 8009b88:	5162      	str	r2, [r4, r5]
 8009b8a:	604b      	str	r3, [r1, #4]
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	f000 f841 	bl	8009c14 <__malloc_unlock>
 8009b92:	f104 000b 	add.w	r0, r4, #11
 8009b96:	1d23      	adds	r3, r4, #4
 8009b98:	f020 0007 	bic.w	r0, r0, #7
 8009b9c:	1ac2      	subs	r2, r0, r3
 8009b9e:	bf1c      	itt	ne
 8009ba0:	1a1b      	subne	r3, r3, r0
 8009ba2:	50a3      	strne	r3, [r4, r2]
 8009ba4:	e7af      	b.n	8009b06 <_malloc_r+0x22>
 8009ba6:	6862      	ldr	r2, [r4, #4]
 8009ba8:	42a3      	cmp	r3, r4
 8009baa:	bf0c      	ite	eq
 8009bac:	f8c8 2000 	streq.w	r2, [r8]
 8009bb0:	605a      	strne	r2, [r3, #4]
 8009bb2:	e7eb      	b.n	8009b8c <_malloc_r+0xa8>
 8009bb4:	4623      	mov	r3, r4
 8009bb6:	6864      	ldr	r4, [r4, #4]
 8009bb8:	e7ae      	b.n	8009b18 <_malloc_r+0x34>
 8009bba:	463c      	mov	r4, r7
 8009bbc:	687f      	ldr	r7, [r7, #4]
 8009bbe:	e7b6      	b.n	8009b2e <_malloc_r+0x4a>
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	42a3      	cmp	r3, r4
 8009bc6:	d1fb      	bne.n	8009bc0 <_malloc_r+0xdc>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	6053      	str	r3, [r2, #4]
 8009bcc:	e7de      	b.n	8009b8c <_malloc_r+0xa8>
 8009bce:	230c      	movs	r3, #12
 8009bd0:	6033      	str	r3, [r6, #0]
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f000 f81e 	bl	8009c14 <__malloc_unlock>
 8009bd8:	e794      	b.n	8009b04 <_malloc_r+0x20>
 8009bda:	6005      	str	r5, [r0, #0]
 8009bdc:	e7d6      	b.n	8009b8c <_malloc_r+0xa8>
 8009bde:	bf00      	nop
 8009be0:	20000dd0 	.word	0x20000dd0

08009be4 <__ascii_mbtowc>:
 8009be4:	b082      	sub	sp, #8
 8009be6:	b901      	cbnz	r1, 8009bea <__ascii_mbtowc+0x6>
 8009be8:	a901      	add	r1, sp, #4
 8009bea:	b142      	cbz	r2, 8009bfe <__ascii_mbtowc+0x1a>
 8009bec:	b14b      	cbz	r3, 8009c02 <__ascii_mbtowc+0x1e>
 8009bee:	7813      	ldrb	r3, [r2, #0]
 8009bf0:	600b      	str	r3, [r1, #0]
 8009bf2:	7812      	ldrb	r2, [r2, #0]
 8009bf4:	1e10      	subs	r0, r2, #0
 8009bf6:	bf18      	it	ne
 8009bf8:	2001      	movne	r0, #1
 8009bfa:	b002      	add	sp, #8
 8009bfc:	4770      	bx	lr
 8009bfe:	4610      	mov	r0, r2
 8009c00:	e7fb      	b.n	8009bfa <__ascii_mbtowc+0x16>
 8009c02:	f06f 0001 	mvn.w	r0, #1
 8009c06:	e7f8      	b.n	8009bfa <__ascii_mbtowc+0x16>

08009c08 <__malloc_lock>:
 8009c08:	4801      	ldr	r0, [pc, #4]	@ (8009c10 <__malloc_lock+0x8>)
 8009c0a:	f7fe bd22 	b.w	8008652 <__retarget_lock_acquire_recursive>
 8009c0e:	bf00      	nop
 8009c10:	20000dc8 	.word	0x20000dc8

08009c14 <__malloc_unlock>:
 8009c14:	4801      	ldr	r0, [pc, #4]	@ (8009c1c <__malloc_unlock+0x8>)
 8009c16:	f7fe bd1d 	b.w	8008654 <__retarget_lock_release_recursive>
 8009c1a:	bf00      	nop
 8009c1c:	20000dc8 	.word	0x20000dc8

08009c20 <_Balloc>:
 8009c20:	b570      	push	{r4, r5, r6, lr}
 8009c22:	69c6      	ldr	r6, [r0, #28]
 8009c24:	4604      	mov	r4, r0
 8009c26:	460d      	mov	r5, r1
 8009c28:	b976      	cbnz	r6, 8009c48 <_Balloc+0x28>
 8009c2a:	2010      	movs	r0, #16
 8009c2c:	f7ff ff30 	bl	8009a90 <malloc>
 8009c30:	4602      	mov	r2, r0
 8009c32:	61e0      	str	r0, [r4, #28]
 8009c34:	b920      	cbnz	r0, 8009c40 <_Balloc+0x20>
 8009c36:	4b18      	ldr	r3, [pc, #96]	@ (8009c98 <_Balloc+0x78>)
 8009c38:	4818      	ldr	r0, [pc, #96]	@ (8009c9c <_Balloc+0x7c>)
 8009c3a:	216b      	movs	r1, #107	@ 0x6b
 8009c3c:	f7fe fd2c 	bl	8008698 <__assert_func>
 8009c40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c44:	6006      	str	r6, [r0, #0]
 8009c46:	60c6      	str	r6, [r0, #12]
 8009c48:	69e6      	ldr	r6, [r4, #28]
 8009c4a:	68f3      	ldr	r3, [r6, #12]
 8009c4c:	b183      	cbz	r3, 8009c70 <_Balloc+0x50>
 8009c4e:	69e3      	ldr	r3, [r4, #28]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c56:	b9b8      	cbnz	r0, 8009c88 <_Balloc+0x68>
 8009c58:	2101      	movs	r1, #1
 8009c5a:	fa01 f605 	lsl.w	r6, r1, r5
 8009c5e:	1d72      	adds	r2, r6, #5
 8009c60:	0092      	lsls	r2, r2, #2
 8009c62:	4620      	mov	r0, r4
 8009c64:	f001 f8d3 	bl	800ae0e <_calloc_r>
 8009c68:	b160      	cbz	r0, 8009c84 <_Balloc+0x64>
 8009c6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c6e:	e00e      	b.n	8009c8e <_Balloc+0x6e>
 8009c70:	2221      	movs	r2, #33	@ 0x21
 8009c72:	2104      	movs	r1, #4
 8009c74:	4620      	mov	r0, r4
 8009c76:	f001 f8ca 	bl	800ae0e <_calloc_r>
 8009c7a:	69e3      	ldr	r3, [r4, #28]
 8009c7c:	60f0      	str	r0, [r6, #12]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1e4      	bne.n	8009c4e <_Balloc+0x2e>
 8009c84:	2000      	movs	r0, #0
 8009c86:	bd70      	pop	{r4, r5, r6, pc}
 8009c88:	6802      	ldr	r2, [r0, #0]
 8009c8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c94:	e7f7      	b.n	8009c86 <_Balloc+0x66>
 8009c96:	bf00      	nop
 8009c98:	0800c1fe 	.word	0x0800c1fe
 8009c9c:	0800c389 	.word	0x0800c389

08009ca0 <_Bfree>:
 8009ca0:	b570      	push	{r4, r5, r6, lr}
 8009ca2:	69c6      	ldr	r6, [r0, #28]
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	b976      	cbnz	r6, 8009cc8 <_Bfree+0x28>
 8009caa:	2010      	movs	r0, #16
 8009cac:	f7ff fef0 	bl	8009a90 <malloc>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	61e8      	str	r0, [r5, #28]
 8009cb4:	b920      	cbnz	r0, 8009cc0 <_Bfree+0x20>
 8009cb6:	4b09      	ldr	r3, [pc, #36]	@ (8009cdc <_Bfree+0x3c>)
 8009cb8:	4809      	ldr	r0, [pc, #36]	@ (8009ce0 <_Bfree+0x40>)
 8009cba:	218f      	movs	r1, #143	@ 0x8f
 8009cbc:	f7fe fcec 	bl	8008698 <__assert_func>
 8009cc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cc4:	6006      	str	r6, [r0, #0]
 8009cc6:	60c6      	str	r6, [r0, #12]
 8009cc8:	b13c      	cbz	r4, 8009cda <_Bfree+0x3a>
 8009cca:	69eb      	ldr	r3, [r5, #28]
 8009ccc:	6862      	ldr	r2, [r4, #4]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009cd4:	6021      	str	r1, [r4, #0]
 8009cd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009cda:	bd70      	pop	{r4, r5, r6, pc}
 8009cdc:	0800c1fe 	.word	0x0800c1fe
 8009ce0:	0800c389 	.word	0x0800c389

08009ce4 <__multadd>:
 8009ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce8:	690d      	ldr	r5, [r1, #16]
 8009cea:	4607      	mov	r7, r0
 8009cec:	460c      	mov	r4, r1
 8009cee:	461e      	mov	r6, r3
 8009cf0:	f101 0c14 	add.w	ip, r1, #20
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	f8dc 3000 	ldr.w	r3, [ip]
 8009cfa:	b299      	uxth	r1, r3
 8009cfc:	fb02 6101 	mla	r1, r2, r1, r6
 8009d00:	0c1e      	lsrs	r6, r3, #16
 8009d02:	0c0b      	lsrs	r3, r1, #16
 8009d04:	fb02 3306 	mla	r3, r2, r6, r3
 8009d08:	b289      	uxth	r1, r1
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d10:	4285      	cmp	r5, r0
 8009d12:	f84c 1b04 	str.w	r1, [ip], #4
 8009d16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d1a:	dcec      	bgt.n	8009cf6 <__multadd+0x12>
 8009d1c:	b30e      	cbz	r6, 8009d62 <__multadd+0x7e>
 8009d1e:	68a3      	ldr	r3, [r4, #8]
 8009d20:	42ab      	cmp	r3, r5
 8009d22:	dc19      	bgt.n	8009d58 <__multadd+0x74>
 8009d24:	6861      	ldr	r1, [r4, #4]
 8009d26:	4638      	mov	r0, r7
 8009d28:	3101      	adds	r1, #1
 8009d2a:	f7ff ff79 	bl	8009c20 <_Balloc>
 8009d2e:	4680      	mov	r8, r0
 8009d30:	b928      	cbnz	r0, 8009d3e <__multadd+0x5a>
 8009d32:	4602      	mov	r2, r0
 8009d34:	4b0c      	ldr	r3, [pc, #48]	@ (8009d68 <__multadd+0x84>)
 8009d36:	480d      	ldr	r0, [pc, #52]	@ (8009d6c <__multadd+0x88>)
 8009d38:	21ba      	movs	r1, #186	@ 0xba
 8009d3a:	f7fe fcad 	bl	8008698 <__assert_func>
 8009d3e:	6922      	ldr	r2, [r4, #16]
 8009d40:	3202      	adds	r2, #2
 8009d42:	f104 010c 	add.w	r1, r4, #12
 8009d46:	0092      	lsls	r2, r2, #2
 8009d48:	300c      	adds	r0, #12
 8009d4a:	f7fe fc8c 	bl	8008666 <memcpy>
 8009d4e:	4621      	mov	r1, r4
 8009d50:	4638      	mov	r0, r7
 8009d52:	f7ff ffa5 	bl	8009ca0 <_Bfree>
 8009d56:	4644      	mov	r4, r8
 8009d58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d5c:	3501      	adds	r5, #1
 8009d5e:	615e      	str	r6, [r3, #20]
 8009d60:	6125      	str	r5, [r4, #16]
 8009d62:	4620      	mov	r0, r4
 8009d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d68:	0800c318 	.word	0x0800c318
 8009d6c:	0800c389 	.word	0x0800c389

08009d70 <__s2b>:
 8009d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d74:	460c      	mov	r4, r1
 8009d76:	4615      	mov	r5, r2
 8009d78:	461f      	mov	r7, r3
 8009d7a:	2209      	movs	r2, #9
 8009d7c:	3308      	adds	r3, #8
 8009d7e:	4606      	mov	r6, r0
 8009d80:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d84:	2100      	movs	r1, #0
 8009d86:	2201      	movs	r2, #1
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	db09      	blt.n	8009da0 <__s2b+0x30>
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	f7ff ff47 	bl	8009c20 <_Balloc>
 8009d92:	b940      	cbnz	r0, 8009da6 <__s2b+0x36>
 8009d94:	4602      	mov	r2, r0
 8009d96:	4b19      	ldr	r3, [pc, #100]	@ (8009dfc <__s2b+0x8c>)
 8009d98:	4819      	ldr	r0, [pc, #100]	@ (8009e00 <__s2b+0x90>)
 8009d9a:	21d3      	movs	r1, #211	@ 0xd3
 8009d9c:	f7fe fc7c 	bl	8008698 <__assert_func>
 8009da0:	0052      	lsls	r2, r2, #1
 8009da2:	3101      	adds	r1, #1
 8009da4:	e7f0      	b.n	8009d88 <__s2b+0x18>
 8009da6:	9b08      	ldr	r3, [sp, #32]
 8009da8:	6143      	str	r3, [r0, #20]
 8009daa:	2d09      	cmp	r5, #9
 8009dac:	f04f 0301 	mov.w	r3, #1
 8009db0:	6103      	str	r3, [r0, #16]
 8009db2:	dd16      	ble.n	8009de2 <__s2b+0x72>
 8009db4:	f104 0909 	add.w	r9, r4, #9
 8009db8:	46c8      	mov	r8, r9
 8009dba:	442c      	add	r4, r5
 8009dbc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009dc0:	4601      	mov	r1, r0
 8009dc2:	3b30      	subs	r3, #48	@ 0x30
 8009dc4:	220a      	movs	r2, #10
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	f7ff ff8c 	bl	8009ce4 <__multadd>
 8009dcc:	45a0      	cmp	r8, r4
 8009dce:	d1f5      	bne.n	8009dbc <__s2b+0x4c>
 8009dd0:	f1a5 0408 	sub.w	r4, r5, #8
 8009dd4:	444c      	add	r4, r9
 8009dd6:	1b2d      	subs	r5, r5, r4
 8009dd8:	1963      	adds	r3, r4, r5
 8009dda:	42bb      	cmp	r3, r7
 8009ddc:	db04      	blt.n	8009de8 <__s2b+0x78>
 8009dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009de2:	340a      	adds	r4, #10
 8009de4:	2509      	movs	r5, #9
 8009de6:	e7f6      	b.n	8009dd6 <__s2b+0x66>
 8009de8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009dec:	4601      	mov	r1, r0
 8009dee:	3b30      	subs	r3, #48	@ 0x30
 8009df0:	220a      	movs	r2, #10
 8009df2:	4630      	mov	r0, r6
 8009df4:	f7ff ff76 	bl	8009ce4 <__multadd>
 8009df8:	e7ee      	b.n	8009dd8 <__s2b+0x68>
 8009dfa:	bf00      	nop
 8009dfc:	0800c318 	.word	0x0800c318
 8009e00:	0800c389 	.word	0x0800c389

08009e04 <__hi0bits>:
 8009e04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009e08:	4603      	mov	r3, r0
 8009e0a:	bf36      	itet	cc
 8009e0c:	0403      	lslcc	r3, r0, #16
 8009e0e:	2000      	movcs	r0, #0
 8009e10:	2010      	movcc	r0, #16
 8009e12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e16:	bf3c      	itt	cc
 8009e18:	021b      	lslcc	r3, r3, #8
 8009e1a:	3008      	addcc	r0, #8
 8009e1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e20:	bf3c      	itt	cc
 8009e22:	011b      	lslcc	r3, r3, #4
 8009e24:	3004      	addcc	r0, #4
 8009e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e2a:	bf3c      	itt	cc
 8009e2c:	009b      	lslcc	r3, r3, #2
 8009e2e:	3002      	addcc	r0, #2
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	db05      	blt.n	8009e40 <__hi0bits+0x3c>
 8009e34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009e38:	f100 0001 	add.w	r0, r0, #1
 8009e3c:	bf08      	it	eq
 8009e3e:	2020      	moveq	r0, #32
 8009e40:	4770      	bx	lr

08009e42 <__lo0bits>:
 8009e42:	6803      	ldr	r3, [r0, #0]
 8009e44:	4602      	mov	r2, r0
 8009e46:	f013 0007 	ands.w	r0, r3, #7
 8009e4a:	d00b      	beq.n	8009e64 <__lo0bits+0x22>
 8009e4c:	07d9      	lsls	r1, r3, #31
 8009e4e:	d421      	bmi.n	8009e94 <__lo0bits+0x52>
 8009e50:	0798      	lsls	r0, r3, #30
 8009e52:	bf49      	itett	mi
 8009e54:	085b      	lsrmi	r3, r3, #1
 8009e56:	089b      	lsrpl	r3, r3, #2
 8009e58:	2001      	movmi	r0, #1
 8009e5a:	6013      	strmi	r3, [r2, #0]
 8009e5c:	bf5c      	itt	pl
 8009e5e:	6013      	strpl	r3, [r2, #0]
 8009e60:	2002      	movpl	r0, #2
 8009e62:	4770      	bx	lr
 8009e64:	b299      	uxth	r1, r3
 8009e66:	b909      	cbnz	r1, 8009e6c <__lo0bits+0x2a>
 8009e68:	0c1b      	lsrs	r3, r3, #16
 8009e6a:	2010      	movs	r0, #16
 8009e6c:	b2d9      	uxtb	r1, r3
 8009e6e:	b909      	cbnz	r1, 8009e74 <__lo0bits+0x32>
 8009e70:	3008      	adds	r0, #8
 8009e72:	0a1b      	lsrs	r3, r3, #8
 8009e74:	0719      	lsls	r1, r3, #28
 8009e76:	bf04      	itt	eq
 8009e78:	091b      	lsreq	r3, r3, #4
 8009e7a:	3004      	addeq	r0, #4
 8009e7c:	0799      	lsls	r1, r3, #30
 8009e7e:	bf04      	itt	eq
 8009e80:	089b      	lsreq	r3, r3, #2
 8009e82:	3002      	addeq	r0, #2
 8009e84:	07d9      	lsls	r1, r3, #31
 8009e86:	d403      	bmi.n	8009e90 <__lo0bits+0x4e>
 8009e88:	085b      	lsrs	r3, r3, #1
 8009e8a:	f100 0001 	add.w	r0, r0, #1
 8009e8e:	d003      	beq.n	8009e98 <__lo0bits+0x56>
 8009e90:	6013      	str	r3, [r2, #0]
 8009e92:	4770      	bx	lr
 8009e94:	2000      	movs	r0, #0
 8009e96:	4770      	bx	lr
 8009e98:	2020      	movs	r0, #32
 8009e9a:	4770      	bx	lr

08009e9c <__i2b>:
 8009e9c:	b510      	push	{r4, lr}
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	f7ff febd 	bl	8009c20 <_Balloc>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	b928      	cbnz	r0, 8009eb6 <__i2b+0x1a>
 8009eaa:	4b05      	ldr	r3, [pc, #20]	@ (8009ec0 <__i2b+0x24>)
 8009eac:	4805      	ldr	r0, [pc, #20]	@ (8009ec4 <__i2b+0x28>)
 8009eae:	f240 1145 	movw	r1, #325	@ 0x145
 8009eb2:	f7fe fbf1 	bl	8008698 <__assert_func>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	6144      	str	r4, [r0, #20]
 8009eba:	6103      	str	r3, [r0, #16]
 8009ebc:	bd10      	pop	{r4, pc}
 8009ebe:	bf00      	nop
 8009ec0:	0800c318 	.word	0x0800c318
 8009ec4:	0800c389 	.word	0x0800c389

08009ec8 <__multiply>:
 8009ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ecc:	4617      	mov	r7, r2
 8009ece:	690a      	ldr	r2, [r1, #16]
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	bfa8      	it	ge
 8009ed6:	463b      	movge	r3, r7
 8009ed8:	4689      	mov	r9, r1
 8009eda:	bfa4      	itt	ge
 8009edc:	460f      	movge	r7, r1
 8009ede:	4699      	movge	r9, r3
 8009ee0:	693d      	ldr	r5, [r7, #16]
 8009ee2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	6879      	ldr	r1, [r7, #4]
 8009eea:	eb05 060a 	add.w	r6, r5, sl
 8009eee:	42b3      	cmp	r3, r6
 8009ef0:	b085      	sub	sp, #20
 8009ef2:	bfb8      	it	lt
 8009ef4:	3101      	addlt	r1, #1
 8009ef6:	f7ff fe93 	bl	8009c20 <_Balloc>
 8009efa:	b930      	cbnz	r0, 8009f0a <__multiply+0x42>
 8009efc:	4602      	mov	r2, r0
 8009efe:	4b41      	ldr	r3, [pc, #260]	@ (800a004 <__multiply+0x13c>)
 8009f00:	4841      	ldr	r0, [pc, #260]	@ (800a008 <__multiply+0x140>)
 8009f02:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009f06:	f7fe fbc7 	bl	8008698 <__assert_func>
 8009f0a:	f100 0414 	add.w	r4, r0, #20
 8009f0e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009f12:	4623      	mov	r3, r4
 8009f14:	2200      	movs	r2, #0
 8009f16:	4573      	cmp	r3, lr
 8009f18:	d320      	bcc.n	8009f5c <__multiply+0x94>
 8009f1a:	f107 0814 	add.w	r8, r7, #20
 8009f1e:	f109 0114 	add.w	r1, r9, #20
 8009f22:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009f26:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009f2a:	9302      	str	r3, [sp, #8]
 8009f2c:	1beb      	subs	r3, r5, r7
 8009f2e:	3b15      	subs	r3, #21
 8009f30:	f023 0303 	bic.w	r3, r3, #3
 8009f34:	3304      	adds	r3, #4
 8009f36:	3715      	adds	r7, #21
 8009f38:	42bd      	cmp	r5, r7
 8009f3a:	bf38      	it	cc
 8009f3c:	2304      	movcc	r3, #4
 8009f3e:	9301      	str	r3, [sp, #4]
 8009f40:	9b02      	ldr	r3, [sp, #8]
 8009f42:	9103      	str	r1, [sp, #12]
 8009f44:	428b      	cmp	r3, r1
 8009f46:	d80c      	bhi.n	8009f62 <__multiply+0x9a>
 8009f48:	2e00      	cmp	r6, #0
 8009f4a:	dd03      	ble.n	8009f54 <__multiply+0x8c>
 8009f4c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d055      	beq.n	800a000 <__multiply+0x138>
 8009f54:	6106      	str	r6, [r0, #16]
 8009f56:	b005      	add	sp, #20
 8009f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f5c:	f843 2b04 	str.w	r2, [r3], #4
 8009f60:	e7d9      	b.n	8009f16 <__multiply+0x4e>
 8009f62:	f8b1 a000 	ldrh.w	sl, [r1]
 8009f66:	f1ba 0f00 	cmp.w	sl, #0
 8009f6a:	d01f      	beq.n	8009fac <__multiply+0xe4>
 8009f6c:	46c4      	mov	ip, r8
 8009f6e:	46a1      	mov	r9, r4
 8009f70:	2700      	movs	r7, #0
 8009f72:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009f76:	f8d9 3000 	ldr.w	r3, [r9]
 8009f7a:	fa1f fb82 	uxth.w	fp, r2
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	fb0a 330b 	mla	r3, sl, fp, r3
 8009f84:	443b      	add	r3, r7
 8009f86:	f8d9 7000 	ldr.w	r7, [r9]
 8009f8a:	0c12      	lsrs	r2, r2, #16
 8009f8c:	0c3f      	lsrs	r7, r7, #16
 8009f8e:	fb0a 7202 	mla	r2, sl, r2, r7
 8009f92:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f9c:	4565      	cmp	r5, ip
 8009f9e:	f849 3b04 	str.w	r3, [r9], #4
 8009fa2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009fa6:	d8e4      	bhi.n	8009f72 <__multiply+0xaa>
 8009fa8:	9b01      	ldr	r3, [sp, #4]
 8009faa:	50e7      	str	r7, [r4, r3]
 8009fac:	9b03      	ldr	r3, [sp, #12]
 8009fae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009fb2:	3104      	adds	r1, #4
 8009fb4:	f1b9 0f00 	cmp.w	r9, #0
 8009fb8:	d020      	beq.n	8009ffc <__multiply+0x134>
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	4647      	mov	r7, r8
 8009fbe:	46a4      	mov	ip, r4
 8009fc0:	f04f 0a00 	mov.w	sl, #0
 8009fc4:	f8b7 b000 	ldrh.w	fp, [r7]
 8009fc8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009fcc:	fb09 220b 	mla	r2, r9, fp, r2
 8009fd0:	4452      	add	r2, sl
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fd8:	f84c 3b04 	str.w	r3, [ip], #4
 8009fdc:	f857 3b04 	ldr.w	r3, [r7], #4
 8009fe0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009fe4:	f8bc 3000 	ldrh.w	r3, [ip]
 8009fe8:	fb09 330a 	mla	r3, r9, sl, r3
 8009fec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009ff0:	42bd      	cmp	r5, r7
 8009ff2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ff6:	d8e5      	bhi.n	8009fc4 <__multiply+0xfc>
 8009ff8:	9a01      	ldr	r2, [sp, #4]
 8009ffa:	50a3      	str	r3, [r4, r2]
 8009ffc:	3404      	adds	r4, #4
 8009ffe:	e79f      	b.n	8009f40 <__multiply+0x78>
 800a000:	3e01      	subs	r6, #1
 800a002:	e7a1      	b.n	8009f48 <__multiply+0x80>
 800a004:	0800c318 	.word	0x0800c318
 800a008:	0800c389 	.word	0x0800c389

0800a00c <__pow5mult>:
 800a00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a010:	4615      	mov	r5, r2
 800a012:	f012 0203 	ands.w	r2, r2, #3
 800a016:	4607      	mov	r7, r0
 800a018:	460e      	mov	r6, r1
 800a01a:	d007      	beq.n	800a02c <__pow5mult+0x20>
 800a01c:	4c25      	ldr	r4, [pc, #148]	@ (800a0b4 <__pow5mult+0xa8>)
 800a01e:	3a01      	subs	r2, #1
 800a020:	2300      	movs	r3, #0
 800a022:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a026:	f7ff fe5d 	bl	8009ce4 <__multadd>
 800a02a:	4606      	mov	r6, r0
 800a02c:	10ad      	asrs	r5, r5, #2
 800a02e:	d03d      	beq.n	800a0ac <__pow5mult+0xa0>
 800a030:	69fc      	ldr	r4, [r7, #28]
 800a032:	b97c      	cbnz	r4, 800a054 <__pow5mult+0x48>
 800a034:	2010      	movs	r0, #16
 800a036:	f7ff fd2b 	bl	8009a90 <malloc>
 800a03a:	4602      	mov	r2, r0
 800a03c:	61f8      	str	r0, [r7, #28]
 800a03e:	b928      	cbnz	r0, 800a04c <__pow5mult+0x40>
 800a040:	4b1d      	ldr	r3, [pc, #116]	@ (800a0b8 <__pow5mult+0xac>)
 800a042:	481e      	ldr	r0, [pc, #120]	@ (800a0bc <__pow5mult+0xb0>)
 800a044:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a048:	f7fe fb26 	bl	8008698 <__assert_func>
 800a04c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a050:	6004      	str	r4, [r0, #0]
 800a052:	60c4      	str	r4, [r0, #12]
 800a054:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a058:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a05c:	b94c      	cbnz	r4, 800a072 <__pow5mult+0x66>
 800a05e:	f240 2171 	movw	r1, #625	@ 0x271
 800a062:	4638      	mov	r0, r7
 800a064:	f7ff ff1a 	bl	8009e9c <__i2b>
 800a068:	2300      	movs	r3, #0
 800a06a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a06e:	4604      	mov	r4, r0
 800a070:	6003      	str	r3, [r0, #0]
 800a072:	f04f 0900 	mov.w	r9, #0
 800a076:	07eb      	lsls	r3, r5, #31
 800a078:	d50a      	bpl.n	800a090 <__pow5mult+0x84>
 800a07a:	4631      	mov	r1, r6
 800a07c:	4622      	mov	r2, r4
 800a07e:	4638      	mov	r0, r7
 800a080:	f7ff ff22 	bl	8009ec8 <__multiply>
 800a084:	4631      	mov	r1, r6
 800a086:	4680      	mov	r8, r0
 800a088:	4638      	mov	r0, r7
 800a08a:	f7ff fe09 	bl	8009ca0 <_Bfree>
 800a08e:	4646      	mov	r6, r8
 800a090:	106d      	asrs	r5, r5, #1
 800a092:	d00b      	beq.n	800a0ac <__pow5mult+0xa0>
 800a094:	6820      	ldr	r0, [r4, #0]
 800a096:	b938      	cbnz	r0, 800a0a8 <__pow5mult+0x9c>
 800a098:	4622      	mov	r2, r4
 800a09a:	4621      	mov	r1, r4
 800a09c:	4638      	mov	r0, r7
 800a09e:	f7ff ff13 	bl	8009ec8 <__multiply>
 800a0a2:	6020      	str	r0, [r4, #0]
 800a0a4:	f8c0 9000 	str.w	r9, [r0]
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	e7e4      	b.n	800a076 <__pow5mult+0x6a>
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0b2:	bf00      	nop
 800a0b4:	0800c54c 	.word	0x0800c54c
 800a0b8:	0800c1fe 	.word	0x0800c1fe
 800a0bc:	0800c389 	.word	0x0800c389

0800a0c0 <__lshift>:
 800a0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c4:	460c      	mov	r4, r1
 800a0c6:	6849      	ldr	r1, [r1, #4]
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0ce:	68a3      	ldr	r3, [r4, #8]
 800a0d0:	4607      	mov	r7, r0
 800a0d2:	4691      	mov	r9, r2
 800a0d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a0d8:	f108 0601 	add.w	r6, r8, #1
 800a0dc:	42b3      	cmp	r3, r6
 800a0de:	db0b      	blt.n	800a0f8 <__lshift+0x38>
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	f7ff fd9d 	bl	8009c20 <_Balloc>
 800a0e6:	4605      	mov	r5, r0
 800a0e8:	b948      	cbnz	r0, 800a0fe <__lshift+0x3e>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	4b28      	ldr	r3, [pc, #160]	@ (800a190 <__lshift+0xd0>)
 800a0ee:	4829      	ldr	r0, [pc, #164]	@ (800a194 <__lshift+0xd4>)
 800a0f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a0f4:	f7fe fad0 	bl	8008698 <__assert_func>
 800a0f8:	3101      	adds	r1, #1
 800a0fa:	005b      	lsls	r3, r3, #1
 800a0fc:	e7ee      	b.n	800a0dc <__lshift+0x1c>
 800a0fe:	2300      	movs	r3, #0
 800a100:	f100 0114 	add.w	r1, r0, #20
 800a104:	f100 0210 	add.w	r2, r0, #16
 800a108:	4618      	mov	r0, r3
 800a10a:	4553      	cmp	r3, sl
 800a10c:	db33      	blt.n	800a176 <__lshift+0xb6>
 800a10e:	6920      	ldr	r0, [r4, #16]
 800a110:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a114:	f104 0314 	add.w	r3, r4, #20
 800a118:	f019 091f 	ands.w	r9, r9, #31
 800a11c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a120:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a124:	d02b      	beq.n	800a17e <__lshift+0xbe>
 800a126:	f1c9 0e20 	rsb	lr, r9, #32
 800a12a:	468a      	mov	sl, r1
 800a12c:	2200      	movs	r2, #0
 800a12e:	6818      	ldr	r0, [r3, #0]
 800a130:	fa00 f009 	lsl.w	r0, r0, r9
 800a134:	4310      	orrs	r0, r2
 800a136:	f84a 0b04 	str.w	r0, [sl], #4
 800a13a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a13e:	459c      	cmp	ip, r3
 800a140:	fa22 f20e 	lsr.w	r2, r2, lr
 800a144:	d8f3      	bhi.n	800a12e <__lshift+0x6e>
 800a146:	ebac 0304 	sub.w	r3, ip, r4
 800a14a:	3b15      	subs	r3, #21
 800a14c:	f023 0303 	bic.w	r3, r3, #3
 800a150:	3304      	adds	r3, #4
 800a152:	f104 0015 	add.w	r0, r4, #21
 800a156:	4560      	cmp	r0, ip
 800a158:	bf88      	it	hi
 800a15a:	2304      	movhi	r3, #4
 800a15c:	50ca      	str	r2, [r1, r3]
 800a15e:	b10a      	cbz	r2, 800a164 <__lshift+0xa4>
 800a160:	f108 0602 	add.w	r6, r8, #2
 800a164:	3e01      	subs	r6, #1
 800a166:	4638      	mov	r0, r7
 800a168:	612e      	str	r6, [r5, #16]
 800a16a:	4621      	mov	r1, r4
 800a16c:	f7ff fd98 	bl	8009ca0 <_Bfree>
 800a170:	4628      	mov	r0, r5
 800a172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a176:	f842 0f04 	str.w	r0, [r2, #4]!
 800a17a:	3301      	adds	r3, #1
 800a17c:	e7c5      	b.n	800a10a <__lshift+0x4a>
 800a17e:	3904      	subs	r1, #4
 800a180:	f853 2b04 	ldr.w	r2, [r3], #4
 800a184:	f841 2f04 	str.w	r2, [r1, #4]!
 800a188:	459c      	cmp	ip, r3
 800a18a:	d8f9      	bhi.n	800a180 <__lshift+0xc0>
 800a18c:	e7ea      	b.n	800a164 <__lshift+0xa4>
 800a18e:	bf00      	nop
 800a190:	0800c318 	.word	0x0800c318
 800a194:	0800c389 	.word	0x0800c389

0800a198 <__mcmp>:
 800a198:	690a      	ldr	r2, [r1, #16]
 800a19a:	4603      	mov	r3, r0
 800a19c:	6900      	ldr	r0, [r0, #16]
 800a19e:	1a80      	subs	r0, r0, r2
 800a1a0:	b530      	push	{r4, r5, lr}
 800a1a2:	d10e      	bne.n	800a1c2 <__mcmp+0x2a>
 800a1a4:	3314      	adds	r3, #20
 800a1a6:	3114      	adds	r1, #20
 800a1a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a1ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a1b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a1b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a1b8:	4295      	cmp	r5, r2
 800a1ba:	d003      	beq.n	800a1c4 <__mcmp+0x2c>
 800a1bc:	d205      	bcs.n	800a1ca <__mcmp+0x32>
 800a1be:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c2:	bd30      	pop	{r4, r5, pc}
 800a1c4:	42a3      	cmp	r3, r4
 800a1c6:	d3f3      	bcc.n	800a1b0 <__mcmp+0x18>
 800a1c8:	e7fb      	b.n	800a1c2 <__mcmp+0x2a>
 800a1ca:	2001      	movs	r0, #1
 800a1cc:	e7f9      	b.n	800a1c2 <__mcmp+0x2a>
	...

0800a1d0 <__mdiff>:
 800a1d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d4:	4689      	mov	r9, r1
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	4611      	mov	r1, r2
 800a1da:	4648      	mov	r0, r9
 800a1dc:	4614      	mov	r4, r2
 800a1de:	f7ff ffdb 	bl	800a198 <__mcmp>
 800a1e2:	1e05      	subs	r5, r0, #0
 800a1e4:	d112      	bne.n	800a20c <__mdiff+0x3c>
 800a1e6:	4629      	mov	r1, r5
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	f7ff fd19 	bl	8009c20 <_Balloc>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	b928      	cbnz	r0, 800a1fe <__mdiff+0x2e>
 800a1f2:	4b3f      	ldr	r3, [pc, #252]	@ (800a2f0 <__mdiff+0x120>)
 800a1f4:	f240 2137 	movw	r1, #567	@ 0x237
 800a1f8:	483e      	ldr	r0, [pc, #248]	@ (800a2f4 <__mdiff+0x124>)
 800a1fa:	f7fe fa4d 	bl	8008698 <__assert_func>
 800a1fe:	2301      	movs	r3, #1
 800a200:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a204:	4610      	mov	r0, r2
 800a206:	b003      	add	sp, #12
 800a208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a20c:	bfbc      	itt	lt
 800a20e:	464b      	movlt	r3, r9
 800a210:	46a1      	movlt	r9, r4
 800a212:	4630      	mov	r0, r6
 800a214:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a218:	bfba      	itte	lt
 800a21a:	461c      	movlt	r4, r3
 800a21c:	2501      	movlt	r5, #1
 800a21e:	2500      	movge	r5, #0
 800a220:	f7ff fcfe 	bl	8009c20 <_Balloc>
 800a224:	4602      	mov	r2, r0
 800a226:	b918      	cbnz	r0, 800a230 <__mdiff+0x60>
 800a228:	4b31      	ldr	r3, [pc, #196]	@ (800a2f0 <__mdiff+0x120>)
 800a22a:	f240 2145 	movw	r1, #581	@ 0x245
 800a22e:	e7e3      	b.n	800a1f8 <__mdiff+0x28>
 800a230:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a234:	6926      	ldr	r6, [r4, #16]
 800a236:	60c5      	str	r5, [r0, #12]
 800a238:	f109 0310 	add.w	r3, r9, #16
 800a23c:	f109 0514 	add.w	r5, r9, #20
 800a240:	f104 0e14 	add.w	lr, r4, #20
 800a244:	f100 0b14 	add.w	fp, r0, #20
 800a248:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a24c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a250:	9301      	str	r3, [sp, #4]
 800a252:	46d9      	mov	r9, fp
 800a254:	f04f 0c00 	mov.w	ip, #0
 800a258:	9b01      	ldr	r3, [sp, #4]
 800a25a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a25e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a262:	9301      	str	r3, [sp, #4]
 800a264:	fa1f f38a 	uxth.w	r3, sl
 800a268:	4619      	mov	r1, r3
 800a26a:	b283      	uxth	r3, r0
 800a26c:	1acb      	subs	r3, r1, r3
 800a26e:	0c00      	lsrs	r0, r0, #16
 800a270:	4463      	add	r3, ip
 800a272:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a276:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a280:	4576      	cmp	r6, lr
 800a282:	f849 3b04 	str.w	r3, [r9], #4
 800a286:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a28a:	d8e5      	bhi.n	800a258 <__mdiff+0x88>
 800a28c:	1b33      	subs	r3, r6, r4
 800a28e:	3b15      	subs	r3, #21
 800a290:	f023 0303 	bic.w	r3, r3, #3
 800a294:	3415      	adds	r4, #21
 800a296:	3304      	adds	r3, #4
 800a298:	42a6      	cmp	r6, r4
 800a29a:	bf38      	it	cc
 800a29c:	2304      	movcc	r3, #4
 800a29e:	441d      	add	r5, r3
 800a2a0:	445b      	add	r3, fp
 800a2a2:	461e      	mov	r6, r3
 800a2a4:	462c      	mov	r4, r5
 800a2a6:	4544      	cmp	r4, r8
 800a2a8:	d30e      	bcc.n	800a2c8 <__mdiff+0xf8>
 800a2aa:	f108 0103 	add.w	r1, r8, #3
 800a2ae:	1b49      	subs	r1, r1, r5
 800a2b0:	f021 0103 	bic.w	r1, r1, #3
 800a2b4:	3d03      	subs	r5, #3
 800a2b6:	45a8      	cmp	r8, r5
 800a2b8:	bf38      	it	cc
 800a2ba:	2100      	movcc	r1, #0
 800a2bc:	440b      	add	r3, r1
 800a2be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a2c2:	b191      	cbz	r1, 800a2ea <__mdiff+0x11a>
 800a2c4:	6117      	str	r7, [r2, #16]
 800a2c6:	e79d      	b.n	800a204 <__mdiff+0x34>
 800a2c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a2cc:	46e6      	mov	lr, ip
 800a2ce:	0c08      	lsrs	r0, r1, #16
 800a2d0:	fa1c fc81 	uxtah	ip, ip, r1
 800a2d4:	4471      	add	r1, lr
 800a2d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a2da:	b289      	uxth	r1, r1
 800a2dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a2e0:	f846 1b04 	str.w	r1, [r6], #4
 800a2e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a2e8:	e7dd      	b.n	800a2a6 <__mdiff+0xd6>
 800a2ea:	3f01      	subs	r7, #1
 800a2ec:	e7e7      	b.n	800a2be <__mdiff+0xee>
 800a2ee:	bf00      	nop
 800a2f0:	0800c318 	.word	0x0800c318
 800a2f4:	0800c389 	.word	0x0800c389

0800a2f8 <__ulp>:
 800a2f8:	b082      	sub	sp, #8
 800a2fa:	ed8d 0b00 	vstr	d0, [sp]
 800a2fe:	9a01      	ldr	r2, [sp, #4]
 800a300:	4b0f      	ldr	r3, [pc, #60]	@ (800a340 <__ulp+0x48>)
 800a302:	4013      	ands	r3, r2
 800a304:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a308:	2b00      	cmp	r3, #0
 800a30a:	dc08      	bgt.n	800a31e <__ulp+0x26>
 800a30c:	425b      	negs	r3, r3
 800a30e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a312:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a316:	da04      	bge.n	800a322 <__ulp+0x2a>
 800a318:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a31c:	4113      	asrs	r3, r2
 800a31e:	2200      	movs	r2, #0
 800a320:	e008      	b.n	800a334 <__ulp+0x3c>
 800a322:	f1a2 0314 	sub.w	r3, r2, #20
 800a326:	2b1e      	cmp	r3, #30
 800a328:	bfda      	itte	le
 800a32a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a32e:	40da      	lsrle	r2, r3
 800a330:	2201      	movgt	r2, #1
 800a332:	2300      	movs	r3, #0
 800a334:	4619      	mov	r1, r3
 800a336:	4610      	mov	r0, r2
 800a338:	ec41 0b10 	vmov	d0, r0, r1
 800a33c:	b002      	add	sp, #8
 800a33e:	4770      	bx	lr
 800a340:	7ff00000 	.word	0x7ff00000

0800a344 <__b2d>:
 800a344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a348:	6906      	ldr	r6, [r0, #16]
 800a34a:	f100 0814 	add.w	r8, r0, #20
 800a34e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a352:	1f37      	subs	r7, r6, #4
 800a354:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a358:	4610      	mov	r0, r2
 800a35a:	f7ff fd53 	bl	8009e04 <__hi0bits>
 800a35e:	f1c0 0320 	rsb	r3, r0, #32
 800a362:	280a      	cmp	r0, #10
 800a364:	600b      	str	r3, [r1, #0]
 800a366:	491b      	ldr	r1, [pc, #108]	@ (800a3d4 <__b2d+0x90>)
 800a368:	dc15      	bgt.n	800a396 <__b2d+0x52>
 800a36a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a36e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a372:	45b8      	cmp	r8, r7
 800a374:	ea43 0501 	orr.w	r5, r3, r1
 800a378:	bf34      	ite	cc
 800a37a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a37e:	2300      	movcs	r3, #0
 800a380:	3015      	adds	r0, #21
 800a382:	fa02 f000 	lsl.w	r0, r2, r0
 800a386:	fa23 f30c 	lsr.w	r3, r3, ip
 800a38a:	4303      	orrs	r3, r0
 800a38c:	461c      	mov	r4, r3
 800a38e:	ec45 4b10 	vmov	d0, r4, r5
 800a392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a396:	45b8      	cmp	r8, r7
 800a398:	bf3a      	itte	cc
 800a39a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a39e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a3a2:	2300      	movcs	r3, #0
 800a3a4:	380b      	subs	r0, #11
 800a3a6:	d012      	beq.n	800a3ce <__b2d+0x8a>
 800a3a8:	f1c0 0120 	rsb	r1, r0, #32
 800a3ac:	fa23 f401 	lsr.w	r4, r3, r1
 800a3b0:	4082      	lsls	r2, r0
 800a3b2:	4322      	orrs	r2, r4
 800a3b4:	4547      	cmp	r7, r8
 800a3b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a3ba:	bf8c      	ite	hi
 800a3bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a3c0:	2200      	movls	r2, #0
 800a3c2:	4083      	lsls	r3, r0
 800a3c4:	40ca      	lsrs	r2, r1
 800a3c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	e7de      	b.n	800a38c <__b2d+0x48>
 800a3ce:	ea42 0501 	orr.w	r5, r2, r1
 800a3d2:	e7db      	b.n	800a38c <__b2d+0x48>
 800a3d4:	3ff00000 	.word	0x3ff00000

0800a3d8 <__d2b>:
 800a3d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a3dc:	460f      	mov	r7, r1
 800a3de:	2101      	movs	r1, #1
 800a3e0:	ec59 8b10 	vmov	r8, r9, d0
 800a3e4:	4616      	mov	r6, r2
 800a3e6:	f7ff fc1b 	bl	8009c20 <_Balloc>
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	b930      	cbnz	r0, 800a3fc <__d2b+0x24>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	4b23      	ldr	r3, [pc, #140]	@ (800a480 <__d2b+0xa8>)
 800a3f2:	4824      	ldr	r0, [pc, #144]	@ (800a484 <__d2b+0xac>)
 800a3f4:	f240 310f 	movw	r1, #783	@ 0x30f
 800a3f8:	f7fe f94e 	bl	8008698 <__assert_func>
 800a3fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a400:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a404:	b10d      	cbz	r5, 800a40a <__d2b+0x32>
 800a406:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a40a:	9301      	str	r3, [sp, #4]
 800a40c:	f1b8 0300 	subs.w	r3, r8, #0
 800a410:	d023      	beq.n	800a45a <__d2b+0x82>
 800a412:	4668      	mov	r0, sp
 800a414:	9300      	str	r3, [sp, #0]
 800a416:	f7ff fd14 	bl	8009e42 <__lo0bits>
 800a41a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a41e:	b1d0      	cbz	r0, 800a456 <__d2b+0x7e>
 800a420:	f1c0 0320 	rsb	r3, r0, #32
 800a424:	fa02 f303 	lsl.w	r3, r2, r3
 800a428:	430b      	orrs	r3, r1
 800a42a:	40c2      	lsrs	r2, r0
 800a42c:	6163      	str	r3, [r4, #20]
 800a42e:	9201      	str	r2, [sp, #4]
 800a430:	9b01      	ldr	r3, [sp, #4]
 800a432:	61a3      	str	r3, [r4, #24]
 800a434:	2b00      	cmp	r3, #0
 800a436:	bf0c      	ite	eq
 800a438:	2201      	moveq	r2, #1
 800a43a:	2202      	movne	r2, #2
 800a43c:	6122      	str	r2, [r4, #16]
 800a43e:	b1a5      	cbz	r5, 800a46a <__d2b+0x92>
 800a440:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a444:	4405      	add	r5, r0
 800a446:	603d      	str	r5, [r7, #0]
 800a448:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a44c:	6030      	str	r0, [r6, #0]
 800a44e:	4620      	mov	r0, r4
 800a450:	b003      	add	sp, #12
 800a452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a456:	6161      	str	r1, [r4, #20]
 800a458:	e7ea      	b.n	800a430 <__d2b+0x58>
 800a45a:	a801      	add	r0, sp, #4
 800a45c:	f7ff fcf1 	bl	8009e42 <__lo0bits>
 800a460:	9b01      	ldr	r3, [sp, #4]
 800a462:	6163      	str	r3, [r4, #20]
 800a464:	3020      	adds	r0, #32
 800a466:	2201      	movs	r2, #1
 800a468:	e7e8      	b.n	800a43c <__d2b+0x64>
 800a46a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a46e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a472:	6038      	str	r0, [r7, #0]
 800a474:	6918      	ldr	r0, [r3, #16]
 800a476:	f7ff fcc5 	bl	8009e04 <__hi0bits>
 800a47a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a47e:	e7e5      	b.n	800a44c <__d2b+0x74>
 800a480:	0800c318 	.word	0x0800c318
 800a484:	0800c389 	.word	0x0800c389

0800a488 <__ratio>:
 800a488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a48c:	b085      	sub	sp, #20
 800a48e:	e9cd 1000 	strd	r1, r0, [sp]
 800a492:	a902      	add	r1, sp, #8
 800a494:	f7ff ff56 	bl	800a344 <__b2d>
 800a498:	9800      	ldr	r0, [sp, #0]
 800a49a:	a903      	add	r1, sp, #12
 800a49c:	ec55 4b10 	vmov	r4, r5, d0
 800a4a0:	f7ff ff50 	bl	800a344 <__b2d>
 800a4a4:	9b01      	ldr	r3, [sp, #4]
 800a4a6:	6919      	ldr	r1, [r3, #16]
 800a4a8:	9b00      	ldr	r3, [sp, #0]
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	1ac9      	subs	r1, r1, r3
 800a4ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a4b2:	1a9b      	subs	r3, r3, r2
 800a4b4:	ec5b ab10 	vmov	sl, fp, d0
 800a4b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	bfce      	itee	gt
 800a4c0:	462a      	movgt	r2, r5
 800a4c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a4c6:	465a      	movle	r2, fp
 800a4c8:	462f      	mov	r7, r5
 800a4ca:	46d9      	mov	r9, fp
 800a4cc:	bfcc      	ite	gt
 800a4ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a4d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a4d6:	464b      	mov	r3, r9
 800a4d8:	4652      	mov	r2, sl
 800a4da:	4620      	mov	r0, r4
 800a4dc:	4639      	mov	r1, r7
 800a4de:	f7f6 f9cd 	bl	800087c <__aeabi_ddiv>
 800a4e2:	ec41 0b10 	vmov	d0, r0, r1
 800a4e6:	b005      	add	sp, #20
 800a4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a4ec <__copybits>:
 800a4ec:	3901      	subs	r1, #1
 800a4ee:	b570      	push	{r4, r5, r6, lr}
 800a4f0:	1149      	asrs	r1, r1, #5
 800a4f2:	6914      	ldr	r4, [r2, #16]
 800a4f4:	3101      	adds	r1, #1
 800a4f6:	f102 0314 	add.w	r3, r2, #20
 800a4fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a4fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a502:	1f05      	subs	r5, r0, #4
 800a504:	42a3      	cmp	r3, r4
 800a506:	d30c      	bcc.n	800a522 <__copybits+0x36>
 800a508:	1aa3      	subs	r3, r4, r2
 800a50a:	3b11      	subs	r3, #17
 800a50c:	f023 0303 	bic.w	r3, r3, #3
 800a510:	3211      	adds	r2, #17
 800a512:	42a2      	cmp	r2, r4
 800a514:	bf88      	it	hi
 800a516:	2300      	movhi	r3, #0
 800a518:	4418      	add	r0, r3
 800a51a:	2300      	movs	r3, #0
 800a51c:	4288      	cmp	r0, r1
 800a51e:	d305      	bcc.n	800a52c <__copybits+0x40>
 800a520:	bd70      	pop	{r4, r5, r6, pc}
 800a522:	f853 6b04 	ldr.w	r6, [r3], #4
 800a526:	f845 6f04 	str.w	r6, [r5, #4]!
 800a52a:	e7eb      	b.n	800a504 <__copybits+0x18>
 800a52c:	f840 3b04 	str.w	r3, [r0], #4
 800a530:	e7f4      	b.n	800a51c <__copybits+0x30>

0800a532 <__any_on>:
 800a532:	f100 0214 	add.w	r2, r0, #20
 800a536:	6900      	ldr	r0, [r0, #16]
 800a538:	114b      	asrs	r3, r1, #5
 800a53a:	4298      	cmp	r0, r3
 800a53c:	b510      	push	{r4, lr}
 800a53e:	db11      	blt.n	800a564 <__any_on+0x32>
 800a540:	dd0a      	ble.n	800a558 <__any_on+0x26>
 800a542:	f011 011f 	ands.w	r1, r1, #31
 800a546:	d007      	beq.n	800a558 <__any_on+0x26>
 800a548:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a54c:	fa24 f001 	lsr.w	r0, r4, r1
 800a550:	fa00 f101 	lsl.w	r1, r0, r1
 800a554:	428c      	cmp	r4, r1
 800a556:	d10b      	bne.n	800a570 <__any_on+0x3e>
 800a558:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d803      	bhi.n	800a568 <__any_on+0x36>
 800a560:	2000      	movs	r0, #0
 800a562:	bd10      	pop	{r4, pc}
 800a564:	4603      	mov	r3, r0
 800a566:	e7f7      	b.n	800a558 <__any_on+0x26>
 800a568:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a56c:	2900      	cmp	r1, #0
 800a56e:	d0f5      	beq.n	800a55c <__any_on+0x2a>
 800a570:	2001      	movs	r0, #1
 800a572:	e7f6      	b.n	800a562 <__any_on+0x30>

0800a574 <__ascii_wctomb>:
 800a574:	4603      	mov	r3, r0
 800a576:	4608      	mov	r0, r1
 800a578:	b141      	cbz	r1, 800a58c <__ascii_wctomb+0x18>
 800a57a:	2aff      	cmp	r2, #255	@ 0xff
 800a57c:	d904      	bls.n	800a588 <__ascii_wctomb+0x14>
 800a57e:	228a      	movs	r2, #138	@ 0x8a
 800a580:	601a      	str	r2, [r3, #0]
 800a582:	f04f 30ff 	mov.w	r0, #4294967295
 800a586:	4770      	bx	lr
 800a588:	700a      	strb	r2, [r1, #0]
 800a58a:	2001      	movs	r0, #1
 800a58c:	4770      	bx	lr

0800a58e <__ssputs_r>:
 800a58e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a592:	688e      	ldr	r6, [r1, #8]
 800a594:	461f      	mov	r7, r3
 800a596:	42be      	cmp	r6, r7
 800a598:	680b      	ldr	r3, [r1, #0]
 800a59a:	4682      	mov	sl, r0
 800a59c:	460c      	mov	r4, r1
 800a59e:	4690      	mov	r8, r2
 800a5a0:	d82d      	bhi.n	800a5fe <__ssputs_r+0x70>
 800a5a2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5a6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a5aa:	d026      	beq.n	800a5fa <__ssputs_r+0x6c>
 800a5ac:	6965      	ldr	r5, [r4, #20]
 800a5ae:	6909      	ldr	r1, [r1, #16]
 800a5b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5b4:	eba3 0901 	sub.w	r9, r3, r1
 800a5b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5bc:	1c7b      	adds	r3, r7, #1
 800a5be:	444b      	add	r3, r9
 800a5c0:	106d      	asrs	r5, r5, #1
 800a5c2:	429d      	cmp	r5, r3
 800a5c4:	bf38      	it	cc
 800a5c6:	461d      	movcc	r5, r3
 800a5c8:	0553      	lsls	r3, r2, #21
 800a5ca:	d527      	bpl.n	800a61c <__ssputs_r+0x8e>
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	f7ff fa89 	bl	8009ae4 <_malloc_r>
 800a5d2:	4606      	mov	r6, r0
 800a5d4:	b360      	cbz	r0, 800a630 <__ssputs_r+0xa2>
 800a5d6:	6921      	ldr	r1, [r4, #16]
 800a5d8:	464a      	mov	r2, r9
 800a5da:	f7fe f844 	bl	8008666 <memcpy>
 800a5de:	89a3      	ldrh	r3, [r4, #12]
 800a5e0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a5e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5e8:	81a3      	strh	r3, [r4, #12]
 800a5ea:	6126      	str	r6, [r4, #16]
 800a5ec:	6165      	str	r5, [r4, #20]
 800a5ee:	444e      	add	r6, r9
 800a5f0:	eba5 0509 	sub.w	r5, r5, r9
 800a5f4:	6026      	str	r6, [r4, #0]
 800a5f6:	60a5      	str	r5, [r4, #8]
 800a5f8:	463e      	mov	r6, r7
 800a5fa:	42be      	cmp	r6, r7
 800a5fc:	d900      	bls.n	800a600 <__ssputs_r+0x72>
 800a5fe:	463e      	mov	r6, r7
 800a600:	6820      	ldr	r0, [r4, #0]
 800a602:	4632      	mov	r2, r6
 800a604:	4641      	mov	r1, r8
 800a606:	f000 fbaf 	bl	800ad68 <memmove>
 800a60a:	68a3      	ldr	r3, [r4, #8]
 800a60c:	1b9b      	subs	r3, r3, r6
 800a60e:	60a3      	str	r3, [r4, #8]
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	4433      	add	r3, r6
 800a614:	6023      	str	r3, [r4, #0]
 800a616:	2000      	movs	r0, #0
 800a618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a61c:	462a      	mov	r2, r5
 800a61e:	f000 fc0a 	bl	800ae36 <_realloc_r>
 800a622:	4606      	mov	r6, r0
 800a624:	2800      	cmp	r0, #0
 800a626:	d1e0      	bne.n	800a5ea <__ssputs_r+0x5c>
 800a628:	6921      	ldr	r1, [r4, #16]
 800a62a:	4650      	mov	r0, sl
 800a62c:	f7fe feac 	bl	8009388 <_free_r>
 800a630:	230c      	movs	r3, #12
 800a632:	f8ca 3000 	str.w	r3, [sl]
 800a636:	89a3      	ldrh	r3, [r4, #12]
 800a638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a63c:	81a3      	strh	r3, [r4, #12]
 800a63e:	f04f 30ff 	mov.w	r0, #4294967295
 800a642:	e7e9      	b.n	800a618 <__ssputs_r+0x8a>

0800a644 <_svfiprintf_r>:
 800a644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a648:	4698      	mov	r8, r3
 800a64a:	898b      	ldrh	r3, [r1, #12]
 800a64c:	061b      	lsls	r3, r3, #24
 800a64e:	b09d      	sub	sp, #116	@ 0x74
 800a650:	4607      	mov	r7, r0
 800a652:	460d      	mov	r5, r1
 800a654:	4614      	mov	r4, r2
 800a656:	d510      	bpl.n	800a67a <_svfiprintf_r+0x36>
 800a658:	690b      	ldr	r3, [r1, #16]
 800a65a:	b973      	cbnz	r3, 800a67a <_svfiprintf_r+0x36>
 800a65c:	2140      	movs	r1, #64	@ 0x40
 800a65e:	f7ff fa41 	bl	8009ae4 <_malloc_r>
 800a662:	6028      	str	r0, [r5, #0]
 800a664:	6128      	str	r0, [r5, #16]
 800a666:	b930      	cbnz	r0, 800a676 <_svfiprintf_r+0x32>
 800a668:	230c      	movs	r3, #12
 800a66a:	603b      	str	r3, [r7, #0]
 800a66c:	f04f 30ff 	mov.w	r0, #4294967295
 800a670:	b01d      	add	sp, #116	@ 0x74
 800a672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a676:	2340      	movs	r3, #64	@ 0x40
 800a678:	616b      	str	r3, [r5, #20]
 800a67a:	2300      	movs	r3, #0
 800a67c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a67e:	2320      	movs	r3, #32
 800a680:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a684:	f8cd 800c 	str.w	r8, [sp, #12]
 800a688:	2330      	movs	r3, #48	@ 0x30
 800a68a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a828 <_svfiprintf_r+0x1e4>
 800a68e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a692:	f04f 0901 	mov.w	r9, #1
 800a696:	4623      	mov	r3, r4
 800a698:	469a      	mov	sl, r3
 800a69a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a69e:	b10a      	cbz	r2, 800a6a4 <_svfiprintf_r+0x60>
 800a6a0:	2a25      	cmp	r2, #37	@ 0x25
 800a6a2:	d1f9      	bne.n	800a698 <_svfiprintf_r+0x54>
 800a6a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a6a8:	d00b      	beq.n	800a6c2 <_svfiprintf_r+0x7e>
 800a6aa:	465b      	mov	r3, fp
 800a6ac:	4622      	mov	r2, r4
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	4638      	mov	r0, r7
 800a6b2:	f7ff ff6c 	bl	800a58e <__ssputs_r>
 800a6b6:	3001      	adds	r0, #1
 800a6b8:	f000 80a7 	beq.w	800a80a <_svfiprintf_r+0x1c6>
 800a6bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6be:	445a      	add	r2, fp
 800a6c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f000 809f 	beq.w	800a80a <_svfiprintf_r+0x1c6>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6d6:	f10a 0a01 	add.w	sl, sl, #1
 800a6da:	9304      	str	r3, [sp, #16]
 800a6dc:	9307      	str	r3, [sp, #28]
 800a6de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a6e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6e4:	4654      	mov	r4, sl
 800a6e6:	2205      	movs	r2, #5
 800a6e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ec:	484e      	ldr	r0, [pc, #312]	@ (800a828 <_svfiprintf_r+0x1e4>)
 800a6ee:	f7f5 fd87 	bl	8000200 <memchr>
 800a6f2:	9a04      	ldr	r2, [sp, #16]
 800a6f4:	b9d8      	cbnz	r0, 800a72e <_svfiprintf_r+0xea>
 800a6f6:	06d0      	lsls	r0, r2, #27
 800a6f8:	bf44      	itt	mi
 800a6fa:	2320      	movmi	r3, #32
 800a6fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a700:	0711      	lsls	r1, r2, #28
 800a702:	bf44      	itt	mi
 800a704:	232b      	movmi	r3, #43	@ 0x2b
 800a706:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a70a:	f89a 3000 	ldrb.w	r3, [sl]
 800a70e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a710:	d015      	beq.n	800a73e <_svfiprintf_r+0xfa>
 800a712:	9a07      	ldr	r2, [sp, #28]
 800a714:	4654      	mov	r4, sl
 800a716:	2000      	movs	r0, #0
 800a718:	f04f 0c0a 	mov.w	ip, #10
 800a71c:	4621      	mov	r1, r4
 800a71e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a722:	3b30      	subs	r3, #48	@ 0x30
 800a724:	2b09      	cmp	r3, #9
 800a726:	d94b      	bls.n	800a7c0 <_svfiprintf_r+0x17c>
 800a728:	b1b0      	cbz	r0, 800a758 <_svfiprintf_r+0x114>
 800a72a:	9207      	str	r2, [sp, #28]
 800a72c:	e014      	b.n	800a758 <_svfiprintf_r+0x114>
 800a72e:	eba0 0308 	sub.w	r3, r0, r8
 800a732:	fa09 f303 	lsl.w	r3, r9, r3
 800a736:	4313      	orrs	r3, r2
 800a738:	9304      	str	r3, [sp, #16]
 800a73a:	46a2      	mov	sl, r4
 800a73c:	e7d2      	b.n	800a6e4 <_svfiprintf_r+0xa0>
 800a73e:	9b03      	ldr	r3, [sp, #12]
 800a740:	1d19      	adds	r1, r3, #4
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	9103      	str	r1, [sp, #12]
 800a746:	2b00      	cmp	r3, #0
 800a748:	bfbb      	ittet	lt
 800a74a:	425b      	neglt	r3, r3
 800a74c:	f042 0202 	orrlt.w	r2, r2, #2
 800a750:	9307      	strge	r3, [sp, #28]
 800a752:	9307      	strlt	r3, [sp, #28]
 800a754:	bfb8      	it	lt
 800a756:	9204      	strlt	r2, [sp, #16]
 800a758:	7823      	ldrb	r3, [r4, #0]
 800a75a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a75c:	d10a      	bne.n	800a774 <_svfiprintf_r+0x130>
 800a75e:	7863      	ldrb	r3, [r4, #1]
 800a760:	2b2a      	cmp	r3, #42	@ 0x2a
 800a762:	d132      	bne.n	800a7ca <_svfiprintf_r+0x186>
 800a764:	9b03      	ldr	r3, [sp, #12]
 800a766:	1d1a      	adds	r2, r3, #4
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	9203      	str	r2, [sp, #12]
 800a76c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a770:	3402      	adds	r4, #2
 800a772:	9305      	str	r3, [sp, #20]
 800a774:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a838 <_svfiprintf_r+0x1f4>
 800a778:	7821      	ldrb	r1, [r4, #0]
 800a77a:	2203      	movs	r2, #3
 800a77c:	4650      	mov	r0, sl
 800a77e:	f7f5 fd3f 	bl	8000200 <memchr>
 800a782:	b138      	cbz	r0, 800a794 <_svfiprintf_r+0x150>
 800a784:	9b04      	ldr	r3, [sp, #16]
 800a786:	eba0 000a 	sub.w	r0, r0, sl
 800a78a:	2240      	movs	r2, #64	@ 0x40
 800a78c:	4082      	lsls	r2, r0
 800a78e:	4313      	orrs	r3, r2
 800a790:	3401      	adds	r4, #1
 800a792:	9304      	str	r3, [sp, #16]
 800a794:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a798:	4824      	ldr	r0, [pc, #144]	@ (800a82c <_svfiprintf_r+0x1e8>)
 800a79a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a79e:	2206      	movs	r2, #6
 800a7a0:	f7f5 fd2e 	bl	8000200 <memchr>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d036      	beq.n	800a816 <_svfiprintf_r+0x1d2>
 800a7a8:	4b21      	ldr	r3, [pc, #132]	@ (800a830 <_svfiprintf_r+0x1ec>)
 800a7aa:	bb1b      	cbnz	r3, 800a7f4 <_svfiprintf_r+0x1b0>
 800a7ac:	9b03      	ldr	r3, [sp, #12]
 800a7ae:	3307      	adds	r3, #7
 800a7b0:	f023 0307 	bic.w	r3, r3, #7
 800a7b4:	3308      	adds	r3, #8
 800a7b6:	9303      	str	r3, [sp, #12]
 800a7b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ba:	4433      	add	r3, r6
 800a7bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7be:	e76a      	b.n	800a696 <_svfiprintf_r+0x52>
 800a7c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7c4:	460c      	mov	r4, r1
 800a7c6:	2001      	movs	r0, #1
 800a7c8:	e7a8      	b.n	800a71c <_svfiprintf_r+0xd8>
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	3401      	adds	r4, #1
 800a7ce:	9305      	str	r3, [sp, #20]
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	f04f 0c0a 	mov.w	ip, #10
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7dc:	3a30      	subs	r2, #48	@ 0x30
 800a7de:	2a09      	cmp	r2, #9
 800a7e0:	d903      	bls.n	800a7ea <_svfiprintf_r+0x1a6>
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d0c6      	beq.n	800a774 <_svfiprintf_r+0x130>
 800a7e6:	9105      	str	r1, [sp, #20]
 800a7e8:	e7c4      	b.n	800a774 <_svfiprintf_r+0x130>
 800a7ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e7f0      	b.n	800a7d6 <_svfiprintf_r+0x192>
 800a7f4:	ab03      	add	r3, sp, #12
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	462a      	mov	r2, r5
 800a7fa:	4b0e      	ldr	r3, [pc, #56]	@ (800a834 <_svfiprintf_r+0x1f0>)
 800a7fc:	a904      	add	r1, sp, #16
 800a7fe:	4638      	mov	r0, r7
 800a800:	f7fd f82e 	bl	8007860 <_printf_float>
 800a804:	1c42      	adds	r2, r0, #1
 800a806:	4606      	mov	r6, r0
 800a808:	d1d6      	bne.n	800a7b8 <_svfiprintf_r+0x174>
 800a80a:	89ab      	ldrh	r3, [r5, #12]
 800a80c:	065b      	lsls	r3, r3, #25
 800a80e:	f53f af2d 	bmi.w	800a66c <_svfiprintf_r+0x28>
 800a812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a814:	e72c      	b.n	800a670 <_svfiprintf_r+0x2c>
 800a816:	ab03      	add	r3, sp, #12
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	462a      	mov	r2, r5
 800a81c:	4b05      	ldr	r3, [pc, #20]	@ (800a834 <_svfiprintf_r+0x1f0>)
 800a81e:	a904      	add	r1, sp, #16
 800a820:	4638      	mov	r0, r7
 800a822:	f7fd fab5 	bl	8007d90 <_printf_i>
 800a826:	e7ed      	b.n	800a804 <_svfiprintf_r+0x1c0>
 800a828:	0800c3e2 	.word	0x0800c3e2
 800a82c:	0800c3ec 	.word	0x0800c3ec
 800a830:	08007861 	.word	0x08007861
 800a834:	0800a58f 	.word	0x0800a58f
 800a838:	0800c3e8 	.word	0x0800c3e8

0800a83c <__sfputc_r>:
 800a83c:	6893      	ldr	r3, [r2, #8]
 800a83e:	3b01      	subs	r3, #1
 800a840:	2b00      	cmp	r3, #0
 800a842:	b410      	push	{r4}
 800a844:	6093      	str	r3, [r2, #8]
 800a846:	da08      	bge.n	800a85a <__sfputc_r+0x1e>
 800a848:	6994      	ldr	r4, [r2, #24]
 800a84a:	42a3      	cmp	r3, r4
 800a84c:	db01      	blt.n	800a852 <__sfputc_r+0x16>
 800a84e:	290a      	cmp	r1, #10
 800a850:	d103      	bne.n	800a85a <__sfputc_r+0x1e>
 800a852:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a856:	f7fd bd58 	b.w	800830a <__swbuf_r>
 800a85a:	6813      	ldr	r3, [r2, #0]
 800a85c:	1c58      	adds	r0, r3, #1
 800a85e:	6010      	str	r0, [r2, #0]
 800a860:	7019      	strb	r1, [r3, #0]
 800a862:	4608      	mov	r0, r1
 800a864:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <__sfputs_r>:
 800a86a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86c:	4606      	mov	r6, r0
 800a86e:	460f      	mov	r7, r1
 800a870:	4614      	mov	r4, r2
 800a872:	18d5      	adds	r5, r2, r3
 800a874:	42ac      	cmp	r4, r5
 800a876:	d101      	bne.n	800a87c <__sfputs_r+0x12>
 800a878:	2000      	movs	r0, #0
 800a87a:	e007      	b.n	800a88c <__sfputs_r+0x22>
 800a87c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a880:	463a      	mov	r2, r7
 800a882:	4630      	mov	r0, r6
 800a884:	f7ff ffda 	bl	800a83c <__sfputc_r>
 800a888:	1c43      	adds	r3, r0, #1
 800a88a:	d1f3      	bne.n	800a874 <__sfputs_r+0xa>
 800a88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a890 <_vfiprintf_r>:
 800a890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a894:	460d      	mov	r5, r1
 800a896:	b09d      	sub	sp, #116	@ 0x74
 800a898:	4614      	mov	r4, r2
 800a89a:	4698      	mov	r8, r3
 800a89c:	4606      	mov	r6, r0
 800a89e:	b118      	cbz	r0, 800a8a8 <_vfiprintf_r+0x18>
 800a8a0:	6a03      	ldr	r3, [r0, #32]
 800a8a2:	b90b      	cbnz	r3, 800a8a8 <_vfiprintf_r+0x18>
 800a8a4:	f7fd fc1e 	bl	80080e4 <__sinit>
 800a8a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8aa:	07d9      	lsls	r1, r3, #31
 800a8ac:	d405      	bmi.n	800a8ba <_vfiprintf_r+0x2a>
 800a8ae:	89ab      	ldrh	r3, [r5, #12]
 800a8b0:	059a      	lsls	r2, r3, #22
 800a8b2:	d402      	bmi.n	800a8ba <_vfiprintf_r+0x2a>
 800a8b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8b6:	f7fd fecc 	bl	8008652 <__retarget_lock_acquire_recursive>
 800a8ba:	89ab      	ldrh	r3, [r5, #12]
 800a8bc:	071b      	lsls	r3, r3, #28
 800a8be:	d501      	bpl.n	800a8c4 <_vfiprintf_r+0x34>
 800a8c0:	692b      	ldr	r3, [r5, #16]
 800a8c2:	b99b      	cbnz	r3, 800a8ec <_vfiprintf_r+0x5c>
 800a8c4:	4629      	mov	r1, r5
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	f7fd fd5e 	bl	8008388 <__swsetup_r>
 800a8cc:	b170      	cbz	r0, 800a8ec <_vfiprintf_r+0x5c>
 800a8ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8d0:	07dc      	lsls	r4, r3, #31
 800a8d2:	d504      	bpl.n	800a8de <_vfiprintf_r+0x4e>
 800a8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d8:	b01d      	add	sp, #116	@ 0x74
 800a8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8de:	89ab      	ldrh	r3, [r5, #12]
 800a8e0:	0598      	lsls	r0, r3, #22
 800a8e2:	d4f7      	bmi.n	800a8d4 <_vfiprintf_r+0x44>
 800a8e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8e6:	f7fd feb5 	bl	8008654 <__retarget_lock_release_recursive>
 800a8ea:	e7f3      	b.n	800a8d4 <_vfiprintf_r+0x44>
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8f0:	2320      	movs	r3, #32
 800a8f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8fa:	2330      	movs	r3, #48	@ 0x30
 800a8fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aaac <_vfiprintf_r+0x21c>
 800a900:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a904:	f04f 0901 	mov.w	r9, #1
 800a908:	4623      	mov	r3, r4
 800a90a:	469a      	mov	sl, r3
 800a90c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a910:	b10a      	cbz	r2, 800a916 <_vfiprintf_r+0x86>
 800a912:	2a25      	cmp	r2, #37	@ 0x25
 800a914:	d1f9      	bne.n	800a90a <_vfiprintf_r+0x7a>
 800a916:	ebba 0b04 	subs.w	fp, sl, r4
 800a91a:	d00b      	beq.n	800a934 <_vfiprintf_r+0xa4>
 800a91c:	465b      	mov	r3, fp
 800a91e:	4622      	mov	r2, r4
 800a920:	4629      	mov	r1, r5
 800a922:	4630      	mov	r0, r6
 800a924:	f7ff ffa1 	bl	800a86a <__sfputs_r>
 800a928:	3001      	adds	r0, #1
 800a92a:	f000 80a7 	beq.w	800aa7c <_vfiprintf_r+0x1ec>
 800a92e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a930:	445a      	add	r2, fp
 800a932:	9209      	str	r2, [sp, #36]	@ 0x24
 800a934:	f89a 3000 	ldrb.w	r3, [sl]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f000 809f 	beq.w	800aa7c <_vfiprintf_r+0x1ec>
 800a93e:	2300      	movs	r3, #0
 800a940:	f04f 32ff 	mov.w	r2, #4294967295
 800a944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a948:	f10a 0a01 	add.w	sl, sl, #1
 800a94c:	9304      	str	r3, [sp, #16]
 800a94e:	9307      	str	r3, [sp, #28]
 800a950:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a954:	931a      	str	r3, [sp, #104]	@ 0x68
 800a956:	4654      	mov	r4, sl
 800a958:	2205      	movs	r2, #5
 800a95a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a95e:	4853      	ldr	r0, [pc, #332]	@ (800aaac <_vfiprintf_r+0x21c>)
 800a960:	f7f5 fc4e 	bl	8000200 <memchr>
 800a964:	9a04      	ldr	r2, [sp, #16]
 800a966:	b9d8      	cbnz	r0, 800a9a0 <_vfiprintf_r+0x110>
 800a968:	06d1      	lsls	r1, r2, #27
 800a96a:	bf44      	itt	mi
 800a96c:	2320      	movmi	r3, #32
 800a96e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a972:	0713      	lsls	r3, r2, #28
 800a974:	bf44      	itt	mi
 800a976:	232b      	movmi	r3, #43	@ 0x2b
 800a978:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a97c:	f89a 3000 	ldrb.w	r3, [sl]
 800a980:	2b2a      	cmp	r3, #42	@ 0x2a
 800a982:	d015      	beq.n	800a9b0 <_vfiprintf_r+0x120>
 800a984:	9a07      	ldr	r2, [sp, #28]
 800a986:	4654      	mov	r4, sl
 800a988:	2000      	movs	r0, #0
 800a98a:	f04f 0c0a 	mov.w	ip, #10
 800a98e:	4621      	mov	r1, r4
 800a990:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a994:	3b30      	subs	r3, #48	@ 0x30
 800a996:	2b09      	cmp	r3, #9
 800a998:	d94b      	bls.n	800aa32 <_vfiprintf_r+0x1a2>
 800a99a:	b1b0      	cbz	r0, 800a9ca <_vfiprintf_r+0x13a>
 800a99c:	9207      	str	r2, [sp, #28]
 800a99e:	e014      	b.n	800a9ca <_vfiprintf_r+0x13a>
 800a9a0:	eba0 0308 	sub.w	r3, r0, r8
 800a9a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	9304      	str	r3, [sp, #16]
 800a9ac:	46a2      	mov	sl, r4
 800a9ae:	e7d2      	b.n	800a956 <_vfiprintf_r+0xc6>
 800a9b0:	9b03      	ldr	r3, [sp, #12]
 800a9b2:	1d19      	adds	r1, r3, #4
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	9103      	str	r1, [sp, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	bfbb      	ittet	lt
 800a9bc:	425b      	neglt	r3, r3
 800a9be:	f042 0202 	orrlt.w	r2, r2, #2
 800a9c2:	9307      	strge	r3, [sp, #28]
 800a9c4:	9307      	strlt	r3, [sp, #28]
 800a9c6:	bfb8      	it	lt
 800a9c8:	9204      	strlt	r2, [sp, #16]
 800a9ca:	7823      	ldrb	r3, [r4, #0]
 800a9cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9ce:	d10a      	bne.n	800a9e6 <_vfiprintf_r+0x156>
 800a9d0:	7863      	ldrb	r3, [r4, #1]
 800a9d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9d4:	d132      	bne.n	800aa3c <_vfiprintf_r+0x1ac>
 800a9d6:	9b03      	ldr	r3, [sp, #12]
 800a9d8:	1d1a      	adds	r2, r3, #4
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	9203      	str	r2, [sp, #12]
 800a9de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a9e2:	3402      	adds	r4, #2
 800a9e4:	9305      	str	r3, [sp, #20]
 800a9e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aabc <_vfiprintf_r+0x22c>
 800a9ea:	7821      	ldrb	r1, [r4, #0]
 800a9ec:	2203      	movs	r2, #3
 800a9ee:	4650      	mov	r0, sl
 800a9f0:	f7f5 fc06 	bl	8000200 <memchr>
 800a9f4:	b138      	cbz	r0, 800aa06 <_vfiprintf_r+0x176>
 800a9f6:	9b04      	ldr	r3, [sp, #16]
 800a9f8:	eba0 000a 	sub.w	r0, r0, sl
 800a9fc:	2240      	movs	r2, #64	@ 0x40
 800a9fe:	4082      	lsls	r2, r0
 800aa00:	4313      	orrs	r3, r2
 800aa02:	3401      	adds	r4, #1
 800aa04:	9304      	str	r3, [sp, #16]
 800aa06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa0a:	4829      	ldr	r0, [pc, #164]	@ (800aab0 <_vfiprintf_r+0x220>)
 800aa0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa10:	2206      	movs	r2, #6
 800aa12:	f7f5 fbf5 	bl	8000200 <memchr>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d03f      	beq.n	800aa9a <_vfiprintf_r+0x20a>
 800aa1a:	4b26      	ldr	r3, [pc, #152]	@ (800aab4 <_vfiprintf_r+0x224>)
 800aa1c:	bb1b      	cbnz	r3, 800aa66 <_vfiprintf_r+0x1d6>
 800aa1e:	9b03      	ldr	r3, [sp, #12]
 800aa20:	3307      	adds	r3, #7
 800aa22:	f023 0307 	bic.w	r3, r3, #7
 800aa26:	3308      	adds	r3, #8
 800aa28:	9303      	str	r3, [sp, #12]
 800aa2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa2c:	443b      	add	r3, r7
 800aa2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa30:	e76a      	b.n	800a908 <_vfiprintf_r+0x78>
 800aa32:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa36:	460c      	mov	r4, r1
 800aa38:	2001      	movs	r0, #1
 800aa3a:	e7a8      	b.n	800a98e <_vfiprintf_r+0xfe>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	3401      	adds	r4, #1
 800aa40:	9305      	str	r3, [sp, #20]
 800aa42:	4619      	mov	r1, r3
 800aa44:	f04f 0c0a 	mov.w	ip, #10
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa4e:	3a30      	subs	r2, #48	@ 0x30
 800aa50:	2a09      	cmp	r2, #9
 800aa52:	d903      	bls.n	800aa5c <_vfiprintf_r+0x1cc>
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d0c6      	beq.n	800a9e6 <_vfiprintf_r+0x156>
 800aa58:	9105      	str	r1, [sp, #20]
 800aa5a:	e7c4      	b.n	800a9e6 <_vfiprintf_r+0x156>
 800aa5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa60:	4604      	mov	r4, r0
 800aa62:	2301      	movs	r3, #1
 800aa64:	e7f0      	b.n	800aa48 <_vfiprintf_r+0x1b8>
 800aa66:	ab03      	add	r3, sp, #12
 800aa68:	9300      	str	r3, [sp, #0]
 800aa6a:	462a      	mov	r2, r5
 800aa6c:	4b12      	ldr	r3, [pc, #72]	@ (800aab8 <_vfiprintf_r+0x228>)
 800aa6e:	a904      	add	r1, sp, #16
 800aa70:	4630      	mov	r0, r6
 800aa72:	f7fc fef5 	bl	8007860 <_printf_float>
 800aa76:	4607      	mov	r7, r0
 800aa78:	1c78      	adds	r0, r7, #1
 800aa7a:	d1d6      	bne.n	800aa2a <_vfiprintf_r+0x19a>
 800aa7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa7e:	07d9      	lsls	r1, r3, #31
 800aa80:	d405      	bmi.n	800aa8e <_vfiprintf_r+0x1fe>
 800aa82:	89ab      	ldrh	r3, [r5, #12]
 800aa84:	059a      	lsls	r2, r3, #22
 800aa86:	d402      	bmi.n	800aa8e <_vfiprintf_r+0x1fe>
 800aa88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa8a:	f7fd fde3 	bl	8008654 <__retarget_lock_release_recursive>
 800aa8e:	89ab      	ldrh	r3, [r5, #12]
 800aa90:	065b      	lsls	r3, r3, #25
 800aa92:	f53f af1f 	bmi.w	800a8d4 <_vfiprintf_r+0x44>
 800aa96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa98:	e71e      	b.n	800a8d8 <_vfiprintf_r+0x48>
 800aa9a:	ab03      	add	r3, sp, #12
 800aa9c:	9300      	str	r3, [sp, #0]
 800aa9e:	462a      	mov	r2, r5
 800aaa0:	4b05      	ldr	r3, [pc, #20]	@ (800aab8 <_vfiprintf_r+0x228>)
 800aaa2:	a904      	add	r1, sp, #16
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	f7fd f973 	bl	8007d90 <_printf_i>
 800aaaa:	e7e4      	b.n	800aa76 <_vfiprintf_r+0x1e6>
 800aaac:	0800c3e2 	.word	0x0800c3e2
 800aab0:	0800c3ec 	.word	0x0800c3ec
 800aab4:	08007861 	.word	0x08007861
 800aab8:	0800a86b 	.word	0x0800a86b
 800aabc:	0800c3e8 	.word	0x0800c3e8

0800aac0 <__sflush_r>:
 800aac0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac8:	0716      	lsls	r6, r2, #28
 800aaca:	4605      	mov	r5, r0
 800aacc:	460c      	mov	r4, r1
 800aace:	d454      	bmi.n	800ab7a <__sflush_r+0xba>
 800aad0:	684b      	ldr	r3, [r1, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	dc02      	bgt.n	800aadc <__sflush_r+0x1c>
 800aad6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aad8:	2b00      	cmp	r3, #0
 800aada:	dd48      	ble.n	800ab6e <__sflush_r+0xae>
 800aadc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aade:	2e00      	cmp	r6, #0
 800aae0:	d045      	beq.n	800ab6e <__sflush_r+0xae>
 800aae2:	2300      	movs	r3, #0
 800aae4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aae8:	682f      	ldr	r7, [r5, #0]
 800aaea:	6a21      	ldr	r1, [r4, #32]
 800aaec:	602b      	str	r3, [r5, #0]
 800aaee:	d030      	beq.n	800ab52 <__sflush_r+0x92>
 800aaf0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aaf2:	89a3      	ldrh	r3, [r4, #12]
 800aaf4:	0759      	lsls	r1, r3, #29
 800aaf6:	d505      	bpl.n	800ab04 <__sflush_r+0x44>
 800aaf8:	6863      	ldr	r3, [r4, #4]
 800aafa:	1ad2      	subs	r2, r2, r3
 800aafc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aafe:	b10b      	cbz	r3, 800ab04 <__sflush_r+0x44>
 800ab00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab02:	1ad2      	subs	r2, r2, r3
 800ab04:	2300      	movs	r3, #0
 800ab06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab08:	6a21      	ldr	r1, [r4, #32]
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	47b0      	blx	r6
 800ab0e:	1c43      	adds	r3, r0, #1
 800ab10:	89a3      	ldrh	r3, [r4, #12]
 800ab12:	d106      	bne.n	800ab22 <__sflush_r+0x62>
 800ab14:	6829      	ldr	r1, [r5, #0]
 800ab16:	291d      	cmp	r1, #29
 800ab18:	d82b      	bhi.n	800ab72 <__sflush_r+0xb2>
 800ab1a:	4a2a      	ldr	r2, [pc, #168]	@ (800abc4 <__sflush_r+0x104>)
 800ab1c:	40ca      	lsrs	r2, r1
 800ab1e:	07d6      	lsls	r6, r2, #31
 800ab20:	d527      	bpl.n	800ab72 <__sflush_r+0xb2>
 800ab22:	2200      	movs	r2, #0
 800ab24:	6062      	str	r2, [r4, #4]
 800ab26:	04d9      	lsls	r1, r3, #19
 800ab28:	6922      	ldr	r2, [r4, #16]
 800ab2a:	6022      	str	r2, [r4, #0]
 800ab2c:	d504      	bpl.n	800ab38 <__sflush_r+0x78>
 800ab2e:	1c42      	adds	r2, r0, #1
 800ab30:	d101      	bne.n	800ab36 <__sflush_r+0x76>
 800ab32:	682b      	ldr	r3, [r5, #0]
 800ab34:	b903      	cbnz	r3, 800ab38 <__sflush_r+0x78>
 800ab36:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab3a:	602f      	str	r7, [r5, #0]
 800ab3c:	b1b9      	cbz	r1, 800ab6e <__sflush_r+0xae>
 800ab3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab42:	4299      	cmp	r1, r3
 800ab44:	d002      	beq.n	800ab4c <__sflush_r+0x8c>
 800ab46:	4628      	mov	r0, r5
 800ab48:	f7fe fc1e 	bl	8009388 <_free_r>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab50:	e00d      	b.n	800ab6e <__sflush_r+0xae>
 800ab52:	2301      	movs	r3, #1
 800ab54:	4628      	mov	r0, r5
 800ab56:	47b0      	blx	r6
 800ab58:	4602      	mov	r2, r0
 800ab5a:	1c50      	adds	r0, r2, #1
 800ab5c:	d1c9      	bne.n	800aaf2 <__sflush_r+0x32>
 800ab5e:	682b      	ldr	r3, [r5, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d0c6      	beq.n	800aaf2 <__sflush_r+0x32>
 800ab64:	2b1d      	cmp	r3, #29
 800ab66:	d001      	beq.n	800ab6c <__sflush_r+0xac>
 800ab68:	2b16      	cmp	r3, #22
 800ab6a:	d11e      	bne.n	800abaa <__sflush_r+0xea>
 800ab6c:	602f      	str	r7, [r5, #0]
 800ab6e:	2000      	movs	r0, #0
 800ab70:	e022      	b.n	800abb8 <__sflush_r+0xf8>
 800ab72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab76:	b21b      	sxth	r3, r3
 800ab78:	e01b      	b.n	800abb2 <__sflush_r+0xf2>
 800ab7a:	690f      	ldr	r7, [r1, #16]
 800ab7c:	2f00      	cmp	r7, #0
 800ab7e:	d0f6      	beq.n	800ab6e <__sflush_r+0xae>
 800ab80:	0793      	lsls	r3, r2, #30
 800ab82:	680e      	ldr	r6, [r1, #0]
 800ab84:	bf08      	it	eq
 800ab86:	694b      	ldreq	r3, [r1, #20]
 800ab88:	600f      	str	r7, [r1, #0]
 800ab8a:	bf18      	it	ne
 800ab8c:	2300      	movne	r3, #0
 800ab8e:	eba6 0807 	sub.w	r8, r6, r7
 800ab92:	608b      	str	r3, [r1, #8]
 800ab94:	f1b8 0f00 	cmp.w	r8, #0
 800ab98:	dde9      	ble.n	800ab6e <__sflush_r+0xae>
 800ab9a:	6a21      	ldr	r1, [r4, #32]
 800ab9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ab9e:	4643      	mov	r3, r8
 800aba0:	463a      	mov	r2, r7
 800aba2:	4628      	mov	r0, r5
 800aba4:	47b0      	blx	r6
 800aba6:	2800      	cmp	r0, #0
 800aba8:	dc08      	bgt.n	800abbc <__sflush_r+0xfc>
 800abaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abb2:	81a3      	strh	r3, [r4, #12]
 800abb4:	f04f 30ff 	mov.w	r0, #4294967295
 800abb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abbc:	4407      	add	r7, r0
 800abbe:	eba8 0800 	sub.w	r8, r8, r0
 800abc2:	e7e7      	b.n	800ab94 <__sflush_r+0xd4>
 800abc4:	20400001 	.word	0x20400001

0800abc8 <_fflush_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	690b      	ldr	r3, [r1, #16]
 800abcc:	4605      	mov	r5, r0
 800abce:	460c      	mov	r4, r1
 800abd0:	b913      	cbnz	r3, 800abd8 <_fflush_r+0x10>
 800abd2:	2500      	movs	r5, #0
 800abd4:	4628      	mov	r0, r5
 800abd6:	bd38      	pop	{r3, r4, r5, pc}
 800abd8:	b118      	cbz	r0, 800abe2 <_fflush_r+0x1a>
 800abda:	6a03      	ldr	r3, [r0, #32]
 800abdc:	b90b      	cbnz	r3, 800abe2 <_fflush_r+0x1a>
 800abde:	f7fd fa81 	bl	80080e4 <__sinit>
 800abe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d0f3      	beq.n	800abd2 <_fflush_r+0xa>
 800abea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800abec:	07d0      	lsls	r0, r2, #31
 800abee:	d404      	bmi.n	800abfa <_fflush_r+0x32>
 800abf0:	0599      	lsls	r1, r3, #22
 800abf2:	d402      	bmi.n	800abfa <_fflush_r+0x32>
 800abf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abf6:	f7fd fd2c 	bl	8008652 <__retarget_lock_acquire_recursive>
 800abfa:	4628      	mov	r0, r5
 800abfc:	4621      	mov	r1, r4
 800abfe:	f7ff ff5f 	bl	800aac0 <__sflush_r>
 800ac02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac04:	07da      	lsls	r2, r3, #31
 800ac06:	4605      	mov	r5, r0
 800ac08:	d4e4      	bmi.n	800abd4 <_fflush_r+0xc>
 800ac0a:	89a3      	ldrh	r3, [r4, #12]
 800ac0c:	059b      	lsls	r3, r3, #22
 800ac0e:	d4e1      	bmi.n	800abd4 <_fflush_r+0xc>
 800ac10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac12:	f7fd fd1f 	bl	8008654 <__retarget_lock_release_recursive>
 800ac16:	e7dd      	b.n	800abd4 <_fflush_r+0xc>

0800ac18 <fiprintf>:
 800ac18:	b40e      	push	{r1, r2, r3}
 800ac1a:	b503      	push	{r0, r1, lr}
 800ac1c:	4601      	mov	r1, r0
 800ac1e:	ab03      	add	r3, sp, #12
 800ac20:	4805      	ldr	r0, [pc, #20]	@ (800ac38 <fiprintf+0x20>)
 800ac22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac26:	6800      	ldr	r0, [r0, #0]
 800ac28:	9301      	str	r3, [sp, #4]
 800ac2a:	f7ff fe31 	bl	800a890 <_vfiprintf_r>
 800ac2e:	b002      	add	sp, #8
 800ac30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac34:	b003      	add	sp, #12
 800ac36:	4770      	bx	lr
 800ac38:	2000018c 	.word	0x2000018c

0800ac3c <__swhatbuf_r>:
 800ac3c:	b570      	push	{r4, r5, r6, lr}
 800ac3e:	460c      	mov	r4, r1
 800ac40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac44:	2900      	cmp	r1, #0
 800ac46:	b096      	sub	sp, #88	@ 0x58
 800ac48:	4615      	mov	r5, r2
 800ac4a:	461e      	mov	r6, r3
 800ac4c:	da0d      	bge.n	800ac6a <__swhatbuf_r+0x2e>
 800ac4e:	89a3      	ldrh	r3, [r4, #12]
 800ac50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac54:	f04f 0100 	mov.w	r1, #0
 800ac58:	bf14      	ite	ne
 800ac5a:	2340      	movne	r3, #64	@ 0x40
 800ac5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac60:	2000      	movs	r0, #0
 800ac62:	6031      	str	r1, [r6, #0]
 800ac64:	602b      	str	r3, [r5, #0]
 800ac66:	b016      	add	sp, #88	@ 0x58
 800ac68:	bd70      	pop	{r4, r5, r6, pc}
 800ac6a:	466a      	mov	r2, sp
 800ac6c:	f000 f896 	bl	800ad9c <_fstat_r>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	dbec      	blt.n	800ac4e <__swhatbuf_r+0x12>
 800ac74:	9901      	ldr	r1, [sp, #4]
 800ac76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac7e:	4259      	negs	r1, r3
 800ac80:	4159      	adcs	r1, r3
 800ac82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac86:	e7eb      	b.n	800ac60 <__swhatbuf_r+0x24>

0800ac88 <__smakebuf_r>:
 800ac88:	898b      	ldrh	r3, [r1, #12]
 800ac8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac8c:	079d      	lsls	r5, r3, #30
 800ac8e:	4606      	mov	r6, r0
 800ac90:	460c      	mov	r4, r1
 800ac92:	d507      	bpl.n	800aca4 <__smakebuf_r+0x1c>
 800ac94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	6123      	str	r3, [r4, #16]
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	6163      	str	r3, [r4, #20]
 800aca0:	b003      	add	sp, #12
 800aca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aca4:	ab01      	add	r3, sp, #4
 800aca6:	466a      	mov	r2, sp
 800aca8:	f7ff ffc8 	bl	800ac3c <__swhatbuf_r>
 800acac:	9f00      	ldr	r7, [sp, #0]
 800acae:	4605      	mov	r5, r0
 800acb0:	4639      	mov	r1, r7
 800acb2:	4630      	mov	r0, r6
 800acb4:	f7fe ff16 	bl	8009ae4 <_malloc_r>
 800acb8:	b948      	cbnz	r0, 800acce <__smakebuf_r+0x46>
 800acba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acbe:	059a      	lsls	r2, r3, #22
 800acc0:	d4ee      	bmi.n	800aca0 <__smakebuf_r+0x18>
 800acc2:	f023 0303 	bic.w	r3, r3, #3
 800acc6:	f043 0302 	orr.w	r3, r3, #2
 800acca:	81a3      	strh	r3, [r4, #12]
 800accc:	e7e2      	b.n	800ac94 <__smakebuf_r+0xc>
 800acce:	89a3      	ldrh	r3, [r4, #12]
 800acd0:	6020      	str	r0, [r4, #0]
 800acd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acd6:	81a3      	strh	r3, [r4, #12]
 800acd8:	9b01      	ldr	r3, [sp, #4]
 800acda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800acde:	b15b      	cbz	r3, 800acf8 <__smakebuf_r+0x70>
 800ace0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ace4:	4630      	mov	r0, r6
 800ace6:	f000 f86b 	bl	800adc0 <_isatty_r>
 800acea:	b128      	cbz	r0, 800acf8 <__smakebuf_r+0x70>
 800acec:	89a3      	ldrh	r3, [r4, #12]
 800acee:	f023 0303 	bic.w	r3, r3, #3
 800acf2:	f043 0301 	orr.w	r3, r3, #1
 800acf6:	81a3      	strh	r3, [r4, #12]
 800acf8:	89a3      	ldrh	r3, [r4, #12]
 800acfa:	431d      	orrs	r5, r3
 800acfc:	81a5      	strh	r5, [r4, #12]
 800acfe:	e7cf      	b.n	800aca0 <__smakebuf_r+0x18>

0800ad00 <_putc_r>:
 800ad00:	b570      	push	{r4, r5, r6, lr}
 800ad02:	460d      	mov	r5, r1
 800ad04:	4614      	mov	r4, r2
 800ad06:	4606      	mov	r6, r0
 800ad08:	b118      	cbz	r0, 800ad12 <_putc_r+0x12>
 800ad0a:	6a03      	ldr	r3, [r0, #32]
 800ad0c:	b90b      	cbnz	r3, 800ad12 <_putc_r+0x12>
 800ad0e:	f7fd f9e9 	bl	80080e4 <__sinit>
 800ad12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad14:	07d8      	lsls	r0, r3, #31
 800ad16:	d405      	bmi.n	800ad24 <_putc_r+0x24>
 800ad18:	89a3      	ldrh	r3, [r4, #12]
 800ad1a:	0599      	lsls	r1, r3, #22
 800ad1c:	d402      	bmi.n	800ad24 <_putc_r+0x24>
 800ad1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad20:	f7fd fc97 	bl	8008652 <__retarget_lock_acquire_recursive>
 800ad24:	68a3      	ldr	r3, [r4, #8]
 800ad26:	3b01      	subs	r3, #1
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	60a3      	str	r3, [r4, #8]
 800ad2c:	da05      	bge.n	800ad3a <_putc_r+0x3a>
 800ad2e:	69a2      	ldr	r2, [r4, #24]
 800ad30:	4293      	cmp	r3, r2
 800ad32:	db12      	blt.n	800ad5a <_putc_r+0x5a>
 800ad34:	b2eb      	uxtb	r3, r5
 800ad36:	2b0a      	cmp	r3, #10
 800ad38:	d00f      	beq.n	800ad5a <_putc_r+0x5a>
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	1c5a      	adds	r2, r3, #1
 800ad3e:	6022      	str	r2, [r4, #0]
 800ad40:	701d      	strb	r5, [r3, #0]
 800ad42:	b2ed      	uxtb	r5, r5
 800ad44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad46:	07da      	lsls	r2, r3, #31
 800ad48:	d405      	bmi.n	800ad56 <_putc_r+0x56>
 800ad4a:	89a3      	ldrh	r3, [r4, #12]
 800ad4c:	059b      	lsls	r3, r3, #22
 800ad4e:	d402      	bmi.n	800ad56 <_putc_r+0x56>
 800ad50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad52:	f7fd fc7f 	bl	8008654 <__retarget_lock_release_recursive>
 800ad56:	4628      	mov	r0, r5
 800ad58:	bd70      	pop	{r4, r5, r6, pc}
 800ad5a:	4629      	mov	r1, r5
 800ad5c:	4622      	mov	r2, r4
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f7fd fad3 	bl	800830a <__swbuf_r>
 800ad64:	4605      	mov	r5, r0
 800ad66:	e7ed      	b.n	800ad44 <_putc_r+0x44>

0800ad68 <memmove>:
 800ad68:	4288      	cmp	r0, r1
 800ad6a:	b510      	push	{r4, lr}
 800ad6c:	eb01 0402 	add.w	r4, r1, r2
 800ad70:	d902      	bls.n	800ad78 <memmove+0x10>
 800ad72:	4284      	cmp	r4, r0
 800ad74:	4623      	mov	r3, r4
 800ad76:	d807      	bhi.n	800ad88 <memmove+0x20>
 800ad78:	1e43      	subs	r3, r0, #1
 800ad7a:	42a1      	cmp	r1, r4
 800ad7c:	d008      	beq.n	800ad90 <memmove+0x28>
 800ad7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad86:	e7f8      	b.n	800ad7a <memmove+0x12>
 800ad88:	4402      	add	r2, r0
 800ad8a:	4601      	mov	r1, r0
 800ad8c:	428a      	cmp	r2, r1
 800ad8e:	d100      	bne.n	800ad92 <memmove+0x2a>
 800ad90:	bd10      	pop	{r4, pc}
 800ad92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad9a:	e7f7      	b.n	800ad8c <memmove+0x24>

0800ad9c <_fstat_r>:
 800ad9c:	b538      	push	{r3, r4, r5, lr}
 800ad9e:	4d07      	ldr	r5, [pc, #28]	@ (800adbc <_fstat_r+0x20>)
 800ada0:	2300      	movs	r3, #0
 800ada2:	4604      	mov	r4, r0
 800ada4:	4608      	mov	r0, r1
 800ada6:	4611      	mov	r1, r2
 800ada8:	602b      	str	r3, [r5, #0]
 800adaa:	f7f7 fffd 	bl	8002da8 <_fstat>
 800adae:	1c43      	adds	r3, r0, #1
 800adb0:	d102      	bne.n	800adb8 <_fstat_r+0x1c>
 800adb2:	682b      	ldr	r3, [r5, #0]
 800adb4:	b103      	cbz	r3, 800adb8 <_fstat_r+0x1c>
 800adb6:	6023      	str	r3, [r4, #0]
 800adb8:	bd38      	pop	{r3, r4, r5, pc}
 800adba:	bf00      	nop
 800adbc:	20000dc4 	.word	0x20000dc4

0800adc0 <_isatty_r>:
 800adc0:	b538      	push	{r3, r4, r5, lr}
 800adc2:	4d06      	ldr	r5, [pc, #24]	@ (800addc <_isatty_r+0x1c>)
 800adc4:	2300      	movs	r3, #0
 800adc6:	4604      	mov	r4, r0
 800adc8:	4608      	mov	r0, r1
 800adca:	602b      	str	r3, [r5, #0]
 800adcc:	f7f7 fffc 	bl	8002dc8 <_isatty>
 800add0:	1c43      	adds	r3, r0, #1
 800add2:	d102      	bne.n	800adda <_isatty_r+0x1a>
 800add4:	682b      	ldr	r3, [r5, #0]
 800add6:	b103      	cbz	r3, 800adda <_isatty_r+0x1a>
 800add8:	6023      	str	r3, [r4, #0]
 800adda:	bd38      	pop	{r3, r4, r5, pc}
 800addc:	20000dc4 	.word	0x20000dc4

0800ade0 <_sbrk_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	4d06      	ldr	r5, [pc, #24]	@ (800adfc <_sbrk_r+0x1c>)
 800ade4:	2300      	movs	r3, #0
 800ade6:	4604      	mov	r4, r0
 800ade8:	4608      	mov	r0, r1
 800adea:	602b      	str	r3, [r5, #0]
 800adec:	f7f8 f804 	bl	8002df8 <_sbrk>
 800adf0:	1c43      	adds	r3, r0, #1
 800adf2:	d102      	bne.n	800adfa <_sbrk_r+0x1a>
 800adf4:	682b      	ldr	r3, [r5, #0]
 800adf6:	b103      	cbz	r3, 800adfa <_sbrk_r+0x1a>
 800adf8:	6023      	str	r3, [r4, #0]
 800adfa:	bd38      	pop	{r3, r4, r5, pc}
 800adfc:	20000dc4 	.word	0x20000dc4

0800ae00 <abort>:
 800ae00:	b508      	push	{r3, lr}
 800ae02:	2006      	movs	r0, #6
 800ae04:	f000 f86e 	bl	800aee4 <raise>
 800ae08:	2001      	movs	r0, #1
 800ae0a:	f7f7 ff7d 	bl	8002d08 <_exit>

0800ae0e <_calloc_r>:
 800ae0e:	b570      	push	{r4, r5, r6, lr}
 800ae10:	fba1 5402 	umull	r5, r4, r1, r2
 800ae14:	b934      	cbnz	r4, 800ae24 <_calloc_r+0x16>
 800ae16:	4629      	mov	r1, r5
 800ae18:	f7fe fe64 	bl	8009ae4 <_malloc_r>
 800ae1c:	4606      	mov	r6, r0
 800ae1e:	b928      	cbnz	r0, 800ae2c <_calloc_r+0x1e>
 800ae20:	4630      	mov	r0, r6
 800ae22:	bd70      	pop	{r4, r5, r6, pc}
 800ae24:	220c      	movs	r2, #12
 800ae26:	6002      	str	r2, [r0, #0]
 800ae28:	2600      	movs	r6, #0
 800ae2a:	e7f9      	b.n	800ae20 <_calloc_r+0x12>
 800ae2c:	462a      	mov	r2, r5
 800ae2e:	4621      	mov	r1, r4
 800ae30:	f7fd fb00 	bl	8008434 <memset>
 800ae34:	e7f4      	b.n	800ae20 <_calloc_r+0x12>

0800ae36 <_realloc_r>:
 800ae36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae3a:	4607      	mov	r7, r0
 800ae3c:	4614      	mov	r4, r2
 800ae3e:	460d      	mov	r5, r1
 800ae40:	b921      	cbnz	r1, 800ae4c <_realloc_r+0x16>
 800ae42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae46:	4611      	mov	r1, r2
 800ae48:	f7fe be4c 	b.w	8009ae4 <_malloc_r>
 800ae4c:	b92a      	cbnz	r2, 800ae5a <_realloc_r+0x24>
 800ae4e:	f7fe fa9b 	bl	8009388 <_free_r>
 800ae52:	4625      	mov	r5, r4
 800ae54:	4628      	mov	r0, r5
 800ae56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae5a:	f000 f85f 	bl	800af1c <_malloc_usable_size_r>
 800ae5e:	4284      	cmp	r4, r0
 800ae60:	4606      	mov	r6, r0
 800ae62:	d802      	bhi.n	800ae6a <_realloc_r+0x34>
 800ae64:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae68:	d8f4      	bhi.n	800ae54 <_realloc_r+0x1e>
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	4638      	mov	r0, r7
 800ae6e:	f7fe fe39 	bl	8009ae4 <_malloc_r>
 800ae72:	4680      	mov	r8, r0
 800ae74:	b908      	cbnz	r0, 800ae7a <_realloc_r+0x44>
 800ae76:	4645      	mov	r5, r8
 800ae78:	e7ec      	b.n	800ae54 <_realloc_r+0x1e>
 800ae7a:	42b4      	cmp	r4, r6
 800ae7c:	4622      	mov	r2, r4
 800ae7e:	4629      	mov	r1, r5
 800ae80:	bf28      	it	cs
 800ae82:	4632      	movcs	r2, r6
 800ae84:	f7fd fbef 	bl	8008666 <memcpy>
 800ae88:	4629      	mov	r1, r5
 800ae8a:	4638      	mov	r0, r7
 800ae8c:	f7fe fa7c 	bl	8009388 <_free_r>
 800ae90:	e7f1      	b.n	800ae76 <_realloc_r+0x40>

0800ae92 <_raise_r>:
 800ae92:	291f      	cmp	r1, #31
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	4605      	mov	r5, r0
 800ae98:	460c      	mov	r4, r1
 800ae9a:	d904      	bls.n	800aea6 <_raise_r+0x14>
 800ae9c:	2316      	movs	r3, #22
 800ae9e:	6003      	str	r3, [r0, #0]
 800aea0:	f04f 30ff 	mov.w	r0, #4294967295
 800aea4:	bd38      	pop	{r3, r4, r5, pc}
 800aea6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aea8:	b112      	cbz	r2, 800aeb0 <_raise_r+0x1e>
 800aeaa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aeae:	b94b      	cbnz	r3, 800aec4 <_raise_r+0x32>
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	f000 f831 	bl	800af18 <_getpid_r>
 800aeb6:	4622      	mov	r2, r4
 800aeb8:	4601      	mov	r1, r0
 800aeba:	4628      	mov	r0, r5
 800aebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aec0:	f000 b818 	b.w	800aef4 <_kill_r>
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d00a      	beq.n	800aede <_raise_r+0x4c>
 800aec8:	1c59      	adds	r1, r3, #1
 800aeca:	d103      	bne.n	800aed4 <_raise_r+0x42>
 800aecc:	2316      	movs	r3, #22
 800aece:	6003      	str	r3, [r0, #0]
 800aed0:	2001      	movs	r0, #1
 800aed2:	e7e7      	b.n	800aea4 <_raise_r+0x12>
 800aed4:	2100      	movs	r1, #0
 800aed6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aeda:	4620      	mov	r0, r4
 800aedc:	4798      	blx	r3
 800aede:	2000      	movs	r0, #0
 800aee0:	e7e0      	b.n	800aea4 <_raise_r+0x12>
	...

0800aee4 <raise>:
 800aee4:	4b02      	ldr	r3, [pc, #8]	@ (800aef0 <raise+0xc>)
 800aee6:	4601      	mov	r1, r0
 800aee8:	6818      	ldr	r0, [r3, #0]
 800aeea:	f7ff bfd2 	b.w	800ae92 <_raise_r>
 800aeee:	bf00      	nop
 800aef0:	2000018c 	.word	0x2000018c

0800aef4 <_kill_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4d07      	ldr	r5, [pc, #28]	@ (800af14 <_kill_r+0x20>)
 800aef8:	2300      	movs	r3, #0
 800aefa:	4604      	mov	r4, r0
 800aefc:	4608      	mov	r0, r1
 800aefe:	4611      	mov	r1, r2
 800af00:	602b      	str	r3, [r5, #0]
 800af02:	f7f7 fef1 	bl	8002ce8 <_kill>
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	d102      	bne.n	800af10 <_kill_r+0x1c>
 800af0a:	682b      	ldr	r3, [r5, #0]
 800af0c:	b103      	cbz	r3, 800af10 <_kill_r+0x1c>
 800af0e:	6023      	str	r3, [r4, #0]
 800af10:	bd38      	pop	{r3, r4, r5, pc}
 800af12:	bf00      	nop
 800af14:	20000dc4 	.word	0x20000dc4

0800af18 <_getpid_r>:
 800af18:	f7f7 bede 	b.w	8002cd8 <_getpid>

0800af1c <_malloc_usable_size_r>:
 800af1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af20:	1f18      	subs	r0, r3, #4
 800af22:	2b00      	cmp	r3, #0
 800af24:	bfbc      	itt	lt
 800af26:	580b      	ldrlt	r3, [r1, r0]
 800af28:	18c0      	addlt	r0, r0, r3
 800af2a:	4770      	bx	lr

0800af2c <pow>:
 800af2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2e:	ed2d 8b02 	vpush	{d8}
 800af32:	eeb0 8a40 	vmov.f32	s16, s0
 800af36:	eef0 8a60 	vmov.f32	s17, s1
 800af3a:	ec55 4b11 	vmov	r4, r5, d1
 800af3e:	f000 f873 	bl	800b028 <__ieee754_pow>
 800af42:	4622      	mov	r2, r4
 800af44:	462b      	mov	r3, r5
 800af46:	4620      	mov	r0, r4
 800af48:	4629      	mov	r1, r5
 800af4a:	ec57 6b10 	vmov	r6, r7, d0
 800af4e:	f7f5 fe05 	bl	8000b5c <__aeabi_dcmpun>
 800af52:	2800      	cmp	r0, #0
 800af54:	d13b      	bne.n	800afce <pow+0xa2>
 800af56:	ec51 0b18 	vmov	r0, r1, d8
 800af5a:	2200      	movs	r2, #0
 800af5c:	2300      	movs	r3, #0
 800af5e:	f7f5 fdcb 	bl	8000af8 <__aeabi_dcmpeq>
 800af62:	b1b8      	cbz	r0, 800af94 <pow+0x68>
 800af64:	2200      	movs	r2, #0
 800af66:	2300      	movs	r3, #0
 800af68:	4620      	mov	r0, r4
 800af6a:	4629      	mov	r1, r5
 800af6c:	f7f5 fdc4 	bl	8000af8 <__aeabi_dcmpeq>
 800af70:	2800      	cmp	r0, #0
 800af72:	d146      	bne.n	800b002 <pow+0xd6>
 800af74:	ec45 4b10 	vmov	d0, r4, r5
 800af78:	f000 f848 	bl	800b00c <finite>
 800af7c:	b338      	cbz	r0, 800afce <pow+0xa2>
 800af7e:	2200      	movs	r2, #0
 800af80:	2300      	movs	r3, #0
 800af82:	4620      	mov	r0, r4
 800af84:	4629      	mov	r1, r5
 800af86:	f7f5 fdc1 	bl	8000b0c <__aeabi_dcmplt>
 800af8a:	b300      	cbz	r0, 800afce <pow+0xa2>
 800af8c:	f7fd fb36 	bl	80085fc <__errno>
 800af90:	2322      	movs	r3, #34	@ 0x22
 800af92:	e01b      	b.n	800afcc <pow+0xa0>
 800af94:	ec47 6b10 	vmov	d0, r6, r7
 800af98:	f000 f838 	bl	800b00c <finite>
 800af9c:	b9e0      	cbnz	r0, 800afd8 <pow+0xac>
 800af9e:	eeb0 0a48 	vmov.f32	s0, s16
 800afa2:	eef0 0a68 	vmov.f32	s1, s17
 800afa6:	f000 f831 	bl	800b00c <finite>
 800afaa:	b1a8      	cbz	r0, 800afd8 <pow+0xac>
 800afac:	ec45 4b10 	vmov	d0, r4, r5
 800afb0:	f000 f82c 	bl	800b00c <finite>
 800afb4:	b180      	cbz	r0, 800afd8 <pow+0xac>
 800afb6:	4632      	mov	r2, r6
 800afb8:	463b      	mov	r3, r7
 800afba:	4630      	mov	r0, r6
 800afbc:	4639      	mov	r1, r7
 800afbe:	f7f5 fdcd 	bl	8000b5c <__aeabi_dcmpun>
 800afc2:	2800      	cmp	r0, #0
 800afc4:	d0e2      	beq.n	800af8c <pow+0x60>
 800afc6:	f7fd fb19 	bl	80085fc <__errno>
 800afca:	2321      	movs	r3, #33	@ 0x21
 800afcc:	6003      	str	r3, [r0, #0]
 800afce:	ecbd 8b02 	vpop	{d8}
 800afd2:	ec47 6b10 	vmov	d0, r6, r7
 800afd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afd8:	2200      	movs	r2, #0
 800afda:	2300      	movs	r3, #0
 800afdc:	4630      	mov	r0, r6
 800afde:	4639      	mov	r1, r7
 800afe0:	f7f5 fd8a 	bl	8000af8 <__aeabi_dcmpeq>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d0f2      	beq.n	800afce <pow+0xa2>
 800afe8:	eeb0 0a48 	vmov.f32	s0, s16
 800afec:	eef0 0a68 	vmov.f32	s1, s17
 800aff0:	f000 f80c 	bl	800b00c <finite>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	d0ea      	beq.n	800afce <pow+0xa2>
 800aff8:	ec45 4b10 	vmov	d0, r4, r5
 800affc:	f000 f806 	bl	800b00c <finite>
 800b000:	e7c3      	b.n	800af8a <pow+0x5e>
 800b002:	4f01      	ldr	r7, [pc, #4]	@ (800b008 <pow+0xdc>)
 800b004:	2600      	movs	r6, #0
 800b006:	e7e2      	b.n	800afce <pow+0xa2>
 800b008:	3ff00000 	.word	0x3ff00000

0800b00c <finite>:
 800b00c:	b082      	sub	sp, #8
 800b00e:	ed8d 0b00 	vstr	d0, [sp]
 800b012:	9801      	ldr	r0, [sp, #4]
 800b014:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800b018:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b01c:	0fc0      	lsrs	r0, r0, #31
 800b01e:	b002      	add	sp, #8
 800b020:	4770      	bx	lr
 800b022:	0000      	movs	r0, r0
 800b024:	0000      	movs	r0, r0
	...

0800b028 <__ieee754_pow>:
 800b028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b02c:	b091      	sub	sp, #68	@ 0x44
 800b02e:	ed8d 1b00 	vstr	d1, [sp]
 800b032:	e9dd 1900 	ldrd	r1, r9, [sp]
 800b036:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800b03a:	ea5a 0001 	orrs.w	r0, sl, r1
 800b03e:	ec57 6b10 	vmov	r6, r7, d0
 800b042:	d113      	bne.n	800b06c <__ieee754_pow+0x44>
 800b044:	19b3      	adds	r3, r6, r6
 800b046:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800b04a:	4152      	adcs	r2, r2
 800b04c:	4298      	cmp	r0, r3
 800b04e:	4b9a      	ldr	r3, [pc, #616]	@ (800b2b8 <__ieee754_pow+0x290>)
 800b050:	4193      	sbcs	r3, r2
 800b052:	f080 84ee 	bcs.w	800ba32 <__ieee754_pow+0xa0a>
 800b056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b05a:	4630      	mov	r0, r6
 800b05c:	4639      	mov	r1, r7
 800b05e:	f7f5 f92d 	bl	80002bc <__adddf3>
 800b062:	ec41 0b10 	vmov	d0, r0, r1
 800b066:	b011      	add	sp, #68	@ 0x44
 800b068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b06c:	4a93      	ldr	r2, [pc, #588]	@ (800b2bc <__ieee754_pow+0x294>)
 800b06e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800b072:	4295      	cmp	r5, r2
 800b074:	46b8      	mov	r8, r7
 800b076:	4633      	mov	r3, r6
 800b078:	d80a      	bhi.n	800b090 <__ieee754_pow+0x68>
 800b07a:	d104      	bne.n	800b086 <__ieee754_pow+0x5e>
 800b07c:	2e00      	cmp	r6, #0
 800b07e:	d1ea      	bne.n	800b056 <__ieee754_pow+0x2e>
 800b080:	45aa      	cmp	sl, r5
 800b082:	d8e8      	bhi.n	800b056 <__ieee754_pow+0x2e>
 800b084:	e001      	b.n	800b08a <__ieee754_pow+0x62>
 800b086:	4592      	cmp	sl, r2
 800b088:	d802      	bhi.n	800b090 <__ieee754_pow+0x68>
 800b08a:	4592      	cmp	sl, r2
 800b08c:	d10f      	bne.n	800b0ae <__ieee754_pow+0x86>
 800b08e:	b171      	cbz	r1, 800b0ae <__ieee754_pow+0x86>
 800b090:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800b094:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800b098:	ea58 0803 	orrs.w	r8, r8, r3
 800b09c:	d1db      	bne.n	800b056 <__ieee754_pow+0x2e>
 800b09e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b0a2:	18db      	adds	r3, r3, r3
 800b0a4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b0a8:	4152      	adcs	r2, r2
 800b0aa:	4598      	cmp	r8, r3
 800b0ac:	e7cf      	b.n	800b04e <__ieee754_pow+0x26>
 800b0ae:	f1b8 0f00 	cmp.w	r8, #0
 800b0b2:	46ab      	mov	fp, r5
 800b0b4:	da43      	bge.n	800b13e <__ieee754_pow+0x116>
 800b0b6:	4a82      	ldr	r2, [pc, #520]	@ (800b2c0 <__ieee754_pow+0x298>)
 800b0b8:	4592      	cmp	sl, r2
 800b0ba:	d856      	bhi.n	800b16a <__ieee754_pow+0x142>
 800b0bc:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b0c0:	4592      	cmp	sl, r2
 800b0c2:	f240 84c5 	bls.w	800ba50 <__ieee754_pow+0xa28>
 800b0c6:	ea4f 522a 	mov.w	r2, sl, asr #20
 800b0ca:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b0ce:	2a14      	cmp	r2, #20
 800b0d0:	dd18      	ble.n	800b104 <__ieee754_pow+0xdc>
 800b0d2:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b0d6:	fa21 f402 	lsr.w	r4, r1, r2
 800b0da:	fa04 f202 	lsl.w	r2, r4, r2
 800b0de:	428a      	cmp	r2, r1
 800b0e0:	f040 84b6 	bne.w	800ba50 <__ieee754_pow+0xa28>
 800b0e4:	f004 0401 	and.w	r4, r4, #1
 800b0e8:	f1c4 0402 	rsb	r4, r4, #2
 800b0ec:	2900      	cmp	r1, #0
 800b0ee:	d159      	bne.n	800b1a4 <__ieee754_pow+0x17c>
 800b0f0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800b0f4:	d148      	bne.n	800b188 <__ieee754_pow+0x160>
 800b0f6:	4632      	mov	r2, r6
 800b0f8:	463b      	mov	r3, r7
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	4639      	mov	r1, r7
 800b0fe:	f7f5 fa93 	bl	8000628 <__aeabi_dmul>
 800b102:	e7ae      	b.n	800b062 <__ieee754_pow+0x3a>
 800b104:	2900      	cmp	r1, #0
 800b106:	d14c      	bne.n	800b1a2 <__ieee754_pow+0x17a>
 800b108:	f1c2 0214 	rsb	r2, r2, #20
 800b10c:	fa4a f402 	asr.w	r4, sl, r2
 800b110:	fa04 f202 	lsl.w	r2, r4, r2
 800b114:	4552      	cmp	r2, sl
 800b116:	f040 8498 	bne.w	800ba4a <__ieee754_pow+0xa22>
 800b11a:	f004 0401 	and.w	r4, r4, #1
 800b11e:	f1c4 0402 	rsb	r4, r4, #2
 800b122:	4a68      	ldr	r2, [pc, #416]	@ (800b2c4 <__ieee754_pow+0x29c>)
 800b124:	4592      	cmp	sl, r2
 800b126:	d1e3      	bne.n	800b0f0 <__ieee754_pow+0xc8>
 800b128:	f1b9 0f00 	cmp.w	r9, #0
 800b12c:	f280 8489 	bge.w	800ba42 <__ieee754_pow+0xa1a>
 800b130:	4964      	ldr	r1, [pc, #400]	@ (800b2c4 <__ieee754_pow+0x29c>)
 800b132:	4632      	mov	r2, r6
 800b134:	463b      	mov	r3, r7
 800b136:	2000      	movs	r0, #0
 800b138:	f7f5 fba0 	bl	800087c <__aeabi_ddiv>
 800b13c:	e791      	b.n	800b062 <__ieee754_pow+0x3a>
 800b13e:	2400      	movs	r4, #0
 800b140:	bb81      	cbnz	r1, 800b1a4 <__ieee754_pow+0x17c>
 800b142:	4a5e      	ldr	r2, [pc, #376]	@ (800b2bc <__ieee754_pow+0x294>)
 800b144:	4592      	cmp	sl, r2
 800b146:	d1ec      	bne.n	800b122 <__ieee754_pow+0xfa>
 800b148:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800b14c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800b150:	431a      	orrs	r2, r3
 800b152:	f000 846e 	beq.w	800ba32 <__ieee754_pow+0xa0a>
 800b156:	4b5c      	ldr	r3, [pc, #368]	@ (800b2c8 <__ieee754_pow+0x2a0>)
 800b158:	429d      	cmp	r5, r3
 800b15a:	d908      	bls.n	800b16e <__ieee754_pow+0x146>
 800b15c:	f1b9 0f00 	cmp.w	r9, #0
 800b160:	f280 846b 	bge.w	800ba3a <__ieee754_pow+0xa12>
 800b164:	2000      	movs	r0, #0
 800b166:	2100      	movs	r1, #0
 800b168:	e77b      	b.n	800b062 <__ieee754_pow+0x3a>
 800b16a:	2402      	movs	r4, #2
 800b16c:	e7e8      	b.n	800b140 <__ieee754_pow+0x118>
 800b16e:	f1b9 0f00 	cmp.w	r9, #0
 800b172:	f04f 0000 	mov.w	r0, #0
 800b176:	f04f 0100 	mov.w	r1, #0
 800b17a:	f6bf af72 	bge.w	800b062 <__ieee754_pow+0x3a>
 800b17e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b182:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b186:	e76c      	b.n	800b062 <__ieee754_pow+0x3a>
 800b188:	4a50      	ldr	r2, [pc, #320]	@ (800b2cc <__ieee754_pow+0x2a4>)
 800b18a:	4591      	cmp	r9, r2
 800b18c:	d10a      	bne.n	800b1a4 <__ieee754_pow+0x17c>
 800b18e:	f1b8 0f00 	cmp.w	r8, #0
 800b192:	db07      	blt.n	800b1a4 <__ieee754_pow+0x17c>
 800b194:	ec47 6b10 	vmov	d0, r6, r7
 800b198:	b011      	add	sp, #68	@ 0x44
 800b19a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19e:	f000 bd4f 	b.w	800bc40 <__ieee754_sqrt>
 800b1a2:	2400      	movs	r4, #0
 800b1a4:	ec47 6b10 	vmov	d0, r6, r7
 800b1a8:	9302      	str	r3, [sp, #8]
 800b1aa:	f000 fc87 	bl	800babc <fabs>
 800b1ae:	9b02      	ldr	r3, [sp, #8]
 800b1b0:	ec51 0b10 	vmov	r0, r1, d0
 800b1b4:	bb43      	cbnz	r3, 800b208 <__ieee754_pow+0x1e0>
 800b1b6:	4b43      	ldr	r3, [pc, #268]	@ (800b2c4 <__ieee754_pow+0x29c>)
 800b1b8:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d000      	beq.n	800b1c2 <__ieee754_pow+0x19a>
 800b1c0:	bb15      	cbnz	r5, 800b208 <__ieee754_pow+0x1e0>
 800b1c2:	f1b9 0f00 	cmp.w	r9, #0
 800b1c6:	da05      	bge.n	800b1d4 <__ieee754_pow+0x1ac>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	493d      	ldr	r1, [pc, #244]	@ (800b2c4 <__ieee754_pow+0x29c>)
 800b1d0:	f7f5 fb54 	bl	800087c <__aeabi_ddiv>
 800b1d4:	f1b8 0f00 	cmp.w	r8, #0
 800b1d8:	f6bf af43 	bge.w	800b062 <__ieee754_pow+0x3a>
 800b1dc:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b1e0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b1e4:	4325      	orrs	r5, r4
 800b1e6:	d108      	bne.n	800b1fa <__ieee754_pow+0x1d2>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	4610      	mov	r0, r2
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	f7f5 f862 	bl	80002b8 <__aeabi_dsub>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	e79e      	b.n	800b138 <__ieee754_pow+0x110>
 800b1fa:	2c01      	cmp	r4, #1
 800b1fc:	f47f af31 	bne.w	800b062 <__ieee754_pow+0x3a>
 800b200:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b204:	4619      	mov	r1, r3
 800b206:	e72c      	b.n	800b062 <__ieee754_pow+0x3a>
 800b208:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800b20c:	3b01      	subs	r3, #1
 800b20e:	ea53 0204 	orrs.w	r2, r3, r4
 800b212:	d102      	bne.n	800b21a <__ieee754_pow+0x1f2>
 800b214:	4632      	mov	r2, r6
 800b216:	463b      	mov	r3, r7
 800b218:	e7e8      	b.n	800b1ec <__ieee754_pow+0x1c4>
 800b21a:	3c01      	subs	r4, #1
 800b21c:	431c      	orrs	r4, r3
 800b21e:	d016      	beq.n	800b24e <__ieee754_pow+0x226>
 800b220:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b2a8 <__ieee754_pow+0x280>
 800b224:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800b228:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b22c:	f240 8110 	bls.w	800b450 <__ieee754_pow+0x428>
 800b230:	4b27      	ldr	r3, [pc, #156]	@ (800b2d0 <__ieee754_pow+0x2a8>)
 800b232:	459a      	cmp	sl, r3
 800b234:	4b24      	ldr	r3, [pc, #144]	@ (800b2c8 <__ieee754_pow+0x2a0>)
 800b236:	d916      	bls.n	800b266 <__ieee754_pow+0x23e>
 800b238:	429d      	cmp	r5, r3
 800b23a:	d80b      	bhi.n	800b254 <__ieee754_pow+0x22c>
 800b23c:	f1b9 0f00 	cmp.w	r9, #0
 800b240:	da0b      	bge.n	800b25a <__ieee754_pow+0x232>
 800b242:	2000      	movs	r0, #0
 800b244:	b011      	add	sp, #68	@ 0x44
 800b246:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b24a:	f000 bcf1 	b.w	800bc30 <__math_oflow>
 800b24e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800b2b0 <__ieee754_pow+0x288>
 800b252:	e7e7      	b.n	800b224 <__ieee754_pow+0x1fc>
 800b254:	f1b9 0f00 	cmp.w	r9, #0
 800b258:	dcf3      	bgt.n	800b242 <__ieee754_pow+0x21a>
 800b25a:	2000      	movs	r0, #0
 800b25c:	b011      	add	sp, #68	@ 0x44
 800b25e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b262:	f000 bcdd 	b.w	800bc20 <__math_uflow>
 800b266:	429d      	cmp	r5, r3
 800b268:	d20c      	bcs.n	800b284 <__ieee754_pow+0x25c>
 800b26a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b26e:	2200      	movs	r2, #0
 800b270:	2300      	movs	r3, #0
 800b272:	f7f5 fc4b 	bl	8000b0c <__aeabi_dcmplt>
 800b276:	3800      	subs	r0, #0
 800b278:	bf18      	it	ne
 800b27a:	2001      	movne	r0, #1
 800b27c:	f1b9 0f00 	cmp.w	r9, #0
 800b280:	daec      	bge.n	800b25c <__ieee754_pow+0x234>
 800b282:	e7df      	b.n	800b244 <__ieee754_pow+0x21c>
 800b284:	4b0f      	ldr	r3, [pc, #60]	@ (800b2c4 <__ieee754_pow+0x29c>)
 800b286:	429d      	cmp	r5, r3
 800b288:	f04f 0200 	mov.w	r2, #0
 800b28c:	d922      	bls.n	800b2d4 <__ieee754_pow+0x2ac>
 800b28e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b292:	2300      	movs	r3, #0
 800b294:	f7f5 fc3a 	bl	8000b0c <__aeabi_dcmplt>
 800b298:	3800      	subs	r0, #0
 800b29a:	bf18      	it	ne
 800b29c:	2001      	movne	r0, #1
 800b29e:	f1b9 0f00 	cmp.w	r9, #0
 800b2a2:	dccf      	bgt.n	800b244 <__ieee754_pow+0x21c>
 800b2a4:	e7da      	b.n	800b25c <__ieee754_pow+0x234>
 800b2a6:	bf00      	nop
 800b2a8:	00000000 	.word	0x00000000
 800b2ac:	3ff00000 	.word	0x3ff00000
 800b2b0:	00000000 	.word	0x00000000
 800b2b4:	bff00000 	.word	0xbff00000
 800b2b8:	fff00000 	.word	0xfff00000
 800b2bc:	7ff00000 	.word	0x7ff00000
 800b2c0:	433fffff 	.word	0x433fffff
 800b2c4:	3ff00000 	.word	0x3ff00000
 800b2c8:	3fefffff 	.word	0x3fefffff
 800b2cc:	3fe00000 	.word	0x3fe00000
 800b2d0:	43f00000 	.word	0x43f00000
 800b2d4:	4b5a      	ldr	r3, [pc, #360]	@ (800b440 <__ieee754_pow+0x418>)
 800b2d6:	f7f4 ffef 	bl	80002b8 <__aeabi_dsub>
 800b2da:	a351      	add	r3, pc, #324	@ (adr r3, 800b420 <__ieee754_pow+0x3f8>)
 800b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e0:	4604      	mov	r4, r0
 800b2e2:	460d      	mov	r5, r1
 800b2e4:	f7f5 f9a0 	bl	8000628 <__aeabi_dmul>
 800b2e8:	a34f      	add	r3, pc, #316	@ (adr r3, 800b428 <__ieee754_pow+0x400>)
 800b2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	460f      	mov	r7, r1
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	4629      	mov	r1, r5
 800b2f6:	f7f5 f997 	bl	8000628 <__aeabi_dmul>
 800b2fa:	4b52      	ldr	r3, [pc, #328]	@ (800b444 <__ieee754_pow+0x41c>)
 800b2fc:	4682      	mov	sl, r0
 800b2fe:	468b      	mov	fp, r1
 800b300:	2200      	movs	r2, #0
 800b302:	4620      	mov	r0, r4
 800b304:	4629      	mov	r1, r5
 800b306:	f7f5 f98f 	bl	8000628 <__aeabi_dmul>
 800b30a:	4602      	mov	r2, r0
 800b30c:	460b      	mov	r3, r1
 800b30e:	a148      	add	r1, pc, #288	@ (adr r1, 800b430 <__ieee754_pow+0x408>)
 800b310:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b314:	f7f4 ffd0 	bl	80002b8 <__aeabi_dsub>
 800b318:	4622      	mov	r2, r4
 800b31a:	462b      	mov	r3, r5
 800b31c:	f7f5 f984 	bl	8000628 <__aeabi_dmul>
 800b320:	4602      	mov	r2, r0
 800b322:	460b      	mov	r3, r1
 800b324:	2000      	movs	r0, #0
 800b326:	4948      	ldr	r1, [pc, #288]	@ (800b448 <__ieee754_pow+0x420>)
 800b328:	f7f4 ffc6 	bl	80002b8 <__aeabi_dsub>
 800b32c:	4622      	mov	r2, r4
 800b32e:	4680      	mov	r8, r0
 800b330:	4689      	mov	r9, r1
 800b332:	462b      	mov	r3, r5
 800b334:	4620      	mov	r0, r4
 800b336:	4629      	mov	r1, r5
 800b338:	f7f5 f976 	bl	8000628 <__aeabi_dmul>
 800b33c:	4602      	mov	r2, r0
 800b33e:	460b      	mov	r3, r1
 800b340:	4640      	mov	r0, r8
 800b342:	4649      	mov	r1, r9
 800b344:	f7f5 f970 	bl	8000628 <__aeabi_dmul>
 800b348:	a33b      	add	r3, pc, #236	@ (adr r3, 800b438 <__ieee754_pow+0x410>)
 800b34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34e:	f7f5 f96b 	bl	8000628 <__aeabi_dmul>
 800b352:	4602      	mov	r2, r0
 800b354:	460b      	mov	r3, r1
 800b356:	4650      	mov	r0, sl
 800b358:	4659      	mov	r1, fp
 800b35a:	f7f4 ffad 	bl	80002b8 <__aeabi_dsub>
 800b35e:	4602      	mov	r2, r0
 800b360:	460b      	mov	r3, r1
 800b362:	4680      	mov	r8, r0
 800b364:	4689      	mov	r9, r1
 800b366:	4630      	mov	r0, r6
 800b368:	4639      	mov	r1, r7
 800b36a:	f7f4 ffa7 	bl	80002bc <__adddf3>
 800b36e:	2400      	movs	r4, #0
 800b370:	4632      	mov	r2, r6
 800b372:	463b      	mov	r3, r7
 800b374:	4620      	mov	r0, r4
 800b376:	460d      	mov	r5, r1
 800b378:	f7f4 ff9e 	bl	80002b8 <__aeabi_dsub>
 800b37c:	4602      	mov	r2, r0
 800b37e:	460b      	mov	r3, r1
 800b380:	4640      	mov	r0, r8
 800b382:	4649      	mov	r1, r9
 800b384:	f7f4 ff98 	bl	80002b8 <__aeabi_dsub>
 800b388:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b38c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b390:	2300      	movs	r3, #0
 800b392:	9304      	str	r3, [sp, #16]
 800b394:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b398:	4606      	mov	r6, r0
 800b39a:	460f      	mov	r7, r1
 800b39c:	465b      	mov	r3, fp
 800b39e:	4652      	mov	r2, sl
 800b3a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3a4:	f7f4 ff88 	bl	80002b8 <__aeabi_dsub>
 800b3a8:	4622      	mov	r2, r4
 800b3aa:	462b      	mov	r3, r5
 800b3ac:	f7f5 f93c 	bl	8000628 <__aeabi_dmul>
 800b3b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3b4:	4680      	mov	r8, r0
 800b3b6:	4689      	mov	r9, r1
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	4639      	mov	r1, r7
 800b3bc:	f7f5 f934 	bl	8000628 <__aeabi_dmul>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	4640      	mov	r0, r8
 800b3c6:	4649      	mov	r1, r9
 800b3c8:	f7f4 ff78 	bl	80002bc <__adddf3>
 800b3cc:	465b      	mov	r3, fp
 800b3ce:	4606      	mov	r6, r0
 800b3d0:	460f      	mov	r7, r1
 800b3d2:	4652      	mov	r2, sl
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	f7f5 f926 	bl	8000628 <__aeabi_dmul>
 800b3dc:	460b      	mov	r3, r1
 800b3de:	4602      	mov	r2, r0
 800b3e0:	4680      	mov	r8, r0
 800b3e2:	4689      	mov	r9, r1
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	4639      	mov	r1, r7
 800b3e8:	f7f4 ff68 	bl	80002bc <__adddf3>
 800b3ec:	4b17      	ldr	r3, [pc, #92]	@ (800b44c <__ieee754_pow+0x424>)
 800b3ee:	4299      	cmp	r1, r3
 800b3f0:	4604      	mov	r4, r0
 800b3f2:	460d      	mov	r5, r1
 800b3f4:	468b      	mov	fp, r1
 800b3f6:	f340 820b 	ble.w	800b810 <__ieee754_pow+0x7e8>
 800b3fa:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b3fe:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b402:	4303      	orrs	r3, r0
 800b404:	f000 81ea 	beq.w	800b7dc <__ieee754_pow+0x7b4>
 800b408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b40c:	2200      	movs	r2, #0
 800b40e:	2300      	movs	r3, #0
 800b410:	f7f5 fb7c 	bl	8000b0c <__aeabi_dcmplt>
 800b414:	3800      	subs	r0, #0
 800b416:	bf18      	it	ne
 800b418:	2001      	movne	r0, #1
 800b41a:	e713      	b.n	800b244 <__ieee754_pow+0x21c>
 800b41c:	f3af 8000 	nop.w
 800b420:	60000000 	.word	0x60000000
 800b424:	3ff71547 	.word	0x3ff71547
 800b428:	f85ddf44 	.word	0xf85ddf44
 800b42c:	3e54ae0b 	.word	0x3e54ae0b
 800b430:	55555555 	.word	0x55555555
 800b434:	3fd55555 	.word	0x3fd55555
 800b438:	652b82fe 	.word	0x652b82fe
 800b43c:	3ff71547 	.word	0x3ff71547
 800b440:	3ff00000 	.word	0x3ff00000
 800b444:	3fd00000 	.word	0x3fd00000
 800b448:	3fe00000 	.word	0x3fe00000
 800b44c:	408fffff 	.word	0x408fffff
 800b450:	4bd5      	ldr	r3, [pc, #852]	@ (800b7a8 <__ieee754_pow+0x780>)
 800b452:	ea08 0303 	and.w	r3, r8, r3
 800b456:	2200      	movs	r2, #0
 800b458:	b92b      	cbnz	r3, 800b466 <__ieee754_pow+0x43e>
 800b45a:	4bd4      	ldr	r3, [pc, #848]	@ (800b7ac <__ieee754_pow+0x784>)
 800b45c:	f7f5 f8e4 	bl	8000628 <__aeabi_dmul>
 800b460:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800b464:	468b      	mov	fp, r1
 800b466:	ea4f 532b 	mov.w	r3, fp, asr #20
 800b46a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b46e:	4413      	add	r3, r2
 800b470:	930a      	str	r3, [sp, #40]	@ 0x28
 800b472:	4bcf      	ldr	r3, [pc, #828]	@ (800b7b0 <__ieee754_pow+0x788>)
 800b474:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800b478:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800b47c:	459b      	cmp	fp, r3
 800b47e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b482:	dd08      	ble.n	800b496 <__ieee754_pow+0x46e>
 800b484:	4bcb      	ldr	r3, [pc, #812]	@ (800b7b4 <__ieee754_pow+0x78c>)
 800b486:	459b      	cmp	fp, r3
 800b488:	f340 81a5 	ble.w	800b7d6 <__ieee754_pow+0x7ae>
 800b48c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b48e:	3301      	adds	r3, #1
 800b490:	930a      	str	r3, [sp, #40]	@ 0x28
 800b492:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b496:	f04f 0a00 	mov.w	sl, #0
 800b49a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b49e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4a0:	4bc5      	ldr	r3, [pc, #788]	@ (800b7b8 <__ieee754_pow+0x790>)
 800b4a2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b4a6:	ed93 7b00 	vldr	d7, [r3]
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	ec53 2b17 	vmov	r2, r3, d7
 800b4b0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b4b8:	f7f4 fefe 	bl	80002b8 <__aeabi_dsub>
 800b4bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b4c0:	4606      	mov	r6, r0
 800b4c2:	460f      	mov	r7, r1
 800b4c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4c8:	f7f4 fef8 	bl	80002bc <__adddf3>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	49ba      	ldr	r1, [pc, #744]	@ (800b7bc <__ieee754_pow+0x794>)
 800b4d4:	f7f5 f9d2 	bl	800087c <__aeabi_ddiv>
 800b4d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b4dc:	4602      	mov	r2, r0
 800b4de:	460b      	mov	r3, r1
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	4639      	mov	r1, r7
 800b4e4:	f7f5 f8a0 	bl	8000628 <__aeabi_dmul>
 800b4e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4ec:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800b4f0:	106d      	asrs	r5, r5, #1
 800b4f2:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b4f6:	f04f 0b00 	mov.w	fp, #0
 800b4fa:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b4fe:	4661      	mov	r1, ip
 800b500:	2200      	movs	r2, #0
 800b502:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b506:	4658      	mov	r0, fp
 800b508:	46e1      	mov	r9, ip
 800b50a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800b50e:	4614      	mov	r4, r2
 800b510:	461d      	mov	r5, r3
 800b512:	f7f5 f889 	bl	8000628 <__aeabi_dmul>
 800b516:	4602      	mov	r2, r0
 800b518:	460b      	mov	r3, r1
 800b51a:	4630      	mov	r0, r6
 800b51c:	4639      	mov	r1, r7
 800b51e:	f7f4 fecb 	bl	80002b8 <__aeabi_dsub>
 800b522:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b526:	4606      	mov	r6, r0
 800b528:	460f      	mov	r7, r1
 800b52a:	4620      	mov	r0, r4
 800b52c:	4629      	mov	r1, r5
 800b52e:	f7f4 fec3 	bl	80002b8 <__aeabi_dsub>
 800b532:	4602      	mov	r2, r0
 800b534:	460b      	mov	r3, r1
 800b536:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b53a:	f7f4 febd 	bl	80002b8 <__aeabi_dsub>
 800b53e:	465a      	mov	r2, fp
 800b540:	464b      	mov	r3, r9
 800b542:	f7f5 f871 	bl	8000628 <__aeabi_dmul>
 800b546:	4602      	mov	r2, r0
 800b548:	460b      	mov	r3, r1
 800b54a:	4630      	mov	r0, r6
 800b54c:	4639      	mov	r1, r7
 800b54e:	f7f4 feb3 	bl	80002b8 <__aeabi_dsub>
 800b552:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b556:	f7f5 f867 	bl	8000628 <__aeabi_dmul>
 800b55a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b55e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b562:	4610      	mov	r0, r2
 800b564:	4619      	mov	r1, r3
 800b566:	f7f5 f85f 	bl	8000628 <__aeabi_dmul>
 800b56a:	a37d      	add	r3, pc, #500	@ (adr r3, 800b760 <__ieee754_pow+0x738>)
 800b56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b570:	4604      	mov	r4, r0
 800b572:	460d      	mov	r5, r1
 800b574:	f7f5 f858 	bl	8000628 <__aeabi_dmul>
 800b578:	a37b      	add	r3, pc, #492	@ (adr r3, 800b768 <__ieee754_pow+0x740>)
 800b57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57e:	f7f4 fe9d 	bl	80002bc <__adddf3>
 800b582:	4622      	mov	r2, r4
 800b584:	462b      	mov	r3, r5
 800b586:	f7f5 f84f 	bl	8000628 <__aeabi_dmul>
 800b58a:	a379      	add	r3, pc, #484	@ (adr r3, 800b770 <__ieee754_pow+0x748>)
 800b58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b590:	f7f4 fe94 	bl	80002bc <__adddf3>
 800b594:	4622      	mov	r2, r4
 800b596:	462b      	mov	r3, r5
 800b598:	f7f5 f846 	bl	8000628 <__aeabi_dmul>
 800b59c:	a376      	add	r3, pc, #472	@ (adr r3, 800b778 <__ieee754_pow+0x750>)
 800b59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a2:	f7f4 fe8b 	bl	80002bc <__adddf3>
 800b5a6:	4622      	mov	r2, r4
 800b5a8:	462b      	mov	r3, r5
 800b5aa:	f7f5 f83d 	bl	8000628 <__aeabi_dmul>
 800b5ae:	a374      	add	r3, pc, #464	@ (adr r3, 800b780 <__ieee754_pow+0x758>)
 800b5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b4:	f7f4 fe82 	bl	80002bc <__adddf3>
 800b5b8:	4622      	mov	r2, r4
 800b5ba:	462b      	mov	r3, r5
 800b5bc:	f7f5 f834 	bl	8000628 <__aeabi_dmul>
 800b5c0:	a371      	add	r3, pc, #452	@ (adr r3, 800b788 <__ieee754_pow+0x760>)
 800b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c6:	f7f4 fe79 	bl	80002bc <__adddf3>
 800b5ca:	4622      	mov	r2, r4
 800b5cc:	4606      	mov	r6, r0
 800b5ce:	460f      	mov	r7, r1
 800b5d0:	462b      	mov	r3, r5
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	f7f5 f827 	bl	8000628 <__aeabi_dmul>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	460b      	mov	r3, r1
 800b5de:	4630      	mov	r0, r6
 800b5e0:	4639      	mov	r1, r7
 800b5e2:	f7f5 f821 	bl	8000628 <__aeabi_dmul>
 800b5e6:	465a      	mov	r2, fp
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	460d      	mov	r5, r1
 800b5ec:	464b      	mov	r3, r9
 800b5ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5f2:	f7f4 fe63 	bl	80002bc <__adddf3>
 800b5f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5fa:	f7f5 f815 	bl	8000628 <__aeabi_dmul>
 800b5fe:	4622      	mov	r2, r4
 800b600:	462b      	mov	r3, r5
 800b602:	f7f4 fe5b 	bl	80002bc <__adddf3>
 800b606:	465a      	mov	r2, fp
 800b608:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b60c:	464b      	mov	r3, r9
 800b60e:	4658      	mov	r0, fp
 800b610:	4649      	mov	r1, r9
 800b612:	f7f5 f809 	bl	8000628 <__aeabi_dmul>
 800b616:	4b6a      	ldr	r3, [pc, #424]	@ (800b7c0 <__ieee754_pow+0x798>)
 800b618:	2200      	movs	r2, #0
 800b61a:	4606      	mov	r6, r0
 800b61c:	460f      	mov	r7, r1
 800b61e:	f7f4 fe4d 	bl	80002bc <__adddf3>
 800b622:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b626:	f7f4 fe49 	bl	80002bc <__adddf3>
 800b62a:	46d8      	mov	r8, fp
 800b62c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800b630:	460d      	mov	r5, r1
 800b632:	465a      	mov	r2, fp
 800b634:	460b      	mov	r3, r1
 800b636:	4640      	mov	r0, r8
 800b638:	4649      	mov	r1, r9
 800b63a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800b63e:	f7f4 fff3 	bl	8000628 <__aeabi_dmul>
 800b642:	465c      	mov	r4, fp
 800b644:	4680      	mov	r8, r0
 800b646:	4689      	mov	r9, r1
 800b648:	4b5d      	ldr	r3, [pc, #372]	@ (800b7c0 <__ieee754_pow+0x798>)
 800b64a:	2200      	movs	r2, #0
 800b64c:	4620      	mov	r0, r4
 800b64e:	4629      	mov	r1, r5
 800b650:	f7f4 fe32 	bl	80002b8 <__aeabi_dsub>
 800b654:	4632      	mov	r2, r6
 800b656:	463b      	mov	r3, r7
 800b658:	f7f4 fe2e 	bl	80002b8 <__aeabi_dsub>
 800b65c:	4602      	mov	r2, r0
 800b65e:	460b      	mov	r3, r1
 800b660:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b664:	f7f4 fe28 	bl	80002b8 <__aeabi_dsub>
 800b668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b66c:	f7f4 ffdc 	bl	8000628 <__aeabi_dmul>
 800b670:	4622      	mov	r2, r4
 800b672:	4606      	mov	r6, r0
 800b674:	460f      	mov	r7, r1
 800b676:	462b      	mov	r3, r5
 800b678:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b67c:	f7f4 ffd4 	bl	8000628 <__aeabi_dmul>
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	4630      	mov	r0, r6
 800b686:	4639      	mov	r1, r7
 800b688:	f7f4 fe18 	bl	80002bc <__adddf3>
 800b68c:	4606      	mov	r6, r0
 800b68e:	460f      	mov	r7, r1
 800b690:	4602      	mov	r2, r0
 800b692:	460b      	mov	r3, r1
 800b694:	4640      	mov	r0, r8
 800b696:	4649      	mov	r1, r9
 800b698:	f7f4 fe10 	bl	80002bc <__adddf3>
 800b69c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800b6a0:	a33b      	add	r3, pc, #236	@ (adr r3, 800b790 <__ieee754_pow+0x768>)
 800b6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a6:	4658      	mov	r0, fp
 800b6a8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800b6ac:	460d      	mov	r5, r1
 800b6ae:	f7f4 ffbb 	bl	8000628 <__aeabi_dmul>
 800b6b2:	465c      	mov	r4, fp
 800b6b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6b8:	4642      	mov	r2, r8
 800b6ba:	464b      	mov	r3, r9
 800b6bc:	4620      	mov	r0, r4
 800b6be:	4629      	mov	r1, r5
 800b6c0:	f7f4 fdfa 	bl	80002b8 <__aeabi_dsub>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	4639      	mov	r1, r7
 800b6cc:	f7f4 fdf4 	bl	80002b8 <__aeabi_dsub>
 800b6d0:	a331      	add	r3, pc, #196	@ (adr r3, 800b798 <__ieee754_pow+0x770>)
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	f7f4 ffa7 	bl	8000628 <__aeabi_dmul>
 800b6da:	a331      	add	r3, pc, #196	@ (adr r3, 800b7a0 <__ieee754_pow+0x778>)
 800b6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e0:	4606      	mov	r6, r0
 800b6e2:	460f      	mov	r7, r1
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	f7f4 ff9e 	bl	8000628 <__aeabi_dmul>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	4639      	mov	r1, r7
 800b6f4:	f7f4 fde2 	bl	80002bc <__adddf3>
 800b6f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b6fa:	4b32      	ldr	r3, [pc, #200]	@ (800b7c4 <__ieee754_pow+0x79c>)
 800b6fc:	4413      	add	r3, r2
 800b6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b702:	f7f4 fddb 	bl	80002bc <__adddf3>
 800b706:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b70a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b70c:	f7f4 ff22 	bl	8000554 <__aeabi_i2d>
 800b710:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b712:	4b2d      	ldr	r3, [pc, #180]	@ (800b7c8 <__ieee754_pow+0x7a0>)
 800b714:	4413      	add	r3, r2
 800b716:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b71a:	4606      	mov	r6, r0
 800b71c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b720:	460f      	mov	r7, r1
 800b722:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b726:	f7f4 fdc9 	bl	80002bc <__adddf3>
 800b72a:	4642      	mov	r2, r8
 800b72c:	464b      	mov	r3, r9
 800b72e:	f7f4 fdc5 	bl	80002bc <__adddf3>
 800b732:	4632      	mov	r2, r6
 800b734:	463b      	mov	r3, r7
 800b736:	f7f4 fdc1 	bl	80002bc <__adddf3>
 800b73a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800b73e:	4632      	mov	r2, r6
 800b740:	463b      	mov	r3, r7
 800b742:	4658      	mov	r0, fp
 800b744:	460d      	mov	r5, r1
 800b746:	f7f4 fdb7 	bl	80002b8 <__aeabi_dsub>
 800b74a:	4642      	mov	r2, r8
 800b74c:	464b      	mov	r3, r9
 800b74e:	f7f4 fdb3 	bl	80002b8 <__aeabi_dsub>
 800b752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b756:	f7f4 fdaf 	bl	80002b8 <__aeabi_dsub>
 800b75a:	465c      	mov	r4, fp
 800b75c:	e036      	b.n	800b7cc <__ieee754_pow+0x7a4>
 800b75e:	bf00      	nop
 800b760:	4a454eef 	.word	0x4a454eef
 800b764:	3fca7e28 	.word	0x3fca7e28
 800b768:	93c9db65 	.word	0x93c9db65
 800b76c:	3fcd864a 	.word	0x3fcd864a
 800b770:	a91d4101 	.word	0xa91d4101
 800b774:	3fd17460 	.word	0x3fd17460
 800b778:	518f264d 	.word	0x518f264d
 800b77c:	3fd55555 	.word	0x3fd55555
 800b780:	db6fabff 	.word	0xdb6fabff
 800b784:	3fdb6db6 	.word	0x3fdb6db6
 800b788:	33333303 	.word	0x33333303
 800b78c:	3fe33333 	.word	0x3fe33333
 800b790:	e0000000 	.word	0xe0000000
 800b794:	3feec709 	.word	0x3feec709
 800b798:	dc3a03fd 	.word	0xdc3a03fd
 800b79c:	3feec709 	.word	0x3feec709
 800b7a0:	145b01f5 	.word	0x145b01f5
 800b7a4:	be3e2fe0 	.word	0xbe3e2fe0
 800b7a8:	7ff00000 	.word	0x7ff00000
 800b7ac:	43400000 	.word	0x43400000
 800b7b0:	0003988e 	.word	0x0003988e
 800b7b4:	000bb679 	.word	0x000bb679
 800b7b8:	0800c668 	.word	0x0800c668
 800b7bc:	3ff00000 	.word	0x3ff00000
 800b7c0:	40080000 	.word	0x40080000
 800b7c4:	0800c648 	.word	0x0800c648
 800b7c8:	0800c658 	.word	0x0800c658
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7d4:	e5d6      	b.n	800b384 <__ieee754_pow+0x35c>
 800b7d6:	f04f 0a01 	mov.w	sl, #1
 800b7da:	e65e      	b.n	800b49a <__ieee754_pow+0x472>
 800b7dc:	a3b5      	add	r3, pc, #724	@ (adr r3, 800bab4 <__ieee754_pow+0xa8c>)
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	f7f4 fd69 	bl	80002bc <__adddf3>
 800b7ea:	4642      	mov	r2, r8
 800b7ec:	e9cd 0100 	strd	r0, r1, [sp]
 800b7f0:	464b      	mov	r3, r9
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	f7f4 fd5f 	bl	80002b8 <__aeabi_dsub>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b802:	f7f5 f9a1 	bl	8000b48 <__aeabi_dcmpgt>
 800b806:	2800      	cmp	r0, #0
 800b808:	f47f adfe 	bne.w	800b408 <__ieee754_pow+0x3e0>
 800b80c:	4ba2      	ldr	r3, [pc, #648]	@ (800ba98 <__ieee754_pow+0xa70>)
 800b80e:	e022      	b.n	800b856 <__ieee754_pow+0x82e>
 800b810:	4ca2      	ldr	r4, [pc, #648]	@ (800ba9c <__ieee754_pow+0xa74>)
 800b812:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b816:	42a3      	cmp	r3, r4
 800b818:	d919      	bls.n	800b84e <__ieee754_pow+0x826>
 800b81a:	4ba1      	ldr	r3, [pc, #644]	@ (800baa0 <__ieee754_pow+0xa78>)
 800b81c:	440b      	add	r3, r1
 800b81e:	4303      	orrs	r3, r0
 800b820:	d009      	beq.n	800b836 <__ieee754_pow+0x80e>
 800b822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b826:	2200      	movs	r2, #0
 800b828:	2300      	movs	r3, #0
 800b82a:	f7f5 f96f 	bl	8000b0c <__aeabi_dcmplt>
 800b82e:	3800      	subs	r0, #0
 800b830:	bf18      	it	ne
 800b832:	2001      	movne	r0, #1
 800b834:	e512      	b.n	800b25c <__ieee754_pow+0x234>
 800b836:	4642      	mov	r2, r8
 800b838:	464b      	mov	r3, r9
 800b83a:	f7f4 fd3d 	bl	80002b8 <__aeabi_dsub>
 800b83e:	4632      	mov	r2, r6
 800b840:	463b      	mov	r3, r7
 800b842:	f7f5 f977 	bl	8000b34 <__aeabi_dcmpge>
 800b846:	2800      	cmp	r0, #0
 800b848:	d1eb      	bne.n	800b822 <__ieee754_pow+0x7fa>
 800b84a:	4b96      	ldr	r3, [pc, #600]	@ (800baa4 <__ieee754_pow+0xa7c>)
 800b84c:	e003      	b.n	800b856 <__ieee754_pow+0x82e>
 800b84e:	4a96      	ldr	r2, [pc, #600]	@ (800baa8 <__ieee754_pow+0xa80>)
 800b850:	4293      	cmp	r3, r2
 800b852:	f240 80e7 	bls.w	800ba24 <__ieee754_pow+0x9fc>
 800b856:	151b      	asrs	r3, r3, #20
 800b858:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800b85c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800b860:	fa4a fa03 	asr.w	sl, sl, r3
 800b864:	44da      	add	sl, fp
 800b866:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b86a:	4890      	ldr	r0, [pc, #576]	@ (800baac <__ieee754_pow+0xa84>)
 800b86c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b870:	4108      	asrs	r0, r1
 800b872:	ea00 030a 	and.w	r3, r0, sl
 800b876:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b87a:	f1c1 0114 	rsb	r1, r1, #20
 800b87e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b882:	fa4a fa01 	asr.w	sl, sl, r1
 800b886:	f1bb 0f00 	cmp.w	fp, #0
 800b88a:	4640      	mov	r0, r8
 800b88c:	4649      	mov	r1, r9
 800b88e:	f04f 0200 	mov.w	r2, #0
 800b892:	bfb8      	it	lt
 800b894:	f1ca 0a00 	rsblt	sl, sl, #0
 800b898:	f7f4 fd0e 	bl	80002b8 <__aeabi_dsub>
 800b89c:	4680      	mov	r8, r0
 800b89e:	4689      	mov	r9, r1
 800b8a0:	4632      	mov	r2, r6
 800b8a2:	463b      	mov	r3, r7
 800b8a4:	4640      	mov	r0, r8
 800b8a6:	4649      	mov	r1, r9
 800b8a8:	f7f4 fd08 	bl	80002bc <__adddf3>
 800b8ac:	2400      	movs	r4, #0
 800b8ae:	a36a      	add	r3, pc, #424	@ (adr r3, 800ba58 <__ieee754_pow+0xa30>)
 800b8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	460d      	mov	r5, r1
 800b8b8:	f7f4 feb6 	bl	8000628 <__aeabi_dmul>
 800b8bc:	4642      	mov	r2, r8
 800b8be:	e9cd 0100 	strd	r0, r1, [sp]
 800b8c2:	464b      	mov	r3, r9
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	4629      	mov	r1, r5
 800b8c8:	f7f4 fcf6 	bl	80002b8 <__aeabi_dsub>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	4639      	mov	r1, r7
 800b8d4:	f7f4 fcf0 	bl	80002b8 <__aeabi_dsub>
 800b8d8:	a361      	add	r3, pc, #388	@ (adr r3, 800ba60 <__ieee754_pow+0xa38>)
 800b8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8de:	f7f4 fea3 	bl	8000628 <__aeabi_dmul>
 800b8e2:	a361      	add	r3, pc, #388	@ (adr r3, 800ba68 <__ieee754_pow+0xa40>)
 800b8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e8:	4680      	mov	r8, r0
 800b8ea:	4689      	mov	r9, r1
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	4629      	mov	r1, r5
 800b8f0:	f7f4 fe9a 	bl	8000628 <__aeabi_dmul>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	4640      	mov	r0, r8
 800b8fa:	4649      	mov	r1, r9
 800b8fc:	f7f4 fcde 	bl	80002bc <__adddf3>
 800b900:	4604      	mov	r4, r0
 800b902:	460d      	mov	r5, r1
 800b904:	4602      	mov	r2, r0
 800b906:	460b      	mov	r3, r1
 800b908:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b90c:	f7f4 fcd6 	bl	80002bc <__adddf3>
 800b910:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b914:	4680      	mov	r8, r0
 800b916:	4689      	mov	r9, r1
 800b918:	f7f4 fcce 	bl	80002b8 <__aeabi_dsub>
 800b91c:	4602      	mov	r2, r0
 800b91e:	460b      	mov	r3, r1
 800b920:	4620      	mov	r0, r4
 800b922:	4629      	mov	r1, r5
 800b924:	f7f4 fcc8 	bl	80002b8 <__aeabi_dsub>
 800b928:	4642      	mov	r2, r8
 800b92a:	4606      	mov	r6, r0
 800b92c:	460f      	mov	r7, r1
 800b92e:	464b      	mov	r3, r9
 800b930:	4640      	mov	r0, r8
 800b932:	4649      	mov	r1, r9
 800b934:	f7f4 fe78 	bl	8000628 <__aeabi_dmul>
 800b938:	a34d      	add	r3, pc, #308	@ (adr r3, 800ba70 <__ieee754_pow+0xa48>)
 800b93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93e:	4604      	mov	r4, r0
 800b940:	460d      	mov	r5, r1
 800b942:	f7f4 fe71 	bl	8000628 <__aeabi_dmul>
 800b946:	a34c      	add	r3, pc, #304	@ (adr r3, 800ba78 <__ieee754_pow+0xa50>)
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	f7f4 fcb4 	bl	80002b8 <__aeabi_dsub>
 800b950:	4622      	mov	r2, r4
 800b952:	462b      	mov	r3, r5
 800b954:	f7f4 fe68 	bl	8000628 <__aeabi_dmul>
 800b958:	a349      	add	r3, pc, #292	@ (adr r3, 800ba80 <__ieee754_pow+0xa58>)
 800b95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95e:	f7f4 fcad 	bl	80002bc <__adddf3>
 800b962:	4622      	mov	r2, r4
 800b964:	462b      	mov	r3, r5
 800b966:	f7f4 fe5f 	bl	8000628 <__aeabi_dmul>
 800b96a:	a347      	add	r3, pc, #284	@ (adr r3, 800ba88 <__ieee754_pow+0xa60>)
 800b96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b970:	f7f4 fca2 	bl	80002b8 <__aeabi_dsub>
 800b974:	4622      	mov	r2, r4
 800b976:	462b      	mov	r3, r5
 800b978:	f7f4 fe56 	bl	8000628 <__aeabi_dmul>
 800b97c:	a344      	add	r3, pc, #272	@ (adr r3, 800ba90 <__ieee754_pow+0xa68>)
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	f7f4 fc9b 	bl	80002bc <__adddf3>
 800b986:	4622      	mov	r2, r4
 800b988:	462b      	mov	r3, r5
 800b98a:	f7f4 fe4d 	bl	8000628 <__aeabi_dmul>
 800b98e:	4602      	mov	r2, r0
 800b990:	460b      	mov	r3, r1
 800b992:	4640      	mov	r0, r8
 800b994:	4649      	mov	r1, r9
 800b996:	f7f4 fc8f 	bl	80002b8 <__aeabi_dsub>
 800b99a:	4604      	mov	r4, r0
 800b99c:	460d      	mov	r5, r1
 800b99e:	4602      	mov	r2, r0
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	4640      	mov	r0, r8
 800b9a4:	4649      	mov	r1, r9
 800b9a6:	f7f4 fe3f 	bl	8000628 <__aeabi_dmul>
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	e9cd 0100 	strd	r0, r1, [sp]
 800b9b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	f7f4 fc7e 	bl	80002b8 <__aeabi_dsub>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	460b      	mov	r3, r1
 800b9c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9c4:	f7f4 ff5a 	bl	800087c <__aeabi_ddiv>
 800b9c8:	4632      	mov	r2, r6
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	460d      	mov	r5, r1
 800b9ce:	463b      	mov	r3, r7
 800b9d0:	4640      	mov	r0, r8
 800b9d2:	4649      	mov	r1, r9
 800b9d4:	f7f4 fe28 	bl	8000628 <__aeabi_dmul>
 800b9d8:	4632      	mov	r2, r6
 800b9da:	463b      	mov	r3, r7
 800b9dc:	f7f4 fc6e 	bl	80002bc <__adddf3>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	4629      	mov	r1, r5
 800b9e8:	f7f4 fc66 	bl	80002b8 <__aeabi_dsub>
 800b9ec:	4642      	mov	r2, r8
 800b9ee:	464b      	mov	r3, r9
 800b9f0:	f7f4 fc62 	bl	80002b8 <__aeabi_dsub>
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	492d      	ldr	r1, [pc, #180]	@ (800bab0 <__ieee754_pow+0xa88>)
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	f7f4 fc5c 	bl	80002b8 <__aeabi_dsub>
 800ba00:	ec41 0b10 	vmov	d0, r0, r1
 800ba04:	ee10 3a90 	vmov	r3, s1
 800ba08:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ba0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba10:	da0b      	bge.n	800ba2a <__ieee754_pow+0xa02>
 800ba12:	4650      	mov	r0, sl
 800ba14:	f000 f85c 	bl	800bad0 <scalbn>
 800ba18:	ec51 0b10 	vmov	r0, r1, d0
 800ba1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba20:	f7ff bb6d 	b.w	800b0fe <__ieee754_pow+0xd6>
 800ba24:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ba28:	e73a      	b.n	800b8a0 <__ieee754_pow+0x878>
 800ba2a:	ec51 0b10 	vmov	r0, r1, d0
 800ba2e:	4619      	mov	r1, r3
 800ba30:	e7f4      	b.n	800ba1c <__ieee754_pow+0x9f4>
 800ba32:	491f      	ldr	r1, [pc, #124]	@ (800bab0 <__ieee754_pow+0xa88>)
 800ba34:	2000      	movs	r0, #0
 800ba36:	f7ff bb14 	b.w	800b062 <__ieee754_pow+0x3a>
 800ba3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba3e:	f7ff bb10 	b.w	800b062 <__ieee754_pow+0x3a>
 800ba42:	4630      	mov	r0, r6
 800ba44:	4639      	mov	r1, r7
 800ba46:	f7ff bb0c 	b.w	800b062 <__ieee754_pow+0x3a>
 800ba4a:	460c      	mov	r4, r1
 800ba4c:	f7ff bb69 	b.w	800b122 <__ieee754_pow+0xfa>
 800ba50:	2400      	movs	r4, #0
 800ba52:	f7ff bb4b 	b.w	800b0ec <__ieee754_pow+0xc4>
 800ba56:	bf00      	nop
 800ba58:	00000000 	.word	0x00000000
 800ba5c:	3fe62e43 	.word	0x3fe62e43
 800ba60:	fefa39ef 	.word	0xfefa39ef
 800ba64:	3fe62e42 	.word	0x3fe62e42
 800ba68:	0ca86c39 	.word	0x0ca86c39
 800ba6c:	be205c61 	.word	0xbe205c61
 800ba70:	72bea4d0 	.word	0x72bea4d0
 800ba74:	3e663769 	.word	0x3e663769
 800ba78:	c5d26bf1 	.word	0xc5d26bf1
 800ba7c:	3ebbbd41 	.word	0x3ebbbd41
 800ba80:	af25de2c 	.word	0xaf25de2c
 800ba84:	3f11566a 	.word	0x3f11566a
 800ba88:	16bebd93 	.word	0x16bebd93
 800ba8c:	3f66c16c 	.word	0x3f66c16c
 800ba90:	5555553e 	.word	0x5555553e
 800ba94:	3fc55555 	.word	0x3fc55555
 800ba98:	40900000 	.word	0x40900000
 800ba9c:	4090cbff 	.word	0x4090cbff
 800baa0:	3f6f3400 	.word	0x3f6f3400
 800baa4:	4090cc00 	.word	0x4090cc00
 800baa8:	3fe00000 	.word	0x3fe00000
 800baac:	fff00000 	.word	0xfff00000
 800bab0:	3ff00000 	.word	0x3ff00000
 800bab4:	652b82fe 	.word	0x652b82fe
 800bab8:	3c971547 	.word	0x3c971547

0800babc <fabs>:
 800babc:	ec51 0b10 	vmov	r0, r1, d0
 800bac0:	4602      	mov	r2, r0
 800bac2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bac6:	ec43 2b10 	vmov	d0, r2, r3
 800baca:	4770      	bx	lr
 800bacc:	0000      	movs	r0, r0
	...

0800bad0 <scalbn>:
 800bad0:	b570      	push	{r4, r5, r6, lr}
 800bad2:	ec55 4b10 	vmov	r4, r5, d0
 800bad6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bada:	4606      	mov	r6, r0
 800badc:	462b      	mov	r3, r5
 800bade:	b991      	cbnz	r1, 800bb06 <scalbn+0x36>
 800bae0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bae4:	4323      	orrs	r3, r4
 800bae6:	d03b      	beq.n	800bb60 <scalbn+0x90>
 800bae8:	4b33      	ldr	r3, [pc, #204]	@ (800bbb8 <scalbn+0xe8>)
 800baea:	4620      	mov	r0, r4
 800baec:	4629      	mov	r1, r5
 800baee:	2200      	movs	r2, #0
 800baf0:	f7f4 fd9a 	bl	8000628 <__aeabi_dmul>
 800baf4:	4b31      	ldr	r3, [pc, #196]	@ (800bbbc <scalbn+0xec>)
 800baf6:	429e      	cmp	r6, r3
 800baf8:	4604      	mov	r4, r0
 800bafa:	460d      	mov	r5, r1
 800bafc:	da0f      	bge.n	800bb1e <scalbn+0x4e>
 800bafe:	a326      	add	r3, pc, #152	@ (adr r3, 800bb98 <scalbn+0xc8>)
 800bb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb04:	e01e      	b.n	800bb44 <scalbn+0x74>
 800bb06:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800bb0a:	4291      	cmp	r1, r2
 800bb0c:	d10b      	bne.n	800bb26 <scalbn+0x56>
 800bb0e:	4622      	mov	r2, r4
 800bb10:	4620      	mov	r0, r4
 800bb12:	4629      	mov	r1, r5
 800bb14:	f7f4 fbd2 	bl	80002bc <__adddf3>
 800bb18:	4604      	mov	r4, r0
 800bb1a:	460d      	mov	r5, r1
 800bb1c:	e020      	b.n	800bb60 <scalbn+0x90>
 800bb1e:	460b      	mov	r3, r1
 800bb20:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bb24:	3936      	subs	r1, #54	@ 0x36
 800bb26:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800bb2a:	4296      	cmp	r6, r2
 800bb2c:	dd0d      	ble.n	800bb4a <scalbn+0x7a>
 800bb2e:	2d00      	cmp	r5, #0
 800bb30:	a11b      	add	r1, pc, #108	@ (adr r1, 800bba0 <scalbn+0xd0>)
 800bb32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb36:	da02      	bge.n	800bb3e <scalbn+0x6e>
 800bb38:	a11b      	add	r1, pc, #108	@ (adr r1, 800bba8 <scalbn+0xd8>)
 800bb3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb3e:	a318      	add	r3, pc, #96	@ (adr r3, 800bba0 <scalbn+0xd0>)
 800bb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb44:	f7f4 fd70 	bl	8000628 <__aeabi_dmul>
 800bb48:	e7e6      	b.n	800bb18 <scalbn+0x48>
 800bb4a:	1872      	adds	r2, r6, r1
 800bb4c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bb50:	428a      	cmp	r2, r1
 800bb52:	dcec      	bgt.n	800bb2e <scalbn+0x5e>
 800bb54:	2a00      	cmp	r2, #0
 800bb56:	dd06      	ble.n	800bb66 <scalbn+0x96>
 800bb58:	f36f 531e 	bfc	r3, #20, #11
 800bb5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb60:	ec45 4b10 	vmov	d0, r4, r5
 800bb64:	bd70      	pop	{r4, r5, r6, pc}
 800bb66:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bb6a:	da08      	bge.n	800bb7e <scalbn+0xae>
 800bb6c:	2d00      	cmp	r5, #0
 800bb6e:	a10a      	add	r1, pc, #40	@ (adr r1, 800bb98 <scalbn+0xc8>)
 800bb70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb74:	dac3      	bge.n	800bafe <scalbn+0x2e>
 800bb76:	a10e      	add	r1, pc, #56	@ (adr r1, 800bbb0 <scalbn+0xe0>)
 800bb78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb7c:	e7bf      	b.n	800bafe <scalbn+0x2e>
 800bb7e:	3236      	adds	r2, #54	@ 0x36
 800bb80:	f36f 531e 	bfc	r3, #20, #11
 800bb84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb88:	4620      	mov	r0, r4
 800bb8a:	4b0d      	ldr	r3, [pc, #52]	@ (800bbc0 <scalbn+0xf0>)
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	2200      	movs	r2, #0
 800bb90:	e7d8      	b.n	800bb44 <scalbn+0x74>
 800bb92:	bf00      	nop
 800bb94:	f3af 8000 	nop.w
 800bb98:	c2f8f359 	.word	0xc2f8f359
 800bb9c:	01a56e1f 	.word	0x01a56e1f
 800bba0:	8800759c 	.word	0x8800759c
 800bba4:	7e37e43c 	.word	0x7e37e43c
 800bba8:	8800759c 	.word	0x8800759c
 800bbac:	fe37e43c 	.word	0xfe37e43c
 800bbb0:	c2f8f359 	.word	0xc2f8f359
 800bbb4:	81a56e1f 	.word	0x81a56e1f
 800bbb8:	43500000 	.word	0x43500000
 800bbbc:	ffff3cb0 	.word	0xffff3cb0
 800bbc0:	3c900000 	.word	0x3c900000

0800bbc4 <with_errno>:
 800bbc4:	b510      	push	{r4, lr}
 800bbc6:	ed2d 8b02 	vpush	{d8}
 800bbca:	eeb0 8a40 	vmov.f32	s16, s0
 800bbce:	eef0 8a60 	vmov.f32	s17, s1
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	f7fc fd12 	bl	80085fc <__errno>
 800bbd8:	eeb0 0a48 	vmov.f32	s0, s16
 800bbdc:	eef0 0a68 	vmov.f32	s1, s17
 800bbe0:	ecbd 8b02 	vpop	{d8}
 800bbe4:	6004      	str	r4, [r0, #0]
 800bbe6:	bd10      	pop	{r4, pc}

0800bbe8 <xflow>:
 800bbe8:	4603      	mov	r3, r0
 800bbea:	b507      	push	{r0, r1, r2, lr}
 800bbec:	ec51 0b10 	vmov	r0, r1, d0
 800bbf0:	b183      	cbz	r3, 800bc14 <xflow+0x2c>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bbf8:	e9cd 2300 	strd	r2, r3, [sp]
 800bbfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc00:	f7f4 fd12 	bl	8000628 <__aeabi_dmul>
 800bc04:	ec41 0b10 	vmov	d0, r0, r1
 800bc08:	2022      	movs	r0, #34	@ 0x22
 800bc0a:	b003      	add	sp, #12
 800bc0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc10:	f7ff bfd8 	b.w	800bbc4 <with_errno>
 800bc14:	4602      	mov	r2, r0
 800bc16:	460b      	mov	r3, r1
 800bc18:	e7ee      	b.n	800bbf8 <xflow+0x10>
 800bc1a:	0000      	movs	r0, r0
 800bc1c:	0000      	movs	r0, r0
	...

0800bc20 <__math_uflow>:
 800bc20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bc28 <__math_uflow+0x8>
 800bc24:	f7ff bfe0 	b.w	800bbe8 <xflow>
 800bc28:	00000000 	.word	0x00000000
 800bc2c:	10000000 	.word	0x10000000

0800bc30 <__math_oflow>:
 800bc30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bc38 <__math_oflow+0x8>
 800bc34:	f7ff bfd8 	b.w	800bbe8 <xflow>
 800bc38:	00000000 	.word	0x00000000
 800bc3c:	70000000 	.word	0x70000000

0800bc40 <__ieee754_sqrt>:
 800bc40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc44:	4a66      	ldr	r2, [pc, #408]	@ (800bde0 <__ieee754_sqrt+0x1a0>)
 800bc46:	ec55 4b10 	vmov	r4, r5, d0
 800bc4a:	43aa      	bics	r2, r5
 800bc4c:	462b      	mov	r3, r5
 800bc4e:	4621      	mov	r1, r4
 800bc50:	d110      	bne.n	800bc74 <__ieee754_sqrt+0x34>
 800bc52:	4622      	mov	r2, r4
 800bc54:	4620      	mov	r0, r4
 800bc56:	4629      	mov	r1, r5
 800bc58:	f7f4 fce6 	bl	8000628 <__aeabi_dmul>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	460b      	mov	r3, r1
 800bc60:	4620      	mov	r0, r4
 800bc62:	4629      	mov	r1, r5
 800bc64:	f7f4 fb2a 	bl	80002bc <__adddf3>
 800bc68:	4604      	mov	r4, r0
 800bc6a:	460d      	mov	r5, r1
 800bc6c:	ec45 4b10 	vmov	d0, r4, r5
 800bc70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc74:	2d00      	cmp	r5, #0
 800bc76:	dc0e      	bgt.n	800bc96 <__ieee754_sqrt+0x56>
 800bc78:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bc7c:	4322      	orrs	r2, r4
 800bc7e:	d0f5      	beq.n	800bc6c <__ieee754_sqrt+0x2c>
 800bc80:	b19d      	cbz	r5, 800bcaa <__ieee754_sqrt+0x6a>
 800bc82:	4622      	mov	r2, r4
 800bc84:	4620      	mov	r0, r4
 800bc86:	4629      	mov	r1, r5
 800bc88:	f7f4 fb16 	bl	80002b8 <__aeabi_dsub>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	f7f4 fdf4 	bl	800087c <__aeabi_ddiv>
 800bc94:	e7e8      	b.n	800bc68 <__ieee754_sqrt+0x28>
 800bc96:	152a      	asrs	r2, r5, #20
 800bc98:	d115      	bne.n	800bcc6 <__ieee754_sqrt+0x86>
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	e009      	b.n	800bcb2 <__ieee754_sqrt+0x72>
 800bc9e:	0acb      	lsrs	r3, r1, #11
 800bca0:	3a15      	subs	r2, #21
 800bca2:	0549      	lsls	r1, r1, #21
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d0fa      	beq.n	800bc9e <__ieee754_sqrt+0x5e>
 800bca8:	e7f7      	b.n	800bc9a <__ieee754_sqrt+0x5a>
 800bcaa:	462a      	mov	r2, r5
 800bcac:	e7fa      	b.n	800bca4 <__ieee754_sqrt+0x64>
 800bcae:	005b      	lsls	r3, r3, #1
 800bcb0:	3001      	adds	r0, #1
 800bcb2:	02dc      	lsls	r4, r3, #11
 800bcb4:	d5fb      	bpl.n	800bcae <__ieee754_sqrt+0x6e>
 800bcb6:	1e44      	subs	r4, r0, #1
 800bcb8:	1b12      	subs	r2, r2, r4
 800bcba:	f1c0 0420 	rsb	r4, r0, #32
 800bcbe:	fa21 f404 	lsr.w	r4, r1, r4
 800bcc2:	4323      	orrs	r3, r4
 800bcc4:	4081      	lsls	r1, r0
 800bcc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bcca:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800bcce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bcd2:	07d2      	lsls	r2, r2, #31
 800bcd4:	bf5c      	itt	pl
 800bcd6:	005b      	lslpl	r3, r3, #1
 800bcd8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bcdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bce0:	bf58      	it	pl
 800bce2:	0049      	lslpl	r1, r1, #1
 800bce4:	2600      	movs	r6, #0
 800bce6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800bcea:	107f      	asrs	r7, r7, #1
 800bcec:	0049      	lsls	r1, r1, #1
 800bcee:	2016      	movs	r0, #22
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bcf6:	1915      	adds	r5, r2, r4
 800bcf8:	429d      	cmp	r5, r3
 800bcfa:	bfde      	ittt	le
 800bcfc:	192a      	addle	r2, r5, r4
 800bcfe:	1b5b      	suble	r3, r3, r5
 800bd00:	1936      	addle	r6, r6, r4
 800bd02:	0fcd      	lsrs	r5, r1, #31
 800bd04:	3801      	subs	r0, #1
 800bd06:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800bd0a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bd0e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bd12:	d1f0      	bne.n	800bcf6 <__ieee754_sqrt+0xb6>
 800bd14:	4605      	mov	r5, r0
 800bd16:	2420      	movs	r4, #32
 800bd18:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	eb0c 0e00 	add.w	lr, ip, r0
 800bd22:	dc02      	bgt.n	800bd2a <__ieee754_sqrt+0xea>
 800bd24:	d113      	bne.n	800bd4e <__ieee754_sqrt+0x10e>
 800bd26:	458e      	cmp	lr, r1
 800bd28:	d811      	bhi.n	800bd4e <__ieee754_sqrt+0x10e>
 800bd2a:	f1be 0f00 	cmp.w	lr, #0
 800bd2e:	eb0e 000c 	add.w	r0, lr, ip
 800bd32:	da3f      	bge.n	800bdb4 <__ieee754_sqrt+0x174>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	db3d      	blt.n	800bdb4 <__ieee754_sqrt+0x174>
 800bd38:	f102 0801 	add.w	r8, r2, #1
 800bd3c:	1a9b      	subs	r3, r3, r2
 800bd3e:	458e      	cmp	lr, r1
 800bd40:	bf88      	it	hi
 800bd42:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bd46:	eba1 010e 	sub.w	r1, r1, lr
 800bd4a:	4465      	add	r5, ip
 800bd4c:	4642      	mov	r2, r8
 800bd4e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bd52:	3c01      	subs	r4, #1
 800bd54:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bd58:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bd5c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bd60:	d1dc      	bne.n	800bd1c <__ieee754_sqrt+0xdc>
 800bd62:	4319      	orrs	r1, r3
 800bd64:	d01b      	beq.n	800bd9e <__ieee754_sqrt+0x15e>
 800bd66:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800bde4 <__ieee754_sqrt+0x1a4>
 800bd6a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800bde8 <__ieee754_sqrt+0x1a8>
 800bd6e:	e9da 0100 	ldrd	r0, r1, [sl]
 800bd72:	e9db 2300 	ldrd	r2, r3, [fp]
 800bd76:	f7f4 fa9f 	bl	80002b8 <__aeabi_dsub>
 800bd7a:	e9da 8900 	ldrd	r8, r9, [sl]
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	4640      	mov	r0, r8
 800bd84:	4649      	mov	r1, r9
 800bd86:	f7f4 fecb 	bl	8000b20 <__aeabi_dcmple>
 800bd8a:	b140      	cbz	r0, 800bd9e <__ieee754_sqrt+0x15e>
 800bd8c:	f1b5 3fff 	cmp.w	r5, #4294967295
 800bd90:	e9da 0100 	ldrd	r0, r1, [sl]
 800bd94:	e9db 2300 	ldrd	r2, r3, [fp]
 800bd98:	d10e      	bne.n	800bdb8 <__ieee754_sqrt+0x178>
 800bd9a:	3601      	adds	r6, #1
 800bd9c:	4625      	mov	r5, r4
 800bd9e:	1073      	asrs	r3, r6, #1
 800bda0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800bda4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800bda8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800bdac:	086b      	lsrs	r3, r5, #1
 800bdae:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800bdb2:	e759      	b.n	800bc68 <__ieee754_sqrt+0x28>
 800bdb4:	4690      	mov	r8, r2
 800bdb6:	e7c1      	b.n	800bd3c <__ieee754_sqrt+0xfc>
 800bdb8:	f7f4 fa80 	bl	80002bc <__adddf3>
 800bdbc:	e9da 8900 	ldrd	r8, r9, [sl]
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	4640      	mov	r0, r8
 800bdc6:	4649      	mov	r1, r9
 800bdc8:	f7f4 fea0 	bl	8000b0c <__aeabi_dcmplt>
 800bdcc:	b120      	cbz	r0, 800bdd8 <__ieee754_sqrt+0x198>
 800bdce:	1cab      	adds	r3, r5, #2
 800bdd0:	bf08      	it	eq
 800bdd2:	3601      	addeq	r6, #1
 800bdd4:	3502      	adds	r5, #2
 800bdd6:	e7e2      	b.n	800bd9e <__ieee754_sqrt+0x15e>
 800bdd8:	1c6b      	adds	r3, r5, #1
 800bdda:	f023 0501 	bic.w	r5, r3, #1
 800bdde:	e7de      	b.n	800bd9e <__ieee754_sqrt+0x15e>
 800bde0:	7ff00000 	.word	0x7ff00000
 800bde4:	0800c680 	.word	0x0800c680
 800bde8:	0800c678 	.word	0x0800c678

0800bdec <_init>:
 800bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdee:	bf00      	nop
 800bdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdf2:	bc08      	pop	{r3}
 800bdf4:	469e      	mov	lr, r3
 800bdf6:	4770      	bx	lr

0800bdf8 <_fini>:
 800bdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfa:	bf00      	nop
 800bdfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdfe:	bc08      	pop	{r3}
 800be00:	469e      	mov	lr, r3
 800be02:	4770      	bx	lr
