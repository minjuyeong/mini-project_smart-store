
smart_store_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000657c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800671c  0800671c  0000771c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c60  08006c60  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006c60  08006c60  00007c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c68  08006c68  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c68  08006c68  00007c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c6c  08006c6c  00007c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006c70  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b90  2000006c  08006cdc  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bfc  08006cdc  00008bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efa7  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250d  00000000  00000000  00017043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00019550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b30  00000000  00000000  0001a3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b54  00000000  00000000  0001aee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001012c  00000000  00000000  00032a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000909a6  00000000  00000000  00042b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3506  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004964  00000000  00000000  000d354c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000d7eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006704 	.word	0x08006704

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006704 	.word	0x08006704

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <DWT_Delay_Init>:
 *      Author: IoT Main
 */

#include "DHT.h"
uint32_t DWT_Delay_Init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80005e0:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <DWT_Delay_Init+0x58>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	4a13      	ldr	r2, [pc, #76]	@ (8000634 <DWT_Delay_Init+0x58>)
 80005e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80005ea:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <DWT_Delay_Init+0x58>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	4a10      	ldr	r2, [pc, #64]	@ (8000634 <DWT_Delay_Init+0x58>)
 80005f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005f6:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <DWT_Delay_Init+0x5c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000638 <DWT_Delay_Init+0x5c>)
 80005fe:	f023 0301 	bic.w	r3, r3, #1
 8000602:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <DWT_Delay_Init+0x5c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a0b      	ldr	r2, [pc, #44]	@ (8000638 <DWT_Delay_Init+0x5c>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <DWT_Delay_Init+0x5c>)
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000616:	bf00      	nop
  __ASM volatile ("NOP");
 8000618:	bf00      	nop
  __ASM volatile ("NOP");
 800061a:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 800061c:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <DWT_Delay_Init+0x5c>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 8000624:	2300      	movs	r3, #0
 8000626:	e000      	b.n	800062a <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 8000628:	2301      	movs	r3, #1
  }

}
 800062a:	4618      	mov	r0, r3
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000edf0 	.word	0xe000edf0
 8000638:	e0001000 	.word	0xe0001000

0800063c <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000644:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <DWT_Delay_us+0x40>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800064a:	f002 fcd5 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 800064e:	4603      	mov	r3, r0
 8000650:	4a0b      	ldr	r2, [pc, #44]	@ (8000680 <DWT_Delay_us+0x44>)
 8000652:	fba2 2303 	umull	r2, r3, r2, r3
 8000656:	0c9b      	lsrs	r3, r3, #18
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	fb02 f303 	mul.w	r3, r2, r3
 800065e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000660:	bf00      	nop
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <DWT_Delay_us+0x40>)
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	1ad2      	subs	r2, r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	429a      	cmp	r2, r3
 800066e:	d3f8      	bcc.n	8000662 <DWT_Delay_us+0x26>
}
 8000670:	bf00      	nop
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	e0001000 	.word	0xe0001000
 8000680:	431bde83 	.word	0x431bde83

08000684 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80006a0:	887b      	ldrh	r3, [r7, #2]
 80006a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	4619      	mov	r1, r3
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f001 fe62 	bl	800237c <HAL_GPIO_Init>
}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80006dc:	887b      	ldrh	r3, [r7, #2]
 80006de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	4619      	mov	r1, r3
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f001 fe46 	bl	800237c <HAL_GPIO_Init>
}
 80006f0:	bf00      	nop
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <DHT11_Init>:

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80006fc:	f7ff ff6e 	bl	80005dc <DWT_Delay_Init>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000700:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000704:	4807      	ldr	r0, [pc, #28]	@ (8000724 <DHT11_Init+0x2c>)
 8000706:	f7ff ffbd 	bl	8000684 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800070a:	2201      	movs	r2, #1
 800070c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <DHT11_Init+0x2c>)
 8000712:	f001 ffcf 	bl	80026b4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000716:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800071a:	f001 fc67 	bl	8001fec <HAL_Delay>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40020800 	.word	0x40020800

08000728 <DHT11_Start>:

void DHT11_Start (void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 800072c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000730:	4811      	ldr	r0, [pc, #68]	@ (8000778 <DHT11_Start+0x50>)
 8000732:	f7ff ffa7 	bl	8000684 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800073c:	480e      	ldr	r0, [pc, #56]	@ (8000778 <DHT11_Start+0x50>)
 800073e:	f001 ffb9 	bl	80026b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000748:	480b      	ldr	r0, [pc, #44]	@ (8000778 <DHT11_Start+0x50>)
 800074a:	f001 ffb3 	bl	80026b4 <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);
 800074e:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000752:	f7ff ff73 	bl	800063c <DWT_Delay_us>
	//delay_us (18000);   // wait for 18ms
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800075c:	4806      	ldr	r0, [pc, #24]	@ (8000778 <DHT11_Start+0x50>)
 800075e:	f001 ffa9 	bl	80026b4 <HAL_GPIO_WritePin>
	DWT_Delay_us(20);
 8000762:	2014      	movs	r0, #20
 8000764:	f7ff ff6a 	bl	800063c <DWT_Delay_us>
	//delay_us (20);   // wait for 20us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000768:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800076c:	4802      	ldr	r0, [pc, #8]	@ (8000778 <DHT11_Start+0x50>)
 800076e:	f7ff ffa7 	bl	80006c0 <Set_Pin_Input>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40020800 	.word	0x40020800

0800077c <DHT11_Stop>:

void DHT11_Stop (void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000780:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000784:	4805      	ldr	r0, [pc, #20]	@ (800079c <DHT11_Stop+0x20>)
 8000786:	f7ff ff7d 	bl	8000684 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800078a:	2201      	movs	r2, #1
 800078c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000790:	4802      	ldr	r0, [pc, #8]	@ (800079c <DHT11_Stop+0x20>)
 8000792:	f001 ff8f 	bl	80026b4 <HAL_GPIO_WritePin>
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40020800 	.word	0x40020800

080007a0 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	71fb      	strb	r3, [r7, #7]

	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80007aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ae:	4812      	ldr	r0, [pc, #72]	@ (80007f8 <DHT11_Check_Response+0x58>)
 80007b0:	f001 ff68 	bl	8002684 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d10f      	bne.n	80007da <DHT11_Check_Response+0x3a>
	{
		DWT_Delay_us(80);
 80007ba:	2050      	movs	r0, #80	@ 0x50
 80007bc:	f7ff ff3e 	bl	800063c <DWT_Delay_us>
		//delay_us (80);
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80007c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007c4:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <DHT11_Check_Response+0x58>)
 80007c6:	f001 ff5d 	bl	8002684 <HAL_GPIO_ReadPin>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <DHT11_Check_Response+0x36>
 80007d0:	2301      	movs	r3, #1
 80007d2:	71fb      	strb	r3, [r7, #7]
 80007d4:	e001      	b.n	80007da <DHT11_Check_Response+0x3a>
		else Response = -1; // 255
 80007d6:	23ff      	movs	r3, #255	@ 0xff
 80007d8:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 80007da:	bf00      	nop
 80007dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007e0:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <DHT11_Check_Response+0x58>)
 80007e2:	f001 ff4f 	bl	8002684 <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f7      	bne.n	80007dc <DHT11_Check_Response+0x3c>

	return Response;
 80007ec:	79fb      	ldrb	r3, [r7, #7]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40020800 	.word	0x40020800

080007fc <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000802:	2300      	movs	r3, #0
 8000804:	71bb      	strb	r3, [r7, #6]
 8000806:	e03a      	b.n	800087e <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8000808:	bf00      	nop
 800080a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800080e:	4820      	ldr	r0, [pc, #128]	@ (8000890 <DHT11_Read+0x94>)
 8000810:	f001 ff38 	bl	8002684 <HAL_GPIO_ReadPin>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d0f7      	beq.n	800080a <DHT11_Read+0xe>
		DWT_Delay_us(40);
 800081a:	2028      	movs	r0, #40	@ 0x28
 800081c:	f7ff ff0e 	bl	800063c <DWT_Delay_us>
		//delay_us (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000820:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000824:	481a      	ldr	r0, [pc, #104]	@ (8000890 <DHT11_Read+0x94>)
 8000826:	f001 ff2d 	bl	8002684 <HAL_GPIO_ReadPin>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d10e      	bne.n	800084e <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000830:	79bb      	ldrb	r3, [r7, #6]
 8000832:	f1c3 0307 	rsb	r3, r3, #7
 8000836:	2201      	movs	r2, #1
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	b25b      	sxtb	r3, r3
 800083e:	43db      	mvns	r3, r3
 8000840:	b25a      	sxtb	r2, r3
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	4013      	ands	r3, r2
 8000848:	b25b      	sxtb	r3, r3
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	e00b      	b.n	8000866 <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	f1c3 0307 	rsb	r3, r3, #7
 8000854:	2201      	movs	r2, #1
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	b25a      	sxtb	r2, r3
 800085c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000860:	4313      	orrs	r3, r2
 8000862:	b25b      	sxtb	r3, r3
 8000864:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8000866:	bf00      	nop
 8000868:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800086c:	4808      	ldr	r0, [pc, #32]	@ (8000890 <DHT11_Read+0x94>)
 800086e:	f001 ff09 	bl	8002684 <HAL_GPIO_ReadPin>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1f7      	bne.n	8000868 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	3301      	adds	r3, #1
 800087c:	71bb      	strb	r3, [r7, #6]
 800087e:	79bb      	ldrb	r3, [r7, #6]
 8000880:	2b07      	cmp	r3, #7
 8000882:	d9c1      	bls.n	8000808 <DHT11_Read+0xc>
	}
	return i;
 8000884:	79fb      	ldrb	r3, [r7, #7]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40020800 	.word	0x40020800

08000894 <DHT11_readData>:

DHT11_TypeDef DHT11_readData()
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	DHT11_TypeDef dht11;
	DHT11_Start();
 800089c:	f7ff ff44 	bl	8000728 <DHT11_Start>
	if ((dht11.status = DHT11_Check_Response()) < 0) return dht11;
 80008a0:	f7ff ff7e 	bl	80007a0 <DHT11_Check_Response>
 80008a4:	4603      	mov	r3, r0
 80008a6:	737b      	strb	r3, [r7, #13]
	dht11.rh_byte1 = DHT11_Read ();
 80008a8:	f7ff ffa8 	bl	80007fc <DHT11_Read>
 80008ac:	4603      	mov	r3, r0
 80008ae:	723b      	strb	r3, [r7, #8]
	dht11.rh_byte2 = DHT11_Read ();
 80008b0:	f7ff ffa4 	bl	80007fc <DHT11_Read>
 80008b4:	4603      	mov	r3, r0
 80008b6:	727b      	strb	r3, [r7, #9]
	dht11.temp_byte1 = DHT11_Read ();
 80008b8:	f7ff ffa0 	bl	80007fc <DHT11_Read>
 80008bc:	4603      	mov	r3, r0
 80008be:	72bb      	strb	r3, [r7, #10]
	dht11.temp_byte2 = DHT11_Read ();
 80008c0:	f7ff ff9c 	bl	80007fc <DHT11_Read>
 80008c4:	4603      	mov	r3, r0
 80008c6:	72fb      	strb	r3, [r7, #11]
	dht11.checksum = DHT11_Read();
 80008c8:	f7ff ff98 	bl	80007fc <DHT11_Read>
 80008cc:	4603      	mov	r3, r0
 80008ce:	733b      	strb	r3, [r7, #12]
	DHT11_Stop();
 80008d0:	f7ff ff54 	bl	800077c <DHT11_Stop>
	return dht11;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	461a      	mov	r2, r3
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	6010      	str	r0, [r2, #0]
 80008e0:	889b      	ldrh	r3, [r3, #4]
 80008e2:	8093      	strh	r3, [r2, #4]
}
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
 80008f8:	807b      	strh	r3, [r7, #2]
    *length = 0;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2200      	movs	r2, #0
 80008fe:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8000900:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000904:	2100      	movs	r1, #0
 8000906:	68b8      	ldr	r0, [r7, #8]
 8000908:	f004 fe72 	bl	80055f0 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 800090c:	f240 4202 	movw	r2, #1026	@ 0x402
 8000910:	2100      	movs	r1, #0
 8000912:	4826      	ldr	r0, [pc, #152]	@ (80009ac <esp_at_command+0xc0>)
 8000914:	f004 fe6c 	bl	80055f0 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8000918:	68f8      	ldr	r0, [r7, #12]
 800091a:	f7ff fc6b 	bl	80001f4 <strlen>
 800091e:	4603      	mov	r3, r0
 8000920:	b29a      	uxth	r2, r3
 8000922:	2364      	movs	r3, #100	@ 0x64
 8000924:	68f9      	ldr	r1, [r7, #12]
 8000926:	4822      	ldr	r0, [pc, #136]	@ (80009b0 <esp_at_command+0xc4>)
 8000928:	f003 fb8a 	bl	8004040 <HAL_UART_Transmit>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d032      	beq.n	8000998 <esp_at_command+0xac>
        return -1;
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	e035      	b.n	80009a4 <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 8000938:	4b1c      	ldr	r3, [pc, #112]	@ (80009ac <esp_at_command+0xc0>)
 800093a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800093e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000942:	d302      	bcc.n	800094a <esp_at_command+0x5e>
            return -2;
 8000944:	f06f 0301 	mvn.w	r3, #1
 8000948:	e02c      	b.n	80009a4 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 800094a:	491a      	ldr	r1, [pc, #104]	@ (80009b4 <esp_at_command+0xc8>)
 800094c:	4817      	ldr	r0, [pc, #92]	@ (80009ac <esp_at_command+0xc0>)
 800094e:	f004 fed3 	bl	80056f8 <strstr>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <esp_at_command+0x72>
            return -3;
 8000958:	f06f 0302 	mvn.w	r3, #2
 800095c:	e022      	b.n	80009a4 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 800095e:	4916      	ldr	r1, [pc, #88]	@ (80009b8 <esp_at_command+0xcc>)
 8000960:	4812      	ldr	r0, [pc, #72]	@ (80009ac <esp_at_command+0xc0>)
 8000962:	f004 fec9 	bl	80056f8 <strstr>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d00e      	beq.n	800098a <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <esp_at_command+0xc0>)
 800096e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000972:	461a      	mov	r2, r3
 8000974:	490d      	ldr	r1, [pc, #52]	@ (80009ac <esp_at_command+0xc0>)
 8000976:	68b8      	ldr	r0, [r7, #8]
 8000978:	f004 ff4f 	bl	800581a <memcpy>
            *length = cb_data.length;
 800097c:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <esp_at_command+0xc0>)
 800097e:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	801a      	strh	r2, [r3, #0]
            return 0;
 8000986:	2300      	movs	r3, #0
 8000988:	e00c      	b.n	80009a4 <esp_at_command+0xb8>
        }
        time_out -= 10;
 800098a:	887b      	ldrh	r3, [r7, #2]
 800098c:	3b0a      	subs	r3, #10
 800098e:	b29b      	uxth	r3, r3
 8000990:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 8000992:	200a      	movs	r0, #10
 8000994:	f001 fb2a 	bl	8001fec <HAL_Delay>
    while(time_out > 0)
 8000998:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800099c:	2b00      	cmp	r3, #0
 800099e:	dccb      	bgt.n	8000938 <esp_at_command+0x4c>
    }
    return -4;
 80009a0:	f06f 0303 	mvn.w	r3, #3
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200004d0 	.word	0x200004d0
 80009b0:	200009f8 	.word	0x200009f8
 80009b4:	0800671c 	.word	0x0800671c
 80009b8:	08006724 	.word	0x08006724

080009bc <esp_reset>:

static int esp_reset(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 80009c6:	1dba      	adds	r2, r7, #6
 80009c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009cc:	4909      	ldr	r1, [pc, #36]	@ (80009f4 <esp_reset+0x38>)
 80009ce:	480a      	ldr	r0, [pc, #40]	@ (80009f8 <esp_reset+0x3c>)
 80009d0:	f7ff ff8c 	bl	80008ec <esp_at_command>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d002      	beq.n	80009e0 <esp_reset+0x24>
    {
    	return -1;
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	e004      	b.n	80009ea <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 80009e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009e4:	f001 fb02 	bl	8001fec <HAL_Delay>
    return 0;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000098 	.word	0x20000098
 80009f8:	08006728 	.word	0x08006728

080009fc <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000a0a:	f107 020a 	add.w	r2, r7, #10
 8000a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a12:	492d      	ldr	r1, [pc, #180]	@ (8000ac8 <request_ip_addr+0xcc>)
 8000a14:	482d      	ldr	r0, [pc, #180]	@ (8000acc <request_ip_addr+0xd0>)
 8000a16:	f7ff ff69 	bl	80008ec <esp_at_command>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8000a20:	482b      	ldr	r0, [pc, #172]	@ (8000ad0 <request_ip_addr+0xd4>)
 8000a22:	f004 fce3 	bl	80053ec <puts>
 8000a26:	e049      	b.n	8000abc <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 8000a28:	492a      	ldr	r1, [pc, #168]	@ (8000ad4 <request_ip_addr+0xd8>)
 8000a2a:	4827      	ldr	r0, [pc, #156]	@ (8000ac8 <request_ip_addr+0xcc>)
 8000a2c:	f004 fe08 	bl	8005640 <strtok>
 8000a30:	6178      	str	r0, [r7, #20]

        if(is_debug)
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d03e      	beq.n	8000ab6 <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	e009      	b.n	8000a52 <request_ip_addr+0x56>
                printf("%c", response[i]);
 8000a3e:	4a22      	ldr	r2, [pc, #136]	@ (8000ac8 <request_ip_addr+0xcc>)
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	4413      	add	r3, r2
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f004 fc72 	bl	8005330 <putchar>
            for(int i = 0 ; i < length ; i++)
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	897b      	ldrh	r3, [r7, #10]
 8000a54:	461a      	mov	r2, r3
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	dbf0      	blt.n	8000a3e <request_ip_addr+0x42>
        }

        while(line != NULL)
 8000a5c:	e02b      	b.n	8000ab6 <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 8000a5e:	491e      	ldr	r1, [pc, #120]	@ (8000ad8 <request_ip_addr+0xdc>)
 8000a60:	6978      	ldr	r0, [r7, #20]
 8000a62:	f004 fe49 	bl	80056f8 <strstr>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d01f      	beq.n	8000aac <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 8000a6c:	491b      	ldr	r1, [pc, #108]	@ (8000adc <request_ip_addr+0xe0>)
 8000a6e:	6978      	ldr	r0, [r7, #20]
 8000a70:	f004 fde6 	bl	8005640 <strtok>
                ip = strtok(NULL, "\"");
 8000a74:	4919      	ldr	r1, [pc, #100]	@ (8000adc <request_ip_addr+0xe0>)
 8000a76:	2000      	movs	r0, #0
 8000a78:	f004 fde2 	bl	8005640 <strtok>
 8000a7c:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 8000a7e:	4918      	ldr	r1, [pc, #96]	@ (8000ae0 <request_ip_addr+0xe4>)
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f7ff fbad 	bl	80001e0 <strcmp>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00f      	beq.n	8000aac <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000a8c:	2210      	movs	r2, #16
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4814      	ldr	r0, [pc, #80]	@ (8000ae4 <request_ip_addr+0xe8>)
 8000a92:	f004 fdad 	bl	80055f0 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f7ff fbac 	bl	80001f4 <strlen>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	68f9      	ldr	r1, [r7, #12]
 8000aa2:	4810      	ldr	r0, [pc, #64]	@ (8000ae4 <request_ip_addr+0xe8>)
 8000aa4:	f004 feb9 	bl	800581a <memcpy>
                    return 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	e009      	b.n	8000ac0 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8000aac:	4909      	ldr	r1, [pc, #36]	@ (8000ad4 <request_ip_addr+0xd8>)
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f004 fdc6 	bl	8005640 <strtok>
 8000ab4:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1d0      	bne.n	8000a5e <request_ip_addr+0x62>
        }
    }
    return -1;
 8000abc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000098 	.word	0x20000098
 8000acc:	08006770 	.word	0x08006770
 8000ad0:	0800677c 	.word	0x0800677c
 8000ad4:	08006764 	.word	0x08006764
 8000ad8:	0800679c 	.word	0x0800679c
 8000adc:	0800676c 	.word	0x0800676c
 8000ae0:	08006734 	.word	0x08006734
 8000ae4:	20000088 	.word	0x20000088

08000ae8 <esp_client_conn>:
int esp_client_conn()
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b092      	sub	sp, #72	@ 0x48
 8000aec:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	2240      	movs	r2, #64	@ 0x40
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f004 fd7a 	bl	80055f0 <memset>
  uint16_t length = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 8000b00:	f107 0008 	add.w	r0, r7, #8
 8000b04:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000b08:	4a09      	ldr	r2, [pc, #36]	@ (8000b30 <esp_client_conn+0x48>)
 8000b0a:	490a      	ldr	r1, [pc, #40]	@ (8000b34 <esp_client_conn+0x4c>)
 8000b0c:	f004 fc76 	bl	80053fc <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8000b10:	1dba      	adds	r2, r7, #6
 8000b12:	f107 0008 	add.w	r0, r7, #8
 8000b16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b1a:	4907      	ldr	r1, [pc, #28]	@ (8000b38 <esp_client_conn+0x50>)
 8000b1c:	f7ff fee6 	bl	80008ec <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8000b20:	4806      	ldr	r0, [pc, #24]	@ (8000b3c <esp_client_conn+0x54>)
 8000b22:	f000 f909 	bl	8000d38 <esp_send_data>
	return 0;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3748      	adds	r7, #72	@ 0x48
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	080067a8 	.word	0x080067a8
 8000b34:	080067b8 	.word	0x080067b8
 8000b38:	20000098 	.word	0x20000098
 8000b3c:	080067d4 	.word	0x080067d4

08000b40 <esp_get_status>:
int esp_get_status()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 8000b4a:	1dba      	adds	r2, r7, #6
 8000b4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b50:	4909      	ldr	r1, [pc, #36]	@ (8000b78 <esp_get_status+0x38>)
 8000b52:	480a      	ldr	r0, [pc, #40]	@ (8000b7c <esp_get_status+0x3c>)
 8000b54:	f7ff feca 	bl	80008ec <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 8000b58:	4909      	ldr	r1, [pc, #36]	@ (8000b80 <esp_get_status+0x40>)
 8000b5a:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <esp_get_status+0x38>)
 8000b5c:	f004 fdcc 	bl	80056f8 <strstr>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <esp_get_status+0x2a>
    {
    	return 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e001      	b.n	8000b6e <esp_get_status+0x2e>
    }
	return -1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000098 	.word	0x20000098
 8000b7c:	080067e0 	.word	0x080067e0
 8000b80:	080067f0 	.word	0x080067f0

08000b84 <drv_esp_init>:
int drv_esp_init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000b88:	2210      	movs	r2, #16
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4806      	ldr	r0, [pc, #24]	@ (8000ba8 <drv_esp_init+0x24>)
 8000b8e:	f004 fd2f 	bl	80055f0 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 8000b92:	2201      	movs	r2, #1
 8000b94:	4905      	ldr	r1, [pc, #20]	@ (8000bac <drv_esp_init+0x28>)
 8000b96:	4806      	ldr	r0, [pc, #24]	@ (8000bb0 <drv_esp_init+0x2c>)
 8000b98:	f003 fadd 	bl	8004156 <HAL_UART_Receive_IT>

    return esp_reset();
 8000b9c:	f7ff ff0e 	bl	80009bc <esp_reset>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000088 	.word	0x20000088
 8000bac:	200004cf 	.word	0x200004cf
 8000bb0:	200009f8 	.word	0x200009f8

08000bb4 <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b094      	sub	sp, #80	@ 0x50
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	2240      	movs	r2, #64	@ 0x40
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f004 fd0f 	bl	80055f0 <memset>
  if(ssid == NULL || passwd == NULL)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d002      	beq.n	8000bde <ap_conn_func+0x2a>
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d103      	bne.n	8000be6 <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8000bde:	4817      	ldr	r0, [pc, #92]	@ (8000c3c <ap_conn_func+0x88>)
 8000be0:	f004 fc04 	bl	80053ec <puts>
 8000be4:	e026      	b.n	8000c34 <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000be6:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000bea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bee:	4914      	ldr	r1, [pc, #80]	@ (8000c40 <ap_conn_func+0x8c>)
 8000bf0:	4814      	ldr	r0, [pc, #80]	@ (8000c44 <ap_conn_func+0x90>)
 8000bf2:	f7ff fe7b 	bl	80008ec <esp_at_command>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d002      	beq.n	8000c02 <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 8000bfc:	4812      	ldr	r0, [pc, #72]	@ (8000c48 <ap_conn_func+0x94>)
 8000bfe:	f004 fbf5 	bl	80053ec <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 8000c02:	f107 000c 	add.w	r0, r7, #12
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	4910      	ldr	r1, [pc, #64]	@ (8000c4c <ap_conn_func+0x98>)
 8000c0c:	f004 fbf6 	bl	80053fc <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8000c10:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000c14:	f107 000c 	add.w	r0, r7, #12
 8000c18:	f241 7370 	movw	r3, #6000	@ 0x1770
 8000c1c:	4908      	ldr	r1, [pc, #32]	@ (8000c40 <ap_conn_func+0x8c>)
 8000c1e:	f7ff fe65 	bl	80008ec <esp_at_command>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d005      	beq.n	8000c34 <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4808      	ldr	r0, [pc, #32]	@ (8000c50 <ap_conn_func+0x9c>)
 8000c30:	f004 fb6c 	bl	800530c <iprintf>
}
 8000c34:	3750      	adds	r7, #80	@ 0x50
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08006854 	.word	0x08006854
 8000c40:	20000098 	.word	0x20000098
 8000c44:	08006880 	.word	0x08006880
 8000c48:	08006890 	.word	0x08006890
 8000c4c:	080068a4 	.word	0x080068a4
 8000c50:	080068bc 	.word	0x080068bc

08000c54 <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a23      	ldr	r2, [pc, #140]	@ (8000cf0 <HAL_UART_RxCpltCallback+0x9c>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d117      	bne.n	8000c96 <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 8000c66:	4b23      	ldr	r3, [pc, #140]	@ (8000cf4 <HAL_UART_RxCpltCallback+0xa0>)
 8000c68:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000c6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c70:	d20c      	bcs.n	8000c8c <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 8000c72:	4b20      	ldr	r3, [pc, #128]	@ (8000cf4 <HAL_UART_RxCpltCallback+0xa0>)
 8000c74:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000c78:	1c5a      	adds	r2, r3, #1
 8000c7a:	b291      	uxth	r1, r2
 8000c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000cf4 <HAL_UART_RxCpltCallback+0xa0>)
 8000c7e:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <HAL_UART_RxCpltCallback+0xa4>)
 8000c86:	7819      	ldrb	r1, [r3, #0]
 8000c88:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <HAL_UART_RxCpltCallback+0xa0>)
 8000c8a:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	491a      	ldr	r1, [pc, #104]	@ (8000cf8 <HAL_UART_RxCpltCallback+0xa4>)
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f003 fa60 	bl	8004156 <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a18      	ldr	r2, [pc, #96]	@ (8000cfc <HAL_UART_RxCpltCallback+0xa8>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d122      	bne.n	8000ce6 <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <HAL_UART_RxCpltCallback+0xac>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a17      	ldr	r2, [pc, #92]	@ (8000d04 <HAL_UART_RxCpltCallback+0xb0>)
 8000ca6:	7811      	ldrb	r1, [r2, #0]
 8000ca8:	4a17      	ldr	r2, [pc, #92]	@ (8000d08 <HAL_UART_RxCpltCallback+0xb4>)
 8000caa:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 8000cac:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <HAL_UART_RxCpltCallback+0xac>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a15      	ldr	r2, [pc, #84]	@ (8000d08 <HAL_UART_RxCpltCallback+0xb4>)
 8000cb2:	5cd3      	ldrb	r3, [r2, r3]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b0d      	cmp	r3, #13
 8000cb8:	d10b      	bne.n	8000cd2 <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 8000cba:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <HAL_UART_RxCpltCallback+0xac>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a12      	ldr	r2, [pc, #72]	@ (8000d08 <HAL_UART_RxCpltCallback+0xb4>)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <HAL_UART_RxCpltCallback+0xb8>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8000cca:	4b0d      	ldr	r3, [pc, #52]	@ (8000d00 <HAL_UART_RxCpltCallback+0xac>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	e004      	b.n	8000cdc <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d00 <HAL_UART_RxCpltCallback+0xac>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	4a09      	ldr	r2, [pc, #36]	@ (8000d00 <HAL_UART_RxCpltCallback+0xac>)
 8000cda:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4909      	ldr	r1, [pc, #36]	@ (8000d04 <HAL_UART_RxCpltCallback+0xb0>)
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f003 fa38 	bl	8004156 <HAL_UART_Receive_IT>
    }
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40011400 	.word	0x40011400
 8000cf4:	200004d0 	.word	0x200004d0
 8000cf8:	200004cf 	.word	0x200004cf
 8000cfc:	40004400 	.word	0x40004400
 8000d00:	200008d4 	.word	0x200008d4
 8000d04:	200004ce 	.word	0x200004ce
 8000d08:	2000049c 	.word	0x2000049c
 8000d0c:	20000498 	.word	0x20000498

08000d10 <AiotClient_Init>:


void AiotClient_Init()
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 8000d14:	4906      	ldr	r1, [pc, #24]	@ (8000d30 <AiotClient_Init+0x20>)
 8000d16:	4807      	ldr	r0, [pc, #28]	@ (8000d34 <AiotClient_Init+0x24>)
 8000d18:	f7ff ff4c 	bl	8000bb4 <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f7ff fe6d 	bl	80009fc <request_ip_addr>
	esp_client_conn();
 8000d22:	f7ff fee1 	bl	8000ae8 <esp_client_conn>
	esp_get_status();
 8000d26:	f7ff ff0b 	bl	8000b40 <esp_get_status>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	0800691c 	.word	0x0800691c
 8000d34:	08006928 	.word	0x08006928

08000d38 <esp_send_data>:

void esp_send_data(char *data)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b094      	sub	sp, #80	@ 0x50
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	2240      	movs	r2, #64	@ 0x40
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f004 fc51 	bl	80055f0 <memset>
	uint16_t length = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff fa4e 	bl	80001f4 <strlen>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	490e      	ldr	r1, [pc, #56]	@ (8000d98 <esp_send_data+0x60>)
 8000d60:	4618      	mov	r0, r3
 8000d62:	f004 fb4b 	bl	80053fc <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 8000d66:	f107 020e 	add.w	r2, r7, #14
 8000d6a:	f107 0010 	add.w	r0, r7, #16
 8000d6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d72:	490a      	ldr	r1, [pc, #40]	@ (8000d9c <esp_send_data+0x64>)
 8000d74:	f7ff fdba 	bl	80008ec <esp_at_command>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d107      	bne.n	8000d8e <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8000d7e:	f107 020e 	add.w	r2, r7, #14
 8000d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d86:	4905      	ldr	r1, [pc, #20]	@ (8000d9c <esp_send_data+0x64>)
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff fdaf 	bl	80008ec <esp_at_command>
	}
}
 8000d8e:	bf00      	nop
 8000d90:	3750      	adds	r7, #80	@ 0x50
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	08006930 	.word	0x08006930
 8000d9c:	20000098 	.word	0x20000098

08000da0 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8000da4:	2201      	movs	r2, #1
 8000da6:	4903      	ldr	r1, [pc, #12]	@ (8000db4 <drv_uart_init+0x14>)
 8000da8:	4803      	ldr	r0, [pc, #12]	@ (8000db8 <drv_uart_init+0x18>)
 8000daa:	f003 f9d4 	bl	8004156 <HAL_UART_Receive_IT>
    return 0;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200004ce 	.word	0x200004ce
 8000db8:	200009b0 	.word	0x200009b0

08000dbc <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8000dc4:	1d39      	adds	r1, r7, #4
 8000dc6:	230a      	movs	r3, #10
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4807      	ldr	r0, [pc, #28]	@ (8000de8 <__io_putchar+0x2c>)
 8000dcc:	f003 f938 	bl	8004040 <HAL_UART_Transmit>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d101      	bne.n	8000dda <__io_putchar+0x1e>
        return ch;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	e001      	b.n	8000dde <__io_putchar+0x22>
    return -1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200009b0 	.word	0x200009b0

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int ret = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df6:	f001 f887 	bl	8001f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfa:	f000 f8e3 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfe:	f000 fb2d 	bl	800145c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e02:	f000 fad7 	bl	80013b4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000e06:	f000 faff 	bl	8001408 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8000e0a:	f000 fa5b 	bl	80012c4 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000e0e:	f000 f9e3 	bl	80011d8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000e12:	f000 f941 	bl	8001098 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  printf("Start main() - wifi\r\n");
 8000e16:	4857      	ldr	r0, [pc, #348]	@ (8000f74 <main+0x188>)
 8000e18:	f004 fae8 	bl	80053ec <puts>
  ret |= drv_uart_init();
 8000e1c:	f7ff ffc0 	bl	8000da0 <drv_uart_init>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]
  ret |= drv_esp_init();
 8000e28:	f7ff feac 	bl	8000b84 <drv_esp_init>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]
  if(ret != 0)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d004      	beq.n	8000e44 <main+0x58>
  {
	  printf("Esp response error\r\n");
 8000e3a:	484f      	ldr	r0, [pc, #316]	@ (8000f78 <main+0x18c>)
 8000e3c:	f004 fad6 	bl	80053ec <puts>
	  Error_Handler();
 8000e40:	f000 fd5a 	bl	80018f8 <Error_Handler>
  }

  AiotClient_Init();
 8000e44:	f7ff ff64 	bl	8000d10 <AiotClient_Init>

  DHT11_Init();
 8000e48:	f7ff fc56 	bl	80006f8 <DHT11_Init>

  if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	484b      	ldr	r0, [pc, #300]	@ (8000f7c <main+0x190>)
 8000e50:	f002 f9ae 	bl	80031b0 <HAL_TIM_PWM_Start>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <main+0x72>
	  Error_Handler();
 8000e5a:	f000 fd4d 	bl	80018f8 <Error_Handler>

  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4847      	ldr	r0, [pc, #284]	@ (8000f80 <main+0x194>)
 8000e62:	f002 f9a5 	bl	80031b0 <HAL_TIM_PWM_Start>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <main+0x84>
	  Error_Handler();
 8000e6c:	f000 fd44 	bl	80018f8 <Error_Handler>

  if(HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1) != HAL_OK)
 8000e70:	2100      	movs	r1, #0
 8000e72:	4844      	ldr	r0, [pc, #272]	@ (8000f84 <main+0x198>)
 8000e74:	f002 f99c 	bl	80031b0 <HAL_TIM_PWM_Start>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <main+0x96>
	  Error_Handler();
 8000e7e:	f000 fd3b 	bl	80018f8 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8000e82:	4941      	ldr	r1, [pc, #260]	@ (8000f88 <main+0x19c>)
 8000e84:	4841      	ldr	r0, [pc, #260]	@ (8000f8c <main+0x1a0>)
 8000e86:	f004 fc37 	bl	80056f8 <strstr>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d01d      	beq.n	8000ecc <main+0xe0>
 8000e90:	4b3e      	ldr	r3, [pc, #248]	@ (8000f8c <main+0x1a0>)
 8000e92:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000e96:	3b01      	subs	r3, #1
 8000e98:	4a3c      	ldr	r2, [pc, #240]	@ (8000f8c <main+0x1a0>)
 8000e9a:	5cd3      	ldrb	r3, [r2, r3]
 8000e9c:	2b0a      	cmp	r3, #10
 8000e9e:	d115      	bne.n	8000ecc <main+0xe0>
		{
			//?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 8000ea0:	215b      	movs	r1, #91	@ 0x5b
 8000ea2:	483a      	ldr	r0, [pc, #232]	@ (8000f8c <main+0x1a0>)
 8000ea4:	f004 fbac 	bl	8005600 <strchr>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4838      	ldr	r0, [pc, #224]	@ (8000f90 <main+0x1a4>)
 8000eae:	f004 fcac 	bl	800580a <strcpy>
			memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 8000eb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4834      	ldr	r0, [pc, #208]	@ (8000f8c <main+0x1a0>)
 8000eba:	f004 fb99 	bl	80055f0 <memset>
			cb_data.length = 0;
 8000ebe:	4b33      	ldr	r3, [pc, #204]	@ (8000f8c <main+0x1a0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 8000ec6:	4832      	ldr	r0, [pc, #200]	@ (8000f90 <main+0x1a4>)
 8000ec8:	f000 fb68 	bl	800159c <esp_event>
		}
		if(rx2Flag)
 8000ecc:	4b31      	ldr	r3, [pc, #196]	@ (8000f94 <main+0x1a8>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d006      	beq.n	8000ee4 <main+0xf8>
		{
			printf("recv2 : %s\r\n",rx2Data);
 8000ed6:	4930      	ldr	r1, [pc, #192]	@ (8000f98 <main+0x1ac>)
 8000ed8:	4830      	ldr	r0, [pc, #192]	@ (8000f9c <main+0x1b0>)
 8000eda:	f004 fa17 	bl	800530c <iprintf>
			rx2Flag =0;
 8000ede:	4b2d      	ldr	r3, [pc, #180]	@ (8000f94 <main+0x1a8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
		}
		if(tim3Flag1Sec)	//1초에 한번
 8000ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa0 <main+0x1b4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0ca      	beq.n	8000e82 <main+0x96>
		{
			tim3Flag1Sec = 0;
 8000eec:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa0 <main+0x1b4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
			if(!(tim3Sec%10)) //10초에 한번
 8000ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa4 <main+0x1b8>)
 8000ef4:	6819      	ldr	r1, [r3, #0]
 8000ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa8 <main+0x1bc>)
 8000ef8:	fba3 2301 	umull	r2, r3, r3, r1
 8000efc:	08da      	lsrs	r2, r3, #3
 8000efe:	4613      	mov	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	1aca      	subs	r2, r1, r3
 8000f08:	2a00      	cmp	r2, #0
 8000f0a:	d109      	bne.n	8000f20 <main+0x134>
			{
				if(esp_get_status() != 0)
 8000f0c:	f7ff fe18 	bl	8000b40 <esp_get_status>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d004      	beq.n	8000f20 <main+0x134>
				{
					printf("server connecting ...\r\n");
 8000f16:	4825      	ldr	r0, [pc, #148]	@ (8000fac <main+0x1c0>)
 8000f18:	f004 fa68 	bl	80053ec <puts>
					esp_client_conn();
 8000f1c:	f7ff fde4 	bl	8000ae8 <esp_client_conn>
				}
			}
			printf("tim3Sec : %d\r\n",tim3Sec);
 8000f20:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <main+0x1b8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4822      	ldr	r0, [pc, #136]	@ (8000fb0 <main+0x1c4>)
 8000f28:	f004 f9f0 	bl	800530c <iprintf>
			if(!(tim3Sec%5)) //5초에 한번
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa4 <main+0x1b8>)
 8000f2e:	6819      	ldr	r1, [r3, #0]
 8000f30:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <main+0x1bc>)
 8000f32:	fba3 2301 	umull	r2, r3, r3, r1
 8000f36:	089a      	lsrs	r2, r3, #2
 8000f38:	4613      	mov	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	1aca      	subs	r2, r1, r3
 8000f40:	2a00      	cmp	r2, #0
 8000f42:	d19e      	bne.n	8000e82 <main+0x96>
			{
				//dht11에서 값 읽어오기
				dht11Data = DHT11_readData();
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fca4 	bl	8000894 <DHT11_readData>
				if(dht11Data.rh_byte1 != 255)
 8000f4c:	793b      	ldrb	r3, [r7, #4]
 8000f4e:	2bff      	cmp	r3, #255	@ 0xff
 8000f50:	d00b      	beq.n	8000f6a <main+0x17e>
				{
					//온도 데이터 전역변수 temp에 저장
					sprintf(temp, "%d.%d", dht11Data.temp_byte1, dht11Data.temp_byte2);
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	461a      	mov	r2, r3
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	4916      	ldr	r1, [pc, #88]	@ (8000fb4 <main+0x1c8>)
 8000f5a:	4817      	ldr	r0, [pc, #92]	@ (8000fb8 <main+0x1cc>)
 8000f5c:	f004 fa4e 	bl	80053fc <siprintf>
					//습도 데이터 전역변수 humi 에 저장
					humi = dht11Data.rh_byte1;
 8000f60:	793b      	ldrb	r3, [r7, #4]
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <main+0x1d0>)
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	e78b      	b.n	8000e82 <main+0x96>
				}
				else
					printf("DHT11 response error\r\n");
 8000f6a:	4815      	ldr	r0, [pc, #84]	@ (8000fc0 <main+0x1d4>)
 8000f6c:	f004 fa3e 	bl	80053ec <puts>
		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8000f70:	e787      	b.n	8000e82 <main+0x96>
 8000f72:	bf00      	nop
 8000f74:	08006940 	.word	0x08006940
 8000f78:	08006958 	.word	0x08006958
 8000f7c:	200008d8 	.word	0x200008d8
 8000f80:	20000920 	.word	0x20000920
 8000f84:	20000968 	.word	0x20000968
 8000f88:	0800696c 	.word	0x0800696c
 8000f8c:	200004d0 	.word	0x200004d0
 8000f90:	20000a64 	.word	0x20000a64
 8000f94:	20000498 	.word	0x20000498
 8000f98:	2000049c 	.word	0x2000049c
 8000f9c:	08006974 	.word	0x08006974
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000a40 	.word	0x20000a40
 8000fa8:	cccccccd 	.word	0xcccccccd
 8000fac:	08006984 	.word	0x08006984
 8000fb0:	0800699c 	.word	0x0800699c
 8000fb4:	080069ac 	.word	0x080069ac
 8000fb8:	20000a48 	.word	0x20000a48
 8000fbc:	20000a44 	.word	0x20000a44
 8000fc0:	080069b4 	.word	0x080069b4

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	@ 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	2230      	movs	r2, #48	@ 0x30
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f004 fb0c 	bl	80055f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	4b28      	ldr	r3, [pc, #160]	@ (8001090 <SystemClock_Config+0xcc>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	4a27      	ldr	r2, [pc, #156]	@ (8001090 <SystemClock_Config+0xcc>)
 8000ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff8:	4b25      	ldr	r3, [pc, #148]	@ (8001090 <SystemClock_Config+0xcc>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <SystemClock_Config+0xd0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a21      	ldr	r2, [pc, #132]	@ (8001094 <SystemClock_Config+0xd0>)
 800100e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <SystemClock_Config+0xd0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001020:	2301      	movs	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001024:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001028:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102a:	2302      	movs	r3, #2
 800102c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001032:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001034:	2308      	movs	r3, #8
 8001036:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001038:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800103c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800103e:	2304      	movs	r3, #4
 8001040:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001042:	2304      	movs	r3, #4
 8001044:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fb70 	bl	8002730 <HAL_RCC_OscConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001056:	f000 fc4f 	bl	80018f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105a:	230f      	movs	r3, #15
 800105c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105e:	2302      	movs	r3, #2
 8001060:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001066:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2102      	movs	r1, #2
 8001076:	4618      	mov	r0, r3
 8001078:	f001 fdd2 	bl	8002c20 <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001082:	f000 fc39 	bl	80018f8 <Error_Handler>
  }
}
 8001086:	bf00      	nop
 8001088:	3750      	adds	r7, #80	@ 0x50
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40007000 	.word	0x40007000

08001098 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b096      	sub	sp, #88	@ 0x58
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]
 80010c6:	615a      	str	r2, [r3, #20]
 80010c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2220      	movs	r2, #32
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f004 fa8d 	bl	80055f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010d6:	4b3e      	ldr	r3, [pc, #248]	@ (80011d0 <MX_TIM1_Init+0x138>)
 80010d8:	4a3e      	ldr	r2, [pc, #248]	@ (80011d4 <MX_TIM1_Init+0x13c>)
 80010da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80010dc:	4b3c      	ldr	r3, [pc, #240]	@ (80011d0 <MX_TIM1_Init+0x138>)
 80010de:	2253      	movs	r2, #83	@ 0x53
 80010e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e2:	4b3b      	ldr	r3, [pc, #236]	@ (80011d0 <MX_TIM1_Init+0x138>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80010e8:	4b39      	ldr	r3, [pc, #228]	@ (80011d0 <MX_TIM1_Init+0x138>)
 80010ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f0:	4b37      	ldr	r3, [pc, #220]	@ (80011d0 <MX_TIM1_Init+0x138>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010f6:	4b36      	ldr	r3, [pc, #216]	@ (80011d0 <MX_TIM1_Init+0x138>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fc:	4b34      	ldr	r3, [pc, #208]	@ (80011d0 <MX_TIM1_Init+0x138>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001102:	4833      	ldr	r0, [pc, #204]	@ (80011d0 <MX_TIM1_Init+0x138>)
 8001104:	f001 ffac 	bl	8003060 <HAL_TIM_Base_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800110e:	f000 fbf3 	bl	80018f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001112:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001116:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001118:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800111c:	4619      	mov	r1, r3
 800111e:	482c      	ldr	r0, [pc, #176]	@ (80011d0 <MX_TIM1_Init+0x138>)
 8001120:	f002 faa8 	bl	8003674 <HAL_TIM_ConfigClockSource>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800112a:	f000 fbe5 	bl	80018f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800112e:	4828      	ldr	r0, [pc, #160]	@ (80011d0 <MX_TIM1_Init+0x138>)
 8001130:	f001 ffe5 	bl	80030fe <HAL_TIM_PWM_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800113a:	f000 fbdd 	bl	80018f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001146:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800114a:	4619      	mov	r1, r3
 800114c:	4820      	ldr	r0, [pc, #128]	@ (80011d0 <MX_TIM1_Init+0x138>)
 800114e:	f002 fe53 	bl	8003df8 <HAL_TIMEx_MasterConfigSynchronization>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001158:	f000 fbce 	bl	80018f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115c:	2360      	movs	r3, #96	@ 0x60
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001168:	2300      	movs	r3, #0
 800116a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001178:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800117c:	2200      	movs	r2, #0
 800117e:	4619      	mov	r1, r3
 8001180:	4813      	ldr	r0, [pc, #76]	@ (80011d0 <MX_TIM1_Init+0x138>)
 8001182:	f002 f9b5 	bl	80034f0 <HAL_TIM_PWM_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800118c:	f000 fbb4 	bl	80018f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	4619      	mov	r1, r3
 80011b2:	4807      	ldr	r0, [pc, #28]	@ (80011d0 <MX_TIM1_Init+0x138>)
 80011b4:	f002 fe8e 	bl	8003ed4 <HAL_TIMEx_ConfigBreakDeadTime>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80011be:	f000 fb9b 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011c2:	4803      	ldr	r0, [pc, #12]	@ (80011d0 <MX_TIM1_Init+0x138>)
 80011c4:	f000 fc22 	bl	8001a0c <HAL_TIM_MspPostInit>

}
 80011c8:	bf00      	nop
 80011ca:	3758      	adds	r7, #88	@ 0x58
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200008d8 	.word	0x200008d8
 80011d4:	40010000 	.word	0x40010000

080011d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08e      	sub	sp, #56	@ 0x38
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	f107 0320 	add.w	r3, r7, #32
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
 8001204:	615a      	str	r2, [r3, #20]
 8001206:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001208:	4b2c      	ldr	r3, [pc, #176]	@ (80012bc <MX_TIM3_Init+0xe4>)
 800120a:	4a2d      	ldr	r2, [pc, #180]	@ (80012c0 <MX_TIM3_Init+0xe8>)
 800120c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800120e:	4b2b      	ldr	r3, [pc, #172]	@ (80012bc <MX_TIM3_Init+0xe4>)
 8001210:	2253      	movs	r2, #83	@ 0x53
 8001212:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001214:	4b29      	ldr	r3, [pc, #164]	@ (80012bc <MX_TIM3_Init+0xe4>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800121a:	4b28      	ldr	r3, [pc, #160]	@ (80012bc <MX_TIM3_Init+0xe4>)
 800121c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001220:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001222:	4b26      	ldr	r3, [pc, #152]	@ (80012bc <MX_TIM3_Init+0xe4>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001228:	4b24      	ldr	r3, [pc, #144]	@ (80012bc <MX_TIM3_Init+0xe4>)
 800122a:	2280      	movs	r2, #128	@ 0x80
 800122c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800122e:	4823      	ldr	r0, [pc, #140]	@ (80012bc <MX_TIM3_Init+0xe4>)
 8001230:	f001 ff16 	bl	8003060 <HAL_TIM_Base_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800123a:	f000 fb5d 	bl	80018f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001242:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001244:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001248:	4619      	mov	r1, r3
 800124a:	481c      	ldr	r0, [pc, #112]	@ (80012bc <MX_TIM3_Init+0xe4>)
 800124c:	f002 fa12 	bl	8003674 <HAL_TIM_ConfigClockSource>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001256:	f000 fb4f 	bl	80018f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800125a:	4818      	ldr	r0, [pc, #96]	@ (80012bc <MX_TIM3_Init+0xe4>)
 800125c:	f001 ff4f 	bl	80030fe <HAL_TIM_PWM_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001266:	f000 fb47 	bl	80018f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001272:	f107 0320 	add.w	r3, r7, #32
 8001276:	4619      	mov	r1, r3
 8001278:	4810      	ldr	r0, [pc, #64]	@ (80012bc <MX_TIM3_Init+0xe4>)
 800127a:	f002 fdbd 	bl	8003df8 <HAL_TIMEx_MasterConfigSynchronization>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001284:	f000 fb38 	bl	80018f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001288:	2360      	movs	r3, #96	@ 0x60
 800128a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2200      	movs	r2, #0
 800129c:	4619      	mov	r1, r3
 800129e:	4807      	ldr	r0, [pc, #28]	@ (80012bc <MX_TIM3_Init+0xe4>)
 80012a0:	f002 f926 	bl	80034f0 <HAL_TIM_PWM_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012aa:	f000 fb25 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012ae:	4803      	ldr	r0, [pc, #12]	@ (80012bc <MX_TIM3_Init+0xe4>)
 80012b0:	f000 fbac 	bl	8001a0c <HAL_TIM_MspPostInit>

}
 80012b4:	bf00      	nop
 80012b6:	3738      	adds	r7, #56	@ 0x38
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000920 	.word	0x20000920
 80012c0:	40000400 	.word	0x40000400

080012c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08e      	sub	sp, #56	@ 0x38
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d8:	f107 0320 	add.w	r3, r7, #32
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
 80012f0:	615a      	str	r2, [r3, #20]
 80012f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012f4:	4b2d      	ldr	r3, [pc, #180]	@ (80013ac <MX_TIM4_Init+0xe8>)
 80012f6:	4a2e      	ldr	r2, [pc, #184]	@ (80013b0 <MX_TIM4_Init+0xec>)
 80012f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80012fa:	4b2c      	ldr	r3, [pc, #176]	@ (80013ac <MX_TIM4_Init+0xe8>)
 80012fc:	2253      	movs	r2, #83	@ 0x53
 80012fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	4b2a      	ldr	r3, [pc, #168]	@ (80013ac <MX_TIM4_Init+0xe8>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001306:	4b29      	ldr	r3, [pc, #164]	@ (80013ac <MX_TIM4_Init+0xe8>)
 8001308:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800130c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130e:	4b27      	ldr	r3, [pc, #156]	@ (80013ac <MX_TIM4_Init+0xe8>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001314:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <MX_TIM4_Init+0xe8>)
 8001316:	2280      	movs	r2, #128	@ 0x80
 8001318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800131a:	4824      	ldr	r0, [pc, #144]	@ (80013ac <MX_TIM4_Init+0xe8>)
 800131c:	f001 fea0 	bl	8003060 <HAL_TIM_Base_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001326:	f000 fae7 	bl	80018f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800132e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001330:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001334:	4619      	mov	r1, r3
 8001336:	481d      	ldr	r0, [pc, #116]	@ (80013ac <MX_TIM4_Init+0xe8>)
 8001338:	f002 f99c 	bl	8003674 <HAL_TIM_ConfigClockSource>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001342:	f000 fad9 	bl	80018f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001346:	4819      	ldr	r0, [pc, #100]	@ (80013ac <MX_TIM4_Init+0xe8>)
 8001348:	f001 fed9 	bl	80030fe <HAL_TIM_PWM_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001352:	f000 fad1 	bl	80018f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800135e:	f107 0320 	add.w	r3, r7, #32
 8001362:	4619      	mov	r1, r3
 8001364:	4811      	ldr	r0, [pc, #68]	@ (80013ac <MX_TIM4_Init+0xe8>)
 8001366:	f002 fd47 	bl	8003df8 <HAL_TIMEx_MasterConfigSynchronization>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001370:	f000 fac2 	bl	80018f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001374:	2360      	movs	r3, #96	@ 0x60
 8001376:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001378:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800137c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2200      	movs	r2, #0
 800138a:	4619      	mov	r1, r3
 800138c:	4807      	ldr	r0, [pc, #28]	@ (80013ac <MX_TIM4_Init+0xe8>)
 800138e:	f002 f8af 	bl	80034f0 <HAL_TIM_PWM_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001398:	f000 faae 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800139c:	4803      	ldr	r0, [pc, #12]	@ (80013ac <MX_TIM4_Init+0xe8>)
 800139e:	f000 fb35 	bl	8001a0c <HAL_TIM_MspPostInit>

}
 80013a2:	bf00      	nop
 80013a4:	3738      	adds	r7, #56	@ 0x38
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000968 	.word	0x20000968
 80013b0:	40000800 	.word	0x40000800

080013b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <MX_USART2_UART_Init+0x4c>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	@ (8001404 <MX_USART2_UART_Init+0x50>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <MX_USART2_UART_Init+0x4c>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <MX_USART2_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <MX_USART2_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <MX_USART2_UART_Init+0x4c>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <MX_USART2_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <MX_USART2_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	@ (8001400 <MX_USART2_UART_Init+0x4c>)
 80013ec:	f002 fdd8 	bl	8003fa0 <HAL_UART_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013f6:	f000 fa7f 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200009b0 	.word	0x200009b0
 8001404:	40004400 	.word	0x40004400

08001408 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800140c:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <MX_USART6_UART_Init+0x4c>)
 800140e:	4a12      	ldr	r2, [pc, #72]	@ (8001458 <MX_USART6_UART_Init+0x50>)
 8001410:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8001412:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <MX_USART6_UART_Init+0x4c>)
 8001414:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001418:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <MX_USART6_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001420:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <MX_USART6_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001426:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <MX_USART6_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800142c:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <MX_USART6_UART_Init+0x4c>)
 800142e:	220c      	movs	r2, #12
 8001430:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001432:	4b08      	ldr	r3, [pc, #32]	@ (8001454 <MX_USART6_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <MX_USART6_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	@ (8001454 <MX_USART6_UART_Init+0x4c>)
 8001440:	f002 fdae 	bl	8003fa0 <HAL_UART_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800144a:	f000 fa55 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200009f8 	.word	0x200009f8
 8001458:	40011400 	.word	0x40011400

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	@ 0x28
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b46      	ldr	r3, [pc, #280]	@ (8001590 <MX_GPIO_Init+0x134>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a45      	ldr	r2, [pc, #276]	@ (8001590 <MX_GPIO_Init+0x134>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b43      	ldr	r3, [pc, #268]	@ (8001590 <MX_GPIO_Init+0x134>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b3f      	ldr	r3, [pc, #252]	@ (8001590 <MX_GPIO_Init+0x134>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a3e      	ldr	r2, [pc, #248]	@ (8001590 <MX_GPIO_Init+0x134>)
 8001498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b3c      	ldr	r3, [pc, #240]	@ (8001590 <MX_GPIO_Init+0x134>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b38      	ldr	r3, [pc, #224]	@ (8001590 <MX_GPIO_Init+0x134>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a37      	ldr	r2, [pc, #220]	@ (8001590 <MX_GPIO_Init+0x134>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b35      	ldr	r3, [pc, #212]	@ (8001590 <MX_GPIO_Init+0x134>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b31      	ldr	r3, [pc, #196]	@ (8001590 <MX_GPIO_Init+0x134>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a30      	ldr	r2, [pc, #192]	@ (8001590 <MX_GPIO_Init+0x134>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001590 <MX_GPIO_Init+0x134>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2120      	movs	r1, #32
 80014e6:	482b      	ldr	r0, [pc, #172]	@ (8001594 <MX_GPIO_Init+0x138>)
 80014e8:	f001 f8e4 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014f2:	4829      	ldr	r0, [pc, #164]	@ (8001598 <MX_GPIO_Init+0x13c>)
 80014f4:	f001 f8de 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4822      	ldr	r0, [pc, #136]	@ (8001598 <MX_GPIO_Init+0x13c>)
 8001510:	f000 ff34 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0_EXTI0_BUTTON_Pin */
  GPIO_InitStruct.Pin = PC0_EXTI0_BUTTON_Pin;
 8001514:	2301      	movs	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001518:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800151c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PC0_EXTI0_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	481b      	ldr	r0, [pc, #108]	@ (8001598 <MX_GPIO_Init+0x13c>)
 800152a:	f000 ff27 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800152e:	2320      	movs	r3, #32
 8001530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	4813      	ldr	r0, [pc, #76]	@ (8001594 <MX_GPIO_Init+0x138>)
 8001546:	f000 ff19 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800154a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800154e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4619      	mov	r1, r3
 8001562:	480d      	ldr	r0, [pc, #52]	@ (8001598 <MX_GPIO_Init+0x13c>)
 8001564:	f000 ff0a 	bl	800237c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2100      	movs	r1, #0
 800156c:	2006      	movs	r0, #6
 800156e:	f000 fe3c 	bl	80021ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001572:	2006      	movs	r0, #6
 8001574:	f000 fe55 	bl	8002222 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	2028      	movs	r0, #40	@ 0x28
 800157e:	f000 fe34 	bl	80021ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001582:	2028      	movs	r0, #40	@ 0x28
 8001584:	f000 fe4d 	bl	8002222 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	@ 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800
 8001594:	40020000 	.word	0x40020000
 8001598:	40020800 	.word	0x40020800

0800159c <esp_event>:
void MX_GPIO_LED_OFF(int pin)
{
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
}
void esp_event(char * recvBuf)
{
 800159c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800159e:	b0a1      	sub	sp, #132	@ 0x84
 80015a0:	af06      	add	r7, sp, #24
 80015a2:	6078      	str	r0, [r7, #4]
  int i=0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	667b      	str	r3, [r7, #100]	@ 0x64
  char * pToken;
  char * pArray[ARR_CNT]={0};
 80015a8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2240      	movs	r2, #64	@ 0x40
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 f815 	bl	80055f0 <memset>

  strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7fe fe14 	bl	80001f4 <strlen>
 80015cc:	4603      	mov	r3, r0
 80015ce:	3b01      	subs	r3, #1
 80015d0:	4a77      	ldr	r2, [pc, #476]	@ (80017b0 <esp_event+0x214>)
 80015d2:	2100      	movs	r1, #0
 80015d4:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4876      	ldr	r0, [pc, #472]	@ (80017b4 <esp_event+0x218>)
 80015da:	f003 fe97 	bl	800530c <iprintf>

  pToken = strtok(recvBuf,"[@]");
 80015de:	4976      	ldr	r1, [pc, #472]	@ (80017b8 <esp_event+0x21c>)
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f004 f82d 	bl	8005640 <strtok>
 80015e6:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 80015e8:	e011      	b.n	800160e <esp_event+0x72>
  {
    pArray[i] = pToken;
 80015ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	3368      	adds	r3, #104	@ 0x68
 80015f0:	443b      	add	r3, r7
 80015f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015f4:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 80015f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015fa:	3301      	adds	r3, #1
 80015fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80015fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001600:	2b04      	cmp	r3, #4
 8001602:	dc08      	bgt.n	8001616 <esp_event+0x7a>
      break;
    pToken = strtok(NULL,"[@]");
 8001604:	496c      	ldr	r1, [pc, #432]	@ (80017b8 <esp_event+0x21c>)
 8001606:	2000      	movs	r0, #0
 8001608:	f004 f81a 	bl	8005640 <strtok>
 800160c:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 800160e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1ea      	bne.n	80015ea <esp_event+0x4e>
 8001614:	e000      	b.n	8001618 <esp_event+0x7c>
      break;
 8001616:	bf00      	nop
  }

  if(!strcmp(pArray[1], "ALLSTOP"))
 8001618:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800161a:	4968      	ldr	r1, [pc, #416]	@ (80017bc <esp_event+0x220>)
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe fddf 	bl	80001e0 <strcmp>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10e      	bne.n	8001646 <esp_event+0xaa>
  {
	  if(!strcmp(pArray[2], "ON"))
 8001628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800162a:	4965      	ldr	r1, [pc, #404]	@ (80017c0 <esp_event+0x224>)
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe fdd7 	bl	80001e0 <strcmp>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80ae 	beq.w	8001796 <esp_event+0x1fa>
	  {
		  //모든 장치 정지 명령 내리기(모든 플래그 True로)
	  }
	  else if(!strcmp(pArray[2], "OFF"))
 800163a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800163c:	4961      	ldr	r1, [pc, #388]	@ (80017c4 <esp_event+0x228>)
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe fdce 	bl	80001e0 <strcmp>
 8001644:	e0a7      	b.n	8001796 <esp_event+0x1fa>
	  {
		  //모든 장치 정지 명령 취소(모든 플래그 false로)
	  }
  }
  else if(!strcmp(pArray[1], "STATE"))
 8001646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001648:	495f      	ldr	r1, [pc, #380]	@ (80017c8 <esp_event+0x22c>)
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe fdc8 	bl	80001e0 <strcmp>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d11d      	bne.n	8001692 <esp_event+0xf6>
  {
	  //현재 매장의 상태 전송하기
	 sprintf(sendBuf, "[%s]%s@%s@%d@%d@%d@%d@%d\n", pArray[0], pArray[1], temp, humi, ledState, lockState, customerCount, fanSpeed);
 8001656:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 8001658:	6d3e      	ldr	r6, [r7, #80]	@ 0x50
 800165a:	4b5c      	ldr	r3, [pc, #368]	@ (80017cc <esp_event+0x230>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a5c      	ldr	r2, [pc, #368]	@ (80017d0 <esp_event+0x234>)
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	495c      	ldr	r1, [pc, #368]	@ (80017d4 <esp_event+0x238>)
 8001664:	7809      	ldrb	r1, [r1, #0]
 8001666:	6039      	str	r1, [r7, #0]
 8001668:	495b      	ldr	r1, [pc, #364]	@ (80017d8 <esp_event+0x23c>)
 800166a:	6809      	ldr	r1, [r1, #0]
 800166c:	485b      	ldr	r0, [pc, #364]	@ (80017dc <esp_event+0x240>)
 800166e:	6800      	ldr	r0, [r0, #0]
 8001670:	f107 040c 	add.w	r4, r7, #12
 8001674:	9005      	str	r0, [sp, #20]
 8001676:	9104      	str	r1, [sp, #16]
 8001678:	6839      	ldr	r1, [r7, #0]
 800167a:	9103      	str	r1, [sp, #12]
 800167c:	9202      	str	r2, [sp, #8]
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	4b57      	ldr	r3, [pc, #348]	@ (80017e0 <esp_event+0x244>)
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	4633      	mov	r3, r6
 8001686:	462a      	mov	r2, r5
 8001688:	4956      	ldr	r1, [pc, #344]	@ (80017e4 <esp_event+0x248>)
 800168a:	4620      	mov	r0, r4
 800168c:	f003 feb6 	bl	80053fc <siprintf>
 8001690:	e081      	b.n	8001796 <esp_event+0x1fa>
  }
  else if(!strcmp(pArray[1], "FAN"))	//팬 회전수 0~1000
 8001692:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001694:	4954      	ldr	r1, [pc, #336]	@ (80017e8 <esp_event+0x24c>)
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe fda2 	bl	80001e0 <strcmp>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d117      	bne.n	80016d2 <esp_event+0x136>
  {
	  fanSpeed = atoi(pArray[2]);
 80016a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016a4:	4618      	mov	r0, r3
 80016a6:	f003 fce7 	bl	8005078 <atoi>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a4b      	ldr	r2, [pc, #300]	@ (80017dc <esp_event+0x240>)
 80016ae:	6013      	str	r3, [r2, #0]
	  fanControl(fanSpeed);
 80016b0:	4b4a      	ldr	r3, [pc, #296]	@ (80017dc <esp_event+0x240>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 f8e7 	bl	8001888 <fanControl>
	  sprintf(sendBuf, "[%s]%s@%d\n", pArray[0], pArray[1], fanSpeed);
 80016ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80016bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80016be:	4b47      	ldr	r3, [pc, #284]	@ (80017dc <esp_event+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f107 000c 	add.w	r0, r7, #12
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	460b      	mov	r3, r1
 80016ca:	4948      	ldr	r1, [pc, #288]	@ (80017ec <esp_event+0x250>)
 80016cc:	f003 fe96 	bl	80053fc <siprintf>
 80016d0:	e061      	b.n	8001796 <esp_event+0x1fa>
  }
  else if(!strcmp(pArray[1], "DHTSTATE"))	//온습도 보내기
 80016d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016d4:	4946      	ldr	r1, [pc, #280]	@ (80017f0 <esp_event+0x254>)
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe fd82 	bl	80001e0 <strcmp>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10d      	bne.n	80016fe <esp_event+0x162>
  {
	  sprintf(sendBuf, "[%s]%s@%s@%d\n", pArray[0], pArray[1], temp, humi);
 80016e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80016e4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80016e6:	4b39      	ldr	r3, [pc, #228]	@ (80017cc <esp_event+0x230>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f107 000c 	add.w	r0, r7, #12
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	4b3b      	ldr	r3, [pc, #236]	@ (80017e0 <esp_event+0x244>)
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	460b      	mov	r3, r1
 80016f6:	493f      	ldr	r1, [pc, #252]	@ (80017f4 <esp_event+0x258>)
 80016f8:	f003 fe80 	bl	80053fc <siprintf>
 80016fc:	e04b      	b.n	8001796 <esp_event+0x1fa>
  }
  else if(!strcmp(pArray[1], "LED"))	//[매장명]LED@pArray[2]or[State]@
 80016fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001700:	493d      	ldr	r1, [pc, #244]	@ (80017f8 <esp_event+0x25c>)
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe fd6c 	bl	80001e0 <strcmp>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d12e      	bne.n	800176c <esp_event+0x1d0>
  {
	  if(!strcmp(pArray[2], "STATE"))
 800170e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001710:	492d      	ldr	r1, [pc, #180]	@ (80017c8 <esp_event+0x22c>)
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fd64 	bl	80001e0 <strcmp>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10e      	bne.n	800173c <esp_event+0x1a0>
	  {
		  sprintf(sendBuf, "[%s]%s@%s@%d\n", pArray[0], pArray[1], pArray[2], ledState);
 800171e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001720:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8001722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001724:	4a2a      	ldr	r2, [pc, #168]	@ (80017d0 <esp_event+0x234>)
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	f107 000c 	add.w	r0, r7, #12
 800172c:	9201      	str	r2, [sp, #4]
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	4623      	mov	r3, r4
 8001732:	460a      	mov	r2, r1
 8001734:	492f      	ldr	r1, [pc, #188]	@ (80017f4 <esp_event+0x258>)
 8001736:	f003 fe61 	bl	80053fc <siprintf>
 800173a:	e02c      	b.n	8001796 <esp_event+0x1fa>
	  }
	  else
	  {
		  ledControl(atoi(pArray[2]));
 800173c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800173e:	4618      	mov	r0, r3
 8001740:	f003 fc9a 	bl	8005078 <atoi>
 8001744:	4603      	mov	r3, r0
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f8b8 	bl	80018bc <ledControl>
		  sprintf(sendBuf, "[%s]%s@%d\n", pArray[0], pArray[1], atoi(pArray[2]));
 800174c:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 800174e:	6d3d      	ldr	r5, [r7, #80]	@ 0x50
 8001750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001752:	4618      	mov	r0, r3
 8001754:	f003 fc90 	bl	8005078 <atoi>
 8001758:	4603      	mov	r3, r0
 800175a:	f107 000c 	add.w	r0, r7, #12
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	462b      	mov	r3, r5
 8001762:	4622      	mov	r2, r4
 8001764:	4921      	ldr	r1, [pc, #132]	@ (80017ec <esp_event+0x250>)
 8001766:	f003 fe49 	bl	80053fc <siprintf>
 800176a:	e014      	b.n	8001796 <esp_event+0x1fa>
	  }
  }
  else if(!strncmp(pArray[1]," New conn",8))
 800176c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800176e:	2208      	movs	r2, #8
 8001770:	4922      	ldr	r1, [pc, #136]	@ (80017fc <esp_event+0x260>)
 8001772:	4618      	mov	r0, r3
 8001774:	f003 ff51 	bl	800561a <strncmp>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d011      	beq.n	80017a2 <esp_event+0x206>
  {
//	   printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
     return;
  }
  else if(!strncmp(pArray[1]," Already log",8))
 800177e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001780:	2208      	movs	r2, #8
 8001782:	491f      	ldr	r1, [pc, #124]	@ (8001800 <esp_event+0x264>)
 8001784:	4618      	mov	r0, r3
 8001786:	f003 ff48 	bl	800561a <strncmp>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10a      	bne.n	80017a6 <esp_event+0x20a>
  {
// 	    printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
	  esp_client_conn();
 8001790:	f7ff f9aa 	bl	8000ae8 <esp_client_conn>
      return;
 8001794:	e008      	b.n	80017a8 <esp_event+0x20c>
  }
  else
      return;

  esp_send_data(sendBuf);
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff facc 	bl	8000d38 <esp_send_data>
 80017a0:	e002      	b.n	80017a8 <esp_event+0x20c>
     return;
 80017a2:	bf00      	nop
 80017a4:	e000      	b.n	80017a8 <esp_event+0x20c>
      return;
 80017a6:	bf00      	nop
//  printf("Debug send : %s\r\n",sendBuf);
}
 80017a8:	376c      	adds	r7, #108	@ 0x6c
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000a64 	.word	0x20000a64
 80017b4:	080069cc 	.word	0x080069cc
 80017b8:	080069e0 	.word	0x080069e0
 80017bc:	080069e4 	.word	0x080069e4
 80017c0:	080069ec 	.word	0x080069ec
 80017c4:	080069f0 	.word	0x080069f0
 80017c8:	080069f4 	.word	0x080069f4
 80017cc:	20000a44 	.word	0x20000a44
 80017d0:	20000a58 	.word	0x20000a58
 80017d4:	20000a60 	.word	0x20000a60
 80017d8:	20000a54 	.word	0x20000a54
 80017dc:	20000a5c 	.word	0x20000a5c
 80017e0:	20000a48 	.word	0x20000a48
 80017e4:	080069fc 	.word	0x080069fc
 80017e8:	08006a18 	.word	0x08006a18
 80017ec:	08006a1c 	.word	0x08006a1c
 80017f0:	08006a28 	.word	0x08006a28
 80017f4:	08006a34 	.word	0x08006a34
 80017f8:	08006a44 	.word	0x08006a44
 80017fc:	08006a48 	.word	0x08006a48
 8001800:	08006a54 	.word	0x08006a54

08001804 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		//1ms 마다 호출
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 800180c:	4b0d      	ldr	r3, [pc, #52]	@ (8001844 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	3301      	adds	r3, #1
 8001812:	4a0c      	ldr	r2, [pc, #48]	@ (8001844 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001814:	6013      	str	r3, [r2, #0]
	if(tim3Cnt >= 1000) //1ms * 1000 = 1Sec
 8001816:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800181e:	db0a      	blt.n	8001836 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 8001820:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001822:	2201      	movs	r2, #1
 8001824:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	4a07      	ldr	r2, [pc, #28]	@ (800184c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800182e:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 8001830:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
	}
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000aa4 	.word	0x20000aa4
 8001848:	20000000 	.word	0x20000000
 800184c:	20000a40 	.word	0x20000a40

08001850 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	69b9      	ldr	r1, [r7, #24]
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	1a8a      	subs	r2, r1, r2
 800186a:	fb03 f202 	mul.w	r2, r3, r2
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	1acb      	subs	r3, r1, r3
 8001874:	fb92 f2f3 	sdiv	r2, r2, r3
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	4413      	add	r3, r2
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <fanControl>:

void fanControl(int fanSpeed)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	if (!fanFlag)	//플래그들은 0일 때만 동작을 의미함.
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <fanControl+0x2c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	f083 0301 	eor.w	r3, r3, #1
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <fanControl+0x1e>
	{
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1, fanSpeed);
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <fanControl+0x30>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000a61 	.word	0x20000a61
 80018b8:	20000968 	.word	0x20000968

080018bc <ledControl>:

void ledControl(int bright)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af02      	add	r7, sp, #8
 80018c2:	6078      	str	r0, [r7, #4]
	ledState = bright;	//전역변수에 저장
 80018c4:	4a0a      	ldr	r2, [pc, #40]	@ (80018f0 <ledControl+0x34>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6013      	str	r3, [r2, #0]
	int realLedState = map(bright, 0, 100, 0, 1000);	//써지는 실제값
 80018ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	2264      	movs	r2, #100	@ 0x64
 80018d4:	2100      	movs	r1, #0
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffba 	bl	8001850 <map>
 80018dc:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1, realLedState);
 80018de:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <ledControl+0x38>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000a58 	.word	0x20000a58
 80018f4:	200008d8 	.word	0x200008d8

080018f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018fc:	b672      	cpsid	i
}
 80018fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <Error_Handler+0x8>

08001904 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <HAL_MspInit+0x4c>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001912:	4a0f      	ldr	r2, [pc, #60]	@ (8001950 <HAL_MspInit+0x4c>)
 8001914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001918:	6453      	str	r3, [r2, #68]	@ 0x44
 800191a:	4b0d      	ldr	r3, [pc, #52]	@ (8001950 <HAL_MspInit+0x4c>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <HAL_MspInit+0x4c>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	4a08      	ldr	r2, [pc, #32]	@ (8001950 <HAL_MspInit+0x4c>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	@ 0x40
 8001936:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <HAL_MspInit+0x4c>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001942:	2007      	movs	r0, #7
 8001944:	f000 fc46 	bl	80021d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800

08001954 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a26      	ldr	r2, [pc, #152]	@ (80019fc <HAL_TIM_Base_MspInit+0xa8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d10e      	bne.n	8001984 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	4b25      	ldr	r3, [pc, #148]	@ (8001a00 <HAL_TIM_Base_MspInit+0xac>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196e:	4a24      	ldr	r2, [pc, #144]	@ (8001a00 <HAL_TIM_Base_MspInit+0xac>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6453      	str	r3, [r2, #68]	@ 0x44
 8001976:	4b22      	ldr	r3, [pc, #136]	@ (8001a00 <HAL_TIM_Base_MspInit+0xac>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001982:	e036      	b.n	80019f2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1e      	ldr	r2, [pc, #120]	@ (8001a04 <HAL_TIM_Base_MspInit+0xb0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d116      	bne.n	80019bc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	4b1b      	ldr	r3, [pc, #108]	@ (8001a00 <HAL_TIM_Base_MspInit+0xac>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	4a1a      	ldr	r2, [pc, #104]	@ (8001a00 <HAL_TIM_Base_MspInit+0xac>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	6413      	str	r3, [r2, #64]	@ 0x40
 800199e:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <HAL_TIM_Base_MspInit+0xac>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	201d      	movs	r0, #29
 80019b0:	f000 fc1b 	bl	80021ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019b4:	201d      	movs	r0, #29
 80019b6:	f000 fc34 	bl	8002222 <HAL_NVIC_EnableIRQ>
}
 80019ba:	e01a      	b.n	80019f2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a11      	ldr	r2, [pc, #68]	@ (8001a08 <HAL_TIM_Base_MspInit+0xb4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d115      	bne.n	80019f2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001a00 <HAL_TIM_Base_MspInit+0xac>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001a00 <HAL_TIM_Base_MspInit+0xac>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <HAL_TIM_Base_MspInit+0xac>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	201e      	movs	r0, #30
 80019e8:	f000 fbff 	bl	80021ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019ec:	201e      	movs	r0, #30
 80019ee:	f000 fc18 	bl	8002222 <HAL_NVIC_EnableIRQ>
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40010000 	.word	0x40010000
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40000400 	.word	0x40000400
 8001a08:	40000800 	.word	0x40000800

08001a0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	@ 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a36      	ldr	r2, [pc, #216]	@ (8001b04 <HAL_TIM_MspPostInit+0xf8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d11f      	bne.n	8001a6e <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	4b35      	ldr	r3, [pc, #212]	@ (8001b08 <HAL_TIM_MspPostInit+0xfc>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	4a34      	ldr	r2, [pc, #208]	@ (8001b08 <HAL_TIM_MspPostInit+0xfc>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3e:	4b32      	ldr	r3, [pc, #200]	@ (8001b08 <HAL_TIM_MspPostInit+0xfc>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	4829      	ldr	r0, [pc, #164]	@ (8001b0c <HAL_TIM_MspPostInit+0x100>)
 8001a68:	f000 fc88 	bl	800237c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a6c:	e046      	b.n	8001afc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a27      	ldr	r2, [pc, #156]	@ (8001b10 <HAL_TIM_MspPostInit+0x104>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d11e      	bne.n	8001ab6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	4b22      	ldr	r3, [pc, #136]	@ (8001b08 <HAL_TIM_MspPostInit+0xfc>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a80:	4a21      	ldr	r2, [pc, #132]	@ (8001b08 <HAL_TIM_MspPostInit+0xfc>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a88:	4b1f      	ldr	r3, [pc, #124]	@ (8001b08 <HAL_TIM_MspPostInit+0xfc>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a94:	2340      	movs	r3, #64	@ 0x40
 8001a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4619      	mov	r1, r3
 8001aae:	4817      	ldr	r0, [pc, #92]	@ (8001b0c <HAL_TIM_MspPostInit+0x100>)
 8001ab0:	f000 fc64 	bl	800237c <HAL_GPIO_Init>
}
 8001ab4:	e022      	b.n	8001afc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a16      	ldr	r2, [pc, #88]	@ (8001b14 <HAL_TIM_MspPostInit+0x108>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d11d      	bne.n	8001afc <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	4b10      	ldr	r3, [pc, #64]	@ (8001b08 <HAL_TIM_MspPostInit+0xfc>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac8:	4a0f      	ldr	r2, [pc, #60]	@ (8001b08 <HAL_TIM_MspPostInit+0xfc>)
 8001aca:	f043 0302 	orr.w	r3, r3, #2
 8001ace:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b08 <HAL_TIM_MspPostInit+0xfc>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_fanMotor_Pin;
 8001adc:	2340      	movs	r3, #64	@ 0x40
 8001ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001aec:	2302      	movs	r3, #2
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM4_fanMotor_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	4808      	ldr	r0, [pc, #32]	@ (8001b18 <HAL_TIM_MspPostInit+0x10c>)
 8001af8:	f000 fc40 	bl	800237c <HAL_GPIO_Init>
}
 8001afc:	bf00      	nop
 8001afe:	3728      	adds	r7, #40	@ 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40010000 	.word	0x40010000
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	40000400 	.word	0x40000400
 8001b14:	40000800 	.word	0x40000800
 8001b18:	40020400 	.word	0x40020400

08001b1c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08c      	sub	sp, #48	@ 0x30
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a3a      	ldr	r2, [pc, #232]	@ (8001c24 <HAL_UART_MspInit+0x108>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d134      	bne.n	8001ba8 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	4b39      	ldr	r3, [pc, #228]	@ (8001c28 <HAL_UART_MspInit+0x10c>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	4a38      	ldr	r2, [pc, #224]	@ (8001c28 <HAL_UART_MspInit+0x10c>)
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b4e:	4b36      	ldr	r3, [pc, #216]	@ (8001c28 <HAL_UART_MspInit+0x10c>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	4b32      	ldr	r3, [pc, #200]	@ (8001c28 <HAL_UART_MspInit+0x10c>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	4a31      	ldr	r2, [pc, #196]	@ (8001c28 <HAL_UART_MspInit+0x10c>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c28 <HAL_UART_MspInit+0x10c>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b76:	230c      	movs	r3, #12
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b82:	2303      	movs	r3, #3
 8001b84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b86:	2307      	movs	r3, #7
 8001b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4826      	ldr	r0, [pc, #152]	@ (8001c2c <HAL_UART_MspInit+0x110>)
 8001b92:	f000 fbf3 	bl	800237c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2026      	movs	r0, #38	@ 0x26
 8001b9c:	f000 fb25 	bl	80021ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ba0:	2026      	movs	r0, #38	@ 0x26
 8001ba2:	f000 fb3e 	bl	8002222 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ba6:	e038      	b.n	8001c1a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a20      	ldr	r2, [pc, #128]	@ (8001c30 <HAL_UART_MspInit+0x114>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d133      	bne.n	8001c1a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <HAL_UART_MspInit+0x10c>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bba:	4a1b      	ldr	r2, [pc, #108]	@ (8001c28 <HAL_UART_MspInit+0x10c>)
 8001bbc:	f043 0320 	orr.w	r3, r3, #32
 8001bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bc2:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <HAL_UART_MspInit+0x10c>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc6:	f003 0320 	and.w	r3, r3, #32
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <HAL_UART_MspInit+0x10c>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	4a14      	ldr	r2, [pc, #80]	@ (8001c28 <HAL_UART_MspInit+0x10c>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bde:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <HAL_UART_MspInit+0x10c>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_bluetooh_Pin|RX_bluetooh_Pin;
 8001bea:	23c0      	movs	r3, #192	@ 0xc0
 8001bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	480b      	ldr	r0, [pc, #44]	@ (8001c34 <HAL_UART_MspInit+0x118>)
 8001c06:	f000 fbb9 	bl	800237c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	2047      	movs	r0, #71	@ 0x47
 8001c10:	f000 faeb 	bl	80021ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001c14:	2047      	movs	r0, #71	@ 0x47
 8001c16:	f000 fb04 	bl	8002222 <HAL_NVIC_EnableIRQ>
}
 8001c1a:	bf00      	nop
 8001c1c:	3730      	adds	r7, #48	@ 0x30
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40004400 	.word	0x40004400
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40020000 	.word	0x40020000
 8001c30:	40011400 	.word	0x40011400
 8001c34:	40020800 	.word	0x40020800

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <NMI_Handler+0x4>

08001c40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <HardFault_Handler+0x4>

08001c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <MemManage_Handler+0x4>

08001c50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <BusFault_Handler+0x4>

08001c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <UsageFault_Handler+0x4>

08001c60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8e:	f000 f98d 	bl	8001fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC0_EXTI0_BUTTON_Pin);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f000 fd24 	bl	80026e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ca8:	4802      	ldr	r0, [pc, #8]	@ (8001cb4 <TIM3_IRQHandler+0x10>)
 8001caa:	f001 fb31 	bl	8003310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000920 	.word	0x20000920

08001cb8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001cbc:	4802      	ldr	r0, [pc, #8]	@ (8001cc8 <TIM4_IRQHandler+0x10>)
 8001cbe:	f001 fb27 	bl	8003310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000968 	.word	0x20000968

08001ccc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cd0:	4802      	ldr	r0, [pc, #8]	@ (8001cdc <USART2_IRQHandler+0x10>)
 8001cd2:	f002 fa65 	bl	80041a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200009b0 	.word	0x200009b0

08001ce0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ce4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ce8:	f000 fcfe 	bl	80026e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001cf4:	4802      	ldr	r0, [pc, #8]	@ (8001d00 <USART6_IRQHandler+0x10>)
 8001cf6:	f002 fa53 	bl	80041a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200009f8 	.word	0x200009f8

08001d04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return 1;
 8001d08:	2301      	movs	r3, #1
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_kill>:

int _kill(int pid, int sig)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d1e:	f003 fd47 	bl	80057b0 <__errno>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2216      	movs	r2, #22
 8001d26:	601a      	str	r2, [r3, #0]
  return -1;
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_exit>:

void _exit (int status)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ffe7 	bl	8001d14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d46:	bf00      	nop
 8001d48:	e7fd      	b.n	8001d46 <_exit+0x12>

08001d4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	e00a      	b.n	8001d72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d5c:	f3af 8000 	nop.w
 8001d60:	4601      	mov	r1, r0
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	60ba      	str	r2, [r7, #8]
 8001d68:	b2ca      	uxtb	r2, r1
 8001d6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	dbf0      	blt.n	8001d5c <_read+0x12>
  }

  return len;
 8001d7a:	687b      	ldr	r3, [r7, #4]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	e009      	b.n	8001daa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	60ba      	str	r2, [r7, #8]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff f80c 	bl	8000dbc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	3301      	adds	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	dbf1      	blt.n	8001d96 <_write+0x12>
  }
  return len;
 8001db2:	687b      	ldr	r3, [r7, #4]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_close>:

int _close(int file)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001de4:	605a      	str	r2, [r3, #4]
  return 0;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <_isatty>:

int _isatty(int file)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dfc:	2301      	movs	r3, #1
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b085      	sub	sp, #20
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e2c:	4a14      	ldr	r2, [pc, #80]	@ (8001e80 <_sbrk+0x5c>)
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <_sbrk+0x60>)
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e38:	4b13      	ldr	r3, [pc, #76]	@ (8001e88 <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e40:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <_sbrk+0x64>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	@ (8001e8c <_sbrk+0x68>)
 8001e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d207      	bcs.n	8001e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e54:	f003 fcac 	bl	80057b0 <__errno>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	e009      	b.n	8001e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e64:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6a:	4b07      	ldr	r3, [pc, #28]	@ (8001e88 <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a05      	ldr	r2, [pc, #20]	@ (8001e88 <_sbrk+0x64>)
 8001e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20020000 	.word	0x20020000
 8001e84:	00000400 	.word	0x00000400
 8001e88:	20000aa8 	.word	0x20000aa8
 8001e8c:	20000c00 	.word	0x20000c00

08001e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <SystemInit+0x20>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e9a:	4a05      	ldr	r2, [pc, #20]	@ (8001eb0 <SystemInit+0x20>)
 8001e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8001eb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001eec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eb8:	f7ff ffea 	bl	8001e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ebc:	480c      	ldr	r0, [pc, #48]	@ (8001ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ebe:	490d      	ldr	r1, [pc, #52]	@ (8001ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec4:	e002      	b.n	8001ecc <LoopCopyDataInit>

08001ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eca:	3304      	adds	r3, #4

08001ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed0:	d3f9      	bcc.n	8001ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8001f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed8:	e001      	b.n	8001ede <LoopFillZerobss>

08001eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001edc:	3204      	adds	r2, #4

08001ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee0:	d3fb      	bcc.n	8001eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee2:	f003 fc6b 	bl	80057bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee6:	f7fe ff81 	bl	8000dec <main>
  bx  lr    
 8001eea:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8001eec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001ef8:	08006c70 	.word	0x08006c70
  ldr r2, =_sbss
 8001efc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001f00:	20000bfc 	.word	0x20000bfc

08001f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC_IRQHandler>
	...

08001f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f48 <HAL_Init+0x40>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0d      	ldr	r2, [pc, #52]	@ (8001f48 <HAL_Init+0x40>)
 8001f12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f18:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <HAL_Init+0x40>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f48 <HAL_Init+0x40>)
 8001f1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f24:	4b08      	ldr	r3, [pc, #32]	@ (8001f48 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a07      	ldr	r2, [pc, #28]	@ (8001f48 <HAL_Init+0x40>)
 8001f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f30:	2003      	movs	r0, #3
 8001f32:	f000 f94f 	bl	80021d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f36:	2000      	movs	r0, #0
 8001f38:	f000 f808 	bl	8001f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f3c:	f7ff fce2 	bl	8001904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40023c00 	.word	0x40023c00

08001f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f54:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <HAL_InitTick+0x54>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <HAL_InitTick+0x58>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f967 	bl	800223e <HAL_SYSTICK_Config>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00e      	b.n	8001f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b0f      	cmp	r3, #15
 8001f7e:	d80a      	bhi.n	8001f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f80:	2200      	movs	r2, #0
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
 8001f88:	f000 f92f 	bl	80021ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f8c:	4a06      	ldr	r2, [pc, #24]	@ (8001fa8 <HAL_InitTick+0x5c>)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000004 	.word	0x20000004
 8001fa4:	2000000c 	.word	0x2000000c
 8001fa8:	20000008 	.word	0x20000008

08001fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <HAL_IncTick+0x20>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <HAL_IncTick+0x24>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a04      	ldr	r2, [pc, #16]	@ (8001fd0 <HAL_IncTick+0x24>)
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	2000000c 	.word	0x2000000c
 8001fd0:	20000aac 	.word	0x20000aac

08001fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	@ (8001fe8 <HAL_GetTick+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000aac 	.word	0x20000aac

08001fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff4:	f7ff ffee 	bl	8001fd4 <HAL_GetTick>
 8001ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002004:	d005      	beq.n	8002012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002006:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <HAL_Delay+0x44>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4413      	add	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002012:	bf00      	nop
 8002014:	f7ff ffde 	bl	8001fd4 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	429a      	cmp	r2, r3
 8002022:	d8f7      	bhi.n	8002014 <HAL_Delay+0x28>
  {
  }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2000000c 	.word	0x2000000c

08002034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002044:	4b0c      	ldr	r3, [pc, #48]	@ (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002050:	4013      	ands	r3, r2
 8002052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800205c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002066:	4a04      	ldr	r2, [pc, #16]	@ (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	60d3      	str	r3, [r2, #12]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002080:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <__NVIC_GetPriorityGrouping+0x18>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	f003 0307 	and.w	r3, r3, #7
}
 800208a:	4618      	mov	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	db0b      	blt.n	80020c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	f003 021f 	and.w	r2, r3, #31
 80020b0:	4907      	ldr	r1, [pc, #28]	@ (80020d0 <__NVIC_EnableIRQ+0x38>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	2001      	movs	r0, #1
 80020ba:	fa00 f202 	lsl.w	r2, r0, r2
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000e100 	.word	0xe000e100

080020d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db0a      	blt.n	80020fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	490c      	ldr	r1, [pc, #48]	@ (8002120 <__NVIC_SetPriority+0x4c>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	440b      	add	r3, r1
 80020f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020fc:	e00a      	b.n	8002114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4908      	ldr	r1, [pc, #32]	@ (8002124 <__NVIC_SetPriority+0x50>)
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	3b04      	subs	r3, #4
 800210c:	0112      	lsls	r2, r2, #4
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	440b      	add	r3, r1
 8002112:	761a      	strb	r2, [r3, #24]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000e100 	.word	0xe000e100
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002128:	b480      	push	{r7}
 800212a:	b089      	sub	sp, #36	@ 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f1c3 0307 	rsb	r3, r3, #7
 8002142:	2b04      	cmp	r3, #4
 8002144:	bf28      	it	cs
 8002146:	2304      	movcs	r3, #4
 8002148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3304      	adds	r3, #4
 800214e:	2b06      	cmp	r3, #6
 8002150:	d902      	bls.n	8002158 <NVIC_EncodePriority+0x30>
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3b03      	subs	r3, #3
 8002156:	e000      	b.n	800215a <NVIC_EncodePriority+0x32>
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43da      	mvns	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	401a      	ands	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	43d9      	mvns	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	4313      	orrs	r3, r2
         );
}
 8002182:	4618      	mov	r0, r3
 8002184:	3724      	adds	r7, #36	@ 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021a0:	d301      	bcc.n	80021a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00f      	b.n	80021c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a6:	4a0a      	ldr	r2, [pc, #40]	@ (80021d0 <SysTick_Config+0x40>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ae:	210f      	movs	r1, #15
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	f7ff ff8e 	bl	80020d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b8:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <SysTick_Config+0x40>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021be:	4b04      	ldr	r3, [pc, #16]	@ (80021d0 <SysTick_Config+0x40>)
 80021c0:	2207      	movs	r2, #7
 80021c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	e000e010 	.word	0xe000e010

080021d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ff29 	bl	8002034 <__NVIC_SetPriorityGrouping>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021fc:	f7ff ff3e 	bl	800207c <__NVIC_GetPriorityGrouping>
 8002200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	6978      	ldr	r0, [r7, #20]
 8002208:	f7ff ff8e 	bl	8002128 <NVIC_EncodePriority>
 800220c:	4602      	mov	r2, r0
 800220e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff5d 	bl	80020d4 <__NVIC_SetPriority>
}
 800221a:	bf00      	nop
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff31 	bl	8002098 <__NVIC_EnableIRQ>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ffa2 	bl	8002190 <SysTick_Config>
 800224c:	4603      	mov	r3, r0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002262:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff feb6 	bl	8001fd4 <HAL_GetTick>
 8002268:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d008      	beq.n	8002288 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2280      	movs	r2, #128	@ 0x80
 800227a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e052      	b.n	800232e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0216 	bic.w	r2, r2, #22
 8002296:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d103      	bne.n	80022b8 <HAL_DMA_Abort+0x62>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d007      	beq.n	80022c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0208 	bic.w	r2, r2, #8
 80022c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d8:	e013      	b.n	8002302 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022da:	f7ff fe7b 	bl	8001fd4 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d90c      	bls.n	8002302 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2203      	movs	r2, #3
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e015      	b.n	800232e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e4      	bne.n	80022da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002314:	223f      	movs	r2, #63	@ 0x3f
 8002316:	409a      	lsls	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d004      	beq.n	8002354 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2280      	movs	r2, #128	@ 0x80
 800234e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e00c      	b.n	800236e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2205      	movs	r2, #5
 8002358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	@ 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	e159      	b.n	800264c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002398:	2201      	movs	r2, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	f040 8148 	bne.w	8002646 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d005      	beq.n	80023ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d130      	bne.n	8002430 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	2203      	movs	r2, #3
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 0201 	and.w	r2, r3, #1
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b03      	cmp	r3, #3
 800243a:	d017      	beq.n	800246c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d123      	bne.n	80024c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	08da      	lsrs	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3208      	adds	r2, #8
 8002480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	220f      	movs	r2, #15
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	08da      	lsrs	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3208      	adds	r2, #8
 80024ba:	69b9      	ldr	r1, [r7, #24]
 80024bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	2203      	movs	r2, #3
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0203 	and.w	r2, r3, #3
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80a2 	beq.w	8002646 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b57      	ldr	r3, [pc, #348]	@ (8002664 <HAL_GPIO_Init+0x2e8>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	4a56      	ldr	r2, [pc, #344]	@ (8002664 <HAL_GPIO_Init+0x2e8>)
 800250c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002510:	6453      	str	r3, [r2, #68]	@ 0x44
 8002512:	4b54      	ldr	r3, [pc, #336]	@ (8002664 <HAL_GPIO_Init+0x2e8>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800251e:	4a52      	ldr	r2, [pc, #328]	@ (8002668 <HAL_GPIO_Init+0x2ec>)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	3302      	adds	r3, #2
 8002526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	220f      	movs	r2, #15
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a49      	ldr	r2, [pc, #292]	@ (800266c <HAL_GPIO_Init+0x2f0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d019      	beq.n	800257e <HAL_GPIO_Init+0x202>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a48      	ldr	r2, [pc, #288]	@ (8002670 <HAL_GPIO_Init+0x2f4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d013      	beq.n	800257a <HAL_GPIO_Init+0x1fe>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a47      	ldr	r2, [pc, #284]	@ (8002674 <HAL_GPIO_Init+0x2f8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00d      	beq.n	8002576 <HAL_GPIO_Init+0x1fa>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a46      	ldr	r2, [pc, #280]	@ (8002678 <HAL_GPIO_Init+0x2fc>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d007      	beq.n	8002572 <HAL_GPIO_Init+0x1f6>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a45      	ldr	r2, [pc, #276]	@ (800267c <HAL_GPIO_Init+0x300>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_GPIO_Init+0x1f2>
 800256a:	2304      	movs	r3, #4
 800256c:	e008      	b.n	8002580 <HAL_GPIO_Init+0x204>
 800256e:	2307      	movs	r3, #7
 8002570:	e006      	b.n	8002580 <HAL_GPIO_Init+0x204>
 8002572:	2303      	movs	r3, #3
 8002574:	e004      	b.n	8002580 <HAL_GPIO_Init+0x204>
 8002576:	2302      	movs	r3, #2
 8002578:	e002      	b.n	8002580 <HAL_GPIO_Init+0x204>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_GPIO_Init+0x204>
 800257e:	2300      	movs	r3, #0
 8002580:	69fa      	ldr	r2, [r7, #28]
 8002582:	f002 0203 	and.w	r2, r2, #3
 8002586:	0092      	lsls	r2, r2, #2
 8002588:	4093      	lsls	r3, r2
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002590:	4935      	ldr	r1, [pc, #212]	@ (8002668 <HAL_GPIO_Init+0x2ec>)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	089b      	lsrs	r3, r3, #2
 8002596:	3302      	adds	r3, #2
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800259e:	4b38      	ldr	r3, [pc, #224]	@ (8002680 <HAL_GPIO_Init+0x304>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002680 <HAL_GPIO_Init+0x304>)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002680 <HAL_GPIO_Init+0x304>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025ec:	4a24      	ldr	r2, [pc, #144]	@ (8002680 <HAL_GPIO_Init+0x304>)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025f2:	4b23      	ldr	r3, [pc, #140]	@ (8002680 <HAL_GPIO_Init+0x304>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002616:	4a1a      	ldr	r2, [pc, #104]	@ (8002680 <HAL_GPIO_Init+0x304>)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800261c:	4b18      	ldr	r3, [pc, #96]	@ (8002680 <HAL_GPIO_Init+0x304>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002640:	4a0f      	ldr	r2, [pc, #60]	@ (8002680 <HAL_GPIO_Init+0x304>)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3301      	adds	r3, #1
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	2b0f      	cmp	r3, #15
 8002650:	f67f aea2 	bls.w	8002398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3724      	adds	r7, #36	@ 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800
 8002668:	40013800 	.word	0x40013800
 800266c:	40020000 	.word	0x40020000
 8002670:	40020400 	.word	0x40020400
 8002674:	40020800 	.word	0x40020800
 8002678:	40020c00 	.word	0x40020c00
 800267c:	40021000 	.word	0x40021000
 8002680:	40013c00 	.word	0x40013c00

08002684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	887b      	ldrh	r3, [r7, #2]
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
 80026a0:	e001      	b.n	80026a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	807b      	strh	r3, [r7, #2]
 80026c0:	4613      	mov	r3, r2
 80026c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026c4:	787b      	ldrb	r3, [r7, #1]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ca:	887a      	ldrh	r2, [r7, #2]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026d0:	e003      	b.n	80026da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026d2:	887b      	ldrh	r3, [r7, #2]
 80026d4:	041a      	lsls	r2, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	619a      	str	r2, [r3, #24]
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026f2:	4b08      	ldr	r3, [pc, #32]	@ (8002714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d006      	beq.n	800270c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026fe:	4a05      	ldr	r2, [pc, #20]	@ (8002714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	4618      	mov	r0, r3
 8002708:	f000 f806 	bl	8002718 <HAL_GPIO_EXTI_Callback>
  }
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40013c00 	.word	0x40013c00

08002718 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e267      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d075      	beq.n	800283a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800274e:	4b88      	ldr	r3, [pc, #544]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b04      	cmp	r3, #4
 8002758:	d00c      	beq.n	8002774 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275a:	4b85      	ldr	r3, [pc, #532]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002762:	2b08      	cmp	r3, #8
 8002764:	d112      	bne.n	800278c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002766:	4b82      	ldr	r3, [pc, #520]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800276e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002772:	d10b      	bne.n	800278c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002774:	4b7e      	ldr	r3, [pc, #504]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d05b      	beq.n	8002838 <HAL_RCC_OscConfig+0x108>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d157      	bne.n	8002838 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e242      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002794:	d106      	bne.n	80027a4 <HAL_RCC_OscConfig+0x74>
 8002796:	4b76      	ldr	r3, [pc, #472]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a75      	ldr	r2, [pc, #468]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 800279c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e01d      	b.n	80027e0 <HAL_RCC_OscConfig+0xb0>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x98>
 80027ae:	4b70      	ldr	r3, [pc, #448]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a6c      	ldr	r2, [pc, #432]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	e00b      	b.n	80027e0 <HAL_RCC_OscConfig+0xb0>
 80027c8:	4b69      	ldr	r3, [pc, #420]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a68      	ldr	r2, [pc, #416]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4b66      	ldr	r3, [pc, #408]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a65      	ldr	r2, [pc, #404]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7ff fbf4 	bl	8001fd4 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f0:	f7ff fbf0 	bl	8001fd4 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	@ 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e207      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	4b5b      	ldr	r3, [pc, #364]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0xc0>
 800280e:	e014      	b.n	800283a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7ff fbe0 	bl	8001fd4 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002818:	f7ff fbdc 	bl	8001fd4 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	@ 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e1f3      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282a:	4b51      	ldr	r3, [pc, #324]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0xe8>
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d063      	beq.n	800290e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002846:	4b4a      	ldr	r3, [pc, #296]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002852:	4b47      	ldr	r3, [pc, #284]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800285a:	2b08      	cmp	r3, #8
 800285c:	d11c      	bne.n	8002898 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800285e:	4b44      	ldr	r3, [pc, #272]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d116      	bne.n	8002898 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	4b41      	ldr	r3, [pc, #260]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <HAL_RCC_OscConfig+0x152>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d001      	beq.n	8002882 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e1c7      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002882:	4b3b      	ldr	r3, [pc, #236]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4937      	ldr	r1, [pc, #220]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002896:	e03a      	b.n	800290e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d020      	beq.n	80028e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a0:	4b34      	ldr	r3, [pc, #208]	@ (8002974 <HAL_RCC_OscConfig+0x244>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7ff fb95 	bl	8001fd4 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ae:	f7ff fb91 	bl	8001fd4 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e1a8      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b28      	ldr	r3, [pc, #160]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4925      	ldr	r1, [pc, #148]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	600b      	str	r3, [r1, #0]
 80028e0:	e015      	b.n	800290e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e2:	4b24      	ldr	r3, [pc, #144]	@ (8002974 <HAL_RCC_OscConfig+0x244>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7ff fb74 	bl	8001fd4 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f0:	f7ff fb70 	bl	8001fd4 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e187      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002902:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d036      	beq.n	8002988 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d016      	beq.n	8002950 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002922:	4b15      	ldr	r3, [pc, #84]	@ (8002978 <HAL_RCC_OscConfig+0x248>)
 8002924:	2201      	movs	r2, #1
 8002926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002928:	f7ff fb54 	bl	8001fd4 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002930:	f7ff fb50 	bl	8001fd4 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e167      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002942:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0x200>
 800294e:	e01b      	b.n	8002988 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002950:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <HAL_RCC_OscConfig+0x248>)
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002956:	f7ff fb3d 	bl	8001fd4 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295c:	e00e      	b.n	800297c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800295e:	f7ff fb39 	bl	8001fd4 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d907      	bls.n	800297c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e150      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
 8002970:	40023800 	.word	0x40023800
 8002974:	42470000 	.word	0x42470000
 8002978:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297c:	4b88      	ldr	r3, [pc, #544]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 800297e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1ea      	bne.n	800295e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8097 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002996:	2300      	movs	r3, #0
 8002998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299a:	4b81      	ldr	r3, [pc, #516]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10f      	bne.n	80029c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	4b7d      	ldr	r3, [pc, #500]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	4a7c      	ldr	r2, [pc, #496]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029b6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c2:	2301      	movs	r3, #1
 80029c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c6:	4b77      	ldr	r3, [pc, #476]	@ (8002ba4 <HAL_RCC_OscConfig+0x474>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d118      	bne.n	8002a04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d2:	4b74      	ldr	r3, [pc, #464]	@ (8002ba4 <HAL_RCC_OscConfig+0x474>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a73      	ldr	r2, [pc, #460]	@ (8002ba4 <HAL_RCC_OscConfig+0x474>)
 80029d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029de:	f7ff faf9 	bl	8001fd4 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e6:	f7ff faf5 	bl	8001fd4 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e10c      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f8:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba4 <HAL_RCC_OscConfig+0x474>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d106      	bne.n	8002a1a <HAL_RCC_OscConfig+0x2ea>
 8002a0c:	4b64      	ldr	r3, [pc, #400]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a10:	4a63      	ldr	r2, [pc, #396]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a18:	e01c      	b.n	8002a54 <HAL_RCC_OscConfig+0x324>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b05      	cmp	r3, #5
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x30c>
 8002a22:	4b5f      	ldr	r3, [pc, #380]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a26:	4a5e      	ldr	r2, [pc, #376]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a28:	f043 0304 	orr.w	r3, r3, #4
 8002a2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a32:	4a5b      	ldr	r2, [pc, #364]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_OscConfig+0x324>
 8002a3c:	4b58      	ldr	r3, [pc, #352]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a40:	4a57      	ldr	r2, [pc, #348]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a42:	f023 0301 	bic.w	r3, r3, #1
 8002a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a48:	4b55      	ldr	r3, [pc, #340]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4c:	4a54      	ldr	r2, [pc, #336]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	f023 0304 	bic.w	r3, r3, #4
 8002a52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d015      	beq.n	8002a88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5c:	f7ff faba 	bl	8001fd4 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a64:	f7ff fab6 	bl	8001fd4 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e0cb      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7a:	4b49      	ldr	r3, [pc, #292]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0ee      	beq.n	8002a64 <HAL_RCC_OscConfig+0x334>
 8002a86:	e014      	b.n	8002ab2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a88:	f7ff faa4 	bl	8001fd4 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7ff faa0 	bl	8001fd4 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e0b5      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1ee      	bne.n	8002a90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab8:	4b39      	ldr	r3, [pc, #228]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	4a38      	ldr	r2, [pc, #224]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a1 	beq.w	8002c10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ace:	4b34      	ldr	r3, [pc, #208]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d05c      	beq.n	8002b94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d141      	bne.n	8002b66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae2:	4b31      	ldr	r3, [pc, #196]	@ (8002ba8 <HAL_RCC_OscConfig+0x478>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7ff fa74 	bl	8001fd4 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af0:	f7ff fa70 	bl	8001fd4 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e087      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	4b27      	ldr	r3, [pc, #156]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	019b      	lsls	r3, r3, #6
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b24:	085b      	lsrs	r3, r3, #1
 8002b26:	3b01      	subs	r3, #1
 8002b28:	041b      	lsls	r3, r3, #16
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	061b      	lsls	r3, r3, #24
 8002b32:	491b      	ldr	r1, [pc, #108]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba8 <HAL_RCC_OscConfig+0x478>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3e:	f7ff fa49 	bl	8001fd4 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b46:	f7ff fa45 	bl	8001fd4 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e05c      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b58:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x416>
 8002b64:	e054      	b.n	8002c10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b66:	4b10      	ldr	r3, [pc, #64]	@ (8002ba8 <HAL_RCC_OscConfig+0x478>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7ff fa32 	bl	8001fd4 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b74:	f7ff fa2e 	bl	8001fd4 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e045      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x444>
 8002b92:	e03d      	b.n	8002c10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d107      	bne.n	8002bac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e038      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40007000 	.word	0x40007000
 8002ba8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bac:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <HAL_RCC_OscConfig+0x4ec>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d028      	beq.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d121      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d11a      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bdc:	4013      	ands	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002be2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d111      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800

08002c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0cc      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c34:	4b68      	ldr	r3, [pc, #416]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d90c      	bls.n	8002c5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b65      	ldr	r3, [pc, #404]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b63      	ldr	r3, [pc, #396]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0b8      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c74:	4b59      	ldr	r3, [pc, #356]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a58      	ldr	r2, [pc, #352]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c8c:	4b53      	ldr	r3, [pc, #332]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4a52      	ldr	r2, [pc, #328]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c98:	4b50      	ldr	r3, [pc, #320]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	494d      	ldr	r1, [pc, #308]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d044      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	4b47      	ldr	r3, [pc, #284]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d119      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e07f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d003      	beq.n	8002cde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cde:	4b3f      	ldr	r3, [pc, #252]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e06f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cee:	4b3b      	ldr	r3, [pc, #236]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e067      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cfe:	4b37      	ldr	r3, [pc, #220]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f023 0203 	bic.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4934      	ldr	r1, [pc, #208]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d10:	f7ff f960 	bl	8001fd4 <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d18:	f7ff f95c 	bl	8001fd4 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e04f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 020c 	and.w	r2, r3, #12
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d1eb      	bne.n	8002d18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d40:	4b25      	ldr	r3, [pc, #148]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d20c      	bcs.n	8002d68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b22      	ldr	r3, [pc, #136]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b20      	ldr	r3, [pc, #128]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e032      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d74:	4b19      	ldr	r3, [pc, #100]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4916      	ldr	r1, [pc, #88]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d92:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	490e      	ldr	r1, [pc, #56]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002da6:	f000 f821 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 8002daa:	4602      	mov	r2, r0
 8002dac:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	490a      	ldr	r1, [pc, #40]	@ (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	5ccb      	ldrb	r3, [r1, r3]
 8002dba:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbe:	4a09      	ldr	r2, [pc, #36]	@ (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002dc2:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff f8c0 	bl	8001f4c <HAL_InitTick>

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023c00 	.word	0x40023c00
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	08006a64 	.word	0x08006a64
 8002de4:	20000004 	.word	0x20000004
 8002de8:	20000008 	.word	0x20000008

08002dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df0:	b094      	sub	sp, #80	@ 0x50
 8002df2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e04:	4b79      	ldr	r3, [pc, #484]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x200>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d00d      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x40>
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	f200 80e1 	bhi.w	8002fd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x34>
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d003      	beq.n	8002e26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e1e:	e0db      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e20:	4b73      	ldr	r3, [pc, #460]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e24:	e0db      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e26:	4b73      	ldr	r3, [pc, #460]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e2a:	e0d8      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e2c:	4b6f      	ldr	r3, [pc, #444]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x200>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e36:	4b6d      	ldr	r3, [pc, #436]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x200>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d063      	beq.n	8002f0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e42:	4b6a      	ldr	r3, [pc, #424]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x200>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	099b      	lsrs	r3, r3, #6
 8002e48:	2200      	movs	r2, #0
 8002e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e56:	2300      	movs	r3, #0
 8002e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e5e:	4622      	mov	r2, r4
 8002e60:	462b      	mov	r3, r5
 8002e62:	f04f 0000 	mov.w	r0, #0
 8002e66:	f04f 0100 	mov.w	r1, #0
 8002e6a:	0159      	lsls	r1, r3, #5
 8002e6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e70:	0150      	lsls	r0, r2, #5
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4621      	mov	r1, r4
 8002e78:	1a51      	subs	r1, r2, r1
 8002e7a:	6139      	str	r1, [r7, #16]
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e90:	4659      	mov	r1, fp
 8002e92:	018b      	lsls	r3, r1, #6
 8002e94:	4651      	mov	r1, sl
 8002e96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e9a:	4651      	mov	r1, sl
 8002e9c:	018a      	lsls	r2, r1, #6
 8002e9e:	4651      	mov	r1, sl
 8002ea0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ea4:	4659      	mov	r1, fp
 8002ea6:	eb63 0901 	sbc.w	r9, r3, r1
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ebe:	4690      	mov	r8, r2
 8002ec0:	4699      	mov	r9, r3
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	eb18 0303 	adds.w	r3, r8, r3
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	462b      	mov	r3, r5
 8002ecc:	eb49 0303 	adc.w	r3, r9, r3
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ede:	4629      	mov	r1, r5
 8002ee0:	024b      	lsls	r3, r1, #9
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ee8:	4621      	mov	r1, r4
 8002eea:	024a      	lsls	r2, r1, #9
 8002eec:	4610      	mov	r0, r2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ef6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ef8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002efc:	f7fd f9d8 	bl	80002b0 <__aeabi_uldivmod>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4613      	mov	r3, r2
 8002f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f08:	e058      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0a:	4b38      	ldr	r3, [pc, #224]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x200>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	099b      	lsrs	r3, r3, #6
 8002f10:	2200      	movs	r2, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	4611      	mov	r1, r2
 8002f16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f1a:	623b      	str	r3, [r7, #32]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f24:	4642      	mov	r2, r8
 8002f26:	464b      	mov	r3, r9
 8002f28:	f04f 0000 	mov.w	r0, #0
 8002f2c:	f04f 0100 	mov.w	r1, #0
 8002f30:	0159      	lsls	r1, r3, #5
 8002f32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f36:	0150      	lsls	r0, r2, #5
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4641      	mov	r1, r8
 8002f3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f42:	4649      	mov	r1, r9
 8002f44:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f5c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f60:	eb63 050b 	sbc.w	r5, r3, fp
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	00eb      	lsls	r3, r5, #3
 8002f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f72:	00e2      	lsls	r2, r4, #3
 8002f74:	4614      	mov	r4, r2
 8002f76:	461d      	mov	r5, r3
 8002f78:	4643      	mov	r3, r8
 8002f7a:	18e3      	adds	r3, r4, r3
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	464b      	mov	r3, r9
 8002f80:	eb45 0303 	adc.w	r3, r5, r3
 8002f84:	607b      	str	r3, [r7, #4]
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f92:	4629      	mov	r1, r5
 8002f94:	028b      	lsls	r3, r1, #10
 8002f96:	4621      	mov	r1, r4
 8002f98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	028a      	lsls	r2, r1, #10
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	61fa      	str	r2, [r7, #28]
 8002fac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fb0:	f7fd f97e 	bl	80002b0 <__aeabi_uldivmod>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4613      	mov	r3, r2
 8002fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x200>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002fcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fd6:	e002      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fd8:	4b05      	ldr	r3, [pc, #20]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3750      	adds	r7, #80	@ 0x50
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	00f42400 	.word	0x00f42400
 8002ff4:	007a1200 	.word	0x007a1200

08002ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ffc:	4b03      	ldr	r3, [pc, #12]	@ (800300c <HAL_RCC_GetHCLKFreq+0x14>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
}
 8003000:	4618      	mov	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000004 	.word	0x20000004

08003010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003014:	f7ff fff0 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8003018:	4602      	mov	r2, r0
 800301a:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	0a9b      	lsrs	r3, r3, #10
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	4903      	ldr	r1, [pc, #12]	@ (8003034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003026:	5ccb      	ldrb	r3, [r1, r3]
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40023800 	.word	0x40023800
 8003034:	08006a74 	.word	0x08006a74

08003038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800303c:	f7ff ffdc 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8003040:	4602      	mov	r2, r0
 8003042:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	0b5b      	lsrs	r3, r3, #13
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	4903      	ldr	r1, [pc, #12]	@ (800305c <HAL_RCC_GetPCLK2Freq+0x24>)
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003054:	4618      	mov	r0, r3
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40023800 	.word	0x40023800
 800305c:	08006a74 	.word	0x08006a74

08003060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e041      	b.n	80030f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fe fc64 	bl	8001954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3304      	adds	r3, #4
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f000 fbd8 	bl	8003854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e041      	b.n	8003194 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d106      	bne.n	800312a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f839 	bl	800319c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2202      	movs	r2, #2
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	4619      	mov	r1, r3
 800313c:	4610      	mov	r0, r2
 800313e:	f000 fb89 	bl	8003854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d109      	bne.n	80031d4 <HAL_TIM_PWM_Start+0x24>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	bf14      	ite	ne
 80031cc:	2301      	movne	r3, #1
 80031ce:	2300      	moveq	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e022      	b.n	800321a <HAL_TIM_PWM_Start+0x6a>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d109      	bne.n	80031ee <HAL_TIM_PWM_Start+0x3e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	e015      	b.n	800321a <HAL_TIM_PWM_Start+0x6a>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d109      	bne.n	8003208 <HAL_TIM_PWM_Start+0x58>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	bf14      	ite	ne
 8003200:	2301      	movne	r3, #1
 8003202:	2300      	moveq	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	e008      	b.n	800321a <HAL_TIM_PWM_Start+0x6a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b01      	cmp	r3, #1
 8003212:	bf14      	ite	ne
 8003214:	2301      	movne	r3, #1
 8003216:	2300      	moveq	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e068      	b.n	80032f4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d104      	bne.n	8003232 <HAL_TIM_PWM_Start+0x82>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003230:	e013      	b.n	800325a <HAL_TIM_PWM_Start+0xaa>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b04      	cmp	r3, #4
 8003236:	d104      	bne.n	8003242 <HAL_TIM_PWM_Start+0x92>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003240:	e00b      	b.n	800325a <HAL_TIM_PWM_Start+0xaa>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d104      	bne.n	8003252 <HAL_TIM_PWM_Start+0xa2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003250:	e003      	b.n	800325a <HAL_TIM_PWM_Start+0xaa>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2202      	movs	r2, #2
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2201      	movs	r2, #1
 8003260:	6839      	ldr	r1, [r7, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fda2 	bl	8003dac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a23      	ldr	r2, [pc, #140]	@ (80032fc <HAL_TIM_PWM_Start+0x14c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d107      	bne.n	8003282 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003280:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1d      	ldr	r2, [pc, #116]	@ (80032fc <HAL_TIM_PWM_Start+0x14c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d018      	beq.n	80032be <HAL_TIM_PWM_Start+0x10e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003294:	d013      	beq.n	80032be <HAL_TIM_PWM_Start+0x10e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a19      	ldr	r2, [pc, #100]	@ (8003300 <HAL_TIM_PWM_Start+0x150>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d00e      	beq.n	80032be <HAL_TIM_PWM_Start+0x10e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a17      	ldr	r2, [pc, #92]	@ (8003304 <HAL_TIM_PWM_Start+0x154>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d009      	beq.n	80032be <HAL_TIM_PWM_Start+0x10e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a16      	ldr	r2, [pc, #88]	@ (8003308 <HAL_TIM_PWM_Start+0x158>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d004      	beq.n	80032be <HAL_TIM_PWM_Start+0x10e>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a14      	ldr	r2, [pc, #80]	@ (800330c <HAL_TIM_PWM_Start+0x15c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d111      	bne.n	80032e2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2b06      	cmp	r3, #6
 80032ce:	d010      	beq.n	80032f2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e0:	e007      	b.n	80032f2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0201 	orr.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40010000 	.word	0x40010000
 8003300:	40000400 	.word	0x40000400
 8003304:	40000800 	.word	0x40000800
 8003308:	40000c00 	.word	0x40000c00
 800330c:	40014000 	.word	0x40014000

08003310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d020      	beq.n	8003374 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01b      	beq.n	8003374 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0202 	mvn.w	r2, #2
 8003344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fa5b 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 8003360:	e005      	b.n	800336e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fa4d 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 fa5e 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b00      	cmp	r3, #0
 800337c:	d020      	beq.n	80033c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01b      	beq.n	80033c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0204 	mvn.w	r2, #4
 8003390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2202      	movs	r2, #2
 8003396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fa35 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fa27 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fa38 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d020      	beq.n	800340c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d01b      	beq.n	800340c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0208 	mvn.w	r2, #8
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2204      	movs	r2, #4
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fa0f 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fa01 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fa12 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	d020      	beq.n	8003458 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01b      	beq.n	8003458 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0210 	mvn.w	r2, #16
 8003428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2208      	movs	r2, #8
 800342e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f9e9 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 8003444:	e005      	b.n	8003452 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f9db 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f9ec 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00c      	beq.n	800347c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d007      	beq.n	800347c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0201 	mvn.w	r2, #1
 8003474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fe f9c4 	bl	8001804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00c      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348c:	2b00      	cmp	r3, #0
 800348e:	d007      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fd76 	bl	8003f8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00c      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f9bd 	bl	800383e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00c      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0220 	mvn.w	r2, #32
 80034e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fd48 	bl	8003f78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034e8:	bf00      	nop
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800350a:	2302      	movs	r3, #2
 800350c:	e0ae      	b.n	800366c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b0c      	cmp	r3, #12
 800351a:	f200 809f 	bhi.w	800365c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800351e:	a201      	add	r2, pc, #4	@ (adr r2, 8003524 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	08003559 	.word	0x08003559
 8003528:	0800365d 	.word	0x0800365d
 800352c:	0800365d 	.word	0x0800365d
 8003530:	0800365d 	.word	0x0800365d
 8003534:	08003599 	.word	0x08003599
 8003538:	0800365d 	.word	0x0800365d
 800353c:	0800365d 	.word	0x0800365d
 8003540:	0800365d 	.word	0x0800365d
 8003544:	080035db 	.word	0x080035db
 8003548:	0800365d 	.word	0x0800365d
 800354c:	0800365d 	.word	0x0800365d
 8003550:	0800365d 	.word	0x0800365d
 8003554:	0800361b 	.word	0x0800361b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 f9fe 	bl	8003960 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0208 	orr.w	r2, r2, #8
 8003572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0204 	bic.w	r2, r2, #4
 8003582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6999      	ldr	r1, [r3, #24]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	619a      	str	r2, [r3, #24]
      break;
 8003596:	e064      	b.n	8003662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fa44 	bl	8003a2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6999      	ldr	r1, [r3, #24]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	021a      	lsls	r2, r3, #8
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	619a      	str	r2, [r3, #24]
      break;
 80035d8:	e043      	b.n	8003662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68b9      	ldr	r1, [r7, #8]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fa8f 	bl	8003b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0208 	orr.w	r2, r2, #8
 80035f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69da      	ldr	r2, [r3, #28]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0204 	bic.w	r2, r2, #4
 8003604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69d9      	ldr	r1, [r3, #28]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	61da      	str	r2, [r3, #28]
      break;
 8003618:	e023      	b.n	8003662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fad9 	bl	8003bd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69d9      	ldr	r1, [r3, #28]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	021a      	lsls	r2, r3, #8
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	61da      	str	r2, [r3, #28]
      break;
 800365a:	e002      	b.n	8003662 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	75fb      	strb	r3, [r7, #23]
      break;
 8003660:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800366a:	7dfb      	ldrb	r3, [r7, #23]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_TIM_ConfigClockSource+0x1c>
 800368c:	2302      	movs	r3, #2
 800368e:	e0b4      	b.n	80037fa <HAL_TIM_ConfigClockSource+0x186>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036c8:	d03e      	beq.n	8003748 <HAL_TIM_ConfigClockSource+0xd4>
 80036ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ce:	f200 8087 	bhi.w	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036d6:	f000 8086 	beq.w	80037e6 <HAL_TIM_ConfigClockSource+0x172>
 80036da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036de:	d87f      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e0:	2b70      	cmp	r3, #112	@ 0x70
 80036e2:	d01a      	beq.n	800371a <HAL_TIM_ConfigClockSource+0xa6>
 80036e4:	2b70      	cmp	r3, #112	@ 0x70
 80036e6:	d87b      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e8:	2b60      	cmp	r3, #96	@ 0x60
 80036ea:	d050      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x11a>
 80036ec:	2b60      	cmp	r3, #96	@ 0x60
 80036ee:	d877      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f0:	2b50      	cmp	r3, #80	@ 0x50
 80036f2:	d03c      	beq.n	800376e <HAL_TIM_ConfigClockSource+0xfa>
 80036f4:	2b50      	cmp	r3, #80	@ 0x50
 80036f6:	d873      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f8:	2b40      	cmp	r3, #64	@ 0x40
 80036fa:	d058      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x13a>
 80036fc:	2b40      	cmp	r3, #64	@ 0x40
 80036fe:	d86f      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003700:	2b30      	cmp	r3, #48	@ 0x30
 8003702:	d064      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003704:	2b30      	cmp	r3, #48	@ 0x30
 8003706:	d86b      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003708:	2b20      	cmp	r3, #32
 800370a:	d060      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 800370c:	2b20      	cmp	r3, #32
 800370e:	d867      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003710:	2b00      	cmp	r3, #0
 8003712:	d05c      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003714:	2b10      	cmp	r3, #16
 8003716:	d05a      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003718:	e062      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800372a:	f000 fb1f 	bl	8003d6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800373c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	609a      	str	r2, [r3, #8]
      break;
 8003746:	e04f      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003758:	f000 fb08 	bl	8003d6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800376a:	609a      	str	r2, [r3, #8]
      break;
 800376c:	e03c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800377a:	461a      	mov	r2, r3
 800377c:	f000 fa7c 	bl	8003c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2150      	movs	r1, #80	@ 0x50
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fad5 	bl	8003d36 <TIM_ITRx_SetConfig>
      break;
 800378c:	e02c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800379a:	461a      	mov	r2, r3
 800379c:	f000 fa9b 	bl	8003cd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2160      	movs	r1, #96	@ 0x60
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fac5 	bl	8003d36 <TIM_ITRx_SetConfig>
      break;
 80037ac:	e01c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ba:	461a      	mov	r2, r3
 80037bc:	f000 fa5c 	bl	8003c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2140      	movs	r1, #64	@ 0x40
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fab5 	bl	8003d36 <TIM_ITRx_SetConfig>
      break;
 80037cc:	e00c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f000 faac 	bl	8003d36 <TIM_ITRx_SetConfig>
      break;
 80037de:	e003      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      break;
 80037e4:	e000      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a37      	ldr	r2, [pc, #220]	@ (8003944 <TIM_Base_SetConfig+0xf0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00f      	beq.n	800388c <TIM_Base_SetConfig+0x38>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003872:	d00b      	beq.n	800388c <TIM_Base_SetConfig+0x38>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a34      	ldr	r2, [pc, #208]	@ (8003948 <TIM_Base_SetConfig+0xf4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d007      	beq.n	800388c <TIM_Base_SetConfig+0x38>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a33      	ldr	r2, [pc, #204]	@ (800394c <TIM_Base_SetConfig+0xf8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d003      	beq.n	800388c <TIM_Base_SetConfig+0x38>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a32      	ldr	r2, [pc, #200]	@ (8003950 <TIM_Base_SetConfig+0xfc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d108      	bne.n	800389e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a28      	ldr	r2, [pc, #160]	@ (8003944 <TIM_Base_SetConfig+0xf0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01b      	beq.n	80038de <TIM_Base_SetConfig+0x8a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ac:	d017      	beq.n	80038de <TIM_Base_SetConfig+0x8a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a25      	ldr	r2, [pc, #148]	@ (8003948 <TIM_Base_SetConfig+0xf4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <TIM_Base_SetConfig+0x8a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a24      	ldr	r2, [pc, #144]	@ (800394c <TIM_Base_SetConfig+0xf8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00f      	beq.n	80038de <TIM_Base_SetConfig+0x8a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a23      	ldr	r2, [pc, #140]	@ (8003950 <TIM_Base_SetConfig+0xfc>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00b      	beq.n	80038de <TIM_Base_SetConfig+0x8a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a22      	ldr	r2, [pc, #136]	@ (8003954 <TIM_Base_SetConfig+0x100>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d007      	beq.n	80038de <TIM_Base_SetConfig+0x8a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a21      	ldr	r2, [pc, #132]	@ (8003958 <TIM_Base_SetConfig+0x104>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d003      	beq.n	80038de <TIM_Base_SetConfig+0x8a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a20      	ldr	r2, [pc, #128]	@ (800395c <TIM_Base_SetConfig+0x108>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d108      	bne.n	80038f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a0c      	ldr	r2, [pc, #48]	@ (8003944 <TIM_Base_SetConfig+0xf0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d103      	bne.n	800391e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f043 0204 	orr.w	r2, r3, #4
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	601a      	str	r2, [r3, #0]
}
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40010000 	.word	0x40010000
 8003948:	40000400 	.word	0x40000400
 800394c:	40000800 	.word	0x40000800
 8003950:	40000c00 	.word	0x40000c00
 8003954:	40014000 	.word	0x40014000
 8003958:	40014400 	.word	0x40014400
 800395c:	40014800 	.word	0x40014800

08003960 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f023 0201 	bic.w	r2, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800398e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0303 	bic.w	r3, r3, #3
 8003996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f023 0302 	bic.w	r3, r3, #2
 80039a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a28 <TIM_OC1_SetConfig+0xc8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d10c      	bne.n	80039d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f023 0308 	bic.w	r3, r3, #8
 80039c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f023 0304 	bic.w	r3, r3, #4
 80039d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a13      	ldr	r2, [pc, #76]	@ (8003a28 <TIM_OC1_SetConfig+0xc8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d111      	bne.n	8003a02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	621a      	str	r2, [r3, #32]
}
 8003a1c:	bf00      	nop
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	40010000 	.word	0x40010000

08003a2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f023 0210 	bic.w	r2, r3, #16
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f023 0320 	bic.w	r3, r3, #32
 8003a76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a1e      	ldr	r2, [pc, #120]	@ (8003b00 <TIM_OC2_SetConfig+0xd4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d10d      	bne.n	8003aa8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aa6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a15      	ldr	r2, [pc, #84]	@ (8003b00 <TIM_OC2_SetConfig+0xd4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d113      	bne.n	8003ad8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ab6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003abe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	621a      	str	r2, [r3, #32]
}
 8003af2:	bf00      	nop
 8003af4:	371c      	adds	r7, #28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40010000 	.word	0x40010000

08003b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0303 	bic.w	r3, r3, #3
 8003b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd4 <TIM_OC3_SetConfig+0xd0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d10d      	bne.n	8003b7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a14      	ldr	r2, [pc, #80]	@ (8003bd4 <TIM_OC3_SetConfig+0xd0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d113      	bne.n	8003bae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	621a      	str	r2, [r3, #32]
}
 8003bc8:	bf00      	nop
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	40010000 	.word	0x40010000

08003bd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	031b      	lsls	r3, r3, #12
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a10      	ldr	r2, [pc, #64]	@ (8003c74 <TIM_OC4_SetConfig+0x9c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d109      	bne.n	8003c4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	019b      	lsls	r3, r3, #6
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	621a      	str	r2, [r3, #32]
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40010000 	.word	0x40010000

08003c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f023 0201 	bic.w	r2, r3, #1
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f023 030a 	bic.w	r3, r3, #10
 8003cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	621a      	str	r2, [r3, #32]
}
 8003cca:	bf00      	nop
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b087      	sub	sp, #28
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	f023 0210 	bic.w	r2, r3, #16
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	031b      	lsls	r3, r3, #12
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	621a      	str	r2, [r3, #32]
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b085      	sub	sp, #20
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f043 0307 	orr.w	r3, r3, #7
 8003d58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	609a      	str	r2, [r3, #8]
}
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	021a      	lsls	r2, r3, #8
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	609a      	str	r2, [r3, #8]
}
 8003da0:	bf00      	nop
 8003da2:	371c      	adds	r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a1a      	ldr	r2, [r3, #32]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	401a      	ands	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a1a      	ldr	r2, [r3, #32]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	fa01 f303 	lsl.w	r3, r1, r3
 8003de4:	431a      	orrs	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
	...

08003df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e050      	b.n	8003eb2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d018      	beq.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e5c:	d013      	beq.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a18      	ldr	r2, [pc, #96]	@ (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d00e      	beq.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a16      	ldr	r2, [pc, #88]	@ (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d009      	beq.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a15      	ldr	r2, [pc, #84]	@ (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d004      	beq.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a13      	ldr	r2, [pc, #76]	@ (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d10c      	bne.n	8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40010000 	.word	0x40010000
 8003ec4:	40000400 	.word	0x40000400
 8003ec8:	40000800 	.word	0x40000800
 8003ecc:	40000c00 	.word	0x40000c00
 8003ed0:	40014000 	.word	0x40014000

08003ed4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e03d      	b.n	8003f6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e042      	b.n	8004038 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fd fda8 	bl	8001b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2224      	movs	r2, #36	@ 0x24
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fe2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 fdd3 	bl	8004b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ff8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004008:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004018:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08a      	sub	sp, #40	@ 0x28
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	4613      	mov	r3, r2
 800404e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b20      	cmp	r3, #32
 800405e:	d175      	bne.n	800414c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_UART_Transmit+0x2c>
 8004066:	88fb      	ldrh	r3, [r7, #6]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e06e      	b.n	800414e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2221      	movs	r2, #33	@ 0x21
 800407a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800407e:	f7fd ffa9 	bl	8001fd4 <HAL_GetTick>
 8004082:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	88fa      	ldrh	r2, [r7, #6]
 8004088:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	88fa      	ldrh	r2, [r7, #6]
 800408e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004098:	d108      	bne.n	80040ac <HAL_UART_Transmit+0x6c>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d104      	bne.n	80040ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	e003      	b.n	80040b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040b4:	e02e      	b.n	8004114 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2200      	movs	r2, #0
 80040be:	2180      	movs	r1, #128	@ 0x80
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 fb37 	bl	8004734 <UART_WaitOnFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d005      	beq.n	80040d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e03a      	b.n	800414e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10b      	bne.n	80040f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	3302      	adds	r3, #2
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	e007      	b.n	8004106 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	781a      	ldrb	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	3301      	adds	r3, #1
 8004104:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1cb      	bne.n	80040b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2200      	movs	r2, #0
 8004126:	2140      	movs	r1, #64	@ 0x40
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 fb03 	bl	8004734 <UART_WaitOnFlagUntilTimeout>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e006      	b.n	800414e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	e000      	b.n	800414e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800414c:	2302      	movs	r3, #2
  }
}
 800414e:	4618      	mov	r0, r3
 8004150:	3720      	adds	r7, #32
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b084      	sub	sp, #16
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	4613      	mov	r3, r2
 8004162:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b20      	cmp	r3, #32
 800416e:	d112      	bne.n	8004196 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_UART_Receive_IT+0x26>
 8004176:	88fb      	ldrh	r3, [r7, #6]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e00b      	b.n	8004198 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	461a      	mov	r2, r3
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 fb2a 	bl	80047e6 <UART_Start_Receive_IT>
 8004192:	4603      	mov	r3, r0
 8004194:	e000      	b.n	8004198 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004196:	2302      	movs	r3, #2
  }
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b0ba      	sub	sp, #232	@ 0xe8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80041de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10f      	bne.n	8004206 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <HAL_UART_IRQHandler+0x66>
 80041f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fc07 	bl	8004a12 <UART_Receive_IT>
      return;
 8004204:	e273      	b.n	80046ee <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004206:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80de 	beq.w	80043cc <HAL_UART_IRQHandler+0x22c>
 8004210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d106      	bne.n	800422a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800421c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004220:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 80d1 	beq.w	80043cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <HAL_UART_IRQHandler+0xae>
 8004236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800423a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004246:	f043 0201 	orr.w	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800424e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00b      	beq.n	8004272 <HAL_UART_IRQHandler+0xd2>
 800425a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426a:	f043 0202 	orr.w	r2, r3, #2
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00b      	beq.n	8004296 <HAL_UART_IRQHandler+0xf6>
 800427e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428e:	f043 0204 	orr.w	r2, r3, #4
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d011      	beq.n	80042c6 <HAL_UART_IRQHandler+0x126>
 80042a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d105      	bne.n	80042ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042be:	f043 0208 	orr.w	r2, r3, #8
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 820a 	beq.w	80046e4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <HAL_UART_IRQHandler+0x14e>
 80042dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fb92 	bl	8004a12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f8:	2b40      	cmp	r3, #64	@ 0x40
 80042fa:	bf0c      	ite	eq
 80042fc:	2301      	moveq	r3, #1
 80042fe:	2300      	movne	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <HAL_UART_IRQHandler+0x17a>
 8004312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004316:	2b00      	cmp	r3, #0
 8004318:	d04f      	beq.n	80043ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fa9d 	bl	800485a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800432a:	2b40      	cmp	r3, #64	@ 0x40
 800432c:	d141      	bne.n	80043b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3314      	adds	r3, #20
 8004334:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004344:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004348:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800434c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3314      	adds	r3, #20
 8004356:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800435a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800435e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004362:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004366:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1d9      	bne.n	800432e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437e:	2b00      	cmp	r3, #0
 8004380:	d013      	beq.n	80043aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004386:	4a8a      	ldr	r2, [pc, #552]	@ (80045b0 <HAL_UART_IRQHandler+0x410>)
 8004388:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438e:	4618      	mov	r0, r3
 8004390:	f7fd ffd1 	bl	8002336 <HAL_DMA_Abort_IT>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d016      	beq.n	80043c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80043a4:	4610      	mov	r0, r2
 80043a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a8:	e00e      	b.n	80043c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f9ac 	bl	8004708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b0:	e00a      	b.n	80043c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f9a8 	bl	8004708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b8:	e006      	b.n	80043c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f9a4 	bl	8004708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80043c6:	e18d      	b.n	80046e4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c8:	bf00      	nop
    return;
 80043ca:	e18b      	b.n	80046e4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	f040 8167 	bne.w	80046a4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 8160 	beq.w	80046a4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80043e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8159 	beq.w	80046a4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043f2:	2300      	movs	r3, #0
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004412:	2b40      	cmp	r3, #64	@ 0x40
 8004414:	f040 80ce 	bne.w	80045b4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004424:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 80a9 	beq.w	8004580 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004432:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004436:	429a      	cmp	r2, r3
 8004438:	f080 80a2 	bcs.w	8004580 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004442:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800444e:	f000 8088 	beq.w	8004562 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	330c      	adds	r3, #12
 8004458:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004468:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800446c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004470:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800447e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004482:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004486:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800448a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004496:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1d9      	bne.n	8004452 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3314      	adds	r3, #20
 80044a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044a8:	e853 3f00 	ldrex	r3, [r3]
 80044ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3314      	adds	r3, #20
 80044be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e1      	bne.n	800449e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3314      	adds	r3, #20
 80044e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3314      	adds	r3, #20
 80044fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004500:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004504:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800450c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e3      	bne.n	80044da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	330c      	adds	r3, #12
 8004526:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004530:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004532:	f023 0310 	bic.w	r3, r3, #16
 8004536:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	330c      	adds	r3, #12
 8004540:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004544:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004546:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800454a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e3      	bne.n	8004520 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455c:	4618      	mov	r0, r3
 800455e:	f7fd fe7a 	bl	8002256 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2202      	movs	r2, #2
 8004566:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004570:	b29b      	uxth	r3, r3
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	b29b      	uxth	r3, r3
 8004576:	4619      	mov	r1, r3
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f8cf 	bl	800471c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800457e:	e0b3      	b.n	80046e8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004584:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004588:	429a      	cmp	r2, r3
 800458a:	f040 80ad 	bne.w	80046e8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004598:	f040 80a6 	bne.w	80046e8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045a6:	4619      	mov	r1, r3
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f8b7 	bl	800471c <HAL_UARTEx_RxEventCallback>
      return;
 80045ae:	e09b      	b.n	80046e8 <HAL_UART_IRQHandler+0x548>
 80045b0:	08004921 	.word	0x08004921
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045bc:	b29b      	uxth	r3, r3
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 808e 	beq.w	80046ec <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80045d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 8089 	beq.w	80046ec <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	330c      	adds	r3, #12
 80045e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	330c      	adds	r3, #12
 80045fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80045fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8004600:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004604:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800460c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e3      	bne.n	80045da <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3314      	adds	r3, #20
 8004618:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	e853 3f00 	ldrex	r3, [r3]
 8004620:	623b      	str	r3, [r7, #32]
   return(result);
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	f023 0301 	bic.w	r3, r3, #1
 8004628:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3314      	adds	r3, #20
 8004632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004636:	633a      	str	r2, [r7, #48]	@ 0x30
 8004638:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800463c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e3      	bne.n	8004612 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	330c      	adds	r3, #12
 800465e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	e853 3f00 	ldrex	r3, [r3]
 8004666:	60fb      	str	r3, [r7, #12]
   return(result);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0310 	bic.w	r3, r3, #16
 800466e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	330c      	adds	r3, #12
 8004678:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800467c:	61fa      	str	r2, [r7, #28]
 800467e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	69b9      	ldr	r1, [r7, #24]
 8004682:	69fa      	ldr	r2, [r7, #28]
 8004684:	e841 2300 	strex	r3, r2, [r1]
 8004688:	617b      	str	r3, [r7, #20]
   return(result);
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1e3      	bne.n	8004658 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004696:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800469a:	4619      	mov	r1, r3
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f83d 	bl	800471c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046a2:	e023      	b.n	80046ec <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d009      	beq.n	80046c4 <HAL_UART_IRQHandler+0x524>
 80046b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f940 	bl	8004942 <UART_Transmit_IT>
    return;
 80046c2:	e014      	b.n	80046ee <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00e      	beq.n	80046ee <HAL_UART_IRQHandler+0x54e>
 80046d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f980 	bl	80049e2 <UART_EndTransmit_IT>
    return;
 80046e2:	e004      	b.n	80046ee <HAL_UART_IRQHandler+0x54e>
    return;
 80046e4:	bf00      	nop
 80046e6:	e002      	b.n	80046ee <HAL_UART_IRQHandler+0x54e>
      return;
 80046e8:	bf00      	nop
 80046ea:	e000      	b.n	80046ee <HAL_UART_IRQHandler+0x54e>
      return;
 80046ec:	bf00      	nop
  }
}
 80046ee:	37e8      	adds	r7, #232	@ 0xe8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	4613      	mov	r3, r2
 8004742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004744:	e03b      	b.n	80047be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d037      	beq.n	80047be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474e:	f7fd fc41 	bl	8001fd4 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	6a3a      	ldr	r2, [r7, #32]
 800475a:	429a      	cmp	r2, r3
 800475c:	d302      	bcc.n	8004764 <UART_WaitOnFlagUntilTimeout+0x30>
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e03a      	b.n	80047de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b00      	cmp	r3, #0
 8004774:	d023      	beq.n	80047be <UART_WaitOnFlagUntilTimeout+0x8a>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b80      	cmp	r3, #128	@ 0x80
 800477a:	d020      	beq.n	80047be <UART_WaitOnFlagUntilTimeout+0x8a>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b40      	cmp	r3, #64	@ 0x40
 8004780:	d01d      	beq.n	80047be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b08      	cmp	r3, #8
 800478e:	d116      	bne.n	80047be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f857 	bl	800485a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2208      	movs	r2, #8
 80047b0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e00f      	b.n	80047de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4013      	ands	r3, r2
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	bf0c      	ite	eq
 80047ce:	2301      	moveq	r3, #1
 80047d0:	2300      	movne	r3, #0
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d0b4      	beq.n	8004746 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b085      	sub	sp, #20
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	4613      	mov	r3, r2
 80047f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	88fa      	ldrh	r2, [r7, #6]
 80047fe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2222      	movs	r2, #34	@ 0x22
 8004810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d007      	beq.n	800482c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800482a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695a      	ldr	r2, [r3, #20]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0220 	orr.w	r2, r2, #32
 800484a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800485a:	b480      	push	{r7}
 800485c:	b095      	sub	sp, #84	@ 0x54
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	330c      	adds	r3, #12
 8004868:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004874:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004878:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	330c      	adds	r3, #12
 8004880:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004882:	643a      	str	r2, [r7, #64]	@ 0x40
 8004884:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004888:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e5      	bne.n	8004862 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3314      	adds	r3, #20
 800489c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3314      	adds	r3, #20
 80048b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e5      	bne.n	8004896 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d119      	bne.n	8004906 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	330c      	adds	r3, #12
 80048d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	e853 3f00 	ldrex	r3, [r3]
 80048e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f023 0310 	bic.w	r3, r3, #16
 80048e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	330c      	adds	r3, #12
 80048f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048f2:	61ba      	str	r2, [r7, #24]
 80048f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6979      	ldr	r1, [r7, #20]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e5      	bne.n	80048d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004914:	bf00      	nop
 8004916:	3754      	adds	r7, #84	@ 0x54
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f7ff fee7 	bl	8004708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004942:	b480      	push	{r7}
 8004944:	b085      	sub	sp, #20
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b21      	cmp	r3, #33	@ 0x21
 8004954:	d13e      	bne.n	80049d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800495e:	d114      	bne.n	800498a <UART_Transmit_IT+0x48>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d110      	bne.n	800498a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800497c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	1c9a      	adds	r2, r3, #2
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	621a      	str	r2, [r3, #32]
 8004988:	e008      	b.n	800499c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	1c59      	adds	r1, r3, #1
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6211      	str	r1, [r2, #32]
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	4619      	mov	r1, r3
 80049aa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10f      	bne.n	80049d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	e000      	b.n	80049d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
  }
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff fe76 	bl	80046f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b08c      	sub	sp, #48	@ 0x30
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b22      	cmp	r3, #34	@ 0x22
 8004a2c:	f040 80aa 	bne.w	8004b84 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a38:	d115      	bne.n	8004a66 <UART_Receive_IT+0x54>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d111      	bne.n	8004a66 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a46:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5e:	1c9a      	adds	r2, r3, #2
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a64:	e024      	b.n	8004ab0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a74:	d007      	beq.n	8004a86 <UART_Receive_IT+0x74>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10a      	bne.n	8004a94 <UART_Receive_IT+0x82>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d106      	bne.n	8004a94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	e008      	b.n	8004aa6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	4619      	mov	r1, r3
 8004abe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d15d      	bne.n	8004b80 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0220 	bic.w	r2, r2, #32
 8004ad2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0201 	bic.w	r2, r2, #1
 8004af2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d135      	bne.n	8004b76 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	330c      	adds	r3, #12
 8004b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f023 0310 	bic.w	r3, r3, #16
 8004b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b30:	623a      	str	r2, [r7, #32]
 8004b32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	69f9      	ldr	r1, [r7, #28]
 8004b36:	6a3a      	ldr	r2, [r7, #32]
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e5      	bne.n	8004b10 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0310 	and.w	r3, r3, #16
 8004b4e:	2b10      	cmp	r3, #16
 8004b50:	d10a      	bne.n	8004b68 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff fdd4 	bl	800471c <HAL_UARTEx_RxEventCallback>
 8004b74:	e002      	b.n	8004b7c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fc f86c 	bl	8000c54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	e002      	b.n	8004b86 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	e000      	b.n	8004b86 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b84:	2302      	movs	r3, #2
  }
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3730      	adds	r7, #48	@ 0x30
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b94:	b0c0      	sub	sp, #256	@ 0x100
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bac:	68d9      	ldr	r1, [r3, #12]
 8004bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	ea40 0301 	orr.w	r3, r0, r1
 8004bb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004be8:	f021 010c 	bic.w	r1, r1, #12
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0a:	6999      	ldr	r1, [r3, #24]
 8004c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	ea40 0301 	orr.w	r3, r0, r1
 8004c16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4b8f      	ldr	r3, [pc, #572]	@ (8004e5c <UART_SetConfig+0x2cc>)
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d005      	beq.n	8004c30 <UART_SetConfig+0xa0>
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4b8d      	ldr	r3, [pc, #564]	@ (8004e60 <UART_SetConfig+0x2d0>)
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d104      	bne.n	8004c3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c30:	f7fe fa02 	bl	8003038 <HAL_RCC_GetPCLK2Freq>
 8004c34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c38:	e003      	b.n	8004c42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c3a:	f7fe f9e9 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 8004c3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c4c:	f040 810c 	bne.w	8004e68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c54:	2200      	movs	r2, #0
 8004c56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c62:	4622      	mov	r2, r4
 8004c64:	462b      	mov	r3, r5
 8004c66:	1891      	adds	r1, r2, r2
 8004c68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c6a:	415b      	adcs	r3, r3
 8004c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c72:	4621      	mov	r1, r4
 8004c74:	eb12 0801 	adds.w	r8, r2, r1
 8004c78:	4629      	mov	r1, r5
 8004c7a:	eb43 0901 	adc.w	r9, r3, r1
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c92:	4690      	mov	r8, r2
 8004c94:	4699      	mov	r9, r3
 8004c96:	4623      	mov	r3, r4
 8004c98:	eb18 0303 	adds.w	r3, r8, r3
 8004c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ca0:	462b      	mov	r3, r5
 8004ca2:	eb49 0303 	adc.w	r3, r9, r3
 8004ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004cba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	18db      	adds	r3, r3, r3
 8004cc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	eb42 0303 	adc.w	r3, r2, r3
 8004cca:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ccc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004cd4:	f7fb faec 	bl	80002b0 <__aeabi_uldivmod>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4b61      	ldr	r3, [pc, #388]	@ (8004e64 <UART_SetConfig+0x2d4>)
 8004cde:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce2:	095b      	lsrs	r3, r3, #5
 8004ce4:	011c      	lsls	r4, r3, #4
 8004ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cea:	2200      	movs	r2, #0
 8004cec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cf0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	1891      	adds	r1, r2, r2
 8004cfe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d00:	415b      	adcs	r3, r3
 8004d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d08:	4641      	mov	r1, r8
 8004d0a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d0e:	4649      	mov	r1, r9
 8004d10:	eb43 0b01 	adc.w	fp, r3, r1
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d28:	4692      	mov	sl, r2
 8004d2a:	469b      	mov	fp, r3
 8004d2c:	4643      	mov	r3, r8
 8004d2e:	eb1a 0303 	adds.w	r3, sl, r3
 8004d32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d36:	464b      	mov	r3, r9
 8004d38:	eb4b 0303 	adc.w	r3, fp, r3
 8004d3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d54:	460b      	mov	r3, r1
 8004d56:	18db      	adds	r3, r3, r3
 8004d58:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	eb42 0303 	adc.w	r3, r2, r3
 8004d60:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d6a:	f7fb faa1 	bl	80002b0 <__aeabi_uldivmod>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4611      	mov	r1, r2
 8004d74:	4b3b      	ldr	r3, [pc, #236]	@ (8004e64 <UART_SetConfig+0x2d4>)
 8004d76:	fba3 2301 	umull	r2, r3, r3, r1
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	2264      	movs	r2, #100	@ 0x64
 8004d7e:	fb02 f303 	mul.w	r3, r2, r3
 8004d82:	1acb      	subs	r3, r1, r3
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d8a:	4b36      	ldr	r3, [pc, #216]	@ (8004e64 <UART_SetConfig+0x2d4>)
 8004d8c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d98:	441c      	add	r4, r3
 8004d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004da4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004da8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004dac:	4642      	mov	r2, r8
 8004dae:	464b      	mov	r3, r9
 8004db0:	1891      	adds	r1, r2, r2
 8004db2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004db4:	415b      	adcs	r3, r3
 8004db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004db8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004dbc:	4641      	mov	r1, r8
 8004dbe:	1851      	adds	r1, r2, r1
 8004dc0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	414b      	adcs	r3, r1
 8004dc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004dd4:	4659      	mov	r1, fp
 8004dd6:	00cb      	lsls	r3, r1, #3
 8004dd8:	4651      	mov	r1, sl
 8004dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dde:	4651      	mov	r1, sl
 8004de0:	00ca      	lsls	r2, r1, #3
 8004de2:	4610      	mov	r0, r2
 8004de4:	4619      	mov	r1, r3
 8004de6:	4603      	mov	r3, r0
 8004de8:	4642      	mov	r2, r8
 8004dea:	189b      	adds	r3, r3, r2
 8004dec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004df0:	464b      	mov	r3, r9
 8004df2:	460a      	mov	r2, r1
 8004df4:	eb42 0303 	adc.w	r3, r2, r3
 8004df8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e10:	460b      	mov	r3, r1
 8004e12:	18db      	adds	r3, r3, r3
 8004e14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e16:	4613      	mov	r3, r2
 8004e18:	eb42 0303 	adc.w	r3, r2, r3
 8004e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e26:	f7fb fa43 	bl	80002b0 <__aeabi_uldivmod>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e64 <UART_SetConfig+0x2d4>)
 8004e30:	fba3 1302 	umull	r1, r3, r3, r2
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	2164      	movs	r1, #100	@ 0x64
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	3332      	adds	r3, #50	@ 0x32
 8004e42:	4a08      	ldr	r2, [pc, #32]	@ (8004e64 <UART_SetConfig+0x2d4>)
 8004e44:	fba2 2303 	umull	r2, r3, r2, r3
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	f003 0207 	and.w	r2, r3, #7
 8004e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4422      	add	r2, r4
 8004e56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e58:	e106      	b.n	8005068 <UART_SetConfig+0x4d8>
 8004e5a:	bf00      	nop
 8004e5c:	40011000 	.word	0x40011000
 8004e60:	40011400 	.word	0x40011400
 8004e64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e7a:	4642      	mov	r2, r8
 8004e7c:	464b      	mov	r3, r9
 8004e7e:	1891      	adds	r1, r2, r2
 8004e80:	6239      	str	r1, [r7, #32]
 8004e82:	415b      	adcs	r3, r3
 8004e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e8a:	4641      	mov	r1, r8
 8004e8c:	1854      	adds	r4, r2, r1
 8004e8e:	4649      	mov	r1, r9
 8004e90:	eb43 0501 	adc.w	r5, r3, r1
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	00eb      	lsls	r3, r5, #3
 8004e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ea2:	00e2      	lsls	r2, r4, #3
 8004ea4:	4614      	mov	r4, r2
 8004ea6:	461d      	mov	r5, r3
 8004ea8:	4643      	mov	r3, r8
 8004eaa:	18e3      	adds	r3, r4, r3
 8004eac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	eb45 0303 	adc.w	r3, r5, r3
 8004eb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ec6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	f04f 0300 	mov.w	r3, #0
 8004ed2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	008b      	lsls	r3, r1, #2
 8004eda:	4621      	mov	r1, r4
 8004edc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	008a      	lsls	r2, r1, #2
 8004ee4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ee8:	f7fb f9e2 	bl	80002b0 <__aeabi_uldivmod>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4b60      	ldr	r3, [pc, #384]	@ (8005074 <UART_SetConfig+0x4e4>)
 8004ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	011c      	lsls	r4, r3, #4
 8004efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	464b      	mov	r3, r9
 8004f10:	1891      	adds	r1, r2, r2
 8004f12:	61b9      	str	r1, [r7, #24]
 8004f14:	415b      	adcs	r3, r3
 8004f16:	61fb      	str	r3, [r7, #28]
 8004f18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f1c:	4641      	mov	r1, r8
 8004f1e:	1851      	adds	r1, r2, r1
 8004f20:	6139      	str	r1, [r7, #16]
 8004f22:	4649      	mov	r1, r9
 8004f24:	414b      	adcs	r3, r1
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f34:	4659      	mov	r1, fp
 8004f36:	00cb      	lsls	r3, r1, #3
 8004f38:	4651      	mov	r1, sl
 8004f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f3e:	4651      	mov	r1, sl
 8004f40:	00ca      	lsls	r2, r1, #3
 8004f42:	4610      	mov	r0, r2
 8004f44:	4619      	mov	r1, r3
 8004f46:	4603      	mov	r3, r0
 8004f48:	4642      	mov	r2, r8
 8004f4a:	189b      	adds	r3, r3, r2
 8004f4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f50:	464b      	mov	r3, r9
 8004f52:	460a      	mov	r2, r1
 8004f54:	eb42 0303 	adc.w	r3, r2, r3
 8004f58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f74:	4649      	mov	r1, r9
 8004f76:	008b      	lsls	r3, r1, #2
 8004f78:	4641      	mov	r1, r8
 8004f7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f7e:	4641      	mov	r1, r8
 8004f80:	008a      	lsls	r2, r1, #2
 8004f82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f86:	f7fb f993 	bl	80002b0 <__aeabi_uldivmod>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4b38      	ldr	r3, [pc, #224]	@ (8005074 <UART_SetConfig+0x4e4>)
 8004f92:	fba3 2301 	umull	r2, r3, r3, r1
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	2264      	movs	r2, #100	@ 0x64
 8004f9a:	fb02 f303 	mul.w	r3, r2, r3
 8004f9e:	1acb      	subs	r3, r1, r3
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	3332      	adds	r3, #50	@ 0x32
 8004fa4:	4a33      	ldr	r2, [pc, #204]	@ (8005074 <UART_SetConfig+0x4e4>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fb0:	441c      	add	r4, r3
 8004fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fba:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	1891      	adds	r1, r2, r2
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	415b      	adcs	r3, r3
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fd0:	4641      	mov	r1, r8
 8004fd2:	1851      	adds	r1, r2, r1
 8004fd4:	6039      	str	r1, [r7, #0]
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	414b      	adcs	r3, r1
 8004fda:	607b      	str	r3, [r7, #4]
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fe8:	4659      	mov	r1, fp
 8004fea:	00cb      	lsls	r3, r1, #3
 8004fec:	4651      	mov	r1, sl
 8004fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ff2:	4651      	mov	r1, sl
 8004ff4:	00ca      	lsls	r2, r1, #3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	189b      	adds	r3, r3, r2
 8005000:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005002:	464b      	mov	r3, r9
 8005004:	460a      	mov	r2, r1
 8005006:	eb42 0303 	adc.w	r3, r2, r3
 800500a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	663b      	str	r3, [r7, #96]	@ 0x60
 8005016:	667a      	str	r2, [r7, #100]	@ 0x64
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005024:	4649      	mov	r1, r9
 8005026:	008b      	lsls	r3, r1, #2
 8005028:	4641      	mov	r1, r8
 800502a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800502e:	4641      	mov	r1, r8
 8005030:	008a      	lsls	r2, r1, #2
 8005032:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005036:	f7fb f93b 	bl	80002b0 <__aeabi_uldivmod>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4b0d      	ldr	r3, [pc, #52]	@ (8005074 <UART_SetConfig+0x4e4>)
 8005040:	fba3 1302 	umull	r1, r3, r3, r2
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	2164      	movs	r1, #100	@ 0x64
 8005048:	fb01 f303 	mul.w	r3, r1, r3
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	3332      	adds	r3, #50	@ 0x32
 8005052:	4a08      	ldr	r2, [pc, #32]	@ (8005074 <UART_SetConfig+0x4e4>)
 8005054:	fba2 2303 	umull	r2, r3, r2, r3
 8005058:	095b      	lsrs	r3, r3, #5
 800505a:	f003 020f 	and.w	r2, r3, #15
 800505e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4422      	add	r2, r4
 8005066:	609a      	str	r2, [r3, #8]
}
 8005068:	bf00      	nop
 800506a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800506e:	46bd      	mov	sp, r7
 8005070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005074:	51eb851f 	.word	0x51eb851f

08005078 <atoi>:
 8005078:	220a      	movs	r2, #10
 800507a:	2100      	movs	r1, #0
 800507c:	f000 b87a 	b.w	8005174 <strtol>

08005080 <_strtol_l.isra.0>:
 8005080:	2b24      	cmp	r3, #36	@ 0x24
 8005082:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005086:	4686      	mov	lr, r0
 8005088:	4690      	mov	r8, r2
 800508a:	d801      	bhi.n	8005090 <_strtol_l.isra.0+0x10>
 800508c:	2b01      	cmp	r3, #1
 800508e:	d106      	bne.n	800509e <_strtol_l.isra.0+0x1e>
 8005090:	f000 fb8e 	bl	80057b0 <__errno>
 8005094:	2316      	movs	r3, #22
 8005096:	6003      	str	r3, [r0, #0]
 8005098:	2000      	movs	r0, #0
 800509a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509e:	4834      	ldr	r0, [pc, #208]	@ (8005170 <_strtol_l.isra.0+0xf0>)
 80050a0:	460d      	mov	r5, r1
 80050a2:	462a      	mov	r2, r5
 80050a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050a8:	5d06      	ldrb	r6, [r0, r4]
 80050aa:	f016 0608 	ands.w	r6, r6, #8
 80050ae:	d1f8      	bne.n	80050a2 <_strtol_l.isra.0+0x22>
 80050b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80050b2:	d110      	bne.n	80050d6 <_strtol_l.isra.0+0x56>
 80050b4:	782c      	ldrb	r4, [r5, #0]
 80050b6:	2601      	movs	r6, #1
 80050b8:	1c95      	adds	r5, r2, #2
 80050ba:	f033 0210 	bics.w	r2, r3, #16
 80050be:	d115      	bne.n	80050ec <_strtol_l.isra.0+0x6c>
 80050c0:	2c30      	cmp	r4, #48	@ 0x30
 80050c2:	d10d      	bne.n	80050e0 <_strtol_l.isra.0+0x60>
 80050c4:	782a      	ldrb	r2, [r5, #0]
 80050c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80050ca:	2a58      	cmp	r2, #88	@ 0x58
 80050cc:	d108      	bne.n	80050e0 <_strtol_l.isra.0+0x60>
 80050ce:	786c      	ldrb	r4, [r5, #1]
 80050d0:	3502      	adds	r5, #2
 80050d2:	2310      	movs	r3, #16
 80050d4:	e00a      	b.n	80050ec <_strtol_l.isra.0+0x6c>
 80050d6:	2c2b      	cmp	r4, #43	@ 0x2b
 80050d8:	bf04      	itt	eq
 80050da:	782c      	ldrbeq	r4, [r5, #0]
 80050dc:	1c95      	addeq	r5, r2, #2
 80050de:	e7ec      	b.n	80050ba <_strtol_l.isra.0+0x3a>
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1f6      	bne.n	80050d2 <_strtol_l.isra.0+0x52>
 80050e4:	2c30      	cmp	r4, #48	@ 0x30
 80050e6:	bf14      	ite	ne
 80050e8:	230a      	movne	r3, #10
 80050ea:	2308      	moveq	r3, #8
 80050ec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80050f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80050f4:	2200      	movs	r2, #0
 80050f6:	fbbc f9f3 	udiv	r9, ip, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	fb03 ca19 	mls	sl, r3, r9, ip
 8005100:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005104:	2f09      	cmp	r7, #9
 8005106:	d80f      	bhi.n	8005128 <_strtol_l.isra.0+0xa8>
 8005108:	463c      	mov	r4, r7
 800510a:	42a3      	cmp	r3, r4
 800510c:	dd1b      	ble.n	8005146 <_strtol_l.isra.0+0xc6>
 800510e:	1c57      	adds	r7, r2, #1
 8005110:	d007      	beq.n	8005122 <_strtol_l.isra.0+0xa2>
 8005112:	4581      	cmp	r9, r0
 8005114:	d314      	bcc.n	8005140 <_strtol_l.isra.0+0xc0>
 8005116:	d101      	bne.n	800511c <_strtol_l.isra.0+0x9c>
 8005118:	45a2      	cmp	sl, r4
 800511a:	db11      	blt.n	8005140 <_strtol_l.isra.0+0xc0>
 800511c:	fb00 4003 	mla	r0, r0, r3, r4
 8005120:	2201      	movs	r2, #1
 8005122:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005126:	e7eb      	b.n	8005100 <_strtol_l.isra.0+0x80>
 8005128:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800512c:	2f19      	cmp	r7, #25
 800512e:	d801      	bhi.n	8005134 <_strtol_l.isra.0+0xb4>
 8005130:	3c37      	subs	r4, #55	@ 0x37
 8005132:	e7ea      	b.n	800510a <_strtol_l.isra.0+0x8a>
 8005134:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005138:	2f19      	cmp	r7, #25
 800513a:	d804      	bhi.n	8005146 <_strtol_l.isra.0+0xc6>
 800513c:	3c57      	subs	r4, #87	@ 0x57
 800513e:	e7e4      	b.n	800510a <_strtol_l.isra.0+0x8a>
 8005140:	f04f 32ff 	mov.w	r2, #4294967295
 8005144:	e7ed      	b.n	8005122 <_strtol_l.isra.0+0xa2>
 8005146:	1c53      	adds	r3, r2, #1
 8005148:	d108      	bne.n	800515c <_strtol_l.isra.0+0xdc>
 800514a:	2322      	movs	r3, #34	@ 0x22
 800514c:	f8ce 3000 	str.w	r3, [lr]
 8005150:	4660      	mov	r0, ip
 8005152:	f1b8 0f00 	cmp.w	r8, #0
 8005156:	d0a0      	beq.n	800509a <_strtol_l.isra.0+0x1a>
 8005158:	1e69      	subs	r1, r5, #1
 800515a:	e006      	b.n	800516a <_strtol_l.isra.0+0xea>
 800515c:	b106      	cbz	r6, 8005160 <_strtol_l.isra.0+0xe0>
 800515e:	4240      	negs	r0, r0
 8005160:	f1b8 0f00 	cmp.w	r8, #0
 8005164:	d099      	beq.n	800509a <_strtol_l.isra.0+0x1a>
 8005166:	2a00      	cmp	r2, #0
 8005168:	d1f6      	bne.n	8005158 <_strtol_l.isra.0+0xd8>
 800516a:	f8c8 1000 	str.w	r1, [r8]
 800516e:	e794      	b.n	800509a <_strtol_l.isra.0+0x1a>
 8005170:	08006a7d 	.word	0x08006a7d

08005174 <strtol>:
 8005174:	4613      	mov	r3, r2
 8005176:	460a      	mov	r2, r1
 8005178:	4601      	mov	r1, r0
 800517a:	4802      	ldr	r0, [pc, #8]	@ (8005184 <strtol+0x10>)
 800517c:	6800      	ldr	r0, [r0, #0]
 800517e:	f7ff bf7f 	b.w	8005080 <_strtol_l.isra.0>
 8005182:	bf00      	nop
 8005184:	2000001c 	.word	0x2000001c

08005188 <std>:
 8005188:	2300      	movs	r3, #0
 800518a:	b510      	push	{r4, lr}
 800518c:	4604      	mov	r4, r0
 800518e:	e9c0 3300 	strd	r3, r3, [r0]
 8005192:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005196:	6083      	str	r3, [r0, #8]
 8005198:	8181      	strh	r1, [r0, #12]
 800519a:	6643      	str	r3, [r0, #100]	@ 0x64
 800519c:	81c2      	strh	r2, [r0, #14]
 800519e:	6183      	str	r3, [r0, #24]
 80051a0:	4619      	mov	r1, r3
 80051a2:	2208      	movs	r2, #8
 80051a4:	305c      	adds	r0, #92	@ 0x5c
 80051a6:	f000 fa23 	bl	80055f0 <memset>
 80051aa:	4b0d      	ldr	r3, [pc, #52]	@ (80051e0 <std+0x58>)
 80051ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80051ae:	4b0d      	ldr	r3, [pc, #52]	@ (80051e4 <std+0x5c>)
 80051b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051b2:	4b0d      	ldr	r3, [pc, #52]	@ (80051e8 <std+0x60>)
 80051b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051b6:	4b0d      	ldr	r3, [pc, #52]	@ (80051ec <std+0x64>)
 80051b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80051ba:	4b0d      	ldr	r3, [pc, #52]	@ (80051f0 <std+0x68>)
 80051bc:	6224      	str	r4, [r4, #32]
 80051be:	429c      	cmp	r4, r3
 80051c0:	d006      	beq.n	80051d0 <std+0x48>
 80051c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051c6:	4294      	cmp	r4, r2
 80051c8:	d002      	beq.n	80051d0 <std+0x48>
 80051ca:	33d0      	adds	r3, #208	@ 0xd0
 80051cc:	429c      	cmp	r4, r3
 80051ce:	d105      	bne.n	80051dc <std+0x54>
 80051d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d8:	f000 bb14 	b.w	8005804 <__retarget_lock_init_recursive>
 80051dc:	bd10      	pop	{r4, pc}
 80051de:	bf00      	nop
 80051e0:	08005441 	.word	0x08005441
 80051e4:	08005463 	.word	0x08005463
 80051e8:	0800549b 	.word	0x0800549b
 80051ec:	080054bf 	.word	0x080054bf
 80051f0:	20000ab0 	.word	0x20000ab0

080051f4 <stdio_exit_handler>:
 80051f4:	4a02      	ldr	r2, [pc, #8]	@ (8005200 <stdio_exit_handler+0xc>)
 80051f6:	4903      	ldr	r1, [pc, #12]	@ (8005204 <stdio_exit_handler+0x10>)
 80051f8:	4803      	ldr	r0, [pc, #12]	@ (8005208 <stdio_exit_handler+0x14>)
 80051fa:	f000 b869 	b.w	80052d0 <_fwalk_sglue>
 80051fe:	bf00      	nop
 8005200:	20000010 	.word	0x20000010
 8005204:	080063c9 	.word	0x080063c9
 8005208:	20000020 	.word	0x20000020

0800520c <cleanup_stdio>:
 800520c:	6841      	ldr	r1, [r0, #4]
 800520e:	4b0c      	ldr	r3, [pc, #48]	@ (8005240 <cleanup_stdio+0x34>)
 8005210:	4299      	cmp	r1, r3
 8005212:	b510      	push	{r4, lr}
 8005214:	4604      	mov	r4, r0
 8005216:	d001      	beq.n	800521c <cleanup_stdio+0x10>
 8005218:	f001 f8d6 	bl	80063c8 <_fflush_r>
 800521c:	68a1      	ldr	r1, [r4, #8]
 800521e:	4b09      	ldr	r3, [pc, #36]	@ (8005244 <cleanup_stdio+0x38>)
 8005220:	4299      	cmp	r1, r3
 8005222:	d002      	beq.n	800522a <cleanup_stdio+0x1e>
 8005224:	4620      	mov	r0, r4
 8005226:	f001 f8cf 	bl	80063c8 <_fflush_r>
 800522a:	68e1      	ldr	r1, [r4, #12]
 800522c:	4b06      	ldr	r3, [pc, #24]	@ (8005248 <cleanup_stdio+0x3c>)
 800522e:	4299      	cmp	r1, r3
 8005230:	d004      	beq.n	800523c <cleanup_stdio+0x30>
 8005232:	4620      	mov	r0, r4
 8005234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005238:	f001 b8c6 	b.w	80063c8 <_fflush_r>
 800523c:	bd10      	pop	{r4, pc}
 800523e:	bf00      	nop
 8005240:	20000ab0 	.word	0x20000ab0
 8005244:	20000b18 	.word	0x20000b18
 8005248:	20000b80 	.word	0x20000b80

0800524c <global_stdio_init.part.0>:
 800524c:	b510      	push	{r4, lr}
 800524e:	4b0b      	ldr	r3, [pc, #44]	@ (800527c <global_stdio_init.part.0+0x30>)
 8005250:	4c0b      	ldr	r4, [pc, #44]	@ (8005280 <global_stdio_init.part.0+0x34>)
 8005252:	4a0c      	ldr	r2, [pc, #48]	@ (8005284 <global_stdio_init.part.0+0x38>)
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	4620      	mov	r0, r4
 8005258:	2200      	movs	r2, #0
 800525a:	2104      	movs	r1, #4
 800525c:	f7ff ff94 	bl	8005188 <std>
 8005260:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005264:	2201      	movs	r2, #1
 8005266:	2109      	movs	r1, #9
 8005268:	f7ff ff8e 	bl	8005188 <std>
 800526c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005270:	2202      	movs	r2, #2
 8005272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005276:	2112      	movs	r1, #18
 8005278:	f7ff bf86 	b.w	8005188 <std>
 800527c:	20000be8 	.word	0x20000be8
 8005280:	20000ab0 	.word	0x20000ab0
 8005284:	080051f5 	.word	0x080051f5

08005288 <__sfp_lock_acquire>:
 8005288:	4801      	ldr	r0, [pc, #4]	@ (8005290 <__sfp_lock_acquire+0x8>)
 800528a:	f000 babc 	b.w	8005806 <__retarget_lock_acquire_recursive>
 800528e:	bf00      	nop
 8005290:	20000bf1 	.word	0x20000bf1

08005294 <__sfp_lock_release>:
 8005294:	4801      	ldr	r0, [pc, #4]	@ (800529c <__sfp_lock_release+0x8>)
 8005296:	f000 bab7 	b.w	8005808 <__retarget_lock_release_recursive>
 800529a:	bf00      	nop
 800529c:	20000bf1 	.word	0x20000bf1

080052a0 <__sinit>:
 80052a0:	b510      	push	{r4, lr}
 80052a2:	4604      	mov	r4, r0
 80052a4:	f7ff fff0 	bl	8005288 <__sfp_lock_acquire>
 80052a8:	6a23      	ldr	r3, [r4, #32]
 80052aa:	b11b      	cbz	r3, 80052b4 <__sinit+0x14>
 80052ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b0:	f7ff bff0 	b.w	8005294 <__sfp_lock_release>
 80052b4:	4b04      	ldr	r3, [pc, #16]	@ (80052c8 <__sinit+0x28>)
 80052b6:	6223      	str	r3, [r4, #32]
 80052b8:	4b04      	ldr	r3, [pc, #16]	@ (80052cc <__sinit+0x2c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1f5      	bne.n	80052ac <__sinit+0xc>
 80052c0:	f7ff ffc4 	bl	800524c <global_stdio_init.part.0>
 80052c4:	e7f2      	b.n	80052ac <__sinit+0xc>
 80052c6:	bf00      	nop
 80052c8:	0800520d 	.word	0x0800520d
 80052cc:	20000be8 	.word	0x20000be8

080052d0 <_fwalk_sglue>:
 80052d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052d4:	4607      	mov	r7, r0
 80052d6:	4688      	mov	r8, r1
 80052d8:	4614      	mov	r4, r2
 80052da:	2600      	movs	r6, #0
 80052dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052e0:	f1b9 0901 	subs.w	r9, r9, #1
 80052e4:	d505      	bpl.n	80052f2 <_fwalk_sglue+0x22>
 80052e6:	6824      	ldr	r4, [r4, #0]
 80052e8:	2c00      	cmp	r4, #0
 80052ea:	d1f7      	bne.n	80052dc <_fwalk_sglue+0xc>
 80052ec:	4630      	mov	r0, r6
 80052ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052f2:	89ab      	ldrh	r3, [r5, #12]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d907      	bls.n	8005308 <_fwalk_sglue+0x38>
 80052f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052fc:	3301      	adds	r3, #1
 80052fe:	d003      	beq.n	8005308 <_fwalk_sglue+0x38>
 8005300:	4629      	mov	r1, r5
 8005302:	4638      	mov	r0, r7
 8005304:	47c0      	blx	r8
 8005306:	4306      	orrs	r6, r0
 8005308:	3568      	adds	r5, #104	@ 0x68
 800530a:	e7e9      	b.n	80052e0 <_fwalk_sglue+0x10>

0800530c <iprintf>:
 800530c:	b40f      	push	{r0, r1, r2, r3}
 800530e:	b507      	push	{r0, r1, r2, lr}
 8005310:	4906      	ldr	r1, [pc, #24]	@ (800532c <iprintf+0x20>)
 8005312:	ab04      	add	r3, sp, #16
 8005314:	6808      	ldr	r0, [r1, #0]
 8005316:	f853 2b04 	ldr.w	r2, [r3], #4
 800531a:	6881      	ldr	r1, [r0, #8]
 800531c:	9301      	str	r3, [sp, #4]
 800531e:	f000 fd2b 	bl	8005d78 <_vfiprintf_r>
 8005322:	b003      	add	sp, #12
 8005324:	f85d eb04 	ldr.w	lr, [sp], #4
 8005328:	b004      	add	sp, #16
 800532a:	4770      	bx	lr
 800532c:	2000001c 	.word	0x2000001c

08005330 <putchar>:
 8005330:	4b02      	ldr	r3, [pc, #8]	@ (800533c <putchar+0xc>)
 8005332:	4601      	mov	r1, r0
 8005334:	6818      	ldr	r0, [r3, #0]
 8005336:	6882      	ldr	r2, [r0, #8]
 8005338:	f001 b8e2 	b.w	8006500 <_putc_r>
 800533c:	2000001c 	.word	0x2000001c

08005340 <_puts_r>:
 8005340:	6a03      	ldr	r3, [r0, #32]
 8005342:	b570      	push	{r4, r5, r6, lr}
 8005344:	6884      	ldr	r4, [r0, #8]
 8005346:	4605      	mov	r5, r0
 8005348:	460e      	mov	r6, r1
 800534a:	b90b      	cbnz	r3, 8005350 <_puts_r+0x10>
 800534c:	f7ff ffa8 	bl	80052a0 <__sinit>
 8005350:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005352:	07db      	lsls	r3, r3, #31
 8005354:	d405      	bmi.n	8005362 <_puts_r+0x22>
 8005356:	89a3      	ldrh	r3, [r4, #12]
 8005358:	0598      	lsls	r0, r3, #22
 800535a:	d402      	bmi.n	8005362 <_puts_r+0x22>
 800535c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800535e:	f000 fa52 	bl	8005806 <__retarget_lock_acquire_recursive>
 8005362:	89a3      	ldrh	r3, [r4, #12]
 8005364:	0719      	lsls	r1, r3, #28
 8005366:	d502      	bpl.n	800536e <_puts_r+0x2e>
 8005368:	6923      	ldr	r3, [r4, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d135      	bne.n	80053da <_puts_r+0x9a>
 800536e:	4621      	mov	r1, r4
 8005370:	4628      	mov	r0, r5
 8005372:	f000 f8e7 	bl	8005544 <__swsetup_r>
 8005376:	b380      	cbz	r0, 80053da <_puts_r+0x9a>
 8005378:	f04f 35ff 	mov.w	r5, #4294967295
 800537c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800537e:	07da      	lsls	r2, r3, #31
 8005380:	d405      	bmi.n	800538e <_puts_r+0x4e>
 8005382:	89a3      	ldrh	r3, [r4, #12]
 8005384:	059b      	lsls	r3, r3, #22
 8005386:	d402      	bmi.n	800538e <_puts_r+0x4e>
 8005388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800538a:	f000 fa3d 	bl	8005808 <__retarget_lock_release_recursive>
 800538e:	4628      	mov	r0, r5
 8005390:	bd70      	pop	{r4, r5, r6, pc}
 8005392:	2b00      	cmp	r3, #0
 8005394:	da04      	bge.n	80053a0 <_puts_r+0x60>
 8005396:	69a2      	ldr	r2, [r4, #24]
 8005398:	429a      	cmp	r2, r3
 800539a:	dc17      	bgt.n	80053cc <_puts_r+0x8c>
 800539c:	290a      	cmp	r1, #10
 800539e:	d015      	beq.n	80053cc <_puts_r+0x8c>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	6022      	str	r2, [r4, #0]
 80053a6:	7019      	strb	r1, [r3, #0]
 80053a8:	68a3      	ldr	r3, [r4, #8]
 80053aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053ae:	3b01      	subs	r3, #1
 80053b0:	60a3      	str	r3, [r4, #8]
 80053b2:	2900      	cmp	r1, #0
 80053b4:	d1ed      	bne.n	8005392 <_puts_r+0x52>
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	da11      	bge.n	80053de <_puts_r+0x9e>
 80053ba:	4622      	mov	r2, r4
 80053bc:	210a      	movs	r1, #10
 80053be:	4628      	mov	r0, r5
 80053c0:	f000 f881 	bl	80054c6 <__swbuf_r>
 80053c4:	3001      	adds	r0, #1
 80053c6:	d0d7      	beq.n	8005378 <_puts_r+0x38>
 80053c8:	250a      	movs	r5, #10
 80053ca:	e7d7      	b.n	800537c <_puts_r+0x3c>
 80053cc:	4622      	mov	r2, r4
 80053ce:	4628      	mov	r0, r5
 80053d0:	f000 f879 	bl	80054c6 <__swbuf_r>
 80053d4:	3001      	adds	r0, #1
 80053d6:	d1e7      	bne.n	80053a8 <_puts_r+0x68>
 80053d8:	e7ce      	b.n	8005378 <_puts_r+0x38>
 80053da:	3e01      	subs	r6, #1
 80053dc:	e7e4      	b.n	80053a8 <_puts_r+0x68>
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	6022      	str	r2, [r4, #0]
 80053e4:	220a      	movs	r2, #10
 80053e6:	701a      	strb	r2, [r3, #0]
 80053e8:	e7ee      	b.n	80053c8 <_puts_r+0x88>
	...

080053ec <puts>:
 80053ec:	4b02      	ldr	r3, [pc, #8]	@ (80053f8 <puts+0xc>)
 80053ee:	4601      	mov	r1, r0
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	f7ff bfa5 	b.w	8005340 <_puts_r>
 80053f6:	bf00      	nop
 80053f8:	2000001c 	.word	0x2000001c

080053fc <siprintf>:
 80053fc:	b40e      	push	{r1, r2, r3}
 80053fe:	b510      	push	{r4, lr}
 8005400:	b09d      	sub	sp, #116	@ 0x74
 8005402:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005404:	9002      	str	r0, [sp, #8]
 8005406:	9006      	str	r0, [sp, #24]
 8005408:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800540c:	480a      	ldr	r0, [pc, #40]	@ (8005438 <siprintf+0x3c>)
 800540e:	9107      	str	r1, [sp, #28]
 8005410:	9104      	str	r1, [sp, #16]
 8005412:	490a      	ldr	r1, [pc, #40]	@ (800543c <siprintf+0x40>)
 8005414:	f853 2b04 	ldr.w	r2, [r3], #4
 8005418:	9105      	str	r1, [sp, #20]
 800541a:	2400      	movs	r4, #0
 800541c:	a902      	add	r1, sp, #8
 800541e:	6800      	ldr	r0, [r0, #0]
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005424:	f000 fb82 	bl	8005b2c <_svfiprintf_r>
 8005428:	9b02      	ldr	r3, [sp, #8]
 800542a:	701c      	strb	r4, [r3, #0]
 800542c:	b01d      	add	sp, #116	@ 0x74
 800542e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005432:	b003      	add	sp, #12
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	2000001c 	.word	0x2000001c
 800543c:	ffff0208 	.word	0xffff0208

08005440 <__sread>:
 8005440:	b510      	push	{r4, lr}
 8005442:	460c      	mov	r4, r1
 8005444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005448:	f000 f98e 	bl	8005768 <_read_r>
 800544c:	2800      	cmp	r0, #0
 800544e:	bfab      	itete	ge
 8005450:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005452:	89a3      	ldrhlt	r3, [r4, #12]
 8005454:	181b      	addge	r3, r3, r0
 8005456:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800545a:	bfac      	ite	ge
 800545c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800545e:	81a3      	strhlt	r3, [r4, #12]
 8005460:	bd10      	pop	{r4, pc}

08005462 <__swrite>:
 8005462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005466:	461f      	mov	r7, r3
 8005468:	898b      	ldrh	r3, [r1, #12]
 800546a:	05db      	lsls	r3, r3, #23
 800546c:	4605      	mov	r5, r0
 800546e:	460c      	mov	r4, r1
 8005470:	4616      	mov	r6, r2
 8005472:	d505      	bpl.n	8005480 <__swrite+0x1e>
 8005474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005478:	2302      	movs	r3, #2
 800547a:	2200      	movs	r2, #0
 800547c:	f000 f962 	bl	8005744 <_lseek_r>
 8005480:	89a3      	ldrh	r3, [r4, #12]
 8005482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005486:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800548a:	81a3      	strh	r3, [r4, #12]
 800548c:	4632      	mov	r2, r6
 800548e:	463b      	mov	r3, r7
 8005490:	4628      	mov	r0, r5
 8005492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005496:	f000 b979 	b.w	800578c <_write_r>

0800549a <__sseek>:
 800549a:	b510      	push	{r4, lr}
 800549c:	460c      	mov	r4, r1
 800549e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a2:	f000 f94f 	bl	8005744 <_lseek_r>
 80054a6:	1c43      	adds	r3, r0, #1
 80054a8:	89a3      	ldrh	r3, [r4, #12]
 80054aa:	bf15      	itete	ne
 80054ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054b6:	81a3      	strheq	r3, [r4, #12]
 80054b8:	bf18      	it	ne
 80054ba:	81a3      	strhne	r3, [r4, #12]
 80054bc:	bd10      	pop	{r4, pc}

080054be <__sclose>:
 80054be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c2:	f000 b92f 	b.w	8005724 <_close_r>

080054c6 <__swbuf_r>:
 80054c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c8:	460e      	mov	r6, r1
 80054ca:	4614      	mov	r4, r2
 80054cc:	4605      	mov	r5, r0
 80054ce:	b118      	cbz	r0, 80054d8 <__swbuf_r+0x12>
 80054d0:	6a03      	ldr	r3, [r0, #32]
 80054d2:	b90b      	cbnz	r3, 80054d8 <__swbuf_r+0x12>
 80054d4:	f7ff fee4 	bl	80052a0 <__sinit>
 80054d8:	69a3      	ldr	r3, [r4, #24]
 80054da:	60a3      	str	r3, [r4, #8]
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	071a      	lsls	r2, r3, #28
 80054e0:	d501      	bpl.n	80054e6 <__swbuf_r+0x20>
 80054e2:	6923      	ldr	r3, [r4, #16]
 80054e4:	b943      	cbnz	r3, 80054f8 <__swbuf_r+0x32>
 80054e6:	4621      	mov	r1, r4
 80054e8:	4628      	mov	r0, r5
 80054ea:	f000 f82b 	bl	8005544 <__swsetup_r>
 80054ee:	b118      	cbz	r0, 80054f8 <__swbuf_r+0x32>
 80054f0:	f04f 37ff 	mov.w	r7, #4294967295
 80054f4:	4638      	mov	r0, r7
 80054f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	6922      	ldr	r2, [r4, #16]
 80054fc:	1a98      	subs	r0, r3, r2
 80054fe:	6963      	ldr	r3, [r4, #20]
 8005500:	b2f6      	uxtb	r6, r6
 8005502:	4283      	cmp	r3, r0
 8005504:	4637      	mov	r7, r6
 8005506:	dc05      	bgt.n	8005514 <__swbuf_r+0x4e>
 8005508:	4621      	mov	r1, r4
 800550a:	4628      	mov	r0, r5
 800550c:	f000 ff5c 	bl	80063c8 <_fflush_r>
 8005510:	2800      	cmp	r0, #0
 8005512:	d1ed      	bne.n	80054f0 <__swbuf_r+0x2a>
 8005514:	68a3      	ldr	r3, [r4, #8]
 8005516:	3b01      	subs	r3, #1
 8005518:	60a3      	str	r3, [r4, #8]
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	6022      	str	r2, [r4, #0]
 8005520:	701e      	strb	r6, [r3, #0]
 8005522:	6962      	ldr	r2, [r4, #20]
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	429a      	cmp	r2, r3
 8005528:	d004      	beq.n	8005534 <__swbuf_r+0x6e>
 800552a:	89a3      	ldrh	r3, [r4, #12]
 800552c:	07db      	lsls	r3, r3, #31
 800552e:	d5e1      	bpl.n	80054f4 <__swbuf_r+0x2e>
 8005530:	2e0a      	cmp	r6, #10
 8005532:	d1df      	bne.n	80054f4 <__swbuf_r+0x2e>
 8005534:	4621      	mov	r1, r4
 8005536:	4628      	mov	r0, r5
 8005538:	f000 ff46 	bl	80063c8 <_fflush_r>
 800553c:	2800      	cmp	r0, #0
 800553e:	d0d9      	beq.n	80054f4 <__swbuf_r+0x2e>
 8005540:	e7d6      	b.n	80054f0 <__swbuf_r+0x2a>
	...

08005544 <__swsetup_r>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	4b29      	ldr	r3, [pc, #164]	@ (80055ec <__swsetup_r+0xa8>)
 8005548:	4605      	mov	r5, r0
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	460c      	mov	r4, r1
 800554e:	b118      	cbz	r0, 8005558 <__swsetup_r+0x14>
 8005550:	6a03      	ldr	r3, [r0, #32]
 8005552:	b90b      	cbnz	r3, 8005558 <__swsetup_r+0x14>
 8005554:	f7ff fea4 	bl	80052a0 <__sinit>
 8005558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800555c:	0719      	lsls	r1, r3, #28
 800555e:	d422      	bmi.n	80055a6 <__swsetup_r+0x62>
 8005560:	06da      	lsls	r2, r3, #27
 8005562:	d407      	bmi.n	8005574 <__swsetup_r+0x30>
 8005564:	2209      	movs	r2, #9
 8005566:	602a      	str	r2, [r5, #0]
 8005568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800556c:	81a3      	strh	r3, [r4, #12]
 800556e:	f04f 30ff 	mov.w	r0, #4294967295
 8005572:	e033      	b.n	80055dc <__swsetup_r+0x98>
 8005574:	0758      	lsls	r0, r3, #29
 8005576:	d512      	bpl.n	800559e <__swsetup_r+0x5a>
 8005578:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800557a:	b141      	cbz	r1, 800558e <__swsetup_r+0x4a>
 800557c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005580:	4299      	cmp	r1, r3
 8005582:	d002      	beq.n	800558a <__swsetup_r+0x46>
 8005584:	4628      	mov	r0, r5
 8005586:	f000 f975 	bl	8005874 <_free_r>
 800558a:	2300      	movs	r3, #0
 800558c:	6363      	str	r3, [r4, #52]	@ 0x34
 800558e:	89a3      	ldrh	r3, [r4, #12]
 8005590:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005594:	81a3      	strh	r3, [r4, #12]
 8005596:	2300      	movs	r3, #0
 8005598:	6063      	str	r3, [r4, #4]
 800559a:	6923      	ldr	r3, [r4, #16]
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	89a3      	ldrh	r3, [r4, #12]
 80055a0:	f043 0308 	orr.w	r3, r3, #8
 80055a4:	81a3      	strh	r3, [r4, #12]
 80055a6:	6923      	ldr	r3, [r4, #16]
 80055a8:	b94b      	cbnz	r3, 80055be <__swsetup_r+0x7a>
 80055aa:	89a3      	ldrh	r3, [r4, #12]
 80055ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80055b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055b4:	d003      	beq.n	80055be <__swsetup_r+0x7a>
 80055b6:	4621      	mov	r1, r4
 80055b8:	4628      	mov	r0, r5
 80055ba:	f000 ff65 	bl	8006488 <__smakebuf_r>
 80055be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055c2:	f013 0201 	ands.w	r2, r3, #1
 80055c6:	d00a      	beq.n	80055de <__swsetup_r+0x9a>
 80055c8:	2200      	movs	r2, #0
 80055ca:	60a2      	str	r2, [r4, #8]
 80055cc:	6962      	ldr	r2, [r4, #20]
 80055ce:	4252      	negs	r2, r2
 80055d0:	61a2      	str	r2, [r4, #24]
 80055d2:	6922      	ldr	r2, [r4, #16]
 80055d4:	b942      	cbnz	r2, 80055e8 <__swsetup_r+0xa4>
 80055d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80055da:	d1c5      	bne.n	8005568 <__swsetup_r+0x24>
 80055dc:	bd38      	pop	{r3, r4, r5, pc}
 80055de:	0799      	lsls	r1, r3, #30
 80055e0:	bf58      	it	pl
 80055e2:	6962      	ldrpl	r2, [r4, #20]
 80055e4:	60a2      	str	r2, [r4, #8]
 80055e6:	e7f4      	b.n	80055d2 <__swsetup_r+0x8e>
 80055e8:	2000      	movs	r0, #0
 80055ea:	e7f7      	b.n	80055dc <__swsetup_r+0x98>
 80055ec:	2000001c 	.word	0x2000001c

080055f0 <memset>:
 80055f0:	4402      	add	r2, r0
 80055f2:	4603      	mov	r3, r0
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d100      	bne.n	80055fa <memset+0xa>
 80055f8:	4770      	bx	lr
 80055fa:	f803 1b01 	strb.w	r1, [r3], #1
 80055fe:	e7f9      	b.n	80055f4 <memset+0x4>

08005600 <strchr>:
 8005600:	b2c9      	uxtb	r1, r1
 8005602:	4603      	mov	r3, r0
 8005604:	4618      	mov	r0, r3
 8005606:	f813 2b01 	ldrb.w	r2, [r3], #1
 800560a:	b112      	cbz	r2, 8005612 <strchr+0x12>
 800560c:	428a      	cmp	r2, r1
 800560e:	d1f9      	bne.n	8005604 <strchr+0x4>
 8005610:	4770      	bx	lr
 8005612:	2900      	cmp	r1, #0
 8005614:	bf18      	it	ne
 8005616:	2000      	movne	r0, #0
 8005618:	4770      	bx	lr

0800561a <strncmp>:
 800561a:	b510      	push	{r4, lr}
 800561c:	b16a      	cbz	r2, 800563a <strncmp+0x20>
 800561e:	3901      	subs	r1, #1
 8005620:	1884      	adds	r4, r0, r2
 8005622:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005626:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800562a:	429a      	cmp	r2, r3
 800562c:	d103      	bne.n	8005636 <strncmp+0x1c>
 800562e:	42a0      	cmp	r0, r4
 8005630:	d001      	beq.n	8005636 <strncmp+0x1c>
 8005632:	2a00      	cmp	r2, #0
 8005634:	d1f5      	bne.n	8005622 <strncmp+0x8>
 8005636:	1ad0      	subs	r0, r2, r3
 8005638:	bd10      	pop	{r4, pc}
 800563a:	4610      	mov	r0, r2
 800563c:	e7fc      	b.n	8005638 <strncmp+0x1e>
	...

08005640 <strtok>:
 8005640:	4b16      	ldr	r3, [pc, #88]	@ (800569c <strtok+0x5c>)
 8005642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005646:	681f      	ldr	r7, [r3, #0]
 8005648:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800564a:	4605      	mov	r5, r0
 800564c:	460e      	mov	r6, r1
 800564e:	b9ec      	cbnz	r4, 800568c <strtok+0x4c>
 8005650:	2050      	movs	r0, #80	@ 0x50
 8005652:	f000 f959 	bl	8005908 <malloc>
 8005656:	4602      	mov	r2, r0
 8005658:	6478      	str	r0, [r7, #68]	@ 0x44
 800565a:	b920      	cbnz	r0, 8005666 <strtok+0x26>
 800565c:	4b10      	ldr	r3, [pc, #64]	@ (80056a0 <strtok+0x60>)
 800565e:	4811      	ldr	r0, [pc, #68]	@ (80056a4 <strtok+0x64>)
 8005660:	215b      	movs	r1, #91	@ 0x5b
 8005662:	f000 f8e9 	bl	8005838 <__assert_func>
 8005666:	e9c0 4400 	strd	r4, r4, [r0]
 800566a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800566e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005672:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8005676:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800567a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800567e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8005682:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8005686:	6184      	str	r4, [r0, #24]
 8005688:	7704      	strb	r4, [r0, #28]
 800568a:	6244      	str	r4, [r0, #36]	@ 0x24
 800568c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800568e:	4631      	mov	r1, r6
 8005690:	4628      	mov	r0, r5
 8005692:	2301      	movs	r3, #1
 8005694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005698:	f000 b806 	b.w	80056a8 <__strtok_r>
 800569c:	2000001c 	.word	0x2000001c
 80056a0:	08006b7d 	.word	0x08006b7d
 80056a4:	08006b94 	.word	0x08006b94

080056a8 <__strtok_r>:
 80056a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056aa:	4604      	mov	r4, r0
 80056ac:	b908      	cbnz	r0, 80056b2 <__strtok_r+0xa>
 80056ae:	6814      	ldr	r4, [r2, #0]
 80056b0:	b144      	cbz	r4, 80056c4 <__strtok_r+0x1c>
 80056b2:	4620      	mov	r0, r4
 80056b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80056b8:	460f      	mov	r7, r1
 80056ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 80056be:	b91e      	cbnz	r6, 80056c8 <__strtok_r+0x20>
 80056c0:	b965      	cbnz	r5, 80056dc <__strtok_r+0x34>
 80056c2:	6015      	str	r5, [r2, #0]
 80056c4:	2000      	movs	r0, #0
 80056c6:	e005      	b.n	80056d4 <__strtok_r+0x2c>
 80056c8:	42b5      	cmp	r5, r6
 80056ca:	d1f6      	bne.n	80056ba <__strtok_r+0x12>
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1f0      	bne.n	80056b2 <__strtok_r+0xa>
 80056d0:	6014      	str	r4, [r2, #0]
 80056d2:	7003      	strb	r3, [r0, #0]
 80056d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056d6:	461c      	mov	r4, r3
 80056d8:	e00c      	b.n	80056f4 <__strtok_r+0x4c>
 80056da:	b91d      	cbnz	r5, 80056e4 <__strtok_r+0x3c>
 80056dc:	4627      	mov	r7, r4
 80056de:	f814 3b01 	ldrb.w	r3, [r4], #1
 80056e2:	460e      	mov	r6, r1
 80056e4:	f816 5b01 	ldrb.w	r5, [r6], #1
 80056e8:	42ab      	cmp	r3, r5
 80056ea:	d1f6      	bne.n	80056da <__strtok_r+0x32>
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f2      	beq.n	80056d6 <__strtok_r+0x2e>
 80056f0:	2300      	movs	r3, #0
 80056f2:	703b      	strb	r3, [r7, #0]
 80056f4:	6014      	str	r4, [r2, #0]
 80056f6:	e7ed      	b.n	80056d4 <__strtok_r+0x2c>

080056f8 <strstr>:
 80056f8:	780a      	ldrb	r2, [r1, #0]
 80056fa:	b570      	push	{r4, r5, r6, lr}
 80056fc:	b96a      	cbnz	r2, 800571a <strstr+0x22>
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
 8005700:	429a      	cmp	r2, r3
 8005702:	d109      	bne.n	8005718 <strstr+0x20>
 8005704:	460c      	mov	r4, r1
 8005706:	4605      	mov	r5, r0
 8005708:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0f6      	beq.n	80056fe <strstr+0x6>
 8005710:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005714:	429e      	cmp	r6, r3
 8005716:	d0f7      	beq.n	8005708 <strstr+0x10>
 8005718:	3001      	adds	r0, #1
 800571a:	7803      	ldrb	r3, [r0, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1ef      	bne.n	8005700 <strstr+0x8>
 8005720:	4618      	mov	r0, r3
 8005722:	e7ec      	b.n	80056fe <strstr+0x6>

08005724 <_close_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4d06      	ldr	r5, [pc, #24]	@ (8005740 <_close_r+0x1c>)
 8005728:	2300      	movs	r3, #0
 800572a:	4604      	mov	r4, r0
 800572c:	4608      	mov	r0, r1
 800572e:	602b      	str	r3, [r5, #0]
 8005730:	f7fc fb44 	bl	8001dbc <_close>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d102      	bne.n	800573e <_close_r+0x1a>
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	b103      	cbz	r3, 800573e <_close_r+0x1a>
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	20000bec 	.word	0x20000bec

08005744 <_lseek_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4d07      	ldr	r5, [pc, #28]	@ (8005764 <_lseek_r+0x20>)
 8005748:	4604      	mov	r4, r0
 800574a:	4608      	mov	r0, r1
 800574c:	4611      	mov	r1, r2
 800574e:	2200      	movs	r2, #0
 8005750:	602a      	str	r2, [r5, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	f7fc fb59 	bl	8001e0a <_lseek>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	d102      	bne.n	8005762 <_lseek_r+0x1e>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	b103      	cbz	r3, 8005762 <_lseek_r+0x1e>
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	bd38      	pop	{r3, r4, r5, pc}
 8005764:	20000bec 	.word	0x20000bec

08005768 <_read_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4d07      	ldr	r5, [pc, #28]	@ (8005788 <_read_r+0x20>)
 800576c:	4604      	mov	r4, r0
 800576e:	4608      	mov	r0, r1
 8005770:	4611      	mov	r1, r2
 8005772:	2200      	movs	r2, #0
 8005774:	602a      	str	r2, [r5, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	f7fc fae7 	bl	8001d4a <_read>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	d102      	bne.n	8005786 <_read_r+0x1e>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	b103      	cbz	r3, 8005786 <_read_r+0x1e>
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	bd38      	pop	{r3, r4, r5, pc}
 8005788:	20000bec 	.word	0x20000bec

0800578c <_write_r>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4d07      	ldr	r5, [pc, #28]	@ (80057ac <_write_r+0x20>)
 8005790:	4604      	mov	r4, r0
 8005792:	4608      	mov	r0, r1
 8005794:	4611      	mov	r1, r2
 8005796:	2200      	movs	r2, #0
 8005798:	602a      	str	r2, [r5, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	f7fc faf2 	bl	8001d84 <_write>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d102      	bne.n	80057aa <_write_r+0x1e>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	b103      	cbz	r3, 80057aa <_write_r+0x1e>
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	20000bec 	.word	0x20000bec

080057b0 <__errno>:
 80057b0:	4b01      	ldr	r3, [pc, #4]	@ (80057b8 <__errno+0x8>)
 80057b2:	6818      	ldr	r0, [r3, #0]
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	2000001c 	.word	0x2000001c

080057bc <__libc_init_array>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	4d0d      	ldr	r5, [pc, #52]	@ (80057f4 <__libc_init_array+0x38>)
 80057c0:	4c0d      	ldr	r4, [pc, #52]	@ (80057f8 <__libc_init_array+0x3c>)
 80057c2:	1b64      	subs	r4, r4, r5
 80057c4:	10a4      	asrs	r4, r4, #2
 80057c6:	2600      	movs	r6, #0
 80057c8:	42a6      	cmp	r6, r4
 80057ca:	d109      	bne.n	80057e0 <__libc_init_array+0x24>
 80057cc:	4d0b      	ldr	r5, [pc, #44]	@ (80057fc <__libc_init_array+0x40>)
 80057ce:	4c0c      	ldr	r4, [pc, #48]	@ (8005800 <__libc_init_array+0x44>)
 80057d0:	f000 ff98 	bl	8006704 <_init>
 80057d4:	1b64      	subs	r4, r4, r5
 80057d6:	10a4      	asrs	r4, r4, #2
 80057d8:	2600      	movs	r6, #0
 80057da:	42a6      	cmp	r6, r4
 80057dc:	d105      	bne.n	80057ea <__libc_init_array+0x2e>
 80057de:	bd70      	pop	{r4, r5, r6, pc}
 80057e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e4:	4798      	blx	r3
 80057e6:	3601      	adds	r6, #1
 80057e8:	e7ee      	b.n	80057c8 <__libc_init_array+0xc>
 80057ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ee:	4798      	blx	r3
 80057f0:	3601      	adds	r6, #1
 80057f2:	e7f2      	b.n	80057da <__libc_init_array+0x1e>
 80057f4:	08006c68 	.word	0x08006c68
 80057f8:	08006c68 	.word	0x08006c68
 80057fc:	08006c68 	.word	0x08006c68
 8005800:	08006c6c 	.word	0x08006c6c

08005804 <__retarget_lock_init_recursive>:
 8005804:	4770      	bx	lr

08005806 <__retarget_lock_acquire_recursive>:
 8005806:	4770      	bx	lr

08005808 <__retarget_lock_release_recursive>:
 8005808:	4770      	bx	lr

0800580a <strcpy>:
 800580a:	4603      	mov	r3, r0
 800580c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005810:	f803 2b01 	strb.w	r2, [r3], #1
 8005814:	2a00      	cmp	r2, #0
 8005816:	d1f9      	bne.n	800580c <strcpy+0x2>
 8005818:	4770      	bx	lr

0800581a <memcpy>:
 800581a:	440a      	add	r2, r1
 800581c:	4291      	cmp	r1, r2
 800581e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005822:	d100      	bne.n	8005826 <memcpy+0xc>
 8005824:	4770      	bx	lr
 8005826:	b510      	push	{r4, lr}
 8005828:	f811 4b01 	ldrb.w	r4, [r1], #1
 800582c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005830:	4291      	cmp	r1, r2
 8005832:	d1f9      	bne.n	8005828 <memcpy+0xe>
 8005834:	bd10      	pop	{r4, pc}
	...

08005838 <__assert_func>:
 8005838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800583a:	4614      	mov	r4, r2
 800583c:	461a      	mov	r2, r3
 800583e:	4b09      	ldr	r3, [pc, #36]	@ (8005864 <__assert_func+0x2c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4605      	mov	r5, r0
 8005844:	68d8      	ldr	r0, [r3, #12]
 8005846:	b14c      	cbz	r4, 800585c <__assert_func+0x24>
 8005848:	4b07      	ldr	r3, [pc, #28]	@ (8005868 <__assert_func+0x30>)
 800584a:	9100      	str	r1, [sp, #0]
 800584c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005850:	4906      	ldr	r1, [pc, #24]	@ (800586c <__assert_func+0x34>)
 8005852:	462b      	mov	r3, r5
 8005854:	f000 fde0 	bl	8006418 <fiprintf>
 8005858:	f000 fed2 	bl	8006600 <abort>
 800585c:	4b04      	ldr	r3, [pc, #16]	@ (8005870 <__assert_func+0x38>)
 800585e:	461c      	mov	r4, r3
 8005860:	e7f3      	b.n	800584a <__assert_func+0x12>
 8005862:	bf00      	nop
 8005864:	2000001c 	.word	0x2000001c
 8005868:	08006bee 	.word	0x08006bee
 800586c:	08006bfb 	.word	0x08006bfb
 8005870:	08006c29 	.word	0x08006c29

08005874 <_free_r>:
 8005874:	b538      	push	{r3, r4, r5, lr}
 8005876:	4605      	mov	r5, r0
 8005878:	2900      	cmp	r1, #0
 800587a:	d041      	beq.n	8005900 <_free_r+0x8c>
 800587c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005880:	1f0c      	subs	r4, r1, #4
 8005882:	2b00      	cmp	r3, #0
 8005884:	bfb8      	it	lt
 8005886:	18e4      	addlt	r4, r4, r3
 8005888:	f000 f8e8 	bl	8005a5c <__malloc_lock>
 800588c:	4a1d      	ldr	r2, [pc, #116]	@ (8005904 <_free_r+0x90>)
 800588e:	6813      	ldr	r3, [r2, #0]
 8005890:	b933      	cbnz	r3, 80058a0 <_free_r+0x2c>
 8005892:	6063      	str	r3, [r4, #4]
 8005894:	6014      	str	r4, [r2, #0]
 8005896:	4628      	mov	r0, r5
 8005898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800589c:	f000 b8e4 	b.w	8005a68 <__malloc_unlock>
 80058a0:	42a3      	cmp	r3, r4
 80058a2:	d908      	bls.n	80058b6 <_free_r+0x42>
 80058a4:	6820      	ldr	r0, [r4, #0]
 80058a6:	1821      	adds	r1, r4, r0
 80058a8:	428b      	cmp	r3, r1
 80058aa:	bf01      	itttt	eq
 80058ac:	6819      	ldreq	r1, [r3, #0]
 80058ae:	685b      	ldreq	r3, [r3, #4]
 80058b0:	1809      	addeq	r1, r1, r0
 80058b2:	6021      	streq	r1, [r4, #0]
 80058b4:	e7ed      	b.n	8005892 <_free_r+0x1e>
 80058b6:	461a      	mov	r2, r3
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	b10b      	cbz	r3, 80058c0 <_free_r+0x4c>
 80058bc:	42a3      	cmp	r3, r4
 80058be:	d9fa      	bls.n	80058b6 <_free_r+0x42>
 80058c0:	6811      	ldr	r1, [r2, #0]
 80058c2:	1850      	adds	r0, r2, r1
 80058c4:	42a0      	cmp	r0, r4
 80058c6:	d10b      	bne.n	80058e0 <_free_r+0x6c>
 80058c8:	6820      	ldr	r0, [r4, #0]
 80058ca:	4401      	add	r1, r0
 80058cc:	1850      	adds	r0, r2, r1
 80058ce:	4283      	cmp	r3, r0
 80058d0:	6011      	str	r1, [r2, #0]
 80058d2:	d1e0      	bne.n	8005896 <_free_r+0x22>
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	6053      	str	r3, [r2, #4]
 80058da:	4408      	add	r0, r1
 80058dc:	6010      	str	r0, [r2, #0]
 80058de:	e7da      	b.n	8005896 <_free_r+0x22>
 80058e0:	d902      	bls.n	80058e8 <_free_r+0x74>
 80058e2:	230c      	movs	r3, #12
 80058e4:	602b      	str	r3, [r5, #0]
 80058e6:	e7d6      	b.n	8005896 <_free_r+0x22>
 80058e8:	6820      	ldr	r0, [r4, #0]
 80058ea:	1821      	adds	r1, r4, r0
 80058ec:	428b      	cmp	r3, r1
 80058ee:	bf04      	itt	eq
 80058f0:	6819      	ldreq	r1, [r3, #0]
 80058f2:	685b      	ldreq	r3, [r3, #4]
 80058f4:	6063      	str	r3, [r4, #4]
 80058f6:	bf04      	itt	eq
 80058f8:	1809      	addeq	r1, r1, r0
 80058fa:	6021      	streq	r1, [r4, #0]
 80058fc:	6054      	str	r4, [r2, #4]
 80058fe:	e7ca      	b.n	8005896 <_free_r+0x22>
 8005900:	bd38      	pop	{r3, r4, r5, pc}
 8005902:	bf00      	nop
 8005904:	20000bf8 	.word	0x20000bf8

08005908 <malloc>:
 8005908:	4b02      	ldr	r3, [pc, #8]	@ (8005914 <malloc+0xc>)
 800590a:	4601      	mov	r1, r0
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	f000 b825 	b.w	800595c <_malloc_r>
 8005912:	bf00      	nop
 8005914:	2000001c 	.word	0x2000001c

08005918 <sbrk_aligned>:
 8005918:	b570      	push	{r4, r5, r6, lr}
 800591a:	4e0f      	ldr	r6, [pc, #60]	@ (8005958 <sbrk_aligned+0x40>)
 800591c:	460c      	mov	r4, r1
 800591e:	6831      	ldr	r1, [r6, #0]
 8005920:	4605      	mov	r5, r0
 8005922:	b911      	cbnz	r1, 800592a <sbrk_aligned+0x12>
 8005924:	f000 fe5c 	bl	80065e0 <_sbrk_r>
 8005928:	6030      	str	r0, [r6, #0]
 800592a:	4621      	mov	r1, r4
 800592c:	4628      	mov	r0, r5
 800592e:	f000 fe57 	bl	80065e0 <_sbrk_r>
 8005932:	1c43      	adds	r3, r0, #1
 8005934:	d103      	bne.n	800593e <sbrk_aligned+0x26>
 8005936:	f04f 34ff 	mov.w	r4, #4294967295
 800593a:	4620      	mov	r0, r4
 800593c:	bd70      	pop	{r4, r5, r6, pc}
 800593e:	1cc4      	adds	r4, r0, #3
 8005940:	f024 0403 	bic.w	r4, r4, #3
 8005944:	42a0      	cmp	r0, r4
 8005946:	d0f8      	beq.n	800593a <sbrk_aligned+0x22>
 8005948:	1a21      	subs	r1, r4, r0
 800594a:	4628      	mov	r0, r5
 800594c:	f000 fe48 	bl	80065e0 <_sbrk_r>
 8005950:	3001      	adds	r0, #1
 8005952:	d1f2      	bne.n	800593a <sbrk_aligned+0x22>
 8005954:	e7ef      	b.n	8005936 <sbrk_aligned+0x1e>
 8005956:	bf00      	nop
 8005958:	20000bf4 	.word	0x20000bf4

0800595c <_malloc_r>:
 800595c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005960:	1ccd      	adds	r5, r1, #3
 8005962:	f025 0503 	bic.w	r5, r5, #3
 8005966:	3508      	adds	r5, #8
 8005968:	2d0c      	cmp	r5, #12
 800596a:	bf38      	it	cc
 800596c:	250c      	movcc	r5, #12
 800596e:	2d00      	cmp	r5, #0
 8005970:	4606      	mov	r6, r0
 8005972:	db01      	blt.n	8005978 <_malloc_r+0x1c>
 8005974:	42a9      	cmp	r1, r5
 8005976:	d904      	bls.n	8005982 <_malloc_r+0x26>
 8005978:	230c      	movs	r3, #12
 800597a:	6033      	str	r3, [r6, #0]
 800597c:	2000      	movs	r0, #0
 800597e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005982:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a58 <_malloc_r+0xfc>
 8005986:	f000 f869 	bl	8005a5c <__malloc_lock>
 800598a:	f8d8 3000 	ldr.w	r3, [r8]
 800598e:	461c      	mov	r4, r3
 8005990:	bb44      	cbnz	r4, 80059e4 <_malloc_r+0x88>
 8005992:	4629      	mov	r1, r5
 8005994:	4630      	mov	r0, r6
 8005996:	f7ff ffbf 	bl	8005918 <sbrk_aligned>
 800599a:	1c43      	adds	r3, r0, #1
 800599c:	4604      	mov	r4, r0
 800599e:	d158      	bne.n	8005a52 <_malloc_r+0xf6>
 80059a0:	f8d8 4000 	ldr.w	r4, [r8]
 80059a4:	4627      	mov	r7, r4
 80059a6:	2f00      	cmp	r7, #0
 80059a8:	d143      	bne.n	8005a32 <_malloc_r+0xd6>
 80059aa:	2c00      	cmp	r4, #0
 80059ac:	d04b      	beq.n	8005a46 <_malloc_r+0xea>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	4639      	mov	r1, r7
 80059b2:	4630      	mov	r0, r6
 80059b4:	eb04 0903 	add.w	r9, r4, r3
 80059b8:	f000 fe12 	bl	80065e0 <_sbrk_r>
 80059bc:	4581      	cmp	r9, r0
 80059be:	d142      	bne.n	8005a46 <_malloc_r+0xea>
 80059c0:	6821      	ldr	r1, [r4, #0]
 80059c2:	1a6d      	subs	r5, r5, r1
 80059c4:	4629      	mov	r1, r5
 80059c6:	4630      	mov	r0, r6
 80059c8:	f7ff ffa6 	bl	8005918 <sbrk_aligned>
 80059cc:	3001      	adds	r0, #1
 80059ce:	d03a      	beq.n	8005a46 <_malloc_r+0xea>
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	442b      	add	r3, r5
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	f8d8 3000 	ldr.w	r3, [r8]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	bb62      	cbnz	r2, 8005a38 <_malloc_r+0xdc>
 80059de:	f8c8 7000 	str.w	r7, [r8]
 80059e2:	e00f      	b.n	8005a04 <_malloc_r+0xa8>
 80059e4:	6822      	ldr	r2, [r4, #0]
 80059e6:	1b52      	subs	r2, r2, r5
 80059e8:	d420      	bmi.n	8005a2c <_malloc_r+0xd0>
 80059ea:	2a0b      	cmp	r2, #11
 80059ec:	d917      	bls.n	8005a1e <_malloc_r+0xc2>
 80059ee:	1961      	adds	r1, r4, r5
 80059f0:	42a3      	cmp	r3, r4
 80059f2:	6025      	str	r5, [r4, #0]
 80059f4:	bf18      	it	ne
 80059f6:	6059      	strne	r1, [r3, #4]
 80059f8:	6863      	ldr	r3, [r4, #4]
 80059fa:	bf08      	it	eq
 80059fc:	f8c8 1000 	streq.w	r1, [r8]
 8005a00:	5162      	str	r2, [r4, r5]
 8005a02:	604b      	str	r3, [r1, #4]
 8005a04:	4630      	mov	r0, r6
 8005a06:	f000 f82f 	bl	8005a68 <__malloc_unlock>
 8005a0a:	f104 000b 	add.w	r0, r4, #11
 8005a0e:	1d23      	adds	r3, r4, #4
 8005a10:	f020 0007 	bic.w	r0, r0, #7
 8005a14:	1ac2      	subs	r2, r0, r3
 8005a16:	bf1c      	itt	ne
 8005a18:	1a1b      	subne	r3, r3, r0
 8005a1a:	50a3      	strne	r3, [r4, r2]
 8005a1c:	e7af      	b.n	800597e <_malloc_r+0x22>
 8005a1e:	6862      	ldr	r2, [r4, #4]
 8005a20:	42a3      	cmp	r3, r4
 8005a22:	bf0c      	ite	eq
 8005a24:	f8c8 2000 	streq.w	r2, [r8]
 8005a28:	605a      	strne	r2, [r3, #4]
 8005a2a:	e7eb      	b.n	8005a04 <_malloc_r+0xa8>
 8005a2c:	4623      	mov	r3, r4
 8005a2e:	6864      	ldr	r4, [r4, #4]
 8005a30:	e7ae      	b.n	8005990 <_malloc_r+0x34>
 8005a32:	463c      	mov	r4, r7
 8005a34:	687f      	ldr	r7, [r7, #4]
 8005a36:	e7b6      	b.n	80059a6 <_malloc_r+0x4a>
 8005a38:	461a      	mov	r2, r3
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	42a3      	cmp	r3, r4
 8005a3e:	d1fb      	bne.n	8005a38 <_malloc_r+0xdc>
 8005a40:	2300      	movs	r3, #0
 8005a42:	6053      	str	r3, [r2, #4]
 8005a44:	e7de      	b.n	8005a04 <_malloc_r+0xa8>
 8005a46:	230c      	movs	r3, #12
 8005a48:	6033      	str	r3, [r6, #0]
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f000 f80c 	bl	8005a68 <__malloc_unlock>
 8005a50:	e794      	b.n	800597c <_malloc_r+0x20>
 8005a52:	6005      	str	r5, [r0, #0]
 8005a54:	e7d6      	b.n	8005a04 <_malloc_r+0xa8>
 8005a56:	bf00      	nop
 8005a58:	20000bf8 	.word	0x20000bf8

08005a5c <__malloc_lock>:
 8005a5c:	4801      	ldr	r0, [pc, #4]	@ (8005a64 <__malloc_lock+0x8>)
 8005a5e:	f7ff bed2 	b.w	8005806 <__retarget_lock_acquire_recursive>
 8005a62:	bf00      	nop
 8005a64:	20000bf0 	.word	0x20000bf0

08005a68 <__malloc_unlock>:
 8005a68:	4801      	ldr	r0, [pc, #4]	@ (8005a70 <__malloc_unlock+0x8>)
 8005a6a:	f7ff becd 	b.w	8005808 <__retarget_lock_release_recursive>
 8005a6e:	bf00      	nop
 8005a70:	20000bf0 	.word	0x20000bf0

08005a74 <__ssputs_r>:
 8005a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a78:	688e      	ldr	r6, [r1, #8]
 8005a7a:	461f      	mov	r7, r3
 8005a7c:	42be      	cmp	r6, r7
 8005a7e:	680b      	ldr	r3, [r1, #0]
 8005a80:	4682      	mov	sl, r0
 8005a82:	460c      	mov	r4, r1
 8005a84:	4690      	mov	r8, r2
 8005a86:	d82d      	bhi.n	8005ae4 <__ssputs_r+0x70>
 8005a88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a90:	d026      	beq.n	8005ae0 <__ssputs_r+0x6c>
 8005a92:	6965      	ldr	r5, [r4, #20]
 8005a94:	6909      	ldr	r1, [r1, #16]
 8005a96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a9a:	eba3 0901 	sub.w	r9, r3, r1
 8005a9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005aa2:	1c7b      	adds	r3, r7, #1
 8005aa4:	444b      	add	r3, r9
 8005aa6:	106d      	asrs	r5, r5, #1
 8005aa8:	429d      	cmp	r5, r3
 8005aaa:	bf38      	it	cc
 8005aac:	461d      	movcc	r5, r3
 8005aae:	0553      	lsls	r3, r2, #21
 8005ab0:	d527      	bpl.n	8005b02 <__ssputs_r+0x8e>
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	f7ff ff52 	bl	800595c <_malloc_r>
 8005ab8:	4606      	mov	r6, r0
 8005aba:	b360      	cbz	r0, 8005b16 <__ssputs_r+0xa2>
 8005abc:	6921      	ldr	r1, [r4, #16]
 8005abe:	464a      	mov	r2, r9
 8005ac0:	f7ff feab 	bl	800581a <memcpy>
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ace:	81a3      	strh	r3, [r4, #12]
 8005ad0:	6126      	str	r6, [r4, #16]
 8005ad2:	6165      	str	r5, [r4, #20]
 8005ad4:	444e      	add	r6, r9
 8005ad6:	eba5 0509 	sub.w	r5, r5, r9
 8005ada:	6026      	str	r6, [r4, #0]
 8005adc:	60a5      	str	r5, [r4, #8]
 8005ade:	463e      	mov	r6, r7
 8005ae0:	42be      	cmp	r6, r7
 8005ae2:	d900      	bls.n	8005ae6 <__ssputs_r+0x72>
 8005ae4:	463e      	mov	r6, r7
 8005ae6:	6820      	ldr	r0, [r4, #0]
 8005ae8:	4632      	mov	r2, r6
 8005aea:	4641      	mov	r1, r8
 8005aec:	f000 fd3c 	bl	8006568 <memmove>
 8005af0:	68a3      	ldr	r3, [r4, #8]
 8005af2:	1b9b      	subs	r3, r3, r6
 8005af4:	60a3      	str	r3, [r4, #8]
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	4433      	add	r3, r6
 8005afa:	6023      	str	r3, [r4, #0]
 8005afc:	2000      	movs	r0, #0
 8005afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b02:	462a      	mov	r2, r5
 8005b04:	f000 fd83 	bl	800660e <_realloc_r>
 8005b08:	4606      	mov	r6, r0
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	d1e0      	bne.n	8005ad0 <__ssputs_r+0x5c>
 8005b0e:	6921      	ldr	r1, [r4, #16]
 8005b10:	4650      	mov	r0, sl
 8005b12:	f7ff feaf 	bl	8005874 <_free_r>
 8005b16:	230c      	movs	r3, #12
 8005b18:	f8ca 3000 	str.w	r3, [sl]
 8005b1c:	89a3      	ldrh	r3, [r4, #12]
 8005b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b22:	81a3      	strh	r3, [r4, #12]
 8005b24:	f04f 30ff 	mov.w	r0, #4294967295
 8005b28:	e7e9      	b.n	8005afe <__ssputs_r+0x8a>
	...

08005b2c <_svfiprintf_r>:
 8005b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	4698      	mov	r8, r3
 8005b32:	898b      	ldrh	r3, [r1, #12]
 8005b34:	061b      	lsls	r3, r3, #24
 8005b36:	b09d      	sub	sp, #116	@ 0x74
 8005b38:	4607      	mov	r7, r0
 8005b3a:	460d      	mov	r5, r1
 8005b3c:	4614      	mov	r4, r2
 8005b3e:	d510      	bpl.n	8005b62 <_svfiprintf_r+0x36>
 8005b40:	690b      	ldr	r3, [r1, #16]
 8005b42:	b973      	cbnz	r3, 8005b62 <_svfiprintf_r+0x36>
 8005b44:	2140      	movs	r1, #64	@ 0x40
 8005b46:	f7ff ff09 	bl	800595c <_malloc_r>
 8005b4a:	6028      	str	r0, [r5, #0]
 8005b4c:	6128      	str	r0, [r5, #16]
 8005b4e:	b930      	cbnz	r0, 8005b5e <_svfiprintf_r+0x32>
 8005b50:	230c      	movs	r3, #12
 8005b52:	603b      	str	r3, [r7, #0]
 8005b54:	f04f 30ff 	mov.w	r0, #4294967295
 8005b58:	b01d      	add	sp, #116	@ 0x74
 8005b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b5e:	2340      	movs	r3, #64	@ 0x40
 8005b60:	616b      	str	r3, [r5, #20]
 8005b62:	2300      	movs	r3, #0
 8005b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b66:	2320      	movs	r3, #32
 8005b68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b70:	2330      	movs	r3, #48	@ 0x30
 8005b72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d10 <_svfiprintf_r+0x1e4>
 8005b76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b7a:	f04f 0901 	mov.w	r9, #1
 8005b7e:	4623      	mov	r3, r4
 8005b80:	469a      	mov	sl, r3
 8005b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b86:	b10a      	cbz	r2, 8005b8c <_svfiprintf_r+0x60>
 8005b88:	2a25      	cmp	r2, #37	@ 0x25
 8005b8a:	d1f9      	bne.n	8005b80 <_svfiprintf_r+0x54>
 8005b8c:	ebba 0b04 	subs.w	fp, sl, r4
 8005b90:	d00b      	beq.n	8005baa <_svfiprintf_r+0x7e>
 8005b92:	465b      	mov	r3, fp
 8005b94:	4622      	mov	r2, r4
 8005b96:	4629      	mov	r1, r5
 8005b98:	4638      	mov	r0, r7
 8005b9a:	f7ff ff6b 	bl	8005a74 <__ssputs_r>
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	f000 80a7 	beq.w	8005cf2 <_svfiprintf_r+0x1c6>
 8005ba4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ba6:	445a      	add	r2, fp
 8005ba8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005baa:	f89a 3000 	ldrb.w	r3, [sl]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 809f 	beq.w	8005cf2 <_svfiprintf_r+0x1c6>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bbe:	f10a 0a01 	add.w	sl, sl, #1
 8005bc2:	9304      	str	r3, [sp, #16]
 8005bc4:	9307      	str	r3, [sp, #28]
 8005bc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bca:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bcc:	4654      	mov	r4, sl
 8005bce:	2205      	movs	r2, #5
 8005bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd4:	484e      	ldr	r0, [pc, #312]	@ (8005d10 <_svfiprintf_r+0x1e4>)
 8005bd6:	f7fa fb1b 	bl	8000210 <memchr>
 8005bda:	9a04      	ldr	r2, [sp, #16]
 8005bdc:	b9d8      	cbnz	r0, 8005c16 <_svfiprintf_r+0xea>
 8005bde:	06d0      	lsls	r0, r2, #27
 8005be0:	bf44      	itt	mi
 8005be2:	2320      	movmi	r3, #32
 8005be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005be8:	0711      	lsls	r1, r2, #28
 8005bea:	bf44      	itt	mi
 8005bec:	232b      	movmi	r3, #43	@ 0x2b
 8005bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8005bf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bf8:	d015      	beq.n	8005c26 <_svfiprintf_r+0xfa>
 8005bfa:	9a07      	ldr	r2, [sp, #28]
 8005bfc:	4654      	mov	r4, sl
 8005bfe:	2000      	movs	r0, #0
 8005c00:	f04f 0c0a 	mov.w	ip, #10
 8005c04:	4621      	mov	r1, r4
 8005c06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c0a:	3b30      	subs	r3, #48	@ 0x30
 8005c0c:	2b09      	cmp	r3, #9
 8005c0e:	d94b      	bls.n	8005ca8 <_svfiprintf_r+0x17c>
 8005c10:	b1b0      	cbz	r0, 8005c40 <_svfiprintf_r+0x114>
 8005c12:	9207      	str	r2, [sp, #28]
 8005c14:	e014      	b.n	8005c40 <_svfiprintf_r+0x114>
 8005c16:	eba0 0308 	sub.w	r3, r0, r8
 8005c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	9304      	str	r3, [sp, #16]
 8005c22:	46a2      	mov	sl, r4
 8005c24:	e7d2      	b.n	8005bcc <_svfiprintf_r+0xa0>
 8005c26:	9b03      	ldr	r3, [sp, #12]
 8005c28:	1d19      	adds	r1, r3, #4
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	9103      	str	r1, [sp, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	bfbb      	ittet	lt
 8005c32:	425b      	neglt	r3, r3
 8005c34:	f042 0202 	orrlt.w	r2, r2, #2
 8005c38:	9307      	strge	r3, [sp, #28]
 8005c3a:	9307      	strlt	r3, [sp, #28]
 8005c3c:	bfb8      	it	lt
 8005c3e:	9204      	strlt	r2, [sp, #16]
 8005c40:	7823      	ldrb	r3, [r4, #0]
 8005c42:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c44:	d10a      	bne.n	8005c5c <_svfiprintf_r+0x130>
 8005c46:	7863      	ldrb	r3, [r4, #1]
 8005c48:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c4a:	d132      	bne.n	8005cb2 <_svfiprintf_r+0x186>
 8005c4c:	9b03      	ldr	r3, [sp, #12]
 8005c4e:	1d1a      	adds	r2, r3, #4
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	9203      	str	r2, [sp, #12]
 8005c54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c58:	3402      	adds	r4, #2
 8005c5a:	9305      	str	r3, [sp, #20]
 8005c5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d20 <_svfiprintf_r+0x1f4>
 8005c60:	7821      	ldrb	r1, [r4, #0]
 8005c62:	2203      	movs	r2, #3
 8005c64:	4650      	mov	r0, sl
 8005c66:	f7fa fad3 	bl	8000210 <memchr>
 8005c6a:	b138      	cbz	r0, 8005c7c <_svfiprintf_r+0x150>
 8005c6c:	9b04      	ldr	r3, [sp, #16]
 8005c6e:	eba0 000a 	sub.w	r0, r0, sl
 8005c72:	2240      	movs	r2, #64	@ 0x40
 8005c74:	4082      	lsls	r2, r0
 8005c76:	4313      	orrs	r3, r2
 8005c78:	3401      	adds	r4, #1
 8005c7a:	9304      	str	r3, [sp, #16]
 8005c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c80:	4824      	ldr	r0, [pc, #144]	@ (8005d14 <_svfiprintf_r+0x1e8>)
 8005c82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c86:	2206      	movs	r2, #6
 8005c88:	f7fa fac2 	bl	8000210 <memchr>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d036      	beq.n	8005cfe <_svfiprintf_r+0x1d2>
 8005c90:	4b21      	ldr	r3, [pc, #132]	@ (8005d18 <_svfiprintf_r+0x1ec>)
 8005c92:	bb1b      	cbnz	r3, 8005cdc <_svfiprintf_r+0x1b0>
 8005c94:	9b03      	ldr	r3, [sp, #12]
 8005c96:	3307      	adds	r3, #7
 8005c98:	f023 0307 	bic.w	r3, r3, #7
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	9303      	str	r3, [sp, #12]
 8005ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ca2:	4433      	add	r3, r6
 8005ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ca6:	e76a      	b.n	8005b7e <_svfiprintf_r+0x52>
 8005ca8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cac:	460c      	mov	r4, r1
 8005cae:	2001      	movs	r0, #1
 8005cb0:	e7a8      	b.n	8005c04 <_svfiprintf_r+0xd8>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	3401      	adds	r4, #1
 8005cb6:	9305      	str	r3, [sp, #20]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	f04f 0c0a 	mov.w	ip, #10
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cc4:	3a30      	subs	r2, #48	@ 0x30
 8005cc6:	2a09      	cmp	r2, #9
 8005cc8:	d903      	bls.n	8005cd2 <_svfiprintf_r+0x1a6>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0c6      	beq.n	8005c5c <_svfiprintf_r+0x130>
 8005cce:	9105      	str	r1, [sp, #20]
 8005cd0:	e7c4      	b.n	8005c5c <_svfiprintf_r+0x130>
 8005cd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e7f0      	b.n	8005cbe <_svfiprintf_r+0x192>
 8005cdc:	ab03      	add	r3, sp, #12
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	462a      	mov	r2, r5
 8005ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8005d1c <_svfiprintf_r+0x1f0>)
 8005ce4:	a904      	add	r1, sp, #16
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	f3af 8000 	nop.w
 8005cec:	1c42      	adds	r2, r0, #1
 8005cee:	4606      	mov	r6, r0
 8005cf0:	d1d6      	bne.n	8005ca0 <_svfiprintf_r+0x174>
 8005cf2:	89ab      	ldrh	r3, [r5, #12]
 8005cf4:	065b      	lsls	r3, r3, #25
 8005cf6:	f53f af2d 	bmi.w	8005b54 <_svfiprintf_r+0x28>
 8005cfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cfc:	e72c      	b.n	8005b58 <_svfiprintf_r+0x2c>
 8005cfe:	ab03      	add	r3, sp, #12
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	462a      	mov	r2, r5
 8005d04:	4b05      	ldr	r3, [pc, #20]	@ (8005d1c <_svfiprintf_r+0x1f0>)
 8005d06:	a904      	add	r1, sp, #16
 8005d08:	4638      	mov	r0, r7
 8005d0a:	f000 f9bb 	bl	8006084 <_printf_i>
 8005d0e:	e7ed      	b.n	8005cec <_svfiprintf_r+0x1c0>
 8005d10:	08006c2a 	.word	0x08006c2a
 8005d14:	08006c34 	.word	0x08006c34
 8005d18:	00000000 	.word	0x00000000
 8005d1c:	08005a75 	.word	0x08005a75
 8005d20:	08006c30 	.word	0x08006c30

08005d24 <__sfputc_r>:
 8005d24:	6893      	ldr	r3, [r2, #8]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	b410      	push	{r4}
 8005d2c:	6093      	str	r3, [r2, #8]
 8005d2e:	da08      	bge.n	8005d42 <__sfputc_r+0x1e>
 8005d30:	6994      	ldr	r4, [r2, #24]
 8005d32:	42a3      	cmp	r3, r4
 8005d34:	db01      	blt.n	8005d3a <__sfputc_r+0x16>
 8005d36:	290a      	cmp	r1, #10
 8005d38:	d103      	bne.n	8005d42 <__sfputc_r+0x1e>
 8005d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d3e:	f7ff bbc2 	b.w	80054c6 <__swbuf_r>
 8005d42:	6813      	ldr	r3, [r2, #0]
 8005d44:	1c58      	adds	r0, r3, #1
 8005d46:	6010      	str	r0, [r2, #0]
 8005d48:	7019      	strb	r1, [r3, #0]
 8005d4a:	4608      	mov	r0, r1
 8005d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <__sfputs_r>:
 8005d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d54:	4606      	mov	r6, r0
 8005d56:	460f      	mov	r7, r1
 8005d58:	4614      	mov	r4, r2
 8005d5a:	18d5      	adds	r5, r2, r3
 8005d5c:	42ac      	cmp	r4, r5
 8005d5e:	d101      	bne.n	8005d64 <__sfputs_r+0x12>
 8005d60:	2000      	movs	r0, #0
 8005d62:	e007      	b.n	8005d74 <__sfputs_r+0x22>
 8005d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d68:	463a      	mov	r2, r7
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f7ff ffda 	bl	8005d24 <__sfputc_r>
 8005d70:	1c43      	adds	r3, r0, #1
 8005d72:	d1f3      	bne.n	8005d5c <__sfputs_r+0xa>
 8005d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d78 <_vfiprintf_r>:
 8005d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	460d      	mov	r5, r1
 8005d7e:	b09d      	sub	sp, #116	@ 0x74
 8005d80:	4614      	mov	r4, r2
 8005d82:	4698      	mov	r8, r3
 8005d84:	4606      	mov	r6, r0
 8005d86:	b118      	cbz	r0, 8005d90 <_vfiprintf_r+0x18>
 8005d88:	6a03      	ldr	r3, [r0, #32]
 8005d8a:	b90b      	cbnz	r3, 8005d90 <_vfiprintf_r+0x18>
 8005d8c:	f7ff fa88 	bl	80052a0 <__sinit>
 8005d90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d92:	07d9      	lsls	r1, r3, #31
 8005d94:	d405      	bmi.n	8005da2 <_vfiprintf_r+0x2a>
 8005d96:	89ab      	ldrh	r3, [r5, #12]
 8005d98:	059a      	lsls	r2, r3, #22
 8005d9a:	d402      	bmi.n	8005da2 <_vfiprintf_r+0x2a>
 8005d9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d9e:	f7ff fd32 	bl	8005806 <__retarget_lock_acquire_recursive>
 8005da2:	89ab      	ldrh	r3, [r5, #12]
 8005da4:	071b      	lsls	r3, r3, #28
 8005da6:	d501      	bpl.n	8005dac <_vfiprintf_r+0x34>
 8005da8:	692b      	ldr	r3, [r5, #16]
 8005daa:	b99b      	cbnz	r3, 8005dd4 <_vfiprintf_r+0x5c>
 8005dac:	4629      	mov	r1, r5
 8005dae:	4630      	mov	r0, r6
 8005db0:	f7ff fbc8 	bl	8005544 <__swsetup_r>
 8005db4:	b170      	cbz	r0, 8005dd4 <_vfiprintf_r+0x5c>
 8005db6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005db8:	07dc      	lsls	r4, r3, #31
 8005dba:	d504      	bpl.n	8005dc6 <_vfiprintf_r+0x4e>
 8005dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc0:	b01d      	add	sp, #116	@ 0x74
 8005dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc6:	89ab      	ldrh	r3, [r5, #12]
 8005dc8:	0598      	lsls	r0, r3, #22
 8005dca:	d4f7      	bmi.n	8005dbc <_vfiprintf_r+0x44>
 8005dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dce:	f7ff fd1b 	bl	8005808 <__retarget_lock_release_recursive>
 8005dd2:	e7f3      	b.n	8005dbc <_vfiprintf_r+0x44>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dd8:	2320      	movs	r3, #32
 8005dda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005dde:	f8cd 800c 	str.w	r8, [sp, #12]
 8005de2:	2330      	movs	r3, #48	@ 0x30
 8005de4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005f94 <_vfiprintf_r+0x21c>
 8005de8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005dec:	f04f 0901 	mov.w	r9, #1
 8005df0:	4623      	mov	r3, r4
 8005df2:	469a      	mov	sl, r3
 8005df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005df8:	b10a      	cbz	r2, 8005dfe <_vfiprintf_r+0x86>
 8005dfa:	2a25      	cmp	r2, #37	@ 0x25
 8005dfc:	d1f9      	bne.n	8005df2 <_vfiprintf_r+0x7a>
 8005dfe:	ebba 0b04 	subs.w	fp, sl, r4
 8005e02:	d00b      	beq.n	8005e1c <_vfiprintf_r+0xa4>
 8005e04:	465b      	mov	r3, fp
 8005e06:	4622      	mov	r2, r4
 8005e08:	4629      	mov	r1, r5
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f7ff ffa1 	bl	8005d52 <__sfputs_r>
 8005e10:	3001      	adds	r0, #1
 8005e12:	f000 80a7 	beq.w	8005f64 <_vfiprintf_r+0x1ec>
 8005e16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e18:	445a      	add	r2, fp
 8005e1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 809f 	beq.w	8005f64 <_vfiprintf_r+0x1ec>
 8005e26:	2300      	movs	r3, #0
 8005e28:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e30:	f10a 0a01 	add.w	sl, sl, #1
 8005e34:	9304      	str	r3, [sp, #16]
 8005e36:	9307      	str	r3, [sp, #28]
 8005e38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e3e:	4654      	mov	r4, sl
 8005e40:	2205      	movs	r2, #5
 8005e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e46:	4853      	ldr	r0, [pc, #332]	@ (8005f94 <_vfiprintf_r+0x21c>)
 8005e48:	f7fa f9e2 	bl	8000210 <memchr>
 8005e4c:	9a04      	ldr	r2, [sp, #16]
 8005e4e:	b9d8      	cbnz	r0, 8005e88 <_vfiprintf_r+0x110>
 8005e50:	06d1      	lsls	r1, r2, #27
 8005e52:	bf44      	itt	mi
 8005e54:	2320      	movmi	r3, #32
 8005e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e5a:	0713      	lsls	r3, r2, #28
 8005e5c:	bf44      	itt	mi
 8005e5e:	232b      	movmi	r3, #43	@ 0x2b
 8005e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e64:	f89a 3000 	ldrb.w	r3, [sl]
 8005e68:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e6a:	d015      	beq.n	8005e98 <_vfiprintf_r+0x120>
 8005e6c:	9a07      	ldr	r2, [sp, #28]
 8005e6e:	4654      	mov	r4, sl
 8005e70:	2000      	movs	r0, #0
 8005e72:	f04f 0c0a 	mov.w	ip, #10
 8005e76:	4621      	mov	r1, r4
 8005e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e7c:	3b30      	subs	r3, #48	@ 0x30
 8005e7e:	2b09      	cmp	r3, #9
 8005e80:	d94b      	bls.n	8005f1a <_vfiprintf_r+0x1a2>
 8005e82:	b1b0      	cbz	r0, 8005eb2 <_vfiprintf_r+0x13a>
 8005e84:	9207      	str	r2, [sp, #28]
 8005e86:	e014      	b.n	8005eb2 <_vfiprintf_r+0x13a>
 8005e88:	eba0 0308 	sub.w	r3, r0, r8
 8005e8c:	fa09 f303 	lsl.w	r3, r9, r3
 8005e90:	4313      	orrs	r3, r2
 8005e92:	9304      	str	r3, [sp, #16]
 8005e94:	46a2      	mov	sl, r4
 8005e96:	e7d2      	b.n	8005e3e <_vfiprintf_r+0xc6>
 8005e98:	9b03      	ldr	r3, [sp, #12]
 8005e9a:	1d19      	adds	r1, r3, #4
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	9103      	str	r1, [sp, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	bfbb      	ittet	lt
 8005ea4:	425b      	neglt	r3, r3
 8005ea6:	f042 0202 	orrlt.w	r2, r2, #2
 8005eaa:	9307      	strge	r3, [sp, #28]
 8005eac:	9307      	strlt	r3, [sp, #28]
 8005eae:	bfb8      	it	lt
 8005eb0:	9204      	strlt	r2, [sp, #16]
 8005eb2:	7823      	ldrb	r3, [r4, #0]
 8005eb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005eb6:	d10a      	bne.n	8005ece <_vfiprintf_r+0x156>
 8005eb8:	7863      	ldrb	r3, [r4, #1]
 8005eba:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ebc:	d132      	bne.n	8005f24 <_vfiprintf_r+0x1ac>
 8005ebe:	9b03      	ldr	r3, [sp, #12]
 8005ec0:	1d1a      	adds	r2, r3, #4
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	9203      	str	r2, [sp, #12]
 8005ec6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005eca:	3402      	adds	r4, #2
 8005ecc:	9305      	str	r3, [sp, #20]
 8005ece:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005fa4 <_vfiprintf_r+0x22c>
 8005ed2:	7821      	ldrb	r1, [r4, #0]
 8005ed4:	2203      	movs	r2, #3
 8005ed6:	4650      	mov	r0, sl
 8005ed8:	f7fa f99a 	bl	8000210 <memchr>
 8005edc:	b138      	cbz	r0, 8005eee <_vfiprintf_r+0x176>
 8005ede:	9b04      	ldr	r3, [sp, #16]
 8005ee0:	eba0 000a 	sub.w	r0, r0, sl
 8005ee4:	2240      	movs	r2, #64	@ 0x40
 8005ee6:	4082      	lsls	r2, r0
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	3401      	adds	r4, #1
 8005eec:	9304      	str	r3, [sp, #16]
 8005eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef2:	4829      	ldr	r0, [pc, #164]	@ (8005f98 <_vfiprintf_r+0x220>)
 8005ef4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ef8:	2206      	movs	r2, #6
 8005efa:	f7fa f989 	bl	8000210 <memchr>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d03f      	beq.n	8005f82 <_vfiprintf_r+0x20a>
 8005f02:	4b26      	ldr	r3, [pc, #152]	@ (8005f9c <_vfiprintf_r+0x224>)
 8005f04:	bb1b      	cbnz	r3, 8005f4e <_vfiprintf_r+0x1d6>
 8005f06:	9b03      	ldr	r3, [sp, #12]
 8005f08:	3307      	adds	r3, #7
 8005f0a:	f023 0307 	bic.w	r3, r3, #7
 8005f0e:	3308      	adds	r3, #8
 8005f10:	9303      	str	r3, [sp, #12]
 8005f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f14:	443b      	add	r3, r7
 8005f16:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f18:	e76a      	b.n	8005df0 <_vfiprintf_r+0x78>
 8005f1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f1e:	460c      	mov	r4, r1
 8005f20:	2001      	movs	r0, #1
 8005f22:	e7a8      	b.n	8005e76 <_vfiprintf_r+0xfe>
 8005f24:	2300      	movs	r3, #0
 8005f26:	3401      	adds	r4, #1
 8005f28:	9305      	str	r3, [sp, #20]
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	f04f 0c0a 	mov.w	ip, #10
 8005f30:	4620      	mov	r0, r4
 8005f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f36:	3a30      	subs	r2, #48	@ 0x30
 8005f38:	2a09      	cmp	r2, #9
 8005f3a:	d903      	bls.n	8005f44 <_vfiprintf_r+0x1cc>
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0c6      	beq.n	8005ece <_vfiprintf_r+0x156>
 8005f40:	9105      	str	r1, [sp, #20]
 8005f42:	e7c4      	b.n	8005ece <_vfiprintf_r+0x156>
 8005f44:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f48:	4604      	mov	r4, r0
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e7f0      	b.n	8005f30 <_vfiprintf_r+0x1b8>
 8005f4e:	ab03      	add	r3, sp, #12
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	462a      	mov	r2, r5
 8005f54:	4b12      	ldr	r3, [pc, #72]	@ (8005fa0 <_vfiprintf_r+0x228>)
 8005f56:	a904      	add	r1, sp, #16
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f3af 8000 	nop.w
 8005f5e:	4607      	mov	r7, r0
 8005f60:	1c78      	adds	r0, r7, #1
 8005f62:	d1d6      	bne.n	8005f12 <_vfiprintf_r+0x19a>
 8005f64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f66:	07d9      	lsls	r1, r3, #31
 8005f68:	d405      	bmi.n	8005f76 <_vfiprintf_r+0x1fe>
 8005f6a:	89ab      	ldrh	r3, [r5, #12]
 8005f6c:	059a      	lsls	r2, r3, #22
 8005f6e:	d402      	bmi.n	8005f76 <_vfiprintf_r+0x1fe>
 8005f70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f72:	f7ff fc49 	bl	8005808 <__retarget_lock_release_recursive>
 8005f76:	89ab      	ldrh	r3, [r5, #12]
 8005f78:	065b      	lsls	r3, r3, #25
 8005f7a:	f53f af1f 	bmi.w	8005dbc <_vfiprintf_r+0x44>
 8005f7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f80:	e71e      	b.n	8005dc0 <_vfiprintf_r+0x48>
 8005f82:	ab03      	add	r3, sp, #12
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	462a      	mov	r2, r5
 8005f88:	4b05      	ldr	r3, [pc, #20]	@ (8005fa0 <_vfiprintf_r+0x228>)
 8005f8a:	a904      	add	r1, sp, #16
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	f000 f879 	bl	8006084 <_printf_i>
 8005f92:	e7e4      	b.n	8005f5e <_vfiprintf_r+0x1e6>
 8005f94:	08006c2a 	.word	0x08006c2a
 8005f98:	08006c34 	.word	0x08006c34
 8005f9c:	00000000 	.word	0x00000000
 8005fa0:	08005d53 	.word	0x08005d53
 8005fa4:	08006c30 	.word	0x08006c30

08005fa8 <_printf_common>:
 8005fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fac:	4616      	mov	r6, r2
 8005fae:	4698      	mov	r8, r3
 8005fb0:	688a      	ldr	r2, [r1, #8]
 8005fb2:	690b      	ldr	r3, [r1, #16]
 8005fb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	bfb8      	it	lt
 8005fbc:	4613      	movlt	r3, r2
 8005fbe:	6033      	str	r3, [r6, #0]
 8005fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fc4:	4607      	mov	r7, r0
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	b10a      	cbz	r2, 8005fce <_printf_common+0x26>
 8005fca:	3301      	adds	r3, #1
 8005fcc:	6033      	str	r3, [r6, #0]
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	0699      	lsls	r1, r3, #26
 8005fd2:	bf42      	ittt	mi
 8005fd4:	6833      	ldrmi	r3, [r6, #0]
 8005fd6:	3302      	addmi	r3, #2
 8005fd8:	6033      	strmi	r3, [r6, #0]
 8005fda:	6825      	ldr	r5, [r4, #0]
 8005fdc:	f015 0506 	ands.w	r5, r5, #6
 8005fe0:	d106      	bne.n	8005ff0 <_printf_common+0x48>
 8005fe2:	f104 0a19 	add.w	sl, r4, #25
 8005fe6:	68e3      	ldr	r3, [r4, #12]
 8005fe8:	6832      	ldr	r2, [r6, #0]
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	42ab      	cmp	r3, r5
 8005fee:	dc26      	bgt.n	800603e <_printf_common+0x96>
 8005ff0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ff4:	6822      	ldr	r2, [r4, #0]
 8005ff6:	3b00      	subs	r3, #0
 8005ff8:	bf18      	it	ne
 8005ffa:	2301      	movne	r3, #1
 8005ffc:	0692      	lsls	r2, r2, #26
 8005ffe:	d42b      	bmi.n	8006058 <_printf_common+0xb0>
 8006000:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006004:	4641      	mov	r1, r8
 8006006:	4638      	mov	r0, r7
 8006008:	47c8      	blx	r9
 800600a:	3001      	adds	r0, #1
 800600c:	d01e      	beq.n	800604c <_printf_common+0xa4>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	6922      	ldr	r2, [r4, #16]
 8006012:	f003 0306 	and.w	r3, r3, #6
 8006016:	2b04      	cmp	r3, #4
 8006018:	bf02      	ittt	eq
 800601a:	68e5      	ldreq	r5, [r4, #12]
 800601c:	6833      	ldreq	r3, [r6, #0]
 800601e:	1aed      	subeq	r5, r5, r3
 8006020:	68a3      	ldr	r3, [r4, #8]
 8006022:	bf0c      	ite	eq
 8006024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006028:	2500      	movne	r5, #0
 800602a:	4293      	cmp	r3, r2
 800602c:	bfc4      	itt	gt
 800602e:	1a9b      	subgt	r3, r3, r2
 8006030:	18ed      	addgt	r5, r5, r3
 8006032:	2600      	movs	r6, #0
 8006034:	341a      	adds	r4, #26
 8006036:	42b5      	cmp	r5, r6
 8006038:	d11a      	bne.n	8006070 <_printf_common+0xc8>
 800603a:	2000      	movs	r0, #0
 800603c:	e008      	b.n	8006050 <_printf_common+0xa8>
 800603e:	2301      	movs	r3, #1
 8006040:	4652      	mov	r2, sl
 8006042:	4641      	mov	r1, r8
 8006044:	4638      	mov	r0, r7
 8006046:	47c8      	blx	r9
 8006048:	3001      	adds	r0, #1
 800604a:	d103      	bne.n	8006054 <_printf_common+0xac>
 800604c:	f04f 30ff 	mov.w	r0, #4294967295
 8006050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006054:	3501      	adds	r5, #1
 8006056:	e7c6      	b.n	8005fe6 <_printf_common+0x3e>
 8006058:	18e1      	adds	r1, r4, r3
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	2030      	movs	r0, #48	@ 0x30
 800605e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006062:	4422      	add	r2, r4
 8006064:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006068:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800606c:	3302      	adds	r3, #2
 800606e:	e7c7      	b.n	8006000 <_printf_common+0x58>
 8006070:	2301      	movs	r3, #1
 8006072:	4622      	mov	r2, r4
 8006074:	4641      	mov	r1, r8
 8006076:	4638      	mov	r0, r7
 8006078:	47c8      	blx	r9
 800607a:	3001      	adds	r0, #1
 800607c:	d0e6      	beq.n	800604c <_printf_common+0xa4>
 800607e:	3601      	adds	r6, #1
 8006080:	e7d9      	b.n	8006036 <_printf_common+0x8e>
	...

08006084 <_printf_i>:
 8006084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006088:	7e0f      	ldrb	r7, [r1, #24]
 800608a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800608c:	2f78      	cmp	r7, #120	@ 0x78
 800608e:	4691      	mov	r9, r2
 8006090:	4680      	mov	r8, r0
 8006092:	460c      	mov	r4, r1
 8006094:	469a      	mov	sl, r3
 8006096:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800609a:	d807      	bhi.n	80060ac <_printf_i+0x28>
 800609c:	2f62      	cmp	r7, #98	@ 0x62
 800609e:	d80a      	bhi.n	80060b6 <_printf_i+0x32>
 80060a0:	2f00      	cmp	r7, #0
 80060a2:	f000 80d1 	beq.w	8006248 <_printf_i+0x1c4>
 80060a6:	2f58      	cmp	r7, #88	@ 0x58
 80060a8:	f000 80b8 	beq.w	800621c <_printf_i+0x198>
 80060ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060b4:	e03a      	b.n	800612c <_printf_i+0xa8>
 80060b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060ba:	2b15      	cmp	r3, #21
 80060bc:	d8f6      	bhi.n	80060ac <_printf_i+0x28>
 80060be:	a101      	add	r1, pc, #4	@ (adr r1, 80060c4 <_printf_i+0x40>)
 80060c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060c4:	0800611d 	.word	0x0800611d
 80060c8:	08006131 	.word	0x08006131
 80060cc:	080060ad 	.word	0x080060ad
 80060d0:	080060ad 	.word	0x080060ad
 80060d4:	080060ad 	.word	0x080060ad
 80060d8:	080060ad 	.word	0x080060ad
 80060dc:	08006131 	.word	0x08006131
 80060e0:	080060ad 	.word	0x080060ad
 80060e4:	080060ad 	.word	0x080060ad
 80060e8:	080060ad 	.word	0x080060ad
 80060ec:	080060ad 	.word	0x080060ad
 80060f0:	0800622f 	.word	0x0800622f
 80060f4:	0800615b 	.word	0x0800615b
 80060f8:	080061e9 	.word	0x080061e9
 80060fc:	080060ad 	.word	0x080060ad
 8006100:	080060ad 	.word	0x080060ad
 8006104:	08006251 	.word	0x08006251
 8006108:	080060ad 	.word	0x080060ad
 800610c:	0800615b 	.word	0x0800615b
 8006110:	080060ad 	.word	0x080060ad
 8006114:	080060ad 	.word	0x080060ad
 8006118:	080061f1 	.word	0x080061f1
 800611c:	6833      	ldr	r3, [r6, #0]
 800611e:	1d1a      	adds	r2, r3, #4
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6032      	str	r2, [r6, #0]
 8006124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006128:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800612c:	2301      	movs	r3, #1
 800612e:	e09c      	b.n	800626a <_printf_i+0x1e6>
 8006130:	6833      	ldr	r3, [r6, #0]
 8006132:	6820      	ldr	r0, [r4, #0]
 8006134:	1d19      	adds	r1, r3, #4
 8006136:	6031      	str	r1, [r6, #0]
 8006138:	0606      	lsls	r6, r0, #24
 800613a:	d501      	bpl.n	8006140 <_printf_i+0xbc>
 800613c:	681d      	ldr	r5, [r3, #0]
 800613e:	e003      	b.n	8006148 <_printf_i+0xc4>
 8006140:	0645      	lsls	r5, r0, #25
 8006142:	d5fb      	bpl.n	800613c <_printf_i+0xb8>
 8006144:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006148:	2d00      	cmp	r5, #0
 800614a:	da03      	bge.n	8006154 <_printf_i+0xd0>
 800614c:	232d      	movs	r3, #45	@ 0x2d
 800614e:	426d      	negs	r5, r5
 8006150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006154:	4858      	ldr	r0, [pc, #352]	@ (80062b8 <_printf_i+0x234>)
 8006156:	230a      	movs	r3, #10
 8006158:	e011      	b.n	800617e <_printf_i+0xfa>
 800615a:	6821      	ldr	r1, [r4, #0]
 800615c:	6833      	ldr	r3, [r6, #0]
 800615e:	0608      	lsls	r0, r1, #24
 8006160:	f853 5b04 	ldr.w	r5, [r3], #4
 8006164:	d402      	bmi.n	800616c <_printf_i+0xe8>
 8006166:	0649      	lsls	r1, r1, #25
 8006168:	bf48      	it	mi
 800616a:	b2ad      	uxthmi	r5, r5
 800616c:	2f6f      	cmp	r7, #111	@ 0x6f
 800616e:	4852      	ldr	r0, [pc, #328]	@ (80062b8 <_printf_i+0x234>)
 8006170:	6033      	str	r3, [r6, #0]
 8006172:	bf14      	ite	ne
 8006174:	230a      	movne	r3, #10
 8006176:	2308      	moveq	r3, #8
 8006178:	2100      	movs	r1, #0
 800617a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800617e:	6866      	ldr	r6, [r4, #4]
 8006180:	60a6      	str	r6, [r4, #8]
 8006182:	2e00      	cmp	r6, #0
 8006184:	db05      	blt.n	8006192 <_printf_i+0x10e>
 8006186:	6821      	ldr	r1, [r4, #0]
 8006188:	432e      	orrs	r6, r5
 800618a:	f021 0104 	bic.w	r1, r1, #4
 800618e:	6021      	str	r1, [r4, #0]
 8006190:	d04b      	beq.n	800622a <_printf_i+0x1a6>
 8006192:	4616      	mov	r6, r2
 8006194:	fbb5 f1f3 	udiv	r1, r5, r3
 8006198:	fb03 5711 	mls	r7, r3, r1, r5
 800619c:	5dc7      	ldrb	r7, [r0, r7]
 800619e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061a2:	462f      	mov	r7, r5
 80061a4:	42bb      	cmp	r3, r7
 80061a6:	460d      	mov	r5, r1
 80061a8:	d9f4      	bls.n	8006194 <_printf_i+0x110>
 80061aa:	2b08      	cmp	r3, #8
 80061ac:	d10b      	bne.n	80061c6 <_printf_i+0x142>
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	07df      	lsls	r7, r3, #31
 80061b2:	d508      	bpl.n	80061c6 <_printf_i+0x142>
 80061b4:	6923      	ldr	r3, [r4, #16]
 80061b6:	6861      	ldr	r1, [r4, #4]
 80061b8:	4299      	cmp	r1, r3
 80061ba:	bfde      	ittt	le
 80061bc:	2330      	movle	r3, #48	@ 0x30
 80061be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061c6:	1b92      	subs	r2, r2, r6
 80061c8:	6122      	str	r2, [r4, #16]
 80061ca:	f8cd a000 	str.w	sl, [sp]
 80061ce:	464b      	mov	r3, r9
 80061d0:	aa03      	add	r2, sp, #12
 80061d2:	4621      	mov	r1, r4
 80061d4:	4640      	mov	r0, r8
 80061d6:	f7ff fee7 	bl	8005fa8 <_printf_common>
 80061da:	3001      	adds	r0, #1
 80061dc:	d14a      	bne.n	8006274 <_printf_i+0x1f0>
 80061de:	f04f 30ff 	mov.w	r0, #4294967295
 80061e2:	b004      	add	sp, #16
 80061e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	f043 0320 	orr.w	r3, r3, #32
 80061ee:	6023      	str	r3, [r4, #0]
 80061f0:	4832      	ldr	r0, [pc, #200]	@ (80062bc <_printf_i+0x238>)
 80061f2:	2778      	movs	r7, #120	@ 0x78
 80061f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	6831      	ldr	r1, [r6, #0]
 80061fc:	061f      	lsls	r7, r3, #24
 80061fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8006202:	d402      	bmi.n	800620a <_printf_i+0x186>
 8006204:	065f      	lsls	r7, r3, #25
 8006206:	bf48      	it	mi
 8006208:	b2ad      	uxthmi	r5, r5
 800620a:	6031      	str	r1, [r6, #0]
 800620c:	07d9      	lsls	r1, r3, #31
 800620e:	bf44      	itt	mi
 8006210:	f043 0320 	orrmi.w	r3, r3, #32
 8006214:	6023      	strmi	r3, [r4, #0]
 8006216:	b11d      	cbz	r5, 8006220 <_printf_i+0x19c>
 8006218:	2310      	movs	r3, #16
 800621a:	e7ad      	b.n	8006178 <_printf_i+0xf4>
 800621c:	4826      	ldr	r0, [pc, #152]	@ (80062b8 <_printf_i+0x234>)
 800621e:	e7e9      	b.n	80061f4 <_printf_i+0x170>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	f023 0320 	bic.w	r3, r3, #32
 8006226:	6023      	str	r3, [r4, #0]
 8006228:	e7f6      	b.n	8006218 <_printf_i+0x194>
 800622a:	4616      	mov	r6, r2
 800622c:	e7bd      	b.n	80061aa <_printf_i+0x126>
 800622e:	6833      	ldr	r3, [r6, #0]
 8006230:	6825      	ldr	r5, [r4, #0]
 8006232:	6961      	ldr	r1, [r4, #20]
 8006234:	1d18      	adds	r0, r3, #4
 8006236:	6030      	str	r0, [r6, #0]
 8006238:	062e      	lsls	r6, r5, #24
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	d501      	bpl.n	8006242 <_printf_i+0x1be>
 800623e:	6019      	str	r1, [r3, #0]
 8006240:	e002      	b.n	8006248 <_printf_i+0x1c4>
 8006242:	0668      	lsls	r0, r5, #25
 8006244:	d5fb      	bpl.n	800623e <_printf_i+0x1ba>
 8006246:	8019      	strh	r1, [r3, #0]
 8006248:	2300      	movs	r3, #0
 800624a:	6123      	str	r3, [r4, #16]
 800624c:	4616      	mov	r6, r2
 800624e:	e7bc      	b.n	80061ca <_printf_i+0x146>
 8006250:	6833      	ldr	r3, [r6, #0]
 8006252:	1d1a      	adds	r2, r3, #4
 8006254:	6032      	str	r2, [r6, #0]
 8006256:	681e      	ldr	r6, [r3, #0]
 8006258:	6862      	ldr	r2, [r4, #4]
 800625a:	2100      	movs	r1, #0
 800625c:	4630      	mov	r0, r6
 800625e:	f7f9 ffd7 	bl	8000210 <memchr>
 8006262:	b108      	cbz	r0, 8006268 <_printf_i+0x1e4>
 8006264:	1b80      	subs	r0, r0, r6
 8006266:	6060      	str	r0, [r4, #4]
 8006268:	6863      	ldr	r3, [r4, #4]
 800626a:	6123      	str	r3, [r4, #16]
 800626c:	2300      	movs	r3, #0
 800626e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006272:	e7aa      	b.n	80061ca <_printf_i+0x146>
 8006274:	6923      	ldr	r3, [r4, #16]
 8006276:	4632      	mov	r2, r6
 8006278:	4649      	mov	r1, r9
 800627a:	4640      	mov	r0, r8
 800627c:	47d0      	blx	sl
 800627e:	3001      	adds	r0, #1
 8006280:	d0ad      	beq.n	80061de <_printf_i+0x15a>
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	079b      	lsls	r3, r3, #30
 8006286:	d413      	bmi.n	80062b0 <_printf_i+0x22c>
 8006288:	68e0      	ldr	r0, [r4, #12]
 800628a:	9b03      	ldr	r3, [sp, #12]
 800628c:	4298      	cmp	r0, r3
 800628e:	bfb8      	it	lt
 8006290:	4618      	movlt	r0, r3
 8006292:	e7a6      	b.n	80061e2 <_printf_i+0x15e>
 8006294:	2301      	movs	r3, #1
 8006296:	4632      	mov	r2, r6
 8006298:	4649      	mov	r1, r9
 800629a:	4640      	mov	r0, r8
 800629c:	47d0      	blx	sl
 800629e:	3001      	adds	r0, #1
 80062a0:	d09d      	beq.n	80061de <_printf_i+0x15a>
 80062a2:	3501      	adds	r5, #1
 80062a4:	68e3      	ldr	r3, [r4, #12]
 80062a6:	9903      	ldr	r1, [sp, #12]
 80062a8:	1a5b      	subs	r3, r3, r1
 80062aa:	42ab      	cmp	r3, r5
 80062ac:	dcf2      	bgt.n	8006294 <_printf_i+0x210>
 80062ae:	e7eb      	b.n	8006288 <_printf_i+0x204>
 80062b0:	2500      	movs	r5, #0
 80062b2:	f104 0619 	add.w	r6, r4, #25
 80062b6:	e7f5      	b.n	80062a4 <_printf_i+0x220>
 80062b8:	08006c3b 	.word	0x08006c3b
 80062bc:	08006c4c 	.word	0x08006c4c

080062c0 <__sflush_r>:
 80062c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c8:	0716      	lsls	r6, r2, #28
 80062ca:	4605      	mov	r5, r0
 80062cc:	460c      	mov	r4, r1
 80062ce:	d454      	bmi.n	800637a <__sflush_r+0xba>
 80062d0:	684b      	ldr	r3, [r1, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	dc02      	bgt.n	80062dc <__sflush_r+0x1c>
 80062d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062d8:	2b00      	cmp	r3, #0
 80062da:	dd48      	ble.n	800636e <__sflush_r+0xae>
 80062dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062de:	2e00      	cmp	r6, #0
 80062e0:	d045      	beq.n	800636e <__sflush_r+0xae>
 80062e2:	2300      	movs	r3, #0
 80062e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062e8:	682f      	ldr	r7, [r5, #0]
 80062ea:	6a21      	ldr	r1, [r4, #32]
 80062ec:	602b      	str	r3, [r5, #0]
 80062ee:	d030      	beq.n	8006352 <__sflush_r+0x92>
 80062f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062f2:	89a3      	ldrh	r3, [r4, #12]
 80062f4:	0759      	lsls	r1, r3, #29
 80062f6:	d505      	bpl.n	8006304 <__sflush_r+0x44>
 80062f8:	6863      	ldr	r3, [r4, #4]
 80062fa:	1ad2      	subs	r2, r2, r3
 80062fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062fe:	b10b      	cbz	r3, 8006304 <__sflush_r+0x44>
 8006300:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006302:	1ad2      	subs	r2, r2, r3
 8006304:	2300      	movs	r3, #0
 8006306:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006308:	6a21      	ldr	r1, [r4, #32]
 800630a:	4628      	mov	r0, r5
 800630c:	47b0      	blx	r6
 800630e:	1c43      	adds	r3, r0, #1
 8006310:	89a3      	ldrh	r3, [r4, #12]
 8006312:	d106      	bne.n	8006322 <__sflush_r+0x62>
 8006314:	6829      	ldr	r1, [r5, #0]
 8006316:	291d      	cmp	r1, #29
 8006318:	d82b      	bhi.n	8006372 <__sflush_r+0xb2>
 800631a:	4a2a      	ldr	r2, [pc, #168]	@ (80063c4 <__sflush_r+0x104>)
 800631c:	40ca      	lsrs	r2, r1
 800631e:	07d6      	lsls	r6, r2, #31
 8006320:	d527      	bpl.n	8006372 <__sflush_r+0xb2>
 8006322:	2200      	movs	r2, #0
 8006324:	6062      	str	r2, [r4, #4]
 8006326:	04d9      	lsls	r1, r3, #19
 8006328:	6922      	ldr	r2, [r4, #16]
 800632a:	6022      	str	r2, [r4, #0]
 800632c:	d504      	bpl.n	8006338 <__sflush_r+0x78>
 800632e:	1c42      	adds	r2, r0, #1
 8006330:	d101      	bne.n	8006336 <__sflush_r+0x76>
 8006332:	682b      	ldr	r3, [r5, #0]
 8006334:	b903      	cbnz	r3, 8006338 <__sflush_r+0x78>
 8006336:	6560      	str	r0, [r4, #84]	@ 0x54
 8006338:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800633a:	602f      	str	r7, [r5, #0]
 800633c:	b1b9      	cbz	r1, 800636e <__sflush_r+0xae>
 800633e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006342:	4299      	cmp	r1, r3
 8006344:	d002      	beq.n	800634c <__sflush_r+0x8c>
 8006346:	4628      	mov	r0, r5
 8006348:	f7ff fa94 	bl	8005874 <_free_r>
 800634c:	2300      	movs	r3, #0
 800634e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006350:	e00d      	b.n	800636e <__sflush_r+0xae>
 8006352:	2301      	movs	r3, #1
 8006354:	4628      	mov	r0, r5
 8006356:	47b0      	blx	r6
 8006358:	4602      	mov	r2, r0
 800635a:	1c50      	adds	r0, r2, #1
 800635c:	d1c9      	bne.n	80062f2 <__sflush_r+0x32>
 800635e:	682b      	ldr	r3, [r5, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0c6      	beq.n	80062f2 <__sflush_r+0x32>
 8006364:	2b1d      	cmp	r3, #29
 8006366:	d001      	beq.n	800636c <__sflush_r+0xac>
 8006368:	2b16      	cmp	r3, #22
 800636a:	d11e      	bne.n	80063aa <__sflush_r+0xea>
 800636c:	602f      	str	r7, [r5, #0]
 800636e:	2000      	movs	r0, #0
 8006370:	e022      	b.n	80063b8 <__sflush_r+0xf8>
 8006372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006376:	b21b      	sxth	r3, r3
 8006378:	e01b      	b.n	80063b2 <__sflush_r+0xf2>
 800637a:	690f      	ldr	r7, [r1, #16]
 800637c:	2f00      	cmp	r7, #0
 800637e:	d0f6      	beq.n	800636e <__sflush_r+0xae>
 8006380:	0793      	lsls	r3, r2, #30
 8006382:	680e      	ldr	r6, [r1, #0]
 8006384:	bf08      	it	eq
 8006386:	694b      	ldreq	r3, [r1, #20]
 8006388:	600f      	str	r7, [r1, #0]
 800638a:	bf18      	it	ne
 800638c:	2300      	movne	r3, #0
 800638e:	eba6 0807 	sub.w	r8, r6, r7
 8006392:	608b      	str	r3, [r1, #8]
 8006394:	f1b8 0f00 	cmp.w	r8, #0
 8006398:	dde9      	ble.n	800636e <__sflush_r+0xae>
 800639a:	6a21      	ldr	r1, [r4, #32]
 800639c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800639e:	4643      	mov	r3, r8
 80063a0:	463a      	mov	r2, r7
 80063a2:	4628      	mov	r0, r5
 80063a4:	47b0      	blx	r6
 80063a6:	2800      	cmp	r0, #0
 80063a8:	dc08      	bgt.n	80063bc <__sflush_r+0xfc>
 80063aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063b2:	81a3      	strh	r3, [r4, #12]
 80063b4:	f04f 30ff 	mov.w	r0, #4294967295
 80063b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063bc:	4407      	add	r7, r0
 80063be:	eba8 0800 	sub.w	r8, r8, r0
 80063c2:	e7e7      	b.n	8006394 <__sflush_r+0xd4>
 80063c4:	20400001 	.word	0x20400001

080063c8 <_fflush_r>:
 80063c8:	b538      	push	{r3, r4, r5, lr}
 80063ca:	690b      	ldr	r3, [r1, #16]
 80063cc:	4605      	mov	r5, r0
 80063ce:	460c      	mov	r4, r1
 80063d0:	b913      	cbnz	r3, 80063d8 <_fflush_r+0x10>
 80063d2:	2500      	movs	r5, #0
 80063d4:	4628      	mov	r0, r5
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	b118      	cbz	r0, 80063e2 <_fflush_r+0x1a>
 80063da:	6a03      	ldr	r3, [r0, #32]
 80063dc:	b90b      	cbnz	r3, 80063e2 <_fflush_r+0x1a>
 80063de:	f7fe ff5f 	bl	80052a0 <__sinit>
 80063e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0f3      	beq.n	80063d2 <_fflush_r+0xa>
 80063ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063ec:	07d0      	lsls	r0, r2, #31
 80063ee:	d404      	bmi.n	80063fa <_fflush_r+0x32>
 80063f0:	0599      	lsls	r1, r3, #22
 80063f2:	d402      	bmi.n	80063fa <_fflush_r+0x32>
 80063f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063f6:	f7ff fa06 	bl	8005806 <__retarget_lock_acquire_recursive>
 80063fa:	4628      	mov	r0, r5
 80063fc:	4621      	mov	r1, r4
 80063fe:	f7ff ff5f 	bl	80062c0 <__sflush_r>
 8006402:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006404:	07da      	lsls	r2, r3, #31
 8006406:	4605      	mov	r5, r0
 8006408:	d4e4      	bmi.n	80063d4 <_fflush_r+0xc>
 800640a:	89a3      	ldrh	r3, [r4, #12]
 800640c:	059b      	lsls	r3, r3, #22
 800640e:	d4e1      	bmi.n	80063d4 <_fflush_r+0xc>
 8006410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006412:	f7ff f9f9 	bl	8005808 <__retarget_lock_release_recursive>
 8006416:	e7dd      	b.n	80063d4 <_fflush_r+0xc>

08006418 <fiprintf>:
 8006418:	b40e      	push	{r1, r2, r3}
 800641a:	b503      	push	{r0, r1, lr}
 800641c:	4601      	mov	r1, r0
 800641e:	ab03      	add	r3, sp, #12
 8006420:	4805      	ldr	r0, [pc, #20]	@ (8006438 <fiprintf+0x20>)
 8006422:	f853 2b04 	ldr.w	r2, [r3], #4
 8006426:	6800      	ldr	r0, [r0, #0]
 8006428:	9301      	str	r3, [sp, #4]
 800642a:	f7ff fca5 	bl	8005d78 <_vfiprintf_r>
 800642e:	b002      	add	sp, #8
 8006430:	f85d eb04 	ldr.w	lr, [sp], #4
 8006434:	b003      	add	sp, #12
 8006436:	4770      	bx	lr
 8006438:	2000001c 	.word	0x2000001c

0800643c <__swhatbuf_r>:
 800643c:	b570      	push	{r4, r5, r6, lr}
 800643e:	460c      	mov	r4, r1
 8006440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006444:	2900      	cmp	r1, #0
 8006446:	b096      	sub	sp, #88	@ 0x58
 8006448:	4615      	mov	r5, r2
 800644a:	461e      	mov	r6, r3
 800644c:	da0d      	bge.n	800646a <__swhatbuf_r+0x2e>
 800644e:	89a3      	ldrh	r3, [r4, #12]
 8006450:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006454:	f04f 0100 	mov.w	r1, #0
 8006458:	bf14      	ite	ne
 800645a:	2340      	movne	r3, #64	@ 0x40
 800645c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006460:	2000      	movs	r0, #0
 8006462:	6031      	str	r1, [r6, #0]
 8006464:	602b      	str	r3, [r5, #0]
 8006466:	b016      	add	sp, #88	@ 0x58
 8006468:	bd70      	pop	{r4, r5, r6, pc}
 800646a:	466a      	mov	r2, sp
 800646c:	f000 f896 	bl	800659c <_fstat_r>
 8006470:	2800      	cmp	r0, #0
 8006472:	dbec      	blt.n	800644e <__swhatbuf_r+0x12>
 8006474:	9901      	ldr	r1, [sp, #4]
 8006476:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800647a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800647e:	4259      	negs	r1, r3
 8006480:	4159      	adcs	r1, r3
 8006482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006486:	e7eb      	b.n	8006460 <__swhatbuf_r+0x24>

08006488 <__smakebuf_r>:
 8006488:	898b      	ldrh	r3, [r1, #12]
 800648a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800648c:	079d      	lsls	r5, r3, #30
 800648e:	4606      	mov	r6, r0
 8006490:	460c      	mov	r4, r1
 8006492:	d507      	bpl.n	80064a4 <__smakebuf_r+0x1c>
 8006494:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	6123      	str	r3, [r4, #16]
 800649c:	2301      	movs	r3, #1
 800649e:	6163      	str	r3, [r4, #20]
 80064a0:	b003      	add	sp, #12
 80064a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064a4:	ab01      	add	r3, sp, #4
 80064a6:	466a      	mov	r2, sp
 80064a8:	f7ff ffc8 	bl	800643c <__swhatbuf_r>
 80064ac:	9f00      	ldr	r7, [sp, #0]
 80064ae:	4605      	mov	r5, r0
 80064b0:	4639      	mov	r1, r7
 80064b2:	4630      	mov	r0, r6
 80064b4:	f7ff fa52 	bl	800595c <_malloc_r>
 80064b8:	b948      	cbnz	r0, 80064ce <__smakebuf_r+0x46>
 80064ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064be:	059a      	lsls	r2, r3, #22
 80064c0:	d4ee      	bmi.n	80064a0 <__smakebuf_r+0x18>
 80064c2:	f023 0303 	bic.w	r3, r3, #3
 80064c6:	f043 0302 	orr.w	r3, r3, #2
 80064ca:	81a3      	strh	r3, [r4, #12]
 80064cc:	e7e2      	b.n	8006494 <__smakebuf_r+0xc>
 80064ce:	89a3      	ldrh	r3, [r4, #12]
 80064d0:	6020      	str	r0, [r4, #0]
 80064d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d6:	81a3      	strh	r3, [r4, #12]
 80064d8:	9b01      	ldr	r3, [sp, #4]
 80064da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064de:	b15b      	cbz	r3, 80064f8 <__smakebuf_r+0x70>
 80064e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064e4:	4630      	mov	r0, r6
 80064e6:	f000 f86b 	bl	80065c0 <_isatty_r>
 80064ea:	b128      	cbz	r0, 80064f8 <__smakebuf_r+0x70>
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	f023 0303 	bic.w	r3, r3, #3
 80064f2:	f043 0301 	orr.w	r3, r3, #1
 80064f6:	81a3      	strh	r3, [r4, #12]
 80064f8:	89a3      	ldrh	r3, [r4, #12]
 80064fa:	431d      	orrs	r5, r3
 80064fc:	81a5      	strh	r5, [r4, #12]
 80064fe:	e7cf      	b.n	80064a0 <__smakebuf_r+0x18>

08006500 <_putc_r>:
 8006500:	b570      	push	{r4, r5, r6, lr}
 8006502:	460d      	mov	r5, r1
 8006504:	4614      	mov	r4, r2
 8006506:	4606      	mov	r6, r0
 8006508:	b118      	cbz	r0, 8006512 <_putc_r+0x12>
 800650a:	6a03      	ldr	r3, [r0, #32]
 800650c:	b90b      	cbnz	r3, 8006512 <_putc_r+0x12>
 800650e:	f7fe fec7 	bl	80052a0 <__sinit>
 8006512:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006514:	07d8      	lsls	r0, r3, #31
 8006516:	d405      	bmi.n	8006524 <_putc_r+0x24>
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	0599      	lsls	r1, r3, #22
 800651c:	d402      	bmi.n	8006524 <_putc_r+0x24>
 800651e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006520:	f7ff f971 	bl	8005806 <__retarget_lock_acquire_recursive>
 8006524:	68a3      	ldr	r3, [r4, #8]
 8006526:	3b01      	subs	r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	60a3      	str	r3, [r4, #8]
 800652c:	da05      	bge.n	800653a <_putc_r+0x3a>
 800652e:	69a2      	ldr	r2, [r4, #24]
 8006530:	4293      	cmp	r3, r2
 8006532:	db12      	blt.n	800655a <_putc_r+0x5a>
 8006534:	b2eb      	uxtb	r3, r5
 8006536:	2b0a      	cmp	r3, #10
 8006538:	d00f      	beq.n	800655a <_putc_r+0x5a>
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	6022      	str	r2, [r4, #0]
 8006540:	701d      	strb	r5, [r3, #0]
 8006542:	b2ed      	uxtb	r5, r5
 8006544:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006546:	07da      	lsls	r2, r3, #31
 8006548:	d405      	bmi.n	8006556 <_putc_r+0x56>
 800654a:	89a3      	ldrh	r3, [r4, #12]
 800654c:	059b      	lsls	r3, r3, #22
 800654e:	d402      	bmi.n	8006556 <_putc_r+0x56>
 8006550:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006552:	f7ff f959 	bl	8005808 <__retarget_lock_release_recursive>
 8006556:	4628      	mov	r0, r5
 8006558:	bd70      	pop	{r4, r5, r6, pc}
 800655a:	4629      	mov	r1, r5
 800655c:	4622      	mov	r2, r4
 800655e:	4630      	mov	r0, r6
 8006560:	f7fe ffb1 	bl	80054c6 <__swbuf_r>
 8006564:	4605      	mov	r5, r0
 8006566:	e7ed      	b.n	8006544 <_putc_r+0x44>

08006568 <memmove>:
 8006568:	4288      	cmp	r0, r1
 800656a:	b510      	push	{r4, lr}
 800656c:	eb01 0402 	add.w	r4, r1, r2
 8006570:	d902      	bls.n	8006578 <memmove+0x10>
 8006572:	4284      	cmp	r4, r0
 8006574:	4623      	mov	r3, r4
 8006576:	d807      	bhi.n	8006588 <memmove+0x20>
 8006578:	1e43      	subs	r3, r0, #1
 800657a:	42a1      	cmp	r1, r4
 800657c:	d008      	beq.n	8006590 <memmove+0x28>
 800657e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006582:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006586:	e7f8      	b.n	800657a <memmove+0x12>
 8006588:	4402      	add	r2, r0
 800658a:	4601      	mov	r1, r0
 800658c:	428a      	cmp	r2, r1
 800658e:	d100      	bne.n	8006592 <memmove+0x2a>
 8006590:	bd10      	pop	{r4, pc}
 8006592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006596:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800659a:	e7f7      	b.n	800658c <memmove+0x24>

0800659c <_fstat_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	4d07      	ldr	r5, [pc, #28]	@ (80065bc <_fstat_r+0x20>)
 80065a0:	2300      	movs	r3, #0
 80065a2:	4604      	mov	r4, r0
 80065a4:	4608      	mov	r0, r1
 80065a6:	4611      	mov	r1, r2
 80065a8:	602b      	str	r3, [r5, #0]
 80065aa:	f7fb fc13 	bl	8001dd4 <_fstat>
 80065ae:	1c43      	adds	r3, r0, #1
 80065b0:	d102      	bne.n	80065b8 <_fstat_r+0x1c>
 80065b2:	682b      	ldr	r3, [r5, #0]
 80065b4:	b103      	cbz	r3, 80065b8 <_fstat_r+0x1c>
 80065b6:	6023      	str	r3, [r4, #0]
 80065b8:	bd38      	pop	{r3, r4, r5, pc}
 80065ba:	bf00      	nop
 80065bc:	20000bec 	.word	0x20000bec

080065c0 <_isatty_r>:
 80065c0:	b538      	push	{r3, r4, r5, lr}
 80065c2:	4d06      	ldr	r5, [pc, #24]	@ (80065dc <_isatty_r+0x1c>)
 80065c4:	2300      	movs	r3, #0
 80065c6:	4604      	mov	r4, r0
 80065c8:	4608      	mov	r0, r1
 80065ca:	602b      	str	r3, [r5, #0]
 80065cc:	f7fb fc12 	bl	8001df4 <_isatty>
 80065d0:	1c43      	adds	r3, r0, #1
 80065d2:	d102      	bne.n	80065da <_isatty_r+0x1a>
 80065d4:	682b      	ldr	r3, [r5, #0]
 80065d6:	b103      	cbz	r3, 80065da <_isatty_r+0x1a>
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	bd38      	pop	{r3, r4, r5, pc}
 80065dc:	20000bec 	.word	0x20000bec

080065e0 <_sbrk_r>:
 80065e0:	b538      	push	{r3, r4, r5, lr}
 80065e2:	4d06      	ldr	r5, [pc, #24]	@ (80065fc <_sbrk_r+0x1c>)
 80065e4:	2300      	movs	r3, #0
 80065e6:	4604      	mov	r4, r0
 80065e8:	4608      	mov	r0, r1
 80065ea:	602b      	str	r3, [r5, #0]
 80065ec:	f7fb fc1a 	bl	8001e24 <_sbrk>
 80065f0:	1c43      	adds	r3, r0, #1
 80065f2:	d102      	bne.n	80065fa <_sbrk_r+0x1a>
 80065f4:	682b      	ldr	r3, [r5, #0]
 80065f6:	b103      	cbz	r3, 80065fa <_sbrk_r+0x1a>
 80065f8:	6023      	str	r3, [r4, #0]
 80065fa:	bd38      	pop	{r3, r4, r5, pc}
 80065fc:	20000bec 	.word	0x20000bec

08006600 <abort>:
 8006600:	b508      	push	{r3, lr}
 8006602:	2006      	movs	r0, #6
 8006604:	f000 f85a 	bl	80066bc <raise>
 8006608:	2001      	movs	r0, #1
 800660a:	f7fb fb93 	bl	8001d34 <_exit>

0800660e <_realloc_r>:
 800660e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006612:	4607      	mov	r7, r0
 8006614:	4614      	mov	r4, r2
 8006616:	460d      	mov	r5, r1
 8006618:	b921      	cbnz	r1, 8006624 <_realloc_r+0x16>
 800661a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800661e:	4611      	mov	r1, r2
 8006620:	f7ff b99c 	b.w	800595c <_malloc_r>
 8006624:	b92a      	cbnz	r2, 8006632 <_realloc_r+0x24>
 8006626:	f7ff f925 	bl	8005874 <_free_r>
 800662a:	4625      	mov	r5, r4
 800662c:	4628      	mov	r0, r5
 800662e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006632:	f000 f85f 	bl	80066f4 <_malloc_usable_size_r>
 8006636:	4284      	cmp	r4, r0
 8006638:	4606      	mov	r6, r0
 800663a:	d802      	bhi.n	8006642 <_realloc_r+0x34>
 800663c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006640:	d8f4      	bhi.n	800662c <_realloc_r+0x1e>
 8006642:	4621      	mov	r1, r4
 8006644:	4638      	mov	r0, r7
 8006646:	f7ff f989 	bl	800595c <_malloc_r>
 800664a:	4680      	mov	r8, r0
 800664c:	b908      	cbnz	r0, 8006652 <_realloc_r+0x44>
 800664e:	4645      	mov	r5, r8
 8006650:	e7ec      	b.n	800662c <_realloc_r+0x1e>
 8006652:	42b4      	cmp	r4, r6
 8006654:	4622      	mov	r2, r4
 8006656:	4629      	mov	r1, r5
 8006658:	bf28      	it	cs
 800665a:	4632      	movcs	r2, r6
 800665c:	f7ff f8dd 	bl	800581a <memcpy>
 8006660:	4629      	mov	r1, r5
 8006662:	4638      	mov	r0, r7
 8006664:	f7ff f906 	bl	8005874 <_free_r>
 8006668:	e7f1      	b.n	800664e <_realloc_r+0x40>

0800666a <_raise_r>:
 800666a:	291f      	cmp	r1, #31
 800666c:	b538      	push	{r3, r4, r5, lr}
 800666e:	4605      	mov	r5, r0
 8006670:	460c      	mov	r4, r1
 8006672:	d904      	bls.n	800667e <_raise_r+0x14>
 8006674:	2316      	movs	r3, #22
 8006676:	6003      	str	r3, [r0, #0]
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	bd38      	pop	{r3, r4, r5, pc}
 800667e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006680:	b112      	cbz	r2, 8006688 <_raise_r+0x1e>
 8006682:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006686:	b94b      	cbnz	r3, 800669c <_raise_r+0x32>
 8006688:	4628      	mov	r0, r5
 800668a:	f000 f831 	bl	80066f0 <_getpid_r>
 800668e:	4622      	mov	r2, r4
 8006690:	4601      	mov	r1, r0
 8006692:	4628      	mov	r0, r5
 8006694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006698:	f000 b818 	b.w	80066cc <_kill_r>
 800669c:	2b01      	cmp	r3, #1
 800669e:	d00a      	beq.n	80066b6 <_raise_r+0x4c>
 80066a0:	1c59      	adds	r1, r3, #1
 80066a2:	d103      	bne.n	80066ac <_raise_r+0x42>
 80066a4:	2316      	movs	r3, #22
 80066a6:	6003      	str	r3, [r0, #0]
 80066a8:	2001      	movs	r0, #1
 80066aa:	e7e7      	b.n	800667c <_raise_r+0x12>
 80066ac:	2100      	movs	r1, #0
 80066ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80066b2:	4620      	mov	r0, r4
 80066b4:	4798      	blx	r3
 80066b6:	2000      	movs	r0, #0
 80066b8:	e7e0      	b.n	800667c <_raise_r+0x12>
	...

080066bc <raise>:
 80066bc:	4b02      	ldr	r3, [pc, #8]	@ (80066c8 <raise+0xc>)
 80066be:	4601      	mov	r1, r0
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	f7ff bfd2 	b.w	800666a <_raise_r>
 80066c6:	bf00      	nop
 80066c8:	2000001c 	.word	0x2000001c

080066cc <_kill_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	4d07      	ldr	r5, [pc, #28]	@ (80066ec <_kill_r+0x20>)
 80066d0:	2300      	movs	r3, #0
 80066d2:	4604      	mov	r4, r0
 80066d4:	4608      	mov	r0, r1
 80066d6:	4611      	mov	r1, r2
 80066d8:	602b      	str	r3, [r5, #0]
 80066da:	f7fb fb1b 	bl	8001d14 <_kill>
 80066de:	1c43      	adds	r3, r0, #1
 80066e0:	d102      	bne.n	80066e8 <_kill_r+0x1c>
 80066e2:	682b      	ldr	r3, [r5, #0]
 80066e4:	b103      	cbz	r3, 80066e8 <_kill_r+0x1c>
 80066e6:	6023      	str	r3, [r4, #0]
 80066e8:	bd38      	pop	{r3, r4, r5, pc}
 80066ea:	bf00      	nop
 80066ec:	20000bec 	.word	0x20000bec

080066f0 <_getpid_r>:
 80066f0:	f7fb bb08 	b.w	8001d04 <_getpid>

080066f4 <_malloc_usable_size_r>:
 80066f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066f8:	1f18      	subs	r0, r3, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	bfbc      	itt	lt
 80066fe:	580b      	ldrlt	r3, [r1, r0]
 8006700:	18c0      	addlt	r0, r0, r3
 8006702:	4770      	bx	lr

08006704 <_init>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	bf00      	nop
 8006708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670a:	bc08      	pop	{r3}
 800670c:	469e      	mov	lr, r3
 800670e:	4770      	bx	lr

08006710 <_fini>:
 8006710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006712:	bf00      	nop
 8006714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006716:	bc08      	pop	{r3}
 8006718:	469e      	mov	lr, r3
 800671a:	4770      	bx	lr
