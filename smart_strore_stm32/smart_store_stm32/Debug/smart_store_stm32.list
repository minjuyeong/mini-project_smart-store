
smart_store_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a574  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  0800a718  0800a718  0000b718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aea8  0800aea8  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aea8  0800aea8  0000bea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aeb0  0800aeb0  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aeb0  0800aeb0  0000beb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aeb4  0800aeb4  0000beb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800aeb8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf4  200001d8  0800b090  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dcc  0800b090  0000cdcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001120d  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002942  00000000  00000000  0001d415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0001fd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c77  00000000  00000000  00020d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001931d  00000000  00000000  000219cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001276c  00000000  00000000  0003acec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d19b  00000000  00000000  0004d458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea5f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059dc  00000000  00000000  000ea638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000f0014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a6fc 	.word	0x0800a6fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800a6fc 	.word	0x0800a6fc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b988 	b.w	8000fa0 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	468e      	mov	lr, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d962      	bls.n	8000d84 <__udivmoddi4+0xdc>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	b14e      	cbz	r6, 8000cd8 <__udivmoddi4+0x30>
 8000cc4:	f1c6 0320 	rsb	r3, r6, #32
 8000cc8:	fa01 f806 	lsl.w	r8, r1, r6
 8000ccc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd0:	40b7      	lsls	r7, r6
 8000cd2:	ea43 0808 	orr.w	r8, r3, r8
 8000cd6:	40b4      	lsls	r4, r6
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	fa1f fc87 	uxth.w	ip, r7
 8000ce0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ce4:	0c23      	lsrs	r3, r4, #16
 8000ce6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cee:	fb01 f20c 	mul.w	r2, r1, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cfc:	f080 80ea 	bcs.w	8000ed4 <__udivmoddi4+0x22c>
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f240 80e7 	bls.w	8000ed4 <__udivmoddi4+0x22c>
 8000d06:	3902      	subs	r1, #2
 8000d08:	443b      	add	r3, r7
 8000d0a:	1a9a      	subs	r2, r3, r2
 8000d0c:	b2a3      	uxth	r3, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1e:	459c      	cmp	ip, r3
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x8e>
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	f080 80d6 	bcs.w	8000ed8 <__udivmoddi4+0x230>
 8000d2c:	459c      	cmp	ip, r3
 8000d2e:	f240 80d3 	bls.w	8000ed8 <__udivmoddi4+0x230>
 8000d32:	443b      	add	r3, r7
 8000d34:	3802      	subs	r0, #2
 8000d36:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3a:	eba3 030c 	sub.w	r3, r3, ip
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11d      	cbz	r5, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40f3      	lsrs	r3, r6
 8000d44:	2200      	movs	r2, #0
 8000d46:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d905      	bls.n	8000d5e <__udivmoddi4+0xb6>
 8000d52:	b10d      	cbz	r5, 8000d58 <__udivmoddi4+0xb0>
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e7f5      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d5e:	fab3 f183 	clz	r1, r3
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d146      	bne.n	8000df4 <__udivmoddi4+0x14c>
 8000d66:	4573      	cmp	r3, lr
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xc8>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 8105 	bhi.w	8000f7a <__udivmoddi4+0x2d2>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	4690      	mov	r8, r2
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d0e5      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d7e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d82:	e7e2      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f000 8090 	beq.w	8000eaa <__udivmoddi4+0x202>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	f040 80a4 	bne.w	8000edc <__udivmoddi4+0x234>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9c:	b280      	uxth	r0, r0
 8000d9e:	b2bc      	uxth	r4, r7
 8000da0:	2101      	movs	r1, #1
 8000da2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000da6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dae:	fb04 f20c 	mul.w	r2, r4, ip
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x11e>
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x11c>
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	f200 80e0 	bhi.w	8000f84 <__udivmoddi4+0x2dc>
 8000dc4:	46c4      	mov	ip, r8
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dcc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dd0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dd4:	fb02 f404 	mul.w	r4, r2, r4
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x144>
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	f102 30ff 	add.w	r0, r2, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x142>
 8000de4:	429c      	cmp	r4, r3
 8000de6:	f200 80ca 	bhi.w	8000f7e <__udivmoddi4+0x2d6>
 8000dea:	4602      	mov	r2, r0
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000df2:	e7a5      	b.n	8000d40 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	fa0e f401 	lsl.w	r4, lr, r1
 8000e04:	fa20 f306 	lsr.w	r3, r0, r6
 8000e08:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e0c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e10:	4323      	orrs	r3, r4
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	fa1f fc87 	uxth.w	ip, r7
 8000e1a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e1e:	0c1c      	lsrs	r4, r3, #16
 8000e20:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e24:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e28:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	d909      	bls.n	8000e48 <__udivmoddi4+0x1a0>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	f080 809c 	bcs.w	8000f76 <__udivmoddi4+0x2ce>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f240 8099 	bls.w	8000f76 <__udivmoddi4+0x2ce>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	eba4 040e 	sub.w	r4, r4, lr
 8000e4c:	fa1f fe83 	uxth.w	lr, r3
 8000e50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e54:	fb09 4413 	mls	r4, r9, r3, r4
 8000e58:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e5c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e60:	45a4      	cmp	ip, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1ce>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e6a:	f080 8082 	bcs.w	8000f72 <__udivmoddi4+0x2ca>
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d97f      	bls.n	8000f72 <__udivmoddi4+0x2ca>
 8000e72:	3b02      	subs	r3, #2
 8000e74:	443c      	add	r4, r7
 8000e76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e7a:	eba4 040c 	sub.w	r4, r4, ip
 8000e7e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e82:	4564      	cmp	r4, ip
 8000e84:	4673      	mov	r3, lr
 8000e86:	46e1      	mov	r9, ip
 8000e88:	d362      	bcc.n	8000f50 <__udivmoddi4+0x2a8>
 8000e8a:	d05f      	beq.n	8000f4c <__udivmoddi4+0x2a4>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x1fe>
 8000e8e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e92:	eb64 0409 	sbc.w	r4, r4, r9
 8000e96:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9e:	431e      	orrs	r6, r3
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	e74f      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000eaa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eae:	0c01      	lsrs	r1, r0, #16
 8000eb0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000eb4:	b280      	uxth	r0, r0
 8000eb6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	463c      	mov	r4, r7
 8000ec0:	46b8      	mov	r8, r7
 8000ec2:	46be      	mov	lr, r7
 8000ec4:	2620      	movs	r6, #32
 8000ec6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eca:	eba2 0208 	sub.w	r2, r2, r8
 8000ece:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ed2:	e766      	b.n	8000da2 <__udivmoddi4+0xfa>
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	e718      	b.n	8000d0a <__udivmoddi4+0x62>
 8000ed8:	4610      	mov	r0, r2
 8000eda:	e72c      	b.n	8000d36 <__udivmoddi4+0x8e>
 8000edc:	f1c6 0220 	rsb	r2, r6, #32
 8000ee0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ee4:	40b7      	lsls	r7, r6
 8000ee6:	40b1      	lsls	r1, r6
 8000ee8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ef6:	b2bc      	uxth	r4, r7
 8000ef8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb08 f904 	mul.w	r9, r8, r4
 8000f06:	40b0      	lsls	r0, r6
 8000f08:	4589      	cmp	r9, r1
 8000f0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f0e:	b280      	uxth	r0, r0
 8000f10:	d93e      	bls.n	8000f90 <__udivmoddi4+0x2e8>
 8000f12:	1879      	adds	r1, r7, r1
 8000f14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f18:	d201      	bcs.n	8000f1e <__udivmoddi4+0x276>
 8000f1a:	4589      	cmp	r9, r1
 8000f1c:	d81f      	bhi.n	8000f5e <__udivmoddi4+0x2b6>
 8000f1e:	eba1 0109 	sub.w	r1, r1, r9
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fb09 f804 	mul.w	r8, r9, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	4542      	cmp	r2, r8
 8000f36:	d229      	bcs.n	8000f8c <__udivmoddi4+0x2e4>
 8000f38:	18ba      	adds	r2, r7, r2
 8000f3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f3e:	d2c4      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f40:	4542      	cmp	r2, r8
 8000f42:	d2c2      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f44:	f1a9 0102 	sub.w	r1, r9, #2
 8000f48:	443a      	add	r2, r7
 8000f4a:	e7be      	b.n	8000eca <__udivmoddi4+0x222>
 8000f4c:	45f0      	cmp	r8, lr
 8000f4e:	d29d      	bcs.n	8000e8c <__udivmoddi4+0x1e4>
 8000f50:	ebbe 0302 	subs.w	r3, lr, r2
 8000f54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f58:	3801      	subs	r0, #1
 8000f5a:	46e1      	mov	r9, ip
 8000f5c:	e796      	b.n	8000e8c <__udivmoddi4+0x1e4>
 8000f5e:	eba7 0909 	sub.w	r9, r7, r9
 8000f62:	4449      	add	r1, r9
 8000f64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6c:	fb09 f804 	mul.w	r8, r9, r4
 8000f70:	e7db      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f72:	4673      	mov	r3, lr
 8000f74:	e77f      	b.n	8000e76 <__udivmoddi4+0x1ce>
 8000f76:	4650      	mov	r0, sl
 8000f78:	e766      	b.n	8000e48 <__udivmoddi4+0x1a0>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e6fd      	b.n	8000d7a <__udivmoddi4+0xd2>
 8000f7e:	443b      	add	r3, r7
 8000f80:	3a02      	subs	r2, #2
 8000f82:	e733      	b.n	8000dec <__udivmoddi4+0x144>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	443b      	add	r3, r7
 8000f8a:	e71c      	b.n	8000dc6 <__udivmoddi4+0x11e>
 8000f8c:	4649      	mov	r1, r9
 8000f8e:	e79c      	b.n	8000eca <__udivmoddi4+0x222>
 8000f90:	eba1 0109 	sub.w	r1, r1, r9
 8000f94:	46c4      	mov	ip, r8
 8000f96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9a:	fb09 f804 	mul.w	r8, r9, r4
 8000f9e:	e7c4      	b.n	8000f2a <__udivmoddi4+0x282>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <DWT_Delay_Init>:
 *      Author: IoT Main
 */

#include "DHT.h"
uint32_t DWT_Delay_Init(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <DWT_Delay_Init+0x58>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	4a13      	ldr	r2, [pc, #76]	@ (8000ffc <DWT_Delay_Init+0x58>)
 8000fae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000fb2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <DWT_Delay_Init+0x58>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	4a10      	ldr	r2, [pc, #64]	@ (8000ffc <DWT_Delay_Init+0x58>)
 8000fba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fbe:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <DWT_Delay_Init+0x5c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8001000 <DWT_Delay_Init+0x5c>)
 8000fc6:	f023 0301 	bic.w	r3, r3, #1
 8000fca:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <DWT_Delay_Init+0x5c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001000 <DWT_Delay_Init+0x5c>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <DWT_Delay_Init+0x5c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000fde:	bf00      	nop
  __ASM volatile ("NOP");
 8000fe0:	bf00      	nop
  __ASM volatile ("NOP");
 8000fe2:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <DWT_Delay_Init+0x5c>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 8000fec:	2300      	movs	r3, #0
 8000fee:	e000      	b.n	8000ff2 <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 8000ff0:	2301      	movs	r3, #1
  }

}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000edf0 	.word	0xe000edf0
 8001000:	e0001000 	.word	0xe0001000

08001004 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800100c:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <DWT_Delay_us+0x40>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001012:	f003 fb59 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 8001016:	4603      	mov	r3, r0
 8001018:	4a0b      	ldr	r2, [pc, #44]	@ (8001048 <DWT_Delay_us+0x44>)
 800101a:	fba2 2303 	umull	r2, r3, r2, r3
 800101e:	0c9b      	lsrs	r3, r3, #18
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	fb02 f303 	mul.w	r3, r2, r3
 8001026:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001028:	bf00      	nop
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <DWT_Delay_us+0x40>)
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	1ad2      	subs	r2, r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	d3f8      	bcc.n	800102a <DWT_Delay_us+0x26>
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e0001000 	.word	0xe0001000
 8001048:	431bde83 	.word	0x431bde83

0800104c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4619      	mov	r1, r3
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f002 fce6 	bl	8003a4c <HAL_GPIO_Init>
}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010a4:	887b      	ldrh	r3, [r7, #2]
 80010a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4619      	mov	r1, r3
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f002 fcca 	bl	8003a4c <HAL_GPIO_Init>
}
 80010b8:	bf00      	nop
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <DHT11_Init>:

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80010c4:	f7ff ff6e 	bl	8000fa4 <DWT_Delay_Init>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80010c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010cc:	4807      	ldr	r0, [pc, #28]	@ (80010ec <DHT11_Init+0x2c>)
 80010ce:	f7ff ffbd 	bl	800104c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010d8:	4804      	ldr	r0, [pc, #16]	@ (80010ec <DHT11_Init+0x2c>)
 80010da:	f002 fe53 	bl	8003d84 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80010de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010e2:	f001 fe7f 	bl	8002de4 <HAL_Delay>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40020800 	.word	0x40020800

080010f0 <DHT11_Start>:

void DHT11_Start (void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80010f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010f8:	4811      	ldr	r0, [pc, #68]	@ (8001140 <DHT11_Start+0x50>)
 80010fa:	f7ff ffa7 	bl	800104c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001104:	480e      	ldr	r0, [pc, #56]	@ (8001140 <DHT11_Start+0x50>)
 8001106:	f002 fe3d 	bl	8003d84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001110:	480b      	ldr	r0, [pc, #44]	@ (8001140 <DHT11_Start+0x50>)
 8001112:	f002 fe37 	bl	8003d84 <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);
 8001116:	f244 6050 	movw	r0, #18000	@ 0x4650
 800111a:	f7ff ff73 	bl	8001004 <DWT_Delay_us>
	//delay_us (18000);   // wait for 18ms
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800111e:	2201      	movs	r2, #1
 8001120:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001124:	4806      	ldr	r0, [pc, #24]	@ (8001140 <DHT11_Start+0x50>)
 8001126:	f002 fe2d 	bl	8003d84 <HAL_GPIO_WritePin>
	DWT_Delay_us(20);
 800112a:	2014      	movs	r0, #20
 800112c:	f7ff ff6a 	bl	8001004 <DWT_Delay_us>
	//delay_us (20);   // wait for 20us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8001130:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001134:	4802      	ldr	r0, [pc, #8]	@ (8001140 <DHT11_Start+0x50>)
 8001136:	f7ff ffa7 	bl	8001088 <Set_Pin_Input>
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40020800 	.word	0x40020800

08001144 <DHT11_Stop>:

void DHT11_Stop (void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001148:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800114c:	4805      	ldr	r0, [pc, #20]	@ (8001164 <DHT11_Stop+0x20>)
 800114e:	f7ff ff7d 	bl	800104c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001152:	2201      	movs	r2, #1
 8001154:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001158:	4802      	ldr	r0, [pc, #8]	@ (8001164 <DHT11_Stop+0x20>)
 800115a:	f002 fe13 	bl	8003d84 <HAL_GPIO_WritePin>
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40020800 	.word	0x40020800

08001168 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	71fb      	strb	r3, [r7, #7]

	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001172:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001176:	4812      	ldr	r0, [pc, #72]	@ (80011c0 <DHT11_Check_Response+0x58>)
 8001178:	f002 fdec 	bl	8003d54 <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10f      	bne.n	80011a2 <DHT11_Check_Response+0x3a>
	{
		DWT_Delay_us(80);
 8001182:	2050      	movs	r0, #80	@ 0x50
 8001184:	f7ff ff3e 	bl	8001004 <DWT_Delay_us>
		//delay_us (80);
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001188:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800118c:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <DHT11_Check_Response+0x58>)
 800118e:	f002 fde1 	bl	8003d54 <HAL_GPIO_ReadPin>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <DHT11_Check_Response+0x36>
 8001198:	2301      	movs	r3, #1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	e001      	b.n	80011a2 <DHT11_Check_Response+0x3a>
		else Response = -1; // 255
 800119e:	23ff      	movs	r3, #255	@ 0xff
 80011a0:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 80011a2:	bf00      	nop
 80011a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011a8:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <DHT11_Check_Response+0x58>)
 80011aa:	f002 fdd3 	bl	8003d54 <HAL_GPIO_ReadPin>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f7      	bne.n	80011a4 <DHT11_Check_Response+0x3c>

	return Response;
 80011b4:	79fb      	ldrb	r3, [r7, #7]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40020800 	.word	0x40020800

080011c4 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	71bb      	strb	r3, [r7, #6]
 80011ce:	e03a      	b.n	8001246 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 80011d0:	bf00      	nop
 80011d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011d6:	4820      	ldr	r0, [pc, #128]	@ (8001258 <DHT11_Read+0x94>)
 80011d8:	f002 fdbc 	bl	8003d54 <HAL_GPIO_ReadPin>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f7      	beq.n	80011d2 <DHT11_Read+0xe>
		DWT_Delay_us(40);
 80011e2:	2028      	movs	r0, #40	@ 0x28
 80011e4:	f7ff ff0e 	bl	8001004 <DWT_Delay_us>
		//delay_us (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80011e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011ec:	481a      	ldr	r0, [pc, #104]	@ (8001258 <DHT11_Read+0x94>)
 80011ee:	f002 fdb1 	bl	8003d54 <HAL_GPIO_ReadPin>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10e      	bne.n	8001216 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2201      	movs	r2, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	b25b      	sxtb	r3, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	b25a      	sxtb	r2, r3
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	4013      	ands	r3, r2
 8001210:	b25b      	sxtb	r3, r3
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	e00b      	b.n	800122e <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	f1c3 0307 	rsb	r3, r3, #7
 800121c:	2201      	movs	r2, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	b25a      	sxtb	r2, r3
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	4313      	orrs	r3, r2
 800122a:	b25b      	sxtb	r3, r3
 800122c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 800122e:	bf00      	nop
 8001230:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001234:	4808      	ldr	r0, [pc, #32]	@ (8001258 <DHT11_Read+0x94>)
 8001236:	f002 fd8d 	bl	8003d54 <HAL_GPIO_ReadPin>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f7      	bne.n	8001230 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8001240:	79bb      	ldrb	r3, [r7, #6]
 8001242:	3301      	adds	r3, #1
 8001244:	71bb      	strb	r3, [r7, #6]
 8001246:	79bb      	ldrb	r3, [r7, #6]
 8001248:	2b07      	cmp	r3, #7
 800124a:	d9c1      	bls.n	80011d0 <DHT11_Read+0xc>
	}
	return i;
 800124c:	79fb      	ldrb	r3, [r7, #7]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40020800 	.word	0x40020800

0800125c <DHT11_readData>:

DHT11_TypeDef DHT11_readData()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	DHT11_TypeDef dht11;
	DHT11_Start();
 8001264:	f7ff ff44 	bl	80010f0 <DHT11_Start>
	if ((dht11.status = DHT11_Check_Response()) < 0) return dht11;
 8001268:	f7ff ff7e 	bl	8001168 <DHT11_Check_Response>
 800126c:	4603      	mov	r3, r0
 800126e:	737b      	strb	r3, [r7, #13]
	dht11.rh_byte1 = DHT11_Read ();
 8001270:	f7ff ffa8 	bl	80011c4 <DHT11_Read>
 8001274:	4603      	mov	r3, r0
 8001276:	723b      	strb	r3, [r7, #8]
	dht11.rh_byte2 = DHT11_Read ();
 8001278:	f7ff ffa4 	bl	80011c4 <DHT11_Read>
 800127c:	4603      	mov	r3, r0
 800127e:	727b      	strb	r3, [r7, #9]
	dht11.temp_byte1 = DHT11_Read ();
 8001280:	f7ff ffa0 	bl	80011c4 <DHT11_Read>
 8001284:	4603      	mov	r3, r0
 8001286:	72bb      	strb	r3, [r7, #10]
	dht11.temp_byte2 = DHT11_Read ();
 8001288:	f7ff ff9c 	bl	80011c4 <DHT11_Read>
 800128c:	4603      	mov	r3, r0
 800128e:	72fb      	strb	r3, [r7, #11]
	dht11.checksum = DHT11_Read();
 8001290:	f7ff ff98 	bl	80011c4 <DHT11_Read>
 8001294:	4603      	mov	r3, r0
 8001296:	733b      	strb	r3, [r7, #12]
	DHT11_Stop();
 8001298:	f7ff ff54 	bl	8001144 <DHT11_Stop>
	return dht11;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	461a      	mov	r2, r3
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	6010      	str	r0, [r2, #0]
 80012a8:	889b      	ldrh	r3, [r3, #4]
 80012aa:	8093      	strh	r3, [r2, #4]
}
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	807b      	strh	r3, [r7, #2]
    *length = 0;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 80012c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012cc:	2100      	movs	r1, #0
 80012ce:	68b8      	ldr	r0, [r7, #8]
 80012d0:	f006 f9b0 	bl	8007634 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 80012d4:	f240 4202 	movw	r2, #1026	@ 0x402
 80012d8:	2100      	movs	r1, #0
 80012da:	4826      	ldr	r0, [pc, #152]	@ (8001374 <esp_at_command+0xc0>)
 80012dc:	f006 f9aa 	bl	8007634 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f7fe ffdd 	bl	80002a0 <strlen>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	2364      	movs	r3, #100	@ 0x64
 80012ec:	68f9      	ldr	r1, [r7, #12]
 80012ee:	4822      	ldr	r0, [pc, #136]	@ (8001378 <esp_at_command+0xc4>)
 80012f0:	f004 fa72 	bl	80057d8 <HAL_UART_Transmit>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d032      	beq.n	8001360 <esp_at_command+0xac>
        return -1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	e035      	b.n	800136c <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 8001300:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <esp_at_command+0xc0>)
 8001302:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001306:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800130a:	d302      	bcc.n	8001312 <esp_at_command+0x5e>
            return -2;
 800130c:	f06f 0301 	mvn.w	r3, #1
 8001310:	e02c      	b.n	800136c <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 8001312:	491a      	ldr	r1, [pc, #104]	@ (800137c <esp_at_command+0xc8>)
 8001314:	4817      	ldr	r0, [pc, #92]	@ (8001374 <esp_at_command+0xc0>)
 8001316:	f006 fa11 	bl	800773c <strstr>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <esp_at_command+0x72>
            return -3;
 8001320:	f06f 0302 	mvn.w	r3, #2
 8001324:	e022      	b.n	800136c <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 8001326:	4916      	ldr	r1, [pc, #88]	@ (8001380 <esp_at_command+0xcc>)
 8001328:	4812      	ldr	r0, [pc, #72]	@ (8001374 <esp_at_command+0xc0>)
 800132a:	f006 fa07 	bl	800773c <strstr>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00e      	beq.n	8001352 <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 8001334:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <esp_at_command+0xc0>)
 8001336:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800133a:	461a      	mov	r2, r3
 800133c:	490d      	ldr	r1, [pc, #52]	@ (8001374 <esp_at_command+0xc0>)
 800133e:	68b8      	ldr	r0, [r7, #8]
 8001340:	f006 fa91 	bl	8007866 <memcpy>
            *length = cb_data.length;
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <esp_at_command+0xc0>)
 8001346:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	801a      	strh	r2, [r3, #0]
            return 0;
 800134e:	2300      	movs	r3, #0
 8001350:	e00c      	b.n	800136c <esp_at_command+0xb8>
        }
        time_out -= 10;
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	3b0a      	subs	r3, #10
 8001356:	b29b      	uxth	r3, r3
 8001358:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 800135a:	200a      	movs	r0, #10
 800135c:	f001 fd42 	bl	8002de4 <HAL_Delay>
    while(time_out > 0)
 8001360:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001364:	2b00      	cmp	r3, #0
 8001366:	dccb      	bgt.n	8001300 <esp_at_command+0x4c>
    }
    return -4;
 8001368:	f06f 0303 	mvn.w	r3, #3
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000063c 	.word	0x2000063c
 8001378:	20000bac 	.word	0x20000bac
 800137c:	0800a718 	.word	0x0800a718
 8001380:	0800a720 	.word	0x0800a720

08001384 <esp_reset>:

static int esp_reset(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 800138e:	1dba      	adds	r2, r7, #6
 8001390:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001394:	4909      	ldr	r1, [pc, #36]	@ (80013bc <esp_reset+0x38>)
 8001396:	480a      	ldr	r0, [pc, #40]	@ (80013c0 <esp_reset+0x3c>)
 8001398:	f7ff ff8c 	bl	80012b4 <esp_at_command>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d002      	beq.n	80013a8 <esp_reset+0x24>
    {
    	return -1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	e004      	b.n	80013b2 <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 80013a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013ac:	f001 fd1a 	bl	8002de4 <HAL_Delay>
    return 0;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000204 	.word	0x20000204
 80013c0:	0800a724 	.word	0x0800a724

080013c4 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80013d2:	f107 020a 	add.w	r2, r7, #10
 80013d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013da:	492d      	ldr	r1, [pc, #180]	@ (8001490 <request_ip_addr+0xcc>)
 80013dc:	482d      	ldr	r0, [pc, #180]	@ (8001494 <request_ip_addr+0xd0>)
 80013de:	f7ff ff69 	bl	80012b4 <esp_at_command>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 80013e8:	482b      	ldr	r0, [pc, #172]	@ (8001498 <request_ip_addr+0xd4>)
 80013ea:	f006 f821 	bl	8007430 <puts>
 80013ee:	e049      	b.n	8001484 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 80013f0:	492a      	ldr	r1, [pc, #168]	@ (800149c <request_ip_addr+0xd8>)
 80013f2:	4827      	ldr	r0, [pc, #156]	@ (8001490 <request_ip_addr+0xcc>)
 80013f4:	f006 f946 	bl	8007684 <strtok>
 80013f8:	6178      	str	r0, [r7, #20]

        if(is_debug)
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d03e      	beq.n	800147e <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	e009      	b.n	800141a <request_ip_addr+0x56>
                printf("%c", response[i]);
 8001406:	4a22      	ldr	r2, [pc, #136]	@ (8001490 <request_ip_addr+0xcc>)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4413      	add	r3, r2
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f005 ffb0 	bl	8007374 <putchar>
            for(int i = 0 ; i < length ; i++)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	3301      	adds	r3, #1
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	897b      	ldrh	r3, [r7, #10]
 800141c:	461a      	mov	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4293      	cmp	r3, r2
 8001422:	dbf0      	blt.n	8001406 <request_ip_addr+0x42>
        }

        while(line != NULL)
 8001424:	e02b      	b.n	800147e <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 8001426:	491e      	ldr	r1, [pc, #120]	@ (80014a0 <request_ip_addr+0xdc>)
 8001428:	6978      	ldr	r0, [r7, #20]
 800142a:	f006 f987 	bl	800773c <strstr>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d01f      	beq.n	8001474 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 8001434:	491b      	ldr	r1, [pc, #108]	@ (80014a4 <request_ip_addr+0xe0>)
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f006 f924 	bl	8007684 <strtok>
                ip = strtok(NULL, "\"");
 800143c:	4919      	ldr	r1, [pc, #100]	@ (80014a4 <request_ip_addr+0xe0>)
 800143e:	2000      	movs	r0, #0
 8001440:	f006 f920 	bl	8007684 <strtok>
 8001444:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 8001446:	4918      	ldr	r1, [pc, #96]	@ (80014a8 <request_ip_addr+0xe4>)
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f7fe fec9 	bl	80001e0 <strcmp>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00f      	beq.n	8001474 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8001454:	2210      	movs	r2, #16
 8001456:	2100      	movs	r1, #0
 8001458:	4814      	ldr	r0, [pc, #80]	@ (80014ac <request_ip_addr+0xe8>)
 800145a:	f006 f8eb 	bl	8007634 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f7fe ff1e 	bl	80002a0 <strlen>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	68f9      	ldr	r1, [r7, #12]
 800146a:	4810      	ldr	r0, [pc, #64]	@ (80014ac <request_ip_addr+0xe8>)
 800146c:	f006 f9fb 	bl	8007866 <memcpy>
                    return 0;
 8001470:	2300      	movs	r3, #0
 8001472:	e009      	b.n	8001488 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8001474:	4909      	ldr	r1, [pc, #36]	@ (800149c <request_ip_addr+0xd8>)
 8001476:	2000      	movs	r0, #0
 8001478:	f006 f904 	bl	8007684 <strtok>
 800147c:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1d0      	bne.n	8001426 <request_ip_addr+0x62>
        }
    }
    return -1;
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000204 	.word	0x20000204
 8001494:	0800a76c 	.word	0x0800a76c
 8001498:	0800a778 	.word	0x0800a778
 800149c:	0800a760 	.word	0x0800a760
 80014a0:	0800a798 	.word	0x0800a798
 80014a4:	0800a768 	.word	0x0800a768
 80014a8:	0800a730 	.word	0x0800a730
 80014ac:	200001f4 	.word	0x200001f4

080014b0 <esp_client_conn>:
int esp_client_conn()
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b092      	sub	sp, #72	@ 0x48
 80014b4:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80014b6:	f107 0308 	add.w	r3, r7, #8
 80014ba:	2240      	movs	r2, #64	@ 0x40
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f006 f8b8 	bl	8007634 <memset>
  uint16_t length = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 80014c8:	f107 0008 	add.w	r0, r7, #8
 80014cc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80014d0:	4a09      	ldr	r2, [pc, #36]	@ (80014f8 <esp_client_conn+0x48>)
 80014d2:	490a      	ldr	r1, [pc, #40]	@ (80014fc <esp_client_conn+0x4c>)
 80014d4:	f005 ffb4 	bl	8007440 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 80014d8:	1dba      	adds	r2, r7, #6
 80014da:	f107 0008 	add.w	r0, r7, #8
 80014de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e2:	4907      	ldr	r1, [pc, #28]	@ (8001500 <esp_client_conn+0x50>)
 80014e4:	f7ff fee6 	bl	80012b4 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 80014e8:	4806      	ldr	r0, [pc, #24]	@ (8001504 <esp_client_conn+0x54>)
 80014ea:	f000 f909 	bl	8001700 <esp_send_data>
	return 0;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3748      	adds	r7, #72	@ 0x48
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	0800a7a4 	.word	0x0800a7a4
 80014fc:	0800a7b4 	.word	0x0800a7b4
 8001500:	20000204 	.word	0x20000204
 8001504:	0800a7d0 	.word	0x0800a7d0

08001508 <esp_get_status>:
int esp_get_status()
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 8001512:	1dba      	adds	r2, r7, #6
 8001514:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001518:	4909      	ldr	r1, [pc, #36]	@ (8001540 <esp_get_status+0x38>)
 800151a:	480a      	ldr	r0, [pc, #40]	@ (8001544 <esp_get_status+0x3c>)
 800151c:	f7ff feca 	bl	80012b4 <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 8001520:	4909      	ldr	r1, [pc, #36]	@ (8001548 <esp_get_status+0x40>)
 8001522:	4807      	ldr	r0, [pc, #28]	@ (8001540 <esp_get_status+0x38>)
 8001524:	f006 f90a 	bl	800773c <strstr>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <esp_get_status+0x2a>
    {
    	return 0;
 800152e:	2300      	movs	r3, #0
 8001530:	e001      	b.n	8001536 <esp_get_status+0x2e>
    }
	return -1;
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000204 	.word	0x20000204
 8001544:	0800a7dc 	.word	0x0800a7dc
 8001548:	0800a7ec 	.word	0x0800a7ec

0800154c <drv_esp_init>:
int drv_esp_init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 8001550:	2210      	movs	r2, #16
 8001552:	2100      	movs	r1, #0
 8001554:	4806      	ldr	r0, [pc, #24]	@ (8001570 <drv_esp_init+0x24>)
 8001556:	f006 f86d 	bl	8007634 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 800155a:	2201      	movs	r2, #1
 800155c:	4905      	ldr	r1, [pc, #20]	@ (8001574 <drv_esp_init+0x28>)
 800155e:	4806      	ldr	r0, [pc, #24]	@ (8001578 <drv_esp_init+0x2c>)
 8001560:	f004 f9c5 	bl	80058ee <HAL_UART_Receive_IT>

    return esp_reset();
 8001564:	f7ff ff0e 	bl	8001384 <esp_reset>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200001f4 	.word	0x200001f4
 8001574:	2000063b 	.word	0x2000063b
 8001578:	20000bac 	.word	0x20000bac

0800157c <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b094      	sub	sp, #80	@ 0x50
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	2240      	movs	r2, #64	@ 0x40
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f006 f84d 	bl	8007634 <memset>
  if(ssid == NULL || passwd == NULL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d002      	beq.n	80015a6 <ap_conn_func+0x2a>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d103      	bne.n	80015ae <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 80015a6:	4817      	ldr	r0, [pc, #92]	@ (8001604 <ap_conn_func+0x88>)
 80015a8:	f005 ff42 	bl	8007430 <puts>
 80015ac:	e026      	b.n	80015fc <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 80015ae:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 80015b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b6:	4914      	ldr	r1, [pc, #80]	@ (8001608 <ap_conn_func+0x8c>)
 80015b8:	4814      	ldr	r0, [pc, #80]	@ (800160c <ap_conn_func+0x90>)
 80015ba:	f7ff fe7b 	bl	80012b4 <esp_at_command>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 80015c4:	4812      	ldr	r0, [pc, #72]	@ (8001610 <ap_conn_func+0x94>)
 80015c6:	f005 ff33 	bl	8007430 <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 80015ca:	f107 000c 	add.w	r0, r7, #12
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4910      	ldr	r1, [pc, #64]	@ (8001614 <ap_conn_func+0x98>)
 80015d4:	f005 ff34 	bl	8007440 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 80015d8:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 80015dc:	f107 000c 	add.w	r0, r7, #12
 80015e0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80015e4:	4908      	ldr	r1, [pc, #32]	@ (8001608 <ap_conn_func+0x8c>)
 80015e6:	f7ff fe65 	bl	80012b4 <esp_at_command>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	4619      	mov	r1, r3
 80015f6:	4808      	ldr	r0, [pc, #32]	@ (8001618 <ap_conn_func+0x9c>)
 80015f8:	f005 feaa 	bl	8007350 <iprintf>
}
 80015fc:	3750      	adds	r7, #80	@ 0x50
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	0800a850 	.word	0x0800a850
 8001608:	20000204 	.word	0x20000204
 800160c:	0800a87c 	.word	0x0800a87c
 8001610:	0800a88c 	.word	0x0800a88c
 8001614:	0800a8a0 	.word	0x0800a8a0
 8001618:	0800a8b8 	.word	0x0800a8b8

0800161c <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a23      	ldr	r2, [pc, #140]	@ (80016b8 <HAL_UART_RxCpltCallback+0x9c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d117      	bne.n	800165e <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 800162e:	4b23      	ldr	r3, [pc, #140]	@ (80016bc <HAL_UART_RxCpltCallback+0xa0>)
 8001630:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001638:	d20c      	bcs.n	8001654 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 800163a:	4b20      	ldr	r3, [pc, #128]	@ (80016bc <HAL_UART_RxCpltCallback+0xa0>)
 800163c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	b291      	uxth	r1, r2
 8001644:	4a1d      	ldr	r2, [pc, #116]	@ (80016bc <HAL_UART_RxCpltCallback+0xa0>)
 8001646:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 800164a:	461a      	mov	r2, r3
 800164c:	4b1c      	ldr	r3, [pc, #112]	@ (80016c0 <HAL_UART_RxCpltCallback+0xa4>)
 800164e:	7819      	ldrb	r1, [r3, #0]
 8001650:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <HAL_UART_RxCpltCallback+0xa0>)
 8001652:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 8001654:	2201      	movs	r2, #1
 8001656:	491a      	ldr	r1, [pc, #104]	@ (80016c0 <HAL_UART_RxCpltCallback+0xa4>)
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f004 f948 	bl	80058ee <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a18      	ldr	r2, [pc, #96]	@ (80016c4 <HAL_UART_RxCpltCallback+0xa8>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d122      	bne.n	80016ae <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8001668:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <HAL_UART_RxCpltCallback+0xac>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a17      	ldr	r2, [pc, #92]	@ (80016cc <HAL_UART_RxCpltCallback+0xb0>)
 800166e:	7811      	ldrb	r1, [r2, #0]
 8001670:	4a17      	ldr	r2, [pc, #92]	@ (80016d0 <HAL_UART_RxCpltCallback+0xb4>)
 8001672:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <HAL_UART_RxCpltCallback+0xac>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a15      	ldr	r2, [pc, #84]	@ (80016d0 <HAL_UART_RxCpltCallback+0xb4>)
 800167a:	5cd3      	ldrb	r3, [r2, r3]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b0d      	cmp	r3, #13
 8001680:	d10b      	bne.n	800169a <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <HAL_UART_RxCpltCallback+0xac>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <HAL_UART_RxCpltCallback+0xb4>)
 8001688:	2100      	movs	r1, #0
 800168a:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 800168c:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <HAL_UART_RxCpltCallback+0xb8>)
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8001692:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <HAL_UART_RxCpltCallback+0xac>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	e004      	b.n	80016a4 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <HAL_UART_RxCpltCallback+0xac>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	4a09      	ldr	r2, [pc, #36]	@ (80016c8 <HAL_UART_RxCpltCallback+0xac>)
 80016a2:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 80016a4:	2201      	movs	r2, #1
 80016a6:	4909      	ldr	r1, [pc, #36]	@ (80016cc <HAL_UART_RxCpltCallback+0xb0>)
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f004 f920 	bl	80058ee <HAL_UART_Receive_IT>
    }
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40011400 	.word	0x40011400
 80016bc:	2000063c 	.word	0x2000063c
 80016c0:	2000063b 	.word	0x2000063b
 80016c4:	40004400 	.word	0x40004400
 80016c8:	20000a40 	.word	0x20000a40
 80016cc:	2000063a 	.word	0x2000063a
 80016d0:	20000608 	.word	0x20000608
 80016d4:	20000604 	.word	0x20000604

080016d8 <AiotClient_Init>:


void AiotClient_Init()
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 80016dc:	4906      	ldr	r1, [pc, #24]	@ (80016f8 <AiotClient_Init+0x20>)
 80016de:	4807      	ldr	r0, [pc, #28]	@ (80016fc <AiotClient_Init+0x24>)
 80016e0:	f7ff ff4c 	bl	800157c <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 80016e4:	2001      	movs	r0, #1
 80016e6:	f7ff fe6d 	bl	80013c4 <request_ip_addr>
	esp_client_conn();
 80016ea:	f7ff fee1 	bl	80014b0 <esp_client_conn>
	esp_get_status();
 80016ee:	f7ff ff0b 	bl	8001508 <esp_get_status>
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	0800a918 	.word	0x0800a918
 80016fc:	0800a924 	.word	0x0800a924

08001700 <esp_send_data>:

void esp_send_data(char *data)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b094      	sub	sp, #80	@ 0x50
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	2240      	movs	r2, #64	@ 0x40
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f005 ff8f 	bl	8007634 <memset>
	uint16_t length = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7fe fdc0 	bl	80002a0 <strlen>
 8001720:	4602      	mov	r2, r0
 8001722:	f107 0310 	add.w	r3, r7, #16
 8001726:	490e      	ldr	r1, [pc, #56]	@ (8001760 <esp_send_data+0x60>)
 8001728:	4618      	mov	r0, r3
 800172a:	f005 fe89 	bl	8007440 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 800172e:	f107 020e 	add.w	r2, r7, #14
 8001732:	f107 0010 	add.w	r0, r7, #16
 8001736:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800173a:	490a      	ldr	r1, [pc, #40]	@ (8001764 <esp_send_data+0x64>)
 800173c:	f7ff fdba 	bl	80012b4 <esp_at_command>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d107      	bne.n	8001756 <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8001746:	f107 020e 	add.w	r2, r7, #14
 800174a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800174e:	4905      	ldr	r1, [pc, #20]	@ (8001764 <esp_send_data+0x64>)
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fdaf 	bl	80012b4 <esp_at_command>
	}
}
 8001756:	bf00      	nop
 8001758:	3750      	adds	r7, #80	@ 0x50
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	0800a92c 	.word	0x0800a92c
 8001764:	20000204 	.word	0x20000204

08001768 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 800176c:	2201      	movs	r2, #1
 800176e:	4903      	ldr	r1, [pc, #12]	@ (800177c <drv_uart_init+0x14>)
 8001770:	4803      	ldr	r0, [pc, #12]	@ (8001780 <drv_uart_init+0x18>)
 8001772:	f004 f8bc 	bl	80058ee <HAL_UART_Receive_IT>
    return 0;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2000063a 	.word	0x2000063a
 8001780:	20000b64 	.word	0x20000b64

08001784 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 800178c:	1d39      	adds	r1, r7, #4
 800178e:	230a      	movs	r3, #10
 8001790:	2201      	movs	r2, #1
 8001792:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <__io_putchar+0x2c>)
 8001794:	f004 f820 	bl	80057d8 <HAL_UART_Transmit>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <__io_putchar+0x1e>
        return ch;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	e001      	b.n	80017a6 <__io_putchar+0x22>
    return -1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000b64 	.word	0x20000b64
 80017b4:	00000000 	.word	0x00000000

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
    int ret = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c2:	f001 fa9d 	bl	8002d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c6:	f000 f975 	bl	8001ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ca:	f000 fc1d 	bl	8002008 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017ce:	f000 fbc7 	bl	8001f60 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80017d2:	f000 fbef 	bl	8001fb4 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 80017d6:	f000 fb4d 	bl	8001e74 <MX_TIM4_Init>
  MX_TIM3_Init();
 80017da:	f000 fad5 	bl	8001d88 <MX_TIM3_Init>
  MX_TIM1_Init();
 80017de:	f000 fa33 	bl	8001c48 <MX_TIM1_Init>
  MX_ADC1_Init();
 80017e2:	f000 f9d1 	bl	8001b88 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    printf("Start main() - wifi\r\n");
 80017e6:	4898      	ldr	r0, [pc, #608]	@ (8001a48 <main+0x290>)
 80017e8:	f005 fe22 	bl	8007430 <puts>
    ret |= drv_uart_init();
 80017ec:	f7ff ffbc 	bl	8001768 <drv_uart_init>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	60bb      	str	r3, [r7, #8]
    ret |= drv_esp_init();
 80017f8:	f7ff fea8 	bl	800154c <drv_esp_init>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	4313      	orrs	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
    if (ret != 0)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <main+0x5c>
    {
        printf("Esp response error\r\n");
 800180a:	4890      	ldr	r0, [pc, #576]	@ (8001a4c <main+0x294>)
 800180c:	f005 fe10 	bl	8007430 <puts>
        Error_Handler();
 8001810:	f000 ff18 	bl	8002644 <Error_Handler>
    }

    AiotClient_Init();
 8001814:	f7ff ff60 	bl	80016d8 <AiotClient_Init>

    DHT11_Init();
 8001818:	f7ff fc52 	bl	80010c0 <DHT11_Init>

    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 800181c:	2100      	movs	r1, #0
 800181e:	488c      	ldr	r0, [pc, #560]	@ (8001a50 <main+0x298>)
 8001820:	f003 f892 	bl	8004948 <HAL_TIM_PWM_Start>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <main+0x76>
        Error_Handler();
 800182a:	f000 ff0b 	bl	8002644 <Error_Handler>
    if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 800182e:	2100      	movs	r1, #0
 8001830:	4888      	ldr	r0, [pc, #544]	@ (8001a54 <main+0x29c>)
 8001832:	f003 f889 	bl	8004948 <HAL_TIM_PWM_Start>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <main+0x88>
        Error_Handler();
 800183c:	f000 ff02 	bl	8002644 <Error_Handler>
    if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8001840:	4884      	ldr	r0, [pc, #528]	@ (8001a54 <main+0x29c>)
 8001842:	f002 ffc5 	bl	80047d0 <HAL_TIM_Base_Start_IT>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <main+0x98>
        Error_Handler();
 800184c:	f000 fefa 	bl	8002644 <Error_Handler>

    if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 8001850:	2100      	movs	r1, #0
 8001852:	4881      	ldr	r0, [pc, #516]	@ (8001a58 <main+0x2a0>)
 8001854:	f003 f878 	bl	8004948 <HAL_TIM_PWM_Start>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <main+0xaa>
        Error_Handler();
 800185e:	f000 fef1 	bl	8002644 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        if (HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8001862:	487e      	ldr	r0, [pc, #504]	@ (8001a5c <main+0x2a4>)
 8001864:	f001 fb26 	bl	8002eb4 <HAL_ADC_Start_IT>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <main+0xba>
            Error_Handler();
 800186e:	f000 fee9 	bl	8002644 <Error_Handler>
        if (strstr((char *)cb_data.buf, "+IPD") && cb_data.buf[cb_data.length - 1] == '\n')
 8001872:	497b      	ldr	r1, [pc, #492]	@ (8001a60 <main+0x2a8>)
 8001874:	487b      	ldr	r0, [pc, #492]	@ (8001a64 <main+0x2ac>)
 8001876:	f005 ff61 	bl	800773c <strstr>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01d      	beq.n	80018bc <main+0x104>
 8001880:	4b78      	ldr	r3, [pc, #480]	@ (8001a64 <main+0x2ac>)
 8001882:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001886:	3b01      	subs	r3, #1
 8001888:	4a76      	ldr	r2, [pc, #472]	@ (8001a64 <main+0x2ac>)
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	2b0a      	cmp	r3, #10
 800188e:	d115      	bne.n	80018bc <main+0x104>
        {
            //?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
            strcpy(strBuff, strchr((char *)cb_data.buf, '['));
 8001890:	215b      	movs	r1, #91	@ 0x5b
 8001892:	4874      	ldr	r0, [pc, #464]	@ (8001a64 <main+0x2ac>)
 8001894:	f005 fed6 	bl	8007644 <strchr>
 8001898:	4603      	mov	r3, r0
 800189a:	4619      	mov	r1, r3
 800189c:	4872      	ldr	r0, [pc, #456]	@ (8001a68 <main+0x2b0>)
 800189e:	f005 ffda 	bl	8007856 <strcpy>
            memset(cb_data.buf, 0x0, sizeof(cb_data.buf));
 80018a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018a6:	2100      	movs	r1, #0
 80018a8:	486e      	ldr	r0, [pc, #440]	@ (8001a64 <main+0x2ac>)
 80018aa:	f005 fec3 	bl	8007634 <memset>
            cb_data.length = 0;
 80018ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001a64 <main+0x2ac>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
            esp_event(strBuff);
 80018b6:	486c      	ldr	r0, [pc, #432]	@ (8001a68 <main+0x2b0>)
 80018b8:	f000 fc46 	bl	8002148 <esp_event>
        }
        if (rx2Flag)
 80018bc:	4b6b      	ldr	r3, [pc, #428]	@ (8001a6c <main+0x2b4>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <main+0x11c>
        {
            printf("recv2 : %s\r\n", rx2Data);
 80018c6:	496a      	ldr	r1, [pc, #424]	@ (8001a70 <main+0x2b8>)
 80018c8:	486a      	ldr	r0, [pc, #424]	@ (8001a74 <main+0x2bc>)
 80018ca:	f005 fd41 	bl	8007350 <iprintf>
            rx2Flag = 0;
 80018ce:	4b67      	ldr	r3, [pc, #412]	@ (8001a6c <main+0x2b4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
        }
        if (tim3Flag1Sec) // 1초에 한번
 80018d4:	4b68      	ldr	r3, [pc, #416]	@ (8001a78 <main+0x2c0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d03b      	beq.n	8001954 <main+0x19c>
        {
            tim3Flag1Sec = 0;
 80018dc:	4b66      	ldr	r3, [pc, #408]	@ (8001a78 <main+0x2c0>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
            if (!(tim3Sec % 10)) // 10초에 한번
 80018e2:	4b66      	ldr	r3, [pc, #408]	@ (8001a7c <main+0x2c4>)
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	4b66      	ldr	r3, [pc, #408]	@ (8001a80 <main+0x2c8>)
 80018e8:	fba3 2301 	umull	r2, r3, r3, r1
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	1aca      	subs	r2, r1, r3
 80018f8:	2a00      	cmp	r2, #0
 80018fa:	d109      	bne.n	8001910 <main+0x158>
            {
                if (esp_get_status() != 0)
 80018fc:	f7ff fe04 	bl	8001508 <esp_get_status>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <main+0x158>
                {
                    printf("server connecting ...\r\n");
 8001906:	485f      	ldr	r0, [pc, #380]	@ (8001a84 <main+0x2cc>)
 8001908:	f005 fd92 	bl	8007430 <puts>
                    esp_client_conn();
 800190c:	f7ff fdd0 	bl	80014b0 <esp_client_conn>
                }
            }
            if (!(tim3Sec % 5)) // 5초에 한번
 8001910:	4b5a      	ldr	r3, [pc, #360]	@ (8001a7c <main+0x2c4>)
 8001912:	6819      	ldr	r1, [r3, #0]
 8001914:	4b5a      	ldr	r3, [pc, #360]	@ (8001a80 <main+0x2c8>)
 8001916:	fba3 2301 	umull	r2, r3, r3, r1
 800191a:	089a      	lsrs	r2, r3, #2
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	1aca      	subs	r2, r1, r3
 8001924:	2a00      	cmp	r2, #0
 8001926:	d115      	bne.n	8001954 <main+0x19c>
            {
                // dht11에서 값 읽어오기
                dht11Data = DHT11_readData();
 8001928:	463b      	mov	r3, r7
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fc96 	bl	800125c <DHT11_readData>
                if (dht11Data.rh_byte1 != 255)
 8001930:	783b      	ldrb	r3, [r7, #0]
 8001932:	2bff      	cmp	r3, #255	@ 0xff
 8001934:	d00b      	beq.n	800194e <main+0x196>
                {
                    // 온도 데이터 전역변수 temp에 저장
                    sprintf(temp, "%d.%d", dht11Data.temp_byte1, dht11Data.temp_byte2);
 8001936:	78bb      	ldrb	r3, [r7, #2]
 8001938:	461a      	mov	r2, r3
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	4952      	ldr	r1, [pc, #328]	@ (8001a88 <main+0x2d0>)
 800193e:	4853      	ldr	r0, [pc, #332]	@ (8001a8c <main+0x2d4>)
 8001940:	f005 fd7e 	bl	8007440 <siprintf>
                    // 습도 데이터 전역변수 humi 에 저장
                    humi = dht11Data.rh_byte1;
 8001944:	783b      	ldrb	r3, [r7, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	4b51      	ldr	r3, [pc, #324]	@ (8001a90 <main+0x2d8>)
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e002      	b.n	8001954 <main+0x19c>
                }
                else
                    printf("DHT11 response error\r\n");
 800194e:	4851      	ldr	r0, [pc, #324]	@ (8001a94 <main+0x2dc>)
 8001950:	f005 fd6e 	bl	8007430 <puts>
            }
        }

        // outdoorsensor 거리 변환
        float voltage = (ADC1ConvertValue[0] / 4095.0f) * 3.3f; // 12-bit ADC의 최대 값은 4095
 8001954:	4b50      	ldr	r3, [pc, #320]	@ (8001a98 <main+0x2e0>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	b29b      	uxth	r3, r3
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001962:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8001a9c <main+0x2e4>
 8001966:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196a:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001aa0 <main+0x2e8>
 800196e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001972:	edc7 7a03 	vstr	s15, [r7, #12]
        if (voltage < 0.1f)
 8001976:	edd7 7a03 	vldr	s15, [r7, #12]
 800197a:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001aa4 <main+0x2ec>
 800197e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001986:	d501      	bpl.n	800198c <main+0x1d4>
            voltage = 0.1f;
 8001988:	4b47      	ldr	r3, [pc, #284]	@ (8001aa8 <main+0x2f0>)
 800198a:	60fb      	str	r3, [r7, #12]
        outDoorSensor.distance = 27.86f / pow(voltage, 1.15f);
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f7fe fdf3 	bl	8000578 <__aeabi_f2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	ed9f 1b28 	vldr	d1, [pc, #160]	@ 8001a38 <main+0x280>
 800199a:	ec43 2b10 	vmov	d0, r2, r3
 800199e:	f007 ff4f 	bl	8009840 <pow>
 80019a2:	ec53 2b10 	vmov	r2, r3, d0
 80019a6:	a126      	add	r1, pc, #152	@ (adr r1, 8001a40 <main+0x288>)
 80019a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019ac:	f7fe ff66 	bl	800087c <__aeabi_ddiv>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	f7ff f90e 	bl	8000bd8 <__aeabi_d2f>
 80019bc:	4603      	mov	r3, r0
 80019be:	4a3b      	ldr	r2, [pc, #236]	@ (8001aac <main+0x2f4>)
 80019c0:	6013      	str	r3, [r2, #0]

        // indoorsensor 거리 변환
        voltage = (ADC1ConvertValue[1] / 4095.0f) * 3.3f; // 12-bit ADC의 최대 값은 4095
 80019c2:	4b35      	ldr	r3, [pc, #212]	@ (8001a98 <main+0x2e0>)
 80019c4:	885b      	ldrh	r3, [r3, #2]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	ee07 3a90 	vmov	s15, r3
 80019cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d0:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8001a9c <main+0x2e4>
 80019d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001aa0 <main+0x2e8>
 80019dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e0:	edc7 7a03 	vstr	s15, [r7, #12]
        if (voltage < 0.1f)
 80019e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80019e8:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001aa4 <main+0x2ec>
 80019ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f4:	d501      	bpl.n	80019fa <main+0x242>
            voltage = 0.1f;
 80019f6:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa8 <main+0x2f0>)
 80019f8:	60fb      	str	r3, [r7, #12]
        inDoorSensor.distance = 27.86f / pow(voltage, 1.15f);
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7fe fdbc 	bl	8000578 <__aeabi_f2d>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	ed9f 1b0c 	vldr	d1, [pc, #48]	@ 8001a38 <main+0x280>
 8001a08:	ec43 2b10 	vmov	d0, r2, r3
 8001a0c:	f007 ff18 	bl	8009840 <pow>
 8001a10:	ec53 2b10 	vmov	r2, r3, d0
 8001a14:	a10a      	add	r1, pc, #40	@ (adr r1, 8001a40 <main+0x288>)
 8001a16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a1a:	f7fe ff2f 	bl	800087c <__aeabi_ddiv>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	f7ff f8d7 	bl	8000bd8 <__aeabi_d2f>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4a20      	ldr	r2, [pc, #128]	@ (8001ab0 <main+0x2f8>)
 8001a2e:	6013      	str	r3, [r2, #0]
    {
 8001a30:	e717      	b.n	8001862 <main+0xaa>
 8001a32:	bf00      	nop
 8001a34:	f3af 8000 	nop.w
 8001a38:	60000000 	.word	0x60000000
 8001a3c:	3ff26666 	.word	0x3ff26666
 8001a40:	00000000 	.word	0x00000000
 8001a44:	403bdc29 	.word	0x403bdc29
 8001a48:	0800a93c 	.word	0x0800a93c
 8001a4c:	0800a954 	.word	0x0800a954
 8001a50:	20000a8c 	.word	0x20000a8c
 8001a54:	20000ad4 	.word	0x20000ad4
 8001a58:	20000b1c 	.word	0x20000b1c
 8001a5c:	20000a44 	.word	0x20000a44
 8001a60:	0800a968 	.word	0x0800a968
 8001a64:	2000063c 	.word	0x2000063c
 8001a68:	20000c30 	.word	0x20000c30
 8001a6c:	20000604 	.word	0x20000604
 8001a70:	20000608 	.word	0x20000608
 8001a74:	0800a970 	.word	0x0800a970
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000bf4 	.word	0x20000bf4
 8001a80:	cccccccd 	.word	0xcccccccd
 8001a84:	0800a980 	.word	0x0800a980
 8001a88:	0800a998 	.word	0x0800a998
 8001a8c:	20000bfc 	.word	0x20000bfc
 8001a90:	20000bf8 	.word	0x20000bf8
 8001a94:	0800a9a0 	.word	0x0800a9a0
 8001a98:	20000c18 	.word	0x20000c18
 8001a9c:	457ff000 	.word	0x457ff000
 8001aa0:	40533333 	.word	0x40533333
 8001aa4:	3dcccccd 	.word	0x3dcccccd
 8001aa8:	3dcccccd 	.word	0x3dcccccd
 8001aac:	20000c20 	.word	0x20000c20
 8001ab0:	20000c28 	.word	0x20000c28

08001ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b094      	sub	sp, #80	@ 0x50
 8001ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aba:	f107 0320 	add.w	r3, r7, #32
 8001abe:	2230      	movs	r2, #48	@ 0x30
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f005 fdb6 	bl	8007634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	4b28      	ldr	r3, [pc, #160]	@ (8001b80 <SystemClock_Config+0xcc>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	4a27      	ldr	r2, [pc, #156]	@ (8001b80 <SystemClock_Config+0xcc>)
 8001ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ae6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ae8:	4b25      	ldr	r3, [pc, #148]	@ (8001b80 <SystemClock_Config+0xcc>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af4:	2300      	movs	r3, #0
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	4b22      	ldr	r3, [pc, #136]	@ (8001b84 <SystemClock_Config+0xd0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a21      	ldr	r2, [pc, #132]	@ (8001b84 <SystemClock_Config+0xd0>)
 8001afe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b1f      	ldr	r3, [pc, #124]	@ (8001b84 <SystemClock_Config+0xd0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b10:	2301      	movs	r3, #1
 8001b12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b14:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b24:	2308      	movs	r3, #8
 8001b26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b28:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001b2c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b32:	2304      	movs	r3, #4
 8001b34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b36:	f107 0320 	add.w	r3, r7, #32
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f002 f960 	bl	8003e00 <HAL_RCC_OscConfig>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b46:	f000 fd7d 	bl	8002644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4a:	230f      	movs	r3, #15
 8001b4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	2102      	movs	r1, #2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f002 fbc2 	bl	80042f0 <HAL_RCC_ClockConfig>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b72:	f000 fd67 	bl	8002644 <Error_Handler>
  }
}
 8001b76:	bf00      	nop
 8001b78:	3750      	adds	r7, #80	@ 0x50
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40007000 	.word	0x40007000

08001b88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b8e:	463b      	mov	r3, r7
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b9a:	4b28      	ldr	r3, [pc, #160]	@ (8001c3c <MX_ADC1_Init+0xb4>)
 8001b9c:	4a28      	ldr	r2, [pc, #160]	@ (8001c40 <MX_ADC1_Init+0xb8>)
 8001b9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ba0:	4b26      	ldr	r3, [pc, #152]	@ (8001c3c <MX_ADC1_Init+0xb4>)
 8001ba2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ba6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ba8:	4b24      	ldr	r3, [pc, #144]	@ (8001c3c <MX_ADC1_Init+0xb4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001bae:	4b23      	ldr	r3, [pc, #140]	@ (8001c3c <MX_ADC1_Init+0xb4>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bb4:	4b21      	ldr	r3, [pc, #132]	@ (8001c3c <MX_ADC1_Init+0xb4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bba:	4b20      	ldr	r3, [pc, #128]	@ (8001c3c <MX_ADC1_Init+0xb4>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c3c <MX_ADC1_Init+0xb4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <MX_ADC1_Init+0xb4>)
 8001bca:	4a1e      	ldr	r2, [pc, #120]	@ (8001c44 <MX_ADC1_Init+0xbc>)
 8001bcc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bce:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <MX_ADC1_Init+0xb4>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001bd4:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <MX_ADC1_Init+0xb4>)
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bda:	4b18      	ldr	r3, [pc, #96]	@ (8001c3c <MX_ADC1_Init+0xb4>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001be2:	4b16      	ldr	r3, [pc, #88]	@ (8001c3c <MX_ADC1_Init+0xb4>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001be8:	4814      	ldr	r0, [pc, #80]	@ (8001c3c <MX_ADC1_Init+0xb4>)
 8001bea:	f001 f91f 	bl	8002e2c <HAL_ADC_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001bf4:	f000 fd26 	bl	8002644 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001c00:	2304      	movs	r3, #4
 8001c02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c04:	463b      	mov	r3, r7
 8001c06:	4619      	mov	r1, r3
 8001c08:	480c      	ldr	r0, [pc, #48]	@ (8001c3c <MX_ADC1_Init+0xb4>)
 8001c0a:	f001 fb43 	bl	8003294 <HAL_ADC_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c14:	f000 fd16 	bl	8002644 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c20:	463b      	mov	r3, r7
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <MX_ADC1_Init+0xb4>)
 8001c26:	f001 fb35 	bl	8003294 <HAL_ADC_ConfigChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001c30:	f000 fd08 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000a44 	.word	0x20000a44
 8001c40:	40012000 	.word	0x40012000
 8001c44:	0f000001 	.word	0x0f000001

08001c48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b096      	sub	sp, #88	@ 0x58
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	611a      	str	r2, [r3, #16]
 8001c76:	615a      	str	r2, [r3, #20]
 8001c78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f005 fcd7 	bl	8007634 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c86:	4b3e      	ldr	r3, [pc, #248]	@ (8001d80 <MX_TIM1_Init+0x138>)
 8001c88:	4a3e      	ldr	r2, [pc, #248]	@ (8001d84 <MX_TIM1_Init+0x13c>)
 8001c8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d80 <MX_TIM1_Init+0x138>)
 8001c8e:	2253      	movs	r2, #83	@ 0x53
 8001c90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	4b3b      	ldr	r3, [pc, #236]	@ (8001d80 <MX_TIM1_Init+0x138>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001c98:	4b39      	ldr	r3, [pc, #228]	@ (8001d80 <MX_TIM1_Init+0x138>)
 8001c9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca0:	4b37      	ldr	r3, [pc, #220]	@ (8001d80 <MX_TIM1_Init+0x138>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ca6:	4b36      	ldr	r3, [pc, #216]	@ (8001d80 <MX_TIM1_Init+0x138>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cac:	4b34      	ldr	r3, [pc, #208]	@ (8001d80 <MX_TIM1_Init+0x138>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cb2:	4833      	ldr	r0, [pc, #204]	@ (8001d80 <MX_TIM1_Init+0x138>)
 8001cb4:	f002 fd3c 	bl	8004730 <HAL_TIM_Base_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001cbe:	f000 fcc1 	bl	8002644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cc8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ccc:	4619      	mov	r1, r3
 8001cce:	482c      	ldr	r0, [pc, #176]	@ (8001d80 <MX_TIM1_Init+0x138>)
 8001cd0:	f003 f89c 	bl	8004e0c <HAL_TIM_ConfigClockSource>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001cda:	f000 fcb3 	bl	8002644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cde:	4828      	ldr	r0, [pc, #160]	@ (8001d80 <MX_TIM1_Init+0x138>)
 8001ce0:	f002 fdd8 	bl	8004894 <HAL_TIM_PWM_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001cea:	f000 fcab 	bl	8002644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cf6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4820      	ldr	r0, [pc, #128]	@ (8001d80 <MX_TIM1_Init+0x138>)
 8001cfe:	f003 fc47 	bl	8005590 <HAL_TIMEx_MasterConfigSynchronization>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d08:	f000 fc9c 	bl	8002644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d0c:	2360      	movs	r3, #96	@ 0x60
 8001d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d20:	2300      	movs	r3, #0
 8001d22:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4813      	ldr	r0, [pc, #76]	@ (8001d80 <MX_TIM1_Init+0x138>)
 8001d32:	f002 ffa9 	bl	8004c88 <HAL_TIM_PWM_ConfigChannel>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001d3c:	f000 fc82 	bl	8002644 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	4619      	mov	r1, r3
 8001d62:	4807      	ldr	r0, [pc, #28]	@ (8001d80 <MX_TIM1_Init+0x138>)
 8001d64:	f003 fc82 	bl	800566c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001d6e:	f000 fc69 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d72:	4803      	ldr	r0, [pc, #12]	@ (8001d80 <MX_TIM1_Init+0x138>)
 8001d74:	f000 fd3c 	bl	80027f0 <HAL_TIM_MspPostInit>

}
 8001d78:	bf00      	nop
 8001d7a:	3758      	adds	r7, #88	@ 0x58
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000a8c 	.word	0x20000a8c
 8001d84:	40010000 	.word	0x40010000

08001d88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08e      	sub	sp, #56	@ 0x38
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9c:	f107 0320 	add.w	r3, r7, #32
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
 8001db4:	615a      	str	r2, [r3, #20]
 8001db6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001db8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001dba:	4a2d      	ldr	r2, [pc, #180]	@ (8001e70 <MX_TIM3_Init+0xe8>)
 8001dbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001dc0:	2253      	movs	r2, #83	@ 0x53
 8001dc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc4:	4b29      	ldr	r3, [pc, #164]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001dca:	4b28      	ldr	r3, [pc, #160]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001dcc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd2:	4b26      	ldr	r3, [pc, #152]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dd8:	4b24      	ldr	r3, [pc, #144]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001dda:	2280      	movs	r2, #128	@ 0x80
 8001ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dde:	4823      	ldr	r0, [pc, #140]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001de0:	f002 fca6 	bl	8004730 <HAL_TIM_Base_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001dea:	f000 fc2b 	bl	8002644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001df4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001df8:	4619      	mov	r1, r3
 8001dfa:	481c      	ldr	r0, [pc, #112]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001dfc:	f003 f806 	bl	8004e0c <HAL_TIM_ConfigClockSource>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001e06:	f000 fc1d 	bl	8002644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e0a:	4818      	ldr	r0, [pc, #96]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001e0c:	f002 fd42 	bl	8004894 <HAL_TIM_PWM_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e16:	f000 fc15 	bl	8002644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e22:	f107 0320 	add.w	r3, r7, #32
 8001e26:	4619      	mov	r1, r3
 8001e28:	4810      	ldr	r0, [pc, #64]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001e2a:	f003 fbb1 	bl	8005590 <HAL_TIMEx_MasterConfigSynchronization>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e34:	f000 fc06 	bl	8002644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e38:	2360      	movs	r3, #96	@ 0x60
 8001e3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4807      	ldr	r0, [pc, #28]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001e50:	f002 ff1a 	bl	8004c88 <HAL_TIM_PWM_ConfigChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e5a:	f000 fbf3 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e5e:	4803      	ldr	r0, [pc, #12]	@ (8001e6c <MX_TIM3_Init+0xe4>)
 8001e60:	f000 fcc6 	bl	80027f0 <HAL_TIM_MspPostInit>

}
 8001e64:	bf00      	nop
 8001e66:	3738      	adds	r7, #56	@ 0x38
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000ad4 	.word	0x20000ad4
 8001e70:	40000400 	.word	0x40000400

08001e74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08e      	sub	sp, #56	@ 0x38
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e88:	f107 0320 	add.w	r3, r7, #32
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
 8001ea0:	615a      	str	r2, [r3, #20]
 8001ea2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f58 <MX_TIM4_Init+0xe4>)
 8001ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8001f5c <MX_TIM4_Init+0xe8>)
 8001ea8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8001f58 <MX_TIM4_Init+0xe4>)
 8001eac:	2253      	movs	r2, #83	@ 0x53
 8001eae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb0:	4b29      	ldr	r3, [pc, #164]	@ (8001f58 <MX_TIM4_Init+0xe4>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001eb6:	4b28      	ldr	r3, [pc, #160]	@ (8001f58 <MX_TIM4_Init+0xe4>)
 8001eb8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ebc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ebe:	4b26      	ldr	r3, [pc, #152]	@ (8001f58 <MX_TIM4_Init+0xe4>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ec4:	4b24      	ldr	r3, [pc, #144]	@ (8001f58 <MX_TIM4_Init+0xe4>)
 8001ec6:	2280      	movs	r2, #128	@ 0x80
 8001ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001eca:	4823      	ldr	r0, [pc, #140]	@ (8001f58 <MX_TIM4_Init+0xe4>)
 8001ecc:	f002 fc30 	bl	8004730 <HAL_TIM_Base_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001ed6:	f000 fbb5 	bl	8002644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ede:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ee0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	481c      	ldr	r0, [pc, #112]	@ (8001f58 <MX_TIM4_Init+0xe4>)
 8001ee8:	f002 ff90 	bl	8004e0c <HAL_TIM_ConfigClockSource>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001ef2:	f000 fba7 	bl	8002644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ef6:	4818      	ldr	r0, [pc, #96]	@ (8001f58 <MX_TIM4_Init+0xe4>)
 8001ef8:	f002 fccc 	bl	8004894 <HAL_TIM_PWM_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001f02:	f000 fb9f 	bl	8002644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f0e:	f107 0320 	add.w	r3, r7, #32
 8001f12:	4619      	mov	r1, r3
 8001f14:	4810      	ldr	r0, [pc, #64]	@ (8001f58 <MX_TIM4_Init+0xe4>)
 8001f16:	f003 fb3b 	bl	8005590 <HAL_TIMEx_MasterConfigSynchronization>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001f20:	f000 fb90 	bl	8002644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f24:	2360      	movs	r3, #96	@ 0x60
 8001f26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	2200      	movs	r2, #0
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4807      	ldr	r0, [pc, #28]	@ (8001f58 <MX_TIM4_Init+0xe4>)
 8001f3c:	f002 fea4 	bl	8004c88 <HAL_TIM_PWM_ConfigChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001f46:	f000 fb7d 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f4a:	4803      	ldr	r0, [pc, #12]	@ (8001f58 <MX_TIM4_Init+0xe4>)
 8001f4c:	f000 fc50 	bl	80027f0 <HAL_TIM_MspPostInit>

}
 8001f50:	bf00      	nop
 8001f52:	3738      	adds	r7, #56	@ 0x38
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000b1c 	.word	0x20000b1c
 8001f5c:	40000800 	.word	0x40000800

08001f60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f64:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f66:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <MX_USART2_UART_Init+0x50>)
 8001f68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f84:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f86:	220c      	movs	r2, #12
 8001f88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f98:	f003 fbce 	bl	8005738 <HAL_UART_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fa2:	f000 fb4f 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000b64 	.word	0x20000b64
 8001fb0:	40004400 	.word	0x40004400

08001fb4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <MX_USART6_UART_Init+0x4c>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	@ (8002004 <MX_USART6_UART_Init+0x50>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8001fbe:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <MX_USART6_UART_Init+0x4c>)
 8001fc0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001fc4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <MX_USART6_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <MX_USART6_UART_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <MX_USART6_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <MX_USART6_UART_Init+0x4c>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <MX_USART6_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <MX_USART6_UART_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	@ (8002000 <MX_USART6_UART_Init+0x4c>)
 8001fec:	f003 fba4 	bl	8005738 <HAL_UART_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001ff6:	f000 fb25 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000bac 	.word	0x20000bac
 8002004:	40011400 	.word	0x40011400

08002008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	@ 0x28
 800200c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]
 800201c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	4b46      	ldr	r3, [pc, #280]	@ (800213c <MX_GPIO_Init+0x134>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	4a45      	ldr	r2, [pc, #276]	@ (800213c <MX_GPIO_Init+0x134>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	6313      	str	r3, [r2, #48]	@ 0x30
 800202e:	4b43      	ldr	r3, [pc, #268]	@ (800213c <MX_GPIO_Init+0x134>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b3f      	ldr	r3, [pc, #252]	@ (800213c <MX_GPIO_Init+0x134>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	4a3e      	ldr	r2, [pc, #248]	@ (800213c <MX_GPIO_Init+0x134>)
 8002044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002048:	6313      	str	r3, [r2, #48]	@ 0x30
 800204a:	4b3c      	ldr	r3, [pc, #240]	@ (800213c <MX_GPIO_Init+0x134>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	4b38      	ldr	r3, [pc, #224]	@ (800213c <MX_GPIO_Init+0x134>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	4a37      	ldr	r2, [pc, #220]	@ (800213c <MX_GPIO_Init+0x134>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6313      	str	r3, [r2, #48]	@ 0x30
 8002066:	4b35      	ldr	r3, [pc, #212]	@ (800213c <MX_GPIO_Init+0x134>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	4b31      	ldr	r3, [pc, #196]	@ (800213c <MX_GPIO_Init+0x134>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	4a30      	ldr	r2, [pc, #192]	@ (800213c <MX_GPIO_Init+0x134>)
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	6313      	str	r3, [r2, #48]	@ 0x30
 8002082:	4b2e      	ldr	r3, [pc, #184]	@ (800213c <MX_GPIO_Init+0x134>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800208e:	2200      	movs	r2, #0
 8002090:	2120      	movs	r1, #32
 8002092:	482b      	ldr	r0, [pc, #172]	@ (8002140 <MX_GPIO_Init+0x138>)
 8002094:	f001 fe76 	bl	8003d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8002098:	2200      	movs	r2, #0
 800209a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800209e:	4829      	ldr	r0, [pc, #164]	@ (8002144 <MX_GPIO_Init+0x13c>)
 80020a0:	f001 fe70 	bl	8003d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020aa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80020ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4619      	mov	r1, r3
 80020ba:	4822      	ldr	r0, [pc, #136]	@ (8002144 <MX_GPIO_Init+0x13c>)
 80020bc:	f001 fcc6 	bl	8003a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0_EXTI0_BUTTON_Pin */
  GPIO_InitStruct.Pin = PC0_EXTI0_BUTTON_Pin;
 80020c0:	2301      	movs	r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PC0_EXTI0_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	481b      	ldr	r0, [pc, #108]	@ (8002144 <MX_GPIO_Init+0x13c>)
 80020d6:	f001 fcb9 	bl	8003a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80020da:	2320      	movs	r3, #32
 80020dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020de:	2301      	movs	r3, #1
 80020e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4619      	mov	r1, r3
 80020f0:	4813      	ldr	r0, [pc, #76]	@ (8002140 <MX_GPIO_Init+0x138>)
 80020f2:	f001 fcab 	bl	8003a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80020f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fc:	2301      	movs	r3, #1
 80020fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	4619      	mov	r1, r3
 800210e:	480d      	ldr	r0, [pc, #52]	@ (8002144 <MX_GPIO_Init+0x13c>)
 8002110:	f001 fc9c 	bl	8003a4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002114:	2200      	movs	r2, #0
 8002116:	2100      	movs	r1, #0
 8002118:	2006      	movs	r0, #6
 800211a:	f001 fbce 	bl	80038ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800211e:	2006      	movs	r0, #6
 8002120:	f001 fbe7 	bl	80038f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002124:	2200      	movs	r2, #0
 8002126:	2100      	movs	r1, #0
 8002128:	2028      	movs	r0, #40	@ 0x28
 800212a:	f001 fbc6 	bl	80038ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800212e:	2028      	movs	r0, #40	@ 0x28
 8002130:	f001 fbdf 	bl	80038f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002134:	bf00      	nop
 8002136:	3728      	adds	r7, #40	@ 0x28
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40023800 	.word	0x40023800
 8002140:	40020000 	.word	0x40020000
 8002144:	40020800 	.word	0x40020800

08002148 <esp_event>:
void MX_GPIO_LED_OFF(int pin)
{
    HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
}
void esp_event(char *recvBuf)
{
 8002148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800214a:	b0d1      	sub	sp, #324	@ 0x144
 800214c:	af06      	add	r7, sp, #24
 800214e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002152:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002156:	6018      	str	r0, [r3, #0]
    int i = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    char *pToken;
    char *pArray[ARR_CNT] = {0};
 800215e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8002162:	2250      	movs	r2, #80	@ 0x50
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f005 fa64 	bl	8007634 <memset>
    char sendBuf[200] = {0};
 800216c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002170:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002174:	4618      	mov	r0, r3
 8002176:	23c8      	movs	r3, #200	@ 0xc8
 8002178:	461a      	mov	r2, r3
 800217a:	2100      	movs	r1, #0
 800217c:	f005 fa5a 	bl	8007634 <memset>

    strBuff[strlen(recvBuf) - 1] = '\0'; //'\n' cut
 8002180:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002184:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	f7fe f889 	bl	80002a0 <strlen>
 800218e:	4603      	mov	r3, r0
 8002190:	3b01      	subs	r3, #1
 8002192:	4aab      	ldr	r2, [pc, #684]	@ (8002440 <esp_event+0x2f8>)
 8002194:	2100      	movs	r1, #0
 8002196:	54d1      	strb	r1, [r2, r3]
    printf("\r\nDebug recv : %s\r\n", recvBuf);
 8002198:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800219c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80021a0:	6819      	ldr	r1, [r3, #0]
 80021a2:	48a8      	ldr	r0, [pc, #672]	@ (8002444 <esp_event+0x2fc>)
 80021a4:	f005 f8d4 	bl	8007350 <iprintf>

    pToken = strtok(recvBuf, "[@]");
 80021a8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80021ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80021b0:	49a5      	ldr	r1, [pc, #660]	@ (8002448 <esp_event+0x300>)
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	f005 fa66 	bl	8007684 <strtok>
 80021b8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
    while (pToken != NULL)
 80021bc:	e018      	b.n	80021f0 <esp_event+0xa8>
    {
        pArray[i] = pToken;
 80021be:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021c8:	443b      	add	r3, r7
 80021ca:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80021ce:	f843 2c58 	str.w	r2, [r3, #-88]
        if (++i >= ARR_CNT)
 80021d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80021d6:	3301      	adds	r3, #1
 80021d8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80021dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80021e0:	2b13      	cmp	r3, #19
 80021e2:	dc0a      	bgt.n	80021fa <esp_event+0xb2>
            break;
        pToken = strtok(NULL, "[@]");
 80021e4:	4998      	ldr	r1, [pc, #608]	@ (8002448 <esp_event+0x300>)
 80021e6:	2000      	movs	r0, #0
 80021e8:	f005 fa4c 	bl	8007684 <strtok>
 80021ec:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
    while (pToken != NULL)
 80021f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1e2      	bne.n	80021be <esp_event+0x76>
 80021f8:	e000      	b.n	80021fc <esp_event+0xb4>
            break;
 80021fa:	bf00      	nop
    }

    if (!strcmp(pArray[1], "ALLSTOP"))
 80021fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002200:	4992      	ldr	r1, [pc, #584]	@ (800244c <esp_event+0x304>)
 8002202:	4618      	mov	r0, r3
 8002204:	f7fd ffec 	bl	80001e0 <strcmp>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d140      	bne.n	8002290 <esp_event+0x148>
    {
        if (!strcmp(pArray[2], "ON"))
 800220e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002212:	498f      	ldr	r1, [pc, #572]	@ (8002450 <esp_event+0x308>)
 8002214:	4618      	mov	r0, r3
 8002216:	f7fd ffe3 	bl	80001e0 <strcmp>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d116      	bne.n	800224e <esp_event+0x106>
        {
            // 모든 장치 정지 명령 내리기(모든 플래그 True로)
        	fanFlag = true;
 8002220:	4b8c      	ldr	r3, [pc, #560]	@ (8002454 <esp_event+0x30c>)
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
        	ledFlag = true;
 8002226:	4b8c      	ldr	r3, [pc, #560]	@ (8002458 <esp_event+0x310>)
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
        	lockFlag = true;
 800222c:	4b8b      	ldr	r3, [pc, #556]	@ (800245c <esp_event+0x314>)
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
        	sprintf(sendBuf, "[%s]%s@%s\n", pArray[0], pArray[1], pArray[2]);
 8002232:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002236:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 800223a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800223e:	f107 0008 	add.w	r0, r7, #8
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	460b      	mov	r3, r1
 8002246:	4986      	ldr	r1, [pc, #536]	@ (8002460 <esp_event+0x318>)
 8002248:	f005 f8fa 	bl	8007440 <siprintf>
 800224c:	e0e6      	b.n	800241c <esp_event+0x2d4>
        }
        else if (!strcmp(pArray[2], "OFF"))
 800224e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002252:	4984      	ldr	r1, [pc, #528]	@ (8002464 <esp_event+0x31c>)
 8002254:	4618      	mov	r0, r3
 8002256:	f7fd ffc3 	bl	80001e0 <strcmp>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	f040 80dd 	bne.w	800241c <esp_event+0x2d4>
        {
            // 모든 장치 정지 명령 취소(모든 플래그 false로)
        	fanFlag = false;
 8002262:	4b7c      	ldr	r3, [pc, #496]	@ (8002454 <esp_event+0x30c>)
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
        	ledFlag	= false;
 8002268:	4b7b      	ldr	r3, [pc, #492]	@ (8002458 <esp_event+0x310>)
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
        	lockFlag = false;
 800226e:	4b7b      	ldr	r3, [pc, #492]	@ (800245c <esp_event+0x314>)
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
        	sprintf(sendBuf, "[%s]%s@%s\n", pArray[0], pArray[1], pArray[2]);
 8002274:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002278:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 800227c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002280:	f107 0008 	add.w	r0, r7, #8
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	460b      	mov	r3, r1
 8002288:	4975      	ldr	r1, [pc, #468]	@ (8002460 <esp_event+0x318>)
 800228a:	f005 f8d9 	bl	8007440 <siprintf>
 800228e:	e0c5      	b.n	800241c <esp_event+0x2d4>
        }
    }
    else if (!strcmp(pArray[1], "STATE"))
 8002290:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002294:	4974      	ldr	r1, [pc, #464]	@ (8002468 <esp_event+0x320>)
 8002296:	4618      	mov	r0, r3
 8002298:	f7fd ffa2 	bl	80001e0 <strcmp>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d11f      	bne.n	80022e2 <esp_event+0x19a>
    {
        // 현재 매장의 상태 전송하기
        sprintf(sendBuf, "[%s]%s@%s@%d@%d@%d@%d@%d\n", pArray[0], pArray[1], temp, humi, ledState, lockFlag, customerCount, fanSpeed);
 80022a2:	f8d7 50d0 	ldr.w	r5, [r7, #208]	@ 0xd0
 80022a6:	f8d7 60d4 	ldr.w	r6, [r7, #212]	@ 0xd4
 80022aa:	4b70      	ldr	r3, [pc, #448]	@ (800246c <esp_event+0x324>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a70      	ldr	r2, [pc, #448]	@ (8002470 <esp_event+0x328>)
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	496a      	ldr	r1, [pc, #424]	@ (800245c <esp_event+0x314>)
 80022b4:	7809      	ldrb	r1, [r1, #0]
 80022b6:	6039      	str	r1, [r7, #0]
 80022b8:	496e      	ldr	r1, [pc, #440]	@ (8002474 <esp_event+0x32c>)
 80022ba:	6809      	ldr	r1, [r1, #0]
 80022bc:	486e      	ldr	r0, [pc, #440]	@ (8002478 <esp_event+0x330>)
 80022be:	6800      	ldr	r0, [r0, #0]
 80022c0:	f107 0408 	add.w	r4, r7, #8
 80022c4:	9005      	str	r0, [sp, #20]
 80022c6:	9104      	str	r1, [sp, #16]
 80022c8:	6839      	ldr	r1, [r7, #0]
 80022ca:	9103      	str	r1, [sp, #12]
 80022cc:	9202      	str	r2, [sp, #8]
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	4b6a      	ldr	r3, [pc, #424]	@ (800247c <esp_event+0x334>)
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	4633      	mov	r3, r6
 80022d6:	462a      	mov	r2, r5
 80022d8:	4969      	ldr	r1, [pc, #420]	@ (8002480 <esp_event+0x338>)
 80022da:	4620      	mov	r0, r4
 80022dc:	f005 f8b0 	bl	8007440 <siprintf>
 80022e0:	e09c      	b.n	800241c <esp_event+0x2d4>
    }
    else if (!strcmp(pArray[1], "FAN")) // 팬 회전수 0~1000
 80022e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80022e6:	4967      	ldr	r1, [pc, #412]	@ (8002484 <esp_event+0x33c>)
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fd ff79 	bl	80001e0 <strcmp>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d11a      	bne.n	800232a <esp_event+0x1e2>
    {
        fanSpeed = atoi(pArray[2]);
 80022f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 fa89 	bl	8006810 <atoi>
 80022fe:	4603      	mov	r3, r0
 8002300:	4a5d      	ldr	r2, [pc, #372]	@ (8002478 <esp_event+0x330>)
 8002302:	6013      	str	r3, [r2, #0]
        fanControl(fanSpeed);
 8002304:	4b5c      	ldr	r3, [pc, #368]	@ (8002478 <esp_event+0x330>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f90f 	bl	800252c <fanControl>
        sprintf(sendBuf, "[%s]%s@%d\n", pArray[0], pArray[1], fanSpeed);
 800230e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002312:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8002316:	4b58      	ldr	r3, [pc, #352]	@ (8002478 <esp_event+0x330>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f107 0008 	add.w	r0, r7, #8
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	460b      	mov	r3, r1
 8002322:	4959      	ldr	r1, [pc, #356]	@ (8002488 <esp_event+0x340>)
 8002324:	f005 f88c 	bl	8007440 <siprintf>
 8002328:	e078      	b.n	800241c <esp_event+0x2d4>
    }
    else if (!strcmp(pArray[1], "DHTSTATE")) // 온습도 보내기
 800232a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800232e:	4957      	ldr	r1, [pc, #348]	@ (800248c <esp_event+0x344>)
 8002330:	4618      	mov	r0, r3
 8002332:	f7fd ff55 	bl	80001e0 <strcmp>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10f      	bne.n	800235c <esp_event+0x214>
    {
        sprintf(sendBuf, "[%s]%s@%s@%d\n", pArray[0], pArray[1], temp, humi);
 800233c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002340:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8002344:	4b49      	ldr	r3, [pc, #292]	@ (800246c <esp_event+0x324>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f107 0008 	add.w	r0, r7, #8
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	4b4b      	ldr	r3, [pc, #300]	@ (800247c <esp_event+0x334>)
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	460b      	mov	r3, r1
 8002354:	494e      	ldr	r1, [pc, #312]	@ (8002490 <esp_event+0x348>)
 8002356:	f005 f873 	bl	8007440 <siprintf>
 800235a:	e05f      	b.n	800241c <esp_event+0x2d4>
    }
    else if (!strcmp(pArray[1], "LED")) //[매장명]LED@pArray[2]or[State]@
 800235c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002360:	494c      	ldr	r1, [pc, #304]	@ (8002494 <esp_event+0x34c>)
 8002362:	4618      	mov	r0, r3
 8002364:	f7fd ff3c 	bl	80001e0 <strcmp>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d136      	bne.n	80023dc <esp_event+0x294>
    {
        if (!strcmp(pArray[2], "STATE"))
 800236e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002372:	493d      	ldr	r1, [pc, #244]	@ (8002468 <esp_event+0x320>)
 8002374:	4618      	mov	r0, r3
 8002376:	f7fd ff33 	bl	80001e0 <strcmp>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d111      	bne.n	80023a4 <esp_event+0x25c>
        {
            sprintf(sendBuf, "[%s]%s@%s@%d\n", pArray[0], pArray[1], pArray[2], ledState);
 8002380:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002384:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 8002388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800238c:	4a38      	ldr	r2, [pc, #224]	@ (8002470 <esp_event+0x328>)
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	f107 0008 	add.w	r0, r7, #8
 8002394:	9201      	str	r2, [sp, #4]
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	4623      	mov	r3, r4
 800239a:	460a      	mov	r2, r1
 800239c:	493c      	ldr	r1, [pc, #240]	@ (8002490 <esp_event+0x348>)
 800239e:	f005 f84f 	bl	8007440 <siprintf>
 80023a2:	e03b      	b.n	800241c <esp_event+0x2d4>
        }
        else
        {
            ledControl(atoi(pArray[2]));
 80023a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80023a8:	4618      	mov	r0, r3
 80023aa:	f004 fa31 	bl	8006810 <atoi>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 f8d5 	bl	8002560 <ledControl>
            sprintf(sendBuf, "[%s]%s@%d\n", pArray[0], pArray[1], atoi(pArray[2]));
 80023b6:	f8d7 40d0 	ldr.w	r4, [r7, #208]	@ 0xd0
 80023ba:	f8d7 50d4 	ldr.w	r5, [r7, #212]	@ 0xd4
 80023be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80023c2:	4618      	mov	r0, r3
 80023c4:	f004 fa24 	bl	8006810 <atoi>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f107 0008 	add.w	r0, r7, #8
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	462b      	mov	r3, r5
 80023d2:	4622      	mov	r2, r4
 80023d4:	492c      	ldr	r1, [pc, #176]	@ (8002488 <esp_event+0x340>)
 80023d6:	f005 f833 	bl	8007440 <siprintf>
 80023da:	e01f      	b.n	800241c <esp_event+0x2d4>
        }
    }
    else if (!strncmp(pArray[1], " New conn", 8))
 80023dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80023e0:	2208      	movs	r2, #8
 80023e2:	492d      	ldr	r1, [pc, #180]	@ (8002498 <esp_event+0x350>)
 80023e4:	4618      	mov	r0, r3
 80023e6:	f005 f93a 	bl	800765e <strncmp>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d108      	bne.n	8002402 <esp_event+0x2ba>
    {
        printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
 80023f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80023f4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80023f8:	4619      	mov	r1, r3
 80023fa:	4828      	ldr	r0, [pc, #160]	@ (800249c <esp_event+0x354>)
 80023fc:	f004 ffa8 	bl	8007350 <iprintf>
 8002400:	e00c      	b.n	800241c <esp_event+0x2d4>
    }
    else if (!strncmp(pArray[1], " Already log", 8))
 8002402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002406:	2208      	movs	r2, #8
 8002408:	4925      	ldr	r1, [pc, #148]	@ (80024a0 <esp_event+0x358>)
 800240a:	4618      	mov	r0, r3
 800240c:	f005 f927 	bl	800765e <strncmp>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10e      	bne.n	8002434 <esp_event+0x2ec>
    {
        esp_client_conn();
 8002416:	f7ff f84b 	bl	80014b0 <esp_client_conn>
        return;
 800241a:	e00c      	b.n	8002436 <esp_event+0x2ee>
    }
    else
        return;

    esp_send_data(sendBuf);
 800241c:	f107 0308 	add.w	r3, r7, #8
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff f96d 	bl	8001700 <esp_send_data>
    printf("Debug send : %s\r\n",sendBuf);
 8002426:	f107 0308 	add.w	r3, r7, #8
 800242a:	4619      	mov	r1, r3
 800242c:	481d      	ldr	r0, [pc, #116]	@ (80024a4 <esp_event+0x35c>)
 800242e:	f004 ff8f 	bl	8007350 <iprintf>
 8002432:	e000      	b.n	8002436 <esp_event+0x2ee>
        return;
 8002434:	bf00      	nop

}
 8002436:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 800243a:	46bd      	mov	sp, r7
 800243c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800243e:	bf00      	nop
 8002440:	20000c30 	.word	0x20000c30
 8002444:	0800a9b8 	.word	0x0800a9b8
 8002448:	0800a9cc 	.word	0x0800a9cc
 800244c:	0800a9d0 	.word	0x0800a9d0
 8002450:	0800a9d8 	.word	0x0800a9d8
 8002454:	20000c14 	.word	0x20000c14
 8002458:	20000c15 	.word	0x20000c15
 800245c:	20000c16 	.word	0x20000c16
 8002460:	0800a9dc 	.word	0x0800a9dc
 8002464:	0800a9e8 	.word	0x0800a9e8
 8002468:	0800a9ec 	.word	0x0800a9ec
 800246c:	20000bf8 	.word	0x20000bf8
 8002470:	20000c0c 	.word	0x20000c0c
 8002474:	20000c08 	.word	0x20000c08
 8002478:	20000c10 	.word	0x20000c10
 800247c:	20000bfc 	.word	0x20000bfc
 8002480:	0800a9f4 	.word	0x0800a9f4
 8002484:	0800aa10 	.word	0x0800aa10
 8002488:	0800aa14 	.word	0x0800aa14
 800248c:	0800aa20 	.word	0x0800aa20
 8002490:	0800aa2c 	.word	0x0800aa2c
 8002494:	0800aa3c 	.word	0x0800aa3c
 8002498:	0800aa40 	.word	0x0800aa40
 800249c:	0800aa4c 	.word	0x0800aa4c
 80024a0:	0800aa60 	.word	0x0800aa60
 80024a4:	0800aa70 	.word	0x0800aa70

080024a8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // 1ms 마다 호출
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
    static int tim3Cnt = 0;
    tim3Cnt++;
 80024b0:	4b0d      	ldr	r3, [pc, #52]	@ (80024e8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3301      	adds	r3, #1
 80024b6:	4a0c      	ldr	r2, [pc, #48]	@ (80024e8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80024b8:	6013      	str	r3, [r2, #0]
    if (tim3Cnt >= 1000) // 1ms * 1000 = 1Sec
 80024ba:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024c2:	db0a      	blt.n	80024da <HAL_TIM_PeriodElapsedCallback+0x32>
    {
        tim3Flag1Sec = 1;
 80024c4:	4b09      	ldr	r3, [pc, #36]	@ (80024ec <HAL_TIM_PeriodElapsedCallback+0x44>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	601a      	str	r2, [r3, #0]
        tim3Sec++;
 80024ca:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	3301      	adds	r3, #1
 80024d0:	4a07      	ldr	r2, [pc, #28]	@ (80024f0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80024d2:	6013      	str	r3, [r2, #0]
        tim3Cnt = 0;
 80024d4:	4b04      	ldr	r3, [pc, #16]	@ (80024e8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
    }
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000c70 	.word	0x20000c70
 80024ec:	20000000 	.word	0x20000000
 80024f0:	20000bf4 	.word	0x20000bf4

080024f4 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	69b9      	ldr	r1, [r7, #24]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	1a8a      	subs	r2, r1, r2
 800250e:	fb03 f202 	mul.w	r2, r3, r2
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	1acb      	subs	r3, r1, r3
 8002518:	fb92 f2f3 	sdiv	r2, r2, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	4413      	add	r3, r2
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <fanControl>:

void fanControl(int fanSpeed)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
    if (!fanFlag) // 플래그들은 0일 때만 동작을 의미함.
 8002534:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <fanControl+0x2c>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	f083 0301 	eor.w	r3, r3, #1
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <fanControl+0x1e>
    {
        __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, fanSpeed);
 8002542:	4b06      	ldr	r3, [pc, #24]	@ (800255c <fanControl+0x30>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	635a      	str	r2, [r3, #52]	@ 0x34
    }
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000c14 	.word	0x20000c14
 800255c:	20000b1c 	.word	0x20000b1c

08002560 <ledControl>:

void ledControl(int bright)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af02      	add	r7, sp, #8
 8002566:	6078      	str	r0, [r7, #4]
	if (!ledFlag)
 8002568:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <ledControl+0x54>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	f083 0301 	eor.w	r3, r3, #1
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d011      	beq.n	800259a <ledControl+0x3a>
	{
		ledState = bright;                               // 전역변수에 저장
 8002576:	4a10      	ldr	r2, [pc, #64]	@ (80025b8 <ledControl+0x58>)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6013      	str	r3, [r2, #0]
		int realLedState = map(bright, 0, 100, 0, 1000); // 써지는 실제값
 800257c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	2300      	movs	r3, #0
 8002584:	2264      	movs	r2, #100	@ 0x64
 8002586:	2100      	movs	r1, #0
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ffb3 	bl	80024f4 <map>
 800258e:	60f8      	str	r0, [r7, #12]
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, realLedState);
 8002590:	4b0a      	ldr	r3, [pc, #40]	@ (80025bc <ledControl+0x5c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	else if(ledFlag)
	{
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
	}
}
 8002598:	e007      	b.n	80025aa <ledControl+0x4a>
	else if(ledFlag)
 800259a:	4b06      	ldr	r3, [pc, #24]	@ (80025b4 <ledControl+0x54>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <ledControl+0x4a>
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 80025a2:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <ledControl+0x5c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2200      	movs	r2, #0
 80025a8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000c15 	.word	0x20000c15
 80025b8:	20000c0c 	.word	0x20000c0c
 80025bc:	20000a8c 	.word	0x20000a8c

080025c0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
    static int channel = 0;
    if (channel == 0)
 80025c8:	4b19      	ldr	r3, [pc, #100]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x70>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d112      	bne.n	80025f6 <HAL_ADC_ConvCpltCallback+0x36>
    {
        ADC1ConvertValue[channel] = HAL_ADC_GetValue(hadc);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 fe3d 	bl	8003250 <HAL_ADC_GetValue>
 80025d6:	4602      	mov	r2, r0
 80025d8:	4b15      	ldr	r3, [pc, #84]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x70>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	b291      	uxth	r1, r2
 80025de:	4a15      	ldr	r2, [pc, #84]	@ (8002634 <HAL_ADC_ConvCpltCallback+0x74>)
 80025e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        outDoorSensor.sensorReadTime = HAL_GetTick();	//들어오고 나가는 사라 카운트를 하기 위함
 80025e4:	f000 fbf2 	bl	8002dcc <HAL_GetTick>
 80025e8:	4603      	mov	r3, r0
 80025ea:	4a13      	ldr	r2, [pc, #76]	@ (8002638 <HAL_ADC_ConvCpltCallback+0x78>)
 80025ec:	6053      	str	r3, [r2, #4]
        channel = 1;
 80025ee:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x70>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
        ADC1ConvertValue[channel] = HAL_ADC_GetValue(hadc);
        inDoorSensor.sensorReadTime = HAL_GetTick(); //들어오고 나가는 사라 카운트하기 위함.
        channel = 0;
        adcFlag = 1;
    }
}
 80025f4:	e018      	b.n	8002628 <HAL_ADC_ConvCpltCallback+0x68>
    else if (channel == 1)
 80025f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x70>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d114      	bne.n	8002628 <HAL_ADC_ConvCpltCallback+0x68>
        ADC1ConvertValue[channel] = HAL_ADC_GetValue(hadc);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fe26 	bl	8003250 <HAL_ADC_GetValue>
 8002604:	4602      	mov	r2, r0
 8002606:	4b0a      	ldr	r3, [pc, #40]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x70>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	b291      	uxth	r1, r2
 800260c:	4a09      	ldr	r2, [pc, #36]	@ (8002634 <HAL_ADC_ConvCpltCallback+0x74>)
 800260e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        inDoorSensor.sensorReadTime = HAL_GetTick(); //들어오고 나가는 사라 카운트하기 위함.
 8002612:	f000 fbdb 	bl	8002dcc <HAL_GetTick>
 8002616:	4603      	mov	r3, r0
 8002618:	4a08      	ldr	r2, [pc, #32]	@ (800263c <HAL_ADC_ConvCpltCallback+0x7c>)
 800261a:	6053      	str	r3, [r2, #4]
        channel = 0;
 800261c:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x70>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
        adcFlag = 1;
 8002622:	4b07      	ldr	r3, [pc, #28]	@ (8002640 <HAL_ADC_ConvCpltCallback+0x80>)
 8002624:	2201      	movs	r2, #1
 8002626:	601a      	str	r2, [r3, #0]
}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000c74 	.word	0x20000c74
 8002634:	20000c18 	.word	0x20000c18
 8002638:	20000c20 	.word	0x20000c20
 800263c:	20000c28 	.word	0x20000c28
 8002640:	20000c1c 	.word	0x20000c1c

08002644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002648:	b672      	cpsid	i
}
 800264a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <Error_Handler+0x8>

08002650 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	4b10      	ldr	r3, [pc, #64]	@ (800269c <HAL_MspInit+0x4c>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265e:	4a0f      	ldr	r2, [pc, #60]	@ (800269c <HAL_MspInit+0x4c>)
 8002660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002664:	6453      	str	r3, [r2, #68]	@ 0x44
 8002666:	4b0d      	ldr	r3, [pc, #52]	@ (800269c <HAL_MspInit+0x4c>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	603b      	str	r3, [r7, #0]
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_MspInit+0x4c>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	4a08      	ldr	r2, [pc, #32]	@ (800269c <HAL_MspInit+0x4c>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	@ 0x40
 8002682:	4b06      	ldr	r3, [pc, #24]	@ (800269c <HAL_MspInit+0x4c>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800268e:	2007      	movs	r0, #7
 8002690:	f001 f908 	bl	80038a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800

080026a0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	@ 0x28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a1b      	ldr	r2, [pc, #108]	@ (800272c <HAL_ADC_MspInit+0x8c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d12f      	bne.n	8002722 <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002730 <HAL_ADC_MspInit+0x90>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ca:	4a19      	ldr	r2, [pc, #100]	@ (8002730 <HAL_ADC_MspInit+0x90>)
 80026cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026d2:	4b17      	ldr	r3, [pc, #92]	@ (8002730 <HAL_ADC_MspInit+0x90>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b13      	ldr	r3, [pc, #76]	@ (8002730 <HAL_ADC_MspInit+0x90>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	4a12      	ldr	r2, [pc, #72]	@ (8002730 <HAL_ADC_MspInit+0x90>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ee:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <HAL_ADC_MspInit+0x90>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026fa:	2303      	movs	r3, #3
 80026fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026fe:	2303      	movs	r3, #3
 8002700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002706:	f107 0314 	add.w	r3, r7, #20
 800270a:	4619      	mov	r1, r3
 800270c:	4809      	ldr	r0, [pc, #36]	@ (8002734 <HAL_ADC_MspInit+0x94>)
 800270e:	f001 f99d 	bl	8003a4c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002712:	2200      	movs	r2, #0
 8002714:	2100      	movs	r1, #0
 8002716:	2012      	movs	r0, #18
 8002718:	f001 f8cf 	bl	80038ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800271c:	2012      	movs	r0, #18
 800271e:	f001 f8e8 	bl	80038f2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002722:	bf00      	nop
 8002724:	3728      	adds	r7, #40	@ 0x28
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40012000 	.word	0x40012000
 8002730:	40023800 	.word	0x40023800
 8002734:	40020000 	.word	0x40020000

08002738 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a26      	ldr	r2, [pc, #152]	@ (80027e0 <HAL_TIM_Base_MspInit+0xa8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d10e      	bne.n	8002768 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	4b25      	ldr	r3, [pc, #148]	@ (80027e4 <HAL_TIM_Base_MspInit+0xac>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002752:	4a24      	ldr	r2, [pc, #144]	@ (80027e4 <HAL_TIM_Base_MspInit+0xac>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6453      	str	r3, [r2, #68]	@ 0x44
 800275a:	4b22      	ldr	r3, [pc, #136]	@ (80027e4 <HAL_TIM_Base_MspInit+0xac>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002766:	e036      	b.n	80027d6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1e      	ldr	r2, [pc, #120]	@ (80027e8 <HAL_TIM_Base_MspInit+0xb0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d116      	bne.n	80027a0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	4b1b      	ldr	r3, [pc, #108]	@ (80027e4 <HAL_TIM_Base_MspInit+0xac>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	4a1a      	ldr	r2, [pc, #104]	@ (80027e4 <HAL_TIM_Base_MspInit+0xac>)
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	6413      	str	r3, [r2, #64]	@ 0x40
 8002782:	4b18      	ldr	r3, [pc, #96]	@ (80027e4 <HAL_TIM_Base_MspInit+0xac>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800278e:	2200      	movs	r2, #0
 8002790:	2100      	movs	r1, #0
 8002792:	201d      	movs	r0, #29
 8002794:	f001 f891 	bl	80038ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002798:	201d      	movs	r0, #29
 800279a:	f001 f8aa 	bl	80038f2 <HAL_NVIC_EnableIRQ>
}
 800279e:	e01a      	b.n	80027d6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a11      	ldr	r2, [pc, #68]	@ (80027ec <HAL_TIM_Base_MspInit+0xb4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d115      	bne.n	80027d6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	4b0d      	ldr	r3, [pc, #52]	@ (80027e4 <HAL_TIM_Base_MspInit+0xac>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	4a0c      	ldr	r2, [pc, #48]	@ (80027e4 <HAL_TIM_Base_MspInit+0xac>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ba:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <HAL_TIM_Base_MspInit+0xac>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2100      	movs	r1, #0
 80027ca:	201e      	movs	r0, #30
 80027cc:	f001 f875 	bl	80038ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027d0:	201e      	movs	r0, #30
 80027d2:	f001 f88e 	bl	80038f2 <HAL_NVIC_EnableIRQ>
}
 80027d6:	bf00      	nop
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40010000 	.word	0x40010000
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40000400 	.word	0x40000400
 80027ec:	40000800 	.word	0x40000800

080027f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	@ 0x28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a36      	ldr	r2, [pc, #216]	@ (80028e8 <HAL_TIM_MspPostInit+0xf8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d11f      	bne.n	8002852 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	4b35      	ldr	r3, [pc, #212]	@ (80028ec <HAL_TIM_MspPostInit+0xfc>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	4a34      	ldr	r2, [pc, #208]	@ (80028ec <HAL_TIM_MspPostInit+0xfc>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6313      	str	r3, [r2, #48]	@ 0x30
 8002822:	4b32      	ldr	r3, [pc, #200]	@ (80028ec <HAL_TIM_MspPostInit+0xfc>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800282e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002840:	2301      	movs	r3, #1
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	4619      	mov	r1, r3
 800284a:	4829      	ldr	r0, [pc, #164]	@ (80028f0 <HAL_TIM_MspPostInit+0x100>)
 800284c:	f001 f8fe 	bl	8003a4c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002850:	e046      	b.n	80028e0 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a27      	ldr	r2, [pc, #156]	@ (80028f4 <HAL_TIM_MspPostInit+0x104>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d11e      	bne.n	800289a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	4b22      	ldr	r3, [pc, #136]	@ (80028ec <HAL_TIM_MspPostInit+0xfc>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002864:	4a21      	ldr	r2, [pc, #132]	@ (80028ec <HAL_TIM_MspPostInit+0xfc>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6313      	str	r3, [r2, #48]	@ 0x30
 800286c:	4b1f      	ldr	r3, [pc, #124]	@ (80028ec <HAL_TIM_MspPostInit+0xfc>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002878:	2340      	movs	r3, #64	@ 0x40
 800287a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002884:	2300      	movs	r3, #0
 8002886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002888:	2302      	movs	r3, #2
 800288a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	4619      	mov	r1, r3
 8002892:	4817      	ldr	r0, [pc, #92]	@ (80028f0 <HAL_TIM_MspPostInit+0x100>)
 8002894:	f001 f8da 	bl	8003a4c <HAL_GPIO_Init>
}
 8002898:	e022      	b.n	80028e0 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a16      	ldr	r2, [pc, #88]	@ (80028f8 <HAL_TIM_MspPostInit+0x108>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d11d      	bne.n	80028e0 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a4:	2300      	movs	r3, #0
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <HAL_TIM_MspPostInit+0xfc>)
 80028aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ac:	4a0f      	ldr	r2, [pc, #60]	@ (80028ec <HAL_TIM_MspPostInit+0xfc>)
 80028ae:	f043 0302 	orr.w	r3, r3, #2
 80028b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b4:	4b0d      	ldr	r3, [pc, #52]	@ (80028ec <HAL_TIM_MspPostInit+0xfc>)
 80028b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_fanMotor_Pin;
 80028c0:	2340      	movs	r3, #64	@ 0x40
 80028c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	2300      	movs	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028d0:	2302      	movs	r3, #2
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM4_fanMotor_GPIO_Port, &GPIO_InitStruct);
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	4619      	mov	r1, r3
 80028da:	4808      	ldr	r0, [pc, #32]	@ (80028fc <HAL_TIM_MspPostInit+0x10c>)
 80028dc:	f001 f8b6 	bl	8003a4c <HAL_GPIO_Init>
}
 80028e0:	bf00      	nop
 80028e2:	3728      	adds	r7, #40	@ 0x28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40010000 	.word	0x40010000
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40020000 	.word	0x40020000
 80028f4:	40000400 	.word	0x40000400
 80028f8:	40000800 	.word	0x40000800
 80028fc:	40020400 	.word	0x40020400

08002900 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08c      	sub	sp, #48	@ 0x30
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 031c 	add.w	r3, r7, #28
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a3a      	ldr	r2, [pc, #232]	@ (8002a08 <HAL_UART_MspInit+0x108>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d134      	bne.n	800298c <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	4b39      	ldr	r3, [pc, #228]	@ (8002a0c <HAL_UART_MspInit+0x10c>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	4a38      	ldr	r2, [pc, #224]	@ (8002a0c <HAL_UART_MspInit+0x10c>)
 800292c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002930:	6413      	str	r3, [r2, #64]	@ 0x40
 8002932:	4b36      	ldr	r3, [pc, #216]	@ (8002a0c <HAL_UART_MspInit+0x10c>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293a:	61bb      	str	r3, [r7, #24]
 800293c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	4b32      	ldr	r3, [pc, #200]	@ (8002a0c <HAL_UART_MspInit+0x10c>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	4a31      	ldr	r2, [pc, #196]	@ (8002a0c <HAL_UART_MspInit+0x10c>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	6313      	str	r3, [r2, #48]	@ 0x30
 800294e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a0c <HAL_UART_MspInit+0x10c>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800295a:	230c      	movs	r3, #12
 800295c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002966:	2303      	movs	r3, #3
 8002968:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800296a:	2307      	movs	r3, #7
 800296c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296e:	f107 031c 	add.w	r3, r7, #28
 8002972:	4619      	mov	r1, r3
 8002974:	4826      	ldr	r0, [pc, #152]	@ (8002a10 <HAL_UART_MspInit+0x110>)
 8002976:	f001 f869 	bl	8003a4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	2100      	movs	r1, #0
 800297e:	2026      	movs	r0, #38	@ 0x26
 8002980:	f000 ff9b 	bl	80038ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002984:	2026      	movs	r0, #38	@ 0x26
 8002986:	f000 ffb4 	bl	80038f2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800298a:	e038      	b.n	80029fe <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a20      	ldr	r2, [pc, #128]	@ (8002a14 <HAL_UART_MspInit+0x114>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d133      	bne.n	80029fe <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	4b1c      	ldr	r3, [pc, #112]	@ (8002a0c <HAL_UART_MspInit+0x10c>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	4a1b      	ldr	r2, [pc, #108]	@ (8002a0c <HAL_UART_MspInit+0x10c>)
 80029a0:	f043 0320 	orr.w	r3, r3, #32
 80029a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029a6:	4b19      	ldr	r3, [pc, #100]	@ (8002a0c <HAL_UART_MspInit+0x10c>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b15      	ldr	r3, [pc, #84]	@ (8002a0c <HAL_UART_MspInit+0x10c>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	4a14      	ldr	r2, [pc, #80]	@ (8002a0c <HAL_UART_MspInit+0x10c>)
 80029bc:	f043 0304 	orr.w	r3, r3, #4
 80029c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c2:	4b12      	ldr	r3, [pc, #72]	@ (8002a0c <HAL_UART_MspInit+0x10c>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_bluetooh_Pin|RX_bluetooh_Pin;
 80029ce:	23c0      	movs	r3, #192	@ 0xc0
 80029d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80029de:	2308      	movs	r3, #8
 80029e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e2:	f107 031c 	add.w	r3, r7, #28
 80029e6:	4619      	mov	r1, r3
 80029e8:	480b      	ldr	r0, [pc, #44]	@ (8002a18 <HAL_UART_MspInit+0x118>)
 80029ea:	f001 f82f 	bl	8003a4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80029ee:	2200      	movs	r2, #0
 80029f0:	2100      	movs	r1, #0
 80029f2:	2047      	movs	r0, #71	@ 0x47
 80029f4:	f000 ff61 	bl	80038ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80029f8:	2047      	movs	r0, #71	@ 0x47
 80029fa:	f000 ff7a 	bl	80038f2 <HAL_NVIC_EnableIRQ>
}
 80029fe:	bf00      	nop
 8002a00:	3730      	adds	r7, #48	@ 0x30
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40004400 	.word	0x40004400
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40020000 	.word	0x40020000
 8002a14:	40011400 	.word	0x40011400
 8002a18:	40020800 	.word	0x40020800

08002a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <NMI_Handler+0x4>

08002a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a28:	bf00      	nop
 8002a2a:	e7fd      	b.n	8002a28 <HardFault_Handler+0x4>

08002a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a30:	bf00      	nop
 8002a32:	e7fd      	b.n	8002a30 <MemManage_Handler+0x4>

08002a34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <BusFault_Handler+0x4>

08002a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <UsageFault_Handler+0x4>

08002a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a72:	f000 f997 	bl	8002da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC0_EXTI0_BUTTON_Pin);
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f001 f99a 	bl	8003db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a8c:	4802      	ldr	r0, [pc, #8]	@ (8002a98 <ADC_IRQHandler+0x10>)
 8002a8e:	f000 facf 	bl	8003030 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000a44 	.word	0x20000a44

08002a9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002aa0:	4802      	ldr	r0, [pc, #8]	@ (8002aac <TIM3_IRQHandler+0x10>)
 8002aa2:	f002 f801 	bl	8004aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000ad4 	.word	0x20000ad4

08002ab0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ab4:	4802      	ldr	r0, [pc, #8]	@ (8002ac0 <TIM4_IRQHandler+0x10>)
 8002ab6:	f001 fff7 	bl	8004aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000b1c 	.word	0x20000b1c

08002ac4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ac8:	4802      	ldr	r0, [pc, #8]	@ (8002ad4 <USART2_IRQHandler+0x10>)
 8002aca:	f002 ff35 	bl	8005938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000b64 	.word	0x20000b64

08002ad8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002adc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002ae0:	f001 f96a 	bl	8003db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ae4:	bf00      	nop
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002aec:	4802      	ldr	r0, [pc, #8]	@ (8002af8 <USART6_IRQHandler+0x10>)
 8002aee:	f002 ff23 	bl	8005938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000bac 	.word	0x20000bac

08002afc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return 1;
 8002b00:	2301      	movs	r3, #1
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <_kill>:

int _kill(int pid, int sig)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b16:	f004 fe71 	bl	80077fc <__errno>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2216      	movs	r2, #22
 8002b1e:	601a      	str	r2, [r3, #0]
  return -1;
 8002b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <_exit>:

void _exit (int status)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b34:	f04f 31ff 	mov.w	r1, #4294967295
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff ffe7 	bl	8002b0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b3e:	bf00      	nop
 8002b40:	e7fd      	b.n	8002b3e <_exit+0x12>

08002b42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b086      	sub	sp, #24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e00a      	b.n	8002b6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b54:	f3af 8000 	nop.w
 8002b58:	4601      	mov	r1, r0
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	60ba      	str	r2, [r7, #8]
 8002b60:	b2ca      	uxtb	r2, r1
 8002b62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	3301      	adds	r3, #1
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	dbf0      	blt.n	8002b54 <_read+0x12>
  }

  return len;
 8002b72:	687b      	ldr	r3, [r7, #4]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	e009      	b.n	8002ba2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	60ba      	str	r2, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fdf4 	bl	8001784 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	dbf1      	blt.n	8002b8e <_write+0x12>
  }
  return len;
 8002baa:	687b      	ldr	r3, [r7, #4]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <_close>:

int _close(int file)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bdc:	605a      	str	r2, [r3, #4]
  return 0;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <_isatty>:

int _isatty(int file)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bf4:	2301      	movs	r3, #1
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c24:	4a14      	ldr	r2, [pc, #80]	@ (8002c78 <_sbrk+0x5c>)
 8002c26:	4b15      	ldr	r3, [pc, #84]	@ (8002c7c <_sbrk+0x60>)
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c30:	4b13      	ldr	r3, [pc, #76]	@ (8002c80 <_sbrk+0x64>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d102      	bne.n	8002c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c38:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <_sbrk+0x64>)
 8002c3a:	4a12      	ldr	r2, [pc, #72]	@ (8002c84 <_sbrk+0x68>)
 8002c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c3e:	4b10      	ldr	r3, [pc, #64]	@ (8002c80 <_sbrk+0x64>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d207      	bcs.n	8002c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c4c:	f004 fdd6 	bl	80077fc <__errno>
 8002c50:	4603      	mov	r3, r0
 8002c52:	220c      	movs	r2, #12
 8002c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c56:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5a:	e009      	b.n	8002c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c5c:	4b08      	ldr	r3, [pc, #32]	@ (8002c80 <_sbrk+0x64>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c62:	4b07      	ldr	r3, [pc, #28]	@ (8002c80 <_sbrk+0x64>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	4a05      	ldr	r2, [pc, #20]	@ (8002c80 <_sbrk+0x64>)
 8002c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20020000 	.word	0x20020000
 8002c7c:	00000400 	.word	0x00000400
 8002c80:	20000c78 	.word	0x20000c78
 8002c84:	20000dd0 	.word	0x20000dd0

08002c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <SystemInit+0x20>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c92:	4a05      	ldr	r2, [pc, #20]	@ (8002ca8 <SystemInit+0x20>)
 8002c94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8002cac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ce4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cb0:	f7ff ffea 	bl	8002c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cb4:	480c      	ldr	r0, [pc, #48]	@ (8002ce8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cb6:	490d      	ldr	r1, [pc, #52]	@ (8002cec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cbc:	e002      	b.n	8002cc4 <LoopCopyDataInit>

08002cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cc2:	3304      	adds	r3, #4

08002cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc8:	d3f9      	bcc.n	8002cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cca:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ccc:	4c0a      	ldr	r4, [pc, #40]	@ (8002cf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cd0:	e001      	b.n	8002cd6 <LoopFillZerobss>

08002cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd4:	3204      	adds	r2, #4

08002cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd8:	d3fb      	bcc.n	8002cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cda:	f004 fd95 	bl	8007808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cde:	f7fe fd6b 	bl	80017b8 <main>
  bx  lr    
 8002ce2:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8002ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cec:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002cf0:	0800aeb8 	.word	0x0800aeb8
  ldr r2, =_sbss
 8002cf4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002cf8:	20000dcc 	.word	0x20000dcc

08002cfc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cfc:	e7fe      	b.n	8002cfc <DMA1_Stream0_IRQHandler>
	...

08002d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d04:	4b0e      	ldr	r3, [pc, #56]	@ (8002d40 <HAL_Init+0x40>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a0d      	ldr	r2, [pc, #52]	@ (8002d40 <HAL_Init+0x40>)
 8002d0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d10:	4b0b      	ldr	r3, [pc, #44]	@ (8002d40 <HAL_Init+0x40>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0a      	ldr	r2, [pc, #40]	@ (8002d40 <HAL_Init+0x40>)
 8002d16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d1c:	4b08      	ldr	r3, [pc, #32]	@ (8002d40 <HAL_Init+0x40>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a07      	ldr	r2, [pc, #28]	@ (8002d40 <HAL_Init+0x40>)
 8002d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d28:	2003      	movs	r0, #3
 8002d2a:	f000 fdbb 	bl	80038a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f000 f808 	bl	8002d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d34:	f7ff fc8c 	bl	8002650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023c00 	.word	0x40023c00

08002d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d4c:	4b12      	ldr	r3, [pc, #72]	@ (8002d98 <HAL_InitTick+0x54>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b12      	ldr	r3, [pc, #72]	@ (8002d9c <HAL_InitTick+0x58>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	4619      	mov	r1, r3
 8002d56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fdd3 	bl	800390e <HAL_SYSTICK_Config>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00e      	b.n	8002d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b0f      	cmp	r3, #15
 8002d76:	d80a      	bhi.n	8002d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d80:	f000 fd9b 	bl	80038ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d84:	4a06      	ldr	r2, [pc, #24]	@ (8002da0 <HAL_InitTick+0x5c>)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e000      	b.n	8002d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20000004 	.word	0x20000004
 8002d9c:	2000000c 	.word	0x2000000c
 8002da0:	20000008 	.word	0x20000008

08002da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da8:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <HAL_IncTick+0x20>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	4b06      	ldr	r3, [pc, #24]	@ (8002dc8 <HAL_IncTick+0x24>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4413      	add	r3, r2
 8002db4:	4a04      	ldr	r2, [pc, #16]	@ (8002dc8 <HAL_IncTick+0x24>)
 8002db6:	6013      	str	r3, [r2, #0]
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	2000000c 	.word	0x2000000c
 8002dc8:	20000c7c 	.word	0x20000c7c

08002dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd0:	4b03      	ldr	r3, [pc, #12]	@ (8002de0 <HAL_GetTick+0x14>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000c7c 	.word	0x20000c7c

08002de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dec:	f7ff ffee 	bl	8002dcc <HAL_GetTick>
 8002df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d005      	beq.n	8002e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <HAL_Delay+0x44>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4413      	add	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e0a:	bf00      	nop
 8002e0c:	f7ff ffde 	bl	8002dcc <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d8f7      	bhi.n	8002e0c <HAL_Delay+0x28>
  {
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	2000000c 	.word	0x2000000c

08002e2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e033      	b.n	8002eaa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff fc28 	bl	80026a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d118      	bne.n	8002e9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e72:	f023 0302 	bic.w	r3, r3, #2
 8002e76:	f043 0202 	orr.w	r2, r3, #2
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fb3a 	bl	80034f8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	f043 0201 	orr.w	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e9a:	e001      	b.n	8002ea0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_ADC_Start_IT+0x1a>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0a1      	b.n	8003012 <HAL_ADC_Start_IT+0x15e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d018      	beq.n	8002f16 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ef4:	4b4a      	ldr	r3, [pc, #296]	@ (8003020 <HAL_ADC_Start_IT+0x16c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a4a      	ldr	r2, [pc, #296]	@ (8003024 <HAL_ADC_Start_IT+0x170>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	0c9a      	lsrs	r2, r3, #18
 8002f00:	4613      	mov	r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4413      	add	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f08:	e002      	b.n	8002f10 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f9      	bne.n	8002f0a <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d169      	bne.n	8002ff8 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f28:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d007      	beq.n	8002f56 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f4e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f62:	d106      	bne.n	8002f72 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f68:	f023 0206 	bic.w	r2, r3, #6
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002f70:	e002      	b.n	8002f78 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f80:	4b29      	ldr	r3, [pc, #164]	@ (8003028 <HAL_ADC_Start_IT+0x174>)
 8002f82:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002f8c:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f9c:	f043 0320 	orr.w	r3, r3, #32
 8002fa0:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10f      	bne.n	8002fce <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d129      	bne.n	8003010 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	e020      	b.n	8003010 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a16      	ldr	r2, [pc, #88]	@ (800302c <HAL_ADC_Start_IT+0x178>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d11b      	bne.n	8003010 <HAL_ADC_Start_IT+0x15c>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d114      	bne.n	8003010 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ff4:	609a      	str	r2, [r3, #8]
 8002ff6:	e00b      	b.n	8003010 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	f043 0210 	orr.w	r2, r3, #16
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003008:	f043 0201 	orr.w	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	20000004 	.word	0x20000004
 8003024:	431bde83 	.word	0x431bde83
 8003028:	40012300 	.word	0x40012300
 800302c:	40012000 	.word	0x40012000

08003030 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d049      	beq.n	80030fa <HAL_ADC_IRQHandler+0xca>
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d046      	beq.n	80030fa <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d105      	bne.n	8003084 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d12b      	bne.n	80030ea <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003096:	2b00      	cmp	r3, #0
 8003098:	d127      	bne.n	80030ea <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d006      	beq.n	80030b6 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d119      	bne.n	80030ea <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0220 	bic.w	r2, r2, #32
 80030c4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d105      	bne.n	80030ea <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	f043 0201 	orr.w	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff fa68 	bl	80025c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0212 	mvn.w	r2, #18
 80030f8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003108:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d057      	beq.n	80031c0 <HAL_ADC_IRQHandler+0x190>
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d054      	beq.n	80031c0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b00      	cmp	r3, #0
 8003120:	d105      	bne.n	800312e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d139      	bne.n	80031b0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003142:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003146:	2b00      	cmp	r3, #0
 8003148:	d006      	beq.n	8003158 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003154:	2b00      	cmp	r3, #0
 8003156:	d12b      	bne.n	80031b0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003162:	2b00      	cmp	r3, #0
 8003164:	d124      	bne.n	80031b0 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003170:	2b00      	cmp	r3, #0
 8003172:	d11d      	bne.n	80031b0 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003178:	2b00      	cmp	r3, #0
 800317a:	d119      	bne.n	80031b0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800318a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003190:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a8:	f043 0201 	orr.w	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fa9d 	bl	80036f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f06f 020c 	mvn.w	r2, #12
 80031be:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ce:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d017      	beq.n	8003206 <HAL_ADC_IRQHandler+0x1d6>
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d014      	beq.n	8003206 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d10d      	bne.n	8003206 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f837 	bl	800326a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0201 	mvn.w	r2, #1
 8003204:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003214:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d015      	beq.n	8003248 <HAL_ADC_IRQHandler+0x218>
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d012      	beq.n	8003248 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003226:	f043 0202 	orr.w	r2, r3, #2
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f06f 0220 	mvn.w	r2, #32
 8003236:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f820 	bl	800327e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f06f 0220 	mvn.w	r2, #32
 8003246:	601a      	str	r2, [r3, #0]
  }
}
 8003248:	bf00      	nop
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x1c>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e113      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x244>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b09      	cmp	r3, #9
 80032be:	d925      	bls.n	800330c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68d9      	ldr	r1, [r3, #12]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	4613      	mov	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4413      	add	r3, r2
 80032d4:	3b1e      	subs	r3, #30
 80032d6:	2207      	movs	r2, #7
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43da      	mvns	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	400a      	ands	r2, r1
 80032e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68d9      	ldr	r1, [r3, #12]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	4618      	mov	r0, r3
 80032f8:	4603      	mov	r3, r0
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4403      	add	r3, r0
 80032fe:	3b1e      	subs	r3, #30
 8003300:	409a      	lsls	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	e022      	b.n	8003352 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6919      	ldr	r1, [r3, #16]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	2207      	movs	r2, #7
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43da      	mvns	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	400a      	ands	r2, r1
 800332e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6919      	ldr	r1, [r3, #16]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	b29b      	uxth	r3, r3
 8003340:	4618      	mov	r0, r3
 8003342:	4603      	mov	r3, r0
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4403      	add	r3, r0
 8003348:	409a      	lsls	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b06      	cmp	r3, #6
 8003358:	d824      	bhi.n	80033a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	3b05      	subs	r3, #5
 800336c:	221f      	movs	r2, #31
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43da      	mvns	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	400a      	ands	r2, r1
 800337a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	4618      	mov	r0, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	3b05      	subs	r3, #5
 8003396:	fa00 f203 	lsl.w	r2, r0, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80033a2:	e04c      	b.n	800343e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b0c      	cmp	r3, #12
 80033aa:	d824      	bhi.n	80033f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	3b23      	subs	r3, #35	@ 0x23
 80033be:	221f      	movs	r2, #31
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43da      	mvns	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	400a      	ands	r2, r1
 80033cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	4618      	mov	r0, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	3b23      	subs	r3, #35	@ 0x23
 80033e8:	fa00 f203 	lsl.w	r2, r0, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80033f4:	e023      	b.n	800343e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	3b41      	subs	r3, #65	@ 0x41
 8003408:	221f      	movs	r2, #31
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43da      	mvns	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	400a      	ands	r2, r1
 8003416:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	4618      	mov	r0, r3
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	3b41      	subs	r3, #65	@ 0x41
 8003432:	fa00 f203 	lsl.w	r2, r0, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800343e:	4b29      	ldr	r3, [pc, #164]	@ (80034e4 <HAL_ADC_ConfigChannel+0x250>)
 8003440:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a28      	ldr	r2, [pc, #160]	@ (80034e8 <HAL_ADC_ConfigChannel+0x254>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d10f      	bne.n	800346c <HAL_ADC_ConfigChannel+0x1d8>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b12      	cmp	r3, #18
 8003452:	d10b      	bne.n	800346c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1d      	ldr	r2, [pc, #116]	@ (80034e8 <HAL_ADC_ConfigChannel+0x254>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d12b      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x23a>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a1c      	ldr	r2, [pc, #112]	@ (80034ec <HAL_ADC_ConfigChannel+0x258>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <HAL_ADC_ConfigChannel+0x1f4>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b11      	cmp	r3, #17
 8003486:	d122      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a11      	ldr	r2, [pc, #68]	@ (80034ec <HAL_ADC_ConfigChannel+0x258>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d111      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034aa:	4b11      	ldr	r3, [pc, #68]	@ (80034f0 <HAL_ADC_ConfigChannel+0x25c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a11      	ldr	r2, [pc, #68]	@ (80034f4 <HAL_ADC_ConfigChannel+0x260>)
 80034b0:	fba2 2303 	umull	r2, r3, r2, r3
 80034b4:	0c9a      	lsrs	r2, r3, #18
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80034c0:	e002      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f9      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	40012300 	.word	0x40012300
 80034e8:	40012000 	.word	0x40012000
 80034ec:	10000012 	.word	0x10000012
 80034f0:	20000004 	.word	0x20000004
 80034f4:	431bde83 	.word	0x431bde83

080034f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003500:	4b79      	ldr	r3, [pc, #484]	@ (80036e8 <ADC_Init+0x1f0>)
 8003502:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	431a      	orrs	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800352c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	021a      	lsls	r2, r3, #8
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003550:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003572:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6899      	ldr	r1, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358a:	4a58      	ldr	r2, [pc, #352]	@ (80036ec <ADC_Init+0x1f4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d022      	beq.n	80035d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800359e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6899      	ldr	r1, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6899      	ldr	r1, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	e00f      	b.n	80035f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0202 	bic.w	r2, r2, #2
 8003604:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6899      	ldr	r1, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	7e1b      	ldrb	r3, [r3, #24]
 8003610:	005a      	lsls	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01b      	beq.n	800365c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003632:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003642:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6859      	ldr	r1, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364e:	3b01      	subs	r3, #1
 8003650:	035a      	lsls	r2, r3, #13
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	e007      	b.n	800366c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800366a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800367a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	3b01      	subs	r3, #1
 8003688:	051a      	lsls	r2, r3, #20
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80036a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6899      	ldr	r1, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80036ae:	025a      	lsls	r2, r3, #9
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6899      	ldr	r1, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	029a      	lsls	r2, r3, #10
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	40012300 	.word	0x40012300
 80036ec:	0f000001 	.word	0x0f000001

080036f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003714:	4b0c      	ldr	r3, [pc, #48]	@ (8003748 <__NVIC_SetPriorityGrouping+0x44>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003720:	4013      	ands	r3, r2
 8003722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800372c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003736:	4a04      	ldr	r2, [pc, #16]	@ (8003748 <__NVIC_SetPriorityGrouping+0x44>)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	60d3      	str	r3, [r2, #12]
}
 800373c:	bf00      	nop
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003750:	4b04      	ldr	r3, [pc, #16]	@ (8003764 <__NVIC_GetPriorityGrouping+0x18>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	0a1b      	lsrs	r3, r3, #8
 8003756:	f003 0307 	and.w	r3, r3, #7
}
 800375a:	4618      	mov	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	e000ed00 	.word	0xe000ed00

08003768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	2b00      	cmp	r3, #0
 8003778:	db0b      	blt.n	8003792 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	f003 021f 	and.w	r2, r3, #31
 8003780:	4907      	ldr	r1, [pc, #28]	@ (80037a0 <__NVIC_EnableIRQ+0x38>)
 8003782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	2001      	movs	r0, #1
 800378a:	fa00 f202 	lsl.w	r2, r0, r2
 800378e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	e000e100 	.word	0xe000e100

080037a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	6039      	str	r1, [r7, #0]
 80037ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	db0a      	blt.n	80037ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	490c      	ldr	r1, [pc, #48]	@ (80037f0 <__NVIC_SetPriority+0x4c>)
 80037be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c2:	0112      	lsls	r2, r2, #4
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	440b      	add	r3, r1
 80037c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037cc:	e00a      	b.n	80037e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	4908      	ldr	r1, [pc, #32]	@ (80037f4 <__NVIC_SetPriority+0x50>)
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	3b04      	subs	r3, #4
 80037dc:	0112      	lsls	r2, r2, #4
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	440b      	add	r3, r1
 80037e2:	761a      	strb	r2, [r3, #24]
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000e100 	.word	0xe000e100
 80037f4:	e000ed00 	.word	0xe000ed00

080037f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b089      	sub	sp, #36	@ 0x24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f1c3 0307 	rsb	r3, r3, #7
 8003812:	2b04      	cmp	r3, #4
 8003814:	bf28      	it	cs
 8003816:	2304      	movcs	r3, #4
 8003818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	3304      	adds	r3, #4
 800381e:	2b06      	cmp	r3, #6
 8003820:	d902      	bls.n	8003828 <NVIC_EncodePriority+0x30>
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	3b03      	subs	r3, #3
 8003826:	e000      	b.n	800382a <NVIC_EncodePriority+0x32>
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800382c:	f04f 32ff 	mov.w	r2, #4294967295
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43da      	mvns	r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	401a      	ands	r2, r3
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003840:	f04f 31ff 	mov.w	r1, #4294967295
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	fa01 f303 	lsl.w	r3, r1, r3
 800384a:	43d9      	mvns	r1, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003850:	4313      	orrs	r3, r2
         );
}
 8003852:	4618      	mov	r0, r3
 8003854:	3724      	adds	r7, #36	@ 0x24
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3b01      	subs	r3, #1
 800386c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003870:	d301      	bcc.n	8003876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003872:	2301      	movs	r3, #1
 8003874:	e00f      	b.n	8003896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003876:	4a0a      	ldr	r2, [pc, #40]	@ (80038a0 <SysTick_Config+0x40>)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3b01      	subs	r3, #1
 800387c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800387e:	210f      	movs	r1, #15
 8003880:	f04f 30ff 	mov.w	r0, #4294967295
 8003884:	f7ff ff8e 	bl	80037a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003888:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <SysTick_Config+0x40>)
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800388e:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <SysTick_Config+0x40>)
 8003890:	2207      	movs	r2, #7
 8003892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	e000e010 	.word	0xe000e010

080038a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ff29 	bl	8003704 <__NVIC_SetPriorityGrouping>
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b086      	sub	sp, #24
 80038be:	af00      	add	r7, sp, #0
 80038c0:	4603      	mov	r3, r0
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
 80038c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038cc:	f7ff ff3e 	bl	800374c <__NVIC_GetPriorityGrouping>
 80038d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68b9      	ldr	r1, [r7, #8]
 80038d6:	6978      	ldr	r0, [r7, #20]
 80038d8:	f7ff ff8e 	bl	80037f8 <NVIC_EncodePriority>
 80038dc:	4602      	mov	r2, r0
 80038de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff ff5d 	bl	80037a4 <__NVIC_SetPriority>
}
 80038ea:	bf00      	nop
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	4603      	mov	r3, r0
 80038fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff ff31 	bl	8003768 <__NVIC_EnableIRQ>
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff ffa2 	bl	8003860 <SysTick_Config>
 800391c:	4603      	mov	r3, r0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003932:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003934:	f7ff fa4a 	bl	8002dcc <HAL_GetTick>
 8003938:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d008      	beq.n	8003958 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2280      	movs	r2, #128	@ 0x80
 800394a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e052      	b.n	80039fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0216 	bic.w	r2, r2, #22
 8003966:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003976:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d103      	bne.n	8003988 <HAL_DMA_Abort+0x62>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0208 	bic.w	r2, r2, #8
 8003996:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039a8:	e013      	b.n	80039d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039aa:	f7ff fa0f 	bl	8002dcc <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b05      	cmp	r3, #5
 80039b6:	d90c      	bls.n	80039d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2203      	movs	r2, #3
 80039c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e015      	b.n	80039fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1e4      	bne.n	80039aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e4:	223f      	movs	r2, #63	@ 0x3f
 80039e6:	409a      	lsls	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d004      	beq.n	8003a24 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2280      	movs	r2, #128	@ 0x80
 8003a1e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e00c      	b.n	8003a3e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2205      	movs	r2, #5
 8003a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0201 	bic.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b089      	sub	sp, #36	@ 0x24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
 8003a66:	e159      	b.n	8003d1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a68:	2201      	movs	r2, #1
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	f040 8148 	bne.w	8003d16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d005      	beq.n	8003a9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d130      	bne.n	8003b00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 0201 	and.w	r2, r3, #1
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d017      	beq.n	8003b3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	2203      	movs	r2, #3
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 0303 	and.w	r3, r3, #3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d123      	bne.n	8003b90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	08da      	lsrs	r2, r3, #3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3208      	adds	r2, #8
 8003b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	220f      	movs	r2, #15
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	08da      	lsrs	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3208      	adds	r2, #8
 8003b8a:	69b9      	ldr	r1, [r7, #24]
 8003b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 0203 	and.w	r2, r3, #3
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80a2 	beq.w	8003d16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	4b57      	ldr	r3, [pc, #348]	@ (8003d34 <HAL_GPIO_Init+0x2e8>)
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bda:	4a56      	ldr	r2, [pc, #344]	@ (8003d34 <HAL_GPIO_Init+0x2e8>)
 8003bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003be2:	4b54      	ldr	r3, [pc, #336]	@ (8003d34 <HAL_GPIO_Init+0x2e8>)
 8003be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bee:	4a52      	ldr	r2, [pc, #328]	@ (8003d38 <HAL_GPIO_Init+0x2ec>)
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	089b      	lsrs	r3, r3, #2
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	220f      	movs	r2, #15
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a49      	ldr	r2, [pc, #292]	@ (8003d3c <HAL_GPIO_Init+0x2f0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d019      	beq.n	8003c4e <HAL_GPIO_Init+0x202>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a48      	ldr	r2, [pc, #288]	@ (8003d40 <HAL_GPIO_Init+0x2f4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <HAL_GPIO_Init+0x1fe>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a47      	ldr	r2, [pc, #284]	@ (8003d44 <HAL_GPIO_Init+0x2f8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00d      	beq.n	8003c46 <HAL_GPIO_Init+0x1fa>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a46      	ldr	r2, [pc, #280]	@ (8003d48 <HAL_GPIO_Init+0x2fc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d007      	beq.n	8003c42 <HAL_GPIO_Init+0x1f6>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a45      	ldr	r2, [pc, #276]	@ (8003d4c <HAL_GPIO_Init+0x300>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d101      	bne.n	8003c3e <HAL_GPIO_Init+0x1f2>
 8003c3a:	2304      	movs	r3, #4
 8003c3c:	e008      	b.n	8003c50 <HAL_GPIO_Init+0x204>
 8003c3e:	2307      	movs	r3, #7
 8003c40:	e006      	b.n	8003c50 <HAL_GPIO_Init+0x204>
 8003c42:	2303      	movs	r3, #3
 8003c44:	e004      	b.n	8003c50 <HAL_GPIO_Init+0x204>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e002      	b.n	8003c50 <HAL_GPIO_Init+0x204>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <HAL_GPIO_Init+0x204>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	f002 0203 	and.w	r2, r2, #3
 8003c56:	0092      	lsls	r2, r2, #2
 8003c58:	4093      	lsls	r3, r2
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c60:	4935      	ldr	r1, [pc, #212]	@ (8003d38 <HAL_GPIO_Init+0x2ec>)
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	089b      	lsrs	r3, r3, #2
 8003c66:	3302      	adds	r3, #2
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c6e:	4b38      	ldr	r3, [pc, #224]	@ (8003d50 <HAL_GPIO_Init+0x304>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	43db      	mvns	r3, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c92:	4a2f      	ldr	r2, [pc, #188]	@ (8003d50 <HAL_GPIO_Init+0x304>)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c98:	4b2d      	ldr	r3, [pc, #180]	@ (8003d50 <HAL_GPIO_Init+0x304>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cbc:	4a24      	ldr	r2, [pc, #144]	@ (8003d50 <HAL_GPIO_Init+0x304>)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cc2:	4b23      	ldr	r3, [pc, #140]	@ (8003d50 <HAL_GPIO_Init+0x304>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8003d50 <HAL_GPIO_Init+0x304>)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cec:	4b18      	ldr	r3, [pc, #96]	@ (8003d50 <HAL_GPIO_Init+0x304>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d10:	4a0f      	ldr	r2, [pc, #60]	@ (8003d50 <HAL_GPIO_Init+0x304>)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b0f      	cmp	r3, #15
 8003d20:	f67f aea2 	bls.w	8003a68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop
 8003d28:	3724      	adds	r7, #36	@ 0x24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40013800 	.word	0x40013800
 8003d3c:	40020000 	.word	0x40020000
 8003d40:	40020400 	.word	0x40020400
 8003d44:	40020800 	.word	0x40020800
 8003d48:	40020c00 	.word	0x40020c00
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40013c00 	.word	0x40013c00

08003d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	887b      	ldrh	r3, [r7, #2]
 8003d66:	4013      	ands	r3, r2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
 8003d70:	e001      	b.n	8003d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d72:	2300      	movs	r3, #0
 8003d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	807b      	strh	r3, [r7, #2]
 8003d90:	4613      	mov	r3, r2
 8003d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d94:	787b      	ldrb	r3, [r7, #1]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d9a:	887a      	ldrh	r2, [r7, #2]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003da0:	e003      	b.n	8003daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003da2:	887b      	ldrh	r3, [r7, #2]
 8003da4:	041a      	lsls	r2, r3, #16
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	619a      	str	r2, [r3, #24]
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003dc2:	4b08      	ldr	r3, [pc, #32]	@ (8003de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d006      	beq.n	8003ddc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dce:	4a05      	ldr	r2, [pc, #20]	@ (8003de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dd0:	88fb      	ldrh	r3, [r7, #6]
 8003dd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003dd4:	88fb      	ldrh	r3, [r7, #6]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 f806 	bl	8003de8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ddc:	bf00      	nop
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40013c00 	.word	0x40013c00

08003de8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e267      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d075      	beq.n	8003f0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e1e:	4b88      	ldr	r3, [pc, #544]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d00c      	beq.n	8003e44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e2a:	4b85      	ldr	r3, [pc, #532]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d112      	bne.n	8003e5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e36:	4b82      	ldr	r3, [pc, #520]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e42:	d10b      	bne.n	8003e5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e44:	4b7e      	ldr	r3, [pc, #504]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d05b      	beq.n	8003f08 <HAL_RCC_OscConfig+0x108>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d157      	bne.n	8003f08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e242      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e64:	d106      	bne.n	8003e74 <HAL_RCC_OscConfig+0x74>
 8003e66:	4b76      	ldr	r3, [pc, #472]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a75      	ldr	r2, [pc, #468]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	e01d      	b.n	8003eb0 <HAL_RCC_OscConfig+0xb0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x98>
 8003e7e:	4b70      	ldr	r3, [pc, #448]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a6f      	ldr	r2, [pc, #444]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a6c      	ldr	r2, [pc, #432]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCC_OscConfig+0xb0>
 8003e98:	4b69      	ldr	r3, [pc, #420]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a68      	ldr	r2, [pc, #416]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	4b66      	ldr	r3, [pc, #408]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a65      	ldr	r2, [pc, #404]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d013      	beq.n	8003ee0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7fe ff88 	bl	8002dcc <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec0:	f7fe ff84 	bl	8002dcc <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	@ 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e207      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed2:	4b5b      	ldr	r3, [pc, #364]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xc0>
 8003ede:	e014      	b.n	8003f0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fe ff74 	bl	8002dcc <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7fe ff70 	bl	8002dcc <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	@ 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e1f3      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efa:	4b51      	ldr	r3, [pc, #324]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0xe8>
 8003f06:	e000      	b.n	8003f0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d063      	beq.n	8003fde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f16:	4b4a      	ldr	r3, [pc, #296]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00b      	beq.n	8003f3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f22:	4b47      	ldr	r3, [pc, #284]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d11c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f2e:	4b44      	ldr	r3, [pc, #272]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d116      	bne.n	8003f68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3a:	4b41      	ldr	r3, [pc, #260]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <HAL_RCC_OscConfig+0x152>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d001      	beq.n	8003f52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e1c7      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f52:	4b3b      	ldr	r3, [pc, #236]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4937      	ldr	r1, [pc, #220]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f66:	e03a      	b.n	8003fde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d020      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f70:	4b34      	ldr	r3, [pc, #208]	@ (8004044 <HAL_RCC_OscConfig+0x244>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f76:	f7fe ff29 	bl	8002dcc <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f7e:	f7fe ff25 	bl	8002dcc <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e1a8      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f90:	4b2b      	ldr	r3, [pc, #172]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f0      	beq.n	8003f7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9c:	4b28      	ldr	r3, [pc, #160]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4925      	ldr	r1, [pc, #148]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]
 8003fb0:	e015      	b.n	8003fde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fb2:	4b24      	ldr	r3, [pc, #144]	@ (8004044 <HAL_RCC_OscConfig+0x244>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb8:	f7fe ff08 	bl	8002dcc <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fc0:	f7fe ff04 	bl	8002dcc <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e187      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d036      	beq.n	8004058 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d016      	beq.n	8004020 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ff2:	4b15      	ldr	r3, [pc, #84]	@ (8004048 <HAL_RCC_OscConfig+0x248>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff8:	f7fe fee8 	bl	8002dcc <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004000:	f7fe fee4 	bl	8002dcc <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e167      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004012:	4b0b      	ldr	r3, [pc, #44]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8004014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x200>
 800401e:	e01b      	b.n	8004058 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004020:	4b09      	ldr	r3, [pc, #36]	@ (8004048 <HAL_RCC_OscConfig+0x248>)
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004026:	f7fe fed1 	bl	8002dcc <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800402c:	e00e      	b.n	800404c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800402e:	f7fe fecd 	bl	8002dcc <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d907      	bls.n	800404c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e150      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
 8004040:	40023800 	.word	0x40023800
 8004044:	42470000 	.word	0x42470000
 8004048:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800404c:	4b88      	ldr	r3, [pc, #544]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800404e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1ea      	bne.n	800402e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8097 	beq.w	8004194 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004066:	2300      	movs	r3, #0
 8004068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800406a:	4b81      	ldr	r3, [pc, #516]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10f      	bne.n	8004096 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	4b7d      	ldr	r3, [pc, #500]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	4a7c      	ldr	r2, [pc, #496]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 8004080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004084:	6413      	str	r3, [r2, #64]	@ 0x40
 8004086:	4b7a      	ldr	r3, [pc, #488]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004092:	2301      	movs	r3, #1
 8004094:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004096:	4b77      	ldr	r3, [pc, #476]	@ (8004274 <HAL_RCC_OscConfig+0x474>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d118      	bne.n	80040d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040a2:	4b74      	ldr	r3, [pc, #464]	@ (8004274 <HAL_RCC_OscConfig+0x474>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a73      	ldr	r2, [pc, #460]	@ (8004274 <HAL_RCC_OscConfig+0x474>)
 80040a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ae:	f7fe fe8d 	bl	8002dcc <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b6:	f7fe fe89 	bl	8002dcc <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e10c      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c8:	4b6a      	ldr	r3, [pc, #424]	@ (8004274 <HAL_RCC_OscConfig+0x474>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d106      	bne.n	80040ea <HAL_RCC_OscConfig+0x2ea>
 80040dc:	4b64      	ldr	r3, [pc, #400]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e0:	4a63      	ldr	r2, [pc, #396]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040e8:	e01c      	b.n	8004124 <HAL_RCC_OscConfig+0x324>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2b05      	cmp	r3, #5
 80040f0:	d10c      	bne.n	800410c <HAL_RCC_OscConfig+0x30c>
 80040f2:	4b5f      	ldr	r3, [pc, #380]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f6:	4a5e      	ldr	r2, [pc, #376]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 80040f8:	f043 0304 	orr.w	r3, r3, #4
 80040fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80040fe:	4b5c      	ldr	r3, [pc, #368]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004102:	4a5b      	ldr	r2, [pc, #364]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6713      	str	r3, [r2, #112]	@ 0x70
 800410a:	e00b      	b.n	8004124 <HAL_RCC_OscConfig+0x324>
 800410c:	4b58      	ldr	r3, [pc, #352]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800410e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004110:	4a57      	ldr	r2, [pc, #348]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 8004112:	f023 0301 	bic.w	r3, r3, #1
 8004116:	6713      	str	r3, [r2, #112]	@ 0x70
 8004118:	4b55      	ldr	r3, [pc, #340]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411c:	4a54      	ldr	r2, [pc, #336]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800411e:	f023 0304 	bic.w	r3, r3, #4
 8004122:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d015      	beq.n	8004158 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fe fe4e 	bl	8002dcc <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004132:	e00a      	b.n	800414a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004134:	f7fe fe4a 	bl	8002dcc <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004142:	4293      	cmp	r3, r2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e0cb      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414a:	4b49      	ldr	r3, [pc, #292]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800414c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0ee      	beq.n	8004134 <HAL_RCC_OscConfig+0x334>
 8004156:	e014      	b.n	8004182 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004158:	f7fe fe38 	bl	8002dcc <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004160:	f7fe fe34 	bl	8002dcc <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e0b5      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004176:	4b3e      	ldr	r3, [pc, #248]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1ee      	bne.n	8004160 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004182:	7dfb      	ldrb	r3, [r7, #23]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d105      	bne.n	8004194 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004188:	4b39      	ldr	r3, [pc, #228]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800418a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418c:	4a38      	ldr	r2, [pc, #224]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800418e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004192:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 80a1 	beq.w	80042e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800419e:	4b34      	ldr	r3, [pc, #208]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d05c      	beq.n	8004264 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d141      	bne.n	8004236 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b2:	4b31      	ldr	r3, [pc, #196]	@ (8004278 <HAL_RCC_OscConfig+0x478>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fe fe08 	bl	8002dcc <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c0:	f7fe fe04 	bl	8002dcc <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e087      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d2:	4b27      	ldr	r3, [pc, #156]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69da      	ldr	r2, [r3, #28]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	019b      	lsls	r3, r3, #6
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f4:	085b      	lsrs	r3, r3, #1
 80041f6:	3b01      	subs	r3, #1
 80041f8:	041b      	lsls	r3, r3, #16
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004200:	061b      	lsls	r3, r3, #24
 8004202:	491b      	ldr	r1, [pc, #108]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 8004204:	4313      	orrs	r3, r2
 8004206:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004208:	4b1b      	ldr	r3, [pc, #108]	@ (8004278 <HAL_RCC_OscConfig+0x478>)
 800420a:	2201      	movs	r2, #1
 800420c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420e:	f7fe fddd 	bl	8002dcc <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004216:	f7fe fdd9 	bl	8002dcc <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e05c      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004228:	4b11      	ldr	r3, [pc, #68]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0f0      	beq.n	8004216 <HAL_RCC_OscConfig+0x416>
 8004234:	e054      	b.n	80042e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004236:	4b10      	ldr	r3, [pc, #64]	@ (8004278 <HAL_RCC_OscConfig+0x478>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fe fdc6 	bl	8002dcc <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004244:	f7fe fdc2 	bl	8002dcc <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e045      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004256:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x444>
 8004262:	e03d      	b.n	80042e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d107      	bne.n	800427c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e038      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
 8004270:	40023800 	.word	0x40023800
 8004274:	40007000 	.word	0x40007000
 8004278:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800427c:	4b1b      	ldr	r3, [pc, #108]	@ (80042ec <HAL_RCC_OscConfig+0x4ec>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d028      	beq.n	80042dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004294:	429a      	cmp	r2, r3
 8004296:	d121      	bne.n	80042dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d11a      	bne.n	80042dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042ac:	4013      	ands	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d111      	bne.n	80042dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c2:	085b      	lsrs	r3, r3, #1
 80042c4:	3b01      	subs	r3, #1
 80042c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d107      	bne.n	80042dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40023800 	.word	0x40023800

080042f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0cc      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004304:	4b68      	ldr	r3, [pc, #416]	@ (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d90c      	bls.n	800432c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004312:	4b65      	ldr	r3, [pc, #404]	@ (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b63      	ldr	r3, [pc, #396]	@ (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0b8      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d020      	beq.n	800437a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004344:	4b59      	ldr	r3, [pc, #356]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	4a58      	ldr	r2, [pc, #352]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800434e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800435c:	4b53      	ldr	r3, [pc, #332]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4a52      	ldr	r2, [pc, #328]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004368:	4b50      	ldr	r3, [pc, #320]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	494d      	ldr	r1, [pc, #308]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d044      	beq.n	8004410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d107      	bne.n	800439e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	4b47      	ldr	r3, [pc, #284]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d119      	bne.n	80043ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e07f      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d003      	beq.n	80043ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d107      	bne.n	80043be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ae:	4b3f      	ldr	r3, [pc, #252]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e06f      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043be:	4b3b      	ldr	r3, [pc, #236]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e067      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ce:	4b37      	ldr	r3, [pc, #220]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f023 0203 	bic.w	r2, r3, #3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	4934      	ldr	r1, [pc, #208]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e0:	f7fe fcf4 	bl	8002dcc <HAL_GetTick>
 80043e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e6:	e00a      	b.n	80043fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e8:	f7fe fcf0 	bl	8002dcc <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e04f      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fe:	4b2b      	ldr	r3, [pc, #172]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 020c 	and.w	r2, r3, #12
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	429a      	cmp	r2, r3
 800440e:	d1eb      	bne.n	80043e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004410:	4b25      	ldr	r3, [pc, #148]	@ (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d20c      	bcs.n	8004438 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441e:	4b22      	ldr	r3, [pc, #136]	@ (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004426:	4b20      	ldr	r3, [pc, #128]	@ (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d001      	beq.n	8004438 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e032      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004444:	4b19      	ldr	r3, [pc, #100]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4916      	ldr	r1, [pc, #88]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004462:	4b12      	ldr	r3, [pc, #72]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	490e      	ldr	r1, [pc, #56]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	4313      	orrs	r3, r2
 8004474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004476:	f000 f821 	bl	80044bc <HAL_RCC_GetSysClockFreq>
 800447a:	4602      	mov	r2, r0
 800447c:	4b0b      	ldr	r3, [pc, #44]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	490a      	ldr	r1, [pc, #40]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004488:	5ccb      	ldrb	r3, [r1, r3]
 800448a:	fa22 f303 	lsr.w	r3, r2, r3
 800448e:	4a09      	ldr	r2, [pc, #36]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004492:	4b09      	ldr	r3, [pc, #36]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fe fc54 	bl	8002d44 <HAL_InitTick>

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40023c00 	.word	0x40023c00
 80044ac:	40023800 	.word	0x40023800
 80044b0:	0800aa84 	.word	0x0800aa84
 80044b4:	20000004 	.word	0x20000004
 80044b8:	20000008 	.word	0x20000008

080044bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c0:	b094      	sub	sp, #80	@ 0x50
 80044c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044d4:	4b79      	ldr	r3, [pc, #484]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 030c 	and.w	r3, r3, #12
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d00d      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0x40>
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	f200 80e1 	bhi.w	80046a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_RCC_GetSysClockFreq+0x34>
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d003      	beq.n	80044f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ee:	e0db      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044f0:	4b73      	ldr	r3, [pc, #460]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80044f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044f4:	e0db      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044f6:	4b73      	ldr	r3, [pc, #460]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80044f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044fa:	e0d8      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044fc:	4b6f      	ldr	r3, [pc, #444]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004504:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004506:	4b6d      	ldr	r3, [pc, #436]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d063      	beq.n	80045da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004512:	4b6a      	ldr	r3, [pc, #424]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	2200      	movs	r2, #0
 800451a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800451c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800451e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004524:	633b      	str	r3, [r7, #48]	@ 0x30
 8004526:	2300      	movs	r3, #0
 8004528:	637b      	str	r3, [r7, #52]	@ 0x34
 800452a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800452e:	4622      	mov	r2, r4
 8004530:	462b      	mov	r3, r5
 8004532:	f04f 0000 	mov.w	r0, #0
 8004536:	f04f 0100 	mov.w	r1, #0
 800453a:	0159      	lsls	r1, r3, #5
 800453c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004540:	0150      	lsls	r0, r2, #5
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4621      	mov	r1, r4
 8004548:	1a51      	subs	r1, r2, r1
 800454a:	6139      	str	r1, [r7, #16]
 800454c:	4629      	mov	r1, r5
 800454e:	eb63 0301 	sbc.w	r3, r3, r1
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004560:	4659      	mov	r1, fp
 8004562:	018b      	lsls	r3, r1, #6
 8004564:	4651      	mov	r1, sl
 8004566:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800456a:	4651      	mov	r1, sl
 800456c:	018a      	lsls	r2, r1, #6
 800456e:	4651      	mov	r1, sl
 8004570:	ebb2 0801 	subs.w	r8, r2, r1
 8004574:	4659      	mov	r1, fp
 8004576:	eb63 0901 	sbc.w	r9, r3, r1
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800458a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800458e:	4690      	mov	r8, r2
 8004590:	4699      	mov	r9, r3
 8004592:	4623      	mov	r3, r4
 8004594:	eb18 0303 	adds.w	r3, r8, r3
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	462b      	mov	r3, r5
 800459c:	eb49 0303 	adc.w	r3, r9, r3
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045ae:	4629      	mov	r1, r5
 80045b0:	024b      	lsls	r3, r1, #9
 80045b2:	4621      	mov	r1, r4
 80045b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045b8:	4621      	mov	r1, r4
 80045ba:	024a      	lsls	r2, r1, #9
 80045bc:	4610      	mov	r0, r2
 80045be:	4619      	mov	r1, r3
 80045c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045c2:	2200      	movs	r2, #0
 80045c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045cc:	f7fc fb54 	bl	8000c78 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4613      	mov	r3, r2
 80045d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045d8:	e058      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045da:	4b38      	ldr	r3, [pc, #224]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	099b      	lsrs	r3, r3, #6
 80045e0:	2200      	movs	r2, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	4611      	mov	r1, r2
 80045e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045ea:	623b      	str	r3, [r7, #32]
 80045ec:	2300      	movs	r3, #0
 80045ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	f04f 0000 	mov.w	r0, #0
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	0159      	lsls	r1, r3, #5
 8004602:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004606:	0150      	lsls	r0, r2, #5
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4641      	mov	r1, r8
 800460e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004612:	4649      	mov	r1, r9
 8004614:	eb63 0b01 	sbc.w	fp, r3, r1
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004624:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004628:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800462c:	ebb2 040a 	subs.w	r4, r2, sl
 8004630:	eb63 050b 	sbc.w	r5, r3, fp
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	00eb      	lsls	r3, r5, #3
 800463e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004642:	00e2      	lsls	r2, r4, #3
 8004644:	4614      	mov	r4, r2
 8004646:	461d      	mov	r5, r3
 8004648:	4643      	mov	r3, r8
 800464a:	18e3      	adds	r3, r4, r3
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	464b      	mov	r3, r9
 8004650:	eb45 0303 	adc.w	r3, r5, r3
 8004654:	607b      	str	r3, [r7, #4]
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004662:	4629      	mov	r1, r5
 8004664:	028b      	lsls	r3, r1, #10
 8004666:	4621      	mov	r1, r4
 8004668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800466c:	4621      	mov	r1, r4
 800466e:	028a      	lsls	r2, r1, #10
 8004670:	4610      	mov	r0, r2
 8004672:	4619      	mov	r1, r3
 8004674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004676:	2200      	movs	r2, #0
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	61fa      	str	r2, [r7, #28]
 800467c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004680:	f7fc fafa 	bl	8000c78 <__aeabi_uldivmod>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4613      	mov	r3, r2
 800468a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800468c:	4b0b      	ldr	r3, [pc, #44]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	3301      	adds	r3, #1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800469c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800469e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046a6:	e002      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a8:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80046aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3750      	adds	r7, #80	@ 0x50
 80046b4:	46bd      	mov	sp, r7
 80046b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ba:	bf00      	nop
 80046bc:	40023800 	.word	0x40023800
 80046c0:	00f42400 	.word	0x00f42400
 80046c4:	007a1200 	.word	0x007a1200

080046c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046cc:	4b03      	ldr	r3, [pc, #12]	@ (80046dc <HAL_RCC_GetHCLKFreq+0x14>)
 80046ce:	681b      	ldr	r3, [r3, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000004 	.word	0x20000004

080046e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046e4:	f7ff fff0 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 80046e8:	4602      	mov	r2, r0
 80046ea:	4b05      	ldr	r3, [pc, #20]	@ (8004700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	0a9b      	lsrs	r3, r3, #10
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	4903      	ldr	r1, [pc, #12]	@ (8004704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046f6:	5ccb      	ldrb	r3, [r1, r3]
 80046f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40023800 	.word	0x40023800
 8004704:	0800aa94 	.word	0x0800aa94

08004708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800470c:	f7ff ffdc 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 8004710:	4602      	mov	r2, r0
 8004712:	4b05      	ldr	r3, [pc, #20]	@ (8004728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	0b5b      	lsrs	r3, r3, #13
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	4903      	ldr	r1, [pc, #12]	@ (800472c <HAL_RCC_GetPCLK2Freq+0x24>)
 800471e:	5ccb      	ldrb	r3, [r1, r3]
 8004720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004724:	4618      	mov	r0, r3
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40023800 	.word	0x40023800
 800472c:	0800aa94 	.word	0x0800aa94

08004730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e041      	b.n	80047c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fd ffee 	bl	8002738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3304      	adds	r3, #4
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f000 fc3c 	bl	8004fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d001      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e044      	b.n	8004872 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1e      	ldr	r2, [pc, #120]	@ (8004880 <HAL_TIM_Base_Start_IT+0xb0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d018      	beq.n	800483c <HAL_TIM_Base_Start_IT+0x6c>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004812:	d013      	beq.n	800483c <HAL_TIM_Base_Start_IT+0x6c>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1a      	ldr	r2, [pc, #104]	@ (8004884 <HAL_TIM_Base_Start_IT+0xb4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00e      	beq.n	800483c <HAL_TIM_Base_Start_IT+0x6c>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a19      	ldr	r2, [pc, #100]	@ (8004888 <HAL_TIM_Base_Start_IT+0xb8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d009      	beq.n	800483c <HAL_TIM_Base_Start_IT+0x6c>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a17      	ldr	r2, [pc, #92]	@ (800488c <HAL_TIM_Base_Start_IT+0xbc>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d004      	beq.n	800483c <HAL_TIM_Base_Start_IT+0x6c>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a16      	ldr	r2, [pc, #88]	@ (8004890 <HAL_TIM_Base_Start_IT+0xc0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d111      	bne.n	8004860 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b06      	cmp	r3, #6
 800484c:	d010      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f042 0201 	orr.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485e:	e007      	b.n	8004870 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40010000 	.word	0x40010000
 8004884:	40000400 	.word	0x40000400
 8004888:	40000800 	.word	0x40000800
 800488c:	40000c00 	.word	0x40000c00
 8004890:	40014000 	.word	0x40014000

08004894 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e041      	b.n	800492a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f839 	bl	8004932 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4619      	mov	r1, r3
 80048d2:	4610      	mov	r0, r2
 80048d4:	f000 fb8a 	bl	8004fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d109      	bne.n	800496c <HAL_TIM_PWM_Start+0x24>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	bf14      	ite	ne
 8004964:	2301      	movne	r3, #1
 8004966:	2300      	moveq	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	e022      	b.n	80049b2 <HAL_TIM_PWM_Start+0x6a>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b04      	cmp	r3, #4
 8004970:	d109      	bne.n	8004986 <HAL_TIM_PWM_Start+0x3e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b01      	cmp	r3, #1
 800497c:	bf14      	ite	ne
 800497e:	2301      	movne	r3, #1
 8004980:	2300      	moveq	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	e015      	b.n	80049b2 <HAL_TIM_PWM_Start+0x6a>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b08      	cmp	r3, #8
 800498a:	d109      	bne.n	80049a0 <HAL_TIM_PWM_Start+0x58>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b01      	cmp	r3, #1
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	e008      	b.n	80049b2 <HAL_TIM_PWM_Start+0x6a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	bf14      	ite	ne
 80049ac:	2301      	movne	r3, #1
 80049ae:	2300      	moveq	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e068      	b.n	8004a8c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d104      	bne.n	80049ca <HAL_TIM_PWM_Start+0x82>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049c8:	e013      	b.n	80049f2 <HAL_TIM_PWM_Start+0xaa>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d104      	bne.n	80049da <HAL_TIM_PWM_Start+0x92>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049d8:	e00b      	b.n	80049f2 <HAL_TIM_PWM_Start+0xaa>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d104      	bne.n	80049ea <HAL_TIM_PWM_Start+0xa2>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049e8:	e003      	b.n	80049f2 <HAL_TIM_PWM_Start+0xaa>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2202      	movs	r2, #2
 80049ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2201      	movs	r2, #1
 80049f8:	6839      	ldr	r1, [r7, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fda2 	bl	8005544 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a23      	ldr	r2, [pc, #140]	@ (8004a94 <HAL_TIM_PWM_Start+0x14c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d107      	bne.n	8004a1a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8004a94 <HAL_TIM_PWM_Start+0x14c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d018      	beq.n	8004a56 <HAL_TIM_PWM_Start+0x10e>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2c:	d013      	beq.n	8004a56 <HAL_TIM_PWM_Start+0x10e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a19      	ldr	r2, [pc, #100]	@ (8004a98 <HAL_TIM_PWM_Start+0x150>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00e      	beq.n	8004a56 <HAL_TIM_PWM_Start+0x10e>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a17      	ldr	r2, [pc, #92]	@ (8004a9c <HAL_TIM_PWM_Start+0x154>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d009      	beq.n	8004a56 <HAL_TIM_PWM_Start+0x10e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a16      	ldr	r2, [pc, #88]	@ (8004aa0 <HAL_TIM_PWM_Start+0x158>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d004      	beq.n	8004a56 <HAL_TIM_PWM_Start+0x10e>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a14      	ldr	r2, [pc, #80]	@ (8004aa4 <HAL_TIM_PWM_Start+0x15c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d111      	bne.n	8004a7a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b06      	cmp	r3, #6
 8004a66:	d010      	beq.n	8004a8a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a78:	e007      	b.n	8004a8a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0201 	orr.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40010000 	.word	0x40010000
 8004a98:	40000400 	.word	0x40000400
 8004a9c:	40000800 	.word	0x40000800
 8004aa0:	40000c00 	.word	0x40000c00
 8004aa4:	40014000 	.word	0x40014000

08004aa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d020      	beq.n	8004b0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01b      	beq.n	8004b0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0202 	mvn.w	r2, #2
 8004adc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fa5b 	bl	8004fae <HAL_TIM_IC_CaptureCallback>
 8004af8:	e005      	b.n	8004b06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fa4d 	bl	8004f9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fa5e 	bl	8004fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d020      	beq.n	8004b58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01b      	beq.n	8004b58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0204 	mvn.w	r2, #4
 8004b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fa35 	bl	8004fae <HAL_TIM_IC_CaptureCallback>
 8004b44:	e005      	b.n	8004b52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fa27 	bl	8004f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fa38 	bl	8004fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d020      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d01b      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0208 	mvn.w	r2, #8
 8004b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2204      	movs	r2, #4
 8004b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fa0f 	bl	8004fae <HAL_TIM_IC_CaptureCallback>
 8004b90:	e005      	b.n	8004b9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fa01 	bl	8004f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fa12 	bl	8004fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f003 0310 	and.w	r3, r3, #16
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d020      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01b      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0210 	mvn.w	r2, #16
 8004bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2208      	movs	r2, #8
 8004bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f9e9 	bl	8004fae <HAL_TIM_IC_CaptureCallback>
 8004bdc:	e005      	b.n	8004bea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f9db 	bl	8004f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f9ec 	bl	8004fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00c      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d007      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0201 	mvn.w	r2, #1
 8004c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fd fc4a 	bl	80024a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00c      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fd76 	bl	8005724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00c      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d007      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f9bd 	bl	8004fd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00c      	beq.n	8004c80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d007      	beq.n	8004c80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0220 	mvn.w	r2, #32
 8004c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fd48 	bl	8005710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c80:	bf00      	nop
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e0ae      	b.n	8004e04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b0c      	cmp	r3, #12
 8004cb2:	f200 809f 	bhi.w	8004df4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbc:	08004cf1 	.word	0x08004cf1
 8004cc0:	08004df5 	.word	0x08004df5
 8004cc4:	08004df5 	.word	0x08004df5
 8004cc8:	08004df5 	.word	0x08004df5
 8004ccc:	08004d31 	.word	0x08004d31
 8004cd0:	08004df5 	.word	0x08004df5
 8004cd4:	08004df5 	.word	0x08004df5
 8004cd8:	08004df5 	.word	0x08004df5
 8004cdc:	08004d73 	.word	0x08004d73
 8004ce0:	08004df5 	.word	0x08004df5
 8004ce4:	08004df5 	.word	0x08004df5
 8004ce8:	08004df5 	.word	0x08004df5
 8004cec:	08004db3 	.word	0x08004db3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 f9fe 	bl	80050f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0208 	orr.w	r2, r2, #8
 8004d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0204 	bic.w	r2, r2, #4
 8004d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6999      	ldr	r1, [r3, #24]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	619a      	str	r2, [r3, #24]
      break;
 8004d2e:	e064      	b.n	8004dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fa44 	bl	80051c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6999      	ldr	r1, [r3, #24]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	021a      	lsls	r2, r3, #8
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	619a      	str	r2, [r3, #24]
      break;
 8004d70:	e043      	b.n	8004dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fa8f 	bl	800529c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69da      	ldr	r2, [r3, #28]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0208 	orr.w	r2, r2, #8
 8004d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69da      	ldr	r2, [r3, #28]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0204 	bic.w	r2, r2, #4
 8004d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69d9      	ldr	r1, [r3, #28]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	61da      	str	r2, [r3, #28]
      break;
 8004db0:	e023      	b.n	8004dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68b9      	ldr	r1, [r7, #8]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fad9 	bl	8005370 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69da      	ldr	r2, [r3, #28]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69d9      	ldr	r1, [r3, #28]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	021a      	lsls	r2, r3, #8
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	61da      	str	r2, [r3, #28]
      break;
 8004df2:	e002      	b.n	8004dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	75fb      	strb	r3, [r7, #23]
      break;
 8004df8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_TIM_ConfigClockSource+0x1c>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e0b4      	b.n	8004f92 <HAL_TIM_ConfigClockSource+0x186>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e60:	d03e      	beq.n	8004ee0 <HAL_TIM_ConfigClockSource+0xd4>
 8004e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e66:	f200 8087 	bhi.w	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
 8004e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e6e:	f000 8086 	beq.w	8004f7e <HAL_TIM_ConfigClockSource+0x172>
 8004e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e76:	d87f      	bhi.n	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
 8004e78:	2b70      	cmp	r3, #112	@ 0x70
 8004e7a:	d01a      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0xa6>
 8004e7c:	2b70      	cmp	r3, #112	@ 0x70
 8004e7e:	d87b      	bhi.n	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
 8004e80:	2b60      	cmp	r3, #96	@ 0x60
 8004e82:	d050      	beq.n	8004f26 <HAL_TIM_ConfigClockSource+0x11a>
 8004e84:	2b60      	cmp	r3, #96	@ 0x60
 8004e86:	d877      	bhi.n	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
 8004e88:	2b50      	cmp	r3, #80	@ 0x50
 8004e8a:	d03c      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0xfa>
 8004e8c:	2b50      	cmp	r3, #80	@ 0x50
 8004e8e:	d873      	bhi.n	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
 8004e90:	2b40      	cmp	r3, #64	@ 0x40
 8004e92:	d058      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0x13a>
 8004e94:	2b40      	cmp	r3, #64	@ 0x40
 8004e96:	d86f      	bhi.n	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
 8004e98:	2b30      	cmp	r3, #48	@ 0x30
 8004e9a:	d064      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0x15a>
 8004e9c:	2b30      	cmp	r3, #48	@ 0x30
 8004e9e:	d86b      	bhi.n	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	d060      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0x15a>
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	d867      	bhi.n	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d05c      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0x15a>
 8004eac:	2b10      	cmp	r3, #16
 8004eae:	d05a      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0x15a>
 8004eb0:	e062      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ec2:	f000 fb1f 	bl	8005504 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ed4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	609a      	str	r2, [r3, #8]
      break;
 8004ede:	e04f      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ef0:	f000 fb08 	bl	8005504 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f02:	609a      	str	r2, [r3, #8]
      break;
 8004f04:	e03c      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f12:	461a      	mov	r2, r3
 8004f14:	f000 fa7c 	bl	8005410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2150      	movs	r1, #80	@ 0x50
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fad5 	bl	80054ce <TIM_ITRx_SetConfig>
      break;
 8004f24:	e02c      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f32:	461a      	mov	r2, r3
 8004f34:	f000 fa9b 	bl	800546e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2160      	movs	r1, #96	@ 0x60
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fac5 	bl	80054ce <TIM_ITRx_SetConfig>
      break;
 8004f44:	e01c      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f52:	461a      	mov	r2, r3
 8004f54:	f000 fa5c 	bl	8005410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2140      	movs	r1, #64	@ 0x40
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fab5 	bl	80054ce <TIM_ITRx_SetConfig>
      break;
 8004f64:	e00c      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4610      	mov	r0, r2
 8004f72:	f000 faac 	bl	80054ce <TIM_ITRx_SetConfig>
      break;
 8004f76:	e003      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f7c:	e000      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
	...

08004fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a37      	ldr	r2, [pc, #220]	@ (80050dc <TIM_Base_SetConfig+0xf0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00f      	beq.n	8005024 <TIM_Base_SetConfig+0x38>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800500a:	d00b      	beq.n	8005024 <TIM_Base_SetConfig+0x38>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a34      	ldr	r2, [pc, #208]	@ (80050e0 <TIM_Base_SetConfig+0xf4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d007      	beq.n	8005024 <TIM_Base_SetConfig+0x38>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a33      	ldr	r2, [pc, #204]	@ (80050e4 <TIM_Base_SetConfig+0xf8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_Base_SetConfig+0x38>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a32      	ldr	r2, [pc, #200]	@ (80050e8 <TIM_Base_SetConfig+0xfc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d108      	bne.n	8005036 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800502a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a28      	ldr	r2, [pc, #160]	@ (80050dc <TIM_Base_SetConfig+0xf0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d01b      	beq.n	8005076 <TIM_Base_SetConfig+0x8a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005044:	d017      	beq.n	8005076 <TIM_Base_SetConfig+0x8a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a25      	ldr	r2, [pc, #148]	@ (80050e0 <TIM_Base_SetConfig+0xf4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d013      	beq.n	8005076 <TIM_Base_SetConfig+0x8a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a24      	ldr	r2, [pc, #144]	@ (80050e4 <TIM_Base_SetConfig+0xf8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00f      	beq.n	8005076 <TIM_Base_SetConfig+0x8a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a23      	ldr	r2, [pc, #140]	@ (80050e8 <TIM_Base_SetConfig+0xfc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00b      	beq.n	8005076 <TIM_Base_SetConfig+0x8a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a22      	ldr	r2, [pc, #136]	@ (80050ec <TIM_Base_SetConfig+0x100>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d007      	beq.n	8005076 <TIM_Base_SetConfig+0x8a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a21      	ldr	r2, [pc, #132]	@ (80050f0 <TIM_Base_SetConfig+0x104>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d003      	beq.n	8005076 <TIM_Base_SetConfig+0x8a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a20      	ldr	r2, [pc, #128]	@ (80050f4 <TIM_Base_SetConfig+0x108>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d108      	bne.n	8005088 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800507c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a0c      	ldr	r2, [pc, #48]	@ (80050dc <TIM_Base_SetConfig+0xf0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d103      	bne.n	80050b6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f043 0204 	orr.w	r2, r3, #4
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	601a      	str	r2, [r3, #0]
}
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40010000 	.word	0x40010000
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40000800 	.word	0x40000800
 80050e8:	40000c00 	.word	0x40000c00
 80050ec:	40014000 	.word	0x40014000
 80050f0:	40014400 	.word	0x40014400
 80050f4:	40014800 	.word	0x40014800

080050f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	f023 0201 	bic.w	r2, r3, #1
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0303 	bic.w	r3, r3, #3
 800512e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f023 0302 	bic.w	r3, r3, #2
 8005140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a1c      	ldr	r2, [pc, #112]	@ (80051c0 <TIM_OC1_SetConfig+0xc8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d10c      	bne.n	800516e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f023 0308 	bic.w	r3, r3, #8
 800515a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f023 0304 	bic.w	r3, r3, #4
 800516c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a13      	ldr	r2, [pc, #76]	@ (80051c0 <TIM_OC1_SetConfig+0xc8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d111      	bne.n	800519a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800517c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	621a      	str	r2, [r3, #32]
}
 80051b4:	bf00      	nop
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	40010000 	.word	0x40010000

080051c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	f023 0210 	bic.w	r2, r3, #16
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f023 0320 	bic.w	r3, r3, #32
 800520e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a1e      	ldr	r2, [pc, #120]	@ (8005298 <TIM_OC2_SetConfig+0xd4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d10d      	bne.n	8005240 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800522a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800523e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a15      	ldr	r2, [pc, #84]	@ (8005298 <TIM_OC2_SetConfig+0xd4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d113      	bne.n	8005270 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800524e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005256:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40010000 	.word	0x40010000

0800529c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0303 	bic.w	r3, r3, #3
 80052d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	021b      	lsls	r3, r3, #8
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a1d      	ldr	r2, [pc, #116]	@ (800536c <TIM_OC3_SetConfig+0xd0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d10d      	bne.n	8005316 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005300:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	021b      	lsls	r3, r3, #8
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a14      	ldr	r2, [pc, #80]	@ (800536c <TIM_OC3_SetConfig+0xd0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d113      	bne.n	8005346 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800532c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	621a      	str	r2, [r3, #32]
}
 8005360:	bf00      	nop
 8005362:	371c      	adds	r7, #28
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	40010000 	.word	0x40010000

08005370 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800539e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	031b      	lsls	r3, r3, #12
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a10      	ldr	r2, [pc, #64]	@ (800540c <TIM_OC4_SetConfig+0x9c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d109      	bne.n	80053e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	019b      	lsls	r3, r3, #6
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40010000 	.word	0x40010000

08005410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f023 0201 	bic.w	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800543a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4313      	orrs	r3, r2
 8005444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f023 030a 	bic.w	r3, r3, #10
 800544c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	621a      	str	r2, [r3, #32]
}
 8005462:	bf00      	nop
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800546e:	b480      	push	{r7}
 8005470:	b087      	sub	sp, #28
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	f023 0210 	bic.w	r2, r3, #16
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005498:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	031b      	lsls	r3, r3, #12
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	621a      	str	r2, [r3, #32]
}
 80054c2:	bf00      	nop
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b085      	sub	sp, #20
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f043 0307 	orr.w	r3, r3, #7
 80054f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	609a      	str	r2, [r3, #8]
}
 80054f8:	bf00      	nop
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800551e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	021a      	lsls	r2, r3, #8
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	431a      	orrs	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4313      	orrs	r3, r2
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	609a      	str	r2, [r3, #8]
}
 8005538:	bf00      	nop
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	2201      	movs	r2, #1
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6a1a      	ldr	r2, [r3, #32]
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	43db      	mvns	r3, r3
 8005566:	401a      	ands	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a1a      	ldr	r2, [r3, #32]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f003 031f 	and.w	r3, r3, #31
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	fa01 f303 	lsl.w	r3, r1, r3
 800557c:	431a      	orrs	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	621a      	str	r2, [r3, #32]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e050      	b.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005658 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d018      	beq.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f4:	d013      	beq.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a18      	ldr	r2, [pc, #96]	@ (800565c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00e      	beq.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a16      	ldr	r2, [pc, #88]	@ (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d009      	beq.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a15      	ldr	r2, [pc, #84]	@ (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d004      	beq.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a13      	ldr	r2, [pc, #76]	@ (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d10c      	bne.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005624:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	4313      	orrs	r3, r2
 800562e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40010000 	.word	0x40010000
 800565c:	40000400 	.word	0x40000400
 8005660:	40000800 	.word	0x40000800
 8005664:	40000c00 	.word	0x40000c00
 8005668:	40014000 	.word	0x40014000

0800566c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005684:	2302      	movs	r3, #2
 8005686:	e03d      	b.n	8005704 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e042      	b.n	80057d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d106      	bne.n	8005764 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7fd f8ce 	bl	8002900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2224      	movs	r2, #36	@ 0x24
 8005768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800577a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fdd3 	bl	8006328 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695a      	ldr	r2, [r3, #20]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	@ 0x28
 80057dc:	af02      	add	r7, sp, #8
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	4613      	mov	r3, r2
 80057e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	d175      	bne.n	80058e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <HAL_UART_Transmit+0x2c>
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e06e      	b.n	80058e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2221      	movs	r2, #33	@ 0x21
 8005812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005816:	f7fd fad9 	bl	8002dcc <HAL_GetTick>
 800581a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	88fa      	ldrh	r2, [r7, #6]
 8005820:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	88fa      	ldrh	r2, [r7, #6]
 8005826:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005830:	d108      	bne.n	8005844 <HAL_UART_Transmit+0x6c>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d104      	bne.n	8005844 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800583a:	2300      	movs	r3, #0
 800583c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	e003      	b.n	800584c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005848:	2300      	movs	r3, #0
 800584a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800584c:	e02e      	b.n	80058ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2200      	movs	r2, #0
 8005856:	2180      	movs	r1, #128	@ 0x80
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 fb37 	bl	8005ecc <UART_WaitOnFlagUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e03a      	b.n	80058e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10b      	bne.n	800588e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005884:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	3302      	adds	r3, #2
 800588a:	61bb      	str	r3, [r7, #24]
 800588c:	e007      	b.n	800589e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	781a      	ldrb	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	3301      	adds	r3, #1
 800589c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1cb      	bne.n	800584e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2200      	movs	r2, #0
 80058be:	2140      	movs	r1, #64	@ 0x40
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fb03 	bl	8005ecc <UART_WaitOnFlagUntilTimeout>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e006      	b.n	80058e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	e000      	b.n	80058e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80058e4:	2302      	movs	r3, #2
  }
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3720      	adds	r7, #32
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	4613      	mov	r3, r2
 80058fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b20      	cmp	r3, #32
 8005906:	d112      	bne.n	800592e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <HAL_UART_Receive_IT+0x26>
 800590e:	88fb      	ldrh	r3, [r7, #6]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e00b      	b.n	8005930 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	461a      	mov	r2, r3
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 fb2a 	bl	8005f7e <UART_Start_Receive_IT>
 800592a:	4603      	mov	r3, r0
 800592c:	e000      	b.n	8005930 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800592e:	2302      	movs	r3, #2
  }
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b0ba      	sub	sp, #232	@ 0xe8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800595e:	2300      	movs	r3, #0
 8005960:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005964:	2300      	movs	r3, #0
 8005966:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800596a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005976:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10f      	bne.n	800599e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800597e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b00      	cmp	r3, #0
 8005988:	d009      	beq.n	800599e <HAL_UART_IRQHandler+0x66>
 800598a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fc07 	bl	80061aa <UART_Receive_IT>
      return;
 800599c:	e273      	b.n	8005e86 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800599e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 80de 	beq.w	8005b64 <HAL_UART_IRQHandler+0x22c>
 80059a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d106      	bne.n	80059c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 80d1 	beq.w	8005b64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00b      	beq.n	80059e6 <HAL_UART_IRQHandler+0xae>
 80059ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d005      	beq.n	80059e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059de:	f043 0201 	orr.w	r2, r3, #1
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00b      	beq.n	8005a0a <HAL_UART_IRQHandler+0xd2>
 80059f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a02:	f043 0202 	orr.w	r2, r3, #2
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00b      	beq.n	8005a2e <HAL_UART_IRQHandler+0xf6>
 8005a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a26:	f043 0204 	orr.w	r2, r3, #4
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d011      	beq.n	8005a5e <HAL_UART_IRQHandler+0x126>
 8005a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d105      	bne.n	8005a52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d005      	beq.n	8005a5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a56:	f043 0208 	orr.w	r2, r3, #8
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 820a 	beq.w	8005e7c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d008      	beq.n	8005a86 <HAL_UART_IRQHandler+0x14e>
 8005a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a78:	f003 0320 	and.w	r3, r3, #32
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fb92 	bl	80061aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a90:	2b40      	cmp	r3, #64	@ 0x40
 8005a92:	bf0c      	ite	eq
 8005a94:	2301      	moveq	r3, #1
 8005a96:	2300      	movne	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d103      	bne.n	8005ab2 <HAL_UART_IRQHandler+0x17a>
 8005aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d04f      	beq.n	8005b52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fa9d 	bl	8005ff2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac2:	2b40      	cmp	r3, #64	@ 0x40
 8005ac4:	d141      	bne.n	8005b4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3314      	adds	r3, #20
 8005acc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ae0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3314      	adds	r3, #20
 8005aee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005af2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005af6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005afe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b02:	e841 2300 	strex	r3, r2, [r1]
 8005b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1d9      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d013      	beq.n	8005b42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b1e:	4a8a      	ldr	r2, [pc, #552]	@ (8005d48 <HAL_UART_IRQHandler+0x410>)
 8005b20:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fd ff6d 	bl	8003a06 <HAL_DMA_Abort_IT>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d016      	beq.n	8005b60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b40:	e00e      	b.n	8005b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f9ac 	bl	8005ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b48:	e00a      	b.n	8005b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f9a8 	bl	8005ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b50:	e006      	b.n	8005b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f9a4 	bl	8005ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005b5e:	e18d      	b.n	8005e7c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b60:	bf00      	nop
    return;
 8005b62:	e18b      	b.n	8005e7c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	f040 8167 	bne.w	8005e3c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 8160 	beq.w	8005e3c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b80:	f003 0310 	and.w	r3, r3, #16
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 8159 	beq.w	8005e3c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60bb      	str	r3, [r7, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	60bb      	str	r3, [r7, #8]
 8005b9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005baa:	2b40      	cmp	r3, #64	@ 0x40
 8005bac:	f040 80ce 	bne.w	8005d4c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 80a9 	beq.w	8005d18 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	f080 80a2 	bcs.w	8005d18 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bda:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005be6:	f000 8088 	beq.w	8005cfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	330c      	adds	r3, #12
 8005bf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	330c      	adds	r3, #12
 8005c12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005c16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1d9      	bne.n	8005bea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3314      	adds	r3, #20
 8005c3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c48:	f023 0301 	bic.w	r3, r3, #1
 8005c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3314      	adds	r3, #20
 8005c56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e1      	bne.n	8005c36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3314      	adds	r3, #20
 8005c78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3314      	adds	r3, #20
 8005c92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ca4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e3      	bne.n	8005c72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	330c      	adds	r3, #12
 8005cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cca:	f023 0310 	bic.w	r3, r3, #16
 8005cce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	330c      	adds	r3, #12
 8005cd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005cdc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005cde:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ce2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ce4:	e841 2300 	strex	r3, r2, [r1]
 8005ce8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005cea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e3      	bne.n	8005cb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fd fe16 	bl	8003926 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	4619      	mov	r1, r3
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f8cf 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005d16:	e0b3      	b.n	8005e80 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d20:	429a      	cmp	r2, r3
 8005d22:	f040 80ad 	bne.w	8005e80 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d30:	f040 80a6 	bne.w	8005e80 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d3e:	4619      	mov	r1, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f8b7 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
      return;
 8005d46:	e09b      	b.n	8005e80 <HAL_UART_IRQHandler+0x548>
 8005d48:	080060b9 	.word	0x080060b9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 808e 	beq.w	8005e84 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 8089 	beq.w	8005e84 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	330c      	adds	r3, #12
 8005d78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	330c      	adds	r3, #12
 8005d92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005d96:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e3      	bne.n	8005d72 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3314      	adds	r3, #20
 8005db0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	623b      	str	r3, [r7, #32]
   return(result);
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	f023 0301 	bic.w	r3, r3, #1
 8005dc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3314      	adds	r3, #20
 8005dca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005dce:	633a      	str	r2, [r7, #48]	@ 0x30
 8005dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e3      	bne.n	8005daa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0310 	bic.w	r3, r3, #16
 8005e06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	330c      	adds	r3, #12
 8005e10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005e14:	61fa      	str	r2, [r7, #28]
 8005e16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	69b9      	ldr	r1, [r7, #24]
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	617b      	str	r3, [r7, #20]
   return(result);
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e3      	bne.n	8005df0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e32:	4619      	mov	r1, r3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f83d 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e3a:	e023      	b.n	8005e84 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d009      	beq.n	8005e5c <HAL_UART_IRQHandler+0x524>
 8005e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f940 	bl	80060da <UART_Transmit_IT>
    return;
 8005e5a:	e014      	b.n	8005e86 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00e      	beq.n	8005e86 <HAL_UART_IRQHandler+0x54e>
 8005e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d008      	beq.n	8005e86 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f980 	bl	800617a <UART_EndTransmit_IT>
    return;
 8005e7a:	e004      	b.n	8005e86 <HAL_UART_IRQHandler+0x54e>
    return;
 8005e7c:	bf00      	nop
 8005e7e:	e002      	b.n	8005e86 <HAL_UART_IRQHandler+0x54e>
      return;
 8005e80:	bf00      	nop
 8005e82:	e000      	b.n	8005e86 <HAL_UART_IRQHandler+0x54e>
      return;
 8005e84:	bf00      	nop
  }
}
 8005e86:	37e8      	adds	r7, #232	@ 0xe8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005edc:	e03b      	b.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d037      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee6:	f7fc ff71 	bl	8002dcc <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	6a3a      	ldr	r2, [r7, #32]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d302      	bcc.n	8005efc <UART_WaitOnFlagUntilTimeout+0x30>
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e03a      	b.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d023      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b80      	cmp	r3, #128	@ 0x80
 8005f12:	d020      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b40      	cmp	r3, #64	@ 0x40
 8005f18:	d01d      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d116      	bne.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	617b      	str	r3, [r7, #20]
 8005f3c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 f857 	bl	8005ff2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2208      	movs	r2, #8
 8005f48:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e00f      	b.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	bf0c      	ite	eq
 8005f66:	2301      	moveq	r3, #1
 8005f68:	2300      	movne	r3, #0
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d0b4      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b085      	sub	sp, #20
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	88fa      	ldrh	r2, [r7, #6]
 8005f96:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	88fa      	ldrh	r2, [r7, #6]
 8005f9c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2222      	movs	r2, #34	@ 0x22
 8005fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d007      	beq.n	8005fc4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fc2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	695a      	ldr	r2, [r3, #20]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0201 	orr.w	r2, r2, #1
 8005fd2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0220 	orr.w	r2, r2, #32
 8005fe2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b095      	sub	sp, #84	@ 0x54
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	330c      	adds	r3, #12
 8006000:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800600a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006010:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	330c      	adds	r3, #12
 8006018:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800601a:	643a      	str	r2, [r7, #64]	@ 0x40
 800601c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006020:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e5      	bne.n	8005ffa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3314      	adds	r3, #20
 8006034:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	61fb      	str	r3, [r7, #28]
   return(result);
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	f023 0301 	bic.w	r3, r3, #1
 8006044:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3314      	adds	r3, #20
 800604c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800604e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006050:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e5      	bne.n	800602e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006066:	2b01      	cmp	r3, #1
 8006068:	d119      	bne.n	800609e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	330c      	adds	r3, #12
 8006070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	60bb      	str	r3, [r7, #8]
   return(result);
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f023 0310 	bic.w	r3, r3, #16
 8006080:	647b      	str	r3, [r7, #68]	@ 0x44
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	330c      	adds	r3, #12
 8006088:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800608a:	61ba      	str	r2, [r7, #24]
 800608c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6979      	ldr	r1, [r7, #20]
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	613b      	str	r3, [r7, #16]
   return(result);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e5      	bne.n	800606a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80060ac:	bf00      	nop
 80060ae:	3754      	adds	r7, #84	@ 0x54
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f7ff fee7 	bl	8005ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060d2:	bf00      	nop
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060da:	b480      	push	{r7}
 80060dc:	b085      	sub	sp, #20
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b21      	cmp	r3, #33	@ 0x21
 80060ec:	d13e      	bne.n	800616c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060f6:	d114      	bne.n	8006122 <UART_Transmit_IT+0x48>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d110      	bne.n	8006122 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006114:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	1c9a      	adds	r2, r3, #2
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	621a      	str	r2, [r3, #32]
 8006120:	e008      	b.n	8006134 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	1c59      	adds	r1, r3, #1
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6211      	str	r1, [r2, #32]
 800612c:	781a      	ldrb	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29b      	uxth	r3, r3
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	4619      	mov	r1, r3
 8006142:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10f      	bne.n	8006168 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006156:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006166:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006168:	2300      	movs	r3, #0
 800616a:	e000      	b.n	800616e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800616c:	2302      	movs	r3, #2
  }
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b082      	sub	sp, #8
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006190:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff fe76 	bl	8005e8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b08c      	sub	sp, #48	@ 0x30
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b22      	cmp	r3, #34	@ 0x22
 80061c4:	f040 80aa 	bne.w	800631c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061d0:	d115      	bne.n	80061fe <UART_Receive_IT+0x54>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d111      	bne.n	80061fe <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061de:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f6:	1c9a      	adds	r2, r3, #2
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80061fc:	e024      	b.n	8006248 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006202:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800620c:	d007      	beq.n	800621e <UART_Receive_IT+0x74>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10a      	bne.n	800622c <UART_Receive_IT+0x82>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	b2da      	uxtb	r2, r3
 8006226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	e008      	b.n	800623e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	b2db      	uxtb	r3, r3
 8006234:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006238:	b2da      	uxtb	r2, r3
 800623a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800624c:	b29b      	uxth	r3, r3
 800624e:	3b01      	subs	r3, #1
 8006250:	b29b      	uxth	r3, r3
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	4619      	mov	r1, r3
 8006256:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006258:	2b00      	cmp	r3, #0
 800625a:	d15d      	bne.n	8006318 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0220 	bic.w	r2, r2, #32
 800626a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800627a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0201 	bic.w	r2, r2, #1
 800628a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2220      	movs	r2, #32
 8006290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d135      	bne.n	800630e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	330c      	adds	r3, #12
 80062ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	613b      	str	r3, [r7, #16]
   return(result);
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f023 0310 	bic.w	r3, r3, #16
 80062be:	627b      	str	r3, [r7, #36]	@ 0x24
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	330c      	adds	r3, #12
 80062c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062c8:	623a      	str	r2, [r7, #32]
 80062ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062cc:	69f9      	ldr	r1, [r7, #28]
 80062ce:	6a3a      	ldr	r2, [r7, #32]
 80062d0:	e841 2300 	strex	r3, r2, [r1]
 80062d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1e5      	bne.n	80062a8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0310 	and.w	r3, r3, #16
 80062e6:	2b10      	cmp	r3, #16
 80062e8:	d10a      	bne.n	8006300 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062ea:	2300      	movs	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7ff fdd4 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
 800630c:	e002      	b.n	8006314 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fb f984 	bl	800161c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	e002      	b.n	800631e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	e000      	b.n	800631e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800631c:	2302      	movs	r3, #2
  }
}
 800631e:	4618      	mov	r0, r3
 8006320:	3730      	adds	r7, #48	@ 0x30
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800632c:	b0c0      	sub	sp, #256	@ 0x100
 800632e:	af00      	add	r7, sp, #0
 8006330:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006344:	68d9      	ldr	r1, [r3, #12]
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	ea40 0301 	orr.w	r3, r0, r1
 8006350:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	431a      	orrs	r2, r3
 8006360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	431a      	orrs	r2, r3
 8006368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	4313      	orrs	r3, r2
 8006370:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006380:	f021 010c 	bic.w	r1, r1, #12
 8006384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800638e:	430b      	orrs	r3, r1
 8006390:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800639e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a2:	6999      	ldr	r1, [r3, #24]
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	ea40 0301 	orr.w	r3, r0, r1
 80063ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	4b8f      	ldr	r3, [pc, #572]	@ (80065f4 <UART_SetConfig+0x2cc>)
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d005      	beq.n	80063c8 <UART_SetConfig+0xa0>
 80063bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	4b8d      	ldr	r3, [pc, #564]	@ (80065f8 <UART_SetConfig+0x2d0>)
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d104      	bne.n	80063d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063c8:	f7fe f99e 	bl	8004708 <HAL_RCC_GetPCLK2Freq>
 80063cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80063d0:	e003      	b.n	80063da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063d2:	f7fe f985 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 80063d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063e4:	f040 810c 	bne.w	8006600 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063ec:	2200      	movs	r2, #0
 80063ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80063f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80063fa:	4622      	mov	r2, r4
 80063fc:	462b      	mov	r3, r5
 80063fe:	1891      	adds	r1, r2, r2
 8006400:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006402:	415b      	adcs	r3, r3
 8006404:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006406:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800640a:	4621      	mov	r1, r4
 800640c:	eb12 0801 	adds.w	r8, r2, r1
 8006410:	4629      	mov	r1, r5
 8006412:	eb43 0901 	adc.w	r9, r3, r1
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	f04f 0300 	mov.w	r3, #0
 800641e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800642a:	4690      	mov	r8, r2
 800642c:	4699      	mov	r9, r3
 800642e:	4623      	mov	r3, r4
 8006430:	eb18 0303 	adds.w	r3, r8, r3
 8006434:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006438:	462b      	mov	r3, r5
 800643a:	eb49 0303 	adc.w	r3, r9, r3
 800643e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800644e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006452:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006456:	460b      	mov	r3, r1
 8006458:	18db      	adds	r3, r3, r3
 800645a:	653b      	str	r3, [r7, #80]	@ 0x50
 800645c:	4613      	mov	r3, r2
 800645e:	eb42 0303 	adc.w	r3, r2, r3
 8006462:	657b      	str	r3, [r7, #84]	@ 0x54
 8006464:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006468:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800646c:	f7fa fc04 	bl	8000c78 <__aeabi_uldivmod>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4b61      	ldr	r3, [pc, #388]	@ (80065fc <UART_SetConfig+0x2d4>)
 8006476:	fba3 2302 	umull	r2, r3, r3, r2
 800647a:	095b      	lsrs	r3, r3, #5
 800647c:	011c      	lsls	r4, r3, #4
 800647e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006482:	2200      	movs	r2, #0
 8006484:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006488:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800648c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006490:	4642      	mov	r2, r8
 8006492:	464b      	mov	r3, r9
 8006494:	1891      	adds	r1, r2, r2
 8006496:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006498:	415b      	adcs	r3, r3
 800649a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800649c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80064a0:	4641      	mov	r1, r8
 80064a2:	eb12 0a01 	adds.w	sl, r2, r1
 80064a6:	4649      	mov	r1, r9
 80064a8:	eb43 0b01 	adc.w	fp, r3, r1
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064c0:	4692      	mov	sl, r2
 80064c2:	469b      	mov	fp, r3
 80064c4:	4643      	mov	r3, r8
 80064c6:	eb1a 0303 	adds.w	r3, sl, r3
 80064ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064ce:	464b      	mov	r3, r9
 80064d0:	eb4b 0303 	adc.w	r3, fp, r3
 80064d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80064e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80064ec:	460b      	mov	r3, r1
 80064ee:	18db      	adds	r3, r3, r3
 80064f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80064f2:	4613      	mov	r3, r2
 80064f4:	eb42 0303 	adc.w	r3, r2, r3
 80064f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80064fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006502:	f7fa fbb9 	bl	8000c78 <__aeabi_uldivmod>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4611      	mov	r1, r2
 800650c:	4b3b      	ldr	r3, [pc, #236]	@ (80065fc <UART_SetConfig+0x2d4>)
 800650e:	fba3 2301 	umull	r2, r3, r3, r1
 8006512:	095b      	lsrs	r3, r3, #5
 8006514:	2264      	movs	r2, #100	@ 0x64
 8006516:	fb02 f303 	mul.w	r3, r2, r3
 800651a:	1acb      	subs	r3, r1, r3
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006522:	4b36      	ldr	r3, [pc, #216]	@ (80065fc <UART_SetConfig+0x2d4>)
 8006524:	fba3 2302 	umull	r2, r3, r3, r2
 8006528:	095b      	lsrs	r3, r3, #5
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006530:	441c      	add	r4, r3
 8006532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006536:	2200      	movs	r2, #0
 8006538:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800653c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006540:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006544:	4642      	mov	r2, r8
 8006546:	464b      	mov	r3, r9
 8006548:	1891      	adds	r1, r2, r2
 800654a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800654c:	415b      	adcs	r3, r3
 800654e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006550:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006554:	4641      	mov	r1, r8
 8006556:	1851      	adds	r1, r2, r1
 8006558:	6339      	str	r1, [r7, #48]	@ 0x30
 800655a:	4649      	mov	r1, r9
 800655c:	414b      	adcs	r3, r1
 800655e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006560:	f04f 0200 	mov.w	r2, #0
 8006564:	f04f 0300 	mov.w	r3, #0
 8006568:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800656c:	4659      	mov	r1, fp
 800656e:	00cb      	lsls	r3, r1, #3
 8006570:	4651      	mov	r1, sl
 8006572:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006576:	4651      	mov	r1, sl
 8006578:	00ca      	lsls	r2, r1, #3
 800657a:	4610      	mov	r0, r2
 800657c:	4619      	mov	r1, r3
 800657e:	4603      	mov	r3, r0
 8006580:	4642      	mov	r2, r8
 8006582:	189b      	adds	r3, r3, r2
 8006584:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006588:	464b      	mov	r3, r9
 800658a:	460a      	mov	r2, r1
 800658c:	eb42 0303 	adc.w	r3, r2, r3
 8006590:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80065a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065a8:	460b      	mov	r3, r1
 80065aa:	18db      	adds	r3, r3, r3
 80065ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065ae:	4613      	mov	r3, r2
 80065b0:	eb42 0303 	adc.w	r3, r2, r3
 80065b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80065be:	f7fa fb5b 	bl	8000c78 <__aeabi_uldivmod>
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	4b0d      	ldr	r3, [pc, #52]	@ (80065fc <UART_SetConfig+0x2d4>)
 80065c8:	fba3 1302 	umull	r1, r3, r3, r2
 80065cc:	095b      	lsrs	r3, r3, #5
 80065ce:	2164      	movs	r1, #100	@ 0x64
 80065d0:	fb01 f303 	mul.w	r3, r1, r3
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	3332      	adds	r3, #50	@ 0x32
 80065da:	4a08      	ldr	r2, [pc, #32]	@ (80065fc <UART_SetConfig+0x2d4>)
 80065dc:	fba2 2303 	umull	r2, r3, r2, r3
 80065e0:	095b      	lsrs	r3, r3, #5
 80065e2:	f003 0207 	and.w	r2, r3, #7
 80065e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4422      	add	r2, r4
 80065ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065f0:	e106      	b.n	8006800 <UART_SetConfig+0x4d8>
 80065f2:	bf00      	nop
 80065f4:	40011000 	.word	0x40011000
 80065f8:	40011400 	.word	0x40011400
 80065fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006604:	2200      	movs	r2, #0
 8006606:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800660a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800660e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006612:	4642      	mov	r2, r8
 8006614:	464b      	mov	r3, r9
 8006616:	1891      	adds	r1, r2, r2
 8006618:	6239      	str	r1, [r7, #32]
 800661a:	415b      	adcs	r3, r3
 800661c:	627b      	str	r3, [r7, #36]	@ 0x24
 800661e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006622:	4641      	mov	r1, r8
 8006624:	1854      	adds	r4, r2, r1
 8006626:	4649      	mov	r1, r9
 8006628:	eb43 0501 	adc.w	r5, r3, r1
 800662c:	f04f 0200 	mov.w	r2, #0
 8006630:	f04f 0300 	mov.w	r3, #0
 8006634:	00eb      	lsls	r3, r5, #3
 8006636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800663a:	00e2      	lsls	r2, r4, #3
 800663c:	4614      	mov	r4, r2
 800663e:	461d      	mov	r5, r3
 8006640:	4643      	mov	r3, r8
 8006642:	18e3      	adds	r3, r4, r3
 8006644:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006648:	464b      	mov	r3, r9
 800664a:	eb45 0303 	adc.w	r3, r5, r3
 800664e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800665e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	f04f 0300 	mov.w	r3, #0
 800666a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800666e:	4629      	mov	r1, r5
 8006670:	008b      	lsls	r3, r1, #2
 8006672:	4621      	mov	r1, r4
 8006674:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006678:	4621      	mov	r1, r4
 800667a:	008a      	lsls	r2, r1, #2
 800667c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006680:	f7fa fafa 	bl	8000c78 <__aeabi_uldivmod>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4b60      	ldr	r3, [pc, #384]	@ (800680c <UART_SetConfig+0x4e4>)
 800668a:	fba3 2302 	umull	r2, r3, r3, r2
 800668e:	095b      	lsrs	r3, r3, #5
 8006690:	011c      	lsls	r4, r3, #4
 8006692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006696:	2200      	movs	r2, #0
 8006698:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800669c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80066a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80066a4:	4642      	mov	r2, r8
 80066a6:	464b      	mov	r3, r9
 80066a8:	1891      	adds	r1, r2, r2
 80066aa:	61b9      	str	r1, [r7, #24]
 80066ac:	415b      	adcs	r3, r3
 80066ae:	61fb      	str	r3, [r7, #28]
 80066b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066b4:	4641      	mov	r1, r8
 80066b6:	1851      	adds	r1, r2, r1
 80066b8:	6139      	str	r1, [r7, #16]
 80066ba:	4649      	mov	r1, r9
 80066bc:	414b      	adcs	r3, r1
 80066be:	617b      	str	r3, [r7, #20]
 80066c0:	f04f 0200 	mov.w	r2, #0
 80066c4:	f04f 0300 	mov.w	r3, #0
 80066c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066cc:	4659      	mov	r1, fp
 80066ce:	00cb      	lsls	r3, r1, #3
 80066d0:	4651      	mov	r1, sl
 80066d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066d6:	4651      	mov	r1, sl
 80066d8:	00ca      	lsls	r2, r1, #3
 80066da:	4610      	mov	r0, r2
 80066dc:	4619      	mov	r1, r3
 80066de:	4603      	mov	r3, r0
 80066e0:	4642      	mov	r2, r8
 80066e2:	189b      	adds	r3, r3, r2
 80066e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066e8:	464b      	mov	r3, r9
 80066ea:	460a      	mov	r2, r1
 80066ec:	eb42 0303 	adc.w	r3, r2, r3
 80066f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800670c:	4649      	mov	r1, r9
 800670e:	008b      	lsls	r3, r1, #2
 8006710:	4641      	mov	r1, r8
 8006712:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006716:	4641      	mov	r1, r8
 8006718:	008a      	lsls	r2, r1, #2
 800671a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800671e:	f7fa faab 	bl	8000c78 <__aeabi_uldivmod>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	4611      	mov	r1, r2
 8006728:	4b38      	ldr	r3, [pc, #224]	@ (800680c <UART_SetConfig+0x4e4>)
 800672a:	fba3 2301 	umull	r2, r3, r3, r1
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	2264      	movs	r2, #100	@ 0x64
 8006732:	fb02 f303 	mul.w	r3, r2, r3
 8006736:	1acb      	subs	r3, r1, r3
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	3332      	adds	r3, #50	@ 0x32
 800673c:	4a33      	ldr	r2, [pc, #204]	@ (800680c <UART_SetConfig+0x4e4>)
 800673e:	fba2 2303 	umull	r2, r3, r2, r3
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006748:	441c      	add	r4, r3
 800674a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800674e:	2200      	movs	r2, #0
 8006750:	673b      	str	r3, [r7, #112]	@ 0x70
 8006752:	677a      	str	r2, [r7, #116]	@ 0x74
 8006754:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006758:	4642      	mov	r2, r8
 800675a:	464b      	mov	r3, r9
 800675c:	1891      	adds	r1, r2, r2
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	415b      	adcs	r3, r3
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006768:	4641      	mov	r1, r8
 800676a:	1851      	adds	r1, r2, r1
 800676c:	6039      	str	r1, [r7, #0]
 800676e:	4649      	mov	r1, r9
 8006770:	414b      	adcs	r3, r1
 8006772:	607b      	str	r3, [r7, #4]
 8006774:	f04f 0200 	mov.w	r2, #0
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006780:	4659      	mov	r1, fp
 8006782:	00cb      	lsls	r3, r1, #3
 8006784:	4651      	mov	r1, sl
 8006786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800678a:	4651      	mov	r1, sl
 800678c:	00ca      	lsls	r2, r1, #3
 800678e:	4610      	mov	r0, r2
 8006790:	4619      	mov	r1, r3
 8006792:	4603      	mov	r3, r0
 8006794:	4642      	mov	r2, r8
 8006796:	189b      	adds	r3, r3, r2
 8006798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800679a:	464b      	mov	r3, r9
 800679c:	460a      	mov	r2, r1
 800679e:	eb42 0303 	adc.w	r3, r2, r3
 80067a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80067a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80067ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80067bc:	4649      	mov	r1, r9
 80067be:	008b      	lsls	r3, r1, #2
 80067c0:	4641      	mov	r1, r8
 80067c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067c6:	4641      	mov	r1, r8
 80067c8:	008a      	lsls	r2, r1, #2
 80067ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80067ce:	f7fa fa53 	bl	8000c78 <__aeabi_uldivmod>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	4b0d      	ldr	r3, [pc, #52]	@ (800680c <UART_SetConfig+0x4e4>)
 80067d8:	fba3 1302 	umull	r1, r3, r3, r2
 80067dc:	095b      	lsrs	r3, r3, #5
 80067de:	2164      	movs	r1, #100	@ 0x64
 80067e0:	fb01 f303 	mul.w	r3, r1, r3
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	3332      	adds	r3, #50	@ 0x32
 80067ea:	4a08      	ldr	r2, [pc, #32]	@ (800680c <UART_SetConfig+0x4e4>)
 80067ec:	fba2 2303 	umull	r2, r3, r2, r3
 80067f0:	095b      	lsrs	r3, r3, #5
 80067f2:	f003 020f 	and.w	r2, r3, #15
 80067f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4422      	add	r2, r4
 80067fe:	609a      	str	r2, [r3, #8]
}
 8006800:	bf00      	nop
 8006802:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006806:	46bd      	mov	sp, r7
 8006808:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800680c:	51eb851f 	.word	0x51eb851f

08006810 <atoi>:
 8006810:	220a      	movs	r2, #10
 8006812:	2100      	movs	r1, #0
 8006814:	f000 b87a 	b.w	800690c <strtol>

08006818 <_strtol_l.isra.0>:
 8006818:	2b24      	cmp	r3, #36	@ 0x24
 800681a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800681e:	4686      	mov	lr, r0
 8006820:	4690      	mov	r8, r2
 8006822:	d801      	bhi.n	8006828 <_strtol_l.isra.0+0x10>
 8006824:	2b01      	cmp	r3, #1
 8006826:	d106      	bne.n	8006836 <_strtol_l.isra.0+0x1e>
 8006828:	f000 ffe8 	bl	80077fc <__errno>
 800682c:	2316      	movs	r3, #22
 800682e:	6003      	str	r3, [r0, #0]
 8006830:	2000      	movs	r0, #0
 8006832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006836:	4834      	ldr	r0, [pc, #208]	@ (8006908 <_strtol_l.isra.0+0xf0>)
 8006838:	460d      	mov	r5, r1
 800683a:	462a      	mov	r2, r5
 800683c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006840:	5d06      	ldrb	r6, [r0, r4]
 8006842:	f016 0608 	ands.w	r6, r6, #8
 8006846:	d1f8      	bne.n	800683a <_strtol_l.isra.0+0x22>
 8006848:	2c2d      	cmp	r4, #45	@ 0x2d
 800684a:	d110      	bne.n	800686e <_strtol_l.isra.0+0x56>
 800684c:	782c      	ldrb	r4, [r5, #0]
 800684e:	2601      	movs	r6, #1
 8006850:	1c95      	adds	r5, r2, #2
 8006852:	f033 0210 	bics.w	r2, r3, #16
 8006856:	d115      	bne.n	8006884 <_strtol_l.isra.0+0x6c>
 8006858:	2c30      	cmp	r4, #48	@ 0x30
 800685a:	d10d      	bne.n	8006878 <_strtol_l.isra.0+0x60>
 800685c:	782a      	ldrb	r2, [r5, #0]
 800685e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006862:	2a58      	cmp	r2, #88	@ 0x58
 8006864:	d108      	bne.n	8006878 <_strtol_l.isra.0+0x60>
 8006866:	786c      	ldrb	r4, [r5, #1]
 8006868:	3502      	adds	r5, #2
 800686a:	2310      	movs	r3, #16
 800686c:	e00a      	b.n	8006884 <_strtol_l.isra.0+0x6c>
 800686e:	2c2b      	cmp	r4, #43	@ 0x2b
 8006870:	bf04      	itt	eq
 8006872:	782c      	ldrbeq	r4, [r5, #0]
 8006874:	1c95      	addeq	r5, r2, #2
 8006876:	e7ec      	b.n	8006852 <_strtol_l.isra.0+0x3a>
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1f6      	bne.n	800686a <_strtol_l.isra.0+0x52>
 800687c:	2c30      	cmp	r4, #48	@ 0x30
 800687e:	bf14      	ite	ne
 8006880:	230a      	movne	r3, #10
 8006882:	2308      	moveq	r3, #8
 8006884:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006888:	f10c 3cff 	add.w	ip, ip, #4294967295
 800688c:	2200      	movs	r2, #0
 800688e:	fbbc f9f3 	udiv	r9, ip, r3
 8006892:	4610      	mov	r0, r2
 8006894:	fb03 ca19 	mls	sl, r3, r9, ip
 8006898:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800689c:	2f09      	cmp	r7, #9
 800689e:	d80f      	bhi.n	80068c0 <_strtol_l.isra.0+0xa8>
 80068a0:	463c      	mov	r4, r7
 80068a2:	42a3      	cmp	r3, r4
 80068a4:	dd1b      	ble.n	80068de <_strtol_l.isra.0+0xc6>
 80068a6:	1c57      	adds	r7, r2, #1
 80068a8:	d007      	beq.n	80068ba <_strtol_l.isra.0+0xa2>
 80068aa:	4581      	cmp	r9, r0
 80068ac:	d314      	bcc.n	80068d8 <_strtol_l.isra.0+0xc0>
 80068ae:	d101      	bne.n	80068b4 <_strtol_l.isra.0+0x9c>
 80068b0:	45a2      	cmp	sl, r4
 80068b2:	db11      	blt.n	80068d8 <_strtol_l.isra.0+0xc0>
 80068b4:	fb00 4003 	mla	r0, r0, r3, r4
 80068b8:	2201      	movs	r2, #1
 80068ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068be:	e7eb      	b.n	8006898 <_strtol_l.isra.0+0x80>
 80068c0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80068c4:	2f19      	cmp	r7, #25
 80068c6:	d801      	bhi.n	80068cc <_strtol_l.isra.0+0xb4>
 80068c8:	3c37      	subs	r4, #55	@ 0x37
 80068ca:	e7ea      	b.n	80068a2 <_strtol_l.isra.0+0x8a>
 80068cc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80068d0:	2f19      	cmp	r7, #25
 80068d2:	d804      	bhi.n	80068de <_strtol_l.isra.0+0xc6>
 80068d4:	3c57      	subs	r4, #87	@ 0x57
 80068d6:	e7e4      	b.n	80068a2 <_strtol_l.isra.0+0x8a>
 80068d8:	f04f 32ff 	mov.w	r2, #4294967295
 80068dc:	e7ed      	b.n	80068ba <_strtol_l.isra.0+0xa2>
 80068de:	1c53      	adds	r3, r2, #1
 80068e0:	d108      	bne.n	80068f4 <_strtol_l.isra.0+0xdc>
 80068e2:	2322      	movs	r3, #34	@ 0x22
 80068e4:	f8ce 3000 	str.w	r3, [lr]
 80068e8:	4660      	mov	r0, ip
 80068ea:	f1b8 0f00 	cmp.w	r8, #0
 80068ee:	d0a0      	beq.n	8006832 <_strtol_l.isra.0+0x1a>
 80068f0:	1e69      	subs	r1, r5, #1
 80068f2:	e006      	b.n	8006902 <_strtol_l.isra.0+0xea>
 80068f4:	b106      	cbz	r6, 80068f8 <_strtol_l.isra.0+0xe0>
 80068f6:	4240      	negs	r0, r0
 80068f8:	f1b8 0f00 	cmp.w	r8, #0
 80068fc:	d099      	beq.n	8006832 <_strtol_l.isra.0+0x1a>
 80068fe:	2a00      	cmp	r2, #0
 8006900:	d1f6      	bne.n	80068f0 <_strtol_l.isra.0+0xd8>
 8006902:	f8c8 1000 	str.w	r1, [r8]
 8006906:	e794      	b.n	8006832 <_strtol_l.isra.0+0x1a>
 8006908:	0800aa9d 	.word	0x0800aa9d

0800690c <strtol>:
 800690c:	4613      	mov	r3, r2
 800690e:	460a      	mov	r2, r1
 8006910:	4601      	mov	r1, r0
 8006912:	4802      	ldr	r0, [pc, #8]	@ (800691c <strtol+0x10>)
 8006914:	6800      	ldr	r0, [r0, #0]
 8006916:	f7ff bf7f 	b.w	8006818 <_strtol_l.isra.0>
 800691a:	bf00      	nop
 800691c:	2000001c 	.word	0x2000001c

08006920 <__cvt>:
 8006920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006924:	ec57 6b10 	vmov	r6, r7, d0
 8006928:	2f00      	cmp	r7, #0
 800692a:	460c      	mov	r4, r1
 800692c:	4619      	mov	r1, r3
 800692e:	463b      	mov	r3, r7
 8006930:	bfbb      	ittet	lt
 8006932:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006936:	461f      	movlt	r7, r3
 8006938:	2300      	movge	r3, #0
 800693a:	232d      	movlt	r3, #45	@ 0x2d
 800693c:	700b      	strb	r3, [r1, #0]
 800693e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006940:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006944:	4691      	mov	r9, r2
 8006946:	f023 0820 	bic.w	r8, r3, #32
 800694a:	bfbc      	itt	lt
 800694c:	4632      	movlt	r2, r6
 800694e:	4616      	movlt	r6, r2
 8006950:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006954:	d005      	beq.n	8006962 <__cvt+0x42>
 8006956:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800695a:	d100      	bne.n	800695e <__cvt+0x3e>
 800695c:	3401      	adds	r4, #1
 800695e:	2102      	movs	r1, #2
 8006960:	e000      	b.n	8006964 <__cvt+0x44>
 8006962:	2103      	movs	r1, #3
 8006964:	ab03      	add	r3, sp, #12
 8006966:	9301      	str	r3, [sp, #4]
 8006968:	ab02      	add	r3, sp, #8
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	ec47 6b10 	vmov	d0, r6, r7
 8006970:	4653      	mov	r3, sl
 8006972:	4622      	mov	r2, r4
 8006974:	f001 f82c 	bl	80079d0 <_dtoa_r>
 8006978:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800697c:	4605      	mov	r5, r0
 800697e:	d119      	bne.n	80069b4 <__cvt+0x94>
 8006980:	f019 0f01 	tst.w	r9, #1
 8006984:	d00e      	beq.n	80069a4 <__cvt+0x84>
 8006986:	eb00 0904 	add.w	r9, r0, r4
 800698a:	2200      	movs	r2, #0
 800698c:	2300      	movs	r3, #0
 800698e:	4630      	mov	r0, r6
 8006990:	4639      	mov	r1, r7
 8006992:	f7fa f8b1 	bl	8000af8 <__aeabi_dcmpeq>
 8006996:	b108      	cbz	r0, 800699c <__cvt+0x7c>
 8006998:	f8cd 900c 	str.w	r9, [sp, #12]
 800699c:	2230      	movs	r2, #48	@ 0x30
 800699e:	9b03      	ldr	r3, [sp, #12]
 80069a0:	454b      	cmp	r3, r9
 80069a2:	d31e      	bcc.n	80069e2 <__cvt+0xc2>
 80069a4:	9b03      	ldr	r3, [sp, #12]
 80069a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069a8:	1b5b      	subs	r3, r3, r5
 80069aa:	4628      	mov	r0, r5
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	b004      	add	sp, #16
 80069b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069b8:	eb00 0904 	add.w	r9, r0, r4
 80069bc:	d1e5      	bne.n	800698a <__cvt+0x6a>
 80069be:	7803      	ldrb	r3, [r0, #0]
 80069c0:	2b30      	cmp	r3, #48	@ 0x30
 80069c2:	d10a      	bne.n	80069da <__cvt+0xba>
 80069c4:	2200      	movs	r2, #0
 80069c6:	2300      	movs	r3, #0
 80069c8:	4630      	mov	r0, r6
 80069ca:	4639      	mov	r1, r7
 80069cc:	f7fa f894 	bl	8000af8 <__aeabi_dcmpeq>
 80069d0:	b918      	cbnz	r0, 80069da <__cvt+0xba>
 80069d2:	f1c4 0401 	rsb	r4, r4, #1
 80069d6:	f8ca 4000 	str.w	r4, [sl]
 80069da:	f8da 3000 	ldr.w	r3, [sl]
 80069de:	4499      	add	r9, r3
 80069e0:	e7d3      	b.n	800698a <__cvt+0x6a>
 80069e2:	1c59      	adds	r1, r3, #1
 80069e4:	9103      	str	r1, [sp, #12]
 80069e6:	701a      	strb	r2, [r3, #0]
 80069e8:	e7d9      	b.n	800699e <__cvt+0x7e>

080069ea <__exponent>:
 80069ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069ec:	2900      	cmp	r1, #0
 80069ee:	bfba      	itte	lt
 80069f0:	4249      	neglt	r1, r1
 80069f2:	232d      	movlt	r3, #45	@ 0x2d
 80069f4:	232b      	movge	r3, #43	@ 0x2b
 80069f6:	2909      	cmp	r1, #9
 80069f8:	7002      	strb	r2, [r0, #0]
 80069fa:	7043      	strb	r3, [r0, #1]
 80069fc:	dd29      	ble.n	8006a52 <__exponent+0x68>
 80069fe:	f10d 0307 	add.w	r3, sp, #7
 8006a02:	461d      	mov	r5, r3
 8006a04:	270a      	movs	r7, #10
 8006a06:	461a      	mov	r2, r3
 8006a08:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a0c:	fb07 1416 	mls	r4, r7, r6, r1
 8006a10:	3430      	adds	r4, #48	@ 0x30
 8006a12:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a16:	460c      	mov	r4, r1
 8006a18:	2c63      	cmp	r4, #99	@ 0x63
 8006a1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a1e:	4631      	mov	r1, r6
 8006a20:	dcf1      	bgt.n	8006a06 <__exponent+0x1c>
 8006a22:	3130      	adds	r1, #48	@ 0x30
 8006a24:	1e94      	subs	r4, r2, #2
 8006a26:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a2a:	1c41      	adds	r1, r0, #1
 8006a2c:	4623      	mov	r3, r4
 8006a2e:	42ab      	cmp	r3, r5
 8006a30:	d30a      	bcc.n	8006a48 <__exponent+0x5e>
 8006a32:	f10d 0309 	add.w	r3, sp, #9
 8006a36:	1a9b      	subs	r3, r3, r2
 8006a38:	42ac      	cmp	r4, r5
 8006a3a:	bf88      	it	hi
 8006a3c:	2300      	movhi	r3, #0
 8006a3e:	3302      	adds	r3, #2
 8006a40:	4403      	add	r3, r0
 8006a42:	1a18      	subs	r0, r3, r0
 8006a44:	b003      	add	sp, #12
 8006a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a48:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006a4c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006a50:	e7ed      	b.n	8006a2e <__exponent+0x44>
 8006a52:	2330      	movs	r3, #48	@ 0x30
 8006a54:	3130      	adds	r1, #48	@ 0x30
 8006a56:	7083      	strb	r3, [r0, #2]
 8006a58:	70c1      	strb	r1, [r0, #3]
 8006a5a:	1d03      	adds	r3, r0, #4
 8006a5c:	e7f1      	b.n	8006a42 <__exponent+0x58>
	...

08006a60 <_printf_float>:
 8006a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a64:	b08d      	sub	sp, #52	@ 0x34
 8006a66:	460c      	mov	r4, r1
 8006a68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006a6c:	4616      	mov	r6, r2
 8006a6e:	461f      	mov	r7, r3
 8006a70:	4605      	mov	r5, r0
 8006a72:	f000 fe79 	bl	8007768 <_localeconv_r>
 8006a76:	6803      	ldr	r3, [r0, #0]
 8006a78:	9304      	str	r3, [sp, #16]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7f9 fc10 	bl	80002a0 <strlen>
 8006a80:	2300      	movs	r3, #0
 8006a82:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a84:	f8d8 3000 	ldr.w	r3, [r8]
 8006a88:	9005      	str	r0, [sp, #20]
 8006a8a:	3307      	adds	r3, #7
 8006a8c:	f023 0307 	bic.w	r3, r3, #7
 8006a90:	f103 0208 	add.w	r2, r3, #8
 8006a94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a98:	f8d4 b000 	ldr.w	fp, [r4]
 8006a9c:	f8c8 2000 	str.w	r2, [r8]
 8006aa0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006aa4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006aa8:	9307      	str	r3, [sp, #28]
 8006aaa:	f8cd 8018 	str.w	r8, [sp, #24]
 8006aae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006ab2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ab6:	4b9c      	ldr	r3, [pc, #624]	@ (8006d28 <_printf_float+0x2c8>)
 8006ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8006abc:	f7fa f84e 	bl	8000b5c <__aeabi_dcmpun>
 8006ac0:	bb70      	cbnz	r0, 8006b20 <_printf_float+0xc0>
 8006ac2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ac6:	4b98      	ldr	r3, [pc, #608]	@ (8006d28 <_printf_float+0x2c8>)
 8006ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8006acc:	f7fa f828 	bl	8000b20 <__aeabi_dcmple>
 8006ad0:	bb30      	cbnz	r0, 8006b20 <_printf_float+0xc0>
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	4649      	mov	r1, r9
 8006ada:	f7fa f817 	bl	8000b0c <__aeabi_dcmplt>
 8006ade:	b110      	cbz	r0, 8006ae6 <_printf_float+0x86>
 8006ae0:	232d      	movs	r3, #45	@ 0x2d
 8006ae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ae6:	4a91      	ldr	r2, [pc, #580]	@ (8006d2c <_printf_float+0x2cc>)
 8006ae8:	4b91      	ldr	r3, [pc, #580]	@ (8006d30 <_printf_float+0x2d0>)
 8006aea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006aee:	bf8c      	ite	hi
 8006af0:	4690      	movhi	r8, r2
 8006af2:	4698      	movls	r8, r3
 8006af4:	2303      	movs	r3, #3
 8006af6:	6123      	str	r3, [r4, #16]
 8006af8:	f02b 0304 	bic.w	r3, fp, #4
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	f04f 0900 	mov.w	r9, #0
 8006b02:	9700      	str	r7, [sp, #0]
 8006b04:	4633      	mov	r3, r6
 8006b06:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006b08:	4621      	mov	r1, r4
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	f000 f9d2 	bl	8006eb4 <_printf_common>
 8006b10:	3001      	adds	r0, #1
 8006b12:	f040 808d 	bne.w	8006c30 <_printf_float+0x1d0>
 8006b16:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1a:	b00d      	add	sp, #52	@ 0x34
 8006b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b20:	4642      	mov	r2, r8
 8006b22:	464b      	mov	r3, r9
 8006b24:	4640      	mov	r0, r8
 8006b26:	4649      	mov	r1, r9
 8006b28:	f7fa f818 	bl	8000b5c <__aeabi_dcmpun>
 8006b2c:	b140      	cbz	r0, 8006b40 <_printf_float+0xe0>
 8006b2e:	464b      	mov	r3, r9
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bfbc      	itt	lt
 8006b34:	232d      	movlt	r3, #45	@ 0x2d
 8006b36:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006b3a:	4a7e      	ldr	r2, [pc, #504]	@ (8006d34 <_printf_float+0x2d4>)
 8006b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8006d38 <_printf_float+0x2d8>)
 8006b3e:	e7d4      	b.n	8006aea <_printf_float+0x8a>
 8006b40:	6863      	ldr	r3, [r4, #4]
 8006b42:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006b46:	9206      	str	r2, [sp, #24]
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	d13b      	bne.n	8006bc4 <_printf_float+0x164>
 8006b4c:	2306      	movs	r3, #6
 8006b4e:	6063      	str	r3, [r4, #4]
 8006b50:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006b54:	2300      	movs	r3, #0
 8006b56:	6022      	str	r2, [r4, #0]
 8006b58:	9303      	str	r3, [sp, #12]
 8006b5a:	ab0a      	add	r3, sp, #40	@ 0x28
 8006b5c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006b60:	ab09      	add	r3, sp, #36	@ 0x24
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	6861      	ldr	r1, [r4, #4]
 8006b66:	ec49 8b10 	vmov	d0, r8, r9
 8006b6a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f7ff fed6 	bl	8006920 <__cvt>
 8006b74:	9b06      	ldr	r3, [sp, #24]
 8006b76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b78:	2b47      	cmp	r3, #71	@ 0x47
 8006b7a:	4680      	mov	r8, r0
 8006b7c:	d129      	bne.n	8006bd2 <_printf_float+0x172>
 8006b7e:	1cc8      	adds	r0, r1, #3
 8006b80:	db02      	blt.n	8006b88 <_printf_float+0x128>
 8006b82:	6863      	ldr	r3, [r4, #4]
 8006b84:	4299      	cmp	r1, r3
 8006b86:	dd41      	ble.n	8006c0c <_printf_float+0x1ac>
 8006b88:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b8c:	fa5f fa8a 	uxtb.w	sl, sl
 8006b90:	3901      	subs	r1, #1
 8006b92:	4652      	mov	r2, sl
 8006b94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006b98:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b9a:	f7ff ff26 	bl	80069ea <__exponent>
 8006b9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ba0:	1813      	adds	r3, r2, r0
 8006ba2:	2a01      	cmp	r2, #1
 8006ba4:	4681      	mov	r9, r0
 8006ba6:	6123      	str	r3, [r4, #16]
 8006ba8:	dc02      	bgt.n	8006bb0 <_printf_float+0x150>
 8006baa:	6822      	ldr	r2, [r4, #0]
 8006bac:	07d2      	lsls	r2, r2, #31
 8006bae:	d501      	bpl.n	8006bb4 <_printf_float+0x154>
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	6123      	str	r3, [r4, #16]
 8006bb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0a2      	beq.n	8006b02 <_printf_float+0xa2>
 8006bbc:	232d      	movs	r3, #45	@ 0x2d
 8006bbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bc2:	e79e      	b.n	8006b02 <_printf_float+0xa2>
 8006bc4:	9a06      	ldr	r2, [sp, #24]
 8006bc6:	2a47      	cmp	r2, #71	@ 0x47
 8006bc8:	d1c2      	bne.n	8006b50 <_printf_float+0xf0>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1c0      	bne.n	8006b50 <_printf_float+0xf0>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e7bd      	b.n	8006b4e <_printf_float+0xee>
 8006bd2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bd6:	d9db      	bls.n	8006b90 <_printf_float+0x130>
 8006bd8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006bdc:	d118      	bne.n	8006c10 <_printf_float+0x1b0>
 8006bde:	2900      	cmp	r1, #0
 8006be0:	6863      	ldr	r3, [r4, #4]
 8006be2:	dd0b      	ble.n	8006bfc <_printf_float+0x19c>
 8006be4:	6121      	str	r1, [r4, #16]
 8006be6:	b913      	cbnz	r3, 8006bee <_printf_float+0x18e>
 8006be8:	6822      	ldr	r2, [r4, #0]
 8006bea:	07d0      	lsls	r0, r2, #31
 8006bec:	d502      	bpl.n	8006bf4 <_printf_float+0x194>
 8006bee:	3301      	adds	r3, #1
 8006bf0:	440b      	add	r3, r1
 8006bf2:	6123      	str	r3, [r4, #16]
 8006bf4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006bf6:	f04f 0900 	mov.w	r9, #0
 8006bfa:	e7db      	b.n	8006bb4 <_printf_float+0x154>
 8006bfc:	b913      	cbnz	r3, 8006c04 <_printf_float+0x1a4>
 8006bfe:	6822      	ldr	r2, [r4, #0]
 8006c00:	07d2      	lsls	r2, r2, #31
 8006c02:	d501      	bpl.n	8006c08 <_printf_float+0x1a8>
 8006c04:	3302      	adds	r3, #2
 8006c06:	e7f4      	b.n	8006bf2 <_printf_float+0x192>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e7f2      	b.n	8006bf2 <_printf_float+0x192>
 8006c0c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c12:	4299      	cmp	r1, r3
 8006c14:	db05      	blt.n	8006c22 <_printf_float+0x1c2>
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	6121      	str	r1, [r4, #16]
 8006c1a:	07d8      	lsls	r0, r3, #31
 8006c1c:	d5ea      	bpl.n	8006bf4 <_printf_float+0x194>
 8006c1e:	1c4b      	adds	r3, r1, #1
 8006c20:	e7e7      	b.n	8006bf2 <_printf_float+0x192>
 8006c22:	2900      	cmp	r1, #0
 8006c24:	bfd4      	ite	le
 8006c26:	f1c1 0202 	rsble	r2, r1, #2
 8006c2a:	2201      	movgt	r2, #1
 8006c2c:	4413      	add	r3, r2
 8006c2e:	e7e0      	b.n	8006bf2 <_printf_float+0x192>
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	055a      	lsls	r2, r3, #21
 8006c34:	d407      	bmi.n	8006c46 <_printf_float+0x1e6>
 8006c36:	6923      	ldr	r3, [r4, #16]
 8006c38:	4642      	mov	r2, r8
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	47b8      	blx	r7
 8006c40:	3001      	adds	r0, #1
 8006c42:	d12b      	bne.n	8006c9c <_printf_float+0x23c>
 8006c44:	e767      	b.n	8006b16 <_printf_float+0xb6>
 8006c46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c4a:	f240 80dd 	bls.w	8006e08 <_printf_float+0x3a8>
 8006c4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c52:	2200      	movs	r2, #0
 8006c54:	2300      	movs	r3, #0
 8006c56:	f7f9 ff4f 	bl	8000af8 <__aeabi_dcmpeq>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	d033      	beq.n	8006cc6 <_printf_float+0x266>
 8006c5e:	4a37      	ldr	r2, [pc, #220]	@ (8006d3c <_printf_float+0x2dc>)
 8006c60:	2301      	movs	r3, #1
 8006c62:	4631      	mov	r1, r6
 8006c64:	4628      	mov	r0, r5
 8006c66:	47b8      	blx	r7
 8006c68:	3001      	adds	r0, #1
 8006c6a:	f43f af54 	beq.w	8006b16 <_printf_float+0xb6>
 8006c6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006c72:	4543      	cmp	r3, r8
 8006c74:	db02      	blt.n	8006c7c <_printf_float+0x21c>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	07d8      	lsls	r0, r3, #31
 8006c7a:	d50f      	bpl.n	8006c9c <_printf_float+0x23c>
 8006c7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c80:	4631      	mov	r1, r6
 8006c82:	4628      	mov	r0, r5
 8006c84:	47b8      	blx	r7
 8006c86:	3001      	adds	r0, #1
 8006c88:	f43f af45 	beq.w	8006b16 <_printf_float+0xb6>
 8006c8c:	f04f 0900 	mov.w	r9, #0
 8006c90:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c94:	f104 0a1a 	add.w	sl, r4, #26
 8006c98:	45c8      	cmp	r8, r9
 8006c9a:	dc09      	bgt.n	8006cb0 <_printf_float+0x250>
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	079b      	lsls	r3, r3, #30
 8006ca0:	f100 8103 	bmi.w	8006eaa <_printf_float+0x44a>
 8006ca4:	68e0      	ldr	r0, [r4, #12]
 8006ca6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ca8:	4298      	cmp	r0, r3
 8006caa:	bfb8      	it	lt
 8006cac:	4618      	movlt	r0, r3
 8006cae:	e734      	b.n	8006b1a <_printf_float+0xba>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	4652      	mov	r2, sl
 8006cb4:	4631      	mov	r1, r6
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	47b8      	blx	r7
 8006cba:	3001      	adds	r0, #1
 8006cbc:	f43f af2b 	beq.w	8006b16 <_printf_float+0xb6>
 8006cc0:	f109 0901 	add.w	r9, r9, #1
 8006cc4:	e7e8      	b.n	8006c98 <_printf_float+0x238>
 8006cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	dc39      	bgt.n	8006d40 <_printf_float+0x2e0>
 8006ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8006d3c <_printf_float+0x2dc>)
 8006cce:	2301      	movs	r3, #1
 8006cd0:	4631      	mov	r1, r6
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	47b8      	blx	r7
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	f43f af1d 	beq.w	8006b16 <_printf_float+0xb6>
 8006cdc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006ce0:	ea59 0303 	orrs.w	r3, r9, r3
 8006ce4:	d102      	bne.n	8006cec <_printf_float+0x28c>
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	07d9      	lsls	r1, r3, #31
 8006cea:	d5d7      	bpl.n	8006c9c <_printf_float+0x23c>
 8006cec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cf0:	4631      	mov	r1, r6
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	47b8      	blx	r7
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	f43f af0d 	beq.w	8006b16 <_printf_float+0xb6>
 8006cfc:	f04f 0a00 	mov.w	sl, #0
 8006d00:	f104 0b1a 	add.w	fp, r4, #26
 8006d04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d06:	425b      	negs	r3, r3
 8006d08:	4553      	cmp	r3, sl
 8006d0a:	dc01      	bgt.n	8006d10 <_printf_float+0x2b0>
 8006d0c:	464b      	mov	r3, r9
 8006d0e:	e793      	b.n	8006c38 <_printf_float+0x1d8>
 8006d10:	2301      	movs	r3, #1
 8006d12:	465a      	mov	r2, fp
 8006d14:	4631      	mov	r1, r6
 8006d16:	4628      	mov	r0, r5
 8006d18:	47b8      	blx	r7
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	f43f aefb 	beq.w	8006b16 <_printf_float+0xb6>
 8006d20:	f10a 0a01 	add.w	sl, sl, #1
 8006d24:	e7ee      	b.n	8006d04 <_printf_float+0x2a4>
 8006d26:	bf00      	nop
 8006d28:	7fefffff 	.word	0x7fefffff
 8006d2c:	0800aba1 	.word	0x0800aba1
 8006d30:	0800ab9d 	.word	0x0800ab9d
 8006d34:	0800aba9 	.word	0x0800aba9
 8006d38:	0800aba5 	.word	0x0800aba5
 8006d3c:	0800abad 	.word	0x0800abad
 8006d40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d42:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d46:	4553      	cmp	r3, sl
 8006d48:	bfa8      	it	ge
 8006d4a:	4653      	movge	r3, sl
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	4699      	mov	r9, r3
 8006d50:	dc36      	bgt.n	8006dc0 <_printf_float+0x360>
 8006d52:	f04f 0b00 	mov.w	fp, #0
 8006d56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d5a:	f104 021a 	add.w	r2, r4, #26
 8006d5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d60:	9306      	str	r3, [sp, #24]
 8006d62:	eba3 0309 	sub.w	r3, r3, r9
 8006d66:	455b      	cmp	r3, fp
 8006d68:	dc31      	bgt.n	8006dce <_printf_float+0x36e>
 8006d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d6c:	459a      	cmp	sl, r3
 8006d6e:	dc3a      	bgt.n	8006de6 <_printf_float+0x386>
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	07da      	lsls	r2, r3, #31
 8006d74:	d437      	bmi.n	8006de6 <_printf_float+0x386>
 8006d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d78:	ebaa 0903 	sub.w	r9, sl, r3
 8006d7c:	9b06      	ldr	r3, [sp, #24]
 8006d7e:	ebaa 0303 	sub.w	r3, sl, r3
 8006d82:	4599      	cmp	r9, r3
 8006d84:	bfa8      	it	ge
 8006d86:	4699      	movge	r9, r3
 8006d88:	f1b9 0f00 	cmp.w	r9, #0
 8006d8c:	dc33      	bgt.n	8006df6 <_printf_float+0x396>
 8006d8e:	f04f 0800 	mov.w	r8, #0
 8006d92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d96:	f104 0b1a 	add.w	fp, r4, #26
 8006d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d9c:	ebaa 0303 	sub.w	r3, sl, r3
 8006da0:	eba3 0309 	sub.w	r3, r3, r9
 8006da4:	4543      	cmp	r3, r8
 8006da6:	f77f af79 	ble.w	8006c9c <_printf_float+0x23c>
 8006daa:	2301      	movs	r3, #1
 8006dac:	465a      	mov	r2, fp
 8006dae:	4631      	mov	r1, r6
 8006db0:	4628      	mov	r0, r5
 8006db2:	47b8      	blx	r7
 8006db4:	3001      	adds	r0, #1
 8006db6:	f43f aeae 	beq.w	8006b16 <_printf_float+0xb6>
 8006dba:	f108 0801 	add.w	r8, r8, #1
 8006dbe:	e7ec      	b.n	8006d9a <_printf_float+0x33a>
 8006dc0:	4642      	mov	r2, r8
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	47b8      	blx	r7
 8006dc8:	3001      	adds	r0, #1
 8006dca:	d1c2      	bne.n	8006d52 <_printf_float+0x2f2>
 8006dcc:	e6a3      	b.n	8006b16 <_printf_float+0xb6>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	4631      	mov	r1, r6
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	9206      	str	r2, [sp, #24]
 8006dd6:	47b8      	blx	r7
 8006dd8:	3001      	adds	r0, #1
 8006dda:	f43f ae9c 	beq.w	8006b16 <_printf_float+0xb6>
 8006dde:	9a06      	ldr	r2, [sp, #24]
 8006de0:	f10b 0b01 	add.w	fp, fp, #1
 8006de4:	e7bb      	b.n	8006d5e <_printf_float+0x2fe>
 8006de6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dea:	4631      	mov	r1, r6
 8006dec:	4628      	mov	r0, r5
 8006dee:	47b8      	blx	r7
 8006df0:	3001      	adds	r0, #1
 8006df2:	d1c0      	bne.n	8006d76 <_printf_float+0x316>
 8006df4:	e68f      	b.n	8006b16 <_printf_float+0xb6>
 8006df6:	9a06      	ldr	r2, [sp, #24]
 8006df8:	464b      	mov	r3, r9
 8006dfa:	4442      	add	r2, r8
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4628      	mov	r0, r5
 8006e00:	47b8      	blx	r7
 8006e02:	3001      	adds	r0, #1
 8006e04:	d1c3      	bne.n	8006d8e <_printf_float+0x32e>
 8006e06:	e686      	b.n	8006b16 <_printf_float+0xb6>
 8006e08:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e0c:	f1ba 0f01 	cmp.w	sl, #1
 8006e10:	dc01      	bgt.n	8006e16 <_printf_float+0x3b6>
 8006e12:	07db      	lsls	r3, r3, #31
 8006e14:	d536      	bpl.n	8006e84 <_printf_float+0x424>
 8006e16:	2301      	movs	r3, #1
 8006e18:	4642      	mov	r2, r8
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	47b8      	blx	r7
 8006e20:	3001      	adds	r0, #1
 8006e22:	f43f ae78 	beq.w	8006b16 <_printf_float+0xb6>
 8006e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	47b8      	blx	r7
 8006e30:	3001      	adds	r0, #1
 8006e32:	f43f ae70 	beq.w	8006b16 <_printf_float+0xb6>
 8006e36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e42:	f7f9 fe59 	bl	8000af8 <__aeabi_dcmpeq>
 8006e46:	b9c0      	cbnz	r0, 8006e7a <_printf_float+0x41a>
 8006e48:	4653      	mov	r3, sl
 8006e4a:	f108 0201 	add.w	r2, r8, #1
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	d10c      	bne.n	8006e72 <_printf_float+0x412>
 8006e58:	e65d      	b.n	8006b16 <_printf_float+0xb6>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	465a      	mov	r2, fp
 8006e5e:	4631      	mov	r1, r6
 8006e60:	4628      	mov	r0, r5
 8006e62:	47b8      	blx	r7
 8006e64:	3001      	adds	r0, #1
 8006e66:	f43f ae56 	beq.w	8006b16 <_printf_float+0xb6>
 8006e6a:	f108 0801 	add.w	r8, r8, #1
 8006e6e:	45d0      	cmp	r8, sl
 8006e70:	dbf3      	blt.n	8006e5a <_printf_float+0x3fa>
 8006e72:	464b      	mov	r3, r9
 8006e74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006e78:	e6df      	b.n	8006c3a <_printf_float+0x1da>
 8006e7a:	f04f 0800 	mov.w	r8, #0
 8006e7e:	f104 0b1a 	add.w	fp, r4, #26
 8006e82:	e7f4      	b.n	8006e6e <_printf_float+0x40e>
 8006e84:	2301      	movs	r3, #1
 8006e86:	4642      	mov	r2, r8
 8006e88:	e7e1      	b.n	8006e4e <_printf_float+0x3ee>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	464a      	mov	r2, r9
 8006e8e:	4631      	mov	r1, r6
 8006e90:	4628      	mov	r0, r5
 8006e92:	47b8      	blx	r7
 8006e94:	3001      	adds	r0, #1
 8006e96:	f43f ae3e 	beq.w	8006b16 <_printf_float+0xb6>
 8006e9a:	f108 0801 	add.w	r8, r8, #1
 8006e9e:	68e3      	ldr	r3, [r4, #12]
 8006ea0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ea2:	1a5b      	subs	r3, r3, r1
 8006ea4:	4543      	cmp	r3, r8
 8006ea6:	dcf0      	bgt.n	8006e8a <_printf_float+0x42a>
 8006ea8:	e6fc      	b.n	8006ca4 <_printf_float+0x244>
 8006eaa:	f04f 0800 	mov.w	r8, #0
 8006eae:	f104 0919 	add.w	r9, r4, #25
 8006eb2:	e7f4      	b.n	8006e9e <_printf_float+0x43e>

08006eb4 <_printf_common>:
 8006eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb8:	4616      	mov	r6, r2
 8006eba:	4698      	mov	r8, r3
 8006ebc:	688a      	ldr	r2, [r1, #8]
 8006ebe:	690b      	ldr	r3, [r1, #16]
 8006ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	bfb8      	it	lt
 8006ec8:	4613      	movlt	r3, r2
 8006eca:	6033      	str	r3, [r6, #0]
 8006ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ed0:	4607      	mov	r7, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	b10a      	cbz	r2, 8006eda <_printf_common+0x26>
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	6033      	str	r3, [r6, #0]
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	0699      	lsls	r1, r3, #26
 8006ede:	bf42      	ittt	mi
 8006ee0:	6833      	ldrmi	r3, [r6, #0]
 8006ee2:	3302      	addmi	r3, #2
 8006ee4:	6033      	strmi	r3, [r6, #0]
 8006ee6:	6825      	ldr	r5, [r4, #0]
 8006ee8:	f015 0506 	ands.w	r5, r5, #6
 8006eec:	d106      	bne.n	8006efc <_printf_common+0x48>
 8006eee:	f104 0a19 	add.w	sl, r4, #25
 8006ef2:	68e3      	ldr	r3, [r4, #12]
 8006ef4:	6832      	ldr	r2, [r6, #0]
 8006ef6:	1a9b      	subs	r3, r3, r2
 8006ef8:	42ab      	cmp	r3, r5
 8006efa:	dc26      	bgt.n	8006f4a <_printf_common+0x96>
 8006efc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f00:	6822      	ldr	r2, [r4, #0]
 8006f02:	3b00      	subs	r3, #0
 8006f04:	bf18      	it	ne
 8006f06:	2301      	movne	r3, #1
 8006f08:	0692      	lsls	r2, r2, #26
 8006f0a:	d42b      	bmi.n	8006f64 <_printf_common+0xb0>
 8006f0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f10:	4641      	mov	r1, r8
 8006f12:	4638      	mov	r0, r7
 8006f14:	47c8      	blx	r9
 8006f16:	3001      	adds	r0, #1
 8006f18:	d01e      	beq.n	8006f58 <_printf_common+0xa4>
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	6922      	ldr	r2, [r4, #16]
 8006f1e:	f003 0306 	and.w	r3, r3, #6
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	bf02      	ittt	eq
 8006f26:	68e5      	ldreq	r5, [r4, #12]
 8006f28:	6833      	ldreq	r3, [r6, #0]
 8006f2a:	1aed      	subeq	r5, r5, r3
 8006f2c:	68a3      	ldr	r3, [r4, #8]
 8006f2e:	bf0c      	ite	eq
 8006f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f34:	2500      	movne	r5, #0
 8006f36:	4293      	cmp	r3, r2
 8006f38:	bfc4      	itt	gt
 8006f3a:	1a9b      	subgt	r3, r3, r2
 8006f3c:	18ed      	addgt	r5, r5, r3
 8006f3e:	2600      	movs	r6, #0
 8006f40:	341a      	adds	r4, #26
 8006f42:	42b5      	cmp	r5, r6
 8006f44:	d11a      	bne.n	8006f7c <_printf_common+0xc8>
 8006f46:	2000      	movs	r0, #0
 8006f48:	e008      	b.n	8006f5c <_printf_common+0xa8>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	4652      	mov	r2, sl
 8006f4e:	4641      	mov	r1, r8
 8006f50:	4638      	mov	r0, r7
 8006f52:	47c8      	blx	r9
 8006f54:	3001      	adds	r0, #1
 8006f56:	d103      	bne.n	8006f60 <_printf_common+0xac>
 8006f58:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f60:	3501      	adds	r5, #1
 8006f62:	e7c6      	b.n	8006ef2 <_printf_common+0x3e>
 8006f64:	18e1      	adds	r1, r4, r3
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	2030      	movs	r0, #48	@ 0x30
 8006f6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f6e:	4422      	add	r2, r4
 8006f70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f78:	3302      	adds	r3, #2
 8006f7a:	e7c7      	b.n	8006f0c <_printf_common+0x58>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	4622      	mov	r2, r4
 8006f80:	4641      	mov	r1, r8
 8006f82:	4638      	mov	r0, r7
 8006f84:	47c8      	blx	r9
 8006f86:	3001      	adds	r0, #1
 8006f88:	d0e6      	beq.n	8006f58 <_printf_common+0xa4>
 8006f8a:	3601      	adds	r6, #1
 8006f8c:	e7d9      	b.n	8006f42 <_printf_common+0x8e>
	...

08006f90 <_printf_i>:
 8006f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f94:	7e0f      	ldrb	r7, [r1, #24]
 8006f96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f98:	2f78      	cmp	r7, #120	@ 0x78
 8006f9a:	4691      	mov	r9, r2
 8006f9c:	4680      	mov	r8, r0
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	469a      	mov	sl, r3
 8006fa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fa6:	d807      	bhi.n	8006fb8 <_printf_i+0x28>
 8006fa8:	2f62      	cmp	r7, #98	@ 0x62
 8006faa:	d80a      	bhi.n	8006fc2 <_printf_i+0x32>
 8006fac:	2f00      	cmp	r7, #0
 8006fae:	f000 80d1 	beq.w	8007154 <_printf_i+0x1c4>
 8006fb2:	2f58      	cmp	r7, #88	@ 0x58
 8006fb4:	f000 80b8 	beq.w	8007128 <_printf_i+0x198>
 8006fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fc0:	e03a      	b.n	8007038 <_printf_i+0xa8>
 8006fc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fc6:	2b15      	cmp	r3, #21
 8006fc8:	d8f6      	bhi.n	8006fb8 <_printf_i+0x28>
 8006fca:	a101      	add	r1, pc, #4	@ (adr r1, 8006fd0 <_printf_i+0x40>)
 8006fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fd0:	08007029 	.word	0x08007029
 8006fd4:	0800703d 	.word	0x0800703d
 8006fd8:	08006fb9 	.word	0x08006fb9
 8006fdc:	08006fb9 	.word	0x08006fb9
 8006fe0:	08006fb9 	.word	0x08006fb9
 8006fe4:	08006fb9 	.word	0x08006fb9
 8006fe8:	0800703d 	.word	0x0800703d
 8006fec:	08006fb9 	.word	0x08006fb9
 8006ff0:	08006fb9 	.word	0x08006fb9
 8006ff4:	08006fb9 	.word	0x08006fb9
 8006ff8:	08006fb9 	.word	0x08006fb9
 8006ffc:	0800713b 	.word	0x0800713b
 8007000:	08007067 	.word	0x08007067
 8007004:	080070f5 	.word	0x080070f5
 8007008:	08006fb9 	.word	0x08006fb9
 800700c:	08006fb9 	.word	0x08006fb9
 8007010:	0800715d 	.word	0x0800715d
 8007014:	08006fb9 	.word	0x08006fb9
 8007018:	08007067 	.word	0x08007067
 800701c:	08006fb9 	.word	0x08006fb9
 8007020:	08006fb9 	.word	0x08006fb9
 8007024:	080070fd 	.word	0x080070fd
 8007028:	6833      	ldr	r3, [r6, #0]
 800702a:	1d1a      	adds	r2, r3, #4
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6032      	str	r2, [r6, #0]
 8007030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007034:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007038:	2301      	movs	r3, #1
 800703a:	e09c      	b.n	8007176 <_printf_i+0x1e6>
 800703c:	6833      	ldr	r3, [r6, #0]
 800703e:	6820      	ldr	r0, [r4, #0]
 8007040:	1d19      	adds	r1, r3, #4
 8007042:	6031      	str	r1, [r6, #0]
 8007044:	0606      	lsls	r6, r0, #24
 8007046:	d501      	bpl.n	800704c <_printf_i+0xbc>
 8007048:	681d      	ldr	r5, [r3, #0]
 800704a:	e003      	b.n	8007054 <_printf_i+0xc4>
 800704c:	0645      	lsls	r5, r0, #25
 800704e:	d5fb      	bpl.n	8007048 <_printf_i+0xb8>
 8007050:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007054:	2d00      	cmp	r5, #0
 8007056:	da03      	bge.n	8007060 <_printf_i+0xd0>
 8007058:	232d      	movs	r3, #45	@ 0x2d
 800705a:	426d      	negs	r5, r5
 800705c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007060:	4858      	ldr	r0, [pc, #352]	@ (80071c4 <_printf_i+0x234>)
 8007062:	230a      	movs	r3, #10
 8007064:	e011      	b.n	800708a <_printf_i+0xfa>
 8007066:	6821      	ldr	r1, [r4, #0]
 8007068:	6833      	ldr	r3, [r6, #0]
 800706a:	0608      	lsls	r0, r1, #24
 800706c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007070:	d402      	bmi.n	8007078 <_printf_i+0xe8>
 8007072:	0649      	lsls	r1, r1, #25
 8007074:	bf48      	it	mi
 8007076:	b2ad      	uxthmi	r5, r5
 8007078:	2f6f      	cmp	r7, #111	@ 0x6f
 800707a:	4852      	ldr	r0, [pc, #328]	@ (80071c4 <_printf_i+0x234>)
 800707c:	6033      	str	r3, [r6, #0]
 800707e:	bf14      	ite	ne
 8007080:	230a      	movne	r3, #10
 8007082:	2308      	moveq	r3, #8
 8007084:	2100      	movs	r1, #0
 8007086:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800708a:	6866      	ldr	r6, [r4, #4]
 800708c:	60a6      	str	r6, [r4, #8]
 800708e:	2e00      	cmp	r6, #0
 8007090:	db05      	blt.n	800709e <_printf_i+0x10e>
 8007092:	6821      	ldr	r1, [r4, #0]
 8007094:	432e      	orrs	r6, r5
 8007096:	f021 0104 	bic.w	r1, r1, #4
 800709a:	6021      	str	r1, [r4, #0]
 800709c:	d04b      	beq.n	8007136 <_printf_i+0x1a6>
 800709e:	4616      	mov	r6, r2
 80070a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80070a4:	fb03 5711 	mls	r7, r3, r1, r5
 80070a8:	5dc7      	ldrb	r7, [r0, r7]
 80070aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070ae:	462f      	mov	r7, r5
 80070b0:	42bb      	cmp	r3, r7
 80070b2:	460d      	mov	r5, r1
 80070b4:	d9f4      	bls.n	80070a0 <_printf_i+0x110>
 80070b6:	2b08      	cmp	r3, #8
 80070b8:	d10b      	bne.n	80070d2 <_printf_i+0x142>
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	07df      	lsls	r7, r3, #31
 80070be:	d508      	bpl.n	80070d2 <_printf_i+0x142>
 80070c0:	6923      	ldr	r3, [r4, #16]
 80070c2:	6861      	ldr	r1, [r4, #4]
 80070c4:	4299      	cmp	r1, r3
 80070c6:	bfde      	ittt	le
 80070c8:	2330      	movle	r3, #48	@ 0x30
 80070ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070d2:	1b92      	subs	r2, r2, r6
 80070d4:	6122      	str	r2, [r4, #16]
 80070d6:	f8cd a000 	str.w	sl, [sp]
 80070da:	464b      	mov	r3, r9
 80070dc:	aa03      	add	r2, sp, #12
 80070de:	4621      	mov	r1, r4
 80070e0:	4640      	mov	r0, r8
 80070e2:	f7ff fee7 	bl	8006eb4 <_printf_common>
 80070e6:	3001      	adds	r0, #1
 80070e8:	d14a      	bne.n	8007180 <_printf_i+0x1f0>
 80070ea:	f04f 30ff 	mov.w	r0, #4294967295
 80070ee:	b004      	add	sp, #16
 80070f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	f043 0320 	orr.w	r3, r3, #32
 80070fa:	6023      	str	r3, [r4, #0]
 80070fc:	4832      	ldr	r0, [pc, #200]	@ (80071c8 <_printf_i+0x238>)
 80070fe:	2778      	movs	r7, #120	@ 0x78
 8007100:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	6831      	ldr	r1, [r6, #0]
 8007108:	061f      	lsls	r7, r3, #24
 800710a:	f851 5b04 	ldr.w	r5, [r1], #4
 800710e:	d402      	bmi.n	8007116 <_printf_i+0x186>
 8007110:	065f      	lsls	r7, r3, #25
 8007112:	bf48      	it	mi
 8007114:	b2ad      	uxthmi	r5, r5
 8007116:	6031      	str	r1, [r6, #0]
 8007118:	07d9      	lsls	r1, r3, #31
 800711a:	bf44      	itt	mi
 800711c:	f043 0320 	orrmi.w	r3, r3, #32
 8007120:	6023      	strmi	r3, [r4, #0]
 8007122:	b11d      	cbz	r5, 800712c <_printf_i+0x19c>
 8007124:	2310      	movs	r3, #16
 8007126:	e7ad      	b.n	8007084 <_printf_i+0xf4>
 8007128:	4826      	ldr	r0, [pc, #152]	@ (80071c4 <_printf_i+0x234>)
 800712a:	e7e9      	b.n	8007100 <_printf_i+0x170>
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	f023 0320 	bic.w	r3, r3, #32
 8007132:	6023      	str	r3, [r4, #0]
 8007134:	e7f6      	b.n	8007124 <_printf_i+0x194>
 8007136:	4616      	mov	r6, r2
 8007138:	e7bd      	b.n	80070b6 <_printf_i+0x126>
 800713a:	6833      	ldr	r3, [r6, #0]
 800713c:	6825      	ldr	r5, [r4, #0]
 800713e:	6961      	ldr	r1, [r4, #20]
 8007140:	1d18      	adds	r0, r3, #4
 8007142:	6030      	str	r0, [r6, #0]
 8007144:	062e      	lsls	r6, r5, #24
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	d501      	bpl.n	800714e <_printf_i+0x1be>
 800714a:	6019      	str	r1, [r3, #0]
 800714c:	e002      	b.n	8007154 <_printf_i+0x1c4>
 800714e:	0668      	lsls	r0, r5, #25
 8007150:	d5fb      	bpl.n	800714a <_printf_i+0x1ba>
 8007152:	8019      	strh	r1, [r3, #0]
 8007154:	2300      	movs	r3, #0
 8007156:	6123      	str	r3, [r4, #16]
 8007158:	4616      	mov	r6, r2
 800715a:	e7bc      	b.n	80070d6 <_printf_i+0x146>
 800715c:	6833      	ldr	r3, [r6, #0]
 800715e:	1d1a      	adds	r2, r3, #4
 8007160:	6032      	str	r2, [r6, #0]
 8007162:	681e      	ldr	r6, [r3, #0]
 8007164:	6862      	ldr	r2, [r4, #4]
 8007166:	2100      	movs	r1, #0
 8007168:	4630      	mov	r0, r6
 800716a:	f7f9 f849 	bl	8000200 <memchr>
 800716e:	b108      	cbz	r0, 8007174 <_printf_i+0x1e4>
 8007170:	1b80      	subs	r0, r0, r6
 8007172:	6060      	str	r0, [r4, #4]
 8007174:	6863      	ldr	r3, [r4, #4]
 8007176:	6123      	str	r3, [r4, #16]
 8007178:	2300      	movs	r3, #0
 800717a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800717e:	e7aa      	b.n	80070d6 <_printf_i+0x146>
 8007180:	6923      	ldr	r3, [r4, #16]
 8007182:	4632      	mov	r2, r6
 8007184:	4649      	mov	r1, r9
 8007186:	4640      	mov	r0, r8
 8007188:	47d0      	blx	sl
 800718a:	3001      	adds	r0, #1
 800718c:	d0ad      	beq.n	80070ea <_printf_i+0x15a>
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	079b      	lsls	r3, r3, #30
 8007192:	d413      	bmi.n	80071bc <_printf_i+0x22c>
 8007194:	68e0      	ldr	r0, [r4, #12]
 8007196:	9b03      	ldr	r3, [sp, #12]
 8007198:	4298      	cmp	r0, r3
 800719a:	bfb8      	it	lt
 800719c:	4618      	movlt	r0, r3
 800719e:	e7a6      	b.n	80070ee <_printf_i+0x15e>
 80071a0:	2301      	movs	r3, #1
 80071a2:	4632      	mov	r2, r6
 80071a4:	4649      	mov	r1, r9
 80071a6:	4640      	mov	r0, r8
 80071a8:	47d0      	blx	sl
 80071aa:	3001      	adds	r0, #1
 80071ac:	d09d      	beq.n	80070ea <_printf_i+0x15a>
 80071ae:	3501      	adds	r5, #1
 80071b0:	68e3      	ldr	r3, [r4, #12]
 80071b2:	9903      	ldr	r1, [sp, #12]
 80071b4:	1a5b      	subs	r3, r3, r1
 80071b6:	42ab      	cmp	r3, r5
 80071b8:	dcf2      	bgt.n	80071a0 <_printf_i+0x210>
 80071ba:	e7eb      	b.n	8007194 <_printf_i+0x204>
 80071bc:	2500      	movs	r5, #0
 80071be:	f104 0619 	add.w	r6, r4, #25
 80071c2:	e7f5      	b.n	80071b0 <_printf_i+0x220>
 80071c4:	0800abaf 	.word	0x0800abaf
 80071c8:	0800abc0 	.word	0x0800abc0

080071cc <std>:
 80071cc:	2300      	movs	r3, #0
 80071ce:	b510      	push	{r4, lr}
 80071d0:	4604      	mov	r4, r0
 80071d2:	e9c0 3300 	strd	r3, r3, [r0]
 80071d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071da:	6083      	str	r3, [r0, #8]
 80071dc:	8181      	strh	r1, [r0, #12]
 80071de:	6643      	str	r3, [r0, #100]	@ 0x64
 80071e0:	81c2      	strh	r2, [r0, #14]
 80071e2:	6183      	str	r3, [r0, #24]
 80071e4:	4619      	mov	r1, r3
 80071e6:	2208      	movs	r2, #8
 80071e8:	305c      	adds	r0, #92	@ 0x5c
 80071ea:	f000 fa23 	bl	8007634 <memset>
 80071ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007224 <std+0x58>)
 80071f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80071f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007228 <std+0x5c>)
 80071f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80071f6:	4b0d      	ldr	r3, [pc, #52]	@ (800722c <std+0x60>)
 80071f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80071fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007230 <std+0x64>)
 80071fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80071fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007234 <std+0x68>)
 8007200:	6224      	str	r4, [r4, #32]
 8007202:	429c      	cmp	r4, r3
 8007204:	d006      	beq.n	8007214 <std+0x48>
 8007206:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800720a:	4294      	cmp	r4, r2
 800720c:	d002      	beq.n	8007214 <std+0x48>
 800720e:	33d0      	adds	r3, #208	@ 0xd0
 8007210:	429c      	cmp	r4, r3
 8007212:	d105      	bne.n	8007220 <std+0x54>
 8007214:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800721c:	f000 bb18 	b.w	8007850 <__retarget_lock_init_recursive>
 8007220:	bd10      	pop	{r4, pc}
 8007222:	bf00      	nop
 8007224:	08007485 	.word	0x08007485
 8007228:	080074a7 	.word	0x080074a7
 800722c:	080074df 	.word	0x080074df
 8007230:	08007503 	.word	0x08007503
 8007234:	20000c80 	.word	0x20000c80

08007238 <stdio_exit_handler>:
 8007238:	4a02      	ldr	r2, [pc, #8]	@ (8007244 <stdio_exit_handler+0xc>)
 800723a:	4903      	ldr	r1, [pc, #12]	@ (8007248 <stdio_exit_handler+0x10>)
 800723c:	4803      	ldr	r0, [pc, #12]	@ (800724c <stdio_exit_handler+0x14>)
 800723e:	f000 b869 	b.w	8007314 <_fwalk_sglue>
 8007242:	bf00      	nop
 8007244:	20000010 	.word	0x20000010
 8007248:	080094a1 	.word	0x080094a1
 800724c:	20000020 	.word	0x20000020

08007250 <cleanup_stdio>:
 8007250:	6841      	ldr	r1, [r0, #4]
 8007252:	4b0c      	ldr	r3, [pc, #48]	@ (8007284 <cleanup_stdio+0x34>)
 8007254:	4299      	cmp	r1, r3
 8007256:	b510      	push	{r4, lr}
 8007258:	4604      	mov	r4, r0
 800725a:	d001      	beq.n	8007260 <cleanup_stdio+0x10>
 800725c:	f002 f920 	bl	80094a0 <_fflush_r>
 8007260:	68a1      	ldr	r1, [r4, #8]
 8007262:	4b09      	ldr	r3, [pc, #36]	@ (8007288 <cleanup_stdio+0x38>)
 8007264:	4299      	cmp	r1, r3
 8007266:	d002      	beq.n	800726e <cleanup_stdio+0x1e>
 8007268:	4620      	mov	r0, r4
 800726a:	f002 f919 	bl	80094a0 <_fflush_r>
 800726e:	68e1      	ldr	r1, [r4, #12]
 8007270:	4b06      	ldr	r3, [pc, #24]	@ (800728c <cleanup_stdio+0x3c>)
 8007272:	4299      	cmp	r1, r3
 8007274:	d004      	beq.n	8007280 <cleanup_stdio+0x30>
 8007276:	4620      	mov	r0, r4
 8007278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800727c:	f002 b910 	b.w	80094a0 <_fflush_r>
 8007280:	bd10      	pop	{r4, pc}
 8007282:	bf00      	nop
 8007284:	20000c80 	.word	0x20000c80
 8007288:	20000ce8 	.word	0x20000ce8
 800728c:	20000d50 	.word	0x20000d50

08007290 <global_stdio_init.part.0>:
 8007290:	b510      	push	{r4, lr}
 8007292:	4b0b      	ldr	r3, [pc, #44]	@ (80072c0 <global_stdio_init.part.0+0x30>)
 8007294:	4c0b      	ldr	r4, [pc, #44]	@ (80072c4 <global_stdio_init.part.0+0x34>)
 8007296:	4a0c      	ldr	r2, [pc, #48]	@ (80072c8 <global_stdio_init.part.0+0x38>)
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	4620      	mov	r0, r4
 800729c:	2200      	movs	r2, #0
 800729e:	2104      	movs	r1, #4
 80072a0:	f7ff ff94 	bl	80071cc <std>
 80072a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80072a8:	2201      	movs	r2, #1
 80072aa:	2109      	movs	r1, #9
 80072ac:	f7ff ff8e 	bl	80071cc <std>
 80072b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80072b4:	2202      	movs	r2, #2
 80072b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ba:	2112      	movs	r1, #18
 80072bc:	f7ff bf86 	b.w	80071cc <std>
 80072c0:	20000db8 	.word	0x20000db8
 80072c4:	20000c80 	.word	0x20000c80
 80072c8:	08007239 	.word	0x08007239

080072cc <__sfp_lock_acquire>:
 80072cc:	4801      	ldr	r0, [pc, #4]	@ (80072d4 <__sfp_lock_acquire+0x8>)
 80072ce:	f000 bac0 	b.w	8007852 <__retarget_lock_acquire_recursive>
 80072d2:	bf00      	nop
 80072d4:	20000dc1 	.word	0x20000dc1

080072d8 <__sfp_lock_release>:
 80072d8:	4801      	ldr	r0, [pc, #4]	@ (80072e0 <__sfp_lock_release+0x8>)
 80072da:	f000 babb 	b.w	8007854 <__retarget_lock_release_recursive>
 80072de:	bf00      	nop
 80072e0:	20000dc1 	.word	0x20000dc1

080072e4 <__sinit>:
 80072e4:	b510      	push	{r4, lr}
 80072e6:	4604      	mov	r4, r0
 80072e8:	f7ff fff0 	bl	80072cc <__sfp_lock_acquire>
 80072ec:	6a23      	ldr	r3, [r4, #32]
 80072ee:	b11b      	cbz	r3, 80072f8 <__sinit+0x14>
 80072f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072f4:	f7ff bff0 	b.w	80072d8 <__sfp_lock_release>
 80072f8:	4b04      	ldr	r3, [pc, #16]	@ (800730c <__sinit+0x28>)
 80072fa:	6223      	str	r3, [r4, #32]
 80072fc:	4b04      	ldr	r3, [pc, #16]	@ (8007310 <__sinit+0x2c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1f5      	bne.n	80072f0 <__sinit+0xc>
 8007304:	f7ff ffc4 	bl	8007290 <global_stdio_init.part.0>
 8007308:	e7f2      	b.n	80072f0 <__sinit+0xc>
 800730a:	bf00      	nop
 800730c:	08007251 	.word	0x08007251
 8007310:	20000db8 	.word	0x20000db8

08007314 <_fwalk_sglue>:
 8007314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007318:	4607      	mov	r7, r0
 800731a:	4688      	mov	r8, r1
 800731c:	4614      	mov	r4, r2
 800731e:	2600      	movs	r6, #0
 8007320:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007324:	f1b9 0901 	subs.w	r9, r9, #1
 8007328:	d505      	bpl.n	8007336 <_fwalk_sglue+0x22>
 800732a:	6824      	ldr	r4, [r4, #0]
 800732c:	2c00      	cmp	r4, #0
 800732e:	d1f7      	bne.n	8007320 <_fwalk_sglue+0xc>
 8007330:	4630      	mov	r0, r6
 8007332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007336:	89ab      	ldrh	r3, [r5, #12]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d907      	bls.n	800734c <_fwalk_sglue+0x38>
 800733c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007340:	3301      	adds	r3, #1
 8007342:	d003      	beq.n	800734c <_fwalk_sglue+0x38>
 8007344:	4629      	mov	r1, r5
 8007346:	4638      	mov	r0, r7
 8007348:	47c0      	blx	r8
 800734a:	4306      	orrs	r6, r0
 800734c:	3568      	adds	r5, #104	@ 0x68
 800734e:	e7e9      	b.n	8007324 <_fwalk_sglue+0x10>

08007350 <iprintf>:
 8007350:	b40f      	push	{r0, r1, r2, r3}
 8007352:	b507      	push	{r0, r1, r2, lr}
 8007354:	4906      	ldr	r1, [pc, #24]	@ (8007370 <iprintf+0x20>)
 8007356:	ab04      	add	r3, sp, #16
 8007358:	6808      	ldr	r0, [r1, #0]
 800735a:	f853 2b04 	ldr.w	r2, [r3], #4
 800735e:	6881      	ldr	r1, [r0, #8]
 8007360:	9301      	str	r3, [sp, #4]
 8007362:	f001 ff01 	bl	8009168 <_vfiprintf_r>
 8007366:	b003      	add	sp, #12
 8007368:	f85d eb04 	ldr.w	lr, [sp], #4
 800736c:	b004      	add	sp, #16
 800736e:	4770      	bx	lr
 8007370:	2000001c 	.word	0x2000001c

08007374 <putchar>:
 8007374:	4b02      	ldr	r3, [pc, #8]	@ (8007380 <putchar+0xc>)
 8007376:	4601      	mov	r1, r0
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	6882      	ldr	r2, [r0, #8]
 800737c:	f002 b92c 	b.w	80095d8 <_putc_r>
 8007380:	2000001c 	.word	0x2000001c

08007384 <_puts_r>:
 8007384:	6a03      	ldr	r3, [r0, #32]
 8007386:	b570      	push	{r4, r5, r6, lr}
 8007388:	6884      	ldr	r4, [r0, #8]
 800738a:	4605      	mov	r5, r0
 800738c:	460e      	mov	r6, r1
 800738e:	b90b      	cbnz	r3, 8007394 <_puts_r+0x10>
 8007390:	f7ff ffa8 	bl	80072e4 <__sinit>
 8007394:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007396:	07db      	lsls	r3, r3, #31
 8007398:	d405      	bmi.n	80073a6 <_puts_r+0x22>
 800739a:	89a3      	ldrh	r3, [r4, #12]
 800739c:	0598      	lsls	r0, r3, #22
 800739e:	d402      	bmi.n	80073a6 <_puts_r+0x22>
 80073a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073a2:	f000 fa56 	bl	8007852 <__retarget_lock_acquire_recursive>
 80073a6:	89a3      	ldrh	r3, [r4, #12]
 80073a8:	0719      	lsls	r1, r3, #28
 80073aa:	d502      	bpl.n	80073b2 <_puts_r+0x2e>
 80073ac:	6923      	ldr	r3, [r4, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d135      	bne.n	800741e <_puts_r+0x9a>
 80073b2:	4621      	mov	r1, r4
 80073b4:	4628      	mov	r0, r5
 80073b6:	f000 f8e7 	bl	8007588 <__swsetup_r>
 80073ba:	b380      	cbz	r0, 800741e <_puts_r+0x9a>
 80073bc:	f04f 35ff 	mov.w	r5, #4294967295
 80073c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073c2:	07da      	lsls	r2, r3, #31
 80073c4:	d405      	bmi.n	80073d2 <_puts_r+0x4e>
 80073c6:	89a3      	ldrh	r3, [r4, #12]
 80073c8:	059b      	lsls	r3, r3, #22
 80073ca:	d402      	bmi.n	80073d2 <_puts_r+0x4e>
 80073cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073ce:	f000 fa41 	bl	8007854 <__retarget_lock_release_recursive>
 80073d2:	4628      	mov	r0, r5
 80073d4:	bd70      	pop	{r4, r5, r6, pc}
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	da04      	bge.n	80073e4 <_puts_r+0x60>
 80073da:	69a2      	ldr	r2, [r4, #24]
 80073dc:	429a      	cmp	r2, r3
 80073de:	dc17      	bgt.n	8007410 <_puts_r+0x8c>
 80073e0:	290a      	cmp	r1, #10
 80073e2:	d015      	beq.n	8007410 <_puts_r+0x8c>
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	6022      	str	r2, [r4, #0]
 80073ea:	7019      	strb	r1, [r3, #0]
 80073ec:	68a3      	ldr	r3, [r4, #8]
 80073ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80073f2:	3b01      	subs	r3, #1
 80073f4:	60a3      	str	r3, [r4, #8]
 80073f6:	2900      	cmp	r1, #0
 80073f8:	d1ed      	bne.n	80073d6 <_puts_r+0x52>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	da11      	bge.n	8007422 <_puts_r+0x9e>
 80073fe:	4622      	mov	r2, r4
 8007400:	210a      	movs	r1, #10
 8007402:	4628      	mov	r0, r5
 8007404:	f000 f881 	bl	800750a <__swbuf_r>
 8007408:	3001      	adds	r0, #1
 800740a:	d0d7      	beq.n	80073bc <_puts_r+0x38>
 800740c:	250a      	movs	r5, #10
 800740e:	e7d7      	b.n	80073c0 <_puts_r+0x3c>
 8007410:	4622      	mov	r2, r4
 8007412:	4628      	mov	r0, r5
 8007414:	f000 f879 	bl	800750a <__swbuf_r>
 8007418:	3001      	adds	r0, #1
 800741a:	d1e7      	bne.n	80073ec <_puts_r+0x68>
 800741c:	e7ce      	b.n	80073bc <_puts_r+0x38>
 800741e:	3e01      	subs	r6, #1
 8007420:	e7e4      	b.n	80073ec <_puts_r+0x68>
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	1c5a      	adds	r2, r3, #1
 8007426:	6022      	str	r2, [r4, #0]
 8007428:	220a      	movs	r2, #10
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	e7ee      	b.n	800740c <_puts_r+0x88>
	...

08007430 <puts>:
 8007430:	4b02      	ldr	r3, [pc, #8]	@ (800743c <puts+0xc>)
 8007432:	4601      	mov	r1, r0
 8007434:	6818      	ldr	r0, [r3, #0]
 8007436:	f7ff bfa5 	b.w	8007384 <_puts_r>
 800743a:	bf00      	nop
 800743c:	2000001c 	.word	0x2000001c

08007440 <siprintf>:
 8007440:	b40e      	push	{r1, r2, r3}
 8007442:	b510      	push	{r4, lr}
 8007444:	b09d      	sub	sp, #116	@ 0x74
 8007446:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007448:	9002      	str	r0, [sp, #8]
 800744a:	9006      	str	r0, [sp, #24]
 800744c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007450:	480a      	ldr	r0, [pc, #40]	@ (800747c <siprintf+0x3c>)
 8007452:	9107      	str	r1, [sp, #28]
 8007454:	9104      	str	r1, [sp, #16]
 8007456:	490a      	ldr	r1, [pc, #40]	@ (8007480 <siprintf+0x40>)
 8007458:	f853 2b04 	ldr.w	r2, [r3], #4
 800745c:	9105      	str	r1, [sp, #20]
 800745e:	2400      	movs	r4, #0
 8007460:	a902      	add	r1, sp, #8
 8007462:	6800      	ldr	r0, [r0, #0]
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007468:	f001 fd58 	bl	8008f1c <_svfiprintf_r>
 800746c:	9b02      	ldr	r3, [sp, #8]
 800746e:	701c      	strb	r4, [r3, #0]
 8007470:	b01d      	add	sp, #116	@ 0x74
 8007472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007476:	b003      	add	sp, #12
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	2000001c 	.word	0x2000001c
 8007480:	ffff0208 	.word	0xffff0208

08007484 <__sread>:
 8007484:	b510      	push	{r4, lr}
 8007486:	460c      	mov	r4, r1
 8007488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800748c:	f000 f992 	bl	80077b4 <_read_r>
 8007490:	2800      	cmp	r0, #0
 8007492:	bfab      	itete	ge
 8007494:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007496:	89a3      	ldrhlt	r3, [r4, #12]
 8007498:	181b      	addge	r3, r3, r0
 800749a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800749e:	bfac      	ite	ge
 80074a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074a2:	81a3      	strhlt	r3, [r4, #12]
 80074a4:	bd10      	pop	{r4, pc}

080074a6 <__swrite>:
 80074a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074aa:	461f      	mov	r7, r3
 80074ac:	898b      	ldrh	r3, [r1, #12]
 80074ae:	05db      	lsls	r3, r3, #23
 80074b0:	4605      	mov	r5, r0
 80074b2:	460c      	mov	r4, r1
 80074b4:	4616      	mov	r6, r2
 80074b6:	d505      	bpl.n	80074c4 <__swrite+0x1e>
 80074b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074bc:	2302      	movs	r3, #2
 80074be:	2200      	movs	r2, #0
 80074c0:	f000 f966 	bl	8007790 <_lseek_r>
 80074c4:	89a3      	ldrh	r3, [r4, #12]
 80074c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074ce:	81a3      	strh	r3, [r4, #12]
 80074d0:	4632      	mov	r2, r6
 80074d2:	463b      	mov	r3, r7
 80074d4:	4628      	mov	r0, r5
 80074d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074da:	f000 b97d 	b.w	80077d8 <_write_r>

080074de <__sseek>:
 80074de:	b510      	push	{r4, lr}
 80074e0:	460c      	mov	r4, r1
 80074e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e6:	f000 f953 	bl	8007790 <_lseek_r>
 80074ea:	1c43      	adds	r3, r0, #1
 80074ec:	89a3      	ldrh	r3, [r4, #12]
 80074ee:	bf15      	itete	ne
 80074f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80074f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80074f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80074fa:	81a3      	strheq	r3, [r4, #12]
 80074fc:	bf18      	it	ne
 80074fe:	81a3      	strhne	r3, [r4, #12]
 8007500:	bd10      	pop	{r4, pc}

08007502 <__sclose>:
 8007502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007506:	f000 b933 	b.w	8007770 <_close_r>

0800750a <__swbuf_r>:
 800750a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750c:	460e      	mov	r6, r1
 800750e:	4614      	mov	r4, r2
 8007510:	4605      	mov	r5, r0
 8007512:	b118      	cbz	r0, 800751c <__swbuf_r+0x12>
 8007514:	6a03      	ldr	r3, [r0, #32]
 8007516:	b90b      	cbnz	r3, 800751c <__swbuf_r+0x12>
 8007518:	f7ff fee4 	bl	80072e4 <__sinit>
 800751c:	69a3      	ldr	r3, [r4, #24]
 800751e:	60a3      	str	r3, [r4, #8]
 8007520:	89a3      	ldrh	r3, [r4, #12]
 8007522:	071a      	lsls	r2, r3, #28
 8007524:	d501      	bpl.n	800752a <__swbuf_r+0x20>
 8007526:	6923      	ldr	r3, [r4, #16]
 8007528:	b943      	cbnz	r3, 800753c <__swbuf_r+0x32>
 800752a:	4621      	mov	r1, r4
 800752c:	4628      	mov	r0, r5
 800752e:	f000 f82b 	bl	8007588 <__swsetup_r>
 8007532:	b118      	cbz	r0, 800753c <__swbuf_r+0x32>
 8007534:	f04f 37ff 	mov.w	r7, #4294967295
 8007538:	4638      	mov	r0, r7
 800753a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	6922      	ldr	r2, [r4, #16]
 8007540:	1a98      	subs	r0, r3, r2
 8007542:	6963      	ldr	r3, [r4, #20]
 8007544:	b2f6      	uxtb	r6, r6
 8007546:	4283      	cmp	r3, r0
 8007548:	4637      	mov	r7, r6
 800754a:	dc05      	bgt.n	8007558 <__swbuf_r+0x4e>
 800754c:	4621      	mov	r1, r4
 800754e:	4628      	mov	r0, r5
 8007550:	f001 ffa6 	bl	80094a0 <_fflush_r>
 8007554:	2800      	cmp	r0, #0
 8007556:	d1ed      	bne.n	8007534 <__swbuf_r+0x2a>
 8007558:	68a3      	ldr	r3, [r4, #8]
 800755a:	3b01      	subs	r3, #1
 800755c:	60a3      	str	r3, [r4, #8]
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	6022      	str	r2, [r4, #0]
 8007564:	701e      	strb	r6, [r3, #0]
 8007566:	6962      	ldr	r2, [r4, #20]
 8007568:	1c43      	adds	r3, r0, #1
 800756a:	429a      	cmp	r2, r3
 800756c:	d004      	beq.n	8007578 <__swbuf_r+0x6e>
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	07db      	lsls	r3, r3, #31
 8007572:	d5e1      	bpl.n	8007538 <__swbuf_r+0x2e>
 8007574:	2e0a      	cmp	r6, #10
 8007576:	d1df      	bne.n	8007538 <__swbuf_r+0x2e>
 8007578:	4621      	mov	r1, r4
 800757a:	4628      	mov	r0, r5
 800757c:	f001 ff90 	bl	80094a0 <_fflush_r>
 8007580:	2800      	cmp	r0, #0
 8007582:	d0d9      	beq.n	8007538 <__swbuf_r+0x2e>
 8007584:	e7d6      	b.n	8007534 <__swbuf_r+0x2a>
	...

08007588 <__swsetup_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4b29      	ldr	r3, [pc, #164]	@ (8007630 <__swsetup_r+0xa8>)
 800758c:	4605      	mov	r5, r0
 800758e:	6818      	ldr	r0, [r3, #0]
 8007590:	460c      	mov	r4, r1
 8007592:	b118      	cbz	r0, 800759c <__swsetup_r+0x14>
 8007594:	6a03      	ldr	r3, [r0, #32]
 8007596:	b90b      	cbnz	r3, 800759c <__swsetup_r+0x14>
 8007598:	f7ff fea4 	bl	80072e4 <__sinit>
 800759c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a0:	0719      	lsls	r1, r3, #28
 80075a2:	d422      	bmi.n	80075ea <__swsetup_r+0x62>
 80075a4:	06da      	lsls	r2, r3, #27
 80075a6:	d407      	bmi.n	80075b8 <__swsetup_r+0x30>
 80075a8:	2209      	movs	r2, #9
 80075aa:	602a      	str	r2, [r5, #0]
 80075ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075b0:	81a3      	strh	r3, [r4, #12]
 80075b2:	f04f 30ff 	mov.w	r0, #4294967295
 80075b6:	e033      	b.n	8007620 <__swsetup_r+0x98>
 80075b8:	0758      	lsls	r0, r3, #29
 80075ba:	d512      	bpl.n	80075e2 <__swsetup_r+0x5a>
 80075bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075be:	b141      	cbz	r1, 80075d2 <__swsetup_r+0x4a>
 80075c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075c4:	4299      	cmp	r1, r3
 80075c6:	d002      	beq.n	80075ce <__swsetup_r+0x46>
 80075c8:	4628      	mov	r0, r5
 80075ca:	f000 ffd1 	bl	8008570 <_free_r>
 80075ce:	2300      	movs	r3, #0
 80075d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80075d2:	89a3      	ldrh	r3, [r4, #12]
 80075d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80075d8:	81a3      	strh	r3, [r4, #12]
 80075da:	2300      	movs	r3, #0
 80075dc:	6063      	str	r3, [r4, #4]
 80075de:	6923      	ldr	r3, [r4, #16]
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	f043 0308 	orr.w	r3, r3, #8
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	6923      	ldr	r3, [r4, #16]
 80075ec:	b94b      	cbnz	r3, 8007602 <__swsetup_r+0x7a>
 80075ee:	89a3      	ldrh	r3, [r4, #12]
 80075f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80075f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075f8:	d003      	beq.n	8007602 <__swsetup_r+0x7a>
 80075fa:	4621      	mov	r1, r4
 80075fc:	4628      	mov	r0, r5
 80075fe:	f001 ffaf 	bl	8009560 <__smakebuf_r>
 8007602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007606:	f013 0201 	ands.w	r2, r3, #1
 800760a:	d00a      	beq.n	8007622 <__swsetup_r+0x9a>
 800760c:	2200      	movs	r2, #0
 800760e:	60a2      	str	r2, [r4, #8]
 8007610:	6962      	ldr	r2, [r4, #20]
 8007612:	4252      	negs	r2, r2
 8007614:	61a2      	str	r2, [r4, #24]
 8007616:	6922      	ldr	r2, [r4, #16]
 8007618:	b942      	cbnz	r2, 800762c <__swsetup_r+0xa4>
 800761a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800761e:	d1c5      	bne.n	80075ac <__swsetup_r+0x24>
 8007620:	bd38      	pop	{r3, r4, r5, pc}
 8007622:	0799      	lsls	r1, r3, #30
 8007624:	bf58      	it	pl
 8007626:	6962      	ldrpl	r2, [r4, #20]
 8007628:	60a2      	str	r2, [r4, #8]
 800762a:	e7f4      	b.n	8007616 <__swsetup_r+0x8e>
 800762c:	2000      	movs	r0, #0
 800762e:	e7f7      	b.n	8007620 <__swsetup_r+0x98>
 8007630:	2000001c 	.word	0x2000001c

08007634 <memset>:
 8007634:	4402      	add	r2, r0
 8007636:	4603      	mov	r3, r0
 8007638:	4293      	cmp	r3, r2
 800763a:	d100      	bne.n	800763e <memset+0xa>
 800763c:	4770      	bx	lr
 800763e:	f803 1b01 	strb.w	r1, [r3], #1
 8007642:	e7f9      	b.n	8007638 <memset+0x4>

08007644 <strchr>:
 8007644:	b2c9      	uxtb	r1, r1
 8007646:	4603      	mov	r3, r0
 8007648:	4618      	mov	r0, r3
 800764a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800764e:	b112      	cbz	r2, 8007656 <strchr+0x12>
 8007650:	428a      	cmp	r2, r1
 8007652:	d1f9      	bne.n	8007648 <strchr+0x4>
 8007654:	4770      	bx	lr
 8007656:	2900      	cmp	r1, #0
 8007658:	bf18      	it	ne
 800765a:	2000      	movne	r0, #0
 800765c:	4770      	bx	lr

0800765e <strncmp>:
 800765e:	b510      	push	{r4, lr}
 8007660:	b16a      	cbz	r2, 800767e <strncmp+0x20>
 8007662:	3901      	subs	r1, #1
 8007664:	1884      	adds	r4, r0, r2
 8007666:	f810 2b01 	ldrb.w	r2, [r0], #1
 800766a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800766e:	429a      	cmp	r2, r3
 8007670:	d103      	bne.n	800767a <strncmp+0x1c>
 8007672:	42a0      	cmp	r0, r4
 8007674:	d001      	beq.n	800767a <strncmp+0x1c>
 8007676:	2a00      	cmp	r2, #0
 8007678:	d1f5      	bne.n	8007666 <strncmp+0x8>
 800767a:	1ad0      	subs	r0, r2, r3
 800767c:	bd10      	pop	{r4, pc}
 800767e:	4610      	mov	r0, r2
 8007680:	e7fc      	b.n	800767c <strncmp+0x1e>
	...

08007684 <strtok>:
 8007684:	4b16      	ldr	r3, [pc, #88]	@ (80076e0 <strtok+0x5c>)
 8007686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800768a:	681f      	ldr	r7, [r3, #0]
 800768c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800768e:	4605      	mov	r5, r0
 8007690:	460e      	mov	r6, r1
 8007692:	b9ec      	cbnz	r4, 80076d0 <strtok+0x4c>
 8007694:	2050      	movs	r0, #80	@ 0x50
 8007696:	f000 ffb5 	bl	8008604 <malloc>
 800769a:	4602      	mov	r2, r0
 800769c:	6478      	str	r0, [r7, #68]	@ 0x44
 800769e:	b920      	cbnz	r0, 80076aa <strtok+0x26>
 80076a0:	4b10      	ldr	r3, [pc, #64]	@ (80076e4 <strtok+0x60>)
 80076a2:	4811      	ldr	r0, [pc, #68]	@ (80076e8 <strtok+0x64>)
 80076a4:	215b      	movs	r1, #91	@ 0x5b
 80076a6:	f000 f8ed 	bl	8007884 <__assert_func>
 80076aa:	e9c0 4400 	strd	r4, r4, [r0]
 80076ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80076b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80076b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80076ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80076be:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80076c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80076c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80076ca:	6184      	str	r4, [r0, #24]
 80076cc:	7704      	strb	r4, [r0, #28]
 80076ce:	6244      	str	r4, [r0, #36]	@ 0x24
 80076d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076d2:	4631      	mov	r1, r6
 80076d4:	4628      	mov	r0, r5
 80076d6:	2301      	movs	r3, #1
 80076d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076dc:	f000 b806 	b.w	80076ec <__strtok_r>
 80076e0:	2000001c 	.word	0x2000001c
 80076e4:	0800abd1 	.word	0x0800abd1
 80076e8:	0800abe8 	.word	0x0800abe8

080076ec <__strtok_r>:
 80076ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ee:	4604      	mov	r4, r0
 80076f0:	b908      	cbnz	r0, 80076f6 <__strtok_r+0xa>
 80076f2:	6814      	ldr	r4, [r2, #0]
 80076f4:	b144      	cbz	r4, 8007708 <__strtok_r+0x1c>
 80076f6:	4620      	mov	r0, r4
 80076f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80076fc:	460f      	mov	r7, r1
 80076fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007702:	b91e      	cbnz	r6, 800770c <__strtok_r+0x20>
 8007704:	b965      	cbnz	r5, 8007720 <__strtok_r+0x34>
 8007706:	6015      	str	r5, [r2, #0]
 8007708:	2000      	movs	r0, #0
 800770a:	e005      	b.n	8007718 <__strtok_r+0x2c>
 800770c:	42b5      	cmp	r5, r6
 800770e:	d1f6      	bne.n	80076fe <__strtok_r+0x12>
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1f0      	bne.n	80076f6 <__strtok_r+0xa>
 8007714:	6014      	str	r4, [r2, #0]
 8007716:	7003      	strb	r3, [r0, #0]
 8007718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800771a:	461c      	mov	r4, r3
 800771c:	e00c      	b.n	8007738 <__strtok_r+0x4c>
 800771e:	b91d      	cbnz	r5, 8007728 <__strtok_r+0x3c>
 8007720:	4627      	mov	r7, r4
 8007722:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007726:	460e      	mov	r6, r1
 8007728:	f816 5b01 	ldrb.w	r5, [r6], #1
 800772c:	42ab      	cmp	r3, r5
 800772e:	d1f6      	bne.n	800771e <__strtok_r+0x32>
 8007730:	2b00      	cmp	r3, #0
 8007732:	d0f2      	beq.n	800771a <__strtok_r+0x2e>
 8007734:	2300      	movs	r3, #0
 8007736:	703b      	strb	r3, [r7, #0]
 8007738:	6014      	str	r4, [r2, #0]
 800773a:	e7ed      	b.n	8007718 <__strtok_r+0x2c>

0800773c <strstr>:
 800773c:	780a      	ldrb	r2, [r1, #0]
 800773e:	b570      	push	{r4, r5, r6, lr}
 8007740:	b96a      	cbnz	r2, 800775e <strstr+0x22>
 8007742:	bd70      	pop	{r4, r5, r6, pc}
 8007744:	429a      	cmp	r2, r3
 8007746:	d109      	bne.n	800775c <strstr+0x20>
 8007748:	460c      	mov	r4, r1
 800774a:	4605      	mov	r5, r0
 800774c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0f6      	beq.n	8007742 <strstr+0x6>
 8007754:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007758:	429e      	cmp	r6, r3
 800775a:	d0f7      	beq.n	800774c <strstr+0x10>
 800775c:	3001      	adds	r0, #1
 800775e:	7803      	ldrb	r3, [r0, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1ef      	bne.n	8007744 <strstr+0x8>
 8007764:	4618      	mov	r0, r3
 8007766:	e7ec      	b.n	8007742 <strstr+0x6>

08007768 <_localeconv_r>:
 8007768:	4800      	ldr	r0, [pc, #0]	@ (800776c <_localeconv_r+0x4>)
 800776a:	4770      	bx	lr
 800776c:	2000015c 	.word	0x2000015c

08007770 <_close_r>:
 8007770:	b538      	push	{r3, r4, r5, lr}
 8007772:	4d06      	ldr	r5, [pc, #24]	@ (800778c <_close_r+0x1c>)
 8007774:	2300      	movs	r3, #0
 8007776:	4604      	mov	r4, r0
 8007778:	4608      	mov	r0, r1
 800777a:	602b      	str	r3, [r5, #0]
 800777c:	f7fb fa1a 	bl	8002bb4 <_close>
 8007780:	1c43      	adds	r3, r0, #1
 8007782:	d102      	bne.n	800778a <_close_r+0x1a>
 8007784:	682b      	ldr	r3, [r5, #0]
 8007786:	b103      	cbz	r3, 800778a <_close_r+0x1a>
 8007788:	6023      	str	r3, [r4, #0]
 800778a:	bd38      	pop	{r3, r4, r5, pc}
 800778c:	20000dbc 	.word	0x20000dbc

08007790 <_lseek_r>:
 8007790:	b538      	push	{r3, r4, r5, lr}
 8007792:	4d07      	ldr	r5, [pc, #28]	@ (80077b0 <_lseek_r+0x20>)
 8007794:	4604      	mov	r4, r0
 8007796:	4608      	mov	r0, r1
 8007798:	4611      	mov	r1, r2
 800779a:	2200      	movs	r2, #0
 800779c:	602a      	str	r2, [r5, #0]
 800779e:	461a      	mov	r2, r3
 80077a0:	f7fb fa2f 	bl	8002c02 <_lseek>
 80077a4:	1c43      	adds	r3, r0, #1
 80077a6:	d102      	bne.n	80077ae <_lseek_r+0x1e>
 80077a8:	682b      	ldr	r3, [r5, #0]
 80077aa:	b103      	cbz	r3, 80077ae <_lseek_r+0x1e>
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	bd38      	pop	{r3, r4, r5, pc}
 80077b0:	20000dbc 	.word	0x20000dbc

080077b4 <_read_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	4d07      	ldr	r5, [pc, #28]	@ (80077d4 <_read_r+0x20>)
 80077b8:	4604      	mov	r4, r0
 80077ba:	4608      	mov	r0, r1
 80077bc:	4611      	mov	r1, r2
 80077be:	2200      	movs	r2, #0
 80077c0:	602a      	str	r2, [r5, #0]
 80077c2:	461a      	mov	r2, r3
 80077c4:	f7fb f9bd 	bl	8002b42 <_read>
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	d102      	bne.n	80077d2 <_read_r+0x1e>
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	b103      	cbz	r3, 80077d2 <_read_r+0x1e>
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	bd38      	pop	{r3, r4, r5, pc}
 80077d4:	20000dbc 	.word	0x20000dbc

080077d8 <_write_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	4d07      	ldr	r5, [pc, #28]	@ (80077f8 <_write_r+0x20>)
 80077dc:	4604      	mov	r4, r0
 80077de:	4608      	mov	r0, r1
 80077e0:	4611      	mov	r1, r2
 80077e2:	2200      	movs	r2, #0
 80077e4:	602a      	str	r2, [r5, #0]
 80077e6:	461a      	mov	r2, r3
 80077e8:	f7fb f9c8 	bl	8002b7c <_write>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d102      	bne.n	80077f6 <_write_r+0x1e>
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	b103      	cbz	r3, 80077f6 <_write_r+0x1e>
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	20000dbc 	.word	0x20000dbc

080077fc <__errno>:
 80077fc:	4b01      	ldr	r3, [pc, #4]	@ (8007804 <__errno+0x8>)
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	2000001c 	.word	0x2000001c

08007808 <__libc_init_array>:
 8007808:	b570      	push	{r4, r5, r6, lr}
 800780a:	4d0d      	ldr	r5, [pc, #52]	@ (8007840 <__libc_init_array+0x38>)
 800780c:	4c0d      	ldr	r4, [pc, #52]	@ (8007844 <__libc_init_array+0x3c>)
 800780e:	1b64      	subs	r4, r4, r5
 8007810:	10a4      	asrs	r4, r4, #2
 8007812:	2600      	movs	r6, #0
 8007814:	42a6      	cmp	r6, r4
 8007816:	d109      	bne.n	800782c <__libc_init_array+0x24>
 8007818:	4d0b      	ldr	r5, [pc, #44]	@ (8007848 <__libc_init_array+0x40>)
 800781a:	4c0c      	ldr	r4, [pc, #48]	@ (800784c <__libc_init_array+0x44>)
 800781c:	f002 ff6e 	bl	800a6fc <_init>
 8007820:	1b64      	subs	r4, r4, r5
 8007822:	10a4      	asrs	r4, r4, #2
 8007824:	2600      	movs	r6, #0
 8007826:	42a6      	cmp	r6, r4
 8007828:	d105      	bne.n	8007836 <__libc_init_array+0x2e>
 800782a:	bd70      	pop	{r4, r5, r6, pc}
 800782c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007830:	4798      	blx	r3
 8007832:	3601      	adds	r6, #1
 8007834:	e7ee      	b.n	8007814 <__libc_init_array+0xc>
 8007836:	f855 3b04 	ldr.w	r3, [r5], #4
 800783a:	4798      	blx	r3
 800783c:	3601      	adds	r6, #1
 800783e:	e7f2      	b.n	8007826 <__libc_init_array+0x1e>
 8007840:	0800aeb0 	.word	0x0800aeb0
 8007844:	0800aeb0 	.word	0x0800aeb0
 8007848:	0800aeb0 	.word	0x0800aeb0
 800784c:	0800aeb4 	.word	0x0800aeb4

08007850 <__retarget_lock_init_recursive>:
 8007850:	4770      	bx	lr

08007852 <__retarget_lock_acquire_recursive>:
 8007852:	4770      	bx	lr

08007854 <__retarget_lock_release_recursive>:
 8007854:	4770      	bx	lr

08007856 <strcpy>:
 8007856:	4603      	mov	r3, r0
 8007858:	f811 2b01 	ldrb.w	r2, [r1], #1
 800785c:	f803 2b01 	strb.w	r2, [r3], #1
 8007860:	2a00      	cmp	r2, #0
 8007862:	d1f9      	bne.n	8007858 <strcpy+0x2>
 8007864:	4770      	bx	lr

08007866 <memcpy>:
 8007866:	440a      	add	r2, r1
 8007868:	4291      	cmp	r1, r2
 800786a:	f100 33ff 	add.w	r3, r0, #4294967295
 800786e:	d100      	bne.n	8007872 <memcpy+0xc>
 8007870:	4770      	bx	lr
 8007872:	b510      	push	{r4, lr}
 8007874:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007878:	f803 4f01 	strb.w	r4, [r3, #1]!
 800787c:	4291      	cmp	r1, r2
 800787e:	d1f9      	bne.n	8007874 <memcpy+0xe>
 8007880:	bd10      	pop	{r4, pc}
	...

08007884 <__assert_func>:
 8007884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007886:	4614      	mov	r4, r2
 8007888:	461a      	mov	r2, r3
 800788a:	4b09      	ldr	r3, [pc, #36]	@ (80078b0 <__assert_func+0x2c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4605      	mov	r5, r0
 8007890:	68d8      	ldr	r0, [r3, #12]
 8007892:	b14c      	cbz	r4, 80078a8 <__assert_func+0x24>
 8007894:	4b07      	ldr	r3, [pc, #28]	@ (80078b4 <__assert_func+0x30>)
 8007896:	9100      	str	r1, [sp, #0]
 8007898:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800789c:	4906      	ldr	r1, [pc, #24]	@ (80078b8 <__assert_func+0x34>)
 800789e:	462b      	mov	r3, r5
 80078a0:	f001 fe26 	bl	80094f0 <fiprintf>
 80078a4:	f001 ff18 	bl	80096d8 <abort>
 80078a8:	4b04      	ldr	r3, [pc, #16]	@ (80078bc <__assert_func+0x38>)
 80078aa:	461c      	mov	r4, r3
 80078ac:	e7f3      	b.n	8007896 <__assert_func+0x12>
 80078ae:	bf00      	nop
 80078b0:	2000001c 	.word	0x2000001c
 80078b4:	0800ac42 	.word	0x0800ac42
 80078b8:	0800ac4f 	.word	0x0800ac4f
 80078bc:	0800ac7d 	.word	0x0800ac7d

080078c0 <quorem>:
 80078c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	6903      	ldr	r3, [r0, #16]
 80078c6:	690c      	ldr	r4, [r1, #16]
 80078c8:	42a3      	cmp	r3, r4
 80078ca:	4607      	mov	r7, r0
 80078cc:	db7e      	blt.n	80079cc <quorem+0x10c>
 80078ce:	3c01      	subs	r4, #1
 80078d0:	f101 0814 	add.w	r8, r1, #20
 80078d4:	00a3      	lsls	r3, r4, #2
 80078d6:	f100 0514 	add.w	r5, r0, #20
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078e0:	9301      	str	r3, [sp, #4]
 80078e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078ea:	3301      	adds	r3, #1
 80078ec:	429a      	cmp	r2, r3
 80078ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80078f6:	d32e      	bcc.n	8007956 <quorem+0x96>
 80078f8:	f04f 0a00 	mov.w	sl, #0
 80078fc:	46c4      	mov	ip, r8
 80078fe:	46ae      	mov	lr, r5
 8007900:	46d3      	mov	fp, sl
 8007902:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007906:	b298      	uxth	r0, r3
 8007908:	fb06 a000 	mla	r0, r6, r0, sl
 800790c:	0c02      	lsrs	r2, r0, #16
 800790e:	0c1b      	lsrs	r3, r3, #16
 8007910:	fb06 2303 	mla	r3, r6, r3, r2
 8007914:	f8de 2000 	ldr.w	r2, [lr]
 8007918:	b280      	uxth	r0, r0
 800791a:	b292      	uxth	r2, r2
 800791c:	1a12      	subs	r2, r2, r0
 800791e:	445a      	add	r2, fp
 8007920:	f8de 0000 	ldr.w	r0, [lr]
 8007924:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007928:	b29b      	uxth	r3, r3
 800792a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800792e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007932:	b292      	uxth	r2, r2
 8007934:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007938:	45e1      	cmp	r9, ip
 800793a:	f84e 2b04 	str.w	r2, [lr], #4
 800793e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007942:	d2de      	bcs.n	8007902 <quorem+0x42>
 8007944:	9b00      	ldr	r3, [sp, #0]
 8007946:	58eb      	ldr	r3, [r5, r3]
 8007948:	b92b      	cbnz	r3, 8007956 <quorem+0x96>
 800794a:	9b01      	ldr	r3, [sp, #4]
 800794c:	3b04      	subs	r3, #4
 800794e:	429d      	cmp	r5, r3
 8007950:	461a      	mov	r2, r3
 8007952:	d32f      	bcc.n	80079b4 <quorem+0xf4>
 8007954:	613c      	str	r4, [r7, #16]
 8007956:	4638      	mov	r0, r7
 8007958:	f001 f97c 	bl	8008c54 <__mcmp>
 800795c:	2800      	cmp	r0, #0
 800795e:	db25      	blt.n	80079ac <quorem+0xec>
 8007960:	4629      	mov	r1, r5
 8007962:	2000      	movs	r0, #0
 8007964:	f858 2b04 	ldr.w	r2, [r8], #4
 8007968:	f8d1 c000 	ldr.w	ip, [r1]
 800796c:	fa1f fe82 	uxth.w	lr, r2
 8007970:	fa1f f38c 	uxth.w	r3, ip
 8007974:	eba3 030e 	sub.w	r3, r3, lr
 8007978:	4403      	add	r3, r0
 800797a:	0c12      	lsrs	r2, r2, #16
 800797c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007980:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007984:	b29b      	uxth	r3, r3
 8007986:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800798a:	45c1      	cmp	r9, r8
 800798c:	f841 3b04 	str.w	r3, [r1], #4
 8007990:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007994:	d2e6      	bcs.n	8007964 <quorem+0xa4>
 8007996:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800799a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800799e:	b922      	cbnz	r2, 80079aa <quorem+0xea>
 80079a0:	3b04      	subs	r3, #4
 80079a2:	429d      	cmp	r5, r3
 80079a4:	461a      	mov	r2, r3
 80079a6:	d30b      	bcc.n	80079c0 <quorem+0x100>
 80079a8:	613c      	str	r4, [r7, #16]
 80079aa:	3601      	adds	r6, #1
 80079ac:	4630      	mov	r0, r6
 80079ae:	b003      	add	sp, #12
 80079b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b4:	6812      	ldr	r2, [r2, #0]
 80079b6:	3b04      	subs	r3, #4
 80079b8:	2a00      	cmp	r2, #0
 80079ba:	d1cb      	bne.n	8007954 <quorem+0x94>
 80079bc:	3c01      	subs	r4, #1
 80079be:	e7c6      	b.n	800794e <quorem+0x8e>
 80079c0:	6812      	ldr	r2, [r2, #0]
 80079c2:	3b04      	subs	r3, #4
 80079c4:	2a00      	cmp	r2, #0
 80079c6:	d1ef      	bne.n	80079a8 <quorem+0xe8>
 80079c8:	3c01      	subs	r4, #1
 80079ca:	e7ea      	b.n	80079a2 <quorem+0xe2>
 80079cc:	2000      	movs	r0, #0
 80079ce:	e7ee      	b.n	80079ae <quorem+0xee>

080079d0 <_dtoa_r>:
 80079d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	69c7      	ldr	r7, [r0, #28]
 80079d6:	b097      	sub	sp, #92	@ 0x5c
 80079d8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80079dc:	ec55 4b10 	vmov	r4, r5, d0
 80079e0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80079e2:	9107      	str	r1, [sp, #28]
 80079e4:	4681      	mov	r9, r0
 80079e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80079e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80079ea:	b97f      	cbnz	r7, 8007a0c <_dtoa_r+0x3c>
 80079ec:	2010      	movs	r0, #16
 80079ee:	f000 fe09 	bl	8008604 <malloc>
 80079f2:	4602      	mov	r2, r0
 80079f4:	f8c9 001c 	str.w	r0, [r9, #28]
 80079f8:	b920      	cbnz	r0, 8007a04 <_dtoa_r+0x34>
 80079fa:	4ba9      	ldr	r3, [pc, #676]	@ (8007ca0 <_dtoa_r+0x2d0>)
 80079fc:	21ef      	movs	r1, #239	@ 0xef
 80079fe:	48a9      	ldr	r0, [pc, #676]	@ (8007ca4 <_dtoa_r+0x2d4>)
 8007a00:	f7ff ff40 	bl	8007884 <__assert_func>
 8007a04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a08:	6007      	str	r7, [r0, #0]
 8007a0a:	60c7      	str	r7, [r0, #12]
 8007a0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a10:	6819      	ldr	r1, [r3, #0]
 8007a12:	b159      	cbz	r1, 8007a2c <_dtoa_r+0x5c>
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	604a      	str	r2, [r1, #4]
 8007a18:	2301      	movs	r3, #1
 8007a1a:	4093      	lsls	r3, r2
 8007a1c:	608b      	str	r3, [r1, #8]
 8007a1e:	4648      	mov	r0, r9
 8007a20:	f000 fee6 	bl	80087f0 <_Bfree>
 8007a24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	1e2b      	subs	r3, r5, #0
 8007a2e:	bfb9      	ittee	lt
 8007a30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007a34:	9305      	strlt	r3, [sp, #20]
 8007a36:	2300      	movge	r3, #0
 8007a38:	6033      	strge	r3, [r6, #0]
 8007a3a:	9f05      	ldr	r7, [sp, #20]
 8007a3c:	4b9a      	ldr	r3, [pc, #616]	@ (8007ca8 <_dtoa_r+0x2d8>)
 8007a3e:	bfbc      	itt	lt
 8007a40:	2201      	movlt	r2, #1
 8007a42:	6032      	strlt	r2, [r6, #0]
 8007a44:	43bb      	bics	r3, r7
 8007a46:	d112      	bne.n	8007a6e <_dtoa_r+0x9e>
 8007a48:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007a4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a54:	4323      	orrs	r3, r4
 8007a56:	f000 855a 	beq.w	800850e <_dtoa_r+0xb3e>
 8007a5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a5c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007cbc <_dtoa_r+0x2ec>
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 855c 	beq.w	800851e <_dtoa_r+0xb4e>
 8007a66:	f10a 0303 	add.w	r3, sl, #3
 8007a6a:	f000 bd56 	b.w	800851a <_dtoa_r+0xb4a>
 8007a6e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007a72:	2200      	movs	r2, #0
 8007a74:	ec51 0b17 	vmov	r0, r1, d7
 8007a78:	2300      	movs	r3, #0
 8007a7a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007a7e:	f7f9 f83b 	bl	8000af8 <__aeabi_dcmpeq>
 8007a82:	4680      	mov	r8, r0
 8007a84:	b158      	cbz	r0, 8007a9e <_dtoa_r+0xce>
 8007a86:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007a88:	2301      	movs	r3, #1
 8007a8a:	6013      	str	r3, [r2, #0]
 8007a8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a8e:	b113      	cbz	r3, 8007a96 <_dtoa_r+0xc6>
 8007a90:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007a92:	4b86      	ldr	r3, [pc, #536]	@ (8007cac <_dtoa_r+0x2dc>)
 8007a94:	6013      	str	r3, [r2, #0]
 8007a96:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007cc0 <_dtoa_r+0x2f0>
 8007a9a:	f000 bd40 	b.w	800851e <_dtoa_r+0xb4e>
 8007a9e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007aa2:	aa14      	add	r2, sp, #80	@ 0x50
 8007aa4:	a915      	add	r1, sp, #84	@ 0x54
 8007aa6:	4648      	mov	r0, r9
 8007aa8:	f001 f984 	bl	8008db4 <__d2b>
 8007aac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007ab0:	9002      	str	r0, [sp, #8]
 8007ab2:	2e00      	cmp	r6, #0
 8007ab4:	d078      	beq.n	8007ba8 <_dtoa_r+0x1d8>
 8007ab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ab8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ac0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007ac4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ac8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007acc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	4b76      	ldr	r3, [pc, #472]	@ (8007cb0 <_dtoa_r+0x2e0>)
 8007ad6:	f7f8 fbef 	bl	80002b8 <__aeabi_dsub>
 8007ada:	a36b      	add	r3, pc, #428	@ (adr r3, 8007c88 <_dtoa_r+0x2b8>)
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	f7f8 fda2 	bl	8000628 <__aeabi_dmul>
 8007ae4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007c90 <_dtoa_r+0x2c0>)
 8007ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aea:	f7f8 fbe7 	bl	80002bc <__adddf3>
 8007aee:	4604      	mov	r4, r0
 8007af0:	4630      	mov	r0, r6
 8007af2:	460d      	mov	r5, r1
 8007af4:	f7f8 fd2e 	bl	8000554 <__aeabi_i2d>
 8007af8:	a367      	add	r3, pc, #412	@ (adr r3, 8007c98 <_dtoa_r+0x2c8>)
 8007afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afe:	f7f8 fd93 	bl	8000628 <__aeabi_dmul>
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	4620      	mov	r0, r4
 8007b08:	4629      	mov	r1, r5
 8007b0a:	f7f8 fbd7 	bl	80002bc <__adddf3>
 8007b0e:	4604      	mov	r4, r0
 8007b10:	460d      	mov	r5, r1
 8007b12:	f7f9 f839 	bl	8000b88 <__aeabi_d2iz>
 8007b16:	2200      	movs	r2, #0
 8007b18:	4607      	mov	r7, r0
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	4629      	mov	r1, r5
 8007b20:	f7f8 fff4 	bl	8000b0c <__aeabi_dcmplt>
 8007b24:	b140      	cbz	r0, 8007b38 <_dtoa_r+0x168>
 8007b26:	4638      	mov	r0, r7
 8007b28:	f7f8 fd14 	bl	8000554 <__aeabi_i2d>
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	462b      	mov	r3, r5
 8007b30:	f7f8 ffe2 	bl	8000af8 <__aeabi_dcmpeq>
 8007b34:	b900      	cbnz	r0, 8007b38 <_dtoa_r+0x168>
 8007b36:	3f01      	subs	r7, #1
 8007b38:	2f16      	cmp	r7, #22
 8007b3a:	d852      	bhi.n	8007be2 <_dtoa_r+0x212>
 8007b3c:	4b5d      	ldr	r3, [pc, #372]	@ (8007cb4 <_dtoa_r+0x2e4>)
 8007b3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b4a:	f7f8 ffdf 	bl	8000b0c <__aeabi_dcmplt>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d049      	beq.n	8007be6 <_dtoa_r+0x216>
 8007b52:	3f01      	subs	r7, #1
 8007b54:	2300      	movs	r3, #0
 8007b56:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b5a:	1b9b      	subs	r3, r3, r6
 8007b5c:	1e5a      	subs	r2, r3, #1
 8007b5e:	bf45      	ittet	mi
 8007b60:	f1c3 0301 	rsbmi	r3, r3, #1
 8007b64:	9300      	strmi	r3, [sp, #0]
 8007b66:	2300      	movpl	r3, #0
 8007b68:	2300      	movmi	r3, #0
 8007b6a:	9206      	str	r2, [sp, #24]
 8007b6c:	bf54      	ite	pl
 8007b6e:	9300      	strpl	r3, [sp, #0]
 8007b70:	9306      	strmi	r3, [sp, #24]
 8007b72:	2f00      	cmp	r7, #0
 8007b74:	db39      	blt.n	8007bea <_dtoa_r+0x21a>
 8007b76:	9b06      	ldr	r3, [sp, #24]
 8007b78:	970d      	str	r7, [sp, #52]	@ 0x34
 8007b7a:	443b      	add	r3, r7
 8007b7c:	9306      	str	r3, [sp, #24]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	9308      	str	r3, [sp, #32]
 8007b82:	9b07      	ldr	r3, [sp, #28]
 8007b84:	2b09      	cmp	r3, #9
 8007b86:	d863      	bhi.n	8007c50 <_dtoa_r+0x280>
 8007b88:	2b05      	cmp	r3, #5
 8007b8a:	bfc4      	itt	gt
 8007b8c:	3b04      	subgt	r3, #4
 8007b8e:	9307      	strgt	r3, [sp, #28]
 8007b90:	9b07      	ldr	r3, [sp, #28]
 8007b92:	f1a3 0302 	sub.w	r3, r3, #2
 8007b96:	bfcc      	ite	gt
 8007b98:	2400      	movgt	r4, #0
 8007b9a:	2401      	movle	r4, #1
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d863      	bhi.n	8007c68 <_dtoa_r+0x298>
 8007ba0:	e8df f003 	tbb	[pc, r3]
 8007ba4:	2b375452 	.word	0x2b375452
 8007ba8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007bac:	441e      	add	r6, r3
 8007bae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007bb2:	2b20      	cmp	r3, #32
 8007bb4:	bfc1      	itttt	gt
 8007bb6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007bba:	409f      	lslgt	r7, r3
 8007bbc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007bc0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007bc4:	bfd6      	itet	le
 8007bc6:	f1c3 0320 	rsble	r3, r3, #32
 8007bca:	ea47 0003 	orrgt.w	r0, r7, r3
 8007bce:	fa04 f003 	lslle.w	r0, r4, r3
 8007bd2:	f7f8 fcaf 	bl	8000534 <__aeabi_ui2d>
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007bdc:	3e01      	subs	r6, #1
 8007bde:	9212      	str	r2, [sp, #72]	@ 0x48
 8007be0:	e776      	b.n	8007ad0 <_dtoa_r+0x100>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e7b7      	b.n	8007b56 <_dtoa_r+0x186>
 8007be6:	9010      	str	r0, [sp, #64]	@ 0x40
 8007be8:	e7b6      	b.n	8007b58 <_dtoa_r+0x188>
 8007bea:	9b00      	ldr	r3, [sp, #0]
 8007bec:	1bdb      	subs	r3, r3, r7
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	427b      	negs	r3, r7
 8007bf2:	9308      	str	r3, [sp, #32]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	930d      	str	r3, [sp, #52]	@ 0x34
 8007bf8:	e7c3      	b.n	8007b82 <_dtoa_r+0x1b2>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c00:	eb07 0b03 	add.w	fp, r7, r3
 8007c04:	f10b 0301 	add.w	r3, fp, #1
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	9303      	str	r3, [sp, #12]
 8007c0c:	bfb8      	it	lt
 8007c0e:	2301      	movlt	r3, #1
 8007c10:	e006      	b.n	8007c20 <_dtoa_r+0x250>
 8007c12:	2301      	movs	r3, #1
 8007c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	dd28      	ble.n	8007c6e <_dtoa_r+0x29e>
 8007c1c:	469b      	mov	fp, r3
 8007c1e:	9303      	str	r3, [sp, #12]
 8007c20:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007c24:	2100      	movs	r1, #0
 8007c26:	2204      	movs	r2, #4
 8007c28:	f102 0514 	add.w	r5, r2, #20
 8007c2c:	429d      	cmp	r5, r3
 8007c2e:	d926      	bls.n	8007c7e <_dtoa_r+0x2ae>
 8007c30:	6041      	str	r1, [r0, #4]
 8007c32:	4648      	mov	r0, r9
 8007c34:	f000 fd9c 	bl	8008770 <_Balloc>
 8007c38:	4682      	mov	sl, r0
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d142      	bne.n	8007cc4 <_dtoa_r+0x2f4>
 8007c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007cb8 <_dtoa_r+0x2e8>)
 8007c40:	4602      	mov	r2, r0
 8007c42:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c46:	e6da      	b.n	80079fe <_dtoa_r+0x2e>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	e7e3      	b.n	8007c14 <_dtoa_r+0x244>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e7d5      	b.n	8007bfc <_dtoa_r+0x22c>
 8007c50:	2401      	movs	r4, #1
 8007c52:	2300      	movs	r3, #0
 8007c54:	9307      	str	r3, [sp, #28]
 8007c56:	9409      	str	r4, [sp, #36]	@ 0x24
 8007c58:	f04f 3bff 	mov.w	fp, #4294967295
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007c62:	2312      	movs	r3, #18
 8007c64:	920c      	str	r2, [sp, #48]	@ 0x30
 8007c66:	e7db      	b.n	8007c20 <_dtoa_r+0x250>
 8007c68:	2301      	movs	r3, #1
 8007c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c6c:	e7f4      	b.n	8007c58 <_dtoa_r+0x288>
 8007c6e:	f04f 0b01 	mov.w	fp, #1
 8007c72:	f8cd b00c 	str.w	fp, [sp, #12]
 8007c76:	465b      	mov	r3, fp
 8007c78:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007c7c:	e7d0      	b.n	8007c20 <_dtoa_r+0x250>
 8007c7e:	3101      	adds	r1, #1
 8007c80:	0052      	lsls	r2, r2, #1
 8007c82:	e7d1      	b.n	8007c28 <_dtoa_r+0x258>
 8007c84:	f3af 8000 	nop.w
 8007c88:	636f4361 	.word	0x636f4361
 8007c8c:	3fd287a7 	.word	0x3fd287a7
 8007c90:	8b60c8b3 	.word	0x8b60c8b3
 8007c94:	3fc68a28 	.word	0x3fc68a28
 8007c98:	509f79fb 	.word	0x509f79fb
 8007c9c:	3fd34413 	.word	0x3fd34413
 8007ca0:	0800abd1 	.word	0x0800abd1
 8007ca4:	0800ac8b 	.word	0x0800ac8b
 8007ca8:	7ff00000 	.word	0x7ff00000
 8007cac:	0800abae 	.word	0x0800abae
 8007cb0:	3ff80000 	.word	0x3ff80000
 8007cb4:	0800ada0 	.word	0x0800ada0
 8007cb8:	0800ace3 	.word	0x0800ace3
 8007cbc:	0800ac87 	.word	0x0800ac87
 8007cc0:	0800abad 	.word	0x0800abad
 8007cc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007cc8:	6018      	str	r0, [r3, #0]
 8007cca:	9b03      	ldr	r3, [sp, #12]
 8007ccc:	2b0e      	cmp	r3, #14
 8007cce:	f200 80a1 	bhi.w	8007e14 <_dtoa_r+0x444>
 8007cd2:	2c00      	cmp	r4, #0
 8007cd4:	f000 809e 	beq.w	8007e14 <_dtoa_r+0x444>
 8007cd8:	2f00      	cmp	r7, #0
 8007cda:	dd33      	ble.n	8007d44 <_dtoa_r+0x374>
 8007cdc:	4b9c      	ldr	r3, [pc, #624]	@ (8007f50 <_dtoa_r+0x580>)
 8007cde:	f007 020f 	and.w	r2, r7, #15
 8007ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ce6:	ed93 7b00 	vldr	d7, [r3]
 8007cea:	05f8      	lsls	r0, r7, #23
 8007cec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007cf0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007cf4:	d516      	bpl.n	8007d24 <_dtoa_r+0x354>
 8007cf6:	4b97      	ldr	r3, [pc, #604]	@ (8007f54 <_dtoa_r+0x584>)
 8007cf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007cfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d00:	f7f8 fdbc 	bl	800087c <__aeabi_ddiv>
 8007d04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d08:	f004 040f 	and.w	r4, r4, #15
 8007d0c:	2603      	movs	r6, #3
 8007d0e:	4d91      	ldr	r5, [pc, #580]	@ (8007f54 <_dtoa_r+0x584>)
 8007d10:	b954      	cbnz	r4, 8007d28 <_dtoa_r+0x358>
 8007d12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d1a:	f7f8 fdaf 	bl	800087c <__aeabi_ddiv>
 8007d1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d22:	e028      	b.n	8007d76 <_dtoa_r+0x3a6>
 8007d24:	2602      	movs	r6, #2
 8007d26:	e7f2      	b.n	8007d0e <_dtoa_r+0x33e>
 8007d28:	07e1      	lsls	r1, r4, #31
 8007d2a:	d508      	bpl.n	8007d3e <_dtoa_r+0x36e>
 8007d2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007d30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d34:	f7f8 fc78 	bl	8000628 <__aeabi_dmul>
 8007d38:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007d3c:	3601      	adds	r6, #1
 8007d3e:	1064      	asrs	r4, r4, #1
 8007d40:	3508      	adds	r5, #8
 8007d42:	e7e5      	b.n	8007d10 <_dtoa_r+0x340>
 8007d44:	f000 80af 	beq.w	8007ea6 <_dtoa_r+0x4d6>
 8007d48:	427c      	negs	r4, r7
 8007d4a:	4b81      	ldr	r3, [pc, #516]	@ (8007f50 <_dtoa_r+0x580>)
 8007d4c:	4d81      	ldr	r5, [pc, #516]	@ (8007f54 <_dtoa_r+0x584>)
 8007d4e:	f004 020f 	and.w	r2, r4, #15
 8007d52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d5e:	f7f8 fc63 	bl	8000628 <__aeabi_dmul>
 8007d62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d66:	1124      	asrs	r4, r4, #4
 8007d68:	2300      	movs	r3, #0
 8007d6a:	2602      	movs	r6, #2
 8007d6c:	2c00      	cmp	r4, #0
 8007d6e:	f040 808f 	bne.w	8007e90 <_dtoa_r+0x4c0>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1d3      	bne.n	8007d1e <_dtoa_r+0x34e>
 8007d76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d78:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 8094 	beq.w	8007eaa <_dtoa_r+0x4da>
 8007d82:	4b75      	ldr	r3, [pc, #468]	@ (8007f58 <_dtoa_r+0x588>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	4620      	mov	r0, r4
 8007d88:	4629      	mov	r1, r5
 8007d8a:	f7f8 febf 	bl	8000b0c <__aeabi_dcmplt>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	f000 808b 	beq.w	8007eaa <_dtoa_r+0x4da>
 8007d94:	9b03      	ldr	r3, [sp, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 8087 	beq.w	8007eaa <_dtoa_r+0x4da>
 8007d9c:	f1bb 0f00 	cmp.w	fp, #0
 8007da0:	dd34      	ble.n	8007e0c <_dtoa_r+0x43c>
 8007da2:	4620      	mov	r0, r4
 8007da4:	4b6d      	ldr	r3, [pc, #436]	@ (8007f5c <_dtoa_r+0x58c>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	4629      	mov	r1, r5
 8007daa:	f7f8 fc3d 	bl	8000628 <__aeabi_dmul>
 8007dae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007db2:	f107 38ff 	add.w	r8, r7, #4294967295
 8007db6:	3601      	adds	r6, #1
 8007db8:	465c      	mov	r4, fp
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f7f8 fbca 	bl	8000554 <__aeabi_i2d>
 8007dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dc4:	f7f8 fc30 	bl	8000628 <__aeabi_dmul>
 8007dc8:	4b65      	ldr	r3, [pc, #404]	@ (8007f60 <_dtoa_r+0x590>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f7f8 fa76 	bl	80002bc <__adddf3>
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007dd6:	2c00      	cmp	r4, #0
 8007dd8:	d16a      	bne.n	8007eb0 <_dtoa_r+0x4e0>
 8007dda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dde:	4b61      	ldr	r3, [pc, #388]	@ (8007f64 <_dtoa_r+0x594>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	f7f8 fa69 	bl	80002b8 <__aeabi_dsub>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007dee:	462a      	mov	r2, r5
 8007df0:	4633      	mov	r3, r6
 8007df2:	f7f8 fea9 	bl	8000b48 <__aeabi_dcmpgt>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	f040 8298 	bne.w	800832c <_dtoa_r+0x95c>
 8007dfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e00:	462a      	mov	r2, r5
 8007e02:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e06:	f7f8 fe81 	bl	8000b0c <__aeabi_dcmplt>
 8007e0a:	bb38      	cbnz	r0, 8007e5c <_dtoa_r+0x48c>
 8007e0c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007e10:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e14:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f2c0 8157 	blt.w	80080ca <_dtoa_r+0x6fa>
 8007e1c:	2f0e      	cmp	r7, #14
 8007e1e:	f300 8154 	bgt.w	80080ca <_dtoa_r+0x6fa>
 8007e22:	4b4b      	ldr	r3, [pc, #300]	@ (8007f50 <_dtoa_r+0x580>)
 8007e24:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e28:	ed93 7b00 	vldr	d7, [r3]
 8007e2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	ed8d 7b00 	vstr	d7, [sp]
 8007e34:	f280 80e5 	bge.w	8008002 <_dtoa_r+0x632>
 8007e38:	9b03      	ldr	r3, [sp, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f300 80e1 	bgt.w	8008002 <_dtoa_r+0x632>
 8007e40:	d10c      	bne.n	8007e5c <_dtoa_r+0x48c>
 8007e42:	4b48      	ldr	r3, [pc, #288]	@ (8007f64 <_dtoa_r+0x594>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	ec51 0b17 	vmov	r0, r1, d7
 8007e4a:	f7f8 fbed 	bl	8000628 <__aeabi_dmul>
 8007e4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e52:	f7f8 fe6f 	bl	8000b34 <__aeabi_dcmpge>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	f000 8266 	beq.w	8008328 <_dtoa_r+0x958>
 8007e5c:	2400      	movs	r4, #0
 8007e5e:	4625      	mov	r5, r4
 8007e60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e62:	4656      	mov	r6, sl
 8007e64:	ea6f 0803 	mvn.w	r8, r3
 8007e68:	2700      	movs	r7, #0
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	4648      	mov	r0, r9
 8007e6e:	f000 fcbf 	bl	80087f0 <_Bfree>
 8007e72:	2d00      	cmp	r5, #0
 8007e74:	f000 80bd 	beq.w	8007ff2 <_dtoa_r+0x622>
 8007e78:	b12f      	cbz	r7, 8007e86 <_dtoa_r+0x4b6>
 8007e7a:	42af      	cmp	r7, r5
 8007e7c:	d003      	beq.n	8007e86 <_dtoa_r+0x4b6>
 8007e7e:	4639      	mov	r1, r7
 8007e80:	4648      	mov	r0, r9
 8007e82:	f000 fcb5 	bl	80087f0 <_Bfree>
 8007e86:	4629      	mov	r1, r5
 8007e88:	4648      	mov	r0, r9
 8007e8a:	f000 fcb1 	bl	80087f0 <_Bfree>
 8007e8e:	e0b0      	b.n	8007ff2 <_dtoa_r+0x622>
 8007e90:	07e2      	lsls	r2, r4, #31
 8007e92:	d505      	bpl.n	8007ea0 <_dtoa_r+0x4d0>
 8007e94:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e98:	f7f8 fbc6 	bl	8000628 <__aeabi_dmul>
 8007e9c:	3601      	adds	r6, #1
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	1064      	asrs	r4, r4, #1
 8007ea2:	3508      	adds	r5, #8
 8007ea4:	e762      	b.n	8007d6c <_dtoa_r+0x39c>
 8007ea6:	2602      	movs	r6, #2
 8007ea8:	e765      	b.n	8007d76 <_dtoa_r+0x3a6>
 8007eaa:	9c03      	ldr	r4, [sp, #12]
 8007eac:	46b8      	mov	r8, r7
 8007eae:	e784      	b.n	8007dba <_dtoa_r+0x3ea>
 8007eb0:	4b27      	ldr	r3, [pc, #156]	@ (8007f50 <_dtoa_r+0x580>)
 8007eb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007eb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007eb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ebc:	4454      	add	r4, sl
 8007ebe:	2900      	cmp	r1, #0
 8007ec0:	d054      	beq.n	8007f6c <_dtoa_r+0x59c>
 8007ec2:	4929      	ldr	r1, [pc, #164]	@ (8007f68 <_dtoa_r+0x598>)
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	f7f8 fcd9 	bl	800087c <__aeabi_ddiv>
 8007eca:	4633      	mov	r3, r6
 8007ecc:	462a      	mov	r2, r5
 8007ece:	f7f8 f9f3 	bl	80002b8 <__aeabi_dsub>
 8007ed2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007ed6:	4656      	mov	r6, sl
 8007ed8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007edc:	f7f8 fe54 	bl	8000b88 <__aeabi_d2iz>
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	f7f8 fb37 	bl	8000554 <__aeabi_i2d>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007eee:	f7f8 f9e3 	bl	80002b8 <__aeabi_dsub>
 8007ef2:	3530      	adds	r5, #48	@ 0x30
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007efc:	f806 5b01 	strb.w	r5, [r6], #1
 8007f00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f04:	f7f8 fe02 	bl	8000b0c <__aeabi_dcmplt>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d172      	bne.n	8007ff2 <_dtoa_r+0x622>
 8007f0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f10:	4911      	ldr	r1, [pc, #68]	@ (8007f58 <_dtoa_r+0x588>)
 8007f12:	2000      	movs	r0, #0
 8007f14:	f7f8 f9d0 	bl	80002b8 <__aeabi_dsub>
 8007f18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f1c:	f7f8 fdf6 	bl	8000b0c <__aeabi_dcmplt>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	f040 80b4 	bne.w	800808e <_dtoa_r+0x6be>
 8007f26:	42a6      	cmp	r6, r4
 8007f28:	f43f af70 	beq.w	8007e0c <_dtoa_r+0x43c>
 8007f2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007f30:	4b0a      	ldr	r3, [pc, #40]	@ (8007f5c <_dtoa_r+0x58c>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	f7f8 fb78 	bl	8000628 <__aeabi_dmul>
 8007f38:	4b08      	ldr	r3, [pc, #32]	@ (8007f5c <_dtoa_r+0x58c>)
 8007f3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f3e:	2200      	movs	r2, #0
 8007f40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f44:	f7f8 fb70 	bl	8000628 <__aeabi_dmul>
 8007f48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f4c:	e7c4      	b.n	8007ed8 <_dtoa_r+0x508>
 8007f4e:	bf00      	nop
 8007f50:	0800ada0 	.word	0x0800ada0
 8007f54:	0800ad78 	.word	0x0800ad78
 8007f58:	3ff00000 	.word	0x3ff00000
 8007f5c:	40240000 	.word	0x40240000
 8007f60:	401c0000 	.word	0x401c0000
 8007f64:	40140000 	.word	0x40140000
 8007f68:	3fe00000 	.word	0x3fe00000
 8007f6c:	4631      	mov	r1, r6
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f7f8 fb5a 	bl	8000628 <__aeabi_dmul>
 8007f74:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f78:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007f7a:	4656      	mov	r6, sl
 8007f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f80:	f7f8 fe02 	bl	8000b88 <__aeabi_d2iz>
 8007f84:	4605      	mov	r5, r0
 8007f86:	f7f8 fae5 	bl	8000554 <__aeabi_i2d>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f92:	f7f8 f991 	bl	80002b8 <__aeabi_dsub>
 8007f96:	3530      	adds	r5, #48	@ 0x30
 8007f98:	f806 5b01 	strb.w	r5, [r6], #1
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	42a6      	cmp	r6, r4
 8007fa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fa6:	f04f 0200 	mov.w	r2, #0
 8007faa:	d124      	bne.n	8007ff6 <_dtoa_r+0x626>
 8007fac:	4baf      	ldr	r3, [pc, #700]	@ (800826c <_dtoa_r+0x89c>)
 8007fae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007fb2:	f7f8 f983 	bl	80002bc <__adddf3>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fbe:	f7f8 fdc3 	bl	8000b48 <__aeabi_dcmpgt>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d163      	bne.n	800808e <_dtoa_r+0x6be>
 8007fc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007fca:	49a8      	ldr	r1, [pc, #672]	@ (800826c <_dtoa_r+0x89c>)
 8007fcc:	2000      	movs	r0, #0
 8007fce:	f7f8 f973 	bl	80002b8 <__aeabi_dsub>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fda:	f7f8 fd97 	bl	8000b0c <__aeabi_dcmplt>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	f43f af14 	beq.w	8007e0c <_dtoa_r+0x43c>
 8007fe4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007fe6:	1e73      	subs	r3, r6, #1
 8007fe8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007fee:	2b30      	cmp	r3, #48	@ 0x30
 8007ff0:	d0f8      	beq.n	8007fe4 <_dtoa_r+0x614>
 8007ff2:	4647      	mov	r7, r8
 8007ff4:	e03b      	b.n	800806e <_dtoa_r+0x69e>
 8007ff6:	4b9e      	ldr	r3, [pc, #632]	@ (8008270 <_dtoa_r+0x8a0>)
 8007ff8:	f7f8 fb16 	bl	8000628 <__aeabi_dmul>
 8007ffc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008000:	e7bc      	b.n	8007f7c <_dtoa_r+0x5ac>
 8008002:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008006:	4656      	mov	r6, sl
 8008008:	e9dd 2300 	ldrd	r2, r3, [sp]
 800800c:	4620      	mov	r0, r4
 800800e:	4629      	mov	r1, r5
 8008010:	f7f8 fc34 	bl	800087c <__aeabi_ddiv>
 8008014:	f7f8 fdb8 	bl	8000b88 <__aeabi_d2iz>
 8008018:	4680      	mov	r8, r0
 800801a:	f7f8 fa9b 	bl	8000554 <__aeabi_i2d>
 800801e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008022:	f7f8 fb01 	bl	8000628 <__aeabi_dmul>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	4620      	mov	r0, r4
 800802c:	4629      	mov	r1, r5
 800802e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008032:	f7f8 f941 	bl	80002b8 <__aeabi_dsub>
 8008036:	f806 4b01 	strb.w	r4, [r6], #1
 800803a:	9d03      	ldr	r5, [sp, #12]
 800803c:	eba6 040a 	sub.w	r4, r6, sl
 8008040:	42a5      	cmp	r5, r4
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	d133      	bne.n	80080b0 <_dtoa_r+0x6e0>
 8008048:	f7f8 f938 	bl	80002bc <__adddf3>
 800804c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008050:	4604      	mov	r4, r0
 8008052:	460d      	mov	r5, r1
 8008054:	f7f8 fd78 	bl	8000b48 <__aeabi_dcmpgt>
 8008058:	b9c0      	cbnz	r0, 800808c <_dtoa_r+0x6bc>
 800805a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800805e:	4620      	mov	r0, r4
 8008060:	4629      	mov	r1, r5
 8008062:	f7f8 fd49 	bl	8000af8 <__aeabi_dcmpeq>
 8008066:	b110      	cbz	r0, 800806e <_dtoa_r+0x69e>
 8008068:	f018 0f01 	tst.w	r8, #1
 800806c:	d10e      	bne.n	800808c <_dtoa_r+0x6bc>
 800806e:	9902      	ldr	r1, [sp, #8]
 8008070:	4648      	mov	r0, r9
 8008072:	f000 fbbd 	bl	80087f0 <_Bfree>
 8008076:	2300      	movs	r3, #0
 8008078:	7033      	strb	r3, [r6, #0]
 800807a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800807c:	3701      	adds	r7, #1
 800807e:	601f      	str	r7, [r3, #0]
 8008080:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 824b 	beq.w	800851e <_dtoa_r+0xb4e>
 8008088:	601e      	str	r6, [r3, #0]
 800808a:	e248      	b.n	800851e <_dtoa_r+0xb4e>
 800808c:	46b8      	mov	r8, r7
 800808e:	4633      	mov	r3, r6
 8008090:	461e      	mov	r6, r3
 8008092:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008096:	2a39      	cmp	r2, #57	@ 0x39
 8008098:	d106      	bne.n	80080a8 <_dtoa_r+0x6d8>
 800809a:	459a      	cmp	sl, r3
 800809c:	d1f8      	bne.n	8008090 <_dtoa_r+0x6c0>
 800809e:	2230      	movs	r2, #48	@ 0x30
 80080a0:	f108 0801 	add.w	r8, r8, #1
 80080a4:	f88a 2000 	strb.w	r2, [sl]
 80080a8:	781a      	ldrb	r2, [r3, #0]
 80080aa:	3201      	adds	r2, #1
 80080ac:	701a      	strb	r2, [r3, #0]
 80080ae:	e7a0      	b.n	8007ff2 <_dtoa_r+0x622>
 80080b0:	4b6f      	ldr	r3, [pc, #444]	@ (8008270 <_dtoa_r+0x8a0>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	f7f8 fab8 	bl	8000628 <__aeabi_dmul>
 80080b8:	2200      	movs	r2, #0
 80080ba:	2300      	movs	r3, #0
 80080bc:	4604      	mov	r4, r0
 80080be:	460d      	mov	r5, r1
 80080c0:	f7f8 fd1a 	bl	8000af8 <__aeabi_dcmpeq>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d09f      	beq.n	8008008 <_dtoa_r+0x638>
 80080c8:	e7d1      	b.n	800806e <_dtoa_r+0x69e>
 80080ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080cc:	2a00      	cmp	r2, #0
 80080ce:	f000 80ea 	beq.w	80082a6 <_dtoa_r+0x8d6>
 80080d2:	9a07      	ldr	r2, [sp, #28]
 80080d4:	2a01      	cmp	r2, #1
 80080d6:	f300 80cd 	bgt.w	8008274 <_dtoa_r+0x8a4>
 80080da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80080dc:	2a00      	cmp	r2, #0
 80080de:	f000 80c1 	beq.w	8008264 <_dtoa_r+0x894>
 80080e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80080e6:	9c08      	ldr	r4, [sp, #32]
 80080e8:	9e00      	ldr	r6, [sp, #0]
 80080ea:	9a00      	ldr	r2, [sp, #0]
 80080ec:	441a      	add	r2, r3
 80080ee:	9200      	str	r2, [sp, #0]
 80080f0:	9a06      	ldr	r2, [sp, #24]
 80080f2:	2101      	movs	r1, #1
 80080f4:	441a      	add	r2, r3
 80080f6:	4648      	mov	r0, r9
 80080f8:	9206      	str	r2, [sp, #24]
 80080fa:	f000 fc2d 	bl	8008958 <__i2b>
 80080fe:	4605      	mov	r5, r0
 8008100:	b166      	cbz	r6, 800811c <_dtoa_r+0x74c>
 8008102:	9b06      	ldr	r3, [sp, #24]
 8008104:	2b00      	cmp	r3, #0
 8008106:	dd09      	ble.n	800811c <_dtoa_r+0x74c>
 8008108:	42b3      	cmp	r3, r6
 800810a:	9a00      	ldr	r2, [sp, #0]
 800810c:	bfa8      	it	ge
 800810e:	4633      	movge	r3, r6
 8008110:	1ad2      	subs	r2, r2, r3
 8008112:	9200      	str	r2, [sp, #0]
 8008114:	9a06      	ldr	r2, [sp, #24]
 8008116:	1af6      	subs	r6, r6, r3
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	9306      	str	r3, [sp, #24]
 800811c:	9b08      	ldr	r3, [sp, #32]
 800811e:	b30b      	cbz	r3, 8008164 <_dtoa_r+0x794>
 8008120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 80c6 	beq.w	80082b4 <_dtoa_r+0x8e4>
 8008128:	2c00      	cmp	r4, #0
 800812a:	f000 80c0 	beq.w	80082ae <_dtoa_r+0x8de>
 800812e:	4629      	mov	r1, r5
 8008130:	4622      	mov	r2, r4
 8008132:	4648      	mov	r0, r9
 8008134:	f000 fcc8 	bl	8008ac8 <__pow5mult>
 8008138:	9a02      	ldr	r2, [sp, #8]
 800813a:	4601      	mov	r1, r0
 800813c:	4605      	mov	r5, r0
 800813e:	4648      	mov	r0, r9
 8008140:	f000 fc20 	bl	8008984 <__multiply>
 8008144:	9902      	ldr	r1, [sp, #8]
 8008146:	4680      	mov	r8, r0
 8008148:	4648      	mov	r0, r9
 800814a:	f000 fb51 	bl	80087f0 <_Bfree>
 800814e:	9b08      	ldr	r3, [sp, #32]
 8008150:	1b1b      	subs	r3, r3, r4
 8008152:	9308      	str	r3, [sp, #32]
 8008154:	f000 80b1 	beq.w	80082ba <_dtoa_r+0x8ea>
 8008158:	9a08      	ldr	r2, [sp, #32]
 800815a:	4641      	mov	r1, r8
 800815c:	4648      	mov	r0, r9
 800815e:	f000 fcb3 	bl	8008ac8 <__pow5mult>
 8008162:	9002      	str	r0, [sp, #8]
 8008164:	2101      	movs	r1, #1
 8008166:	4648      	mov	r0, r9
 8008168:	f000 fbf6 	bl	8008958 <__i2b>
 800816c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800816e:	4604      	mov	r4, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 81d8 	beq.w	8008526 <_dtoa_r+0xb56>
 8008176:	461a      	mov	r2, r3
 8008178:	4601      	mov	r1, r0
 800817a:	4648      	mov	r0, r9
 800817c:	f000 fca4 	bl	8008ac8 <__pow5mult>
 8008180:	9b07      	ldr	r3, [sp, #28]
 8008182:	2b01      	cmp	r3, #1
 8008184:	4604      	mov	r4, r0
 8008186:	f300 809f 	bgt.w	80082c8 <_dtoa_r+0x8f8>
 800818a:	9b04      	ldr	r3, [sp, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	f040 8097 	bne.w	80082c0 <_dtoa_r+0x8f0>
 8008192:	9b05      	ldr	r3, [sp, #20]
 8008194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008198:	2b00      	cmp	r3, #0
 800819a:	f040 8093 	bne.w	80082c4 <_dtoa_r+0x8f4>
 800819e:	9b05      	ldr	r3, [sp, #20]
 80081a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081a4:	0d1b      	lsrs	r3, r3, #20
 80081a6:	051b      	lsls	r3, r3, #20
 80081a8:	b133      	cbz	r3, 80081b8 <_dtoa_r+0x7e8>
 80081aa:	9b00      	ldr	r3, [sp, #0]
 80081ac:	3301      	adds	r3, #1
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	9b06      	ldr	r3, [sp, #24]
 80081b2:	3301      	adds	r3, #1
 80081b4:	9306      	str	r3, [sp, #24]
 80081b6:	2301      	movs	r3, #1
 80081b8:	9308      	str	r3, [sp, #32]
 80081ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 81b8 	beq.w	8008532 <_dtoa_r+0xb62>
 80081c2:	6923      	ldr	r3, [r4, #16]
 80081c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081c8:	6918      	ldr	r0, [r3, #16]
 80081ca:	f000 fb79 	bl	80088c0 <__hi0bits>
 80081ce:	f1c0 0020 	rsb	r0, r0, #32
 80081d2:	9b06      	ldr	r3, [sp, #24]
 80081d4:	4418      	add	r0, r3
 80081d6:	f010 001f 	ands.w	r0, r0, #31
 80081da:	f000 8082 	beq.w	80082e2 <_dtoa_r+0x912>
 80081de:	f1c0 0320 	rsb	r3, r0, #32
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	dd73      	ble.n	80082ce <_dtoa_r+0x8fe>
 80081e6:	9b00      	ldr	r3, [sp, #0]
 80081e8:	f1c0 001c 	rsb	r0, r0, #28
 80081ec:	4403      	add	r3, r0
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	9b06      	ldr	r3, [sp, #24]
 80081f2:	4403      	add	r3, r0
 80081f4:	4406      	add	r6, r0
 80081f6:	9306      	str	r3, [sp, #24]
 80081f8:	9b00      	ldr	r3, [sp, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	dd05      	ble.n	800820a <_dtoa_r+0x83a>
 80081fe:	9902      	ldr	r1, [sp, #8]
 8008200:	461a      	mov	r2, r3
 8008202:	4648      	mov	r0, r9
 8008204:	f000 fcba 	bl	8008b7c <__lshift>
 8008208:	9002      	str	r0, [sp, #8]
 800820a:	9b06      	ldr	r3, [sp, #24]
 800820c:	2b00      	cmp	r3, #0
 800820e:	dd05      	ble.n	800821c <_dtoa_r+0x84c>
 8008210:	4621      	mov	r1, r4
 8008212:	461a      	mov	r2, r3
 8008214:	4648      	mov	r0, r9
 8008216:	f000 fcb1 	bl	8008b7c <__lshift>
 800821a:	4604      	mov	r4, r0
 800821c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800821e:	2b00      	cmp	r3, #0
 8008220:	d061      	beq.n	80082e6 <_dtoa_r+0x916>
 8008222:	9802      	ldr	r0, [sp, #8]
 8008224:	4621      	mov	r1, r4
 8008226:	f000 fd15 	bl	8008c54 <__mcmp>
 800822a:	2800      	cmp	r0, #0
 800822c:	da5b      	bge.n	80082e6 <_dtoa_r+0x916>
 800822e:	2300      	movs	r3, #0
 8008230:	9902      	ldr	r1, [sp, #8]
 8008232:	220a      	movs	r2, #10
 8008234:	4648      	mov	r0, r9
 8008236:	f000 fafd 	bl	8008834 <__multadd>
 800823a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800823c:	9002      	str	r0, [sp, #8]
 800823e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 8177 	beq.w	8008536 <_dtoa_r+0xb66>
 8008248:	4629      	mov	r1, r5
 800824a:	2300      	movs	r3, #0
 800824c:	220a      	movs	r2, #10
 800824e:	4648      	mov	r0, r9
 8008250:	f000 faf0 	bl	8008834 <__multadd>
 8008254:	f1bb 0f00 	cmp.w	fp, #0
 8008258:	4605      	mov	r5, r0
 800825a:	dc6f      	bgt.n	800833c <_dtoa_r+0x96c>
 800825c:	9b07      	ldr	r3, [sp, #28]
 800825e:	2b02      	cmp	r3, #2
 8008260:	dc49      	bgt.n	80082f6 <_dtoa_r+0x926>
 8008262:	e06b      	b.n	800833c <_dtoa_r+0x96c>
 8008264:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008266:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800826a:	e73c      	b.n	80080e6 <_dtoa_r+0x716>
 800826c:	3fe00000 	.word	0x3fe00000
 8008270:	40240000 	.word	0x40240000
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	1e5c      	subs	r4, r3, #1
 8008278:	9b08      	ldr	r3, [sp, #32]
 800827a:	42a3      	cmp	r3, r4
 800827c:	db09      	blt.n	8008292 <_dtoa_r+0x8c2>
 800827e:	1b1c      	subs	r4, r3, r4
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f6bf af30 	bge.w	80080e8 <_dtoa_r+0x718>
 8008288:	9b00      	ldr	r3, [sp, #0]
 800828a:	9a03      	ldr	r2, [sp, #12]
 800828c:	1a9e      	subs	r6, r3, r2
 800828e:	2300      	movs	r3, #0
 8008290:	e72b      	b.n	80080ea <_dtoa_r+0x71a>
 8008292:	9b08      	ldr	r3, [sp, #32]
 8008294:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008296:	9408      	str	r4, [sp, #32]
 8008298:	1ae3      	subs	r3, r4, r3
 800829a:	441a      	add	r2, r3
 800829c:	9e00      	ldr	r6, [sp, #0]
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	920d      	str	r2, [sp, #52]	@ 0x34
 80082a2:	2400      	movs	r4, #0
 80082a4:	e721      	b.n	80080ea <_dtoa_r+0x71a>
 80082a6:	9c08      	ldr	r4, [sp, #32]
 80082a8:	9e00      	ldr	r6, [sp, #0]
 80082aa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80082ac:	e728      	b.n	8008100 <_dtoa_r+0x730>
 80082ae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80082b2:	e751      	b.n	8008158 <_dtoa_r+0x788>
 80082b4:	9a08      	ldr	r2, [sp, #32]
 80082b6:	9902      	ldr	r1, [sp, #8]
 80082b8:	e750      	b.n	800815c <_dtoa_r+0x78c>
 80082ba:	f8cd 8008 	str.w	r8, [sp, #8]
 80082be:	e751      	b.n	8008164 <_dtoa_r+0x794>
 80082c0:	2300      	movs	r3, #0
 80082c2:	e779      	b.n	80081b8 <_dtoa_r+0x7e8>
 80082c4:	9b04      	ldr	r3, [sp, #16]
 80082c6:	e777      	b.n	80081b8 <_dtoa_r+0x7e8>
 80082c8:	2300      	movs	r3, #0
 80082ca:	9308      	str	r3, [sp, #32]
 80082cc:	e779      	b.n	80081c2 <_dtoa_r+0x7f2>
 80082ce:	d093      	beq.n	80081f8 <_dtoa_r+0x828>
 80082d0:	9a00      	ldr	r2, [sp, #0]
 80082d2:	331c      	adds	r3, #28
 80082d4:	441a      	add	r2, r3
 80082d6:	9200      	str	r2, [sp, #0]
 80082d8:	9a06      	ldr	r2, [sp, #24]
 80082da:	441a      	add	r2, r3
 80082dc:	441e      	add	r6, r3
 80082de:	9206      	str	r2, [sp, #24]
 80082e0:	e78a      	b.n	80081f8 <_dtoa_r+0x828>
 80082e2:	4603      	mov	r3, r0
 80082e4:	e7f4      	b.n	80082d0 <_dtoa_r+0x900>
 80082e6:	9b03      	ldr	r3, [sp, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	46b8      	mov	r8, r7
 80082ec:	dc20      	bgt.n	8008330 <_dtoa_r+0x960>
 80082ee:	469b      	mov	fp, r3
 80082f0:	9b07      	ldr	r3, [sp, #28]
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	dd1e      	ble.n	8008334 <_dtoa_r+0x964>
 80082f6:	f1bb 0f00 	cmp.w	fp, #0
 80082fa:	f47f adb1 	bne.w	8007e60 <_dtoa_r+0x490>
 80082fe:	4621      	mov	r1, r4
 8008300:	465b      	mov	r3, fp
 8008302:	2205      	movs	r2, #5
 8008304:	4648      	mov	r0, r9
 8008306:	f000 fa95 	bl	8008834 <__multadd>
 800830a:	4601      	mov	r1, r0
 800830c:	4604      	mov	r4, r0
 800830e:	9802      	ldr	r0, [sp, #8]
 8008310:	f000 fca0 	bl	8008c54 <__mcmp>
 8008314:	2800      	cmp	r0, #0
 8008316:	f77f ada3 	ble.w	8007e60 <_dtoa_r+0x490>
 800831a:	4656      	mov	r6, sl
 800831c:	2331      	movs	r3, #49	@ 0x31
 800831e:	f806 3b01 	strb.w	r3, [r6], #1
 8008322:	f108 0801 	add.w	r8, r8, #1
 8008326:	e59f      	b.n	8007e68 <_dtoa_r+0x498>
 8008328:	9c03      	ldr	r4, [sp, #12]
 800832a:	46b8      	mov	r8, r7
 800832c:	4625      	mov	r5, r4
 800832e:	e7f4      	b.n	800831a <_dtoa_r+0x94a>
 8008330:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 8101 	beq.w	800853e <_dtoa_r+0xb6e>
 800833c:	2e00      	cmp	r6, #0
 800833e:	dd05      	ble.n	800834c <_dtoa_r+0x97c>
 8008340:	4629      	mov	r1, r5
 8008342:	4632      	mov	r2, r6
 8008344:	4648      	mov	r0, r9
 8008346:	f000 fc19 	bl	8008b7c <__lshift>
 800834a:	4605      	mov	r5, r0
 800834c:	9b08      	ldr	r3, [sp, #32]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d05c      	beq.n	800840c <_dtoa_r+0xa3c>
 8008352:	6869      	ldr	r1, [r5, #4]
 8008354:	4648      	mov	r0, r9
 8008356:	f000 fa0b 	bl	8008770 <_Balloc>
 800835a:	4606      	mov	r6, r0
 800835c:	b928      	cbnz	r0, 800836a <_dtoa_r+0x99a>
 800835e:	4b82      	ldr	r3, [pc, #520]	@ (8008568 <_dtoa_r+0xb98>)
 8008360:	4602      	mov	r2, r0
 8008362:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008366:	f7ff bb4a 	b.w	80079fe <_dtoa_r+0x2e>
 800836a:	692a      	ldr	r2, [r5, #16]
 800836c:	3202      	adds	r2, #2
 800836e:	0092      	lsls	r2, r2, #2
 8008370:	f105 010c 	add.w	r1, r5, #12
 8008374:	300c      	adds	r0, #12
 8008376:	f7ff fa76 	bl	8007866 <memcpy>
 800837a:	2201      	movs	r2, #1
 800837c:	4631      	mov	r1, r6
 800837e:	4648      	mov	r0, r9
 8008380:	f000 fbfc 	bl	8008b7c <__lshift>
 8008384:	f10a 0301 	add.w	r3, sl, #1
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	eb0a 030b 	add.w	r3, sl, fp
 800838e:	9308      	str	r3, [sp, #32]
 8008390:	9b04      	ldr	r3, [sp, #16]
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	462f      	mov	r7, r5
 8008398:	9306      	str	r3, [sp, #24]
 800839a:	4605      	mov	r5, r0
 800839c:	9b00      	ldr	r3, [sp, #0]
 800839e:	9802      	ldr	r0, [sp, #8]
 80083a0:	4621      	mov	r1, r4
 80083a2:	f103 3bff 	add.w	fp, r3, #4294967295
 80083a6:	f7ff fa8b 	bl	80078c0 <quorem>
 80083aa:	4603      	mov	r3, r0
 80083ac:	3330      	adds	r3, #48	@ 0x30
 80083ae:	9003      	str	r0, [sp, #12]
 80083b0:	4639      	mov	r1, r7
 80083b2:	9802      	ldr	r0, [sp, #8]
 80083b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80083b6:	f000 fc4d 	bl	8008c54 <__mcmp>
 80083ba:	462a      	mov	r2, r5
 80083bc:	9004      	str	r0, [sp, #16]
 80083be:	4621      	mov	r1, r4
 80083c0:	4648      	mov	r0, r9
 80083c2:	f000 fc63 	bl	8008c8c <__mdiff>
 80083c6:	68c2      	ldr	r2, [r0, #12]
 80083c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ca:	4606      	mov	r6, r0
 80083cc:	bb02      	cbnz	r2, 8008410 <_dtoa_r+0xa40>
 80083ce:	4601      	mov	r1, r0
 80083d0:	9802      	ldr	r0, [sp, #8]
 80083d2:	f000 fc3f 	bl	8008c54 <__mcmp>
 80083d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083d8:	4602      	mov	r2, r0
 80083da:	4631      	mov	r1, r6
 80083dc:	4648      	mov	r0, r9
 80083de:	920c      	str	r2, [sp, #48]	@ 0x30
 80083e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80083e2:	f000 fa05 	bl	80087f0 <_Bfree>
 80083e6:	9b07      	ldr	r3, [sp, #28]
 80083e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80083ea:	9e00      	ldr	r6, [sp, #0]
 80083ec:	ea42 0103 	orr.w	r1, r2, r3
 80083f0:	9b06      	ldr	r3, [sp, #24]
 80083f2:	4319      	orrs	r1, r3
 80083f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083f6:	d10d      	bne.n	8008414 <_dtoa_r+0xa44>
 80083f8:	2b39      	cmp	r3, #57	@ 0x39
 80083fa:	d027      	beq.n	800844c <_dtoa_r+0xa7c>
 80083fc:	9a04      	ldr	r2, [sp, #16]
 80083fe:	2a00      	cmp	r2, #0
 8008400:	dd01      	ble.n	8008406 <_dtoa_r+0xa36>
 8008402:	9b03      	ldr	r3, [sp, #12]
 8008404:	3331      	adds	r3, #49	@ 0x31
 8008406:	f88b 3000 	strb.w	r3, [fp]
 800840a:	e52e      	b.n	8007e6a <_dtoa_r+0x49a>
 800840c:	4628      	mov	r0, r5
 800840e:	e7b9      	b.n	8008384 <_dtoa_r+0x9b4>
 8008410:	2201      	movs	r2, #1
 8008412:	e7e2      	b.n	80083da <_dtoa_r+0xa0a>
 8008414:	9904      	ldr	r1, [sp, #16]
 8008416:	2900      	cmp	r1, #0
 8008418:	db04      	blt.n	8008424 <_dtoa_r+0xa54>
 800841a:	9807      	ldr	r0, [sp, #28]
 800841c:	4301      	orrs	r1, r0
 800841e:	9806      	ldr	r0, [sp, #24]
 8008420:	4301      	orrs	r1, r0
 8008422:	d120      	bne.n	8008466 <_dtoa_r+0xa96>
 8008424:	2a00      	cmp	r2, #0
 8008426:	ddee      	ble.n	8008406 <_dtoa_r+0xa36>
 8008428:	9902      	ldr	r1, [sp, #8]
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	2201      	movs	r2, #1
 800842e:	4648      	mov	r0, r9
 8008430:	f000 fba4 	bl	8008b7c <__lshift>
 8008434:	4621      	mov	r1, r4
 8008436:	9002      	str	r0, [sp, #8]
 8008438:	f000 fc0c 	bl	8008c54 <__mcmp>
 800843c:	2800      	cmp	r0, #0
 800843e:	9b00      	ldr	r3, [sp, #0]
 8008440:	dc02      	bgt.n	8008448 <_dtoa_r+0xa78>
 8008442:	d1e0      	bne.n	8008406 <_dtoa_r+0xa36>
 8008444:	07da      	lsls	r2, r3, #31
 8008446:	d5de      	bpl.n	8008406 <_dtoa_r+0xa36>
 8008448:	2b39      	cmp	r3, #57	@ 0x39
 800844a:	d1da      	bne.n	8008402 <_dtoa_r+0xa32>
 800844c:	2339      	movs	r3, #57	@ 0x39
 800844e:	f88b 3000 	strb.w	r3, [fp]
 8008452:	4633      	mov	r3, r6
 8008454:	461e      	mov	r6, r3
 8008456:	3b01      	subs	r3, #1
 8008458:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800845c:	2a39      	cmp	r2, #57	@ 0x39
 800845e:	d04e      	beq.n	80084fe <_dtoa_r+0xb2e>
 8008460:	3201      	adds	r2, #1
 8008462:	701a      	strb	r2, [r3, #0]
 8008464:	e501      	b.n	8007e6a <_dtoa_r+0x49a>
 8008466:	2a00      	cmp	r2, #0
 8008468:	dd03      	ble.n	8008472 <_dtoa_r+0xaa2>
 800846a:	2b39      	cmp	r3, #57	@ 0x39
 800846c:	d0ee      	beq.n	800844c <_dtoa_r+0xa7c>
 800846e:	3301      	adds	r3, #1
 8008470:	e7c9      	b.n	8008406 <_dtoa_r+0xa36>
 8008472:	9a00      	ldr	r2, [sp, #0]
 8008474:	9908      	ldr	r1, [sp, #32]
 8008476:	f802 3c01 	strb.w	r3, [r2, #-1]
 800847a:	428a      	cmp	r2, r1
 800847c:	d028      	beq.n	80084d0 <_dtoa_r+0xb00>
 800847e:	9902      	ldr	r1, [sp, #8]
 8008480:	2300      	movs	r3, #0
 8008482:	220a      	movs	r2, #10
 8008484:	4648      	mov	r0, r9
 8008486:	f000 f9d5 	bl	8008834 <__multadd>
 800848a:	42af      	cmp	r7, r5
 800848c:	9002      	str	r0, [sp, #8]
 800848e:	f04f 0300 	mov.w	r3, #0
 8008492:	f04f 020a 	mov.w	r2, #10
 8008496:	4639      	mov	r1, r7
 8008498:	4648      	mov	r0, r9
 800849a:	d107      	bne.n	80084ac <_dtoa_r+0xadc>
 800849c:	f000 f9ca 	bl	8008834 <__multadd>
 80084a0:	4607      	mov	r7, r0
 80084a2:	4605      	mov	r5, r0
 80084a4:	9b00      	ldr	r3, [sp, #0]
 80084a6:	3301      	adds	r3, #1
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	e777      	b.n	800839c <_dtoa_r+0x9cc>
 80084ac:	f000 f9c2 	bl	8008834 <__multadd>
 80084b0:	4629      	mov	r1, r5
 80084b2:	4607      	mov	r7, r0
 80084b4:	2300      	movs	r3, #0
 80084b6:	220a      	movs	r2, #10
 80084b8:	4648      	mov	r0, r9
 80084ba:	f000 f9bb 	bl	8008834 <__multadd>
 80084be:	4605      	mov	r5, r0
 80084c0:	e7f0      	b.n	80084a4 <_dtoa_r+0xad4>
 80084c2:	f1bb 0f00 	cmp.w	fp, #0
 80084c6:	bfcc      	ite	gt
 80084c8:	465e      	movgt	r6, fp
 80084ca:	2601      	movle	r6, #1
 80084cc:	4456      	add	r6, sl
 80084ce:	2700      	movs	r7, #0
 80084d0:	9902      	ldr	r1, [sp, #8]
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	2201      	movs	r2, #1
 80084d6:	4648      	mov	r0, r9
 80084d8:	f000 fb50 	bl	8008b7c <__lshift>
 80084dc:	4621      	mov	r1, r4
 80084de:	9002      	str	r0, [sp, #8]
 80084e0:	f000 fbb8 	bl	8008c54 <__mcmp>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	dcb4      	bgt.n	8008452 <_dtoa_r+0xa82>
 80084e8:	d102      	bne.n	80084f0 <_dtoa_r+0xb20>
 80084ea:	9b00      	ldr	r3, [sp, #0]
 80084ec:	07db      	lsls	r3, r3, #31
 80084ee:	d4b0      	bmi.n	8008452 <_dtoa_r+0xa82>
 80084f0:	4633      	mov	r3, r6
 80084f2:	461e      	mov	r6, r3
 80084f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084f8:	2a30      	cmp	r2, #48	@ 0x30
 80084fa:	d0fa      	beq.n	80084f2 <_dtoa_r+0xb22>
 80084fc:	e4b5      	b.n	8007e6a <_dtoa_r+0x49a>
 80084fe:	459a      	cmp	sl, r3
 8008500:	d1a8      	bne.n	8008454 <_dtoa_r+0xa84>
 8008502:	2331      	movs	r3, #49	@ 0x31
 8008504:	f108 0801 	add.w	r8, r8, #1
 8008508:	f88a 3000 	strb.w	r3, [sl]
 800850c:	e4ad      	b.n	8007e6a <_dtoa_r+0x49a>
 800850e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008510:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800856c <_dtoa_r+0xb9c>
 8008514:	b11b      	cbz	r3, 800851e <_dtoa_r+0xb4e>
 8008516:	f10a 0308 	add.w	r3, sl, #8
 800851a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800851c:	6013      	str	r3, [r2, #0]
 800851e:	4650      	mov	r0, sl
 8008520:	b017      	add	sp, #92	@ 0x5c
 8008522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008526:	9b07      	ldr	r3, [sp, #28]
 8008528:	2b01      	cmp	r3, #1
 800852a:	f77f ae2e 	ble.w	800818a <_dtoa_r+0x7ba>
 800852e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008530:	9308      	str	r3, [sp, #32]
 8008532:	2001      	movs	r0, #1
 8008534:	e64d      	b.n	80081d2 <_dtoa_r+0x802>
 8008536:	f1bb 0f00 	cmp.w	fp, #0
 800853a:	f77f aed9 	ble.w	80082f0 <_dtoa_r+0x920>
 800853e:	4656      	mov	r6, sl
 8008540:	9802      	ldr	r0, [sp, #8]
 8008542:	4621      	mov	r1, r4
 8008544:	f7ff f9bc 	bl	80078c0 <quorem>
 8008548:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800854c:	f806 3b01 	strb.w	r3, [r6], #1
 8008550:	eba6 020a 	sub.w	r2, r6, sl
 8008554:	4593      	cmp	fp, r2
 8008556:	ddb4      	ble.n	80084c2 <_dtoa_r+0xaf2>
 8008558:	9902      	ldr	r1, [sp, #8]
 800855a:	2300      	movs	r3, #0
 800855c:	220a      	movs	r2, #10
 800855e:	4648      	mov	r0, r9
 8008560:	f000 f968 	bl	8008834 <__multadd>
 8008564:	9002      	str	r0, [sp, #8]
 8008566:	e7eb      	b.n	8008540 <_dtoa_r+0xb70>
 8008568:	0800ace3 	.word	0x0800ace3
 800856c:	0800ac7e 	.word	0x0800ac7e

08008570 <_free_r>:
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	4605      	mov	r5, r0
 8008574:	2900      	cmp	r1, #0
 8008576:	d041      	beq.n	80085fc <_free_r+0x8c>
 8008578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800857c:	1f0c      	subs	r4, r1, #4
 800857e:	2b00      	cmp	r3, #0
 8008580:	bfb8      	it	lt
 8008582:	18e4      	addlt	r4, r4, r3
 8008584:	f000 f8e8 	bl	8008758 <__malloc_lock>
 8008588:	4a1d      	ldr	r2, [pc, #116]	@ (8008600 <_free_r+0x90>)
 800858a:	6813      	ldr	r3, [r2, #0]
 800858c:	b933      	cbnz	r3, 800859c <_free_r+0x2c>
 800858e:	6063      	str	r3, [r4, #4]
 8008590:	6014      	str	r4, [r2, #0]
 8008592:	4628      	mov	r0, r5
 8008594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008598:	f000 b8e4 	b.w	8008764 <__malloc_unlock>
 800859c:	42a3      	cmp	r3, r4
 800859e:	d908      	bls.n	80085b2 <_free_r+0x42>
 80085a0:	6820      	ldr	r0, [r4, #0]
 80085a2:	1821      	adds	r1, r4, r0
 80085a4:	428b      	cmp	r3, r1
 80085a6:	bf01      	itttt	eq
 80085a8:	6819      	ldreq	r1, [r3, #0]
 80085aa:	685b      	ldreq	r3, [r3, #4]
 80085ac:	1809      	addeq	r1, r1, r0
 80085ae:	6021      	streq	r1, [r4, #0]
 80085b0:	e7ed      	b.n	800858e <_free_r+0x1e>
 80085b2:	461a      	mov	r2, r3
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	b10b      	cbz	r3, 80085bc <_free_r+0x4c>
 80085b8:	42a3      	cmp	r3, r4
 80085ba:	d9fa      	bls.n	80085b2 <_free_r+0x42>
 80085bc:	6811      	ldr	r1, [r2, #0]
 80085be:	1850      	adds	r0, r2, r1
 80085c0:	42a0      	cmp	r0, r4
 80085c2:	d10b      	bne.n	80085dc <_free_r+0x6c>
 80085c4:	6820      	ldr	r0, [r4, #0]
 80085c6:	4401      	add	r1, r0
 80085c8:	1850      	adds	r0, r2, r1
 80085ca:	4283      	cmp	r3, r0
 80085cc:	6011      	str	r1, [r2, #0]
 80085ce:	d1e0      	bne.n	8008592 <_free_r+0x22>
 80085d0:	6818      	ldr	r0, [r3, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	6053      	str	r3, [r2, #4]
 80085d6:	4408      	add	r0, r1
 80085d8:	6010      	str	r0, [r2, #0]
 80085da:	e7da      	b.n	8008592 <_free_r+0x22>
 80085dc:	d902      	bls.n	80085e4 <_free_r+0x74>
 80085de:	230c      	movs	r3, #12
 80085e0:	602b      	str	r3, [r5, #0]
 80085e2:	e7d6      	b.n	8008592 <_free_r+0x22>
 80085e4:	6820      	ldr	r0, [r4, #0]
 80085e6:	1821      	adds	r1, r4, r0
 80085e8:	428b      	cmp	r3, r1
 80085ea:	bf04      	itt	eq
 80085ec:	6819      	ldreq	r1, [r3, #0]
 80085ee:	685b      	ldreq	r3, [r3, #4]
 80085f0:	6063      	str	r3, [r4, #4]
 80085f2:	bf04      	itt	eq
 80085f4:	1809      	addeq	r1, r1, r0
 80085f6:	6021      	streq	r1, [r4, #0]
 80085f8:	6054      	str	r4, [r2, #4]
 80085fa:	e7ca      	b.n	8008592 <_free_r+0x22>
 80085fc:	bd38      	pop	{r3, r4, r5, pc}
 80085fe:	bf00      	nop
 8008600:	20000dc8 	.word	0x20000dc8

08008604 <malloc>:
 8008604:	4b02      	ldr	r3, [pc, #8]	@ (8008610 <malloc+0xc>)
 8008606:	4601      	mov	r1, r0
 8008608:	6818      	ldr	r0, [r3, #0]
 800860a:	f000 b825 	b.w	8008658 <_malloc_r>
 800860e:	bf00      	nop
 8008610:	2000001c 	.word	0x2000001c

08008614 <sbrk_aligned>:
 8008614:	b570      	push	{r4, r5, r6, lr}
 8008616:	4e0f      	ldr	r6, [pc, #60]	@ (8008654 <sbrk_aligned+0x40>)
 8008618:	460c      	mov	r4, r1
 800861a:	6831      	ldr	r1, [r6, #0]
 800861c:	4605      	mov	r5, r0
 800861e:	b911      	cbnz	r1, 8008626 <sbrk_aligned+0x12>
 8008620:	f001 f84a 	bl	80096b8 <_sbrk_r>
 8008624:	6030      	str	r0, [r6, #0]
 8008626:	4621      	mov	r1, r4
 8008628:	4628      	mov	r0, r5
 800862a:	f001 f845 	bl	80096b8 <_sbrk_r>
 800862e:	1c43      	adds	r3, r0, #1
 8008630:	d103      	bne.n	800863a <sbrk_aligned+0x26>
 8008632:	f04f 34ff 	mov.w	r4, #4294967295
 8008636:	4620      	mov	r0, r4
 8008638:	bd70      	pop	{r4, r5, r6, pc}
 800863a:	1cc4      	adds	r4, r0, #3
 800863c:	f024 0403 	bic.w	r4, r4, #3
 8008640:	42a0      	cmp	r0, r4
 8008642:	d0f8      	beq.n	8008636 <sbrk_aligned+0x22>
 8008644:	1a21      	subs	r1, r4, r0
 8008646:	4628      	mov	r0, r5
 8008648:	f001 f836 	bl	80096b8 <_sbrk_r>
 800864c:	3001      	adds	r0, #1
 800864e:	d1f2      	bne.n	8008636 <sbrk_aligned+0x22>
 8008650:	e7ef      	b.n	8008632 <sbrk_aligned+0x1e>
 8008652:	bf00      	nop
 8008654:	20000dc4 	.word	0x20000dc4

08008658 <_malloc_r>:
 8008658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800865c:	1ccd      	adds	r5, r1, #3
 800865e:	f025 0503 	bic.w	r5, r5, #3
 8008662:	3508      	adds	r5, #8
 8008664:	2d0c      	cmp	r5, #12
 8008666:	bf38      	it	cc
 8008668:	250c      	movcc	r5, #12
 800866a:	2d00      	cmp	r5, #0
 800866c:	4606      	mov	r6, r0
 800866e:	db01      	blt.n	8008674 <_malloc_r+0x1c>
 8008670:	42a9      	cmp	r1, r5
 8008672:	d904      	bls.n	800867e <_malloc_r+0x26>
 8008674:	230c      	movs	r3, #12
 8008676:	6033      	str	r3, [r6, #0]
 8008678:	2000      	movs	r0, #0
 800867a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800867e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008754 <_malloc_r+0xfc>
 8008682:	f000 f869 	bl	8008758 <__malloc_lock>
 8008686:	f8d8 3000 	ldr.w	r3, [r8]
 800868a:	461c      	mov	r4, r3
 800868c:	bb44      	cbnz	r4, 80086e0 <_malloc_r+0x88>
 800868e:	4629      	mov	r1, r5
 8008690:	4630      	mov	r0, r6
 8008692:	f7ff ffbf 	bl	8008614 <sbrk_aligned>
 8008696:	1c43      	adds	r3, r0, #1
 8008698:	4604      	mov	r4, r0
 800869a:	d158      	bne.n	800874e <_malloc_r+0xf6>
 800869c:	f8d8 4000 	ldr.w	r4, [r8]
 80086a0:	4627      	mov	r7, r4
 80086a2:	2f00      	cmp	r7, #0
 80086a4:	d143      	bne.n	800872e <_malloc_r+0xd6>
 80086a6:	2c00      	cmp	r4, #0
 80086a8:	d04b      	beq.n	8008742 <_malloc_r+0xea>
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	4639      	mov	r1, r7
 80086ae:	4630      	mov	r0, r6
 80086b0:	eb04 0903 	add.w	r9, r4, r3
 80086b4:	f001 f800 	bl	80096b8 <_sbrk_r>
 80086b8:	4581      	cmp	r9, r0
 80086ba:	d142      	bne.n	8008742 <_malloc_r+0xea>
 80086bc:	6821      	ldr	r1, [r4, #0]
 80086be:	1a6d      	subs	r5, r5, r1
 80086c0:	4629      	mov	r1, r5
 80086c2:	4630      	mov	r0, r6
 80086c4:	f7ff ffa6 	bl	8008614 <sbrk_aligned>
 80086c8:	3001      	adds	r0, #1
 80086ca:	d03a      	beq.n	8008742 <_malloc_r+0xea>
 80086cc:	6823      	ldr	r3, [r4, #0]
 80086ce:	442b      	add	r3, r5
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	f8d8 3000 	ldr.w	r3, [r8]
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	bb62      	cbnz	r2, 8008734 <_malloc_r+0xdc>
 80086da:	f8c8 7000 	str.w	r7, [r8]
 80086de:	e00f      	b.n	8008700 <_malloc_r+0xa8>
 80086e0:	6822      	ldr	r2, [r4, #0]
 80086e2:	1b52      	subs	r2, r2, r5
 80086e4:	d420      	bmi.n	8008728 <_malloc_r+0xd0>
 80086e6:	2a0b      	cmp	r2, #11
 80086e8:	d917      	bls.n	800871a <_malloc_r+0xc2>
 80086ea:	1961      	adds	r1, r4, r5
 80086ec:	42a3      	cmp	r3, r4
 80086ee:	6025      	str	r5, [r4, #0]
 80086f0:	bf18      	it	ne
 80086f2:	6059      	strne	r1, [r3, #4]
 80086f4:	6863      	ldr	r3, [r4, #4]
 80086f6:	bf08      	it	eq
 80086f8:	f8c8 1000 	streq.w	r1, [r8]
 80086fc:	5162      	str	r2, [r4, r5]
 80086fe:	604b      	str	r3, [r1, #4]
 8008700:	4630      	mov	r0, r6
 8008702:	f000 f82f 	bl	8008764 <__malloc_unlock>
 8008706:	f104 000b 	add.w	r0, r4, #11
 800870a:	1d23      	adds	r3, r4, #4
 800870c:	f020 0007 	bic.w	r0, r0, #7
 8008710:	1ac2      	subs	r2, r0, r3
 8008712:	bf1c      	itt	ne
 8008714:	1a1b      	subne	r3, r3, r0
 8008716:	50a3      	strne	r3, [r4, r2]
 8008718:	e7af      	b.n	800867a <_malloc_r+0x22>
 800871a:	6862      	ldr	r2, [r4, #4]
 800871c:	42a3      	cmp	r3, r4
 800871e:	bf0c      	ite	eq
 8008720:	f8c8 2000 	streq.w	r2, [r8]
 8008724:	605a      	strne	r2, [r3, #4]
 8008726:	e7eb      	b.n	8008700 <_malloc_r+0xa8>
 8008728:	4623      	mov	r3, r4
 800872a:	6864      	ldr	r4, [r4, #4]
 800872c:	e7ae      	b.n	800868c <_malloc_r+0x34>
 800872e:	463c      	mov	r4, r7
 8008730:	687f      	ldr	r7, [r7, #4]
 8008732:	e7b6      	b.n	80086a2 <_malloc_r+0x4a>
 8008734:	461a      	mov	r2, r3
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	42a3      	cmp	r3, r4
 800873a:	d1fb      	bne.n	8008734 <_malloc_r+0xdc>
 800873c:	2300      	movs	r3, #0
 800873e:	6053      	str	r3, [r2, #4]
 8008740:	e7de      	b.n	8008700 <_malloc_r+0xa8>
 8008742:	230c      	movs	r3, #12
 8008744:	6033      	str	r3, [r6, #0]
 8008746:	4630      	mov	r0, r6
 8008748:	f000 f80c 	bl	8008764 <__malloc_unlock>
 800874c:	e794      	b.n	8008678 <_malloc_r+0x20>
 800874e:	6005      	str	r5, [r0, #0]
 8008750:	e7d6      	b.n	8008700 <_malloc_r+0xa8>
 8008752:	bf00      	nop
 8008754:	20000dc8 	.word	0x20000dc8

08008758 <__malloc_lock>:
 8008758:	4801      	ldr	r0, [pc, #4]	@ (8008760 <__malloc_lock+0x8>)
 800875a:	f7ff b87a 	b.w	8007852 <__retarget_lock_acquire_recursive>
 800875e:	bf00      	nop
 8008760:	20000dc0 	.word	0x20000dc0

08008764 <__malloc_unlock>:
 8008764:	4801      	ldr	r0, [pc, #4]	@ (800876c <__malloc_unlock+0x8>)
 8008766:	f7ff b875 	b.w	8007854 <__retarget_lock_release_recursive>
 800876a:	bf00      	nop
 800876c:	20000dc0 	.word	0x20000dc0

08008770 <_Balloc>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	69c6      	ldr	r6, [r0, #28]
 8008774:	4604      	mov	r4, r0
 8008776:	460d      	mov	r5, r1
 8008778:	b976      	cbnz	r6, 8008798 <_Balloc+0x28>
 800877a:	2010      	movs	r0, #16
 800877c:	f7ff ff42 	bl	8008604 <malloc>
 8008780:	4602      	mov	r2, r0
 8008782:	61e0      	str	r0, [r4, #28]
 8008784:	b920      	cbnz	r0, 8008790 <_Balloc+0x20>
 8008786:	4b18      	ldr	r3, [pc, #96]	@ (80087e8 <_Balloc+0x78>)
 8008788:	4818      	ldr	r0, [pc, #96]	@ (80087ec <_Balloc+0x7c>)
 800878a:	216b      	movs	r1, #107	@ 0x6b
 800878c:	f7ff f87a 	bl	8007884 <__assert_func>
 8008790:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008794:	6006      	str	r6, [r0, #0]
 8008796:	60c6      	str	r6, [r0, #12]
 8008798:	69e6      	ldr	r6, [r4, #28]
 800879a:	68f3      	ldr	r3, [r6, #12]
 800879c:	b183      	cbz	r3, 80087c0 <_Balloc+0x50>
 800879e:	69e3      	ldr	r3, [r4, #28]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087a6:	b9b8      	cbnz	r0, 80087d8 <_Balloc+0x68>
 80087a8:	2101      	movs	r1, #1
 80087aa:	fa01 f605 	lsl.w	r6, r1, r5
 80087ae:	1d72      	adds	r2, r6, #5
 80087b0:	0092      	lsls	r2, r2, #2
 80087b2:	4620      	mov	r0, r4
 80087b4:	f000 ff97 	bl	80096e6 <_calloc_r>
 80087b8:	b160      	cbz	r0, 80087d4 <_Balloc+0x64>
 80087ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087be:	e00e      	b.n	80087de <_Balloc+0x6e>
 80087c0:	2221      	movs	r2, #33	@ 0x21
 80087c2:	2104      	movs	r1, #4
 80087c4:	4620      	mov	r0, r4
 80087c6:	f000 ff8e 	bl	80096e6 <_calloc_r>
 80087ca:	69e3      	ldr	r3, [r4, #28]
 80087cc:	60f0      	str	r0, [r6, #12]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e4      	bne.n	800879e <_Balloc+0x2e>
 80087d4:	2000      	movs	r0, #0
 80087d6:	bd70      	pop	{r4, r5, r6, pc}
 80087d8:	6802      	ldr	r2, [r0, #0]
 80087da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087de:	2300      	movs	r3, #0
 80087e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087e4:	e7f7      	b.n	80087d6 <_Balloc+0x66>
 80087e6:	bf00      	nop
 80087e8:	0800abd1 	.word	0x0800abd1
 80087ec:	0800acf4 	.word	0x0800acf4

080087f0 <_Bfree>:
 80087f0:	b570      	push	{r4, r5, r6, lr}
 80087f2:	69c6      	ldr	r6, [r0, #28]
 80087f4:	4605      	mov	r5, r0
 80087f6:	460c      	mov	r4, r1
 80087f8:	b976      	cbnz	r6, 8008818 <_Bfree+0x28>
 80087fa:	2010      	movs	r0, #16
 80087fc:	f7ff ff02 	bl	8008604 <malloc>
 8008800:	4602      	mov	r2, r0
 8008802:	61e8      	str	r0, [r5, #28]
 8008804:	b920      	cbnz	r0, 8008810 <_Bfree+0x20>
 8008806:	4b09      	ldr	r3, [pc, #36]	@ (800882c <_Bfree+0x3c>)
 8008808:	4809      	ldr	r0, [pc, #36]	@ (8008830 <_Bfree+0x40>)
 800880a:	218f      	movs	r1, #143	@ 0x8f
 800880c:	f7ff f83a 	bl	8007884 <__assert_func>
 8008810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008814:	6006      	str	r6, [r0, #0]
 8008816:	60c6      	str	r6, [r0, #12]
 8008818:	b13c      	cbz	r4, 800882a <_Bfree+0x3a>
 800881a:	69eb      	ldr	r3, [r5, #28]
 800881c:	6862      	ldr	r2, [r4, #4]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008824:	6021      	str	r1, [r4, #0]
 8008826:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800882a:	bd70      	pop	{r4, r5, r6, pc}
 800882c:	0800abd1 	.word	0x0800abd1
 8008830:	0800acf4 	.word	0x0800acf4

08008834 <__multadd>:
 8008834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008838:	690d      	ldr	r5, [r1, #16]
 800883a:	4607      	mov	r7, r0
 800883c:	460c      	mov	r4, r1
 800883e:	461e      	mov	r6, r3
 8008840:	f101 0c14 	add.w	ip, r1, #20
 8008844:	2000      	movs	r0, #0
 8008846:	f8dc 3000 	ldr.w	r3, [ip]
 800884a:	b299      	uxth	r1, r3
 800884c:	fb02 6101 	mla	r1, r2, r1, r6
 8008850:	0c1e      	lsrs	r6, r3, #16
 8008852:	0c0b      	lsrs	r3, r1, #16
 8008854:	fb02 3306 	mla	r3, r2, r6, r3
 8008858:	b289      	uxth	r1, r1
 800885a:	3001      	adds	r0, #1
 800885c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008860:	4285      	cmp	r5, r0
 8008862:	f84c 1b04 	str.w	r1, [ip], #4
 8008866:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800886a:	dcec      	bgt.n	8008846 <__multadd+0x12>
 800886c:	b30e      	cbz	r6, 80088b2 <__multadd+0x7e>
 800886e:	68a3      	ldr	r3, [r4, #8]
 8008870:	42ab      	cmp	r3, r5
 8008872:	dc19      	bgt.n	80088a8 <__multadd+0x74>
 8008874:	6861      	ldr	r1, [r4, #4]
 8008876:	4638      	mov	r0, r7
 8008878:	3101      	adds	r1, #1
 800887a:	f7ff ff79 	bl	8008770 <_Balloc>
 800887e:	4680      	mov	r8, r0
 8008880:	b928      	cbnz	r0, 800888e <__multadd+0x5a>
 8008882:	4602      	mov	r2, r0
 8008884:	4b0c      	ldr	r3, [pc, #48]	@ (80088b8 <__multadd+0x84>)
 8008886:	480d      	ldr	r0, [pc, #52]	@ (80088bc <__multadd+0x88>)
 8008888:	21ba      	movs	r1, #186	@ 0xba
 800888a:	f7fe fffb 	bl	8007884 <__assert_func>
 800888e:	6922      	ldr	r2, [r4, #16]
 8008890:	3202      	adds	r2, #2
 8008892:	f104 010c 	add.w	r1, r4, #12
 8008896:	0092      	lsls	r2, r2, #2
 8008898:	300c      	adds	r0, #12
 800889a:	f7fe ffe4 	bl	8007866 <memcpy>
 800889e:	4621      	mov	r1, r4
 80088a0:	4638      	mov	r0, r7
 80088a2:	f7ff ffa5 	bl	80087f0 <_Bfree>
 80088a6:	4644      	mov	r4, r8
 80088a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088ac:	3501      	adds	r5, #1
 80088ae:	615e      	str	r6, [r3, #20]
 80088b0:	6125      	str	r5, [r4, #16]
 80088b2:	4620      	mov	r0, r4
 80088b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088b8:	0800ace3 	.word	0x0800ace3
 80088bc:	0800acf4 	.word	0x0800acf4

080088c0 <__hi0bits>:
 80088c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80088c4:	4603      	mov	r3, r0
 80088c6:	bf36      	itet	cc
 80088c8:	0403      	lslcc	r3, r0, #16
 80088ca:	2000      	movcs	r0, #0
 80088cc:	2010      	movcc	r0, #16
 80088ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088d2:	bf3c      	itt	cc
 80088d4:	021b      	lslcc	r3, r3, #8
 80088d6:	3008      	addcc	r0, #8
 80088d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088dc:	bf3c      	itt	cc
 80088de:	011b      	lslcc	r3, r3, #4
 80088e0:	3004      	addcc	r0, #4
 80088e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088e6:	bf3c      	itt	cc
 80088e8:	009b      	lslcc	r3, r3, #2
 80088ea:	3002      	addcc	r0, #2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	db05      	blt.n	80088fc <__hi0bits+0x3c>
 80088f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80088f4:	f100 0001 	add.w	r0, r0, #1
 80088f8:	bf08      	it	eq
 80088fa:	2020      	moveq	r0, #32
 80088fc:	4770      	bx	lr

080088fe <__lo0bits>:
 80088fe:	6803      	ldr	r3, [r0, #0]
 8008900:	4602      	mov	r2, r0
 8008902:	f013 0007 	ands.w	r0, r3, #7
 8008906:	d00b      	beq.n	8008920 <__lo0bits+0x22>
 8008908:	07d9      	lsls	r1, r3, #31
 800890a:	d421      	bmi.n	8008950 <__lo0bits+0x52>
 800890c:	0798      	lsls	r0, r3, #30
 800890e:	bf49      	itett	mi
 8008910:	085b      	lsrmi	r3, r3, #1
 8008912:	089b      	lsrpl	r3, r3, #2
 8008914:	2001      	movmi	r0, #1
 8008916:	6013      	strmi	r3, [r2, #0]
 8008918:	bf5c      	itt	pl
 800891a:	6013      	strpl	r3, [r2, #0]
 800891c:	2002      	movpl	r0, #2
 800891e:	4770      	bx	lr
 8008920:	b299      	uxth	r1, r3
 8008922:	b909      	cbnz	r1, 8008928 <__lo0bits+0x2a>
 8008924:	0c1b      	lsrs	r3, r3, #16
 8008926:	2010      	movs	r0, #16
 8008928:	b2d9      	uxtb	r1, r3
 800892a:	b909      	cbnz	r1, 8008930 <__lo0bits+0x32>
 800892c:	3008      	adds	r0, #8
 800892e:	0a1b      	lsrs	r3, r3, #8
 8008930:	0719      	lsls	r1, r3, #28
 8008932:	bf04      	itt	eq
 8008934:	091b      	lsreq	r3, r3, #4
 8008936:	3004      	addeq	r0, #4
 8008938:	0799      	lsls	r1, r3, #30
 800893a:	bf04      	itt	eq
 800893c:	089b      	lsreq	r3, r3, #2
 800893e:	3002      	addeq	r0, #2
 8008940:	07d9      	lsls	r1, r3, #31
 8008942:	d403      	bmi.n	800894c <__lo0bits+0x4e>
 8008944:	085b      	lsrs	r3, r3, #1
 8008946:	f100 0001 	add.w	r0, r0, #1
 800894a:	d003      	beq.n	8008954 <__lo0bits+0x56>
 800894c:	6013      	str	r3, [r2, #0]
 800894e:	4770      	bx	lr
 8008950:	2000      	movs	r0, #0
 8008952:	4770      	bx	lr
 8008954:	2020      	movs	r0, #32
 8008956:	4770      	bx	lr

08008958 <__i2b>:
 8008958:	b510      	push	{r4, lr}
 800895a:	460c      	mov	r4, r1
 800895c:	2101      	movs	r1, #1
 800895e:	f7ff ff07 	bl	8008770 <_Balloc>
 8008962:	4602      	mov	r2, r0
 8008964:	b928      	cbnz	r0, 8008972 <__i2b+0x1a>
 8008966:	4b05      	ldr	r3, [pc, #20]	@ (800897c <__i2b+0x24>)
 8008968:	4805      	ldr	r0, [pc, #20]	@ (8008980 <__i2b+0x28>)
 800896a:	f240 1145 	movw	r1, #325	@ 0x145
 800896e:	f7fe ff89 	bl	8007884 <__assert_func>
 8008972:	2301      	movs	r3, #1
 8008974:	6144      	str	r4, [r0, #20]
 8008976:	6103      	str	r3, [r0, #16]
 8008978:	bd10      	pop	{r4, pc}
 800897a:	bf00      	nop
 800897c:	0800ace3 	.word	0x0800ace3
 8008980:	0800acf4 	.word	0x0800acf4

08008984 <__multiply>:
 8008984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008988:	4617      	mov	r7, r2
 800898a:	690a      	ldr	r2, [r1, #16]
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	429a      	cmp	r2, r3
 8008990:	bfa8      	it	ge
 8008992:	463b      	movge	r3, r7
 8008994:	4689      	mov	r9, r1
 8008996:	bfa4      	itt	ge
 8008998:	460f      	movge	r7, r1
 800899a:	4699      	movge	r9, r3
 800899c:	693d      	ldr	r5, [r7, #16]
 800899e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	6879      	ldr	r1, [r7, #4]
 80089a6:	eb05 060a 	add.w	r6, r5, sl
 80089aa:	42b3      	cmp	r3, r6
 80089ac:	b085      	sub	sp, #20
 80089ae:	bfb8      	it	lt
 80089b0:	3101      	addlt	r1, #1
 80089b2:	f7ff fedd 	bl	8008770 <_Balloc>
 80089b6:	b930      	cbnz	r0, 80089c6 <__multiply+0x42>
 80089b8:	4602      	mov	r2, r0
 80089ba:	4b41      	ldr	r3, [pc, #260]	@ (8008ac0 <__multiply+0x13c>)
 80089bc:	4841      	ldr	r0, [pc, #260]	@ (8008ac4 <__multiply+0x140>)
 80089be:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80089c2:	f7fe ff5f 	bl	8007884 <__assert_func>
 80089c6:	f100 0414 	add.w	r4, r0, #20
 80089ca:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80089ce:	4623      	mov	r3, r4
 80089d0:	2200      	movs	r2, #0
 80089d2:	4573      	cmp	r3, lr
 80089d4:	d320      	bcc.n	8008a18 <__multiply+0x94>
 80089d6:	f107 0814 	add.w	r8, r7, #20
 80089da:	f109 0114 	add.w	r1, r9, #20
 80089de:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80089e2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80089e6:	9302      	str	r3, [sp, #8]
 80089e8:	1beb      	subs	r3, r5, r7
 80089ea:	3b15      	subs	r3, #21
 80089ec:	f023 0303 	bic.w	r3, r3, #3
 80089f0:	3304      	adds	r3, #4
 80089f2:	3715      	adds	r7, #21
 80089f4:	42bd      	cmp	r5, r7
 80089f6:	bf38      	it	cc
 80089f8:	2304      	movcc	r3, #4
 80089fa:	9301      	str	r3, [sp, #4]
 80089fc:	9b02      	ldr	r3, [sp, #8]
 80089fe:	9103      	str	r1, [sp, #12]
 8008a00:	428b      	cmp	r3, r1
 8008a02:	d80c      	bhi.n	8008a1e <__multiply+0x9a>
 8008a04:	2e00      	cmp	r6, #0
 8008a06:	dd03      	ble.n	8008a10 <__multiply+0x8c>
 8008a08:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d055      	beq.n	8008abc <__multiply+0x138>
 8008a10:	6106      	str	r6, [r0, #16]
 8008a12:	b005      	add	sp, #20
 8008a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a18:	f843 2b04 	str.w	r2, [r3], #4
 8008a1c:	e7d9      	b.n	80089d2 <__multiply+0x4e>
 8008a1e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008a22:	f1ba 0f00 	cmp.w	sl, #0
 8008a26:	d01f      	beq.n	8008a68 <__multiply+0xe4>
 8008a28:	46c4      	mov	ip, r8
 8008a2a:	46a1      	mov	r9, r4
 8008a2c:	2700      	movs	r7, #0
 8008a2e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008a32:	f8d9 3000 	ldr.w	r3, [r9]
 8008a36:	fa1f fb82 	uxth.w	fp, r2
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008a40:	443b      	add	r3, r7
 8008a42:	f8d9 7000 	ldr.w	r7, [r9]
 8008a46:	0c12      	lsrs	r2, r2, #16
 8008a48:	0c3f      	lsrs	r7, r7, #16
 8008a4a:	fb0a 7202 	mla	r2, sl, r2, r7
 8008a4e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a58:	4565      	cmp	r5, ip
 8008a5a:	f849 3b04 	str.w	r3, [r9], #4
 8008a5e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008a62:	d8e4      	bhi.n	8008a2e <__multiply+0xaa>
 8008a64:	9b01      	ldr	r3, [sp, #4]
 8008a66:	50e7      	str	r7, [r4, r3]
 8008a68:	9b03      	ldr	r3, [sp, #12]
 8008a6a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008a6e:	3104      	adds	r1, #4
 8008a70:	f1b9 0f00 	cmp.w	r9, #0
 8008a74:	d020      	beq.n	8008ab8 <__multiply+0x134>
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	4647      	mov	r7, r8
 8008a7a:	46a4      	mov	ip, r4
 8008a7c:	f04f 0a00 	mov.w	sl, #0
 8008a80:	f8b7 b000 	ldrh.w	fp, [r7]
 8008a84:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008a88:	fb09 220b 	mla	r2, r9, fp, r2
 8008a8c:	4452      	add	r2, sl
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a94:	f84c 3b04 	str.w	r3, [ip], #4
 8008a98:	f857 3b04 	ldr.w	r3, [r7], #4
 8008a9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008aa0:	f8bc 3000 	ldrh.w	r3, [ip]
 8008aa4:	fb09 330a 	mla	r3, r9, sl, r3
 8008aa8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008aac:	42bd      	cmp	r5, r7
 8008aae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ab2:	d8e5      	bhi.n	8008a80 <__multiply+0xfc>
 8008ab4:	9a01      	ldr	r2, [sp, #4]
 8008ab6:	50a3      	str	r3, [r4, r2]
 8008ab8:	3404      	adds	r4, #4
 8008aba:	e79f      	b.n	80089fc <__multiply+0x78>
 8008abc:	3e01      	subs	r6, #1
 8008abe:	e7a1      	b.n	8008a04 <__multiply+0x80>
 8008ac0:	0800ace3 	.word	0x0800ace3
 8008ac4:	0800acf4 	.word	0x0800acf4

08008ac8 <__pow5mult>:
 8008ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008acc:	4615      	mov	r5, r2
 8008ace:	f012 0203 	ands.w	r2, r2, #3
 8008ad2:	4607      	mov	r7, r0
 8008ad4:	460e      	mov	r6, r1
 8008ad6:	d007      	beq.n	8008ae8 <__pow5mult+0x20>
 8008ad8:	4c25      	ldr	r4, [pc, #148]	@ (8008b70 <__pow5mult+0xa8>)
 8008ada:	3a01      	subs	r2, #1
 8008adc:	2300      	movs	r3, #0
 8008ade:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ae2:	f7ff fea7 	bl	8008834 <__multadd>
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	10ad      	asrs	r5, r5, #2
 8008aea:	d03d      	beq.n	8008b68 <__pow5mult+0xa0>
 8008aec:	69fc      	ldr	r4, [r7, #28]
 8008aee:	b97c      	cbnz	r4, 8008b10 <__pow5mult+0x48>
 8008af0:	2010      	movs	r0, #16
 8008af2:	f7ff fd87 	bl	8008604 <malloc>
 8008af6:	4602      	mov	r2, r0
 8008af8:	61f8      	str	r0, [r7, #28]
 8008afa:	b928      	cbnz	r0, 8008b08 <__pow5mult+0x40>
 8008afc:	4b1d      	ldr	r3, [pc, #116]	@ (8008b74 <__pow5mult+0xac>)
 8008afe:	481e      	ldr	r0, [pc, #120]	@ (8008b78 <__pow5mult+0xb0>)
 8008b00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008b04:	f7fe febe 	bl	8007884 <__assert_func>
 8008b08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b0c:	6004      	str	r4, [r0, #0]
 8008b0e:	60c4      	str	r4, [r0, #12]
 8008b10:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008b14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b18:	b94c      	cbnz	r4, 8008b2e <__pow5mult+0x66>
 8008b1a:	f240 2171 	movw	r1, #625	@ 0x271
 8008b1e:	4638      	mov	r0, r7
 8008b20:	f7ff ff1a 	bl	8008958 <__i2b>
 8008b24:	2300      	movs	r3, #0
 8008b26:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	6003      	str	r3, [r0, #0]
 8008b2e:	f04f 0900 	mov.w	r9, #0
 8008b32:	07eb      	lsls	r3, r5, #31
 8008b34:	d50a      	bpl.n	8008b4c <__pow5mult+0x84>
 8008b36:	4631      	mov	r1, r6
 8008b38:	4622      	mov	r2, r4
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	f7ff ff22 	bl	8008984 <__multiply>
 8008b40:	4631      	mov	r1, r6
 8008b42:	4680      	mov	r8, r0
 8008b44:	4638      	mov	r0, r7
 8008b46:	f7ff fe53 	bl	80087f0 <_Bfree>
 8008b4a:	4646      	mov	r6, r8
 8008b4c:	106d      	asrs	r5, r5, #1
 8008b4e:	d00b      	beq.n	8008b68 <__pow5mult+0xa0>
 8008b50:	6820      	ldr	r0, [r4, #0]
 8008b52:	b938      	cbnz	r0, 8008b64 <__pow5mult+0x9c>
 8008b54:	4622      	mov	r2, r4
 8008b56:	4621      	mov	r1, r4
 8008b58:	4638      	mov	r0, r7
 8008b5a:	f7ff ff13 	bl	8008984 <__multiply>
 8008b5e:	6020      	str	r0, [r4, #0]
 8008b60:	f8c0 9000 	str.w	r9, [r0]
 8008b64:	4604      	mov	r4, r0
 8008b66:	e7e4      	b.n	8008b32 <__pow5mult+0x6a>
 8008b68:	4630      	mov	r0, r6
 8008b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b6e:	bf00      	nop
 8008b70:	0800ad68 	.word	0x0800ad68
 8008b74:	0800abd1 	.word	0x0800abd1
 8008b78:	0800acf4 	.word	0x0800acf4

08008b7c <__lshift>:
 8008b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b80:	460c      	mov	r4, r1
 8008b82:	6849      	ldr	r1, [r1, #4]
 8008b84:	6923      	ldr	r3, [r4, #16]
 8008b86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b8a:	68a3      	ldr	r3, [r4, #8]
 8008b8c:	4607      	mov	r7, r0
 8008b8e:	4691      	mov	r9, r2
 8008b90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b94:	f108 0601 	add.w	r6, r8, #1
 8008b98:	42b3      	cmp	r3, r6
 8008b9a:	db0b      	blt.n	8008bb4 <__lshift+0x38>
 8008b9c:	4638      	mov	r0, r7
 8008b9e:	f7ff fde7 	bl	8008770 <_Balloc>
 8008ba2:	4605      	mov	r5, r0
 8008ba4:	b948      	cbnz	r0, 8008bba <__lshift+0x3e>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	4b28      	ldr	r3, [pc, #160]	@ (8008c4c <__lshift+0xd0>)
 8008baa:	4829      	ldr	r0, [pc, #164]	@ (8008c50 <__lshift+0xd4>)
 8008bac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008bb0:	f7fe fe68 	bl	8007884 <__assert_func>
 8008bb4:	3101      	adds	r1, #1
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	e7ee      	b.n	8008b98 <__lshift+0x1c>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f100 0114 	add.w	r1, r0, #20
 8008bc0:	f100 0210 	add.w	r2, r0, #16
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	4553      	cmp	r3, sl
 8008bc8:	db33      	blt.n	8008c32 <__lshift+0xb6>
 8008bca:	6920      	ldr	r0, [r4, #16]
 8008bcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bd0:	f104 0314 	add.w	r3, r4, #20
 8008bd4:	f019 091f 	ands.w	r9, r9, #31
 8008bd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008be0:	d02b      	beq.n	8008c3a <__lshift+0xbe>
 8008be2:	f1c9 0e20 	rsb	lr, r9, #32
 8008be6:	468a      	mov	sl, r1
 8008be8:	2200      	movs	r2, #0
 8008bea:	6818      	ldr	r0, [r3, #0]
 8008bec:	fa00 f009 	lsl.w	r0, r0, r9
 8008bf0:	4310      	orrs	r0, r2
 8008bf2:	f84a 0b04 	str.w	r0, [sl], #4
 8008bf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bfa:	459c      	cmp	ip, r3
 8008bfc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c00:	d8f3      	bhi.n	8008bea <__lshift+0x6e>
 8008c02:	ebac 0304 	sub.w	r3, ip, r4
 8008c06:	3b15      	subs	r3, #21
 8008c08:	f023 0303 	bic.w	r3, r3, #3
 8008c0c:	3304      	adds	r3, #4
 8008c0e:	f104 0015 	add.w	r0, r4, #21
 8008c12:	4560      	cmp	r0, ip
 8008c14:	bf88      	it	hi
 8008c16:	2304      	movhi	r3, #4
 8008c18:	50ca      	str	r2, [r1, r3]
 8008c1a:	b10a      	cbz	r2, 8008c20 <__lshift+0xa4>
 8008c1c:	f108 0602 	add.w	r6, r8, #2
 8008c20:	3e01      	subs	r6, #1
 8008c22:	4638      	mov	r0, r7
 8008c24:	612e      	str	r6, [r5, #16]
 8008c26:	4621      	mov	r1, r4
 8008c28:	f7ff fde2 	bl	80087f0 <_Bfree>
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c32:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c36:	3301      	adds	r3, #1
 8008c38:	e7c5      	b.n	8008bc6 <__lshift+0x4a>
 8008c3a:	3904      	subs	r1, #4
 8008c3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c40:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c44:	459c      	cmp	ip, r3
 8008c46:	d8f9      	bhi.n	8008c3c <__lshift+0xc0>
 8008c48:	e7ea      	b.n	8008c20 <__lshift+0xa4>
 8008c4a:	bf00      	nop
 8008c4c:	0800ace3 	.word	0x0800ace3
 8008c50:	0800acf4 	.word	0x0800acf4

08008c54 <__mcmp>:
 8008c54:	690a      	ldr	r2, [r1, #16]
 8008c56:	4603      	mov	r3, r0
 8008c58:	6900      	ldr	r0, [r0, #16]
 8008c5a:	1a80      	subs	r0, r0, r2
 8008c5c:	b530      	push	{r4, r5, lr}
 8008c5e:	d10e      	bne.n	8008c7e <__mcmp+0x2a>
 8008c60:	3314      	adds	r3, #20
 8008c62:	3114      	adds	r1, #20
 8008c64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c74:	4295      	cmp	r5, r2
 8008c76:	d003      	beq.n	8008c80 <__mcmp+0x2c>
 8008c78:	d205      	bcs.n	8008c86 <__mcmp+0x32>
 8008c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7e:	bd30      	pop	{r4, r5, pc}
 8008c80:	42a3      	cmp	r3, r4
 8008c82:	d3f3      	bcc.n	8008c6c <__mcmp+0x18>
 8008c84:	e7fb      	b.n	8008c7e <__mcmp+0x2a>
 8008c86:	2001      	movs	r0, #1
 8008c88:	e7f9      	b.n	8008c7e <__mcmp+0x2a>
	...

08008c8c <__mdiff>:
 8008c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c90:	4689      	mov	r9, r1
 8008c92:	4606      	mov	r6, r0
 8008c94:	4611      	mov	r1, r2
 8008c96:	4648      	mov	r0, r9
 8008c98:	4614      	mov	r4, r2
 8008c9a:	f7ff ffdb 	bl	8008c54 <__mcmp>
 8008c9e:	1e05      	subs	r5, r0, #0
 8008ca0:	d112      	bne.n	8008cc8 <__mdiff+0x3c>
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f7ff fd63 	bl	8008770 <_Balloc>
 8008caa:	4602      	mov	r2, r0
 8008cac:	b928      	cbnz	r0, 8008cba <__mdiff+0x2e>
 8008cae:	4b3f      	ldr	r3, [pc, #252]	@ (8008dac <__mdiff+0x120>)
 8008cb0:	f240 2137 	movw	r1, #567	@ 0x237
 8008cb4:	483e      	ldr	r0, [pc, #248]	@ (8008db0 <__mdiff+0x124>)
 8008cb6:	f7fe fde5 	bl	8007884 <__assert_func>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	b003      	add	sp, #12
 8008cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc8:	bfbc      	itt	lt
 8008cca:	464b      	movlt	r3, r9
 8008ccc:	46a1      	movlt	r9, r4
 8008cce:	4630      	mov	r0, r6
 8008cd0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008cd4:	bfba      	itte	lt
 8008cd6:	461c      	movlt	r4, r3
 8008cd8:	2501      	movlt	r5, #1
 8008cda:	2500      	movge	r5, #0
 8008cdc:	f7ff fd48 	bl	8008770 <_Balloc>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	b918      	cbnz	r0, 8008cec <__mdiff+0x60>
 8008ce4:	4b31      	ldr	r3, [pc, #196]	@ (8008dac <__mdiff+0x120>)
 8008ce6:	f240 2145 	movw	r1, #581	@ 0x245
 8008cea:	e7e3      	b.n	8008cb4 <__mdiff+0x28>
 8008cec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008cf0:	6926      	ldr	r6, [r4, #16]
 8008cf2:	60c5      	str	r5, [r0, #12]
 8008cf4:	f109 0310 	add.w	r3, r9, #16
 8008cf8:	f109 0514 	add.w	r5, r9, #20
 8008cfc:	f104 0e14 	add.w	lr, r4, #20
 8008d00:	f100 0b14 	add.w	fp, r0, #20
 8008d04:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008d08:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	46d9      	mov	r9, fp
 8008d10:	f04f 0c00 	mov.w	ip, #0
 8008d14:	9b01      	ldr	r3, [sp, #4]
 8008d16:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008d1a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008d1e:	9301      	str	r3, [sp, #4]
 8008d20:	fa1f f38a 	uxth.w	r3, sl
 8008d24:	4619      	mov	r1, r3
 8008d26:	b283      	uxth	r3, r0
 8008d28:	1acb      	subs	r3, r1, r3
 8008d2a:	0c00      	lsrs	r0, r0, #16
 8008d2c:	4463      	add	r3, ip
 8008d2e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008d32:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008d3c:	4576      	cmp	r6, lr
 8008d3e:	f849 3b04 	str.w	r3, [r9], #4
 8008d42:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d46:	d8e5      	bhi.n	8008d14 <__mdiff+0x88>
 8008d48:	1b33      	subs	r3, r6, r4
 8008d4a:	3b15      	subs	r3, #21
 8008d4c:	f023 0303 	bic.w	r3, r3, #3
 8008d50:	3415      	adds	r4, #21
 8008d52:	3304      	adds	r3, #4
 8008d54:	42a6      	cmp	r6, r4
 8008d56:	bf38      	it	cc
 8008d58:	2304      	movcc	r3, #4
 8008d5a:	441d      	add	r5, r3
 8008d5c:	445b      	add	r3, fp
 8008d5e:	461e      	mov	r6, r3
 8008d60:	462c      	mov	r4, r5
 8008d62:	4544      	cmp	r4, r8
 8008d64:	d30e      	bcc.n	8008d84 <__mdiff+0xf8>
 8008d66:	f108 0103 	add.w	r1, r8, #3
 8008d6a:	1b49      	subs	r1, r1, r5
 8008d6c:	f021 0103 	bic.w	r1, r1, #3
 8008d70:	3d03      	subs	r5, #3
 8008d72:	45a8      	cmp	r8, r5
 8008d74:	bf38      	it	cc
 8008d76:	2100      	movcc	r1, #0
 8008d78:	440b      	add	r3, r1
 8008d7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d7e:	b191      	cbz	r1, 8008da6 <__mdiff+0x11a>
 8008d80:	6117      	str	r7, [r2, #16]
 8008d82:	e79d      	b.n	8008cc0 <__mdiff+0x34>
 8008d84:	f854 1b04 	ldr.w	r1, [r4], #4
 8008d88:	46e6      	mov	lr, ip
 8008d8a:	0c08      	lsrs	r0, r1, #16
 8008d8c:	fa1c fc81 	uxtah	ip, ip, r1
 8008d90:	4471      	add	r1, lr
 8008d92:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008d96:	b289      	uxth	r1, r1
 8008d98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d9c:	f846 1b04 	str.w	r1, [r6], #4
 8008da0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008da4:	e7dd      	b.n	8008d62 <__mdiff+0xd6>
 8008da6:	3f01      	subs	r7, #1
 8008da8:	e7e7      	b.n	8008d7a <__mdiff+0xee>
 8008daa:	bf00      	nop
 8008dac:	0800ace3 	.word	0x0800ace3
 8008db0:	0800acf4 	.word	0x0800acf4

08008db4 <__d2b>:
 8008db4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008db8:	460f      	mov	r7, r1
 8008dba:	2101      	movs	r1, #1
 8008dbc:	ec59 8b10 	vmov	r8, r9, d0
 8008dc0:	4616      	mov	r6, r2
 8008dc2:	f7ff fcd5 	bl	8008770 <_Balloc>
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	b930      	cbnz	r0, 8008dd8 <__d2b+0x24>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	4b23      	ldr	r3, [pc, #140]	@ (8008e5c <__d2b+0xa8>)
 8008dce:	4824      	ldr	r0, [pc, #144]	@ (8008e60 <__d2b+0xac>)
 8008dd0:	f240 310f 	movw	r1, #783	@ 0x30f
 8008dd4:	f7fe fd56 	bl	8007884 <__assert_func>
 8008dd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ddc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008de0:	b10d      	cbz	r5, 8008de6 <__d2b+0x32>
 8008de2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008de6:	9301      	str	r3, [sp, #4]
 8008de8:	f1b8 0300 	subs.w	r3, r8, #0
 8008dec:	d023      	beq.n	8008e36 <__d2b+0x82>
 8008dee:	4668      	mov	r0, sp
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	f7ff fd84 	bl	80088fe <__lo0bits>
 8008df6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008dfa:	b1d0      	cbz	r0, 8008e32 <__d2b+0x7e>
 8008dfc:	f1c0 0320 	rsb	r3, r0, #32
 8008e00:	fa02 f303 	lsl.w	r3, r2, r3
 8008e04:	430b      	orrs	r3, r1
 8008e06:	40c2      	lsrs	r2, r0
 8008e08:	6163      	str	r3, [r4, #20]
 8008e0a:	9201      	str	r2, [sp, #4]
 8008e0c:	9b01      	ldr	r3, [sp, #4]
 8008e0e:	61a3      	str	r3, [r4, #24]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	bf0c      	ite	eq
 8008e14:	2201      	moveq	r2, #1
 8008e16:	2202      	movne	r2, #2
 8008e18:	6122      	str	r2, [r4, #16]
 8008e1a:	b1a5      	cbz	r5, 8008e46 <__d2b+0x92>
 8008e1c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008e20:	4405      	add	r5, r0
 8008e22:	603d      	str	r5, [r7, #0]
 8008e24:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008e28:	6030      	str	r0, [r6, #0]
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	b003      	add	sp, #12
 8008e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e32:	6161      	str	r1, [r4, #20]
 8008e34:	e7ea      	b.n	8008e0c <__d2b+0x58>
 8008e36:	a801      	add	r0, sp, #4
 8008e38:	f7ff fd61 	bl	80088fe <__lo0bits>
 8008e3c:	9b01      	ldr	r3, [sp, #4]
 8008e3e:	6163      	str	r3, [r4, #20]
 8008e40:	3020      	adds	r0, #32
 8008e42:	2201      	movs	r2, #1
 8008e44:	e7e8      	b.n	8008e18 <__d2b+0x64>
 8008e46:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e4a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008e4e:	6038      	str	r0, [r7, #0]
 8008e50:	6918      	ldr	r0, [r3, #16]
 8008e52:	f7ff fd35 	bl	80088c0 <__hi0bits>
 8008e56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e5a:	e7e5      	b.n	8008e28 <__d2b+0x74>
 8008e5c:	0800ace3 	.word	0x0800ace3
 8008e60:	0800acf4 	.word	0x0800acf4

08008e64 <__ssputs_r>:
 8008e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e68:	688e      	ldr	r6, [r1, #8]
 8008e6a:	461f      	mov	r7, r3
 8008e6c:	42be      	cmp	r6, r7
 8008e6e:	680b      	ldr	r3, [r1, #0]
 8008e70:	4682      	mov	sl, r0
 8008e72:	460c      	mov	r4, r1
 8008e74:	4690      	mov	r8, r2
 8008e76:	d82d      	bhi.n	8008ed4 <__ssputs_r+0x70>
 8008e78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008e80:	d026      	beq.n	8008ed0 <__ssputs_r+0x6c>
 8008e82:	6965      	ldr	r5, [r4, #20]
 8008e84:	6909      	ldr	r1, [r1, #16]
 8008e86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e8a:	eba3 0901 	sub.w	r9, r3, r1
 8008e8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e92:	1c7b      	adds	r3, r7, #1
 8008e94:	444b      	add	r3, r9
 8008e96:	106d      	asrs	r5, r5, #1
 8008e98:	429d      	cmp	r5, r3
 8008e9a:	bf38      	it	cc
 8008e9c:	461d      	movcc	r5, r3
 8008e9e:	0553      	lsls	r3, r2, #21
 8008ea0:	d527      	bpl.n	8008ef2 <__ssputs_r+0x8e>
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	f7ff fbd8 	bl	8008658 <_malloc_r>
 8008ea8:	4606      	mov	r6, r0
 8008eaa:	b360      	cbz	r0, 8008f06 <__ssputs_r+0xa2>
 8008eac:	6921      	ldr	r1, [r4, #16]
 8008eae:	464a      	mov	r2, r9
 8008eb0:	f7fe fcd9 	bl	8007866 <memcpy>
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ebe:	81a3      	strh	r3, [r4, #12]
 8008ec0:	6126      	str	r6, [r4, #16]
 8008ec2:	6165      	str	r5, [r4, #20]
 8008ec4:	444e      	add	r6, r9
 8008ec6:	eba5 0509 	sub.w	r5, r5, r9
 8008eca:	6026      	str	r6, [r4, #0]
 8008ecc:	60a5      	str	r5, [r4, #8]
 8008ece:	463e      	mov	r6, r7
 8008ed0:	42be      	cmp	r6, r7
 8008ed2:	d900      	bls.n	8008ed6 <__ssputs_r+0x72>
 8008ed4:	463e      	mov	r6, r7
 8008ed6:	6820      	ldr	r0, [r4, #0]
 8008ed8:	4632      	mov	r2, r6
 8008eda:	4641      	mov	r1, r8
 8008edc:	f000 fbb0 	bl	8009640 <memmove>
 8008ee0:	68a3      	ldr	r3, [r4, #8]
 8008ee2:	1b9b      	subs	r3, r3, r6
 8008ee4:	60a3      	str	r3, [r4, #8]
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	4433      	add	r3, r6
 8008eea:	6023      	str	r3, [r4, #0]
 8008eec:	2000      	movs	r0, #0
 8008eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef2:	462a      	mov	r2, r5
 8008ef4:	f000 fc1d 	bl	8009732 <_realloc_r>
 8008ef8:	4606      	mov	r6, r0
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d1e0      	bne.n	8008ec0 <__ssputs_r+0x5c>
 8008efe:	6921      	ldr	r1, [r4, #16]
 8008f00:	4650      	mov	r0, sl
 8008f02:	f7ff fb35 	bl	8008570 <_free_r>
 8008f06:	230c      	movs	r3, #12
 8008f08:	f8ca 3000 	str.w	r3, [sl]
 8008f0c:	89a3      	ldrh	r3, [r4, #12]
 8008f0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f12:	81a3      	strh	r3, [r4, #12]
 8008f14:	f04f 30ff 	mov.w	r0, #4294967295
 8008f18:	e7e9      	b.n	8008eee <__ssputs_r+0x8a>
	...

08008f1c <_svfiprintf_r>:
 8008f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f20:	4698      	mov	r8, r3
 8008f22:	898b      	ldrh	r3, [r1, #12]
 8008f24:	061b      	lsls	r3, r3, #24
 8008f26:	b09d      	sub	sp, #116	@ 0x74
 8008f28:	4607      	mov	r7, r0
 8008f2a:	460d      	mov	r5, r1
 8008f2c:	4614      	mov	r4, r2
 8008f2e:	d510      	bpl.n	8008f52 <_svfiprintf_r+0x36>
 8008f30:	690b      	ldr	r3, [r1, #16]
 8008f32:	b973      	cbnz	r3, 8008f52 <_svfiprintf_r+0x36>
 8008f34:	2140      	movs	r1, #64	@ 0x40
 8008f36:	f7ff fb8f 	bl	8008658 <_malloc_r>
 8008f3a:	6028      	str	r0, [r5, #0]
 8008f3c:	6128      	str	r0, [r5, #16]
 8008f3e:	b930      	cbnz	r0, 8008f4e <_svfiprintf_r+0x32>
 8008f40:	230c      	movs	r3, #12
 8008f42:	603b      	str	r3, [r7, #0]
 8008f44:	f04f 30ff 	mov.w	r0, #4294967295
 8008f48:	b01d      	add	sp, #116	@ 0x74
 8008f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4e:	2340      	movs	r3, #64	@ 0x40
 8008f50:	616b      	str	r3, [r5, #20]
 8008f52:	2300      	movs	r3, #0
 8008f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f56:	2320      	movs	r3, #32
 8008f58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f60:	2330      	movs	r3, #48	@ 0x30
 8008f62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009100 <_svfiprintf_r+0x1e4>
 8008f66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f6a:	f04f 0901 	mov.w	r9, #1
 8008f6e:	4623      	mov	r3, r4
 8008f70:	469a      	mov	sl, r3
 8008f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f76:	b10a      	cbz	r2, 8008f7c <_svfiprintf_r+0x60>
 8008f78:	2a25      	cmp	r2, #37	@ 0x25
 8008f7a:	d1f9      	bne.n	8008f70 <_svfiprintf_r+0x54>
 8008f7c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f80:	d00b      	beq.n	8008f9a <_svfiprintf_r+0x7e>
 8008f82:	465b      	mov	r3, fp
 8008f84:	4622      	mov	r2, r4
 8008f86:	4629      	mov	r1, r5
 8008f88:	4638      	mov	r0, r7
 8008f8a:	f7ff ff6b 	bl	8008e64 <__ssputs_r>
 8008f8e:	3001      	adds	r0, #1
 8008f90:	f000 80a7 	beq.w	80090e2 <_svfiprintf_r+0x1c6>
 8008f94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f96:	445a      	add	r2, fp
 8008f98:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 809f 	beq.w	80090e2 <_svfiprintf_r+0x1c6>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8008faa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fae:	f10a 0a01 	add.w	sl, sl, #1
 8008fb2:	9304      	str	r3, [sp, #16]
 8008fb4:	9307      	str	r3, [sp, #28]
 8008fb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008fba:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fbc:	4654      	mov	r4, sl
 8008fbe:	2205      	movs	r2, #5
 8008fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc4:	484e      	ldr	r0, [pc, #312]	@ (8009100 <_svfiprintf_r+0x1e4>)
 8008fc6:	f7f7 f91b 	bl	8000200 <memchr>
 8008fca:	9a04      	ldr	r2, [sp, #16]
 8008fcc:	b9d8      	cbnz	r0, 8009006 <_svfiprintf_r+0xea>
 8008fce:	06d0      	lsls	r0, r2, #27
 8008fd0:	bf44      	itt	mi
 8008fd2:	2320      	movmi	r3, #32
 8008fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fd8:	0711      	lsls	r1, r2, #28
 8008fda:	bf44      	itt	mi
 8008fdc:	232b      	movmi	r3, #43	@ 0x2b
 8008fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fe6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fe8:	d015      	beq.n	8009016 <_svfiprintf_r+0xfa>
 8008fea:	9a07      	ldr	r2, [sp, #28]
 8008fec:	4654      	mov	r4, sl
 8008fee:	2000      	movs	r0, #0
 8008ff0:	f04f 0c0a 	mov.w	ip, #10
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ffa:	3b30      	subs	r3, #48	@ 0x30
 8008ffc:	2b09      	cmp	r3, #9
 8008ffe:	d94b      	bls.n	8009098 <_svfiprintf_r+0x17c>
 8009000:	b1b0      	cbz	r0, 8009030 <_svfiprintf_r+0x114>
 8009002:	9207      	str	r2, [sp, #28]
 8009004:	e014      	b.n	8009030 <_svfiprintf_r+0x114>
 8009006:	eba0 0308 	sub.w	r3, r0, r8
 800900a:	fa09 f303 	lsl.w	r3, r9, r3
 800900e:	4313      	orrs	r3, r2
 8009010:	9304      	str	r3, [sp, #16]
 8009012:	46a2      	mov	sl, r4
 8009014:	e7d2      	b.n	8008fbc <_svfiprintf_r+0xa0>
 8009016:	9b03      	ldr	r3, [sp, #12]
 8009018:	1d19      	adds	r1, r3, #4
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	9103      	str	r1, [sp, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	bfbb      	ittet	lt
 8009022:	425b      	neglt	r3, r3
 8009024:	f042 0202 	orrlt.w	r2, r2, #2
 8009028:	9307      	strge	r3, [sp, #28]
 800902a:	9307      	strlt	r3, [sp, #28]
 800902c:	bfb8      	it	lt
 800902e:	9204      	strlt	r2, [sp, #16]
 8009030:	7823      	ldrb	r3, [r4, #0]
 8009032:	2b2e      	cmp	r3, #46	@ 0x2e
 8009034:	d10a      	bne.n	800904c <_svfiprintf_r+0x130>
 8009036:	7863      	ldrb	r3, [r4, #1]
 8009038:	2b2a      	cmp	r3, #42	@ 0x2a
 800903a:	d132      	bne.n	80090a2 <_svfiprintf_r+0x186>
 800903c:	9b03      	ldr	r3, [sp, #12]
 800903e:	1d1a      	adds	r2, r3, #4
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	9203      	str	r2, [sp, #12]
 8009044:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009048:	3402      	adds	r4, #2
 800904a:	9305      	str	r3, [sp, #20]
 800904c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009110 <_svfiprintf_r+0x1f4>
 8009050:	7821      	ldrb	r1, [r4, #0]
 8009052:	2203      	movs	r2, #3
 8009054:	4650      	mov	r0, sl
 8009056:	f7f7 f8d3 	bl	8000200 <memchr>
 800905a:	b138      	cbz	r0, 800906c <_svfiprintf_r+0x150>
 800905c:	9b04      	ldr	r3, [sp, #16]
 800905e:	eba0 000a 	sub.w	r0, r0, sl
 8009062:	2240      	movs	r2, #64	@ 0x40
 8009064:	4082      	lsls	r2, r0
 8009066:	4313      	orrs	r3, r2
 8009068:	3401      	adds	r4, #1
 800906a:	9304      	str	r3, [sp, #16]
 800906c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009070:	4824      	ldr	r0, [pc, #144]	@ (8009104 <_svfiprintf_r+0x1e8>)
 8009072:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009076:	2206      	movs	r2, #6
 8009078:	f7f7 f8c2 	bl	8000200 <memchr>
 800907c:	2800      	cmp	r0, #0
 800907e:	d036      	beq.n	80090ee <_svfiprintf_r+0x1d2>
 8009080:	4b21      	ldr	r3, [pc, #132]	@ (8009108 <_svfiprintf_r+0x1ec>)
 8009082:	bb1b      	cbnz	r3, 80090cc <_svfiprintf_r+0x1b0>
 8009084:	9b03      	ldr	r3, [sp, #12]
 8009086:	3307      	adds	r3, #7
 8009088:	f023 0307 	bic.w	r3, r3, #7
 800908c:	3308      	adds	r3, #8
 800908e:	9303      	str	r3, [sp, #12]
 8009090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009092:	4433      	add	r3, r6
 8009094:	9309      	str	r3, [sp, #36]	@ 0x24
 8009096:	e76a      	b.n	8008f6e <_svfiprintf_r+0x52>
 8009098:	fb0c 3202 	mla	r2, ip, r2, r3
 800909c:	460c      	mov	r4, r1
 800909e:	2001      	movs	r0, #1
 80090a0:	e7a8      	b.n	8008ff4 <_svfiprintf_r+0xd8>
 80090a2:	2300      	movs	r3, #0
 80090a4:	3401      	adds	r4, #1
 80090a6:	9305      	str	r3, [sp, #20]
 80090a8:	4619      	mov	r1, r3
 80090aa:	f04f 0c0a 	mov.w	ip, #10
 80090ae:	4620      	mov	r0, r4
 80090b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090b4:	3a30      	subs	r2, #48	@ 0x30
 80090b6:	2a09      	cmp	r2, #9
 80090b8:	d903      	bls.n	80090c2 <_svfiprintf_r+0x1a6>
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d0c6      	beq.n	800904c <_svfiprintf_r+0x130>
 80090be:	9105      	str	r1, [sp, #20]
 80090c0:	e7c4      	b.n	800904c <_svfiprintf_r+0x130>
 80090c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80090c6:	4604      	mov	r4, r0
 80090c8:	2301      	movs	r3, #1
 80090ca:	e7f0      	b.n	80090ae <_svfiprintf_r+0x192>
 80090cc:	ab03      	add	r3, sp, #12
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	462a      	mov	r2, r5
 80090d2:	4b0e      	ldr	r3, [pc, #56]	@ (800910c <_svfiprintf_r+0x1f0>)
 80090d4:	a904      	add	r1, sp, #16
 80090d6:	4638      	mov	r0, r7
 80090d8:	f7fd fcc2 	bl	8006a60 <_printf_float>
 80090dc:	1c42      	adds	r2, r0, #1
 80090de:	4606      	mov	r6, r0
 80090e0:	d1d6      	bne.n	8009090 <_svfiprintf_r+0x174>
 80090e2:	89ab      	ldrh	r3, [r5, #12]
 80090e4:	065b      	lsls	r3, r3, #25
 80090e6:	f53f af2d 	bmi.w	8008f44 <_svfiprintf_r+0x28>
 80090ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090ec:	e72c      	b.n	8008f48 <_svfiprintf_r+0x2c>
 80090ee:	ab03      	add	r3, sp, #12
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	462a      	mov	r2, r5
 80090f4:	4b05      	ldr	r3, [pc, #20]	@ (800910c <_svfiprintf_r+0x1f0>)
 80090f6:	a904      	add	r1, sp, #16
 80090f8:	4638      	mov	r0, r7
 80090fa:	f7fd ff49 	bl	8006f90 <_printf_i>
 80090fe:	e7ed      	b.n	80090dc <_svfiprintf_r+0x1c0>
 8009100:	0800ad4d 	.word	0x0800ad4d
 8009104:	0800ad57 	.word	0x0800ad57
 8009108:	08006a61 	.word	0x08006a61
 800910c:	08008e65 	.word	0x08008e65
 8009110:	0800ad53 	.word	0x0800ad53

08009114 <__sfputc_r>:
 8009114:	6893      	ldr	r3, [r2, #8]
 8009116:	3b01      	subs	r3, #1
 8009118:	2b00      	cmp	r3, #0
 800911a:	b410      	push	{r4}
 800911c:	6093      	str	r3, [r2, #8]
 800911e:	da08      	bge.n	8009132 <__sfputc_r+0x1e>
 8009120:	6994      	ldr	r4, [r2, #24]
 8009122:	42a3      	cmp	r3, r4
 8009124:	db01      	blt.n	800912a <__sfputc_r+0x16>
 8009126:	290a      	cmp	r1, #10
 8009128:	d103      	bne.n	8009132 <__sfputc_r+0x1e>
 800912a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800912e:	f7fe b9ec 	b.w	800750a <__swbuf_r>
 8009132:	6813      	ldr	r3, [r2, #0]
 8009134:	1c58      	adds	r0, r3, #1
 8009136:	6010      	str	r0, [r2, #0]
 8009138:	7019      	strb	r1, [r3, #0]
 800913a:	4608      	mov	r0, r1
 800913c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009140:	4770      	bx	lr

08009142 <__sfputs_r>:
 8009142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009144:	4606      	mov	r6, r0
 8009146:	460f      	mov	r7, r1
 8009148:	4614      	mov	r4, r2
 800914a:	18d5      	adds	r5, r2, r3
 800914c:	42ac      	cmp	r4, r5
 800914e:	d101      	bne.n	8009154 <__sfputs_r+0x12>
 8009150:	2000      	movs	r0, #0
 8009152:	e007      	b.n	8009164 <__sfputs_r+0x22>
 8009154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009158:	463a      	mov	r2, r7
 800915a:	4630      	mov	r0, r6
 800915c:	f7ff ffda 	bl	8009114 <__sfputc_r>
 8009160:	1c43      	adds	r3, r0, #1
 8009162:	d1f3      	bne.n	800914c <__sfputs_r+0xa>
 8009164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009168 <_vfiprintf_r>:
 8009168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	460d      	mov	r5, r1
 800916e:	b09d      	sub	sp, #116	@ 0x74
 8009170:	4614      	mov	r4, r2
 8009172:	4698      	mov	r8, r3
 8009174:	4606      	mov	r6, r0
 8009176:	b118      	cbz	r0, 8009180 <_vfiprintf_r+0x18>
 8009178:	6a03      	ldr	r3, [r0, #32]
 800917a:	b90b      	cbnz	r3, 8009180 <_vfiprintf_r+0x18>
 800917c:	f7fe f8b2 	bl	80072e4 <__sinit>
 8009180:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009182:	07d9      	lsls	r1, r3, #31
 8009184:	d405      	bmi.n	8009192 <_vfiprintf_r+0x2a>
 8009186:	89ab      	ldrh	r3, [r5, #12]
 8009188:	059a      	lsls	r2, r3, #22
 800918a:	d402      	bmi.n	8009192 <_vfiprintf_r+0x2a>
 800918c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800918e:	f7fe fb60 	bl	8007852 <__retarget_lock_acquire_recursive>
 8009192:	89ab      	ldrh	r3, [r5, #12]
 8009194:	071b      	lsls	r3, r3, #28
 8009196:	d501      	bpl.n	800919c <_vfiprintf_r+0x34>
 8009198:	692b      	ldr	r3, [r5, #16]
 800919a:	b99b      	cbnz	r3, 80091c4 <_vfiprintf_r+0x5c>
 800919c:	4629      	mov	r1, r5
 800919e:	4630      	mov	r0, r6
 80091a0:	f7fe f9f2 	bl	8007588 <__swsetup_r>
 80091a4:	b170      	cbz	r0, 80091c4 <_vfiprintf_r+0x5c>
 80091a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091a8:	07dc      	lsls	r4, r3, #31
 80091aa:	d504      	bpl.n	80091b6 <_vfiprintf_r+0x4e>
 80091ac:	f04f 30ff 	mov.w	r0, #4294967295
 80091b0:	b01d      	add	sp, #116	@ 0x74
 80091b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b6:	89ab      	ldrh	r3, [r5, #12]
 80091b8:	0598      	lsls	r0, r3, #22
 80091ba:	d4f7      	bmi.n	80091ac <_vfiprintf_r+0x44>
 80091bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091be:	f7fe fb49 	bl	8007854 <__retarget_lock_release_recursive>
 80091c2:	e7f3      	b.n	80091ac <_vfiprintf_r+0x44>
 80091c4:	2300      	movs	r3, #0
 80091c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80091c8:	2320      	movs	r3, #32
 80091ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80091d2:	2330      	movs	r3, #48	@ 0x30
 80091d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009384 <_vfiprintf_r+0x21c>
 80091d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091dc:	f04f 0901 	mov.w	r9, #1
 80091e0:	4623      	mov	r3, r4
 80091e2:	469a      	mov	sl, r3
 80091e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091e8:	b10a      	cbz	r2, 80091ee <_vfiprintf_r+0x86>
 80091ea:	2a25      	cmp	r2, #37	@ 0x25
 80091ec:	d1f9      	bne.n	80091e2 <_vfiprintf_r+0x7a>
 80091ee:	ebba 0b04 	subs.w	fp, sl, r4
 80091f2:	d00b      	beq.n	800920c <_vfiprintf_r+0xa4>
 80091f4:	465b      	mov	r3, fp
 80091f6:	4622      	mov	r2, r4
 80091f8:	4629      	mov	r1, r5
 80091fa:	4630      	mov	r0, r6
 80091fc:	f7ff ffa1 	bl	8009142 <__sfputs_r>
 8009200:	3001      	adds	r0, #1
 8009202:	f000 80a7 	beq.w	8009354 <_vfiprintf_r+0x1ec>
 8009206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009208:	445a      	add	r2, fp
 800920a:	9209      	str	r2, [sp, #36]	@ 0x24
 800920c:	f89a 3000 	ldrb.w	r3, [sl]
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 809f 	beq.w	8009354 <_vfiprintf_r+0x1ec>
 8009216:	2300      	movs	r3, #0
 8009218:	f04f 32ff 	mov.w	r2, #4294967295
 800921c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009220:	f10a 0a01 	add.w	sl, sl, #1
 8009224:	9304      	str	r3, [sp, #16]
 8009226:	9307      	str	r3, [sp, #28]
 8009228:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800922c:	931a      	str	r3, [sp, #104]	@ 0x68
 800922e:	4654      	mov	r4, sl
 8009230:	2205      	movs	r2, #5
 8009232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009236:	4853      	ldr	r0, [pc, #332]	@ (8009384 <_vfiprintf_r+0x21c>)
 8009238:	f7f6 ffe2 	bl	8000200 <memchr>
 800923c:	9a04      	ldr	r2, [sp, #16]
 800923e:	b9d8      	cbnz	r0, 8009278 <_vfiprintf_r+0x110>
 8009240:	06d1      	lsls	r1, r2, #27
 8009242:	bf44      	itt	mi
 8009244:	2320      	movmi	r3, #32
 8009246:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800924a:	0713      	lsls	r3, r2, #28
 800924c:	bf44      	itt	mi
 800924e:	232b      	movmi	r3, #43	@ 0x2b
 8009250:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009254:	f89a 3000 	ldrb.w	r3, [sl]
 8009258:	2b2a      	cmp	r3, #42	@ 0x2a
 800925a:	d015      	beq.n	8009288 <_vfiprintf_r+0x120>
 800925c:	9a07      	ldr	r2, [sp, #28]
 800925e:	4654      	mov	r4, sl
 8009260:	2000      	movs	r0, #0
 8009262:	f04f 0c0a 	mov.w	ip, #10
 8009266:	4621      	mov	r1, r4
 8009268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800926c:	3b30      	subs	r3, #48	@ 0x30
 800926e:	2b09      	cmp	r3, #9
 8009270:	d94b      	bls.n	800930a <_vfiprintf_r+0x1a2>
 8009272:	b1b0      	cbz	r0, 80092a2 <_vfiprintf_r+0x13a>
 8009274:	9207      	str	r2, [sp, #28]
 8009276:	e014      	b.n	80092a2 <_vfiprintf_r+0x13a>
 8009278:	eba0 0308 	sub.w	r3, r0, r8
 800927c:	fa09 f303 	lsl.w	r3, r9, r3
 8009280:	4313      	orrs	r3, r2
 8009282:	9304      	str	r3, [sp, #16]
 8009284:	46a2      	mov	sl, r4
 8009286:	e7d2      	b.n	800922e <_vfiprintf_r+0xc6>
 8009288:	9b03      	ldr	r3, [sp, #12]
 800928a:	1d19      	adds	r1, r3, #4
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	9103      	str	r1, [sp, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	bfbb      	ittet	lt
 8009294:	425b      	neglt	r3, r3
 8009296:	f042 0202 	orrlt.w	r2, r2, #2
 800929a:	9307      	strge	r3, [sp, #28]
 800929c:	9307      	strlt	r3, [sp, #28]
 800929e:	bfb8      	it	lt
 80092a0:	9204      	strlt	r2, [sp, #16]
 80092a2:	7823      	ldrb	r3, [r4, #0]
 80092a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80092a6:	d10a      	bne.n	80092be <_vfiprintf_r+0x156>
 80092a8:	7863      	ldrb	r3, [r4, #1]
 80092aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80092ac:	d132      	bne.n	8009314 <_vfiprintf_r+0x1ac>
 80092ae:	9b03      	ldr	r3, [sp, #12]
 80092b0:	1d1a      	adds	r2, r3, #4
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	9203      	str	r2, [sp, #12]
 80092b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092ba:	3402      	adds	r4, #2
 80092bc:	9305      	str	r3, [sp, #20]
 80092be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009394 <_vfiprintf_r+0x22c>
 80092c2:	7821      	ldrb	r1, [r4, #0]
 80092c4:	2203      	movs	r2, #3
 80092c6:	4650      	mov	r0, sl
 80092c8:	f7f6 ff9a 	bl	8000200 <memchr>
 80092cc:	b138      	cbz	r0, 80092de <_vfiprintf_r+0x176>
 80092ce:	9b04      	ldr	r3, [sp, #16]
 80092d0:	eba0 000a 	sub.w	r0, r0, sl
 80092d4:	2240      	movs	r2, #64	@ 0x40
 80092d6:	4082      	lsls	r2, r0
 80092d8:	4313      	orrs	r3, r2
 80092da:	3401      	adds	r4, #1
 80092dc:	9304      	str	r3, [sp, #16]
 80092de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e2:	4829      	ldr	r0, [pc, #164]	@ (8009388 <_vfiprintf_r+0x220>)
 80092e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092e8:	2206      	movs	r2, #6
 80092ea:	f7f6 ff89 	bl	8000200 <memchr>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d03f      	beq.n	8009372 <_vfiprintf_r+0x20a>
 80092f2:	4b26      	ldr	r3, [pc, #152]	@ (800938c <_vfiprintf_r+0x224>)
 80092f4:	bb1b      	cbnz	r3, 800933e <_vfiprintf_r+0x1d6>
 80092f6:	9b03      	ldr	r3, [sp, #12]
 80092f8:	3307      	adds	r3, #7
 80092fa:	f023 0307 	bic.w	r3, r3, #7
 80092fe:	3308      	adds	r3, #8
 8009300:	9303      	str	r3, [sp, #12]
 8009302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009304:	443b      	add	r3, r7
 8009306:	9309      	str	r3, [sp, #36]	@ 0x24
 8009308:	e76a      	b.n	80091e0 <_vfiprintf_r+0x78>
 800930a:	fb0c 3202 	mla	r2, ip, r2, r3
 800930e:	460c      	mov	r4, r1
 8009310:	2001      	movs	r0, #1
 8009312:	e7a8      	b.n	8009266 <_vfiprintf_r+0xfe>
 8009314:	2300      	movs	r3, #0
 8009316:	3401      	adds	r4, #1
 8009318:	9305      	str	r3, [sp, #20]
 800931a:	4619      	mov	r1, r3
 800931c:	f04f 0c0a 	mov.w	ip, #10
 8009320:	4620      	mov	r0, r4
 8009322:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009326:	3a30      	subs	r2, #48	@ 0x30
 8009328:	2a09      	cmp	r2, #9
 800932a:	d903      	bls.n	8009334 <_vfiprintf_r+0x1cc>
 800932c:	2b00      	cmp	r3, #0
 800932e:	d0c6      	beq.n	80092be <_vfiprintf_r+0x156>
 8009330:	9105      	str	r1, [sp, #20]
 8009332:	e7c4      	b.n	80092be <_vfiprintf_r+0x156>
 8009334:	fb0c 2101 	mla	r1, ip, r1, r2
 8009338:	4604      	mov	r4, r0
 800933a:	2301      	movs	r3, #1
 800933c:	e7f0      	b.n	8009320 <_vfiprintf_r+0x1b8>
 800933e:	ab03      	add	r3, sp, #12
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	462a      	mov	r2, r5
 8009344:	4b12      	ldr	r3, [pc, #72]	@ (8009390 <_vfiprintf_r+0x228>)
 8009346:	a904      	add	r1, sp, #16
 8009348:	4630      	mov	r0, r6
 800934a:	f7fd fb89 	bl	8006a60 <_printf_float>
 800934e:	4607      	mov	r7, r0
 8009350:	1c78      	adds	r0, r7, #1
 8009352:	d1d6      	bne.n	8009302 <_vfiprintf_r+0x19a>
 8009354:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009356:	07d9      	lsls	r1, r3, #31
 8009358:	d405      	bmi.n	8009366 <_vfiprintf_r+0x1fe>
 800935a:	89ab      	ldrh	r3, [r5, #12]
 800935c:	059a      	lsls	r2, r3, #22
 800935e:	d402      	bmi.n	8009366 <_vfiprintf_r+0x1fe>
 8009360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009362:	f7fe fa77 	bl	8007854 <__retarget_lock_release_recursive>
 8009366:	89ab      	ldrh	r3, [r5, #12]
 8009368:	065b      	lsls	r3, r3, #25
 800936a:	f53f af1f 	bmi.w	80091ac <_vfiprintf_r+0x44>
 800936e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009370:	e71e      	b.n	80091b0 <_vfiprintf_r+0x48>
 8009372:	ab03      	add	r3, sp, #12
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	462a      	mov	r2, r5
 8009378:	4b05      	ldr	r3, [pc, #20]	@ (8009390 <_vfiprintf_r+0x228>)
 800937a:	a904      	add	r1, sp, #16
 800937c:	4630      	mov	r0, r6
 800937e:	f7fd fe07 	bl	8006f90 <_printf_i>
 8009382:	e7e4      	b.n	800934e <_vfiprintf_r+0x1e6>
 8009384:	0800ad4d 	.word	0x0800ad4d
 8009388:	0800ad57 	.word	0x0800ad57
 800938c:	08006a61 	.word	0x08006a61
 8009390:	08009143 	.word	0x08009143
 8009394:	0800ad53 	.word	0x0800ad53

08009398 <__sflush_r>:
 8009398:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800939c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a0:	0716      	lsls	r6, r2, #28
 80093a2:	4605      	mov	r5, r0
 80093a4:	460c      	mov	r4, r1
 80093a6:	d454      	bmi.n	8009452 <__sflush_r+0xba>
 80093a8:	684b      	ldr	r3, [r1, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	dc02      	bgt.n	80093b4 <__sflush_r+0x1c>
 80093ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	dd48      	ble.n	8009446 <__sflush_r+0xae>
 80093b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093b6:	2e00      	cmp	r6, #0
 80093b8:	d045      	beq.n	8009446 <__sflush_r+0xae>
 80093ba:	2300      	movs	r3, #0
 80093bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80093c0:	682f      	ldr	r7, [r5, #0]
 80093c2:	6a21      	ldr	r1, [r4, #32]
 80093c4:	602b      	str	r3, [r5, #0]
 80093c6:	d030      	beq.n	800942a <__sflush_r+0x92>
 80093c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093ca:	89a3      	ldrh	r3, [r4, #12]
 80093cc:	0759      	lsls	r1, r3, #29
 80093ce:	d505      	bpl.n	80093dc <__sflush_r+0x44>
 80093d0:	6863      	ldr	r3, [r4, #4]
 80093d2:	1ad2      	subs	r2, r2, r3
 80093d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80093d6:	b10b      	cbz	r3, 80093dc <__sflush_r+0x44>
 80093d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80093da:	1ad2      	subs	r2, r2, r3
 80093dc:	2300      	movs	r3, #0
 80093de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093e0:	6a21      	ldr	r1, [r4, #32]
 80093e2:	4628      	mov	r0, r5
 80093e4:	47b0      	blx	r6
 80093e6:	1c43      	adds	r3, r0, #1
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	d106      	bne.n	80093fa <__sflush_r+0x62>
 80093ec:	6829      	ldr	r1, [r5, #0]
 80093ee:	291d      	cmp	r1, #29
 80093f0:	d82b      	bhi.n	800944a <__sflush_r+0xb2>
 80093f2:	4a2a      	ldr	r2, [pc, #168]	@ (800949c <__sflush_r+0x104>)
 80093f4:	40ca      	lsrs	r2, r1
 80093f6:	07d6      	lsls	r6, r2, #31
 80093f8:	d527      	bpl.n	800944a <__sflush_r+0xb2>
 80093fa:	2200      	movs	r2, #0
 80093fc:	6062      	str	r2, [r4, #4]
 80093fe:	04d9      	lsls	r1, r3, #19
 8009400:	6922      	ldr	r2, [r4, #16]
 8009402:	6022      	str	r2, [r4, #0]
 8009404:	d504      	bpl.n	8009410 <__sflush_r+0x78>
 8009406:	1c42      	adds	r2, r0, #1
 8009408:	d101      	bne.n	800940e <__sflush_r+0x76>
 800940a:	682b      	ldr	r3, [r5, #0]
 800940c:	b903      	cbnz	r3, 8009410 <__sflush_r+0x78>
 800940e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009410:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009412:	602f      	str	r7, [r5, #0]
 8009414:	b1b9      	cbz	r1, 8009446 <__sflush_r+0xae>
 8009416:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800941a:	4299      	cmp	r1, r3
 800941c:	d002      	beq.n	8009424 <__sflush_r+0x8c>
 800941e:	4628      	mov	r0, r5
 8009420:	f7ff f8a6 	bl	8008570 <_free_r>
 8009424:	2300      	movs	r3, #0
 8009426:	6363      	str	r3, [r4, #52]	@ 0x34
 8009428:	e00d      	b.n	8009446 <__sflush_r+0xae>
 800942a:	2301      	movs	r3, #1
 800942c:	4628      	mov	r0, r5
 800942e:	47b0      	blx	r6
 8009430:	4602      	mov	r2, r0
 8009432:	1c50      	adds	r0, r2, #1
 8009434:	d1c9      	bne.n	80093ca <__sflush_r+0x32>
 8009436:	682b      	ldr	r3, [r5, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d0c6      	beq.n	80093ca <__sflush_r+0x32>
 800943c:	2b1d      	cmp	r3, #29
 800943e:	d001      	beq.n	8009444 <__sflush_r+0xac>
 8009440:	2b16      	cmp	r3, #22
 8009442:	d11e      	bne.n	8009482 <__sflush_r+0xea>
 8009444:	602f      	str	r7, [r5, #0]
 8009446:	2000      	movs	r0, #0
 8009448:	e022      	b.n	8009490 <__sflush_r+0xf8>
 800944a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800944e:	b21b      	sxth	r3, r3
 8009450:	e01b      	b.n	800948a <__sflush_r+0xf2>
 8009452:	690f      	ldr	r7, [r1, #16]
 8009454:	2f00      	cmp	r7, #0
 8009456:	d0f6      	beq.n	8009446 <__sflush_r+0xae>
 8009458:	0793      	lsls	r3, r2, #30
 800945a:	680e      	ldr	r6, [r1, #0]
 800945c:	bf08      	it	eq
 800945e:	694b      	ldreq	r3, [r1, #20]
 8009460:	600f      	str	r7, [r1, #0]
 8009462:	bf18      	it	ne
 8009464:	2300      	movne	r3, #0
 8009466:	eba6 0807 	sub.w	r8, r6, r7
 800946a:	608b      	str	r3, [r1, #8]
 800946c:	f1b8 0f00 	cmp.w	r8, #0
 8009470:	dde9      	ble.n	8009446 <__sflush_r+0xae>
 8009472:	6a21      	ldr	r1, [r4, #32]
 8009474:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009476:	4643      	mov	r3, r8
 8009478:	463a      	mov	r2, r7
 800947a:	4628      	mov	r0, r5
 800947c:	47b0      	blx	r6
 800947e:	2800      	cmp	r0, #0
 8009480:	dc08      	bgt.n	8009494 <__sflush_r+0xfc>
 8009482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800948a:	81a3      	strh	r3, [r4, #12]
 800948c:	f04f 30ff 	mov.w	r0, #4294967295
 8009490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009494:	4407      	add	r7, r0
 8009496:	eba8 0800 	sub.w	r8, r8, r0
 800949a:	e7e7      	b.n	800946c <__sflush_r+0xd4>
 800949c:	20400001 	.word	0x20400001

080094a0 <_fflush_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	690b      	ldr	r3, [r1, #16]
 80094a4:	4605      	mov	r5, r0
 80094a6:	460c      	mov	r4, r1
 80094a8:	b913      	cbnz	r3, 80094b0 <_fflush_r+0x10>
 80094aa:	2500      	movs	r5, #0
 80094ac:	4628      	mov	r0, r5
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	b118      	cbz	r0, 80094ba <_fflush_r+0x1a>
 80094b2:	6a03      	ldr	r3, [r0, #32]
 80094b4:	b90b      	cbnz	r3, 80094ba <_fflush_r+0x1a>
 80094b6:	f7fd ff15 	bl	80072e4 <__sinit>
 80094ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d0f3      	beq.n	80094aa <_fflush_r+0xa>
 80094c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80094c4:	07d0      	lsls	r0, r2, #31
 80094c6:	d404      	bmi.n	80094d2 <_fflush_r+0x32>
 80094c8:	0599      	lsls	r1, r3, #22
 80094ca:	d402      	bmi.n	80094d2 <_fflush_r+0x32>
 80094cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094ce:	f7fe f9c0 	bl	8007852 <__retarget_lock_acquire_recursive>
 80094d2:	4628      	mov	r0, r5
 80094d4:	4621      	mov	r1, r4
 80094d6:	f7ff ff5f 	bl	8009398 <__sflush_r>
 80094da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094dc:	07da      	lsls	r2, r3, #31
 80094de:	4605      	mov	r5, r0
 80094e0:	d4e4      	bmi.n	80094ac <_fflush_r+0xc>
 80094e2:	89a3      	ldrh	r3, [r4, #12]
 80094e4:	059b      	lsls	r3, r3, #22
 80094e6:	d4e1      	bmi.n	80094ac <_fflush_r+0xc>
 80094e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094ea:	f7fe f9b3 	bl	8007854 <__retarget_lock_release_recursive>
 80094ee:	e7dd      	b.n	80094ac <_fflush_r+0xc>

080094f0 <fiprintf>:
 80094f0:	b40e      	push	{r1, r2, r3}
 80094f2:	b503      	push	{r0, r1, lr}
 80094f4:	4601      	mov	r1, r0
 80094f6:	ab03      	add	r3, sp, #12
 80094f8:	4805      	ldr	r0, [pc, #20]	@ (8009510 <fiprintf+0x20>)
 80094fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80094fe:	6800      	ldr	r0, [r0, #0]
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	f7ff fe31 	bl	8009168 <_vfiprintf_r>
 8009506:	b002      	add	sp, #8
 8009508:	f85d eb04 	ldr.w	lr, [sp], #4
 800950c:	b003      	add	sp, #12
 800950e:	4770      	bx	lr
 8009510:	2000001c 	.word	0x2000001c

08009514 <__swhatbuf_r>:
 8009514:	b570      	push	{r4, r5, r6, lr}
 8009516:	460c      	mov	r4, r1
 8009518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800951c:	2900      	cmp	r1, #0
 800951e:	b096      	sub	sp, #88	@ 0x58
 8009520:	4615      	mov	r5, r2
 8009522:	461e      	mov	r6, r3
 8009524:	da0d      	bge.n	8009542 <__swhatbuf_r+0x2e>
 8009526:	89a3      	ldrh	r3, [r4, #12]
 8009528:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800952c:	f04f 0100 	mov.w	r1, #0
 8009530:	bf14      	ite	ne
 8009532:	2340      	movne	r3, #64	@ 0x40
 8009534:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009538:	2000      	movs	r0, #0
 800953a:	6031      	str	r1, [r6, #0]
 800953c:	602b      	str	r3, [r5, #0]
 800953e:	b016      	add	sp, #88	@ 0x58
 8009540:	bd70      	pop	{r4, r5, r6, pc}
 8009542:	466a      	mov	r2, sp
 8009544:	f000 f896 	bl	8009674 <_fstat_r>
 8009548:	2800      	cmp	r0, #0
 800954a:	dbec      	blt.n	8009526 <__swhatbuf_r+0x12>
 800954c:	9901      	ldr	r1, [sp, #4]
 800954e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009552:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009556:	4259      	negs	r1, r3
 8009558:	4159      	adcs	r1, r3
 800955a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800955e:	e7eb      	b.n	8009538 <__swhatbuf_r+0x24>

08009560 <__smakebuf_r>:
 8009560:	898b      	ldrh	r3, [r1, #12]
 8009562:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009564:	079d      	lsls	r5, r3, #30
 8009566:	4606      	mov	r6, r0
 8009568:	460c      	mov	r4, r1
 800956a:	d507      	bpl.n	800957c <__smakebuf_r+0x1c>
 800956c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	6123      	str	r3, [r4, #16]
 8009574:	2301      	movs	r3, #1
 8009576:	6163      	str	r3, [r4, #20]
 8009578:	b003      	add	sp, #12
 800957a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800957c:	ab01      	add	r3, sp, #4
 800957e:	466a      	mov	r2, sp
 8009580:	f7ff ffc8 	bl	8009514 <__swhatbuf_r>
 8009584:	9f00      	ldr	r7, [sp, #0]
 8009586:	4605      	mov	r5, r0
 8009588:	4639      	mov	r1, r7
 800958a:	4630      	mov	r0, r6
 800958c:	f7ff f864 	bl	8008658 <_malloc_r>
 8009590:	b948      	cbnz	r0, 80095a6 <__smakebuf_r+0x46>
 8009592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009596:	059a      	lsls	r2, r3, #22
 8009598:	d4ee      	bmi.n	8009578 <__smakebuf_r+0x18>
 800959a:	f023 0303 	bic.w	r3, r3, #3
 800959e:	f043 0302 	orr.w	r3, r3, #2
 80095a2:	81a3      	strh	r3, [r4, #12]
 80095a4:	e7e2      	b.n	800956c <__smakebuf_r+0xc>
 80095a6:	89a3      	ldrh	r3, [r4, #12]
 80095a8:	6020      	str	r0, [r4, #0]
 80095aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095ae:	81a3      	strh	r3, [r4, #12]
 80095b0:	9b01      	ldr	r3, [sp, #4]
 80095b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80095b6:	b15b      	cbz	r3, 80095d0 <__smakebuf_r+0x70>
 80095b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095bc:	4630      	mov	r0, r6
 80095be:	f000 f86b 	bl	8009698 <_isatty_r>
 80095c2:	b128      	cbz	r0, 80095d0 <__smakebuf_r+0x70>
 80095c4:	89a3      	ldrh	r3, [r4, #12]
 80095c6:	f023 0303 	bic.w	r3, r3, #3
 80095ca:	f043 0301 	orr.w	r3, r3, #1
 80095ce:	81a3      	strh	r3, [r4, #12]
 80095d0:	89a3      	ldrh	r3, [r4, #12]
 80095d2:	431d      	orrs	r5, r3
 80095d4:	81a5      	strh	r5, [r4, #12]
 80095d6:	e7cf      	b.n	8009578 <__smakebuf_r+0x18>

080095d8 <_putc_r>:
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	460d      	mov	r5, r1
 80095dc:	4614      	mov	r4, r2
 80095de:	4606      	mov	r6, r0
 80095e0:	b118      	cbz	r0, 80095ea <_putc_r+0x12>
 80095e2:	6a03      	ldr	r3, [r0, #32]
 80095e4:	b90b      	cbnz	r3, 80095ea <_putc_r+0x12>
 80095e6:	f7fd fe7d 	bl	80072e4 <__sinit>
 80095ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095ec:	07d8      	lsls	r0, r3, #31
 80095ee:	d405      	bmi.n	80095fc <_putc_r+0x24>
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	0599      	lsls	r1, r3, #22
 80095f4:	d402      	bmi.n	80095fc <_putc_r+0x24>
 80095f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095f8:	f7fe f92b 	bl	8007852 <__retarget_lock_acquire_recursive>
 80095fc:	68a3      	ldr	r3, [r4, #8]
 80095fe:	3b01      	subs	r3, #1
 8009600:	2b00      	cmp	r3, #0
 8009602:	60a3      	str	r3, [r4, #8]
 8009604:	da05      	bge.n	8009612 <_putc_r+0x3a>
 8009606:	69a2      	ldr	r2, [r4, #24]
 8009608:	4293      	cmp	r3, r2
 800960a:	db12      	blt.n	8009632 <_putc_r+0x5a>
 800960c:	b2eb      	uxtb	r3, r5
 800960e:	2b0a      	cmp	r3, #10
 8009610:	d00f      	beq.n	8009632 <_putc_r+0x5a>
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	1c5a      	adds	r2, r3, #1
 8009616:	6022      	str	r2, [r4, #0]
 8009618:	701d      	strb	r5, [r3, #0]
 800961a:	b2ed      	uxtb	r5, r5
 800961c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800961e:	07da      	lsls	r2, r3, #31
 8009620:	d405      	bmi.n	800962e <_putc_r+0x56>
 8009622:	89a3      	ldrh	r3, [r4, #12]
 8009624:	059b      	lsls	r3, r3, #22
 8009626:	d402      	bmi.n	800962e <_putc_r+0x56>
 8009628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800962a:	f7fe f913 	bl	8007854 <__retarget_lock_release_recursive>
 800962e:	4628      	mov	r0, r5
 8009630:	bd70      	pop	{r4, r5, r6, pc}
 8009632:	4629      	mov	r1, r5
 8009634:	4622      	mov	r2, r4
 8009636:	4630      	mov	r0, r6
 8009638:	f7fd ff67 	bl	800750a <__swbuf_r>
 800963c:	4605      	mov	r5, r0
 800963e:	e7ed      	b.n	800961c <_putc_r+0x44>

08009640 <memmove>:
 8009640:	4288      	cmp	r0, r1
 8009642:	b510      	push	{r4, lr}
 8009644:	eb01 0402 	add.w	r4, r1, r2
 8009648:	d902      	bls.n	8009650 <memmove+0x10>
 800964a:	4284      	cmp	r4, r0
 800964c:	4623      	mov	r3, r4
 800964e:	d807      	bhi.n	8009660 <memmove+0x20>
 8009650:	1e43      	subs	r3, r0, #1
 8009652:	42a1      	cmp	r1, r4
 8009654:	d008      	beq.n	8009668 <memmove+0x28>
 8009656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800965a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800965e:	e7f8      	b.n	8009652 <memmove+0x12>
 8009660:	4402      	add	r2, r0
 8009662:	4601      	mov	r1, r0
 8009664:	428a      	cmp	r2, r1
 8009666:	d100      	bne.n	800966a <memmove+0x2a>
 8009668:	bd10      	pop	{r4, pc}
 800966a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800966e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009672:	e7f7      	b.n	8009664 <memmove+0x24>

08009674 <_fstat_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	4d07      	ldr	r5, [pc, #28]	@ (8009694 <_fstat_r+0x20>)
 8009678:	2300      	movs	r3, #0
 800967a:	4604      	mov	r4, r0
 800967c:	4608      	mov	r0, r1
 800967e:	4611      	mov	r1, r2
 8009680:	602b      	str	r3, [r5, #0]
 8009682:	f7f9 faa3 	bl	8002bcc <_fstat>
 8009686:	1c43      	adds	r3, r0, #1
 8009688:	d102      	bne.n	8009690 <_fstat_r+0x1c>
 800968a:	682b      	ldr	r3, [r5, #0]
 800968c:	b103      	cbz	r3, 8009690 <_fstat_r+0x1c>
 800968e:	6023      	str	r3, [r4, #0]
 8009690:	bd38      	pop	{r3, r4, r5, pc}
 8009692:	bf00      	nop
 8009694:	20000dbc 	.word	0x20000dbc

08009698 <_isatty_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4d06      	ldr	r5, [pc, #24]	@ (80096b4 <_isatty_r+0x1c>)
 800969c:	2300      	movs	r3, #0
 800969e:	4604      	mov	r4, r0
 80096a0:	4608      	mov	r0, r1
 80096a2:	602b      	str	r3, [r5, #0]
 80096a4:	f7f9 faa2 	bl	8002bec <_isatty>
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	d102      	bne.n	80096b2 <_isatty_r+0x1a>
 80096ac:	682b      	ldr	r3, [r5, #0]
 80096ae:	b103      	cbz	r3, 80096b2 <_isatty_r+0x1a>
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	bd38      	pop	{r3, r4, r5, pc}
 80096b4:	20000dbc 	.word	0x20000dbc

080096b8 <_sbrk_r>:
 80096b8:	b538      	push	{r3, r4, r5, lr}
 80096ba:	4d06      	ldr	r5, [pc, #24]	@ (80096d4 <_sbrk_r+0x1c>)
 80096bc:	2300      	movs	r3, #0
 80096be:	4604      	mov	r4, r0
 80096c0:	4608      	mov	r0, r1
 80096c2:	602b      	str	r3, [r5, #0]
 80096c4:	f7f9 faaa 	bl	8002c1c <_sbrk>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d102      	bne.n	80096d2 <_sbrk_r+0x1a>
 80096cc:	682b      	ldr	r3, [r5, #0]
 80096ce:	b103      	cbz	r3, 80096d2 <_sbrk_r+0x1a>
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	bd38      	pop	{r3, r4, r5, pc}
 80096d4:	20000dbc 	.word	0x20000dbc

080096d8 <abort>:
 80096d8:	b508      	push	{r3, lr}
 80096da:	2006      	movs	r0, #6
 80096dc:	f000 f88c 	bl	80097f8 <raise>
 80096e0:	2001      	movs	r0, #1
 80096e2:	f7f9 fa23 	bl	8002b2c <_exit>

080096e6 <_calloc_r>:
 80096e6:	b570      	push	{r4, r5, r6, lr}
 80096e8:	fba1 5402 	umull	r5, r4, r1, r2
 80096ec:	b934      	cbnz	r4, 80096fc <_calloc_r+0x16>
 80096ee:	4629      	mov	r1, r5
 80096f0:	f7fe ffb2 	bl	8008658 <_malloc_r>
 80096f4:	4606      	mov	r6, r0
 80096f6:	b928      	cbnz	r0, 8009704 <_calloc_r+0x1e>
 80096f8:	4630      	mov	r0, r6
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
 80096fc:	220c      	movs	r2, #12
 80096fe:	6002      	str	r2, [r0, #0]
 8009700:	2600      	movs	r6, #0
 8009702:	e7f9      	b.n	80096f8 <_calloc_r+0x12>
 8009704:	462a      	mov	r2, r5
 8009706:	4621      	mov	r1, r4
 8009708:	f7fd ff94 	bl	8007634 <memset>
 800970c:	e7f4      	b.n	80096f8 <_calloc_r+0x12>

0800970e <__ascii_mbtowc>:
 800970e:	b082      	sub	sp, #8
 8009710:	b901      	cbnz	r1, 8009714 <__ascii_mbtowc+0x6>
 8009712:	a901      	add	r1, sp, #4
 8009714:	b142      	cbz	r2, 8009728 <__ascii_mbtowc+0x1a>
 8009716:	b14b      	cbz	r3, 800972c <__ascii_mbtowc+0x1e>
 8009718:	7813      	ldrb	r3, [r2, #0]
 800971a:	600b      	str	r3, [r1, #0]
 800971c:	7812      	ldrb	r2, [r2, #0]
 800971e:	1e10      	subs	r0, r2, #0
 8009720:	bf18      	it	ne
 8009722:	2001      	movne	r0, #1
 8009724:	b002      	add	sp, #8
 8009726:	4770      	bx	lr
 8009728:	4610      	mov	r0, r2
 800972a:	e7fb      	b.n	8009724 <__ascii_mbtowc+0x16>
 800972c:	f06f 0001 	mvn.w	r0, #1
 8009730:	e7f8      	b.n	8009724 <__ascii_mbtowc+0x16>

08009732 <_realloc_r>:
 8009732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009736:	4607      	mov	r7, r0
 8009738:	4614      	mov	r4, r2
 800973a:	460d      	mov	r5, r1
 800973c:	b921      	cbnz	r1, 8009748 <_realloc_r+0x16>
 800973e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009742:	4611      	mov	r1, r2
 8009744:	f7fe bf88 	b.w	8008658 <_malloc_r>
 8009748:	b92a      	cbnz	r2, 8009756 <_realloc_r+0x24>
 800974a:	f7fe ff11 	bl	8008570 <_free_r>
 800974e:	4625      	mov	r5, r4
 8009750:	4628      	mov	r0, r5
 8009752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009756:	f000 f86b 	bl	8009830 <_malloc_usable_size_r>
 800975a:	4284      	cmp	r4, r0
 800975c:	4606      	mov	r6, r0
 800975e:	d802      	bhi.n	8009766 <_realloc_r+0x34>
 8009760:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009764:	d8f4      	bhi.n	8009750 <_realloc_r+0x1e>
 8009766:	4621      	mov	r1, r4
 8009768:	4638      	mov	r0, r7
 800976a:	f7fe ff75 	bl	8008658 <_malloc_r>
 800976e:	4680      	mov	r8, r0
 8009770:	b908      	cbnz	r0, 8009776 <_realloc_r+0x44>
 8009772:	4645      	mov	r5, r8
 8009774:	e7ec      	b.n	8009750 <_realloc_r+0x1e>
 8009776:	42b4      	cmp	r4, r6
 8009778:	4622      	mov	r2, r4
 800977a:	4629      	mov	r1, r5
 800977c:	bf28      	it	cs
 800977e:	4632      	movcs	r2, r6
 8009780:	f7fe f871 	bl	8007866 <memcpy>
 8009784:	4629      	mov	r1, r5
 8009786:	4638      	mov	r0, r7
 8009788:	f7fe fef2 	bl	8008570 <_free_r>
 800978c:	e7f1      	b.n	8009772 <_realloc_r+0x40>

0800978e <__ascii_wctomb>:
 800978e:	4603      	mov	r3, r0
 8009790:	4608      	mov	r0, r1
 8009792:	b141      	cbz	r1, 80097a6 <__ascii_wctomb+0x18>
 8009794:	2aff      	cmp	r2, #255	@ 0xff
 8009796:	d904      	bls.n	80097a2 <__ascii_wctomb+0x14>
 8009798:	228a      	movs	r2, #138	@ 0x8a
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	f04f 30ff 	mov.w	r0, #4294967295
 80097a0:	4770      	bx	lr
 80097a2:	700a      	strb	r2, [r1, #0]
 80097a4:	2001      	movs	r0, #1
 80097a6:	4770      	bx	lr

080097a8 <_raise_r>:
 80097a8:	291f      	cmp	r1, #31
 80097aa:	b538      	push	{r3, r4, r5, lr}
 80097ac:	4605      	mov	r5, r0
 80097ae:	460c      	mov	r4, r1
 80097b0:	d904      	bls.n	80097bc <_raise_r+0x14>
 80097b2:	2316      	movs	r3, #22
 80097b4:	6003      	str	r3, [r0, #0]
 80097b6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80097be:	b112      	cbz	r2, 80097c6 <_raise_r+0x1e>
 80097c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097c4:	b94b      	cbnz	r3, 80097da <_raise_r+0x32>
 80097c6:	4628      	mov	r0, r5
 80097c8:	f000 f830 	bl	800982c <_getpid_r>
 80097cc:	4622      	mov	r2, r4
 80097ce:	4601      	mov	r1, r0
 80097d0:	4628      	mov	r0, r5
 80097d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097d6:	f000 b817 	b.w	8009808 <_kill_r>
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d00a      	beq.n	80097f4 <_raise_r+0x4c>
 80097de:	1c59      	adds	r1, r3, #1
 80097e0:	d103      	bne.n	80097ea <_raise_r+0x42>
 80097e2:	2316      	movs	r3, #22
 80097e4:	6003      	str	r3, [r0, #0]
 80097e6:	2001      	movs	r0, #1
 80097e8:	e7e7      	b.n	80097ba <_raise_r+0x12>
 80097ea:	2100      	movs	r1, #0
 80097ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80097f0:	4620      	mov	r0, r4
 80097f2:	4798      	blx	r3
 80097f4:	2000      	movs	r0, #0
 80097f6:	e7e0      	b.n	80097ba <_raise_r+0x12>

080097f8 <raise>:
 80097f8:	4b02      	ldr	r3, [pc, #8]	@ (8009804 <raise+0xc>)
 80097fa:	4601      	mov	r1, r0
 80097fc:	6818      	ldr	r0, [r3, #0]
 80097fe:	f7ff bfd3 	b.w	80097a8 <_raise_r>
 8009802:	bf00      	nop
 8009804:	2000001c 	.word	0x2000001c

08009808 <_kill_r>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	4d07      	ldr	r5, [pc, #28]	@ (8009828 <_kill_r+0x20>)
 800980c:	2300      	movs	r3, #0
 800980e:	4604      	mov	r4, r0
 8009810:	4608      	mov	r0, r1
 8009812:	4611      	mov	r1, r2
 8009814:	602b      	str	r3, [r5, #0]
 8009816:	f7f9 f979 	bl	8002b0c <_kill>
 800981a:	1c43      	adds	r3, r0, #1
 800981c:	d102      	bne.n	8009824 <_kill_r+0x1c>
 800981e:	682b      	ldr	r3, [r5, #0]
 8009820:	b103      	cbz	r3, 8009824 <_kill_r+0x1c>
 8009822:	6023      	str	r3, [r4, #0]
 8009824:	bd38      	pop	{r3, r4, r5, pc}
 8009826:	bf00      	nop
 8009828:	20000dbc 	.word	0x20000dbc

0800982c <_getpid_r>:
 800982c:	f7f9 b966 	b.w	8002afc <_getpid>

08009830 <_malloc_usable_size_r>:
 8009830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009834:	1f18      	subs	r0, r3, #4
 8009836:	2b00      	cmp	r3, #0
 8009838:	bfbc      	itt	lt
 800983a:	580b      	ldrlt	r3, [r1, r0]
 800983c:	18c0      	addlt	r0, r0, r3
 800983e:	4770      	bx	lr

08009840 <pow>:
 8009840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009842:	ed2d 8b02 	vpush	{d8}
 8009846:	eeb0 8a40 	vmov.f32	s16, s0
 800984a:	eef0 8a60 	vmov.f32	s17, s1
 800984e:	ec55 4b11 	vmov	r4, r5, d1
 8009852:	f000 f871 	bl	8009938 <__ieee754_pow>
 8009856:	4622      	mov	r2, r4
 8009858:	462b      	mov	r3, r5
 800985a:	4620      	mov	r0, r4
 800985c:	4629      	mov	r1, r5
 800985e:	ec57 6b10 	vmov	r6, r7, d0
 8009862:	f7f7 f97b 	bl	8000b5c <__aeabi_dcmpun>
 8009866:	2800      	cmp	r0, #0
 8009868:	d13b      	bne.n	80098e2 <pow+0xa2>
 800986a:	ec51 0b18 	vmov	r0, r1, d8
 800986e:	2200      	movs	r2, #0
 8009870:	2300      	movs	r3, #0
 8009872:	f7f7 f941 	bl	8000af8 <__aeabi_dcmpeq>
 8009876:	b1b8      	cbz	r0, 80098a8 <pow+0x68>
 8009878:	2200      	movs	r2, #0
 800987a:	2300      	movs	r3, #0
 800987c:	4620      	mov	r0, r4
 800987e:	4629      	mov	r1, r5
 8009880:	f7f7 f93a 	bl	8000af8 <__aeabi_dcmpeq>
 8009884:	2800      	cmp	r0, #0
 8009886:	d146      	bne.n	8009916 <pow+0xd6>
 8009888:	ec45 4b10 	vmov	d0, r4, r5
 800988c:	f000 f848 	bl	8009920 <finite>
 8009890:	b338      	cbz	r0, 80098e2 <pow+0xa2>
 8009892:	2200      	movs	r2, #0
 8009894:	2300      	movs	r3, #0
 8009896:	4620      	mov	r0, r4
 8009898:	4629      	mov	r1, r5
 800989a:	f7f7 f937 	bl	8000b0c <__aeabi_dcmplt>
 800989e:	b300      	cbz	r0, 80098e2 <pow+0xa2>
 80098a0:	f7fd ffac 	bl	80077fc <__errno>
 80098a4:	2322      	movs	r3, #34	@ 0x22
 80098a6:	e01b      	b.n	80098e0 <pow+0xa0>
 80098a8:	ec47 6b10 	vmov	d0, r6, r7
 80098ac:	f000 f838 	bl	8009920 <finite>
 80098b0:	b9e0      	cbnz	r0, 80098ec <pow+0xac>
 80098b2:	eeb0 0a48 	vmov.f32	s0, s16
 80098b6:	eef0 0a68 	vmov.f32	s1, s17
 80098ba:	f000 f831 	bl	8009920 <finite>
 80098be:	b1a8      	cbz	r0, 80098ec <pow+0xac>
 80098c0:	ec45 4b10 	vmov	d0, r4, r5
 80098c4:	f000 f82c 	bl	8009920 <finite>
 80098c8:	b180      	cbz	r0, 80098ec <pow+0xac>
 80098ca:	4632      	mov	r2, r6
 80098cc:	463b      	mov	r3, r7
 80098ce:	4630      	mov	r0, r6
 80098d0:	4639      	mov	r1, r7
 80098d2:	f7f7 f943 	bl	8000b5c <__aeabi_dcmpun>
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d0e2      	beq.n	80098a0 <pow+0x60>
 80098da:	f7fd ff8f 	bl	80077fc <__errno>
 80098de:	2321      	movs	r3, #33	@ 0x21
 80098e0:	6003      	str	r3, [r0, #0]
 80098e2:	ecbd 8b02 	vpop	{d8}
 80098e6:	ec47 6b10 	vmov	d0, r6, r7
 80098ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098ec:	2200      	movs	r2, #0
 80098ee:	2300      	movs	r3, #0
 80098f0:	4630      	mov	r0, r6
 80098f2:	4639      	mov	r1, r7
 80098f4:	f7f7 f900 	bl	8000af8 <__aeabi_dcmpeq>
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d0f2      	beq.n	80098e2 <pow+0xa2>
 80098fc:	eeb0 0a48 	vmov.f32	s0, s16
 8009900:	eef0 0a68 	vmov.f32	s1, s17
 8009904:	f000 f80c 	bl	8009920 <finite>
 8009908:	2800      	cmp	r0, #0
 800990a:	d0ea      	beq.n	80098e2 <pow+0xa2>
 800990c:	ec45 4b10 	vmov	d0, r4, r5
 8009910:	f000 f806 	bl	8009920 <finite>
 8009914:	e7c3      	b.n	800989e <pow+0x5e>
 8009916:	4f01      	ldr	r7, [pc, #4]	@ (800991c <pow+0xdc>)
 8009918:	2600      	movs	r6, #0
 800991a:	e7e2      	b.n	80098e2 <pow+0xa2>
 800991c:	3ff00000 	.word	0x3ff00000

08009920 <finite>:
 8009920:	b082      	sub	sp, #8
 8009922:	ed8d 0b00 	vstr	d0, [sp]
 8009926:	9801      	ldr	r0, [sp, #4]
 8009928:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800992c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009930:	0fc0      	lsrs	r0, r0, #31
 8009932:	b002      	add	sp, #8
 8009934:	4770      	bx	lr
	...

08009938 <__ieee754_pow>:
 8009938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	b091      	sub	sp, #68	@ 0x44
 800993e:	ed8d 1b00 	vstr	d1, [sp]
 8009942:	e9dd 1900 	ldrd	r1, r9, [sp]
 8009946:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800994a:	ea5a 0001 	orrs.w	r0, sl, r1
 800994e:	ec57 6b10 	vmov	r6, r7, d0
 8009952:	d113      	bne.n	800997c <__ieee754_pow+0x44>
 8009954:	19b3      	adds	r3, r6, r6
 8009956:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800995a:	4152      	adcs	r2, r2
 800995c:	4298      	cmp	r0, r3
 800995e:	4b9a      	ldr	r3, [pc, #616]	@ (8009bc8 <__ieee754_pow+0x290>)
 8009960:	4193      	sbcs	r3, r2
 8009962:	f080 84ee 	bcs.w	800a342 <__ieee754_pow+0xa0a>
 8009966:	e9dd 2300 	ldrd	r2, r3, [sp]
 800996a:	4630      	mov	r0, r6
 800996c:	4639      	mov	r1, r7
 800996e:	f7f6 fca5 	bl	80002bc <__adddf3>
 8009972:	ec41 0b10 	vmov	d0, r0, r1
 8009976:	b011      	add	sp, #68	@ 0x44
 8009978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997c:	4a93      	ldr	r2, [pc, #588]	@ (8009bcc <__ieee754_pow+0x294>)
 800997e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8009982:	4295      	cmp	r5, r2
 8009984:	46b8      	mov	r8, r7
 8009986:	4633      	mov	r3, r6
 8009988:	d80a      	bhi.n	80099a0 <__ieee754_pow+0x68>
 800998a:	d104      	bne.n	8009996 <__ieee754_pow+0x5e>
 800998c:	2e00      	cmp	r6, #0
 800998e:	d1ea      	bne.n	8009966 <__ieee754_pow+0x2e>
 8009990:	45aa      	cmp	sl, r5
 8009992:	d8e8      	bhi.n	8009966 <__ieee754_pow+0x2e>
 8009994:	e001      	b.n	800999a <__ieee754_pow+0x62>
 8009996:	4592      	cmp	sl, r2
 8009998:	d802      	bhi.n	80099a0 <__ieee754_pow+0x68>
 800999a:	4592      	cmp	sl, r2
 800999c:	d10f      	bne.n	80099be <__ieee754_pow+0x86>
 800999e:	b171      	cbz	r1, 80099be <__ieee754_pow+0x86>
 80099a0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80099a4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80099a8:	ea58 0803 	orrs.w	r8, r8, r3
 80099ac:	d1db      	bne.n	8009966 <__ieee754_pow+0x2e>
 80099ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 80099b2:	18db      	adds	r3, r3, r3
 80099b4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80099b8:	4152      	adcs	r2, r2
 80099ba:	4598      	cmp	r8, r3
 80099bc:	e7cf      	b.n	800995e <__ieee754_pow+0x26>
 80099be:	f1b8 0f00 	cmp.w	r8, #0
 80099c2:	46ab      	mov	fp, r5
 80099c4:	da43      	bge.n	8009a4e <__ieee754_pow+0x116>
 80099c6:	4a82      	ldr	r2, [pc, #520]	@ (8009bd0 <__ieee754_pow+0x298>)
 80099c8:	4592      	cmp	sl, r2
 80099ca:	d856      	bhi.n	8009a7a <__ieee754_pow+0x142>
 80099cc:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80099d0:	4592      	cmp	sl, r2
 80099d2:	f240 84c5 	bls.w	800a360 <__ieee754_pow+0xa28>
 80099d6:	ea4f 522a 	mov.w	r2, sl, asr #20
 80099da:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80099de:	2a14      	cmp	r2, #20
 80099e0:	dd18      	ble.n	8009a14 <__ieee754_pow+0xdc>
 80099e2:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80099e6:	fa21 f402 	lsr.w	r4, r1, r2
 80099ea:	fa04 f202 	lsl.w	r2, r4, r2
 80099ee:	428a      	cmp	r2, r1
 80099f0:	f040 84b6 	bne.w	800a360 <__ieee754_pow+0xa28>
 80099f4:	f004 0401 	and.w	r4, r4, #1
 80099f8:	f1c4 0402 	rsb	r4, r4, #2
 80099fc:	2900      	cmp	r1, #0
 80099fe:	d159      	bne.n	8009ab4 <__ieee754_pow+0x17c>
 8009a00:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8009a04:	d148      	bne.n	8009a98 <__ieee754_pow+0x160>
 8009a06:	4632      	mov	r2, r6
 8009a08:	463b      	mov	r3, r7
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	4639      	mov	r1, r7
 8009a0e:	f7f6 fe0b 	bl	8000628 <__aeabi_dmul>
 8009a12:	e7ae      	b.n	8009972 <__ieee754_pow+0x3a>
 8009a14:	2900      	cmp	r1, #0
 8009a16:	d14c      	bne.n	8009ab2 <__ieee754_pow+0x17a>
 8009a18:	f1c2 0214 	rsb	r2, r2, #20
 8009a1c:	fa4a f402 	asr.w	r4, sl, r2
 8009a20:	fa04 f202 	lsl.w	r2, r4, r2
 8009a24:	4552      	cmp	r2, sl
 8009a26:	f040 8498 	bne.w	800a35a <__ieee754_pow+0xa22>
 8009a2a:	f004 0401 	and.w	r4, r4, #1
 8009a2e:	f1c4 0402 	rsb	r4, r4, #2
 8009a32:	4a68      	ldr	r2, [pc, #416]	@ (8009bd4 <__ieee754_pow+0x29c>)
 8009a34:	4592      	cmp	sl, r2
 8009a36:	d1e3      	bne.n	8009a00 <__ieee754_pow+0xc8>
 8009a38:	f1b9 0f00 	cmp.w	r9, #0
 8009a3c:	f280 8489 	bge.w	800a352 <__ieee754_pow+0xa1a>
 8009a40:	4964      	ldr	r1, [pc, #400]	@ (8009bd4 <__ieee754_pow+0x29c>)
 8009a42:	4632      	mov	r2, r6
 8009a44:	463b      	mov	r3, r7
 8009a46:	2000      	movs	r0, #0
 8009a48:	f7f6 ff18 	bl	800087c <__aeabi_ddiv>
 8009a4c:	e791      	b.n	8009972 <__ieee754_pow+0x3a>
 8009a4e:	2400      	movs	r4, #0
 8009a50:	bb81      	cbnz	r1, 8009ab4 <__ieee754_pow+0x17c>
 8009a52:	4a5e      	ldr	r2, [pc, #376]	@ (8009bcc <__ieee754_pow+0x294>)
 8009a54:	4592      	cmp	sl, r2
 8009a56:	d1ec      	bne.n	8009a32 <__ieee754_pow+0xfa>
 8009a58:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8009a5c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009a60:	431a      	orrs	r2, r3
 8009a62:	f000 846e 	beq.w	800a342 <__ieee754_pow+0xa0a>
 8009a66:	4b5c      	ldr	r3, [pc, #368]	@ (8009bd8 <__ieee754_pow+0x2a0>)
 8009a68:	429d      	cmp	r5, r3
 8009a6a:	d908      	bls.n	8009a7e <__ieee754_pow+0x146>
 8009a6c:	f1b9 0f00 	cmp.w	r9, #0
 8009a70:	f280 846b 	bge.w	800a34a <__ieee754_pow+0xa12>
 8009a74:	2000      	movs	r0, #0
 8009a76:	2100      	movs	r1, #0
 8009a78:	e77b      	b.n	8009972 <__ieee754_pow+0x3a>
 8009a7a:	2402      	movs	r4, #2
 8009a7c:	e7e8      	b.n	8009a50 <__ieee754_pow+0x118>
 8009a7e:	f1b9 0f00 	cmp.w	r9, #0
 8009a82:	f04f 0000 	mov.w	r0, #0
 8009a86:	f04f 0100 	mov.w	r1, #0
 8009a8a:	f6bf af72 	bge.w	8009972 <__ieee754_pow+0x3a>
 8009a8e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009a92:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009a96:	e76c      	b.n	8009972 <__ieee754_pow+0x3a>
 8009a98:	4a50      	ldr	r2, [pc, #320]	@ (8009bdc <__ieee754_pow+0x2a4>)
 8009a9a:	4591      	cmp	r9, r2
 8009a9c:	d10a      	bne.n	8009ab4 <__ieee754_pow+0x17c>
 8009a9e:	f1b8 0f00 	cmp.w	r8, #0
 8009aa2:	db07      	blt.n	8009ab4 <__ieee754_pow+0x17c>
 8009aa4:	ec47 6b10 	vmov	d0, r6, r7
 8009aa8:	b011      	add	sp, #68	@ 0x44
 8009aaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aae:	f000 bd4f 	b.w	800a550 <__ieee754_sqrt>
 8009ab2:	2400      	movs	r4, #0
 8009ab4:	ec47 6b10 	vmov	d0, r6, r7
 8009ab8:	9302      	str	r3, [sp, #8]
 8009aba:	f000 fc87 	bl	800a3cc <fabs>
 8009abe:	9b02      	ldr	r3, [sp, #8]
 8009ac0:	ec51 0b10 	vmov	r0, r1, d0
 8009ac4:	bb43      	cbnz	r3, 8009b18 <__ieee754_pow+0x1e0>
 8009ac6:	4b43      	ldr	r3, [pc, #268]	@ (8009bd4 <__ieee754_pow+0x29c>)
 8009ac8:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d000      	beq.n	8009ad2 <__ieee754_pow+0x19a>
 8009ad0:	bb15      	cbnz	r5, 8009b18 <__ieee754_pow+0x1e0>
 8009ad2:	f1b9 0f00 	cmp.w	r9, #0
 8009ad6:	da05      	bge.n	8009ae4 <__ieee754_pow+0x1ac>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	2000      	movs	r0, #0
 8009ade:	493d      	ldr	r1, [pc, #244]	@ (8009bd4 <__ieee754_pow+0x29c>)
 8009ae0:	f7f6 fecc 	bl	800087c <__aeabi_ddiv>
 8009ae4:	f1b8 0f00 	cmp.w	r8, #0
 8009ae8:	f6bf af43 	bge.w	8009972 <__ieee754_pow+0x3a>
 8009aec:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009af0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009af4:	4325      	orrs	r5, r4
 8009af6:	d108      	bne.n	8009b0a <__ieee754_pow+0x1d2>
 8009af8:	4602      	mov	r2, r0
 8009afa:	460b      	mov	r3, r1
 8009afc:	4610      	mov	r0, r2
 8009afe:	4619      	mov	r1, r3
 8009b00:	f7f6 fbda 	bl	80002b8 <__aeabi_dsub>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	e79e      	b.n	8009a48 <__ieee754_pow+0x110>
 8009b0a:	2c01      	cmp	r4, #1
 8009b0c:	f47f af31 	bne.w	8009972 <__ieee754_pow+0x3a>
 8009b10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b14:	4619      	mov	r1, r3
 8009b16:	e72c      	b.n	8009972 <__ieee754_pow+0x3a>
 8009b18:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	ea53 0204 	orrs.w	r2, r3, r4
 8009b22:	d102      	bne.n	8009b2a <__ieee754_pow+0x1f2>
 8009b24:	4632      	mov	r2, r6
 8009b26:	463b      	mov	r3, r7
 8009b28:	e7e8      	b.n	8009afc <__ieee754_pow+0x1c4>
 8009b2a:	3c01      	subs	r4, #1
 8009b2c:	431c      	orrs	r4, r3
 8009b2e:	d016      	beq.n	8009b5e <__ieee754_pow+0x226>
 8009b30:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009bb8 <__ieee754_pow+0x280>
 8009b34:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009b38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b3c:	f240 8110 	bls.w	8009d60 <__ieee754_pow+0x428>
 8009b40:	4b27      	ldr	r3, [pc, #156]	@ (8009be0 <__ieee754_pow+0x2a8>)
 8009b42:	459a      	cmp	sl, r3
 8009b44:	4b24      	ldr	r3, [pc, #144]	@ (8009bd8 <__ieee754_pow+0x2a0>)
 8009b46:	d916      	bls.n	8009b76 <__ieee754_pow+0x23e>
 8009b48:	429d      	cmp	r5, r3
 8009b4a:	d80b      	bhi.n	8009b64 <__ieee754_pow+0x22c>
 8009b4c:	f1b9 0f00 	cmp.w	r9, #0
 8009b50:	da0b      	bge.n	8009b6a <__ieee754_pow+0x232>
 8009b52:	2000      	movs	r0, #0
 8009b54:	b011      	add	sp, #68	@ 0x44
 8009b56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5a:	f000 bcf1 	b.w	800a540 <__math_oflow>
 8009b5e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8009bc0 <__ieee754_pow+0x288>
 8009b62:	e7e7      	b.n	8009b34 <__ieee754_pow+0x1fc>
 8009b64:	f1b9 0f00 	cmp.w	r9, #0
 8009b68:	dcf3      	bgt.n	8009b52 <__ieee754_pow+0x21a>
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	b011      	add	sp, #68	@ 0x44
 8009b6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b72:	f000 bcdd 	b.w	800a530 <__math_uflow>
 8009b76:	429d      	cmp	r5, r3
 8009b78:	d20c      	bcs.n	8009b94 <__ieee754_pow+0x25c>
 8009b7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	2300      	movs	r3, #0
 8009b82:	f7f6 ffc3 	bl	8000b0c <__aeabi_dcmplt>
 8009b86:	3800      	subs	r0, #0
 8009b88:	bf18      	it	ne
 8009b8a:	2001      	movne	r0, #1
 8009b8c:	f1b9 0f00 	cmp.w	r9, #0
 8009b90:	daec      	bge.n	8009b6c <__ieee754_pow+0x234>
 8009b92:	e7df      	b.n	8009b54 <__ieee754_pow+0x21c>
 8009b94:	4b0f      	ldr	r3, [pc, #60]	@ (8009bd4 <__ieee754_pow+0x29c>)
 8009b96:	429d      	cmp	r5, r3
 8009b98:	f04f 0200 	mov.w	r2, #0
 8009b9c:	d922      	bls.n	8009be4 <__ieee754_pow+0x2ac>
 8009b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	f7f6 ffb2 	bl	8000b0c <__aeabi_dcmplt>
 8009ba8:	3800      	subs	r0, #0
 8009baa:	bf18      	it	ne
 8009bac:	2001      	movne	r0, #1
 8009bae:	f1b9 0f00 	cmp.w	r9, #0
 8009bb2:	dccf      	bgt.n	8009b54 <__ieee754_pow+0x21c>
 8009bb4:	e7da      	b.n	8009b6c <__ieee754_pow+0x234>
 8009bb6:	bf00      	nop
 8009bb8:	00000000 	.word	0x00000000
 8009bbc:	3ff00000 	.word	0x3ff00000
 8009bc0:	00000000 	.word	0x00000000
 8009bc4:	bff00000 	.word	0xbff00000
 8009bc8:	fff00000 	.word	0xfff00000
 8009bcc:	7ff00000 	.word	0x7ff00000
 8009bd0:	433fffff 	.word	0x433fffff
 8009bd4:	3ff00000 	.word	0x3ff00000
 8009bd8:	3fefffff 	.word	0x3fefffff
 8009bdc:	3fe00000 	.word	0x3fe00000
 8009be0:	43f00000 	.word	0x43f00000
 8009be4:	4b5a      	ldr	r3, [pc, #360]	@ (8009d50 <__ieee754_pow+0x418>)
 8009be6:	f7f6 fb67 	bl	80002b8 <__aeabi_dsub>
 8009bea:	a351      	add	r3, pc, #324	@ (adr r3, 8009d30 <__ieee754_pow+0x3f8>)
 8009bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	460d      	mov	r5, r1
 8009bf4:	f7f6 fd18 	bl	8000628 <__aeabi_dmul>
 8009bf8:	a34f      	add	r3, pc, #316	@ (adr r3, 8009d38 <__ieee754_pow+0x400>)
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	4606      	mov	r6, r0
 8009c00:	460f      	mov	r7, r1
 8009c02:	4620      	mov	r0, r4
 8009c04:	4629      	mov	r1, r5
 8009c06:	f7f6 fd0f 	bl	8000628 <__aeabi_dmul>
 8009c0a:	4b52      	ldr	r3, [pc, #328]	@ (8009d54 <__ieee754_pow+0x41c>)
 8009c0c:	4682      	mov	sl, r0
 8009c0e:	468b      	mov	fp, r1
 8009c10:	2200      	movs	r2, #0
 8009c12:	4620      	mov	r0, r4
 8009c14:	4629      	mov	r1, r5
 8009c16:	f7f6 fd07 	bl	8000628 <__aeabi_dmul>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	a148      	add	r1, pc, #288	@ (adr r1, 8009d40 <__ieee754_pow+0x408>)
 8009c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c24:	f7f6 fb48 	bl	80002b8 <__aeabi_dsub>
 8009c28:	4622      	mov	r2, r4
 8009c2a:	462b      	mov	r3, r5
 8009c2c:	f7f6 fcfc 	bl	8000628 <__aeabi_dmul>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	2000      	movs	r0, #0
 8009c36:	4948      	ldr	r1, [pc, #288]	@ (8009d58 <__ieee754_pow+0x420>)
 8009c38:	f7f6 fb3e 	bl	80002b8 <__aeabi_dsub>
 8009c3c:	4622      	mov	r2, r4
 8009c3e:	4680      	mov	r8, r0
 8009c40:	4689      	mov	r9, r1
 8009c42:	462b      	mov	r3, r5
 8009c44:	4620      	mov	r0, r4
 8009c46:	4629      	mov	r1, r5
 8009c48:	f7f6 fcee 	bl	8000628 <__aeabi_dmul>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	4640      	mov	r0, r8
 8009c52:	4649      	mov	r1, r9
 8009c54:	f7f6 fce8 	bl	8000628 <__aeabi_dmul>
 8009c58:	a33b      	add	r3, pc, #236	@ (adr r3, 8009d48 <__ieee754_pow+0x410>)
 8009c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5e:	f7f6 fce3 	bl	8000628 <__aeabi_dmul>
 8009c62:	4602      	mov	r2, r0
 8009c64:	460b      	mov	r3, r1
 8009c66:	4650      	mov	r0, sl
 8009c68:	4659      	mov	r1, fp
 8009c6a:	f7f6 fb25 	bl	80002b8 <__aeabi_dsub>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	460b      	mov	r3, r1
 8009c72:	4680      	mov	r8, r0
 8009c74:	4689      	mov	r9, r1
 8009c76:	4630      	mov	r0, r6
 8009c78:	4639      	mov	r1, r7
 8009c7a:	f7f6 fb1f 	bl	80002bc <__adddf3>
 8009c7e:	2400      	movs	r4, #0
 8009c80:	4632      	mov	r2, r6
 8009c82:	463b      	mov	r3, r7
 8009c84:	4620      	mov	r0, r4
 8009c86:	460d      	mov	r5, r1
 8009c88:	f7f6 fb16 	bl	80002b8 <__aeabi_dsub>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	4640      	mov	r0, r8
 8009c92:	4649      	mov	r1, r9
 8009c94:	f7f6 fb10 	bl	80002b8 <__aeabi_dsub>
 8009c98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	9304      	str	r3, [sp, #16]
 8009ca4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009ca8:	4606      	mov	r6, r0
 8009caa:	460f      	mov	r7, r1
 8009cac:	465b      	mov	r3, fp
 8009cae:	4652      	mov	r2, sl
 8009cb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cb4:	f7f6 fb00 	bl	80002b8 <__aeabi_dsub>
 8009cb8:	4622      	mov	r2, r4
 8009cba:	462b      	mov	r3, r5
 8009cbc:	f7f6 fcb4 	bl	8000628 <__aeabi_dmul>
 8009cc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cc4:	4680      	mov	r8, r0
 8009cc6:	4689      	mov	r9, r1
 8009cc8:	4630      	mov	r0, r6
 8009cca:	4639      	mov	r1, r7
 8009ccc:	f7f6 fcac 	bl	8000628 <__aeabi_dmul>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	4649      	mov	r1, r9
 8009cd8:	f7f6 faf0 	bl	80002bc <__adddf3>
 8009cdc:	465b      	mov	r3, fp
 8009cde:	4606      	mov	r6, r0
 8009ce0:	460f      	mov	r7, r1
 8009ce2:	4652      	mov	r2, sl
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	f7f6 fc9e 	bl	8000628 <__aeabi_dmul>
 8009cec:	460b      	mov	r3, r1
 8009cee:	4602      	mov	r2, r0
 8009cf0:	4680      	mov	r8, r0
 8009cf2:	4689      	mov	r9, r1
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	4639      	mov	r1, r7
 8009cf8:	f7f6 fae0 	bl	80002bc <__adddf3>
 8009cfc:	4b17      	ldr	r3, [pc, #92]	@ (8009d5c <__ieee754_pow+0x424>)
 8009cfe:	4299      	cmp	r1, r3
 8009d00:	4604      	mov	r4, r0
 8009d02:	460d      	mov	r5, r1
 8009d04:	468b      	mov	fp, r1
 8009d06:	f340 820b 	ble.w	800a120 <__ieee754_pow+0x7e8>
 8009d0a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009d0e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009d12:	4303      	orrs	r3, r0
 8009d14:	f000 81ea 	beq.w	800a0ec <__ieee754_pow+0x7b4>
 8009d18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2300      	movs	r3, #0
 8009d20:	f7f6 fef4 	bl	8000b0c <__aeabi_dcmplt>
 8009d24:	3800      	subs	r0, #0
 8009d26:	bf18      	it	ne
 8009d28:	2001      	movne	r0, #1
 8009d2a:	e713      	b.n	8009b54 <__ieee754_pow+0x21c>
 8009d2c:	f3af 8000 	nop.w
 8009d30:	60000000 	.word	0x60000000
 8009d34:	3ff71547 	.word	0x3ff71547
 8009d38:	f85ddf44 	.word	0xf85ddf44
 8009d3c:	3e54ae0b 	.word	0x3e54ae0b
 8009d40:	55555555 	.word	0x55555555
 8009d44:	3fd55555 	.word	0x3fd55555
 8009d48:	652b82fe 	.word	0x652b82fe
 8009d4c:	3ff71547 	.word	0x3ff71547
 8009d50:	3ff00000 	.word	0x3ff00000
 8009d54:	3fd00000 	.word	0x3fd00000
 8009d58:	3fe00000 	.word	0x3fe00000
 8009d5c:	408fffff 	.word	0x408fffff
 8009d60:	4bd5      	ldr	r3, [pc, #852]	@ (800a0b8 <__ieee754_pow+0x780>)
 8009d62:	ea08 0303 	and.w	r3, r8, r3
 8009d66:	2200      	movs	r2, #0
 8009d68:	b92b      	cbnz	r3, 8009d76 <__ieee754_pow+0x43e>
 8009d6a:	4bd4      	ldr	r3, [pc, #848]	@ (800a0bc <__ieee754_pow+0x784>)
 8009d6c:	f7f6 fc5c 	bl	8000628 <__aeabi_dmul>
 8009d70:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8009d74:	468b      	mov	fp, r1
 8009d76:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009d7a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009d7e:	4413      	add	r3, r2
 8009d80:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d82:	4bcf      	ldr	r3, [pc, #828]	@ (800a0c0 <__ieee754_pow+0x788>)
 8009d84:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8009d88:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8009d8c:	459b      	cmp	fp, r3
 8009d8e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009d92:	dd08      	ble.n	8009da6 <__ieee754_pow+0x46e>
 8009d94:	4bcb      	ldr	r3, [pc, #812]	@ (800a0c4 <__ieee754_pow+0x78c>)
 8009d96:	459b      	cmp	fp, r3
 8009d98:	f340 81a5 	ble.w	800a0e6 <__ieee754_pow+0x7ae>
 8009d9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d9e:	3301      	adds	r3, #1
 8009da0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009da2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009da6:	f04f 0a00 	mov.w	sl, #0
 8009daa:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009dae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009db0:	4bc5      	ldr	r3, [pc, #788]	@ (800a0c8 <__ieee754_pow+0x790>)
 8009db2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009db6:	ed93 7b00 	vldr	d7, [r3]
 8009dba:	4629      	mov	r1, r5
 8009dbc:	ec53 2b17 	vmov	r2, r3, d7
 8009dc0:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009dc4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009dc8:	f7f6 fa76 	bl	80002b8 <__aeabi_dsub>
 8009dcc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009dd0:	4606      	mov	r6, r0
 8009dd2:	460f      	mov	r7, r1
 8009dd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dd8:	f7f6 fa70 	bl	80002bc <__adddf3>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	2000      	movs	r0, #0
 8009de2:	49ba      	ldr	r1, [pc, #744]	@ (800a0cc <__ieee754_pow+0x794>)
 8009de4:	f7f6 fd4a 	bl	800087c <__aeabi_ddiv>
 8009de8:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	4630      	mov	r0, r6
 8009df2:	4639      	mov	r1, r7
 8009df4:	f7f6 fc18 	bl	8000628 <__aeabi_dmul>
 8009df8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009dfc:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009e00:	106d      	asrs	r5, r5, #1
 8009e02:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009e06:	f04f 0b00 	mov.w	fp, #0
 8009e0a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009e0e:	4661      	mov	r1, ip
 8009e10:	2200      	movs	r2, #0
 8009e12:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009e16:	4658      	mov	r0, fp
 8009e18:	46e1      	mov	r9, ip
 8009e1a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009e1e:	4614      	mov	r4, r2
 8009e20:	461d      	mov	r5, r3
 8009e22:	f7f6 fc01 	bl	8000628 <__aeabi_dmul>
 8009e26:	4602      	mov	r2, r0
 8009e28:	460b      	mov	r3, r1
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	4639      	mov	r1, r7
 8009e2e:	f7f6 fa43 	bl	80002b8 <__aeabi_dsub>
 8009e32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e36:	4606      	mov	r6, r0
 8009e38:	460f      	mov	r7, r1
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	f7f6 fa3b 	bl	80002b8 <__aeabi_dsub>
 8009e42:	4602      	mov	r2, r0
 8009e44:	460b      	mov	r3, r1
 8009e46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e4a:	f7f6 fa35 	bl	80002b8 <__aeabi_dsub>
 8009e4e:	465a      	mov	r2, fp
 8009e50:	464b      	mov	r3, r9
 8009e52:	f7f6 fbe9 	bl	8000628 <__aeabi_dmul>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	4639      	mov	r1, r7
 8009e5e:	f7f6 fa2b 	bl	80002b8 <__aeabi_dsub>
 8009e62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009e66:	f7f6 fbdf 	bl	8000628 <__aeabi_dmul>
 8009e6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009e72:	4610      	mov	r0, r2
 8009e74:	4619      	mov	r1, r3
 8009e76:	f7f6 fbd7 	bl	8000628 <__aeabi_dmul>
 8009e7a:	a37d      	add	r3, pc, #500	@ (adr r3, 800a070 <__ieee754_pow+0x738>)
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	4604      	mov	r4, r0
 8009e82:	460d      	mov	r5, r1
 8009e84:	f7f6 fbd0 	bl	8000628 <__aeabi_dmul>
 8009e88:	a37b      	add	r3, pc, #492	@ (adr r3, 800a078 <__ieee754_pow+0x740>)
 8009e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8e:	f7f6 fa15 	bl	80002bc <__adddf3>
 8009e92:	4622      	mov	r2, r4
 8009e94:	462b      	mov	r3, r5
 8009e96:	f7f6 fbc7 	bl	8000628 <__aeabi_dmul>
 8009e9a:	a379      	add	r3, pc, #484	@ (adr r3, 800a080 <__ieee754_pow+0x748>)
 8009e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea0:	f7f6 fa0c 	bl	80002bc <__adddf3>
 8009ea4:	4622      	mov	r2, r4
 8009ea6:	462b      	mov	r3, r5
 8009ea8:	f7f6 fbbe 	bl	8000628 <__aeabi_dmul>
 8009eac:	a376      	add	r3, pc, #472	@ (adr r3, 800a088 <__ieee754_pow+0x750>)
 8009eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb2:	f7f6 fa03 	bl	80002bc <__adddf3>
 8009eb6:	4622      	mov	r2, r4
 8009eb8:	462b      	mov	r3, r5
 8009eba:	f7f6 fbb5 	bl	8000628 <__aeabi_dmul>
 8009ebe:	a374      	add	r3, pc, #464	@ (adr r3, 800a090 <__ieee754_pow+0x758>)
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	f7f6 f9fa 	bl	80002bc <__adddf3>
 8009ec8:	4622      	mov	r2, r4
 8009eca:	462b      	mov	r3, r5
 8009ecc:	f7f6 fbac 	bl	8000628 <__aeabi_dmul>
 8009ed0:	a371      	add	r3, pc, #452	@ (adr r3, 800a098 <__ieee754_pow+0x760>)
 8009ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed6:	f7f6 f9f1 	bl	80002bc <__adddf3>
 8009eda:	4622      	mov	r2, r4
 8009edc:	4606      	mov	r6, r0
 8009ede:	460f      	mov	r7, r1
 8009ee0:	462b      	mov	r3, r5
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	f7f6 fb9f 	bl	8000628 <__aeabi_dmul>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	4630      	mov	r0, r6
 8009ef0:	4639      	mov	r1, r7
 8009ef2:	f7f6 fb99 	bl	8000628 <__aeabi_dmul>
 8009ef6:	465a      	mov	r2, fp
 8009ef8:	4604      	mov	r4, r0
 8009efa:	460d      	mov	r5, r1
 8009efc:	464b      	mov	r3, r9
 8009efe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f02:	f7f6 f9db 	bl	80002bc <__adddf3>
 8009f06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f0a:	f7f6 fb8d 	bl	8000628 <__aeabi_dmul>
 8009f0e:	4622      	mov	r2, r4
 8009f10:	462b      	mov	r3, r5
 8009f12:	f7f6 f9d3 	bl	80002bc <__adddf3>
 8009f16:	465a      	mov	r2, fp
 8009f18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f1c:	464b      	mov	r3, r9
 8009f1e:	4658      	mov	r0, fp
 8009f20:	4649      	mov	r1, r9
 8009f22:	f7f6 fb81 	bl	8000628 <__aeabi_dmul>
 8009f26:	4b6a      	ldr	r3, [pc, #424]	@ (800a0d0 <__ieee754_pow+0x798>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	460f      	mov	r7, r1
 8009f2e:	f7f6 f9c5 	bl	80002bc <__adddf3>
 8009f32:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f36:	f7f6 f9c1 	bl	80002bc <__adddf3>
 8009f3a:	46d8      	mov	r8, fp
 8009f3c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8009f40:	460d      	mov	r5, r1
 8009f42:	465a      	mov	r2, fp
 8009f44:	460b      	mov	r3, r1
 8009f46:	4640      	mov	r0, r8
 8009f48:	4649      	mov	r1, r9
 8009f4a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8009f4e:	f7f6 fb6b 	bl	8000628 <__aeabi_dmul>
 8009f52:	465c      	mov	r4, fp
 8009f54:	4680      	mov	r8, r0
 8009f56:	4689      	mov	r9, r1
 8009f58:	4b5d      	ldr	r3, [pc, #372]	@ (800a0d0 <__ieee754_pow+0x798>)
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	4629      	mov	r1, r5
 8009f60:	f7f6 f9aa 	bl	80002b8 <__aeabi_dsub>
 8009f64:	4632      	mov	r2, r6
 8009f66:	463b      	mov	r3, r7
 8009f68:	f7f6 f9a6 	bl	80002b8 <__aeabi_dsub>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f74:	f7f6 f9a0 	bl	80002b8 <__aeabi_dsub>
 8009f78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f7c:	f7f6 fb54 	bl	8000628 <__aeabi_dmul>
 8009f80:	4622      	mov	r2, r4
 8009f82:	4606      	mov	r6, r0
 8009f84:	460f      	mov	r7, r1
 8009f86:	462b      	mov	r3, r5
 8009f88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f8c:	f7f6 fb4c 	bl	8000628 <__aeabi_dmul>
 8009f90:	4602      	mov	r2, r0
 8009f92:	460b      	mov	r3, r1
 8009f94:	4630      	mov	r0, r6
 8009f96:	4639      	mov	r1, r7
 8009f98:	f7f6 f990 	bl	80002bc <__adddf3>
 8009f9c:	4606      	mov	r6, r0
 8009f9e:	460f      	mov	r7, r1
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	4649      	mov	r1, r9
 8009fa8:	f7f6 f988 	bl	80002bc <__adddf3>
 8009fac:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8009fb0:	a33b      	add	r3, pc, #236	@ (adr r3, 800a0a0 <__ieee754_pow+0x768>)
 8009fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb6:	4658      	mov	r0, fp
 8009fb8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8009fbc:	460d      	mov	r5, r1
 8009fbe:	f7f6 fb33 	bl	8000628 <__aeabi_dmul>
 8009fc2:	465c      	mov	r4, fp
 8009fc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fc8:	4642      	mov	r2, r8
 8009fca:	464b      	mov	r3, r9
 8009fcc:	4620      	mov	r0, r4
 8009fce:	4629      	mov	r1, r5
 8009fd0:	f7f6 f972 	bl	80002b8 <__aeabi_dsub>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4630      	mov	r0, r6
 8009fda:	4639      	mov	r1, r7
 8009fdc:	f7f6 f96c 	bl	80002b8 <__aeabi_dsub>
 8009fe0:	a331      	add	r3, pc, #196	@ (adr r3, 800a0a8 <__ieee754_pow+0x770>)
 8009fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe6:	f7f6 fb1f 	bl	8000628 <__aeabi_dmul>
 8009fea:	a331      	add	r3, pc, #196	@ (adr r3, 800a0b0 <__ieee754_pow+0x778>)
 8009fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff0:	4606      	mov	r6, r0
 8009ff2:	460f      	mov	r7, r1
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	4629      	mov	r1, r5
 8009ff8:	f7f6 fb16 	bl	8000628 <__aeabi_dmul>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	460b      	mov	r3, r1
 800a000:	4630      	mov	r0, r6
 800a002:	4639      	mov	r1, r7
 800a004:	f7f6 f95a 	bl	80002bc <__adddf3>
 800a008:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a00a:	4b32      	ldr	r3, [pc, #200]	@ (800a0d4 <__ieee754_pow+0x79c>)
 800a00c:	4413      	add	r3, r2
 800a00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a012:	f7f6 f953 	bl	80002bc <__adddf3>
 800a016:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a01a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a01c:	f7f6 fa9a 	bl	8000554 <__aeabi_i2d>
 800a020:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a022:	4b2d      	ldr	r3, [pc, #180]	@ (800a0d8 <__ieee754_pow+0x7a0>)
 800a024:	4413      	add	r3, r2
 800a026:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a02a:	4606      	mov	r6, r0
 800a02c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a030:	460f      	mov	r7, r1
 800a032:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a036:	f7f6 f941 	bl	80002bc <__adddf3>
 800a03a:	4642      	mov	r2, r8
 800a03c:	464b      	mov	r3, r9
 800a03e:	f7f6 f93d 	bl	80002bc <__adddf3>
 800a042:	4632      	mov	r2, r6
 800a044:	463b      	mov	r3, r7
 800a046:	f7f6 f939 	bl	80002bc <__adddf3>
 800a04a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a04e:	4632      	mov	r2, r6
 800a050:	463b      	mov	r3, r7
 800a052:	4658      	mov	r0, fp
 800a054:	460d      	mov	r5, r1
 800a056:	f7f6 f92f 	bl	80002b8 <__aeabi_dsub>
 800a05a:	4642      	mov	r2, r8
 800a05c:	464b      	mov	r3, r9
 800a05e:	f7f6 f92b 	bl	80002b8 <__aeabi_dsub>
 800a062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a066:	f7f6 f927 	bl	80002b8 <__aeabi_dsub>
 800a06a:	465c      	mov	r4, fp
 800a06c:	e036      	b.n	800a0dc <__ieee754_pow+0x7a4>
 800a06e:	bf00      	nop
 800a070:	4a454eef 	.word	0x4a454eef
 800a074:	3fca7e28 	.word	0x3fca7e28
 800a078:	93c9db65 	.word	0x93c9db65
 800a07c:	3fcd864a 	.word	0x3fcd864a
 800a080:	a91d4101 	.word	0xa91d4101
 800a084:	3fd17460 	.word	0x3fd17460
 800a088:	518f264d 	.word	0x518f264d
 800a08c:	3fd55555 	.word	0x3fd55555
 800a090:	db6fabff 	.word	0xdb6fabff
 800a094:	3fdb6db6 	.word	0x3fdb6db6
 800a098:	33333303 	.word	0x33333303
 800a09c:	3fe33333 	.word	0x3fe33333
 800a0a0:	e0000000 	.word	0xe0000000
 800a0a4:	3feec709 	.word	0x3feec709
 800a0a8:	dc3a03fd 	.word	0xdc3a03fd
 800a0ac:	3feec709 	.word	0x3feec709
 800a0b0:	145b01f5 	.word	0x145b01f5
 800a0b4:	be3e2fe0 	.word	0xbe3e2fe0
 800a0b8:	7ff00000 	.word	0x7ff00000
 800a0bc:	43400000 	.word	0x43400000
 800a0c0:	0003988e 	.word	0x0003988e
 800a0c4:	000bb679 	.word	0x000bb679
 800a0c8:	0800ae88 	.word	0x0800ae88
 800a0cc:	3ff00000 	.word	0x3ff00000
 800a0d0:	40080000 	.word	0x40080000
 800a0d4:	0800ae68 	.word	0x0800ae68
 800a0d8:	0800ae78 	.word	0x0800ae78
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0e4:	e5d6      	b.n	8009c94 <__ieee754_pow+0x35c>
 800a0e6:	f04f 0a01 	mov.w	sl, #1
 800a0ea:	e65e      	b.n	8009daa <__ieee754_pow+0x472>
 800a0ec:	a3b5      	add	r3, pc, #724	@ (adr r3, 800a3c4 <__ieee754_pow+0xa8c>)
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	4639      	mov	r1, r7
 800a0f6:	f7f6 f8e1 	bl	80002bc <__adddf3>
 800a0fa:	4642      	mov	r2, r8
 800a0fc:	e9cd 0100 	strd	r0, r1, [sp]
 800a100:	464b      	mov	r3, r9
 800a102:	4620      	mov	r0, r4
 800a104:	4629      	mov	r1, r5
 800a106:	f7f6 f8d7 	bl	80002b8 <__aeabi_dsub>
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a112:	f7f6 fd19 	bl	8000b48 <__aeabi_dcmpgt>
 800a116:	2800      	cmp	r0, #0
 800a118:	f47f adfe 	bne.w	8009d18 <__ieee754_pow+0x3e0>
 800a11c:	4ba2      	ldr	r3, [pc, #648]	@ (800a3a8 <__ieee754_pow+0xa70>)
 800a11e:	e022      	b.n	800a166 <__ieee754_pow+0x82e>
 800a120:	4ca2      	ldr	r4, [pc, #648]	@ (800a3ac <__ieee754_pow+0xa74>)
 800a122:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a126:	42a3      	cmp	r3, r4
 800a128:	d919      	bls.n	800a15e <__ieee754_pow+0x826>
 800a12a:	4ba1      	ldr	r3, [pc, #644]	@ (800a3b0 <__ieee754_pow+0xa78>)
 800a12c:	440b      	add	r3, r1
 800a12e:	4303      	orrs	r3, r0
 800a130:	d009      	beq.n	800a146 <__ieee754_pow+0x80e>
 800a132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a136:	2200      	movs	r2, #0
 800a138:	2300      	movs	r3, #0
 800a13a:	f7f6 fce7 	bl	8000b0c <__aeabi_dcmplt>
 800a13e:	3800      	subs	r0, #0
 800a140:	bf18      	it	ne
 800a142:	2001      	movne	r0, #1
 800a144:	e512      	b.n	8009b6c <__ieee754_pow+0x234>
 800a146:	4642      	mov	r2, r8
 800a148:	464b      	mov	r3, r9
 800a14a:	f7f6 f8b5 	bl	80002b8 <__aeabi_dsub>
 800a14e:	4632      	mov	r2, r6
 800a150:	463b      	mov	r3, r7
 800a152:	f7f6 fcef 	bl	8000b34 <__aeabi_dcmpge>
 800a156:	2800      	cmp	r0, #0
 800a158:	d1eb      	bne.n	800a132 <__ieee754_pow+0x7fa>
 800a15a:	4b96      	ldr	r3, [pc, #600]	@ (800a3b4 <__ieee754_pow+0xa7c>)
 800a15c:	e003      	b.n	800a166 <__ieee754_pow+0x82e>
 800a15e:	4a96      	ldr	r2, [pc, #600]	@ (800a3b8 <__ieee754_pow+0xa80>)
 800a160:	4293      	cmp	r3, r2
 800a162:	f240 80e7 	bls.w	800a334 <__ieee754_pow+0x9fc>
 800a166:	151b      	asrs	r3, r3, #20
 800a168:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800a16c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800a170:	fa4a fa03 	asr.w	sl, sl, r3
 800a174:	44da      	add	sl, fp
 800a176:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a17a:	4890      	ldr	r0, [pc, #576]	@ (800a3bc <__ieee754_pow+0xa84>)
 800a17c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a180:	4108      	asrs	r0, r1
 800a182:	ea00 030a 	and.w	r3, r0, sl
 800a186:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a18a:	f1c1 0114 	rsb	r1, r1, #20
 800a18e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a192:	fa4a fa01 	asr.w	sl, sl, r1
 800a196:	f1bb 0f00 	cmp.w	fp, #0
 800a19a:	4640      	mov	r0, r8
 800a19c:	4649      	mov	r1, r9
 800a19e:	f04f 0200 	mov.w	r2, #0
 800a1a2:	bfb8      	it	lt
 800a1a4:	f1ca 0a00 	rsblt	sl, sl, #0
 800a1a8:	f7f6 f886 	bl	80002b8 <__aeabi_dsub>
 800a1ac:	4680      	mov	r8, r0
 800a1ae:	4689      	mov	r9, r1
 800a1b0:	4632      	mov	r2, r6
 800a1b2:	463b      	mov	r3, r7
 800a1b4:	4640      	mov	r0, r8
 800a1b6:	4649      	mov	r1, r9
 800a1b8:	f7f6 f880 	bl	80002bc <__adddf3>
 800a1bc:	2400      	movs	r4, #0
 800a1be:	a36a      	add	r3, pc, #424	@ (adr r3, 800a368 <__ieee754_pow+0xa30>)
 800a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	460d      	mov	r5, r1
 800a1c8:	f7f6 fa2e 	bl	8000628 <__aeabi_dmul>
 800a1cc:	4642      	mov	r2, r8
 800a1ce:	e9cd 0100 	strd	r0, r1, [sp]
 800a1d2:	464b      	mov	r3, r9
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	4629      	mov	r1, r5
 800a1d8:	f7f6 f86e 	bl	80002b8 <__aeabi_dsub>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	4639      	mov	r1, r7
 800a1e4:	f7f6 f868 	bl	80002b8 <__aeabi_dsub>
 800a1e8:	a361      	add	r3, pc, #388	@ (adr r3, 800a370 <__ieee754_pow+0xa38>)
 800a1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ee:	f7f6 fa1b 	bl	8000628 <__aeabi_dmul>
 800a1f2:	a361      	add	r3, pc, #388	@ (adr r3, 800a378 <__ieee754_pow+0xa40>)
 800a1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f8:	4680      	mov	r8, r0
 800a1fa:	4689      	mov	r9, r1
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	4629      	mov	r1, r5
 800a200:	f7f6 fa12 	bl	8000628 <__aeabi_dmul>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	4640      	mov	r0, r8
 800a20a:	4649      	mov	r1, r9
 800a20c:	f7f6 f856 	bl	80002bc <__adddf3>
 800a210:	4604      	mov	r4, r0
 800a212:	460d      	mov	r5, r1
 800a214:	4602      	mov	r2, r0
 800a216:	460b      	mov	r3, r1
 800a218:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a21c:	f7f6 f84e 	bl	80002bc <__adddf3>
 800a220:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a224:	4680      	mov	r8, r0
 800a226:	4689      	mov	r9, r1
 800a228:	f7f6 f846 	bl	80002b8 <__aeabi_dsub>
 800a22c:	4602      	mov	r2, r0
 800a22e:	460b      	mov	r3, r1
 800a230:	4620      	mov	r0, r4
 800a232:	4629      	mov	r1, r5
 800a234:	f7f6 f840 	bl	80002b8 <__aeabi_dsub>
 800a238:	4642      	mov	r2, r8
 800a23a:	4606      	mov	r6, r0
 800a23c:	460f      	mov	r7, r1
 800a23e:	464b      	mov	r3, r9
 800a240:	4640      	mov	r0, r8
 800a242:	4649      	mov	r1, r9
 800a244:	f7f6 f9f0 	bl	8000628 <__aeabi_dmul>
 800a248:	a34d      	add	r3, pc, #308	@ (adr r3, 800a380 <__ieee754_pow+0xa48>)
 800a24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24e:	4604      	mov	r4, r0
 800a250:	460d      	mov	r5, r1
 800a252:	f7f6 f9e9 	bl	8000628 <__aeabi_dmul>
 800a256:	a34c      	add	r3, pc, #304	@ (adr r3, 800a388 <__ieee754_pow+0xa50>)
 800a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25c:	f7f6 f82c 	bl	80002b8 <__aeabi_dsub>
 800a260:	4622      	mov	r2, r4
 800a262:	462b      	mov	r3, r5
 800a264:	f7f6 f9e0 	bl	8000628 <__aeabi_dmul>
 800a268:	a349      	add	r3, pc, #292	@ (adr r3, 800a390 <__ieee754_pow+0xa58>)
 800a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26e:	f7f6 f825 	bl	80002bc <__adddf3>
 800a272:	4622      	mov	r2, r4
 800a274:	462b      	mov	r3, r5
 800a276:	f7f6 f9d7 	bl	8000628 <__aeabi_dmul>
 800a27a:	a347      	add	r3, pc, #284	@ (adr r3, 800a398 <__ieee754_pow+0xa60>)
 800a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a280:	f7f6 f81a 	bl	80002b8 <__aeabi_dsub>
 800a284:	4622      	mov	r2, r4
 800a286:	462b      	mov	r3, r5
 800a288:	f7f6 f9ce 	bl	8000628 <__aeabi_dmul>
 800a28c:	a344      	add	r3, pc, #272	@ (adr r3, 800a3a0 <__ieee754_pow+0xa68>)
 800a28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a292:	f7f6 f813 	bl	80002bc <__adddf3>
 800a296:	4622      	mov	r2, r4
 800a298:	462b      	mov	r3, r5
 800a29a:	f7f6 f9c5 	bl	8000628 <__aeabi_dmul>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	4640      	mov	r0, r8
 800a2a4:	4649      	mov	r1, r9
 800a2a6:	f7f6 f807 	bl	80002b8 <__aeabi_dsub>
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	460d      	mov	r5, r1
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	4640      	mov	r0, r8
 800a2b4:	4649      	mov	r1, r9
 800a2b6:	f7f6 f9b7 	bl	8000628 <__aeabi_dmul>
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	e9cd 0100 	strd	r0, r1, [sp]
 800a2c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	f7f5 fff6 	bl	80002b8 <__aeabi_dsub>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2d4:	f7f6 fad2 	bl	800087c <__aeabi_ddiv>
 800a2d8:	4632      	mov	r2, r6
 800a2da:	4604      	mov	r4, r0
 800a2dc:	460d      	mov	r5, r1
 800a2de:	463b      	mov	r3, r7
 800a2e0:	4640      	mov	r0, r8
 800a2e2:	4649      	mov	r1, r9
 800a2e4:	f7f6 f9a0 	bl	8000628 <__aeabi_dmul>
 800a2e8:	4632      	mov	r2, r6
 800a2ea:	463b      	mov	r3, r7
 800a2ec:	f7f5 ffe6 	bl	80002bc <__adddf3>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	f7f5 ffde 	bl	80002b8 <__aeabi_dsub>
 800a2fc:	4642      	mov	r2, r8
 800a2fe:	464b      	mov	r3, r9
 800a300:	f7f5 ffda 	bl	80002b8 <__aeabi_dsub>
 800a304:	460b      	mov	r3, r1
 800a306:	4602      	mov	r2, r0
 800a308:	492d      	ldr	r1, [pc, #180]	@ (800a3c0 <__ieee754_pow+0xa88>)
 800a30a:	2000      	movs	r0, #0
 800a30c:	f7f5 ffd4 	bl	80002b8 <__aeabi_dsub>
 800a310:	ec41 0b10 	vmov	d0, r0, r1
 800a314:	ee10 3a90 	vmov	r3, s1
 800a318:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a31c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a320:	da0b      	bge.n	800a33a <__ieee754_pow+0xa02>
 800a322:	4650      	mov	r0, sl
 800a324:	f000 f85c 	bl	800a3e0 <scalbn>
 800a328:	ec51 0b10 	vmov	r0, r1, d0
 800a32c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a330:	f7ff bb6d 	b.w	8009a0e <__ieee754_pow+0xd6>
 800a334:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a338:	e73a      	b.n	800a1b0 <__ieee754_pow+0x878>
 800a33a:	ec51 0b10 	vmov	r0, r1, d0
 800a33e:	4619      	mov	r1, r3
 800a340:	e7f4      	b.n	800a32c <__ieee754_pow+0x9f4>
 800a342:	491f      	ldr	r1, [pc, #124]	@ (800a3c0 <__ieee754_pow+0xa88>)
 800a344:	2000      	movs	r0, #0
 800a346:	f7ff bb14 	b.w	8009972 <__ieee754_pow+0x3a>
 800a34a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a34e:	f7ff bb10 	b.w	8009972 <__ieee754_pow+0x3a>
 800a352:	4630      	mov	r0, r6
 800a354:	4639      	mov	r1, r7
 800a356:	f7ff bb0c 	b.w	8009972 <__ieee754_pow+0x3a>
 800a35a:	460c      	mov	r4, r1
 800a35c:	f7ff bb69 	b.w	8009a32 <__ieee754_pow+0xfa>
 800a360:	2400      	movs	r4, #0
 800a362:	f7ff bb4b 	b.w	80099fc <__ieee754_pow+0xc4>
 800a366:	bf00      	nop
 800a368:	00000000 	.word	0x00000000
 800a36c:	3fe62e43 	.word	0x3fe62e43
 800a370:	fefa39ef 	.word	0xfefa39ef
 800a374:	3fe62e42 	.word	0x3fe62e42
 800a378:	0ca86c39 	.word	0x0ca86c39
 800a37c:	be205c61 	.word	0xbe205c61
 800a380:	72bea4d0 	.word	0x72bea4d0
 800a384:	3e663769 	.word	0x3e663769
 800a388:	c5d26bf1 	.word	0xc5d26bf1
 800a38c:	3ebbbd41 	.word	0x3ebbbd41
 800a390:	af25de2c 	.word	0xaf25de2c
 800a394:	3f11566a 	.word	0x3f11566a
 800a398:	16bebd93 	.word	0x16bebd93
 800a39c:	3f66c16c 	.word	0x3f66c16c
 800a3a0:	5555553e 	.word	0x5555553e
 800a3a4:	3fc55555 	.word	0x3fc55555
 800a3a8:	40900000 	.word	0x40900000
 800a3ac:	4090cbff 	.word	0x4090cbff
 800a3b0:	3f6f3400 	.word	0x3f6f3400
 800a3b4:	4090cc00 	.word	0x4090cc00
 800a3b8:	3fe00000 	.word	0x3fe00000
 800a3bc:	fff00000 	.word	0xfff00000
 800a3c0:	3ff00000 	.word	0x3ff00000
 800a3c4:	652b82fe 	.word	0x652b82fe
 800a3c8:	3c971547 	.word	0x3c971547

0800a3cc <fabs>:
 800a3cc:	ec51 0b10 	vmov	r0, r1, d0
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a3d6:	ec43 2b10 	vmov	d0, r2, r3
 800a3da:	4770      	bx	lr
 800a3dc:	0000      	movs	r0, r0
	...

0800a3e0 <scalbn>:
 800a3e0:	b570      	push	{r4, r5, r6, lr}
 800a3e2:	ec55 4b10 	vmov	r4, r5, d0
 800a3e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a3ea:	4606      	mov	r6, r0
 800a3ec:	462b      	mov	r3, r5
 800a3ee:	b991      	cbnz	r1, 800a416 <scalbn+0x36>
 800a3f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a3f4:	4323      	orrs	r3, r4
 800a3f6:	d03b      	beq.n	800a470 <scalbn+0x90>
 800a3f8:	4b33      	ldr	r3, [pc, #204]	@ (800a4c8 <scalbn+0xe8>)
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	2200      	movs	r2, #0
 800a400:	f7f6 f912 	bl	8000628 <__aeabi_dmul>
 800a404:	4b31      	ldr	r3, [pc, #196]	@ (800a4cc <scalbn+0xec>)
 800a406:	429e      	cmp	r6, r3
 800a408:	4604      	mov	r4, r0
 800a40a:	460d      	mov	r5, r1
 800a40c:	da0f      	bge.n	800a42e <scalbn+0x4e>
 800a40e:	a326      	add	r3, pc, #152	@ (adr r3, 800a4a8 <scalbn+0xc8>)
 800a410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a414:	e01e      	b.n	800a454 <scalbn+0x74>
 800a416:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a41a:	4291      	cmp	r1, r2
 800a41c:	d10b      	bne.n	800a436 <scalbn+0x56>
 800a41e:	4622      	mov	r2, r4
 800a420:	4620      	mov	r0, r4
 800a422:	4629      	mov	r1, r5
 800a424:	f7f5 ff4a 	bl	80002bc <__adddf3>
 800a428:	4604      	mov	r4, r0
 800a42a:	460d      	mov	r5, r1
 800a42c:	e020      	b.n	800a470 <scalbn+0x90>
 800a42e:	460b      	mov	r3, r1
 800a430:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a434:	3936      	subs	r1, #54	@ 0x36
 800a436:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a43a:	4296      	cmp	r6, r2
 800a43c:	dd0d      	ble.n	800a45a <scalbn+0x7a>
 800a43e:	2d00      	cmp	r5, #0
 800a440:	a11b      	add	r1, pc, #108	@ (adr r1, 800a4b0 <scalbn+0xd0>)
 800a442:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a446:	da02      	bge.n	800a44e <scalbn+0x6e>
 800a448:	a11b      	add	r1, pc, #108	@ (adr r1, 800a4b8 <scalbn+0xd8>)
 800a44a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a44e:	a318      	add	r3, pc, #96	@ (adr r3, 800a4b0 <scalbn+0xd0>)
 800a450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a454:	f7f6 f8e8 	bl	8000628 <__aeabi_dmul>
 800a458:	e7e6      	b.n	800a428 <scalbn+0x48>
 800a45a:	1872      	adds	r2, r6, r1
 800a45c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a460:	428a      	cmp	r2, r1
 800a462:	dcec      	bgt.n	800a43e <scalbn+0x5e>
 800a464:	2a00      	cmp	r2, #0
 800a466:	dd06      	ble.n	800a476 <scalbn+0x96>
 800a468:	f36f 531e 	bfc	r3, #20, #11
 800a46c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a470:	ec45 4b10 	vmov	d0, r4, r5
 800a474:	bd70      	pop	{r4, r5, r6, pc}
 800a476:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a47a:	da08      	bge.n	800a48e <scalbn+0xae>
 800a47c:	2d00      	cmp	r5, #0
 800a47e:	a10a      	add	r1, pc, #40	@ (adr r1, 800a4a8 <scalbn+0xc8>)
 800a480:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a484:	dac3      	bge.n	800a40e <scalbn+0x2e>
 800a486:	a10e      	add	r1, pc, #56	@ (adr r1, 800a4c0 <scalbn+0xe0>)
 800a488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a48c:	e7bf      	b.n	800a40e <scalbn+0x2e>
 800a48e:	3236      	adds	r2, #54	@ 0x36
 800a490:	f36f 531e 	bfc	r3, #20, #11
 800a494:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a498:	4620      	mov	r0, r4
 800a49a:	4b0d      	ldr	r3, [pc, #52]	@ (800a4d0 <scalbn+0xf0>)
 800a49c:	4629      	mov	r1, r5
 800a49e:	2200      	movs	r2, #0
 800a4a0:	e7d8      	b.n	800a454 <scalbn+0x74>
 800a4a2:	bf00      	nop
 800a4a4:	f3af 8000 	nop.w
 800a4a8:	c2f8f359 	.word	0xc2f8f359
 800a4ac:	01a56e1f 	.word	0x01a56e1f
 800a4b0:	8800759c 	.word	0x8800759c
 800a4b4:	7e37e43c 	.word	0x7e37e43c
 800a4b8:	8800759c 	.word	0x8800759c
 800a4bc:	fe37e43c 	.word	0xfe37e43c
 800a4c0:	c2f8f359 	.word	0xc2f8f359
 800a4c4:	81a56e1f 	.word	0x81a56e1f
 800a4c8:	43500000 	.word	0x43500000
 800a4cc:	ffff3cb0 	.word	0xffff3cb0
 800a4d0:	3c900000 	.word	0x3c900000

0800a4d4 <with_errno>:
 800a4d4:	b510      	push	{r4, lr}
 800a4d6:	ed2d 8b02 	vpush	{d8}
 800a4da:	eeb0 8a40 	vmov.f32	s16, s0
 800a4de:	eef0 8a60 	vmov.f32	s17, s1
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	f7fd f98a 	bl	80077fc <__errno>
 800a4e8:	eeb0 0a48 	vmov.f32	s0, s16
 800a4ec:	eef0 0a68 	vmov.f32	s1, s17
 800a4f0:	ecbd 8b02 	vpop	{d8}
 800a4f4:	6004      	str	r4, [r0, #0]
 800a4f6:	bd10      	pop	{r4, pc}

0800a4f8 <xflow>:
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	b507      	push	{r0, r1, r2, lr}
 800a4fc:	ec51 0b10 	vmov	r0, r1, d0
 800a500:	b183      	cbz	r3, 800a524 <xflow+0x2c>
 800a502:	4602      	mov	r2, r0
 800a504:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a508:	e9cd 2300 	strd	r2, r3, [sp]
 800a50c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a510:	f7f6 f88a 	bl	8000628 <__aeabi_dmul>
 800a514:	ec41 0b10 	vmov	d0, r0, r1
 800a518:	2022      	movs	r0, #34	@ 0x22
 800a51a:	b003      	add	sp, #12
 800a51c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a520:	f7ff bfd8 	b.w	800a4d4 <with_errno>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	e7ee      	b.n	800a508 <xflow+0x10>
 800a52a:	0000      	movs	r0, r0
 800a52c:	0000      	movs	r0, r0
	...

0800a530 <__math_uflow>:
 800a530:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a538 <__math_uflow+0x8>
 800a534:	f7ff bfe0 	b.w	800a4f8 <xflow>
 800a538:	00000000 	.word	0x00000000
 800a53c:	10000000 	.word	0x10000000

0800a540 <__math_oflow>:
 800a540:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a548 <__math_oflow+0x8>
 800a544:	f7ff bfd8 	b.w	800a4f8 <xflow>
 800a548:	00000000 	.word	0x00000000
 800a54c:	70000000 	.word	0x70000000

0800a550 <__ieee754_sqrt>:
 800a550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	4a66      	ldr	r2, [pc, #408]	@ (800a6f0 <__ieee754_sqrt+0x1a0>)
 800a556:	ec55 4b10 	vmov	r4, r5, d0
 800a55a:	43aa      	bics	r2, r5
 800a55c:	462b      	mov	r3, r5
 800a55e:	4621      	mov	r1, r4
 800a560:	d110      	bne.n	800a584 <__ieee754_sqrt+0x34>
 800a562:	4622      	mov	r2, r4
 800a564:	4620      	mov	r0, r4
 800a566:	4629      	mov	r1, r5
 800a568:	f7f6 f85e 	bl	8000628 <__aeabi_dmul>
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	4620      	mov	r0, r4
 800a572:	4629      	mov	r1, r5
 800a574:	f7f5 fea2 	bl	80002bc <__adddf3>
 800a578:	4604      	mov	r4, r0
 800a57a:	460d      	mov	r5, r1
 800a57c:	ec45 4b10 	vmov	d0, r4, r5
 800a580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a584:	2d00      	cmp	r5, #0
 800a586:	dc0e      	bgt.n	800a5a6 <__ieee754_sqrt+0x56>
 800a588:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a58c:	4322      	orrs	r2, r4
 800a58e:	d0f5      	beq.n	800a57c <__ieee754_sqrt+0x2c>
 800a590:	b19d      	cbz	r5, 800a5ba <__ieee754_sqrt+0x6a>
 800a592:	4622      	mov	r2, r4
 800a594:	4620      	mov	r0, r4
 800a596:	4629      	mov	r1, r5
 800a598:	f7f5 fe8e 	bl	80002b8 <__aeabi_dsub>
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	f7f6 f96c 	bl	800087c <__aeabi_ddiv>
 800a5a4:	e7e8      	b.n	800a578 <__ieee754_sqrt+0x28>
 800a5a6:	152a      	asrs	r2, r5, #20
 800a5a8:	d115      	bne.n	800a5d6 <__ieee754_sqrt+0x86>
 800a5aa:	2000      	movs	r0, #0
 800a5ac:	e009      	b.n	800a5c2 <__ieee754_sqrt+0x72>
 800a5ae:	0acb      	lsrs	r3, r1, #11
 800a5b0:	3a15      	subs	r2, #21
 800a5b2:	0549      	lsls	r1, r1, #21
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d0fa      	beq.n	800a5ae <__ieee754_sqrt+0x5e>
 800a5b8:	e7f7      	b.n	800a5aa <__ieee754_sqrt+0x5a>
 800a5ba:	462a      	mov	r2, r5
 800a5bc:	e7fa      	b.n	800a5b4 <__ieee754_sqrt+0x64>
 800a5be:	005b      	lsls	r3, r3, #1
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	02dc      	lsls	r4, r3, #11
 800a5c4:	d5fb      	bpl.n	800a5be <__ieee754_sqrt+0x6e>
 800a5c6:	1e44      	subs	r4, r0, #1
 800a5c8:	1b12      	subs	r2, r2, r4
 800a5ca:	f1c0 0420 	rsb	r4, r0, #32
 800a5ce:	fa21 f404 	lsr.w	r4, r1, r4
 800a5d2:	4323      	orrs	r3, r4
 800a5d4:	4081      	lsls	r1, r0
 800a5d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5da:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a5de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5e2:	07d2      	lsls	r2, r2, #31
 800a5e4:	bf5c      	itt	pl
 800a5e6:	005b      	lslpl	r3, r3, #1
 800a5e8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a5ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a5f0:	bf58      	it	pl
 800a5f2:	0049      	lslpl	r1, r1, #1
 800a5f4:	2600      	movs	r6, #0
 800a5f6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a5fa:	107f      	asrs	r7, r7, #1
 800a5fc:	0049      	lsls	r1, r1, #1
 800a5fe:	2016      	movs	r0, #22
 800a600:	4632      	mov	r2, r6
 800a602:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a606:	1915      	adds	r5, r2, r4
 800a608:	429d      	cmp	r5, r3
 800a60a:	bfde      	ittt	le
 800a60c:	192a      	addle	r2, r5, r4
 800a60e:	1b5b      	suble	r3, r3, r5
 800a610:	1936      	addle	r6, r6, r4
 800a612:	0fcd      	lsrs	r5, r1, #31
 800a614:	3801      	subs	r0, #1
 800a616:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a61a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a61e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a622:	d1f0      	bne.n	800a606 <__ieee754_sqrt+0xb6>
 800a624:	4605      	mov	r5, r0
 800a626:	2420      	movs	r4, #32
 800a628:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a62c:	4293      	cmp	r3, r2
 800a62e:	eb0c 0e00 	add.w	lr, ip, r0
 800a632:	dc02      	bgt.n	800a63a <__ieee754_sqrt+0xea>
 800a634:	d113      	bne.n	800a65e <__ieee754_sqrt+0x10e>
 800a636:	458e      	cmp	lr, r1
 800a638:	d811      	bhi.n	800a65e <__ieee754_sqrt+0x10e>
 800a63a:	f1be 0f00 	cmp.w	lr, #0
 800a63e:	eb0e 000c 	add.w	r0, lr, ip
 800a642:	da3f      	bge.n	800a6c4 <__ieee754_sqrt+0x174>
 800a644:	2800      	cmp	r0, #0
 800a646:	db3d      	blt.n	800a6c4 <__ieee754_sqrt+0x174>
 800a648:	f102 0801 	add.w	r8, r2, #1
 800a64c:	1a9b      	subs	r3, r3, r2
 800a64e:	458e      	cmp	lr, r1
 800a650:	bf88      	it	hi
 800a652:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a656:	eba1 010e 	sub.w	r1, r1, lr
 800a65a:	4465      	add	r5, ip
 800a65c:	4642      	mov	r2, r8
 800a65e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a662:	3c01      	subs	r4, #1
 800a664:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a668:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a66c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a670:	d1dc      	bne.n	800a62c <__ieee754_sqrt+0xdc>
 800a672:	4319      	orrs	r1, r3
 800a674:	d01b      	beq.n	800a6ae <__ieee754_sqrt+0x15e>
 800a676:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800a6f4 <__ieee754_sqrt+0x1a4>
 800a67a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800a6f8 <__ieee754_sqrt+0x1a8>
 800a67e:	e9da 0100 	ldrd	r0, r1, [sl]
 800a682:	e9db 2300 	ldrd	r2, r3, [fp]
 800a686:	f7f5 fe17 	bl	80002b8 <__aeabi_dsub>
 800a68a:	e9da 8900 	ldrd	r8, r9, [sl]
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	4640      	mov	r0, r8
 800a694:	4649      	mov	r1, r9
 800a696:	f7f6 fa43 	bl	8000b20 <__aeabi_dcmple>
 800a69a:	b140      	cbz	r0, 800a6ae <__ieee754_sqrt+0x15e>
 800a69c:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a6a0:	e9da 0100 	ldrd	r0, r1, [sl]
 800a6a4:	e9db 2300 	ldrd	r2, r3, [fp]
 800a6a8:	d10e      	bne.n	800a6c8 <__ieee754_sqrt+0x178>
 800a6aa:	3601      	adds	r6, #1
 800a6ac:	4625      	mov	r5, r4
 800a6ae:	1073      	asrs	r3, r6, #1
 800a6b0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800a6b4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800a6b8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800a6bc:	086b      	lsrs	r3, r5, #1
 800a6be:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800a6c2:	e759      	b.n	800a578 <__ieee754_sqrt+0x28>
 800a6c4:	4690      	mov	r8, r2
 800a6c6:	e7c1      	b.n	800a64c <__ieee754_sqrt+0xfc>
 800a6c8:	f7f5 fdf8 	bl	80002bc <__adddf3>
 800a6cc:	e9da 8900 	ldrd	r8, r9, [sl]
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	4640      	mov	r0, r8
 800a6d6:	4649      	mov	r1, r9
 800a6d8:	f7f6 fa18 	bl	8000b0c <__aeabi_dcmplt>
 800a6dc:	b120      	cbz	r0, 800a6e8 <__ieee754_sqrt+0x198>
 800a6de:	1cab      	adds	r3, r5, #2
 800a6e0:	bf08      	it	eq
 800a6e2:	3601      	addeq	r6, #1
 800a6e4:	3502      	adds	r5, #2
 800a6e6:	e7e2      	b.n	800a6ae <__ieee754_sqrt+0x15e>
 800a6e8:	1c6b      	adds	r3, r5, #1
 800a6ea:	f023 0501 	bic.w	r5, r3, #1
 800a6ee:	e7de      	b.n	800a6ae <__ieee754_sqrt+0x15e>
 800a6f0:	7ff00000 	.word	0x7ff00000
 800a6f4:	0800aea0 	.word	0x0800aea0
 800a6f8:	0800ae98 	.word	0x0800ae98

0800a6fc <_init>:
 800a6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fe:	bf00      	nop
 800a700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a702:	bc08      	pop	{r3}
 800a704:	469e      	mov	lr, r3
 800a706:	4770      	bx	lr

0800a708 <_fini>:
 800a708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70a:	bf00      	nop
 800a70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a70e:	bc08      	pop	{r3}
 800a710:	469e      	mov	lr, r3
 800a712:	4770      	bx	lr
