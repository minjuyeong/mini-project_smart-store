
smart_store_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a73c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  0800a8e0  0800a8e0  0000b8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0a8  0800b0a8  0000d1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b0a8  0800b0a8  0000c0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0b0  0800b0b0  0000d1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0b0  0800b0b0  0000c0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b0b4  0800b0b4  0000c0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800b0b8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c3c  200001dc  0800b294  0000d1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e18  0800b294  0000de18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112d7  00000000  00000000  0000d20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002941  00000000  00000000  0001e4e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00020e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c85  00000000  00000000  00021e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019319  00000000  00000000  00022abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128ad  00000000  00000000  0003bdd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d21b  00000000  00000000  0004e683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb89e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a20  00000000  00000000  000eb8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000f1304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a8c4 	.word	0x0800a8c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800a8c4 	.word	0x0800a8c4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b988 	b.w	8000fa0 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	468e      	mov	lr, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d962      	bls.n	8000d84 <__udivmoddi4+0xdc>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	b14e      	cbz	r6, 8000cd8 <__udivmoddi4+0x30>
 8000cc4:	f1c6 0320 	rsb	r3, r6, #32
 8000cc8:	fa01 f806 	lsl.w	r8, r1, r6
 8000ccc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd0:	40b7      	lsls	r7, r6
 8000cd2:	ea43 0808 	orr.w	r8, r3, r8
 8000cd6:	40b4      	lsls	r4, r6
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	fa1f fc87 	uxth.w	ip, r7
 8000ce0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ce4:	0c23      	lsrs	r3, r4, #16
 8000ce6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cee:	fb01 f20c 	mul.w	r2, r1, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cfc:	f080 80ea 	bcs.w	8000ed4 <__udivmoddi4+0x22c>
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f240 80e7 	bls.w	8000ed4 <__udivmoddi4+0x22c>
 8000d06:	3902      	subs	r1, #2
 8000d08:	443b      	add	r3, r7
 8000d0a:	1a9a      	subs	r2, r3, r2
 8000d0c:	b2a3      	uxth	r3, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1e:	459c      	cmp	ip, r3
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x8e>
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	f080 80d6 	bcs.w	8000ed8 <__udivmoddi4+0x230>
 8000d2c:	459c      	cmp	ip, r3
 8000d2e:	f240 80d3 	bls.w	8000ed8 <__udivmoddi4+0x230>
 8000d32:	443b      	add	r3, r7
 8000d34:	3802      	subs	r0, #2
 8000d36:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3a:	eba3 030c 	sub.w	r3, r3, ip
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11d      	cbz	r5, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40f3      	lsrs	r3, r6
 8000d44:	2200      	movs	r2, #0
 8000d46:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d905      	bls.n	8000d5e <__udivmoddi4+0xb6>
 8000d52:	b10d      	cbz	r5, 8000d58 <__udivmoddi4+0xb0>
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e7f5      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d5e:	fab3 f183 	clz	r1, r3
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d146      	bne.n	8000df4 <__udivmoddi4+0x14c>
 8000d66:	4573      	cmp	r3, lr
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xc8>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 8105 	bhi.w	8000f7a <__udivmoddi4+0x2d2>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	4690      	mov	r8, r2
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d0e5      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d7e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d82:	e7e2      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f000 8090 	beq.w	8000eaa <__udivmoddi4+0x202>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	f040 80a4 	bne.w	8000edc <__udivmoddi4+0x234>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9c:	b280      	uxth	r0, r0
 8000d9e:	b2bc      	uxth	r4, r7
 8000da0:	2101      	movs	r1, #1
 8000da2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000da6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dae:	fb04 f20c 	mul.w	r2, r4, ip
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x11e>
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x11c>
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	f200 80e0 	bhi.w	8000f84 <__udivmoddi4+0x2dc>
 8000dc4:	46c4      	mov	ip, r8
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dcc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dd0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dd4:	fb02 f404 	mul.w	r4, r2, r4
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x144>
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	f102 30ff 	add.w	r0, r2, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x142>
 8000de4:	429c      	cmp	r4, r3
 8000de6:	f200 80ca 	bhi.w	8000f7e <__udivmoddi4+0x2d6>
 8000dea:	4602      	mov	r2, r0
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000df2:	e7a5      	b.n	8000d40 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	fa0e f401 	lsl.w	r4, lr, r1
 8000e04:	fa20 f306 	lsr.w	r3, r0, r6
 8000e08:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e0c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e10:	4323      	orrs	r3, r4
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	fa1f fc87 	uxth.w	ip, r7
 8000e1a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e1e:	0c1c      	lsrs	r4, r3, #16
 8000e20:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e24:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e28:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	d909      	bls.n	8000e48 <__udivmoddi4+0x1a0>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	f080 809c 	bcs.w	8000f76 <__udivmoddi4+0x2ce>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f240 8099 	bls.w	8000f76 <__udivmoddi4+0x2ce>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	eba4 040e 	sub.w	r4, r4, lr
 8000e4c:	fa1f fe83 	uxth.w	lr, r3
 8000e50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e54:	fb09 4413 	mls	r4, r9, r3, r4
 8000e58:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e5c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e60:	45a4      	cmp	ip, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1ce>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e6a:	f080 8082 	bcs.w	8000f72 <__udivmoddi4+0x2ca>
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d97f      	bls.n	8000f72 <__udivmoddi4+0x2ca>
 8000e72:	3b02      	subs	r3, #2
 8000e74:	443c      	add	r4, r7
 8000e76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e7a:	eba4 040c 	sub.w	r4, r4, ip
 8000e7e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e82:	4564      	cmp	r4, ip
 8000e84:	4673      	mov	r3, lr
 8000e86:	46e1      	mov	r9, ip
 8000e88:	d362      	bcc.n	8000f50 <__udivmoddi4+0x2a8>
 8000e8a:	d05f      	beq.n	8000f4c <__udivmoddi4+0x2a4>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x1fe>
 8000e8e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e92:	eb64 0409 	sbc.w	r4, r4, r9
 8000e96:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9e:	431e      	orrs	r6, r3
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	e74f      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000eaa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eae:	0c01      	lsrs	r1, r0, #16
 8000eb0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000eb4:	b280      	uxth	r0, r0
 8000eb6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	463c      	mov	r4, r7
 8000ec0:	46b8      	mov	r8, r7
 8000ec2:	46be      	mov	lr, r7
 8000ec4:	2620      	movs	r6, #32
 8000ec6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eca:	eba2 0208 	sub.w	r2, r2, r8
 8000ece:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ed2:	e766      	b.n	8000da2 <__udivmoddi4+0xfa>
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	e718      	b.n	8000d0a <__udivmoddi4+0x62>
 8000ed8:	4610      	mov	r0, r2
 8000eda:	e72c      	b.n	8000d36 <__udivmoddi4+0x8e>
 8000edc:	f1c6 0220 	rsb	r2, r6, #32
 8000ee0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ee4:	40b7      	lsls	r7, r6
 8000ee6:	40b1      	lsls	r1, r6
 8000ee8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ef6:	b2bc      	uxth	r4, r7
 8000ef8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb08 f904 	mul.w	r9, r8, r4
 8000f06:	40b0      	lsls	r0, r6
 8000f08:	4589      	cmp	r9, r1
 8000f0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f0e:	b280      	uxth	r0, r0
 8000f10:	d93e      	bls.n	8000f90 <__udivmoddi4+0x2e8>
 8000f12:	1879      	adds	r1, r7, r1
 8000f14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f18:	d201      	bcs.n	8000f1e <__udivmoddi4+0x276>
 8000f1a:	4589      	cmp	r9, r1
 8000f1c:	d81f      	bhi.n	8000f5e <__udivmoddi4+0x2b6>
 8000f1e:	eba1 0109 	sub.w	r1, r1, r9
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fb09 f804 	mul.w	r8, r9, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	4542      	cmp	r2, r8
 8000f36:	d229      	bcs.n	8000f8c <__udivmoddi4+0x2e4>
 8000f38:	18ba      	adds	r2, r7, r2
 8000f3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f3e:	d2c4      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f40:	4542      	cmp	r2, r8
 8000f42:	d2c2      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f44:	f1a9 0102 	sub.w	r1, r9, #2
 8000f48:	443a      	add	r2, r7
 8000f4a:	e7be      	b.n	8000eca <__udivmoddi4+0x222>
 8000f4c:	45f0      	cmp	r8, lr
 8000f4e:	d29d      	bcs.n	8000e8c <__udivmoddi4+0x1e4>
 8000f50:	ebbe 0302 	subs.w	r3, lr, r2
 8000f54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f58:	3801      	subs	r0, #1
 8000f5a:	46e1      	mov	r9, ip
 8000f5c:	e796      	b.n	8000e8c <__udivmoddi4+0x1e4>
 8000f5e:	eba7 0909 	sub.w	r9, r7, r9
 8000f62:	4449      	add	r1, r9
 8000f64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6c:	fb09 f804 	mul.w	r8, r9, r4
 8000f70:	e7db      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f72:	4673      	mov	r3, lr
 8000f74:	e77f      	b.n	8000e76 <__udivmoddi4+0x1ce>
 8000f76:	4650      	mov	r0, sl
 8000f78:	e766      	b.n	8000e48 <__udivmoddi4+0x1a0>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e6fd      	b.n	8000d7a <__udivmoddi4+0xd2>
 8000f7e:	443b      	add	r3, r7
 8000f80:	3a02      	subs	r2, #2
 8000f82:	e733      	b.n	8000dec <__udivmoddi4+0x144>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	443b      	add	r3, r7
 8000f8a:	e71c      	b.n	8000dc6 <__udivmoddi4+0x11e>
 8000f8c:	4649      	mov	r1, r9
 8000f8e:	e79c      	b.n	8000eca <__udivmoddi4+0x222>
 8000f90:	eba1 0109 	sub.w	r1, r1, r9
 8000f94:	46c4      	mov	ip, r8
 8000f96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9a:	fb09 f804 	mul.w	r8, r9, r4
 8000f9e:	e7c4      	b.n	8000f2a <__udivmoddi4+0x282>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <DWT_Delay_Init>:
 *      Author: IoT Main
 */

#include "DHT.h"
uint32_t DWT_Delay_Init(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <DWT_Delay_Init+0x58>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	4a13      	ldr	r2, [pc, #76]	@ (8000ffc <DWT_Delay_Init+0x58>)
 8000fae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000fb2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <DWT_Delay_Init+0x58>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	4a10      	ldr	r2, [pc, #64]	@ (8000ffc <DWT_Delay_Init+0x58>)
 8000fba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fbe:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <DWT_Delay_Init+0x5c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8001000 <DWT_Delay_Init+0x5c>)
 8000fc6:	f023 0301 	bic.w	r3, r3, #1
 8000fca:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <DWT_Delay_Init+0x5c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001000 <DWT_Delay_Init+0x5c>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <DWT_Delay_Init+0x5c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000fde:	bf00      	nop
  __ASM volatile ("NOP");
 8000fe0:	bf00      	nop
  __ASM volatile ("NOP");
 8000fe2:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <DWT_Delay_Init+0x5c>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 8000fec:	2300      	movs	r3, #0
 8000fee:	e000      	b.n	8000ff2 <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 8000ff0:	2301      	movs	r3, #1
  }

}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000edf0 	.word	0xe000edf0
 8001000:	e0001000 	.word	0xe0001000

08001004 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800100c:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <DWT_Delay_us+0x40>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001012:	f003 fc3d 	bl	8004890 <HAL_RCC_GetHCLKFreq>
 8001016:	4603      	mov	r3, r0
 8001018:	4a0b      	ldr	r2, [pc, #44]	@ (8001048 <DWT_Delay_us+0x44>)
 800101a:	fba2 2303 	umull	r2, r3, r2, r3
 800101e:	0c9b      	lsrs	r3, r3, #18
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	fb02 f303 	mul.w	r3, r2, r3
 8001026:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001028:	bf00      	nop
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <DWT_Delay_us+0x40>)
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	1ad2      	subs	r2, r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	d3f8      	bcc.n	800102a <DWT_Delay_us+0x26>
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e0001000 	.word	0xe0001000
 8001048:	431bde83 	.word	0x431bde83

0800104c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4619      	mov	r1, r3
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f002 fdca 	bl	8003c14 <HAL_GPIO_Init>
}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010a4:	887b      	ldrh	r3, [r7, #2]
 80010a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4619      	mov	r1, r3
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f002 fdae 	bl	8003c14 <HAL_GPIO_Init>
}
 80010b8:	bf00      	nop
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <DHT11_Init>:

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80010c4:	f7ff ff6e 	bl	8000fa4 <DWT_Delay_Init>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80010c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010cc:	4807      	ldr	r0, [pc, #28]	@ (80010ec <DHT11_Init+0x2c>)
 80010ce:	f7ff ffbd 	bl	800104c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010d8:	4804      	ldr	r0, [pc, #16]	@ (80010ec <DHT11_Init+0x2c>)
 80010da:	f002 ff37 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80010de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010e2:	f001 ff63 	bl	8002fac <HAL_Delay>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40020800 	.word	0x40020800

080010f0 <DHT11_Start>:

void DHT11_Start (void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80010f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010f8:	4811      	ldr	r0, [pc, #68]	@ (8001140 <DHT11_Start+0x50>)
 80010fa:	f7ff ffa7 	bl	800104c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001104:	480e      	ldr	r0, [pc, #56]	@ (8001140 <DHT11_Start+0x50>)
 8001106:	f002 ff21 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001110:	480b      	ldr	r0, [pc, #44]	@ (8001140 <DHT11_Start+0x50>)
 8001112:	f002 ff1b 	bl	8003f4c <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);
 8001116:	f244 6050 	movw	r0, #18000	@ 0x4650
 800111a:	f7ff ff73 	bl	8001004 <DWT_Delay_us>
	//delay_us (18000);   // wait for 18ms
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800111e:	2201      	movs	r2, #1
 8001120:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001124:	4806      	ldr	r0, [pc, #24]	@ (8001140 <DHT11_Start+0x50>)
 8001126:	f002 ff11 	bl	8003f4c <HAL_GPIO_WritePin>
	DWT_Delay_us(20);
 800112a:	2014      	movs	r0, #20
 800112c:	f7ff ff6a 	bl	8001004 <DWT_Delay_us>
	//delay_us (20);   // wait for 20us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8001130:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001134:	4802      	ldr	r0, [pc, #8]	@ (8001140 <DHT11_Start+0x50>)
 8001136:	f7ff ffa7 	bl	8001088 <Set_Pin_Input>
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40020800 	.word	0x40020800

08001144 <DHT11_Stop>:

void DHT11_Stop (void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001148:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800114c:	4805      	ldr	r0, [pc, #20]	@ (8001164 <DHT11_Stop+0x20>)
 800114e:	f7ff ff7d 	bl	800104c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001152:	2201      	movs	r2, #1
 8001154:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001158:	4802      	ldr	r0, [pc, #8]	@ (8001164 <DHT11_Stop+0x20>)
 800115a:	f002 fef7 	bl	8003f4c <HAL_GPIO_WritePin>
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40020800 	.word	0x40020800

08001168 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	71fb      	strb	r3, [r7, #7]

	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001172:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001176:	4812      	ldr	r0, [pc, #72]	@ (80011c0 <DHT11_Check_Response+0x58>)
 8001178:	f002 fed0 	bl	8003f1c <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10f      	bne.n	80011a2 <DHT11_Check_Response+0x3a>
	{
		DWT_Delay_us(80);
 8001182:	2050      	movs	r0, #80	@ 0x50
 8001184:	f7ff ff3e 	bl	8001004 <DWT_Delay_us>
		//delay_us (80);
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001188:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800118c:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <DHT11_Check_Response+0x58>)
 800118e:	f002 fec5 	bl	8003f1c <HAL_GPIO_ReadPin>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <DHT11_Check_Response+0x36>
 8001198:	2301      	movs	r3, #1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	e001      	b.n	80011a2 <DHT11_Check_Response+0x3a>
		else Response = -1; // 255
 800119e:	23ff      	movs	r3, #255	@ 0xff
 80011a0:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 80011a2:	bf00      	nop
 80011a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011a8:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <DHT11_Check_Response+0x58>)
 80011aa:	f002 feb7 	bl	8003f1c <HAL_GPIO_ReadPin>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f7      	bne.n	80011a4 <DHT11_Check_Response+0x3c>

	return Response;
 80011b4:	79fb      	ldrb	r3, [r7, #7]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40020800 	.word	0x40020800

080011c4 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	71bb      	strb	r3, [r7, #6]
 80011ce:	e03a      	b.n	8001246 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 80011d0:	bf00      	nop
 80011d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011d6:	4820      	ldr	r0, [pc, #128]	@ (8001258 <DHT11_Read+0x94>)
 80011d8:	f002 fea0 	bl	8003f1c <HAL_GPIO_ReadPin>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f7      	beq.n	80011d2 <DHT11_Read+0xe>
		DWT_Delay_us(40);
 80011e2:	2028      	movs	r0, #40	@ 0x28
 80011e4:	f7ff ff0e 	bl	8001004 <DWT_Delay_us>
		//delay_us (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80011e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011ec:	481a      	ldr	r0, [pc, #104]	@ (8001258 <DHT11_Read+0x94>)
 80011ee:	f002 fe95 	bl	8003f1c <HAL_GPIO_ReadPin>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10e      	bne.n	8001216 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2201      	movs	r2, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	b25b      	sxtb	r3, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	b25a      	sxtb	r2, r3
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	4013      	ands	r3, r2
 8001210:	b25b      	sxtb	r3, r3
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	e00b      	b.n	800122e <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	f1c3 0307 	rsb	r3, r3, #7
 800121c:	2201      	movs	r2, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	b25a      	sxtb	r2, r3
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	4313      	orrs	r3, r2
 800122a:	b25b      	sxtb	r3, r3
 800122c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 800122e:	bf00      	nop
 8001230:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001234:	4808      	ldr	r0, [pc, #32]	@ (8001258 <DHT11_Read+0x94>)
 8001236:	f002 fe71 	bl	8003f1c <HAL_GPIO_ReadPin>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f7      	bne.n	8001230 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8001240:	79bb      	ldrb	r3, [r7, #6]
 8001242:	3301      	adds	r3, #1
 8001244:	71bb      	strb	r3, [r7, #6]
 8001246:	79bb      	ldrb	r3, [r7, #6]
 8001248:	2b07      	cmp	r3, #7
 800124a:	d9c1      	bls.n	80011d0 <DHT11_Read+0xc>
	}
	return i;
 800124c:	79fb      	ldrb	r3, [r7, #7]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40020800 	.word	0x40020800

0800125c <DHT11_readData>:

DHT11_TypeDef DHT11_readData()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	DHT11_TypeDef dht11;
	DHT11_Start();
 8001264:	f7ff ff44 	bl	80010f0 <DHT11_Start>
	if ((dht11.status = DHT11_Check_Response()) < 0) return dht11;
 8001268:	f7ff ff7e 	bl	8001168 <DHT11_Check_Response>
 800126c:	4603      	mov	r3, r0
 800126e:	737b      	strb	r3, [r7, #13]
	dht11.rh_byte1 = DHT11_Read ();
 8001270:	f7ff ffa8 	bl	80011c4 <DHT11_Read>
 8001274:	4603      	mov	r3, r0
 8001276:	723b      	strb	r3, [r7, #8]
	dht11.rh_byte2 = DHT11_Read ();
 8001278:	f7ff ffa4 	bl	80011c4 <DHT11_Read>
 800127c:	4603      	mov	r3, r0
 800127e:	727b      	strb	r3, [r7, #9]
	dht11.temp_byte1 = DHT11_Read ();
 8001280:	f7ff ffa0 	bl	80011c4 <DHT11_Read>
 8001284:	4603      	mov	r3, r0
 8001286:	72bb      	strb	r3, [r7, #10]
	dht11.temp_byte2 = DHT11_Read ();
 8001288:	f7ff ff9c 	bl	80011c4 <DHT11_Read>
 800128c:	4603      	mov	r3, r0
 800128e:	72fb      	strb	r3, [r7, #11]
	dht11.checksum = DHT11_Read();
 8001290:	f7ff ff98 	bl	80011c4 <DHT11_Read>
 8001294:	4603      	mov	r3, r0
 8001296:	733b      	strb	r3, [r7, #12]
	DHT11_Stop();
 8001298:	f7ff ff54 	bl	8001144 <DHT11_Stop>
	return dht11;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	461a      	mov	r2, r3
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	6010      	str	r0, [r2, #0]
 80012a8:	889b      	ldrh	r3, [r3, #4]
 80012aa:	8093      	strh	r3, [r2, #4]
}
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	807b      	strh	r3, [r7, #2]
    *length = 0;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 80012c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012cc:	2100      	movs	r1, #0
 80012ce:	68b8      	ldr	r0, [r7, #8]
 80012d0:	f006 fa94 	bl	80077fc <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 80012d4:	f240 4202 	movw	r2, #1026	@ 0x402
 80012d8:	2100      	movs	r1, #0
 80012da:	4826      	ldr	r0, [pc, #152]	@ (8001374 <esp_at_command+0xc0>)
 80012dc:	f006 fa8e 	bl	80077fc <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f7fe ffdd 	bl	80002a0 <strlen>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	2364      	movs	r3, #100	@ 0x64
 80012ec:	68f9      	ldr	r1, [r7, #12]
 80012ee:	4822      	ldr	r0, [pc, #136]	@ (8001378 <esp_at_command+0xc4>)
 80012f0:	f004 fb56 	bl	80059a0 <HAL_UART_Transmit>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d032      	beq.n	8001360 <esp_at_command+0xac>
        return -1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	e035      	b.n	800136c <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 8001300:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <esp_at_command+0xc0>)
 8001302:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001306:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800130a:	d302      	bcc.n	8001312 <esp_at_command+0x5e>
            return -2;
 800130c:	f06f 0301 	mvn.w	r3, #1
 8001310:	e02c      	b.n	800136c <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 8001312:	491a      	ldr	r1, [pc, #104]	@ (800137c <esp_at_command+0xc8>)
 8001314:	4817      	ldr	r0, [pc, #92]	@ (8001374 <esp_at_command+0xc0>)
 8001316:	f006 faf5 	bl	8007904 <strstr>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <esp_at_command+0x72>
            return -3;
 8001320:	f06f 0302 	mvn.w	r3, #2
 8001324:	e022      	b.n	800136c <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 8001326:	4916      	ldr	r1, [pc, #88]	@ (8001380 <esp_at_command+0xcc>)
 8001328:	4812      	ldr	r0, [pc, #72]	@ (8001374 <esp_at_command+0xc0>)
 800132a:	f006 faeb 	bl	8007904 <strstr>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00e      	beq.n	8001352 <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 8001334:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <esp_at_command+0xc0>)
 8001336:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800133a:	461a      	mov	r2, r3
 800133c:	490d      	ldr	r1, [pc, #52]	@ (8001374 <esp_at_command+0xc0>)
 800133e:	68b8      	ldr	r0, [r7, #8]
 8001340:	f006 fb75 	bl	8007a2e <memcpy>
            *length = cb_data.length;
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <esp_at_command+0xc0>)
 8001346:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	801a      	strh	r2, [r3, #0]
            return 0;
 800134e:	2300      	movs	r3, #0
 8001350:	e00c      	b.n	800136c <esp_at_command+0xb8>
        }
        time_out -= 10;
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	3b0a      	subs	r3, #10
 8001356:	b29b      	uxth	r3, r3
 8001358:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 800135a:	200a      	movs	r0, #10
 800135c:	f001 fe26 	bl	8002fac <HAL_Delay>
    while(time_out > 0)
 8001360:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001364:	2b00      	cmp	r3, #0
 8001366:	dccb      	bgt.n	8001300 <esp_at_command+0x4c>
    }
    return -4;
 8001368:	f06f 0303 	mvn.w	r3, #3
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000640 	.word	0x20000640
 8001378:	20000bf8 	.word	0x20000bf8
 800137c:	0800a8e0 	.word	0x0800a8e0
 8001380:	0800a8e8 	.word	0x0800a8e8

08001384 <esp_reset>:

static int esp_reset(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 800138e:	1dba      	adds	r2, r7, #6
 8001390:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001394:	4909      	ldr	r1, [pc, #36]	@ (80013bc <esp_reset+0x38>)
 8001396:	480a      	ldr	r0, [pc, #40]	@ (80013c0 <esp_reset+0x3c>)
 8001398:	f7ff ff8c 	bl	80012b4 <esp_at_command>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d002      	beq.n	80013a8 <esp_reset+0x24>
    {
    	return -1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	e004      	b.n	80013b2 <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 80013a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013ac:	f001 fdfe 	bl	8002fac <HAL_Delay>
    return 0;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000208 	.word	0x20000208
 80013c0:	0800a8ec 	.word	0x0800a8ec

080013c4 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80013d2:	f107 020a 	add.w	r2, r7, #10
 80013d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013da:	492d      	ldr	r1, [pc, #180]	@ (8001490 <request_ip_addr+0xcc>)
 80013dc:	482d      	ldr	r0, [pc, #180]	@ (8001494 <request_ip_addr+0xd0>)
 80013de:	f7ff ff69 	bl	80012b4 <esp_at_command>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 80013e8:	482b      	ldr	r0, [pc, #172]	@ (8001498 <request_ip_addr+0xd4>)
 80013ea:	f006 f905 	bl	80075f8 <puts>
 80013ee:	e049      	b.n	8001484 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 80013f0:	492a      	ldr	r1, [pc, #168]	@ (800149c <request_ip_addr+0xd8>)
 80013f2:	4827      	ldr	r0, [pc, #156]	@ (8001490 <request_ip_addr+0xcc>)
 80013f4:	f006 fa2a 	bl	800784c <strtok>
 80013f8:	6178      	str	r0, [r7, #20]

        if(is_debug)
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d03e      	beq.n	800147e <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	e009      	b.n	800141a <request_ip_addr+0x56>
                printf("%c", response[i]);
 8001406:	4a22      	ldr	r2, [pc, #136]	@ (8001490 <request_ip_addr+0xcc>)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4413      	add	r3, r2
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f006 f894 	bl	800753c <putchar>
            for(int i = 0 ; i < length ; i++)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	3301      	adds	r3, #1
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	897b      	ldrh	r3, [r7, #10]
 800141c:	461a      	mov	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4293      	cmp	r3, r2
 8001422:	dbf0      	blt.n	8001406 <request_ip_addr+0x42>
        }

        while(line != NULL)
 8001424:	e02b      	b.n	800147e <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 8001426:	491e      	ldr	r1, [pc, #120]	@ (80014a0 <request_ip_addr+0xdc>)
 8001428:	6978      	ldr	r0, [r7, #20]
 800142a:	f006 fa6b 	bl	8007904 <strstr>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d01f      	beq.n	8001474 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 8001434:	491b      	ldr	r1, [pc, #108]	@ (80014a4 <request_ip_addr+0xe0>)
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f006 fa08 	bl	800784c <strtok>
                ip = strtok(NULL, "\"");
 800143c:	4919      	ldr	r1, [pc, #100]	@ (80014a4 <request_ip_addr+0xe0>)
 800143e:	2000      	movs	r0, #0
 8001440:	f006 fa04 	bl	800784c <strtok>
 8001444:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 8001446:	4918      	ldr	r1, [pc, #96]	@ (80014a8 <request_ip_addr+0xe4>)
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f7fe fec9 	bl	80001e0 <strcmp>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00f      	beq.n	8001474 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8001454:	2210      	movs	r2, #16
 8001456:	2100      	movs	r1, #0
 8001458:	4814      	ldr	r0, [pc, #80]	@ (80014ac <request_ip_addr+0xe8>)
 800145a:	f006 f9cf 	bl	80077fc <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f7fe ff1e 	bl	80002a0 <strlen>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	68f9      	ldr	r1, [r7, #12]
 800146a:	4810      	ldr	r0, [pc, #64]	@ (80014ac <request_ip_addr+0xe8>)
 800146c:	f006 fadf 	bl	8007a2e <memcpy>
                    return 0;
 8001470:	2300      	movs	r3, #0
 8001472:	e009      	b.n	8001488 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8001474:	4909      	ldr	r1, [pc, #36]	@ (800149c <request_ip_addr+0xd8>)
 8001476:	2000      	movs	r0, #0
 8001478:	f006 f9e8 	bl	800784c <strtok>
 800147c:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1d0      	bne.n	8001426 <request_ip_addr+0x62>
        }
    }
    return -1;
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000208 	.word	0x20000208
 8001494:	0800a934 	.word	0x0800a934
 8001498:	0800a940 	.word	0x0800a940
 800149c:	0800a928 	.word	0x0800a928
 80014a0:	0800a960 	.word	0x0800a960
 80014a4:	0800a930 	.word	0x0800a930
 80014a8:	0800a8f8 	.word	0x0800a8f8
 80014ac:	200001f8 	.word	0x200001f8

080014b0 <esp_client_conn>:
int esp_client_conn()
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b092      	sub	sp, #72	@ 0x48
 80014b4:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80014b6:	f107 0308 	add.w	r3, r7, #8
 80014ba:	2240      	movs	r2, #64	@ 0x40
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f006 f99c 	bl	80077fc <memset>
  uint16_t length = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 80014c8:	f107 0008 	add.w	r0, r7, #8
 80014cc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80014d0:	4a09      	ldr	r2, [pc, #36]	@ (80014f8 <esp_client_conn+0x48>)
 80014d2:	490a      	ldr	r1, [pc, #40]	@ (80014fc <esp_client_conn+0x4c>)
 80014d4:	f006 f898 	bl	8007608 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 80014d8:	1dba      	adds	r2, r7, #6
 80014da:	f107 0008 	add.w	r0, r7, #8
 80014de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e2:	4907      	ldr	r1, [pc, #28]	@ (8001500 <esp_client_conn+0x50>)
 80014e4:	f7ff fee6 	bl	80012b4 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 80014e8:	4806      	ldr	r0, [pc, #24]	@ (8001504 <esp_client_conn+0x54>)
 80014ea:	f000 f909 	bl	8001700 <esp_send_data>
	return 0;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3748      	adds	r7, #72	@ 0x48
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	0800a96c 	.word	0x0800a96c
 80014fc:	0800a97c 	.word	0x0800a97c
 8001500:	20000208 	.word	0x20000208
 8001504:	0800a998 	.word	0x0800a998

08001508 <esp_get_status>:
int esp_get_status()
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 8001512:	1dba      	adds	r2, r7, #6
 8001514:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001518:	4909      	ldr	r1, [pc, #36]	@ (8001540 <esp_get_status+0x38>)
 800151a:	480a      	ldr	r0, [pc, #40]	@ (8001544 <esp_get_status+0x3c>)
 800151c:	f7ff feca 	bl	80012b4 <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 8001520:	4909      	ldr	r1, [pc, #36]	@ (8001548 <esp_get_status+0x40>)
 8001522:	4807      	ldr	r0, [pc, #28]	@ (8001540 <esp_get_status+0x38>)
 8001524:	f006 f9ee 	bl	8007904 <strstr>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <esp_get_status+0x2a>
    {
    	return 0;
 800152e:	2300      	movs	r3, #0
 8001530:	e001      	b.n	8001536 <esp_get_status+0x2e>
    }
	return -1;
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000208 	.word	0x20000208
 8001544:	0800a9a4 	.word	0x0800a9a4
 8001548:	0800a9b4 	.word	0x0800a9b4

0800154c <drv_esp_init>:
int drv_esp_init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 8001550:	2210      	movs	r2, #16
 8001552:	2100      	movs	r1, #0
 8001554:	4806      	ldr	r0, [pc, #24]	@ (8001570 <drv_esp_init+0x24>)
 8001556:	f006 f951 	bl	80077fc <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 800155a:	2201      	movs	r2, #1
 800155c:	4905      	ldr	r1, [pc, #20]	@ (8001574 <drv_esp_init+0x28>)
 800155e:	4806      	ldr	r0, [pc, #24]	@ (8001578 <drv_esp_init+0x2c>)
 8001560:	f004 faa9 	bl	8005ab6 <HAL_UART_Receive_IT>

    return esp_reset();
 8001564:	f7ff ff0e 	bl	8001384 <esp_reset>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200001f8 	.word	0x200001f8
 8001574:	2000063f 	.word	0x2000063f
 8001578:	20000bf8 	.word	0x20000bf8

0800157c <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b094      	sub	sp, #80	@ 0x50
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	2240      	movs	r2, #64	@ 0x40
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f006 f931 	bl	80077fc <memset>
  if(ssid == NULL || passwd == NULL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d002      	beq.n	80015a6 <ap_conn_func+0x2a>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d103      	bne.n	80015ae <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 80015a6:	4817      	ldr	r0, [pc, #92]	@ (8001604 <ap_conn_func+0x88>)
 80015a8:	f006 f826 	bl	80075f8 <puts>
 80015ac:	e026      	b.n	80015fc <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 80015ae:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 80015b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b6:	4914      	ldr	r1, [pc, #80]	@ (8001608 <ap_conn_func+0x8c>)
 80015b8:	4814      	ldr	r0, [pc, #80]	@ (800160c <ap_conn_func+0x90>)
 80015ba:	f7ff fe7b 	bl	80012b4 <esp_at_command>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 80015c4:	4812      	ldr	r0, [pc, #72]	@ (8001610 <ap_conn_func+0x94>)
 80015c6:	f006 f817 	bl	80075f8 <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 80015ca:	f107 000c 	add.w	r0, r7, #12
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4910      	ldr	r1, [pc, #64]	@ (8001614 <ap_conn_func+0x98>)
 80015d4:	f006 f818 	bl	8007608 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 80015d8:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 80015dc:	f107 000c 	add.w	r0, r7, #12
 80015e0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80015e4:	4908      	ldr	r1, [pc, #32]	@ (8001608 <ap_conn_func+0x8c>)
 80015e6:	f7ff fe65 	bl	80012b4 <esp_at_command>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	4619      	mov	r1, r3
 80015f6:	4808      	ldr	r0, [pc, #32]	@ (8001618 <ap_conn_func+0x9c>)
 80015f8:	f005 ff8e 	bl	8007518 <iprintf>
}
 80015fc:	3750      	adds	r7, #80	@ 0x50
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	0800aa18 	.word	0x0800aa18
 8001608:	20000208 	.word	0x20000208
 800160c:	0800aa44 	.word	0x0800aa44
 8001610:	0800aa54 	.word	0x0800aa54
 8001614:	0800aa68 	.word	0x0800aa68
 8001618:	0800aa80 	.word	0x0800aa80

0800161c <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a23      	ldr	r2, [pc, #140]	@ (80016b8 <HAL_UART_RxCpltCallback+0x9c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d117      	bne.n	800165e <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 800162e:	4b23      	ldr	r3, [pc, #140]	@ (80016bc <HAL_UART_RxCpltCallback+0xa0>)
 8001630:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001638:	d20c      	bcs.n	8001654 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 800163a:	4b20      	ldr	r3, [pc, #128]	@ (80016bc <HAL_UART_RxCpltCallback+0xa0>)
 800163c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	b291      	uxth	r1, r2
 8001644:	4a1d      	ldr	r2, [pc, #116]	@ (80016bc <HAL_UART_RxCpltCallback+0xa0>)
 8001646:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 800164a:	461a      	mov	r2, r3
 800164c:	4b1c      	ldr	r3, [pc, #112]	@ (80016c0 <HAL_UART_RxCpltCallback+0xa4>)
 800164e:	7819      	ldrb	r1, [r3, #0]
 8001650:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <HAL_UART_RxCpltCallback+0xa0>)
 8001652:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 8001654:	2201      	movs	r2, #1
 8001656:	491a      	ldr	r1, [pc, #104]	@ (80016c0 <HAL_UART_RxCpltCallback+0xa4>)
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f004 fa2c 	bl	8005ab6 <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a18      	ldr	r2, [pc, #96]	@ (80016c4 <HAL_UART_RxCpltCallback+0xa8>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d122      	bne.n	80016ae <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8001668:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <HAL_UART_RxCpltCallback+0xac>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a17      	ldr	r2, [pc, #92]	@ (80016cc <HAL_UART_RxCpltCallback+0xb0>)
 800166e:	7811      	ldrb	r1, [r2, #0]
 8001670:	4a17      	ldr	r2, [pc, #92]	@ (80016d0 <HAL_UART_RxCpltCallback+0xb4>)
 8001672:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <HAL_UART_RxCpltCallback+0xac>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a15      	ldr	r2, [pc, #84]	@ (80016d0 <HAL_UART_RxCpltCallback+0xb4>)
 800167a:	5cd3      	ldrb	r3, [r2, r3]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b0d      	cmp	r3, #13
 8001680:	d10b      	bne.n	800169a <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <HAL_UART_RxCpltCallback+0xac>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <HAL_UART_RxCpltCallback+0xb4>)
 8001688:	2100      	movs	r1, #0
 800168a:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 800168c:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <HAL_UART_RxCpltCallback+0xb8>)
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8001692:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <HAL_UART_RxCpltCallback+0xac>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	e004      	b.n	80016a4 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <HAL_UART_RxCpltCallback+0xac>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	4a09      	ldr	r2, [pc, #36]	@ (80016c8 <HAL_UART_RxCpltCallback+0xac>)
 80016a2:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 80016a4:	2201      	movs	r2, #1
 80016a6:	4909      	ldr	r1, [pc, #36]	@ (80016cc <HAL_UART_RxCpltCallback+0xb0>)
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f004 fa04 	bl	8005ab6 <HAL_UART_Receive_IT>
    }
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40011400 	.word	0x40011400
 80016bc:	20000640 	.word	0x20000640
 80016c0:	2000063f 	.word	0x2000063f
 80016c4:	40004400 	.word	0x40004400
 80016c8:	20000a44 	.word	0x20000a44
 80016cc:	2000063e 	.word	0x2000063e
 80016d0:	2000060c 	.word	0x2000060c
 80016d4:	20000608 	.word	0x20000608

080016d8 <AiotClient_Init>:


void AiotClient_Init()
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 80016dc:	4906      	ldr	r1, [pc, #24]	@ (80016f8 <AiotClient_Init+0x20>)
 80016de:	4807      	ldr	r0, [pc, #28]	@ (80016fc <AiotClient_Init+0x24>)
 80016e0:	f7ff ff4c 	bl	800157c <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 80016e4:	2001      	movs	r0, #1
 80016e6:	f7ff fe6d 	bl	80013c4 <request_ip_addr>
	esp_client_conn();
 80016ea:	f7ff fee1 	bl	80014b0 <esp_client_conn>
	esp_get_status();
 80016ee:	f7ff ff0b 	bl	8001508 <esp_get_status>
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	0800aae0 	.word	0x0800aae0
 80016fc:	0800aaec 	.word	0x0800aaec

08001700 <esp_send_data>:

void esp_send_data(char *data)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b094      	sub	sp, #80	@ 0x50
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	2240      	movs	r2, #64	@ 0x40
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f006 f873 	bl	80077fc <memset>
	uint16_t length = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7fe fdc0 	bl	80002a0 <strlen>
 8001720:	4602      	mov	r2, r0
 8001722:	f107 0310 	add.w	r3, r7, #16
 8001726:	490e      	ldr	r1, [pc, #56]	@ (8001760 <esp_send_data+0x60>)
 8001728:	4618      	mov	r0, r3
 800172a:	f005 ff6d 	bl	8007608 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 800172e:	f107 020e 	add.w	r2, r7, #14
 8001732:	f107 0010 	add.w	r0, r7, #16
 8001736:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800173a:	490a      	ldr	r1, [pc, #40]	@ (8001764 <esp_send_data+0x64>)
 800173c:	f7ff fdba 	bl	80012b4 <esp_at_command>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d107      	bne.n	8001756 <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8001746:	f107 020e 	add.w	r2, r7, #14
 800174a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800174e:	4905      	ldr	r1, [pc, #20]	@ (8001764 <esp_send_data+0x64>)
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fdaf 	bl	80012b4 <esp_at_command>
	}
}
 8001756:	bf00      	nop
 8001758:	3750      	adds	r7, #80	@ 0x50
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	0800aaf4 	.word	0x0800aaf4
 8001764:	20000208 	.word	0x20000208

08001768 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 800176c:	2201      	movs	r2, #1
 800176e:	4903      	ldr	r1, [pc, #12]	@ (800177c <drv_uart_init+0x14>)
 8001770:	4803      	ldr	r0, [pc, #12]	@ (8001780 <drv_uart_init+0x18>)
 8001772:	f004 f9a0 	bl	8005ab6 <HAL_UART_Receive_IT>
    return 0;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2000063e 	.word	0x2000063e
 8001780:	20000bb0 	.word	0x20000bb0

08001784 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 800178c:	1d39      	adds	r1, r7, #4
 800178e:	230a      	movs	r3, #10
 8001790:	2201      	movs	r2, #1
 8001792:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <__io_putchar+0x2c>)
 8001794:	f004 f904 	bl	80059a0 <HAL_UART_Transmit>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <__io_putchar+0x1e>
        return ch;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	e001      	b.n	80017a6 <__io_putchar+0x22>
    return -1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000bb0 	.word	0x20000bb0
 80017b4:	00000000 	.word	0x00000000

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int ret = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c2:	f001 fb81 	bl	8002ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c6:	f000 f9d9 	bl	8001b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ca:	f000 fcf9 	bl	80021c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017ce:	f000 fca3 	bl	8002118 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80017d2:	f000 fccb 	bl	800216c <MX_USART6_UART_Init>
  MX_TIM4_Init();
 80017d6:	f000 fc27 	bl	8002028 <MX_TIM4_Init>
  MX_TIM3_Init();
 80017da:	f000 fbaf 	bl	8001f3c <MX_TIM3_Init>
  MX_TIM1_Init();
 80017de:	f000 fa97 	bl	8001d10 <MX_TIM1_Init>
  MX_ADC1_Init();
 80017e2:	f000 fa35 	bl	8001c50 <MX_ADC1_Init>
  MX_TIM2_Init();
 80017e6:	f000 fb33 	bl	8001e50 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf("Start main() - wifi\r\n");
 80017ea:	4861      	ldr	r0, [pc, #388]	@ (8001970 <main+0x1b8>)
 80017ec:	f005 ff04 	bl	80075f8 <puts>
  ret |= drv_uart_init();
 80017f0:	f7ff ffba 	bl	8001768 <drv_uart_init>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
  ret |= drv_esp_init();
 80017fc:	f7ff fea6 	bl	800154c <drv_esp_init>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	4313      	orrs	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  if(ret != 0)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d004      	beq.n	8001818 <main+0x60>
  {
	  printf("Esp response error\r\n");
 800180e:	4859      	ldr	r0, [pc, #356]	@ (8001974 <main+0x1bc>)
 8001810:	f005 fef2 	bl	80075f8 <puts>
	  Error_Handler();
 8001814:	f000 ffaa 	bl	800276c <Error_Handler>
  }

  AiotClient_Init();
 8001818:	f7ff ff5e 	bl	80016d8 <AiotClient_Init>

  DHT11_Init();
 800181c:	f7ff fc50 	bl	80010c0 <DHT11_Init>

  if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8001820:	2100      	movs	r1, #0
 8001822:	4855      	ldr	r0, [pc, #340]	@ (8001978 <main+0x1c0>)
 8001824:	f003 f974 	bl	8004b10 <HAL_TIM_PWM_Start>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <main+0x7a>
	  Error_Handler();
 800182e:	f000 ff9d 	bl	800276c <Error_Handler>
  if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8001832:	4852      	ldr	r0, [pc, #328]	@ (800197c <main+0x1c4>)
 8001834:	f003 f8b0 	bl	8004998 <HAL_TIM_Base_Start_IT>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <main+0x8a>
	  Error_Handler();
 800183e:	f000 ff95 	bl	800276c <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1) != HAL_OK)
 8001842:	2100      	movs	r1, #0
 8001844:	484d      	ldr	r0, [pc, #308]	@ (800197c <main+0x1c4>)
 8001846:	f003 f963 	bl	8004b10 <HAL_TIM_PWM_Start>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <main+0x9c>
	  Error_Handler();
 8001850:	f000 ff8c 	bl	800276c <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8001854:	2100      	movs	r1, #0
 8001856:	484a      	ldr	r0, [pc, #296]	@ (8001980 <main+0x1c8>)
 8001858:	f003 f95a 	bl	8004b10 <HAL_TIM_PWM_Start>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <main+0xae>
	  Error_Handler();
 8001862:	f000 ff83 	bl	800276c <Error_Handler>

  if(HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1) != HAL_OK)
 8001866:	2100      	movs	r1, #0
 8001868:	4846      	ldr	r0, [pc, #280]	@ (8001984 <main+0x1cc>)
 800186a:	f003 f951 	bl	8004b10 <HAL_TIM_PWM_Start>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <main+0xc0>
	  Error_Handler();
 8001874:	f000 ff7a 	bl	800276c <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	    int infraredSensorData = infraredSensor();	//출입문 적외선센서 값
	  	if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8001878:	4843      	ldr	r0, [pc, #268]	@ (8001988 <main+0x1d0>)
 800187a:	f001 fbff 	bl	800307c <HAL_ADC_Start_IT>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <main+0xd0>
		    Error_Handler();
 8001884:	f000 ff72 	bl	800276c <Error_Handler>
		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8001888:	4940      	ldr	r1, [pc, #256]	@ (800198c <main+0x1d4>)
 800188a:	4841      	ldr	r0, [pc, #260]	@ (8001990 <main+0x1d8>)
 800188c:	f006 f83a 	bl	8007904 <strstr>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d01d      	beq.n	80018d2 <main+0x11a>
 8001896:	4b3e      	ldr	r3, [pc, #248]	@ (8001990 <main+0x1d8>)
 8001898:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800189c:	3b01      	subs	r3, #1
 800189e:	4a3c      	ldr	r2, [pc, #240]	@ (8001990 <main+0x1d8>)
 80018a0:	5cd3      	ldrb	r3, [r2, r3]
 80018a2:	2b0a      	cmp	r3, #10
 80018a4:	d115      	bne.n	80018d2 <main+0x11a>
		{
			//?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 80018a6:	215b      	movs	r1, #91	@ 0x5b
 80018a8:	4839      	ldr	r0, [pc, #228]	@ (8001990 <main+0x1d8>)
 80018aa:	f005 ffaf 	bl	800780c <strchr>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4619      	mov	r1, r3
 80018b2:	4838      	ldr	r0, [pc, #224]	@ (8001994 <main+0x1dc>)
 80018b4:	f006 f8b3 	bl	8007a1e <strcpy>
			memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 80018b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018bc:	2100      	movs	r1, #0
 80018be:	4834      	ldr	r0, [pc, #208]	@ (8001990 <main+0x1d8>)
 80018c0:	f005 ff9c 	bl	80077fc <memset>
			cb_data.length = 0;
 80018c4:	4b32      	ldr	r3, [pc, #200]	@ (8001990 <main+0x1d8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 80018cc:	4831      	ldr	r0, [pc, #196]	@ (8001994 <main+0x1dc>)
 80018ce:	f000 fd17 	bl	8002300 <esp_event>
		}
		if(rx2Flag)
 80018d2:	4b31      	ldr	r3, [pc, #196]	@ (8001998 <main+0x1e0>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <main+0x132>
		{
			printf("recv2 : %s\r\n",rx2Data);
 80018dc:	492f      	ldr	r1, [pc, #188]	@ (800199c <main+0x1e4>)
 80018de:	4830      	ldr	r0, [pc, #192]	@ (80019a0 <main+0x1e8>)
 80018e0:	f005 fe1a 	bl	8007518 <iprintf>
			rx2Flag =0;
 80018e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001998 <main+0x1e0>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
		}
		if(tim3Flag1Sec)	//1초에 한번
 80018ea:	4b2e      	ldr	r3, [pc, #184]	@ (80019a4 <main+0x1ec>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d06b      	beq.n	80019ca <main+0x212>
		{
			tim3Flag1Sec = 0;
 80018f2:	4b2c      	ldr	r3, [pc, #176]	@ (80019a4 <main+0x1ec>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
			if(!(tim3Sec%10)) //10초에 한번
 80018f8:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <main+0x1f0>)
 80018fa:	6819      	ldr	r1, [r3, #0]
 80018fc:	4b2b      	ldr	r3, [pc, #172]	@ (80019ac <main+0x1f4>)
 80018fe:	fba3 2301 	umull	r2, r3, r3, r1
 8001902:	08da      	lsrs	r2, r3, #3
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	1aca      	subs	r2, r1, r3
 800190e:	2a00      	cmp	r2, #0
 8001910:	d109      	bne.n	8001926 <main+0x16e>
			{
				if(esp_get_status() != 0)
 8001912:	f7ff fdf9 	bl	8001508 <esp_get_status>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d004      	beq.n	8001926 <main+0x16e>
				{
					printf("server connecting ...\r\n");
 800191c:	4824      	ldr	r0, [pc, #144]	@ (80019b0 <main+0x1f8>)
 800191e:	f005 fe6b 	bl	80075f8 <puts>
					esp_client_conn();
 8001922:	f7ff fdc5 	bl	80014b0 <esp_client_conn>
				}
			}
			printf("tim3Sec : %d\r\n",tim3Sec);
 8001926:	4b20      	ldr	r3, [pc, #128]	@ (80019a8 <main+0x1f0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4619      	mov	r1, r3
 800192c:	4821      	ldr	r0, [pc, #132]	@ (80019b4 <main+0x1fc>)
 800192e:	f005 fdf3 	bl	8007518 <iprintf>
			if(!(tim3Sec%5)) //5초에 한번
 8001932:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <main+0x1f0>)
 8001934:	6819      	ldr	r1, [r3, #0]
 8001936:	4b1d      	ldr	r3, [pc, #116]	@ (80019ac <main+0x1f4>)
 8001938:	fba3 2301 	umull	r2, r3, r3, r1
 800193c:	089a      	lsrs	r2, r3, #2
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	1aca      	subs	r2, r1, r3
 8001946:	2a00      	cmp	r2, #0
 8001948:	d13f      	bne.n	80019ca <main+0x212>
			{
				//dht11에서 값 읽어오기
				dht11Data = DHT11_readData();
 800194a:	463b      	mov	r3, r7
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fc85 	bl	800125c <DHT11_readData>
				if(dht11Data.rh_byte1 != 255)
 8001952:	783b      	ldrb	r3, [r7, #0]
 8001954:	2bff      	cmp	r3, #255	@ 0xff
 8001956:	d035      	beq.n	80019c4 <main+0x20c>
				{
					//온도 데이터 전역변수 temp에 저장
					sprintf(temp, "%d.%d", dht11Data.temp_byte1, dht11Data.temp_byte2);
 8001958:	78bb      	ldrb	r3, [r7, #2]
 800195a:	461a      	mov	r2, r3
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	4916      	ldr	r1, [pc, #88]	@ (80019b8 <main+0x200>)
 8001960:	4816      	ldr	r0, [pc, #88]	@ (80019bc <main+0x204>)
 8001962:	f005 fe51 	bl	8007608 <siprintf>
					//습도 데이터 전역변수 humi 에 저장
					humi = dht11Data.rh_byte1;
 8001966:	783b      	ldrb	r3, [r7, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <main+0x208>)
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	e02c      	b.n	80019ca <main+0x212>
 8001970:	0800ab04 	.word	0x0800ab04
 8001974:	0800ab1c 	.word	0x0800ab1c
 8001978:	20000a90 	.word	0x20000a90
 800197c:	20000ad8 	.word	0x20000ad8
 8001980:	20000b20 	.word	0x20000b20
 8001984:	20000b68 	.word	0x20000b68
 8001988:	20000a48 	.word	0x20000a48
 800198c:	0800ab30 	.word	0x0800ab30
 8001990:	20000640 	.word	0x20000640
 8001994:	20000c7c 	.word	0x20000c7c
 8001998:	20000608 	.word	0x20000608
 800199c:	2000060c 	.word	0x2000060c
 80019a0:	0800ab38 	.word	0x0800ab38
 80019a4:	20000000 	.word	0x20000000
 80019a8:	20000c40 	.word	0x20000c40
 80019ac:	cccccccd 	.word	0xcccccccd
 80019b0:	0800ab48 	.word	0x0800ab48
 80019b4:	0800ab60 	.word	0x0800ab60
 80019b8:	0800ab70 	.word	0x0800ab70
 80019bc:	20000c48 	.word	0x20000c48
 80019c0:	20000c44 	.word	0x20000c44
				}
				else
					printf("DHT11 response error\r\n");
 80019c4:	4860      	ldr	r0, [pc, #384]	@ (8001b48 <main+0x390>)
 80019c6:	f005 fe17 	bl	80075f8 <puts>
//				{
//					servoFlag = 0;
//					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
				}
			}
			if(!(tim3Sec%2))
 80019ca:	4b60      	ldr	r3, [pc, #384]	@ (8001b4c <main+0x394>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10b      	bne.n	80019ee <main+0x236>
			{
				if (closeFlag)
 80019d6:	4b5e      	ldr	r3, [pc, #376]	@ (8001b50 <main+0x398>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d007      	beq.n	80019ee <main+0x236>
				{
					__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_1, 1500);
 80019de:	4b5d      	ldr	r3, [pc, #372]	@ (8001b54 <main+0x39c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80019e6:	635a      	str	r2, [r3, #52]	@ 0x34
					closeFlag = 0;
 80019e8:	4b59      	ldr	r3, [pc, #356]	@ (8001b50 <main+0x398>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
				}
			}
//		printf("adc1 ch0 : %d\r\n", ADC1ConvertValue[0]);
//		printf("adc1 ch1 : %d\r\n", ADC1ConvertValue[1]);
		//outdoorsensor 거리 변환
		float voltage = (ADC1ConvertValue[0] / 4095.0f) * 3.3f; // 12-bit ADC의 최대 값은 4095
 80019ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001b58 <main+0x3a0>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	ee07 3a90 	vmov	s15, r3
 80019f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019fc:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8001b5c <main+0x3a4>
 8001a00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a04:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8001b60 <main+0x3a8>
 8001a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0c:	edc7 7a03 	vstr	s15, [r7, #12]
		if (voltage < 0.1f) voltage = 0.1f;
 8001a10:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a14:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001b64 <main+0x3ac>
 8001a18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a20:	d501      	bpl.n	8001a26 <main+0x26e>
 8001a22:	4b51      	ldr	r3, [pc, #324]	@ (8001b68 <main+0x3b0>)
 8001a24:	60fb      	str	r3, [r7, #12]
		outDoorSensor.distance = 27.86f / pow(voltage, 1.15f);
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f7fe fda6 	bl	8000578 <__aeabi_f2d>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	ed9f 1b41 	vldr	d1, [pc, #260]	@ 8001b38 <main+0x380>
 8001a34:	ec43 2b10 	vmov	d0, r2, r3
 8001a38:	f007 ffe6 	bl	8009a08 <pow>
 8001a3c:	ec53 2b10 	vmov	r2, r3, d0
 8001a40:	a13f      	add	r1, pc, #252	@ (adr r1, 8001b40 <main+0x388>)
 8001a42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a46:	f7fe ff19 	bl	800087c <__aeabi_ddiv>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	f7ff f8c1 	bl	8000bd8 <__aeabi_d2f>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4a44      	ldr	r2, [pc, #272]	@ (8001b6c <main+0x3b4>)
 8001a5a:	6013      	str	r3, [r2, #0]
//		printf("out distance : %f\r\n", outDoorSensor.distance);

		//indoorsensor 거리 변환
		voltage = (ADC1ConvertValue[1] / 4095.0f) * 3.3f; // 12-bit ADC의 최대 값은 4095
 8001a5c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b58 <main+0x3a0>)
 8001a5e:	885b      	ldrh	r3, [r3, #2]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a6a:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8001b5c <main+0x3a4>
 8001a6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a72:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001b60 <main+0x3a8>
 8001a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a7a:	edc7 7a03 	vstr	s15, [r7, #12]
		if (voltage < 0.1f) voltage = 0.1f;
 8001a7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a82:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001b64 <main+0x3ac>
 8001a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	d501      	bpl.n	8001a94 <main+0x2dc>
 8001a90:	4b35      	ldr	r3, [pc, #212]	@ (8001b68 <main+0x3b0>)
 8001a92:	60fb      	str	r3, [r7, #12]
		inDoorSensor.distance = 27.86f / pow(voltage, 1.15f);
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f7fe fd6f 	bl	8000578 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	ed9f 1b26 	vldr	d1, [pc, #152]	@ 8001b38 <main+0x380>
 8001aa2:	ec43 2b10 	vmov	d0, r2, r3
 8001aa6:	f007 ffaf 	bl	8009a08 <pow>
 8001aaa:	ec53 2b10 	vmov	r2, r3, d0
 8001aae:	a124      	add	r1, pc, #144	@ (adr r1, 8001b40 <main+0x388>)
 8001ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ab4:	f7fe fee2 	bl	800087c <__aeabi_ddiv>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f7ff f88a 	bl	8000bd8 <__aeabi_d2f>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8001b70 <main+0x3b8>)
 8001ac8:	6013      	str	r3, [r2, #0]
		printf("in distance : %f\r\n", inDoorSensor.distance);
 8001aca:	4b29      	ldr	r3, [pc, #164]	@ (8001b70 <main+0x3b8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd52 	bl	8000578 <__aeabi_f2d>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4826      	ldr	r0, [pc, #152]	@ (8001b74 <main+0x3bc>)
 8001ada:	f005 fd1d 	bl	8007518 <iprintf>
		printf("out distance : %f\r\n", outDoorSensor.distance);
 8001ade:	4b23      	ldr	r3, [pc, #140]	@ (8001b6c <main+0x3b4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd48 	bl	8000578 <__aeabi_f2d>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4822      	ldr	r0, [pc, #136]	@ (8001b78 <main+0x3c0>)
 8001aee:	f005 fd13 	bl	8007518 <iprintf>

		if((outDoorSensor.distance <= 20.0 || inDoorSensor.distance <= 20.0)  && !closeFlag)
 8001af2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <main+0x3b4>)
 8001af4:	edd3 7a00 	vldr	s15, [r3]
 8001af8:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b04:	d909      	bls.n	8001b1a <main+0x362>
 8001b06:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <main+0x3b8>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b18:	d80c      	bhi.n	8001b34 <main+0x37c>
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <main+0x398>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f47f aeaa 	bne.w	8001878 <main+0xc0>
		{
			__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_1, 1700);
 8001b24:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <main+0x39c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8001b2c:	635a      	str	r2, [r3, #52]	@ 0x34
			closeFlag = 1;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	@ (8001b50 <main+0x398>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
  {
 8001b34:	e6a0      	b.n	8001878 <main+0xc0>
 8001b36:	bf00      	nop
 8001b38:	60000000 	.word	0x60000000
 8001b3c:	3ff26666 	.word	0x3ff26666
 8001b40:	00000000 	.word	0x00000000
 8001b44:	403bdc29 	.word	0x403bdc29
 8001b48:	0800ab78 	.word	0x0800ab78
 8001b4c:	20000c40 	.word	0x20000c40
 8001b50:	20000004 	.word	0x20000004
 8001b54:	20000ad8 	.word	0x20000ad8
 8001b58:	20000c64 	.word	0x20000c64
 8001b5c:	457ff000 	.word	0x457ff000
 8001b60:	40533333 	.word	0x40533333
 8001b64:	3dcccccd 	.word	0x3dcccccd
 8001b68:	3dcccccd 	.word	0x3dcccccd
 8001b6c:	20000c6c 	.word	0x20000c6c
 8001b70:	20000c74 	.word	0x20000c74
 8001b74:	0800ab90 	.word	0x0800ab90
 8001b78:	0800aba4 	.word	0x0800aba4

08001b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b094      	sub	sp, #80	@ 0x50
 8001b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b82:	f107 0320 	add.w	r3, r7, #32
 8001b86:	2230      	movs	r2, #48	@ 0x30
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f005 fe36 	bl	80077fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	4b28      	ldr	r3, [pc, #160]	@ (8001c48 <SystemClock_Config+0xcc>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	4a27      	ldr	r2, [pc, #156]	@ (8001c48 <SystemClock_Config+0xcc>)
 8001baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb0:	4b25      	ldr	r3, [pc, #148]	@ (8001c48 <SystemClock_Config+0xcc>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	4b22      	ldr	r3, [pc, #136]	@ (8001c4c <SystemClock_Config+0xd0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a21      	ldr	r2, [pc, #132]	@ (8001c4c <SystemClock_Config+0xd0>)
 8001bc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c4c <SystemClock_Config+0xd0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bdc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be2:	2302      	movs	r3, #2
 8001be4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001be6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bec:	2308      	movs	r3, #8
 8001bee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bf0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001bf4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfe:	f107 0320 	add.w	r3, r7, #32
 8001c02:	4618      	mov	r0, r3
 8001c04:	f002 f9e0 	bl	8003fc8 <HAL_RCC_OscConfig>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001c0e:	f000 fdad 	bl	800276c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c12:	230f      	movs	r3, #15
 8001c14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c16:	2302      	movs	r3, #2
 8001c18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 fc42 	bl	80044b8 <HAL_RCC_ClockConfig>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c3a:	f000 fd97 	bl	800276c <Error_Handler>
  }
}
 8001c3e:	bf00      	nop
 8001c40:	3750      	adds	r7, #80	@ 0x50
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40007000 	.word	0x40007000

08001c50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c56:	463b      	mov	r3, r7
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c62:	4b28      	ldr	r3, [pc, #160]	@ (8001d04 <MX_ADC1_Init+0xb4>)
 8001c64:	4a28      	ldr	r2, [pc, #160]	@ (8001d08 <MX_ADC1_Init+0xb8>)
 8001c66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c68:	4b26      	ldr	r3, [pc, #152]	@ (8001d04 <MX_ADC1_Init+0xb4>)
 8001c6a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c70:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <MX_ADC1_Init+0xb4>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001c76:	4b23      	ldr	r3, [pc, #140]	@ (8001d04 <MX_ADC1_Init+0xb4>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c7c:	4b21      	ldr	r3, [pc, #132]	@ (8001d04 <MX_ADC1_Init+0xb4>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c82:	4b20      	ldr	r3, [pc, #128]	@ (8001d04 <MX_ADC1_Init+0xb4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d04 <MX_ADC1_Init+0xb4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c90:	4b1c      	ldr	r3, [pc, #112]	@ (8001d04 <MX_ADC1_Init+0xb4>)
 8001c92:	4a1e      	ldr	r2, [pc, #120]	@ (8001d0c <MX_ADC1_Init+0xbc>)
 8001c94:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c96:	4b1b      	ldr	r3, [pc, #108]	@ (8001d04 <MX_ADC1_Init+0xb4>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001c9c:	4b19      	ldr	r3, [pc, #100]	@ (8001d04 <MX_ADC1_Init+0xb4>)
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ca2:	4b18      	ldr	r3, [pc, #96]	@ (8001d04 <MX_ADC1_Init+0xb4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001caa:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <MX_ADC1_Init+0xb4>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cb0:	4814      	ldr	r0, [pc, #80]	@ (8001d04 <MX_ADC1_Init+0xb4>)
 8001cb2:	f001 f99f 	bl	8002ff4 <HAL_ADC_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001cbc:	f000 fd56 	bl	800276c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001cc8:	2304      	movs	r3, #4
 8001cca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ccc:	463b      	mov	r3, r7
 8001cce:	4619      	mov	r1, r3
 8001cd0:	480c      	ldr	r0, [pc, #48]	@ (8001d04 <MX_ADC1_Init+0xb4>)
 8001cd2:	f001 fbc3 	bl	800345c <HAL_ADC_ConfigChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001cdc:	f000 fd46 	bl	800276c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ce8:	463b      	mov	r3, r7
 8001cea:	4619      	mov	r1, r3
 8001cec:	4805      	ldr	r0, [pc, #20]	@ (8001d04 <MX_ADC1_Init+0xb4>)
 8001cee:	f001 fbb5 	bl	800345c <HAL_ADC_ConfigChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001cf8:	f000 fd38 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000a48 	.word	0x20000a48
 8001d08:	40012000 	.word	0x40012000
 8001d0c:	0f000001 	.word	0x0f000001

08001d10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b096      	sub	sp, #88	@ 0x58
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d16:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d24:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
 8001d3c:	611a      	str	r2, [r3, #16]
 8001d3e:	615a      	str	r2, [r3, #20]
 8001d40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	2220      	movs	r2, #32
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f005 fd57 	bl	80077fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e48 <MX_TIM1_Init+0x138>)
 8001d50:	4a3e      	ldr	r2, [pc, #248]	@ (8001e4c <MX_TIM1_Init+0x13c>)
 8001d52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001d54:	4b3c      	ldr	r3, [pc, #240]	@ (8001e48 <MX_TIM1_Init+0x138>)
 8001d56:	2253      	movs	r2, #83	@ 0x53
 8001d58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e48 <MX_TIM1_Init+0x138>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001d60:	4b39      	ldr	r3, [pc, #228]	@ (8001e48 <MX_TIM1_Init+0x138>)
 8001d62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d68:	4b37      	ldr	r3, [pc, #220]	@ (8001e48 <MX_TIM1_Init+0x138>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d6e:	4b36      	ldr	r3, [pc, #216]	@ (8001e48 <MX_TIM1_Init+0x138>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d74:	4b34      	ldr	r3, [pc, #208]	@ (8001e48 <MX_TIM1_Init+0x138>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d7a:	4833      	ldr	r0, [pc, #204]	@ (8001e48 <MX_TIM1_Init+0x138>)
 8001d7c:	f002 fdbc 	bl	80048f8 <HAL_TIM_Base_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d86:	f000 fcf1 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d90:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d94:	4619      	mov	r1, r3
 8001d96:	482c      	ldr	r0, [pc, #176]	@ (8001e48 <MX_TIM1_Init+0x138>)
 8001d98:	f003 f91c 	bl	8004fd4 <HAL_TIM_ConfigClockSource>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001da2:	f000 fce3 	bl	800276c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001da6:	4828      	ldr	r0, [pc, #160]	@ (8001e48 <MX_TIM1_Init+0x138>)
 8001da8:	f002 fe58 	bl	8004a5c <HAL_TIM_PWM_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001db2:	f000 fcdb 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dbe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4820      	ldr	r0, [pc, #128]	@ (8001e48 <MX_TIM1_Init+0x138>)
 8001dc6:	f003 fcc7 	bl	8005758 <HAL_TIMEx_MasterConfigSynchronization>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001dd0:	f000 fccc 	bl	800276c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd4:	2360      	movs	r3, #96	@ 0x60
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001de0:	2300      	movs	r3, #0
 8001de2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dec:	2300      	movs	r3, #0
 8001dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001df4:	2200      	movs	r2, #0
 8001df6:	4619      	mov	r1, r3
 8001df8:	4813      	ldr	r0, [pc, #76]	@ (8001e48 <MX_TIM1_Init+0x138>)
 8001dfa:	f003 f829 	bl	8004e50 <HAL_TIM_PWM_ConfigChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001e04:	f000 fcb2 	bl	800276c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4807      	ldr	r0, [pc, #28]	@ (8001e48 <MX_TIM1_Init+0x138>)
 8001e2c:	f003 fd02 	bl	8005834 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001e36:	f000 fc99 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e3a:	4803      	ldr	r0, [pc, #12]	@ (8001e48 <MX_TIM1_Init+0x138>)
 8001e3c:	f000 fd8c 	bl	8002958 <HAL_TIM_MspPostInit>

}
 8001e40:	bf00      	nop
 8001e42:	3758      	adds	r7, #88	@ 0x58
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000a90 	.word	0x20000a90
 8001e4c:	40010000 	.word	0x40010000

08001e50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08e      	sub	sp, #56	@ 0x38
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e64:	f107 0320 	add.w	r3, r7, #32
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
 8001e7c:	615a      	str	r2, [r3, #20]
 8001e7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e80:	4b2d      	ldr	r3, [pc, #180]	@ (8001f38 <MX_TIM2_Init+0xe8>)
 8001e82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001e88:	4b2b      	ldr	r3, [pc, #172]	@ (8001f38 <MX_TIM2_Init+0xe8>)
 8001e8a:	2253      	movs	r2, #83	@ 0x53
 8001e8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f38 <MX_TIM2_Init+0xe8>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001e94:	4b28      	ldr	r3, [pc, #160]	@ (8001f38 <MX_TIM2_Init+0xe8>)
 8001e96:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001e9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9c:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <MX_TIM2_Init+0xe8>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ea2:	4b25      	ldr	r3, [pc, #148]	@ (8001f38 <MX_TIM2_Init+0xe8>)
 8001ea4:	2280      	movs	r2, #128	@ 0x80
 8001ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ea8:	4823      	ldr	r0, [pc, #140]	@ (8001f38 <MX_TIM2_Init+0xe8>)
 8001eaa:	f002 fd25 	bl	80048f8 <HAL_TIM_Base_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001eb4:	f000 fc5a 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ebe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	481c      	ldr	r0, [pc, #112]	@ (8001f38 <MX_TIM2_Init+0xe8>)
 8001ec6:	f003 f885 	bl	8004fd4 <HAL_TIM_ConfigClockSource>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ed0:	f000 fc4c 	bl	800276c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ed4:	4818      	ldr	r0, [pc, #96]	@ (8001f38 <MX_TIM2_Init+0xe8>)
 8001ed6:	f002 fdc1 	bl	8004a5c <HAL_TIM_PWM_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001ee0:	f000 fc44 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eec:	f107 0320 	add.w	r3, r7, #32
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4811      	ldr	r0, [pc, #68]	@ (8001f38 <MX_TIM2_Init+0xe8>)
 8001ef4:	f003 fc30 	bl	8005758 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001efe:	f000 fc35 	bl	800276c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f02:	2360      	movs	r3, #96	@ 0x60
 8001f04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	2200      	movs	r2, #0
 8001f16:	4619      	mov	r1, r3
 8001f18:	4807      	ldr	r0, [pc, #28]	@ (8001f38 <MX_TIM2_Init+0xe8>)
 8001f1a:	f002 ff99 	bl	8004e50 <HAL_TIM_PWM_ConfigChannel>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001f24:	f000 fc22 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f28:	4803      	ldr	r0, [pc, #12]	@ (8001f38 <MX_TIM2_Init+0xe8>)
 8001f2a:	f000 fd15 	bl	8002958 <HAL_TIM_MspPostInit>

}
 8001f2e:	bf00      	nop
 8001f30:	3738      	adds	r7, #56	@ 0x38
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000ad8 	.word	0x20000ad8

08001f3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08e      	sub	sp, #56	@ 0x38
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f50:	f107 0320 	add.w	r3, r7, #32
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
 8001f68:	615a      	str	r2, [r3, #20]
 8001f6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002020 <MX_TIM3_Init+0xe4>)
 8001f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002024 <MX_TIM3_Init+0xe8>)
 8001f70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001f72:	4b2b      	ldr	r3, [pc, #172]	@ (8002020 <MX_TIM3_Init+0xe4>)
 8001f74:	2253      	movs	r2, #83	@ 0x53
 8001f76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f78:	4b29      	ldr	r3, [pc, #164]	@ (8002020 <MX_TIM3_Init+0xe4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001f7e:	4b28      	ldr	r3, [pc, #160]	@ (8002020 <MX_TIM3_Init+0xe4>)
 8001f80:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f86:	4b26      	ldr	r3, [pc, #152]	@ (8002020 <MX_TIM3_Init+0xe4>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f8c:	4b24      	ldr	r3, [pc, #144]	@ (8002020 <MX_TIM3_Init+0xe4>)
 8001f8e:	2280      	movs	r2, #128	@ 0x80
 8001f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f92:	4823      	ldr	r0, [pc, #140]	@ (8002020 <MX_TIM3_Init+0xe4>)
 8001f94:	f002 fcb0 	bl	80048f8 <HAL_TIM_Base_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001f9e:	f000 fbe5 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fa8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fac:	4619      	mov	r1, r3
 8001fae:	481c      	ldr	r0, [pc, #112]	@ (8002020 <MX_TIM3_Init+0xe4>)
 8001fb0:	f003 f810 	bl	8004fd4 <HAL_TIM_ConfigClockSource>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001fba:	f000 fbd7 	bl	800276c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fbe:	4818      	ldr	r0, [pc, #96]	@ (8002020 <MX_TIM3_Init+0xe4>)
 8001fc0:	f002 fd4c 	bl	8004a5c <HAL_TIM_PWM_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001fca:	f000 fbcf 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fd6:	f107 0320 	add.w	r3, r7, #32
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4810      	ldr	r0, [pc, #64]	@ (8002020 <MX_TIM3_Init+0xe4>)
 8001fde:	f003 fbbb 	bl	8005758 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001fe8:	f000 fbc0 	bl	800276c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fec:	2360      	movs	r3, #96	@ 0x60
 8001fee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	2200      	movs	r2, #0
 8002000:	4619      	mov	r1, r3
 8002002:	4807      	ldr	r0, [pc, #28]	@ (8002020 <MX_TIM3_Init+0xe4>)
 8002004:	f002 ff24 	bl	8004e50 <HAL_TIM_PWM_ConfigChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800200e:	f000 fbad 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002012:	4803      	ldr	r0, [pc, #12]	@ (8002020 <MX_TIM3_Init+0xe4>)
 8002014:	f000 fca0 	bl	8002958 <HAL_TIM_MspPostInit>

}
 8002018:	bf00      	nop
 800201a:	3738      	adds	r7, #56	@ 0x38
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000b20 	.word	0x20000b20
 8002024:	40000400 	.word	0x40000400

08002028 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08e      	sub	sp, #56	@ 0x38
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800202e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800203c:	f107 0320 	add.w	r3, r7, #32
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
 8002054:	615a      	str	r2, [r3, #20]
 8002056:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002058:	4b2d      	ldr	r3, [pc, #180]	@ (8002110 <MX_TIM4_Init+0xe8>)
 800205a:	4a2e      	ldr	r2, [pc, #184]	@ (8002114 <MX_TIM4_Init+0xec>)
 800205c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 800205e:	4b2c      	ldr	r3, [pc, #176]	@ (8002110 <MX_TIM4_Init+0xe8>)
 8002060:	2253      	movs	r2, #83	@ 0x53
 8002062:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002064:	4b2a      	ldr	r3, [pc, #168]	@ (8002110 <MX_TIM4_Init+0xe8>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800206a:	4b29      	ldr	r3, [pc, #164]	@ (8002110 <MX_TIM4_Init+0xe8>)
 800206c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002070:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002072:	4b27      	ldr	r3, [pc, #156]	@ (8002110 <MX_TIM4_Init+0xe8>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002078:	4b25      	ldr	r3, [pc, #148]	@ (8002110 <MX_TIM4_Init+0xe8>)
 800207a:	2280      	movs	r2, #128	@ 0x80
 800207c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800207e:	4824      	ldr	r0, [pc, #144]	@ (8002110 <MX_TIM4_Init+0xe8>)
 8002080:	f002 fc3a 	bl	80048f8 <HAL_TIM_Base_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800208a:	f000 fb6f 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800208e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002092:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002094:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002098:	4619      	mov	r1, r3
 800209a:	481d      	ldr	r0, [pc, #116]	@ (8002110 <MX_TIM4_Init+0xe8>)
 800209c:	f002 ff9a 	bl	8004fd4 <HAL_TIM_ConfigClockSource>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80020a6:	f000 fb61 	bl	800276c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80020aa:	4819      	ldr	r0, [pc, #100]	@ (8002110 <MX_TIM4_Init+0xe8>)
 80020ac:	f002 fcd6 	bl	8004a5c <HAL_TIM_PWM_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80020b6:	f000 fb59 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020c2:	f107 0320 	add.w	r3, r7, #32
 80020c6:	4619      	mov	r1, r3
 80020c8:	4811      	ldr	r0, [pc, #68]	@ (8002110 <MX_TIM4_Init+0xe8>)
 80020ca:	f003 fb45 	bl	8005758 <HAL_TIMEx_MasterConfigSynchronization>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80020d4:	f000 fb4a 	bl	800276c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d8:	2360      	movs	r3, #96	@ 0x60
 80020da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80020dc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80020e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	2200      	movs	r2, #0
 80020ee:	4619      	mov	r1, r3
 80020f0:	4807      	ldr	r0, [pc, #28]	@ (8002110 <MX_TIM4_Init+0xe8>)
 80020f2:	f002 fead 	bl	8004e50 <HAL_TIM_PWM_ConfigChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80020fc:	f000 fb36 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002100:	4803      	ldr	r0, [pc, #12]	@ (8002110 <MX_TIM4_Init+0xe8>)
 8002102:	f000 fc29 	bl	8002958 <HAL_TIM_MspPostInit>

}
 8002106:	bf00      	nop
 8002108:	3738      	adds	r7, #56	@ 0x38
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000b68 	.word	0x20000b68
 8002114:	40000800 	.word	0x40000800

08002118 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800211c:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <MX_USART2_UART_Init+0x4c>)
 800211e:	4a12      	ldr	r2, [pc, #72]	@ (8002168 <MX_USART2_UART_Init+0x50>)
 8002120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002122:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <MX_USART2_UART_Init+0x4c>)
 8002124:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <MX_USART2_UART_Init+0x4c>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002130:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <MX_USART2_UART_Init+0x4c>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002136:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <MX_USART2_UART_Init+0x4c>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <MX_USART2_UART_Init+0x4c>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b08      	ldr	r3, [pc, #32]	@ (8002164 <MX_USART2_UART_Init+0x4c>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <MX_USART2_UART_Init+0x4c>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800214e:	4805      	ldr	r0, [pc, #20]	@ (8002164 <MX_USART2_UART_Init+0x4c>)
 8002150:	f003 fbd6 	bl	8005900 <HAL_UART_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800215a:	f000 fb07 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000bb0 	.word	0x20000bb0
 8002168:	40004400 	.word	0x40004400

0800216c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002170:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <MX_USART6_UART_Init+0x4c>)
 8002172:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <MX_USART6_UART_Init+0x50>)
 8002174:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8002176:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <MX_USART6_UART_Init+0x4c>)
 8002178:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800217c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800217e:	4b0e      	ldr	r3, [pc, #56]	@ (80021b8 <MX_USART6_UART_Init+0x4c>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002184:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <MX_USART6_UART_Init+0x4c>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800218a:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <MX_USART6_UART_Init+0x4c>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002190:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <MX_USART6_UART_Init+0x4c>)
 8002192:	220c      	movs	r2, #12
 8002194:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002196:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <MX_USART6_UART_Init+0x4c>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800219c:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <MX_USART6_UART_Init+0x4c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80021a2:	4805      	ldr	r0, [pc, #20]	@ (80021b8 <MX_USART6_UART_Init+0x4c>)
 80021a4:	f003 fbac 	bl	8005900 <HAL_UART_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80021ae:	f000 fadd 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000bf8 	.word	0x20000bf8
 80021bc:	40011400 	.word	0x40011400

080021c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	@ 0x28
 80021c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
 80021d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	4b46      	ldr	r3, [pc, #280]	@ (80022f4 <MX_GPIO_Init+0x134>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	4a45      	ldr	r2, [pc, #276]	@ (80022f4 <MX_GPIO_Init+0x134>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e6:	4b43      	ldr	r3, [pc, #268]	@ (80022f4 <MX_GPIO_Init+0x134>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b3f      	ldr	r3, [pc, #252]	@ (80022f4 <MX_GPIO_Init+0x134>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	4a3e      	ldr	r2, [pc, #248]	@ (80022f4 <MX_GPIO_Init+0x134>)
 80021fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002200:	6313      	str	r3, [r2, #48]	@ 0x30
 8002202:	4b3c      	ldr	r3, [pc, #240]	@ (80022f4 <MX_GPIO_Init+0x134>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	4b38      	ldr	r3, [pc, #224]	@ (80022f4 <MX_GPIO_Init+0x134>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	4a37      	ldr	r2, [pc, #220]	@ (80022f4 <MX_GPIO_Init+0x134>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6313      	str	r3, [r2, #48]	@ 0x30
 800221e:	4b35      	ldr	r3, [pc, #212]	@ (80022f4 <MX_GPIO_Init+0x134>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	4b31      	ldr	r3, [pc, #196]	@ (80022f4 <MX_GPIO_Init+0x134>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	4a30      	ldr	r2, [pc, #192]	@ (80022f4 <MX_GPIO_Init+0x134>)
 8002234:	f043 0302 	orr.w	r3, r3, #2
 8002238:	6313      	str	r3, [r2, #48]	@ 0x30
 800223a:	4b2e      	ldr	r3, [pc, #184]	@ (80022f4 <MX_GPIO_Init+0x134>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002246:	2200      	movs	r2, #0
 8002248:	2120      	movs	r1, #32
 800224a:	482b      	ldr	r0, [pc, #172]	@ (80022f8 <MX_GPIO_Init+0x138>)
 800224c:	f001 fe7e 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8002250:	2200      	movs	r2, #0
 8002252:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002256:	4829      	ldr	r0, [pc, #164]	@ (80022fc <MX_GPIO_Init+0x13c>)
 8002258:	f001 fe78 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800225c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002262:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	4619      	mov	r1, r3
 8002272:	4822      	ldr	r0, [pc, #136]	@ (80022fc <MX_GPIO_Init+0x13c>)
 8002274:	f001 fcce 	bl	8003c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0_EXTI0_BUTTON_Pin */
  GPIO_InitStruct.Pin = PC0_EXTI0_BUTTON_Pin;
 8002278:	2301      	movs	r3, #1
 800227a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800227c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PC0_EXTI0_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	481b      	ldr	r0, [pc, #108]	@ (80022fc <MX_GPIO_Init+0x13c>)
 800228e:	f001 fcc1 	bl	8003c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002292:	2320      	movs	r3, #32
 8002294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002296:	2301      	movs	r3, #1
 8002298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	4619      	mov	r1, r3
 80022a8:	4813      	ldr	r0, [pc, #76]	@ (80022f8 <MX_GPIO_Init+0x138>)
 80022aa:	f001 fcb3 	bl	8003c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80022ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b4:	2301      	movs	r3, #1
 80022b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4619      	mov	r1, r3
 80022c6:	480d      	ldr	r0, [pc, #52]	@ (80022fc <MX_GPIO_Init+0x13c>)
 80022c8:	f001 fca4 	bl	8003c14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2100      	movs	r1, #0
 80022d0:	2006      	movs	r0, #6
 80022d2:	f001 fbd6 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80022d6:	2006      	movs	r0, #6
 80022d8:	f001 fbef 	bl	8003aba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022dc:	2200      	movs	r2, #0
 80022de:	2100      	movs	r1, #0
 80022e0:	2028      	movs	r0, #40	@ 0x28
 80022e2:	f001 fbce 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022e6:	2028      	movs	r0, #40	@ 0x28
 80022e8:	f001 fbe7 	bl	8003aba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80022ec:	bf00      	nop
 80022ee:	3728      	adds	r7, #40	@ 0x28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40020000 	.word	0x40020000
 80022fc:	40020800 	.word	0x40020800

08002300 <esp_event>:
void MX_GPIO_LED_OFF(int pin)
{
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
}
void esp_event(char * recvBuf)
{
 8002300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002302:	b0af      	sub	sp, #188	@ 0xbc
 8002304:	af06      	add	r7, sp, #24
 8002306:	6078      	str	r0, [r7, #4]
  int i=0;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  char * pToken;
  char * pArray[ARR_CNT]={0};
 800230e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002312:	2250      	movs	r2, #80	@ 0x50
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f005 fa70 	bl	80077fc <memset>
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 800231c:	f107 0308 	add.w	r3, r7, #8
 8002320:	2240      	movs	r2, #64	@ 0x40
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f005 fa69 	bl	80077fc <memset>

  strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fd ffb8 	bl	80002a0 <strlen>
 8002330:	4603      	mov	r3, r0
 8002332:	3b01      	subs	r3, #1
 8002334:	4a97      	ldr	r2, [pc, #604]	@ (8002594 <esp_event+0x294>)
 8002336:	2100      	movs	r1, #0
 8002338:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4896      	ldr	r0, [pc, #600]	@ (8002598 <esp_event+0x298>)
 800233e:	f005 f8eb 	bl	8007518 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 8002342:	4996      	ldr	r1, [pc, #600]	@ (800259c <esp_event+0x29c>)
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f005 fa81 	bl	800784c <strtok>
 800234a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
  while(pToken != NULL)
 800234e:	e017      	b.n	8002380 <esp_event+0x80>
  {
    pArray[i] = pToken;
 8002350:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	33a0      	adds	r3, #160	@ 0xa0
 8002358:	443b      	add	r3, r7
 800235a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800235e:	f843 2c58 	str.w	r2, [r3, #-88]
    if(++i >= ARR_CNT)
 8002362:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002366:	3301      	adds	r3, #1
 8002368:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800236c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002370:	2b13      	cmp	r3, #19
 8002372:	dc0a      	bgt.n	800238a <esp_event+0x8a>
      break;
    pToken = strtok(NULL,"[@]");
 8002374:	4989      	ldr	r1, [pc, #548]	@ (800259c <esp_event+0x29c>)
 8002376:	2000      	movs	r0, #0
 8002378:	f005 fa68 	bl	800784c <strtok>
 800237c:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
  while(pToken != NULL)
 8002380:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1e3      	bne.n	8002350 <esp_event+0x50>
 8002388:	e000      	b.n	800238c <esp_event+0x8c>
      break;
 800238a:	bf00      	nop
  }

  if(!strcmp(pArray[1], "ALLSTOP"))
 800238c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800238e:	4984      	ldr	r1, [pc, #528]	@ (80025a0 <esp_event+0x2a0>)
 8002390:	4618      	mov	r0, r3
 8002392:	f7fd ff25 	bl	80001e0 <strcmp>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10e      	bne.n	80023ba <esp_event+0xba>
  {
	  if(!strcmp(pArray[2], "ON"))
 800239c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800239e:	4981      	ldr	r1, [pc, #516]	@ (80025a4 <esp_event+0x2a4>)
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fd ff1d 	bl	80001e0 <strcmp>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80e6 	beq.w	800257a <esp_event+0x27a>
	  {
		  //모든 장치 정지 명령 내리기(모든 플래그 True로)
	  }
	  else if(!strcmp(pArray[2], "OFF"))
 80023ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023b0:	497d      	ldr	r1, [pc, #500]	@ (80025a8 <esp_event+0x2a8>)
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fd ff14 	bl	80001e0 <strcmp>
 80023b8:	e0df      	b.n	800257a <esp_event+0x27a>
	  {
		  //모든 장치 정지 명령 취소(모든 플래그 false로)
	  }
  }
  else if(!strcmp(pArray[1], "STATE"))
 80023ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023bc:	497b      	ldr	r1, [pc, #492]	@ (80025ac <esp_event+0x2ac>)
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fd ff0e 	bl	80001e0 <strcmp>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d11d      	bne.n	8002406 <esp_event+0x106>
  {
	  //현재 매장의 상태 전송하기
	 sprintf(sendBuf, "[%s]%s@%s@%d@%d@%d@%d@%d\n", pArray[0], pArray[1], temp, humi, ledState, lockState, customerCount, fanSpeed);
 80023ca:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 80023cc:	6cfe      	ldr	r6, [r7, #76]	@ 0x4c
 80023ce:	4b78      	ldr	r3, [pc, #480]	@ (80025b0 <esp_event+0x2b0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a78      	ldr	r2, [pc, #480]	@ (80025b4 <esp_event+0x2b4>)
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	4978      	ldr	r1, [pc, #480]	@ (80025b8 <esp_event+0x2b8>)
 80023d8:	7809      	ldrb	r1, [r1, #0]
 80023da:	6039      	str	r1, [r7, #0]
 80023dc:	4977      	ldr	r1, [pc, #476]	@ (80025bc <esp_event+0x2bc>)
 80023de:	6809      	ldr	r1, [r1, #0]
 80023e0:	4877      	ldr	r0, [pc, #476]	@ (80025c0 <esp_event+0x2c0>)
 80023e2:	6800      	ldr	r0, [r0, #0]
 80023e4:	f107 0408 	add.w	r4, r7, #8
 80023e8:	9005      	str	r0, [sp, #20]
 80023ea:	9104      	str	r1, [sp, #16]
 80023ec:	6839      	ldr	r1, [r7, #0]
 80023ee:	9103      	str	r1, [sp, #12]
 80023f0:	9202      	str	r2, [sp, #8]
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	4b73      	ldr	r3, [pc, #460]	@ (80025c4 <esp_event+0x2c4>)
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	4633      	mov	r3, r6
 80023fa:	462a      	mov	r2, r5
 80023fc:	4972      	ldr	r1, [pc, #456]	@ (80025c8 <esp_event+0x2c8>)
 80023fe:	4620      	mov	r0, r4
 8002400:	f005 f902 	bl	8007608 <siprintf>
 8002404:	e0b9      	b.n	800257a <esp_event+0x27a>
  }
  else if(!strcmp(pArray[1], "FAN"))	//팬 회전수 0~1000
 8002406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002408:	4970      	ldr	r1, [pc, #448]	@ (80025cc <esp_event+0x2cc>)
 800240a:	4618      	mov	r0, r3
 800240c:	f7fd fee8 	bl	80001e0 <strcmp>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d117      	bne.n	8002446 <esp_event+0x146>
  {
	  fanSpeed = atoi(pArray[2]);
 8002416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002418:	4618      	mov	r0, r3
 800241a:	f004 fadd 	bl	80069d8 <atoi>
 800241e:	4603      	mov	r3, r0
 8002420:	4a67      	ldr	r2, [pc, #412]	@ (80025c0 <esp_event+0x2c0>)
 8002422:	6013      	str	r3, [r2, #0]
	  fanControl(fanSpeed);
 8002424:	4b66      	ldr	r3, [pc, #408]	@ (80025c0 <esp_event+0x2c0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f925 	bl	8002678 <fanControl>
	  sprintf(sendBuf, "[%s]%s@%d\n", pArray[0], pArray[1], fanSpeed);
 800242e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002430:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002432:	4b63      	ldr	r3, [pc, #396]	@ (80025c0 <esp_event+0x2c0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f107 0008 	add.w	r0, r7, #8
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	460b      	mov	r3, r1
 800243e:	4964      	ldr	r1, [pc, #400]	@ (80025d0 <esp_event+0x2d0>)
 8002440:	f005 f8e2 	bl	8007608 <siprintf>
 8002444:	e099      	b.n	800257a <esp_event+0x27a>
  }
  else if(!strcmp(pArray[1], "DHTSTATE"))	//온습도 보내기
 8002446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002448:	4962      	ldr	r1, [pc, #392]	@ (80025d4 <esp_event+0x2d4>)
 800244a:	4618      	mov	r0, r3
 800244c:	f7fd fec8 	bl	80001e0 <strcmp>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10d      	bne.n	8002472 <esp_event+0x172>
  {
	  sprintf(sendBuf, "[%s]%s@%s@%d\n", pArray[0], pArray[1], temp, humi);
 8002456:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002458:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800245a:	4b55      	ldr	r3, [pc, #340]	@ (80025b0 <esp_event+0x2b0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f107 0008 	add.w	r0, r7, #8
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	4b57      	ldr	r3, [pc, #348]	@ (80025c4 <esp_event+0x2c4>)
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	460b      	mov	r3, r1
 800246a:	495b      	ldr	r1, [pc, #364]	@ (80025d8 <esp_event+0x2d8>)
 800246c:	f005 f8cc 	bl	8007608 <siprintf>
 8002470:	e083      	b.n	800257a <esp_event+0x27a>
  }
  else if(!strcmp(pArray[1], "LED"))	//[매장명]LED@pArray[2]or[State]@
 8002472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002474:	4959      	ldr	r1, [pc, #356]	@ (80025dc <esp_event+0x2dc>)
 8002476:	4618      	mov	r0, r3
 8002478:	f7fd feb2 	bl	80001e0 <strcmp>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d12e      	bne.n	80024e0 <esp_event+0x1e0>
  {
	  if(!strcmp(pArray[2], "STATE"))
 8002482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002484:	4949      	ldr	r1, [pc, #292]	@ (80025ac <esp_event+0x2ac>)
 8002486:	4618      	mov	r0, r3
 8002488:	f7fd feaa 	bl	80001e0 <strcmp>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10e      	bne.n	80024b0 <esp_event+0x1b0>
	  {
		  sprintf(sendBuf, "[%s]%s@%s@%d\n", pArray[0], pArray[1], pArray[2], ledState);
 8002492:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002494:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8002496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002498:	4a46      	ldr	r2, [pc, #280]	@ (80025b4 <esp_event+0x2b4>)
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	f107 0008 	add.w	r0, r7, #8
 80024a0:	9201      	str	r2, [sp, #4]
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	4623      	mov	r3, r4
 80024a6:	460a      	mov	r2, r1
 80024a8:	494b      	ldr	r1, [pc, #300]	@ (80025d8 <esp_event+0x2d8>)
 80024aa:	f005 f8ad 	bl	8007608 <siprintf>
 80024ae:	e064      	b.n	800257a <esp_event+0x27a>
	  }
	  else
	  {
		  ledControl(atoi(pArray[2]));
 80024b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024b2:	4618      	mov	r0, r3
 80024b4:	f004 fa90 	bl	80069d8 <atoi>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f8f6 	bl	80026ac <ledControl>
		  sprintf(sendBuf, "[%s]%s@%d\n", pArray[0], pArray[1], atoi(pArray[2]));
 80024c0:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 80024c2:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 80024c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 fa86 	bl	80069d8 <atoi>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f107 0008 	add.w	r0, r7, #8
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	462b      	mov	r3, r5
 80024d6:	4622      	mov	r2, r4
 80024d8:	493d      	ldr	r1, [pc, #244]	@ (80025d0 <esp_event+0x2d0>)
 80024da:	f005 f895 	bl	8007608 <siprintf>
 80024de:	e04c      	b.n	800257a <esp_event+0x27a>
	  }
  }
  else if (!strcmp(pArray[1], "SERVO"))
 80024e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024e2:	493f      	ldr	r1, [pc, #252]	@ (80025e0 <esp_event+0x2e0>)
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fd fe7b 	bl	80001e0 <strcmp>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d12f      	bne.n	8002550 <esp_event+0x250>
  {
	  if (!strcmp(pArray[2], "ON"))
 80024f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024f2:	492c      	ldr	r1, [pc, #176]	@ (80025a4 <esp_event+0x2a4>)
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fd fe73 	bl	80001e0 <strcmp>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10f      	bne.n	8002520 <esp_event+0x220>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1700);
 8002500:	4b38      	ldr	r3, [pc, #224]	@ (80025e4 <esp_event+0x2e4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8002508:	635a      	str	r2, [r3, #52]	@ 0x34
		  sprintf(sendBuf, "[%s]%s@%s\n", pArray[0], pArray[1], pArray[2]);
 800250a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800250c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800250e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002510:	f107 0008 	add.w	r0, r7, #8
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	460b      	mov	r3, r1
 8002518:	4933      	ldr	r1, [pc, #204]	@ (80025e8 <esp_event+0x2e8>)
 800251a:	f005 f875 	bl	8007608 <siprintf>
 800251e:	e02c      	b.n	800257a <esp_event+0x27a>
	  }
	  else if(!strcmp(pArray[2], "OFF"))
 8002520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002522:	4921      	ldr	r1, [pc, #132]	@ (80025a8 <esp_event+0x2a8>)
 8002524:	4618      	mov	r0, r3
 8002526:	f7fd fe5b 	bl	80001e0 <strcmp>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d124      	bne.n	800257a <esp_event+0x27a>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
 8002530:	4b2c      	ldr	r3, [pc, #176]	@ (80025e4 <esp_event+0x2e4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002538:	635a      	str	r2, [r3, #52]	@ 0x34
		  sprintf(sendBuf, "[%s]%s@%s\n", pArray[0], pArray[1], pArray[2]);
 800253a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800253c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800253e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002540:	f107 0008 	add.w	r0, r7, #8
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	460b      	mov	r3, r1
 8002548:	4927      	ldr	r1, [pc, #156]	@ (80025e8 <esp_event+0x2e8>)
 800254a:	f005 f85d 	bl	8007608 <siprintf>
 800254e:	e014      	b.n	800257a <esp_event+0x27a>
	  }
  }
  else if(!strncmp(pArray[1]," New conn",8))
 8002550:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002552:	2208      	movs	r2, #8
 8002554:	4925      	ldr	r1, [pc, #148]	@ (80025ec <esp_event+0x2ec>)
 8002556:	4618      	mov	r0, r3
 8002558:	f005 f965 	bl	8007826 <strncmp>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d011      	beq.n	8002586 <esp_event+0x286>
  {
//	   printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
     return;
  }
  else if(!strncmp(pArray[1]," Already log",8))
 8002562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002564:	2208      	movs	r2, #8
 8002566:	4922      	ldr	r1, [pc, #136]	@ (80025f0 <esp_event+0x2f0>)
 8002568:	4618      	mov	r0, r3
 800256a:	f005 f95c 	bl	8007826 <strncmp>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10a      	bne.n	800258a <esp_event+0x28a>
  {
// 	    printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
	  esp_client_conn();
 8002574:	f7fe ff9c 	bl	80014b0 <esp_client_conn>
      return;
 8002578:	e008      	b.n	800258c <esp_event+0x28c>
  }
  else
      return;

  esp_send_data(sendBuf);
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff f8be 	bl	8001700 <esp_send_data>
 8002584:	e002      	b.n	800258c <esp_event+0x28c>
     return;
 8002586:	bf00      	nop
 8002588:	e000      	b.n	800258c <esp_event+0x28c>
      return;
 800258a:	bf00      	nop
//  printf("Debug send : %s\r\n",sendBuf);
}
 800258c:	37a4      	adds	r7, #164	@ 0xa4
 800258e:	46bd      	mov	sp, r7
 8002590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002592:	bf00      	nop
 8002594:	20000c7c 	.word	0x20000c7c
 8002598:	0800abb8 	.word	0x0800abb8
 800259c:	0800abcc 	.word	0x0800abcc
 80025a0:	0800abd0 	.word	0x0800abd0
 80025a4:	0800abd8 	.word	0x0800abd8
 80025a8:	0800abdc 	.word	0x0800abdc
 80025ac:	0800abe0 	.word	0x0800abe0
 80025b0:	20000c44 	.word	0x20000c44
 80025b4:	20000c58 	.word	0x20000c58
 80025b8:	20000c60 	.word	0x20000c60
 80025bc:	20000c54 	.word	0x20000c54
 80025c0:	20000c5c 	.word	0x20000c5c
 80025c4:	20000c48 	.word	0x20000c48
 80025c8:	0800abe8 	.word	0x0800abe8
 80025cc:	0800ac04 	.word	0x0800ac04
 80025d0:	0800ac08 	.word	0x0800ac08
 80025d4:	0800ac14 	.word	0x0800ac14
 80025d8:	0800ac20 	.word	0x0800ac20
 80025dc:	0800ac30 	.word	0x0800ac30
 80025e0:	0800ac34 	.word	0x0800ac34
 80025e4:	20000ad8 	.word	0x20000ad8
 80025e8:	0800ac3c 	.word	0x0800ac3c
 80025ec:	0800ac48 	.word	0x0800ac48
 80025f0:	0800ac54 	.word	0x0800ac54

080025f4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		//1ms 마다 호출
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 80025fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002634 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	4a0c      	ldr	r2, [pc, #48]	@ (8002634 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002604:	6013      	str	r3, [r2, #0]
	if(tim3Cnt >= 1000) //1ms * 1000 = 1Sec
 8002606:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800260e:	db0a      	blt.n	8002626 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 8002610:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 8002616:	4b09      	ldr	r3, [pc, #36]	@ (800263c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	3301      	adds	r3, #1
 800261c:	4a07      	ldr	r2, [pc, #28]	@ (800263c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800261e:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 8002620:	4b04      	ldr	r3, [pc, #16]	@ (8002634 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
	}
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20000cbc 	.word	0x20000cbc
 8002638:	20000000 	.word	0x20000000
 800263c:	20000c40 	.word	0x20000c40

08002640 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	69b9      	ldr	r1, [r7, #24]
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	1a8a      	subs	r2, r1, r2
 800265a:	fb03 f202 	mul.w	r2, r3, r2
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	1acb      	subs	r3, r1, r3
 8002664:	fb92 f2f3 	sdiv	r2, r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4413      	add	r3, r2
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <fanControl>:

void fanControl(int fanSpeed)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	if (!fanFlag)	//플래그들은 0일 때만 동작을 의미함.
 8002680:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <fanControl+0x2c>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	f083 0301 	eor.w	r3, r3, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <fanControl+0x1e>
	{
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1, fanSpeed);
 800268e:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <fanControl+0x30>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000c61 	.word	0x20000c61
 80026a8:	20000b68 	.word	0x20000b68

080026ac <ledControl>:

void ledControl(int bright)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	6078      	str	r0, [r7, #4]
	ledState = bright;	//전역변수에 저장
 80026b4:	4a0a      	ldr	r2, [pc, #40]	@ (80026e0 <ledControl+0x34>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6013      	str	r3, [r2, #0]
	int realLedState = map(bright, 0, 100, 0, 1000);	//써지는 실제값
 80026ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	2300      	movs	r3, #0
 80026c2:	2264      	movs	r2, #100	@ 0x64
 80026c4:	2100      	movs	r1, #0
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff ffba 	bl	8002640 <map>
 80026cc:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1, realLedState);
 80026ce:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <ledControl+0x38>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000c58 	.word	0x20000c58
 80026e4:	20000a90 	.word	0x20000a90

080026e8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
//	printf("check");
	static int channel = 0;
	if (channel == 0)
 80026f0:	4b1a      	ldr	r3, [pc, #104]	@ (800275c <HAL_ADC_ConvCpltCallback+0x74>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10d      	bne.n	8002714 <HAL_ADC_ConvCpltCallback+0x2c>
	{
		ADC1ConvertValue[channel] = HAL_ADC_GetValue(hadc);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 fe8d 	bl	8003418 <HAL_ADC_GetValue>
 80026fe:	4602      	mov	r2, r0
 8002700:	4b16      	ldr	r3, [pc, #88]	@ (800275c <HAL_ADC_ConvCpltCallback+0x74>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	b291      	uxth	r1, r2
 8002706:	4a16      	ldr	r2, [pc, #88]	@ (8002760 <HAL_ADC_ConvCpltCallback+0x78>)
 8002708:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		channel = 1;
 800270c:	4b13      	ldr	r3, [pc, #76]	@ (800275c <HAL_ADC_ConvCpltCallback+0x74>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	e013      	b.n	800273c <HAL_ADC_ConvCpltCallback+0x54>
	}
	else if(channel == 1)
 8002714:	4b11      	ldr	r3, [pc, #68]	@ (800275c <HAL_ADC_ConvCpltCallback+0x74>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d10f      	bne.n	800273c <HAL_ADC_ConvCpltCallback+0x54>
	{
		ADC1ConvertValue[channel]= HAL_ADC_GetValue(hadc);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fe7b 	bl	8003418 <HAL_ADC_GetValue>
 8002722:	4602      	mov	r2, r0
 8002724:	4b0d      	ldr	r3, [pc, #52]	@ (800275c <HAL_ADC_ConvCpltCallback+0x74>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	b291      	uxth	r1, r2
 800272a:	4a0d      	ldr	r2, [pc, #52]	@ (8002760 <HAL_ADC_ConvCpltCallback+0x78>)
 800272c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		channel = 0;
 8002730:	4b0a      	ldr	r3, [pc, #40]	@ (800275c <HAL_ADC_ConvCpltCallback+0x74>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
		adcFlag = 1;
 8002736:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <HAL_ADC_ConvCpltCallback+0x7c>)
 8002738:	2201      	movs	r2, #1
 800273a:	601a      	str	r2, [r3, #0]
	}
	printf("ch1 : %d , ch2 : %d\r\n", ADC1ConvertValue[0], ADC1ConvertValue[1]);
 800273c:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <HAL_ADC_ConvCpltCallback+0x78>)
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	4619      	mov	r1, r3
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_ADC_ConvCpltCallback+0x78>)
 8002746:	885b      	ldrh	r3, [r3, #2]
 8002748:	b29b      	uxth	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	4806      	ldr	r0, [pc, #24]	@ (8002768 <HAL_ADC_ConvCpltCallback+0x80>)
 800274e:	f004 fee3 	bl	8007518 <iprintf>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000cc0 	.word	0x20000cc0
 8002760:	20000c64 	.word	0x20000c64
 8002764:	20000c68 	.word	0x20000c68
 8002768:	0800ac64 	.word	0x0800ac64

0800276c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002770:	b672      	cpsid	i
}
 8002772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("error\r\n");
 8002774:	4801      	ldr	r0, [pc, #4]	@ (800277c <Error_Handler+0x10>)
 8002776:	f004 ff3f 	bl	80075f8 <puts>
 800277a:	e7fb      	b.n	8002774 <Error_Handler+0x8>
 800277c:	0800ac7c 	.word	0x0800ac7c

08002780 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <HAL_MspInit+0x4c>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278e:	4a0f      	ldr	r2, [pc, #60]	@ (80027cc <HAL_MspInit+0x4c>)
 8002790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002794:	6453      	str	r3, [r2, #68]	@ 0x44
 8002796:	4b0d      	ldr	r3, [pc, #52]	@ (80027cc <HAL_MspInit+0x4c>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <HAL_MspInit+0x4c>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	4a08      	ldr	r2, [pc, #32]	@ (80027cc <HAL_MspInit+0x4c>)
 80027ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027b2:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <HAL_MspInit+0x4c>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80027be:	2007      	movs	r0, #7
 80027c0:	f001 f954 	bl	8003a6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40023800 	.word	0x40023800

080027d0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	@ 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1b      	ldr	r2, [pc, #108]	@ (800285c <HAL_ADC_MspInit+0x8c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d12f      	bne.n	8002852 <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002860 <HAL_ADC_MspInit+0x90>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fa:	4a19      	ldr	r2, [pc, #100]	@ (8002860 <HAL_ADC_MspInit+0x90>)
 80027fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002800:	6453      	str	r3, [r2, #68]	@ 0x44
 8002802:	4b17      	ldr	r3, [pc, #92]	@ (8002860 <HAL_ADC_MspInit+0x90>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	4b13      	ldr	r3, [pc, #76]	@ (8002860 <HAL_ADC_MspInit+0x90>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	4a12      	ldr	r2, [pc, #72]	@ (8002860 <HAL_ADC_MspInit+0x90>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6313      	str	r3, [r2, #48]	@ 0x30
 800281e:	4b10      	ldr	r3, [pc, #64]	@ (8002860 <HAL_ADC_MspInit+0x90>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800282a:	2303      	movs	r3, #3
 800282c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800282e:	2303      	movs	r3, #3
 8002830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002836:	f107 0314 	add.w	r3, r7, #20
 800283a:	4619      	mov	r1, r3
 800283c:	4809      	ldr	r0, [pc, #36]	@ (8002864 <HAL_ADC_MspInit+0x94>)
 800283e:	f001 f9e9 	bl	8003c14 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2100      	movs	r1, #0
 8002846:	2012      	movs	r0, #18
 8002848:	f001 f91b 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800284c:	2012      	movs	r0, #18
 800284e:	f001 f934 	bl	8003aba <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002852:	bf00      	nop
 8002854:	3728      	adds	r7, #40	@ 0x28
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40012000 	.word	0x40012000
 8002860:	40023800 	.word	0x40023800
 8002864:	40020000 	.word	0x40020000

08002868 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a34      	ldr	r2, [pc, #208]	@ (8002948 <HAL_TIM_Base_MspInit+0xe0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d10e      	bne.n	8002898 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	4b33      	ldr	r3, [pc, #204]	@ (800294c <HAL_TIM_Base_MspInit+0xe4>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002882:	4a32      	ldr	r2, [pc, #200]	@ (800294c <HAL_TIM_Base_MspInit+0xe4>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6453      	str	r3, [r2, #68]	@ 0x44
 800288a:	4b30      	ldr	r3, [pc, #192]	@ (800294c <HAL_TIM_Base_MspInit+0xe4>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002896:	e052      	b.n	800293e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a0:	d116      	bne.n	80028d0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	4b29      	ldr	r3, [pc, #164]	@ (800294c <HAL_TIM_Base_MspInit+0xe4>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	4a28      	ldr	r2, [pc, #160]	@ (800294c <HAL_TIM_Base_MspInit+0xe4>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028b2:	4b26      	ldr	r3, [pc, #152]	@ (800294c <HAL_TIM_Base_MspInit+0xe4>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	201c      	movs	r0, #28
 80028c4:	f001 f8dd 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028c8:	201c      	movs	r0, #28
 80028ca:	f001 f8f6 	bl	8003aba <HAL_NVIC_EnableIRQ>
}
 80028ce:	e036      	b.n	800293e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002950 <HAL_TIM_Base_MspInit+0xe8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d116      	bne.n	8002908 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	4b1b      	ldr	r3, [pc, #108]	@ (800294c <HAL_TIM_Base_MspInit+0xe4>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	4a1a      	ldr	r2, [pc, #104]	@ (800294c <HAL_TIM_Base_MspInit+0xe4>)
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ea:	4b18      	ldr	r3, [pc, #96]	@ (800294c <HAL_TIM_Base_MspInit+0xe4>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	201d      	movs	r0, #29
 80028fc:	f001 f8c1 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002900:	201d      	movs	r0, #29
 8002902:	f001 f8da 	bl	8003aba <HAL_NVIC_EnableIRQ>
}
 8002906:	e01a      	b.n	800293e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a11      	ldr	r2, [pc, #68]	@ (8002954 <HAL_TIM_Base_MspInit+0xec>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d115      	bne.n	800293e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	4b0d      	ldr	r3, [pc, #52]	@ (800294c <HAL_TIM_Base_MspInit+0xe4>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	4a0c      	ldr	r2, [pc, #48]	@ (800294c <HAL_TIM_Base_MspInit+0xe4>)
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	6413      	str	r3, [r2, #64]	@ 0x40
 8002922:	4b0a      	ldr	r3, [pc, #40]	@ (800294c <HAL_TIM_Base_MspInit+0xe4>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2100      	movs	r1, #0
 8002932:	201e      	movs	r0, #30
 8002934:	f001 f8a5 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002938:	201e      	movs	r0, #30
 800293a:	f001 f8be 	bl	8003aba <HAL_NVIC_EnableIRQ>
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40010000 	.word	0x40010000
 800294c:	40023800 	.word	0x40023800
 8002950:	40000400 	.word	0x40000400
 8002954:	40000800 	.word	0x40000800

08002958 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08c      	sub	sp, #48	@ 0x30
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a49      	ldr	r2, [pc, #292]	@ (8002a9c <HAL_TIM_MspPostInit+0x144>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d11f      	bne.n	80029ba <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	4b48      	ldr	r3, [pc, #288]	@ (8002aa0 <HAL_TIM_MspPostInit+0x148>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	4a47      	ldr	r2, [pc, #284]	@ (8002aa0 <HAL_TIM_MspPostInit+0x148>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6313      	str	r3, [r2, #48]	@ 0x30
 800298a:	4b45      	ldr	r3, [pc, #276]	@ (8002aa0 <HAL_TIM_MspPostInit+0x148>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002996:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800299a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a4:	2300      	movs	r3, #0
 80029a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029a8:	2301      	movs	r3, #1
 80029aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ac:	f107 031c 	add.w	r3, r7, #28
 80029b0:	4619      	mov	r1, r3
 80029b2:	483c      	ldr	r0, [pc, #240]	@ (8002aa4 <HAL_TIM_MspPostInit+0x14c>)
 80029b4:	f001 f92e 	bl	8003c14 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80029b8:	e06b      	b.n	8002a92 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029c2:	d11f      	bne.n	8002a04 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	4b35      	ldr	r3, [pc, #212]	@ (8002aa0 <HAL_TIM_MspPostInit+0x148>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029cc:	4a34      	ldr	r2, [pc, #208]	@ (8002aa0 <HAL_TIM_MspPostInit+0x148>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d4:	4b32      	ldr	r3, [pc, #200]	@ (8002aa0 <HAL_TIM_MspPostInit+0x148>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SERVO_Pin;
 80029e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ee:	2300      	movs	r3, #0
 80029f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029f2:	2301      	movs	r3, #1
 80029f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 80029f6:	f107 031c 	add.w	r3, r7, #28
 80029fa:	4619      	mov	r1, r3
 80029fc:	4829      	ldr	r0, [pc, #164]	@ (8002aa4 <HAL_TIM_MspPostInit+0x14c>)
 80029fe:	f001 f909 	bl	8003c14 <HAL_GPIO_Init>
}
 8002a02:	e046      	b.n	8002a92 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a27      	ldr	r2, [pc, #156]	@ (8002aa8 <HAL_TIM_MspPostInit+0x150>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d11e      	bne.n	8002a4c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	4b23      	ldr	r3, [pc, #140]	@ (8002aa0 <HAL_TIM_MspPostInit+0x148>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	4a22      	ldr	r2, [pc, #136]	@ (8002aa0 <HAL_TIM_MspPostInit+0x148>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a1e:	4b20      	ldr	r3, [pc, #128]	@ (8002aa0 <HAL_TIM_MspPostInit+0x148>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a2a:	2340      	movs	r3, #64	@ 0x40
 8002a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3e:	f107 031c 	add.w	r3, r7, #28
 8002a42:	4619      	mov	r1, r3
 8002a44:	4817      	ldr	r0, [pc, #92]	@ (8002aa4 <HAL_TIM_MspPostInit+0x14c>)
 8002a46:	f001 f8e5 	bl	8003c14 <HAL_GPIO_Init>
}
 8002a4a:	e022      	b.n	8002a92 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a16      	ldr	r2, [pc, #88]	@ (8002aac <HAL_TIM_MspPostInit+0x154>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d11d      	bne.n	8002a92 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_TIM_MspPostInit+0x148>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	4a10      	ldr	r2, [pc, #64]	@ (8002aa0 <HAL_TIM_MspPostInit+0x148>)
 8002a60:	f043 0302 	orr.w	r3, r3, #2
 8002a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a66:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa0 <HAL_TIM_MspPostInit+0x148>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_fanMotor_Pin;
 8002a72:	2340      	movs	r3, #64	@ 0x40
 8002a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a82:	2302      	movs	r3, #2
 8002a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM4_fanMotor_GPIO_Port, &GPIO_InitStruct);
 8002a86:	f107 031c 	add.w	r3, r7, #28
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4808      	ldr	r0, [pc, #32]	@ (8002ab0 <HAL_TIM_MspPostInit+0x158>)
 8002a8e:	f001 f8c1 	bl	8003c14 <HAL_GPIO_Init>
}
 8002a92:	bf00      	nop
 8002a94:	3730      	adds	r7, #48	@ 0x30
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40020000 	.word	0x40020000
 8002aa8:	40000400 	.word	0x40000400
 8002aac:	40000800 	.word	0x40000800
 8002ab0:	40020400 	.word	0x40020400

08002ab4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08c      	sub	sp, #48	@ 0x30
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 031c 	add.w	r3, r7, #28
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a3a      	ldr	r2, [pc, #232]	@ (8002bbc <HAL_UART_MspInit+0x108>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d134      	bne.n	8002b40 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	4b39      	ldr	r3, [pc, #228]	@ (8002bc0 <HAL_UART_MspInit+0x10c>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	4a38      	ldr	r2, [pc, #224]	@ (8002bc0 <HAL_UART_MspInit+0x10c>)
 8002ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae6:	4b36      	ldr	r3, [pc, #216]	@ (8002bc0 <HAL_UART_MspInit+0x10c>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aee:	61bb      	str	r3, [r7, #24]
 8002af0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	4b32      	ldr	r3, [pc, #200]	@ (8002bc0 <HAL_UART_MspInit+0x10c>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	4a31      	ldr	r2, [pc, #196]	@ (8002bc0 <HAL_UART_MspInit+0x10c>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b02:	4b2f      	ldr	r3, [pc, #188]	@ (8002bc0 <HAL_UART_MspInit+0x10c>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b0e:	230c      	movs	r3, #12
 8002b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b1e:	2307      	movs	r3, #7
 8002b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b22:	f107 031c 	add.w	r3, r7, #28
 8002b26:	4619      	mov	r1, r3
 8002b28:	4826      	ldr	r0, [pc, #152]	@ (8002bc4 <HAL_UART_MspInit+0x110>)
 8002b2a:	f001 f873 	bl	8003c14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2100      	movs	r1, #0
 8002b32:	2026      	movs	r0, #38	@ 0x26
 8002b34:	f000 ffa5 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b38:	2026      	movs	r0, #38	@ 0x26
 8002b3a:	f000 ffbe 	bl	8003aba <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002b3e:	e038      	b.n	8002bb2 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a20      	ldr	r2, [pc, #128]	@ (8002bc8 <HAL_UART_MspInit+0x114>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d133      	bne.n	8002bb2 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc0 <HAL_UART_MspInit+0x10c>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc0 <HAL_UART_MspInit+0x10c>)
 8002b54:	f043 0320 	orr.w	r3, r3, #32
 8002b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b5a:	4b19      	ldr	r3, [pc, #100]	@ (8002bc0 <HAL_UART_MspInit+0x10c>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <HAL_UART_MspInit+0x10c>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	4a14      	ldr	r2, [pc, #80]	@ (8002bc0 <HAL_UART_MspInit+0x10c>)
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b76:	4b12      	ldr	r3, [pc, #72]	@ (8002bc0 <HAL_UART_MspInit+0x10c>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_bluetooh_Pin|RX_bluetooh_Pin;
 8002b82:	23c0      	movs	r3, #192	@ 0xc0
 8002b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b92:	2308      	movs	r3, #8
 8002b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b96:	f107 031c 	add.w	r3, r7, #28
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	480b      	ldr	r0, [pc, #44]	@ (8002bcc <HAL_UART_MspInit+0x118>)
 8002b9e:	f001 f839 	bl	8003c14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	2047      	movs	r0, #71	@ 0x47
 8002ba8:	f000 ff6b 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002bac:	2047      	movs	r0, #71	@ 0x47
 8002bae:	f000 ff84 	bl	8003aba <HAL_NVIC_EnableIRQ>
}
 8002bb2:	bf00      	nop
 8002bb4:	3730      	adds	r7, #48	@ 0x30
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40004400 	.word	0x40004400
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40020000 	.word	0x40020000
 8002bc8:	40011400 	.word	0x40011400
 8002bcc:	40020800 	.word	0x40020800

08002bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <NMI_Handler+0x4>

08002bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <HardFault_Handler+0x4>

08002be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be4:	bf00      	nop
 8002be6:	e7fd      	b.n	8002be4 <MemManage_Handler+0x4>

08002be8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bec:	bf00      	nop
 8002bee:	e7fd      	b.n	8002bec <BusFault_Handler+0x4>

08002bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf4:	bf00      	nop
 8002bf6:	e7fd      	b.n	8002bf4 <UsageFault_Handler+0x4>

08002bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c26:	f000 f9a1 	bl	8002f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC0_EXTI0_BUTTON_Pin);
 8002c32:	2001      	movs	r0, #1
 8002c34:	f001 f9a4 	bl	8003f80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c40:	4802      	ldr	r0, [pc, #8]	@ (8002c4c <ADC_IRQHandler+0x10>)
 8002c42:	f000 fad9 	bl	80031f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000a48 	.word	0x20000a48

08002c50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c54:	4802      	ldr	r0, [pc, #8]	@ (8002c60 <TIM2_IRQHandler+0x10>)
 8002c56:	f002 f80b 	bl	8004c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000ad8 	.word	0x20000ad8

08002c64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c68:	4802      	ldr	r0, [pc, #8]	@ (8002c74 <TIM3_IRQHandler+0x10>)
 8002c6a:	f002 f801 	bl	8004c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000b20 	.word	0x20000b20

08002c78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c7c:	4802      	ldr	r0, [pc, #8]	@ (8002c88 <TIM4_IRQHandler+0x10>)
 8002c7e:	f001 fff7 	bl	8004c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000b68 	.word	0x20000b68

08002c8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c90:	4802      	ldr	r0, [pc, #8]	@ (8002c9c <USART2_IRQHandler+0x10>)
 8002c92:	f002 ff35 	bl	8005b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000bb0 	.word	0x20000bb0

08002ca0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002ca4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002ca8:	f001 f96a 	bl	8003f80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002cb4:	4802      	ldr	r0, [pc, #8]	@ (8002cc0 <USART6_IRQHandler+0x10>)
 8002cb6:	f002 ff23 	bl	8005b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000bf8 	.word	0x20000bf8

08002cc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return 1;
 8002cc8:	2301      	movs	r3, #1
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <_kill>:

int _kill(int pid, int sig)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cde:	f004 fe71 	bl	80079c4 <__errno>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2216      	movs	r2, #22
 8002ce6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ce8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <_exit>:

void _exit (int status)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff ffe7 	bl	8002cd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d06:	bf00      	nop
 8002d08:	e7fd      	b.n	8002d06 <_exit+0x12>

08002d0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b086      	sub	sp, #24
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e00a      	b.n	8002d32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d1c:	f3af 8000 	nop.w
 8002d20:	4601      	mov	r1, r0
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	60ba      	str	r2, [r7, #8]
 8002d28:	b2ca      	uxtb	r2, r1
 8002d2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	dbf0      	blt.n	8002d1c <_read+0x12>
  }

  return len;
 8002d3a:	687b      	ldr	r3, [r7, #4]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	e009      	b.n	8002d6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	60ba      	str	r2, [r7, #8]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe fd10 	bl	8001784 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	3301      	adds	r3, #1
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	dbf1      	blt.n	8002d56 <_write+0x12>
  }
  return len;
 8002d72:	687b      	ldr	r3, [r7, #4]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <_close>:

int _close(int file)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002da4:	605a      	str	r2, [r3, #4]
  return 0;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <_isatty>:

int _isatty(int file)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dbc:	2301      	movs	r3, #1
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b085      	sub	sp, #20
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dec:	4a14      	ldr	r2, [pc, #80]	@ (8002e40 <_sbrk+0x5c>)
 8002dee:	4b15      	ldr	r3, [pc, #84]	@ (8002e44 <_sbrk+0x60>)
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002df8:	4b13      	ldr	r3, [pc, #76]	@ (8002e48 <_sbrk+0x64>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e00:	4b11      	ldr	r3, [pc, #68]	@ (8002e48 <_sbrk+0x64>)
 8002e02:	4a12      	ldr	r2, [pc, #72]	@ (8002e4c <_sbrk+0x68>)
 8002e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e06:	4b10      	ldr	r3, [pc, #64]	@ (8002e48 <_sbrk+0x64>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d207      	bcs.n	8002e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e14:	f004 fdd6 	bl	80079c4 <__errno>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	220c      	movs	r2, #12
 8002e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e22:	e009      	b.n	8002e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e24:	4b08      	ldr	r3, [pc, #32]	@ (8002e48 <_sbrk+0x64>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e2a:	4b07      	ldr	r3, [pc, #28]	@ (8002e48 <_sbrk+0x64>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	4a05      	ldr	r2, [pc, #20]	@ (8002e48 <_sbrk+0x64>)
 8002e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e36:	68fb      	ldr	r3, [r7, #12]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20020000 	.word	0x20020000
 8002e44:	00000400 	.word	0x00000400
 8002e48:	20000cc4 	.word	0x20000cc4
 8002e4c:	20000e18 	.word	0x20000e18

08002e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e54:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <SystemInit+0x20>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5a:	4a05      	ldr	r2, [pc, #20]	@ (8002e70 <SystemInit+0x20>)
 8002e5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8002e74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002eac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e78:	f7ff ffea 	bl	8002e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e7c:	480c      	ldr	r0, [pc, #48]	@ (8002eb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e7e:	490d      	ldr	r1, [pc, #52]	@ (8002eb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e80:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e84:	e002      	b.n	8002e8c <LoopCopyDataInit>

08002e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e8a:	3304      	adds	r3, #4

08002e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e90:	d3f9      	bcc.n	8002e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e92:	4a0a      	ldr	r2, [pc, #40]	@ (8002ebc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e94:	4c0a      	ldr	r4, [pc, #40]	@ (8002ec0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e98:	e001      	b.n	8002e9e <LoopFillZerobss>

08002e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e9c:	3204      	adds	r2, #4

08002e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ea0:	d3fb      	bcc.n	8002e9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ea2:	f004 fd95 	bl	80079d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ea6:	f7fe fc87 	bl	80017b8 <main>
  bx  lr    
 8002eaa:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8002eac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eb4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002eb8:	0800b0b8 	.word	0x0800b0b8
  ldr r2, =_sbss
 8002ebc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002ec0:	20000e18 	.word	0x20000e18

08002ec4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ec4:	e7fe      	b.n	8002ec4 <DMA1_Stream0_IRQHandler>
	...

08002ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <HAL_Init+0x40>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8002f08 <HAL_Init+0x40>)
 8002ed2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <HAL_Init+0x40>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0a      	ldr	r2, [pc, #40]	@ (8002f08 <HAL_Init+0x40>)
 8002ede:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ee4:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <HAL_Init+0x40>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a07      	ldr	r2, [pc, #28]	@ (8002f08 <HAL_Init+0x40>)
 8002eea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ef0:	2003      	movs	r0, #3
 8002ef2:	f000 fdbb 	bl	8003a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f000 f808 	bl	8002f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002efc:	f7ff fc40 	bl	8002780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40023c00 	.word	0x40023c00

08002f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f14:	4b12      	ldr	r3, [pc, #72]	@ (8002f60 <HAL_InitTick+0x54>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4b12      	ldr	r3, [pc, #72]	@ (8002f64 <HAL_InitTick+0x58>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fdd3 	bl	8003ad6 <HAL_SYSTICK_Config>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e00e      	b.n	8002f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b0f      	cmp	r3, #15
 8002f3e:	d80a      	bhi.n	8002f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f40:	2200      	movs	r2, #0
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	f04f 30ff 	mov.w	r0, #4294967295
 8002f48:	f000 fd9b 	bl	8003a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f4c:	4a06      	ldr	r2, [pc, #24]	@ (8002f68 <HAL_InitTick+0x5c>)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e000      	b.n	8002f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000008 	.word	0x20000008
 8002f64:	20000010 	.word	0x20000010
 8002f68:	2000000c 	.word	0x2000000c

08002f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f70:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <HAL_IncTick+0x20>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <HAL_IncTick+0x24>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	4a04      	ldr	r2, [pc, #16]	@ (8002f90 <HAL_IncTick+0x24>)
 8002f7e:	6013      	str	r3, [r2, #0]
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	20000010 	.word	0x20000010
 8002f90:	20000cc8 	.word	0x20000cc8

08002f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return uwTick;
 8002f98:	4b03      	ldr	r3, [pc, #12]	@ (8002fa8 <HAL_GetTick+0x14>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	20000cc8 	.word	0x20000cc8

08002fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb4:	f7ff ffee 	bl	8002f94 <HAL_GetTick>
 8002fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d005      	beq.n	8002fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff0 <HAL_Delay+0x44>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fd2:	bf00      	nop
 8002fd4:	f7ff ffde 	bl	8002f94 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d8f7      	bhi.n	8002fd4 <HAL_Delay+0x28>
  {
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000010 	.word	0x20000010

08002ff4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e033      	b.n	8003072 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff fbdc 	bl	80027d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	d118      	bne.n	8003064 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800303a:	f023 0302 	bic.w	r3, r3, #2
 800303e:	f043 0202 	orr.w	r2, r3, #2
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fb3a 	bl	80036c0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	f023 0303 	bic.w	r3, r3, #3
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	641a      	str	r2, [r3, #64]	@ 0x40
 8003062:	e001      	b.n	8003068 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003070:	7bfb      	ldrb	r3, [r7, #15]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_ADC_Start_IT+0x1a>
 8003092:	2302      	movs	r3, #2
 8003094:	e0a1      	b.n	80031da <HAL_ADC_Start_IT+0x15e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d018      	beq.n	80030de <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030bc:	4b4a      	ldr	r3, [pc, #296]	@ (80031e8 <HAL_ADC_Start_IT+0x16c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a4a      	ldr	r2, [pc, #296]	@ (80031ec <HAL_ADC_Start_IT+0x170>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	0c9a      	lsrs	r2, r3, #18
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80030d0:	e002      	b.n	80030d8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f9      	bne.n	80030d2 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d169      	bne.n	80031c0 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800310a:	2b00      	cmp	r3, #0
 800310c:	d007      	beq.n	800311e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003116:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800312a:	d106      	bne.n	800313a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003130:	f023 0206 	bic.w	r2, r3, #6
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	645a      	str	r2, [r3, #68]	@ 0x44
 8003138:	e002      	b.n	8003140 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003148:	4b29      	ldr	r3, [pc, #164]	@ (80031f0 <HAL_ADC_Start_IT+0x174>)
 800314a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003154:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003164:	f043 0320 	orr.w	r3, r3, #32
 8003168:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 031f 	and.w	r3, r3, #31
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10f      	bne.n	8003196 <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d129      	bne.n	80031d8 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	e020      	b.n	80031d8 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a16      	ldr	r2, [pc, #88]	@ (80031f4 <HAL_ADC_Start_IT+0x178>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d11b      	bne.n	80031d8 <HAL_ADC_Start_IT+0x15c>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d114      	bne.n	80031d8 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80031bc:	609a      	str	r2, [r3, #8]
 80031be:	e00b      	b.n	80031d8 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	f043 0210 	orr.w	r2, r3, #16
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d0:	f043 0201 	orr.w	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000008 	.word	0x20000008
 80031ec:	431bde83 	.word	0x431bde83
 80031f0:	40012300 	.word	0x40012300
 80031f4:	40012000 	.word	0x40012000

080031f8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	2300      	movs	r3, #0
 8003206:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 0320 	and.w	r3, r3, #32
 8003226:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d049      	beq.n	80032c2 <HAL_ADC_IRQHandler+0xca>
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d046      	beq.n	80032c2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b00      	cmp	r3, #0
 800323e:	d105      	bne.n	800324c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d12b      	bne.n	80032b2 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800325e:	2b00      	cmp	r3, #0
 8003260:	d127      	bne.n	80032b2 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003268:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800326c:	2b00      	cmp	r3, #0
 800326e:	d006      	beq.n	800327e <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800327a:	2b00      	cmp	r3, #0
 800327c:	d119      	bne.n	80032b2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0220 	bic.w	r2, r2, #32
 800328c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d105      	bne.n	80032b2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	f043 0201 	orr.w	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff fa18 	bl	80026e8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0212 	mvn.w	r2, #18
 80032c0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d057      	beq.n	8003388 <HAL_ADC_IRQHandler+0x190>
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d054      	beq.n	8003388 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d105      	bne.n	80032f6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d139      	bne.n	8003378 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800330e:	2b00      	cmp	r3, #0
 8003310:	d006      	beq.n	8003320 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800331c:	2b00      	cmp	r3, #0
 800331e:	d12b      	bne.n	8003378 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800332a:	2b00      	cmp	r3, #0
 800332c:	d124      	bne.n	8003378 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003338:	2b00      	cmp	r3, #0
 800333a:	d11d      	bne.n	8003378 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003340:	2b00      	cmp	r3, #0
 8003342:	d119      	bne.n	8003378 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003352:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003358:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	f043 0201 	orr.w	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fa9d 	bl	80038b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f06f 020c 	mvn.w	r2, #12
 8003386:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003396:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d017      	beq.n	80033ce <HAL_ADC_IRQHandler+0x1d6>
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d014      	beq.n	80033ce <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d10d      	bne.n	80033ce <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f837 	bl	8003432 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0201 	mvn.w	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033dc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d015      	beq.n	8003410 <HAL_ADC_IRQHandler+0x218>
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d012      	beq.n	8003410 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ee:	f043 0202 	orr.w	r2, r3, #2
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f06f 0220 	mvn.w	r2, #32
 80033fe:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f820 	bl	8003446 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f06f 0220 	mvn.w	r2, #32
 800340e:	601a      	str	r2, [r3, #0]
  }
}
 8003410:	bf00      	nop
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
	...

0800345c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x1c>
 8003474:	2302      	movs	r3, #2
 8003476:	e113      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x244>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b09      	cmp	r3, #9
 8003486:	d925      	bls.n	80034d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68d9      	ldr	r1, [r3, #12]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	4613      	mov	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4413      	add	r3, r2
 800349c:	3b1e      	subs	r3, #30
 800349e:	2207      	movs	r2, #7
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43da      	mvns	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	400a      	ands	r2, r1
 80034ac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68d9      	ldr	r1, [r3, #12]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	4618      	mov	r0, r3
 80034c0:	4603      	mov	r3, r0
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4403      	add	r3, r0
 80034c6:	3b1e      	subs	r3, #30
 80034c8:	409a      	lsls	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	e022      	b.n	800351a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6919      	ldr	r1, [r3, #16]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	4613      	mov	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4413      	add	r3, r2
 80034e8:	2207      	movs	r2, #7
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43da      	mvns	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	400a      	ands	r2, r1
 80034f6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6919      	ldr	r1, [r3, #16]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	b29b      	uxth	r3, r3
 8003508:	4618      	mov	r0, r3
 800350a:	4603      	mov	r3, r0
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	4403      	add	r3, r0
 8003510:	409a      	lsls	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b06      	cmp	r3, #6
 8003520:	d824      	bhi.n	800356c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	3b05      	subs	r3, #5
 8003534:	221f      	movs	r2, #31
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43da      	mvns	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	400a      	ands	r2, r1
 8003542:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	4618      	mov	r0, r3
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	3b05      	subs	r3, #5
 800355e:	fa00 f203 	lsl.w	r2, r0, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	635a      	str	r2, [r3, #52]	@ 0x34
 800356a:	e04c      	b.n	8003606 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b0c      	cmp	r3, #12
 8003572:	d824      	bhi.n	80035be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	3b23      	subs	r3, #35	@ 0x23
 8003586:	221f      	movs	r2, #31
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43da      	mvns	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	400a      	ands	r2, r1
 8003594:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	4618      	mov	r0, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	3b23      	subs	r3, #35	@ 0x23
 80035b0:	fa00 f203 	lsl.w	r2, r0, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80035bc:	e023      	b.n	8003606 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	3b41      	subs	r3, #65	@ 0x41
 80035d0:	221f      	movs	r2, #31
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43da      	mvns	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	400a      	ands	r2, r1
 80035de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	4618      	mov	r0, r3
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	3b41      	subs	r3, #65	@ 0x41
 80035fa:	fa00 f203 	lsl.w	r2, r0, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003606:	4b29      	ldr	r3, [pc, #164]	@ (80036ac <HAL_ADC_ConfigChannel+0x250>)
 8003608:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a28      	ldr	r2, [pc, #160]	@ (80036b0 <HAL_ADC_ConfigChannel+0x254>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d10f      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x1d8>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b12      	cmp	r3, #18
 800361a:	d10b      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a1d      	ldr	r2, [pc, #116]	@ (80036b0 <HAL_ADC_ConfigChannel+0x254>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d12b      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x23a>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a1c      	ldr	r2, [pc, #112]	@ (80036b4 <HAL_ADC_ConfigChannel+0x258>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d003      	beq.n	8003650 <HAL_ADC_ConfigChannel+0x1f4>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b11      	cmp	r3, #17
 800364e:	d122      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a11      	ldr	r2, [pc, #68]	@ (80036b4 <HAL_ADC_ConfigChannel+0x258>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d111      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003672:	4b11      	ldr	r3, [pc, #68]	@ (80036b8 <HAL_ADC_ConfigChannel+0x25c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a11      	ldr	r2, [pc, #68]	@ (80036bc <HAL_ADC_ConfigChannel+0x260>)
 8003678:	fba2 2303 	umull	r2, r3, r2, r3
 800367c:	0c9a      	lsrs	r2, r3, #18
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003688:	e002      	b.n	8003690 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	3b01      	subs	r3, #1
 800368e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f9      	bne.n	800368a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	40012300 	.word	0x40012300
 80036b0:	40012000 	.word	0x40012000
 80036b4:	10000012 	.word	0x10000012
 80036b8:	20000008 	.word	0x20000008
 80036bc:	431bde83 	.word	0x431bde83

080036c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036c8:	4b79      	ldr	r3, [pc, #484]	@ (80038b0 <ADC_Init+0x1f0>)
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	431a      	orrs	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6859      	ldr	r1, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	021a      	lsls	r2, r3, #8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003718:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6859      	ldr	r1, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800373a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6899      	ldr	r1, [r3, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003752:	4a58      	ldr	r2, [pc, #352]	@ (80038b4 <ADC_Init+0x1f4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d022      	beq.n	800379e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003766:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6899      	ldr	r1, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003788:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6899      	ldr	r1, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	e00f      	b.n	80037be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80037bc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0202 	bic.w	r2, r2, #2
 80037cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6899      	ldr	r1, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7e1b      	ldrb	r3, [r3, #24]
 80037d8:	005a      	lsls	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d01b      	beq.n	8003824 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037fa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800380a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6859      	ldr	r1, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003816:	3b01      	subs	r3, #1
 8003818:	035a      	lsls	r2, r3, #13
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	e007      	b.n	8003834 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003832:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003842:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	3b01      	subs	r3, #1
 8003850:	051a      	lsls	r2, r3, #20
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003868:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6899      	ldr	r1, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003876:	025a      	lsls	r2, r3, #9
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800388e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6899      	ldr	r1, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	029a      	lsls	r2, r3, #10
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	609a      	str	r2, [r3, #8]
}
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	40012300 	.word	0x40012300
 80038b4:	0f000001 	.word	0x0f000001

080038b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003910 <__NVIC_SetPriorityGrouping+0x44>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038e8:	4013      	ands	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038fe:	4a04      	ldr	r2, [pc, #16]	@ (8003910 <__NVIC_SetPriorityGrouping+0x44>)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	60d3      	str	r3, [r2, #12]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003918:	4b04      	ldr	r3, [pc, #16]	@ (800392c <__NVIC_GetPriorityGrouping+0x18>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	0a1b      	lsrs	r3, r3, #8
 800391e:	f003 0307 	and.w	r3, r3, #7
}
 8003922:	4618      	mov	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	2b00      	cmp	r3, #0
 8003940:	db0b      	blt.n	800395a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	f003 021f 	and.w	r2, r3, #31
 8003948:	4907      	ldr	r1, [pc, #28]	@ (8003968 <__NVIC_EnableIRQ+0x38>)
 800394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	2001      	movs	r0, #1
 8003952:	fa00 f202 	lsl.w	r2, r0, r2
 8003956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	e000e100 	.word	0xe000e100

0800396c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	6039      	str	r1, [r7, #0]
 8003976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397c:	2b00      	cmp	r3, #0
 800397e:	db0a      	blt.n	8003996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	b2da      	uxtb	r2, r3
 8003984:	490c      	ldr	r1, [pc, #48]	@ (80039b8 <__NVIC_SetPriority+0x4c>)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	0112      	lsls	r2, r2, #4
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	440b      	add	r3, r1
 8003990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003994:	e00a      	b.n	80039ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	4908      	ldr	r1, [pc, #32]	@ (80039bc <__NVIC_SetPriority+0x50>)
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	3b04      	subs	r3, #4
 80039a4:	0112      	lsls	r2, r2, #4
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	440b      	add	r3, r1
 80039aa:	761a      	strb	r2, [r3, #24]
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000e100 	.word	0xe000e100
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b089      	sub	sp, #36	@ 0x24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f1c3 0307 	rsb	r3, r3, #7
 80039da:	2b04      	cmp	r3, #4
 80039dc:	bf28      	it	cs
 80039de:	2304      	movcs	r3, #4
 80039e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3304      	adds	r3, #4
 80039e6:	2b06      	cmp	r3, #6
 80039e8:	d902      	bls.n	80039f0 <NVIC_EncodePriority+0x30>
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3b03      	subs	r3, #3
 80039ee:	e000      	b.n	80039f2 <NVIC_EncodePriority+0x32>
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f4:	f04f 32ff 	mov.w	r2, #4294967295
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43da      	mvns	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	401a      	ands	r2, r3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a08:	f04f 31ff 	mov.w	r1, #4294967295
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a12:	43d9      	mvns	r1, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a18:	4313      	orrs	r3, r2
         );
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3724      	adds	r7, #36	@ 0x24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a38:	d301      	bcc.n	8003a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e00f      	b.n	8003a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a68 <SysTick_Config+0x40>)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a46:	210f      	movs	r1, #15
 8003a48:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4c:	f7ff ff8e 	bl	800396c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a50:	4b05      	ldr	r3, [pc, #20]	@ (8003a68 <SysTick_Config+0x40>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a56:	4b04      	ldr	r3, [pc, #16]	@ (8003a68 <SysTick_Config+0x40>)
 8003a58:	2207      	movs	r2, #7
 8003a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	e000e010 	.word	0xe000e010

08003a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ff29 	bl	80038cc <__NVIC_SetPriorityGrouping>
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b086      	sub	sp, #24
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	4603      	mov	r3, r0
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a94:	f7ff ff3e 	bl	8003914 <__NVIC_GetPriorityGrouping>
 8003a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	68b9      	ldr	r1, [r7, #8]
 8003a9e:	6978      	ldr	r0, [r7, #20]
 8003aa0:	f7ff ff8e 	bl	80039c0 <NVIC_EncodePriority>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ff5d 	bl	800396c <__NVIC_SetPriority>
}
 8003ab2:	bf00      	nop
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ff31 	bl	8003930 <__NVIC_EnableIRQ>
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff ffa2 	bl	8003a28 <SysTick_Config>
 8003ae4:	4603      	mov	r3, r0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003afc:	f7ff fa4a 	bl	8002f94 <HAL_GetTick>
 8003b00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d008      	beq.n	8003b20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2280      	movs	r2, #128	@ 0x80
 8003b12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e052      	b.n	8003bc6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0216 	bic.w	r2, r2, #22
 8003b2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d103      	bne.n	8003b50 <HAL_DMA_Abort+0x62>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d007      	beq.n	8003b60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0208 	bic.w	r2, r2, #8
 8003b5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0201 	bic.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b70:	e013      	b.n	8003b9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b72:	f7ff fa0f 	bl	8002f94 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b05      	cmp	r3, #5
 8003b7e:	d90c      	bls.n	8003b9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2203      	movs	r2, #3
 8003b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e015      	b.n	8003bc6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e4      	bne.n	8003b72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bac:	223f      	movs	r2, #63	@ 0x3f
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d004      	beq.n	8003bec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2280      	movs	r2, #128	@ 0x80
 8003be6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e00c      	b.n	8003c06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2205      	movs	r2, #5
 8003bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0201 	bic.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b089      	sub	sp, #36	@ 0x24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	e159      	b.n	8003ee4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c30:	2201      	movs	r2, #1
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4013      	ands	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	f040 8148 	bne.w	8003ede <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d005      	beq.n	8003c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d130      	bne.n	8003cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	2203      	movs	r2, #3
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43db      	mvns	r3, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	f003 0201 	and.w	r2, r3, #1
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d017      	beq.n	8003d04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	2203      	movs	r2, #3
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d123      	bne.n	8003d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	08da      	lsrs	r2, r3, #3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3208      	adds	r2, #8
 8003d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	220f      	movs	r2, #15
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	08da      	lsrs	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3208      	adds	r2, #8
 8003d52:	69b9      	ldr	r1, [r7, #24]
 8003d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	2203      	movs	r2, #3
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 0203 	and.w	r2, r3, #3
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80a2 	beq.w	8003ede <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	4b57      	ldr	r3, [pc, #348]	@ (8003efc <HAL_GPIO_Init+0x2e8>)
 8003da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da2:	4a56      	ldr	r2, [pc, #344]	@ (8003efc <HAL_GPIO_Init+0x2e8>)
 8003da4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003daa:	4b54      	ldr	r3, [pc, #336]	@ (8003efc <HAL_GPIO_Init+0x2e8>)
 8003dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003db6:	4a52      	ldr	r2, [pc, #328]	@ (8003f00 <HAL_GPIO_Init+0x2ec>)
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	089b      	lsrs	r3, r3, #2
 8003dbc:	3302      	adds	r3, #2
 8003dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	220f      	movs	r2, #15
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a49      	ldr	r2, [pc, #292]	@ (8003f04 <HAL_GPIO_Init+0x2f0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d019      	beq.n	8003e16 <HAL_GPIO_Init+0x202>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a48      	ldr	r2, [pc, #288]	@ (8003f08 <HAL_GPIO_Init+0x2f4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <HAL_GPIO_Init+0x1fe>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a47      	ldr	r2, [pc, #284]	@ (8003f0c <HAL_GPIO_Init+0x2f8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00d      	beq.n	8003e0e <HAL_GPIO_Init+0x1fa>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a46      	ldr	r2, [pc, #280]	@ (8003f10 <HAL_GPIO_Init+0x2fc>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d007      	beq.n	8003e0a <HAL_GPIO_Init+0x1f6>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a45      	ldr	r2, [pc, #276]	@ (8003f14 <HAL_GPIO_Init+0x300>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d101      	bne.n	8003e06 <HAL_GPIO_Init+0x1f2>
 8003e02:	2304      	movs	r3, #4
 8003e04:	e008      	b.n	8003e18 <HAL_GPIO_Init+0x204>
 8003e06:	2307      	movs	r3, #7
 8003e08:	e006      	b.n	8003e18 <HAL_GPIO_Init+0x204>
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e004      	b.n	8003e18 <HAL_GPIO_Init+0x204>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e002      	b.n	8003e18 <HAL_GPIO_Init+0x204>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <HAL_GPIO_Init+0x204>
 8003e16:	2300      	movs	r3, #0
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	f002 0203 	and.w	r2, r2, #3
 8003e1e:	0092      	lsls	r2, r2, #2
 8003e20:	4093      	lsls	r3, r2
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e28:	4935      	ldr	r1, [pc, #212]	@ (8003f00 <HAL_GPIO_Init+0x2ec>)
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	089b      	lsrs	r3, r3, #2
 8003e2e:	3302      	adds	r3, #2
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e36:	4b38      	ldr	r3, [pc, #224]	@ (8003f18 <HAL_GPIO_Init+0x304>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4013      	ands	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8003f18 <HAL_GPIO_Init+0x304>)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e60:	4b2d      	ldr	r3, [pc, #180]	@ (8003f18 <HAL_GPIO_Init+0x304>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e84:	4a24      	ldr	r2, [pc, #144]	@ (8003f18 <HAL_GPIO_Init+0x304>)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e8a:	4b23      	ldr	r3, [pc, #140]	@ (8003f18 <HAL_GPIO_Init+0x304>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	43db      	mvns	r3, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4013      	ands	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eae:	4a1a      	ldr	r2, [pc, #104]	@ (8003f18 <HAL_GPIO_Init+0x304>)
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eb4:	4b18      	ldr	r3, [pc, #96]	@ (8003f18 <HAL_GPIO_Init+0x304>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ed8:	4a0f      	ldr	r2, [pc, #60]	@ (8003f18 <HAL_GPIO_Init+0x304>)
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	61fb      	str	r3, [r7, #28]
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	2b0f      	cmp	r3, #15
 8003ee8:	f67f aea2 	bls.w	8003c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	3724      	adds	r7, #36	@ 0x24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40023800 	.word	0x40023800
 8003f00:	40013800 	.word	0x40013800
 8003f04:	40020000 	.word	0x40020000
 8003f08:	40020400 	.word	0x40020400
 8003f0c:	40020800 	.word	0x40020800
 8003f10:	40020c00 	.word	0x40020c00
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40013c00 	.word	0x40013c00

08003f1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	887b      	ldrh	r3, [r7, #2]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
 8003f38:	e001      	b.n	8003f3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	807b      	strh	r3, [r7, #2]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f5c:	787b      	ldrb	r3, [r7, #1]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f62:	887a      	ldrh	r2, [r7, #2]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f68:	e003      	b.n	8003f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f6a:	887b      	ldrh	r3, [r7, #2]
 8003f6c:	041a      	lsls	r2, r3, #16
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	619a      	str	r2, [r3, #24]
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	4603      	mov	r3, r0
 8003f88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f8a:	4b08      	ldr	r3, [pc, #32]	@ (8003fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d006      	beq.n	8003fa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f96:	4a05      	ldr	r2, [pc, #20]	@ (8003fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 f806 	bl	8003fb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40013c00 	.word	0x40013c00

08003fb0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
	...

08003fc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e267      	b.n	80044aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d075      	beq.n	80040d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fe6:	4b88      	ldr	r3, [pc, #544]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d00c      	beq.n	800400c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ff2:	4b85      	ldr	r3, [pc, #532]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d112      	bne.n	8004024 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ffe:	4b82      	ldr	r3, [pc, #520]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004006:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800400a:	d10b      	bne.n	8004024 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400c:	4b7e      	ldr	r3, [pc, #504]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d05b      	beq.n	80040d0 <HAL_RCC_OscConfig+0x108>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d157      	bne.n	80040d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e242      	b.n	80044aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800402c:	d106      	bne.n	800403c <HAL_RCC_OscConfig+0x74>
 800402e:	4b76      	ldr	r3, [pc, #472]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a75      	ldr	r2, [pc, #468]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 8004034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e01d      	b.n	8004078 <HAL_RCC_OscConfig+0xb0>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004044:	d10c      	bne.n	8004060 <HAL_RCC_OscConfig+0x98>
 8004046:	4b70      	ldr	r3, [pc, #448]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a6f      	ldr	r2, [pc, #444]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 800404c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	4b6d      	ldr	r3, [pc, #436]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a6c      	ldr	r2, [pc, #432]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 8004058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	e00b      	b.n	8004078 <HAL_RCC_OscConfig+0xb0>
 8004060:	4b69      	ldr	r3, [pc, #420]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a68      	ldr	r2, [pc, #416]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 8004066:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	4b66      	ldr	r3, [pc, #408]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a65      	ldr	r2, [pc, #404]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 8004072:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d013      	beq.n	80040a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004080:	f7fe ff88 	bl	8002f94 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004088:	f7fe ff84 	bl	8002f94 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	@ 0x64
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e207      	b.n	80044aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409a:	4b5b      	ldr	r3, [pc, #364]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0xc0>
 80040a6:	e014      	b.n	80040d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fe ff74 	bl	8002f94 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b0:	f7fe ff70 	bl	8002f94 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	@ 0x64
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e1f3      	b.n	80044aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040c2:	4b51      	ldr	r3, [pc, #324]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0xe8>
 80040ce:	e000      	b.n	80040d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d063      	beq.n	80041a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040de:	4b4a      	ldr	r3, [pc, #296]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 030c 	and.w	r3, r3, #12
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00b      	beq.n	8004102 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ea:	4b47      	ldr	r3, [pc, #284]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d11c      	bne.n	8004130 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040f6:	4b44      	ldr	r3, [pc, #272]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d116      	bne.n	8004130 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004102:	4b41      	ldr	r3, [pc, #260]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <HAL_RCC_OscConfig+0x152>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d001      	beq.n	800411a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e1c7      	b.n	80044aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411a:	4b3b      	ldr	r3, [pc, #236]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4937      	ldr	r1, [pc, #220]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 800412a:	4313      	orrs	r3, r2
 800412c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412e:	e03a      	b.n	80041a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d020      	beq.n	800417a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004138:	4b34      	ldr	r3, [pc, #208]	@ (800420c <HAL_RCC_OscConfig+0x244>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413e:	f7fe ff29 	bl	8002f94 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004146:	f7fe ff25 	bl	8002f94 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e1a8      	b.n	80044aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004158:	4b2b      	ldr	r3, [pc, #172]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004164:	4b28      	ldr	r3, [pc, #160]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	4925      	ldr	r1, [pc, #148]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 8004174:	4313      	orrs	r3, r2
 8004176:	600b      	str	r3, [r1, #0]
 8004178:	e015      	b.n	80041a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800417a:	4b24      	ldr	r3, [pc, #144]	@ (800420c <HAL_RCC_OscConfig+0x244>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fe ff08 	bl	8002f94 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004188:	f7fe ff04 	bl	8002f94 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e187      	b.n	80044aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800419a:	4b1b      	ldr	r3, [pc, #108]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d036      	beq.n	8004220 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d016      	beq.n	80041e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ba:	4b15      	ldr	r3, [pc, #84]	@ (8004210 <HAL_RCC_OscConfig+0x248>)
 80041bc:	2201      	movs	r2, #1
 80041be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c0:	f7fe fee8 	bl	8002f94 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c8:	f7fe fee4 	bl	8002f94 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e167      	b.n	80044aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041da:	4b0b      	ldr	r3, [pc, #44]	@ (8004208 <HAL_RCC_OscConfig+0x240>)
 80041dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x200>
 80041e6:	e01b      	b.n	8004220 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e8:	4b09      	ldr	r3, [pc, #36]	@ (8004210 <HAL_RCC_OscConfig+0x248>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ee:	f7fe fed1 	bl	8002f94 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f4:	e00e      	b.n	8004214 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f6:	f7fe fecd 	bl	8002f94 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d907      	bls.n	8004214 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e150      	b.n	80044aa <HAL_RCC_OscConfig+0x4e2>
 8004208:	40023800 	.word	0x40023800
 800420c:	42470000 	.word	0x42470000
 8004210:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004214:	4b88      	ldr	r3, [pc, #544]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 8004216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1ea      	bne.n	80041f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8097 	beq.w	800435c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422e:	2300      	movs	r3, #0
 8004230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004232:	4b81      	ldr	r3, [pc, #516]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10f      	bne.n	800425e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	4b7d      	ldr	r3, [pc, #500]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	4a7c      	ldr	r2, [pc, #496]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 8004248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800424c:	6413      	str	r3, [r2, #64]	@ 0x40
 800424e:	4b7a      	ldr	r3, [pc, #488]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004256:	60bb      	str	r3, [r7, #8]
 8004258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800425a:	2301      	movs	r3, #1
 800425c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425e:	4b77      	ldr	r3, [pc, #476]	@ (800443c <HAL_RCC_OscConfig+0x474>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004266:	2b00      	cmp	r3, #0
 8004268:	d118      	bne.n	800429c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800426a:	4b74      	ldr	r3, [pc, #464]	@ (800443c <HAL_RCC_OscConfig+0x474>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a73      	ldr	r2, [pc, #460]	@ (800443c <HAL_RCC_OscConfig+0x474>)
 8004270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004276:	f7fe fe8d 	bl	8002f94 <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800427e:	f7fe fe89 	bl	8002f94 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e10c      	b.n	80044aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004290:	4b6a      	ldr	r3, [pc, #424]	@ (800443c <HAL_RCC_OscConfig+0x474>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0f0      	beq.n	800427e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d106      	bne.n	80042b2 <HAL_RCC_OscConfig+0x2ea>
 80042a4:	4b64      	ldr	r3, [pc, #400]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 80042a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a8:	4a63      	ldr	r2, [pc, #396]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80042b0:	e01c      	b.n	80042ec <HAL_RCC_OscConfig+0x324>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2b05      	cmp	r3, #5
 80042b8:	d10c      	bne.n	80042d4 <HAL_RCC_OscConfig+0x30c>
 80042ba:	4b5f      	ldr	r3, [pc, #380]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042be:	4a5e      	ldr	r2, [pc, #376]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 80042c0:	f043 0304 	orr.w	r3, r3, #4
 80042c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c6:	4b5c      	ldr	r3, [pc, #368]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ca:	4a5b      	ldr	r2, [pc, #364]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d2:	e00b      	b.n	80042ec <HAL_RCC_OscConfig+0x324>
 80042d4:	4b58      	ldr	r3, [pc, #352]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d8:	4a57      	ldr	r2, [pc, #348]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 80042da:	f023 0301 	bic.w	r3, r3, #1
 80042de:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e0:	4b55      	ldr	r3, [pc, #340]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 80042e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e4:	4a54      	ldr	r2, [pc, #336]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 80042e6:	f023 0304 	bic.w	r3, r3, #4
 80042ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d015      	beq.n	8004320 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f4:	f7fe fe4e 	bl	8002f94 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fa:	e00a      	b.n	8004312 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fc:	f7fe fe4a 	bl	8002f94 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430a:	4293      	cmp	r3, r2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e0cb      	b.n	80044aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004312:	4b49      	ldr	r3, [pc, #292]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0ee      	beq.n	80042fc <HAL_RCC_OscConfig+0x334>
 800431e:	e014      	b.n	800434a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004320:	f7fe fe38 	bl	8002f94 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004326:	e00a      	b.n	800433e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004328:	f7fe fe34 	bl	8002f94 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e0b5      	b.n	80044aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800433e:	4b3e      	ldr	r3, [pc, #248]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1ee      	bne.n	8004328 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800434a:	7dfb      	ldrb	r3, [r7, #23]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d105      	bne.n	800435c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004350:	4b39      	ldr	r3, [pc, #228]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 8004352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004354:	4a38      	ldr	r2, [pc, #224]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 8004356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800435a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80a1 	beq.w	80044a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004366:	4b34      	ldr	r3, [pc, #208]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b08      	cmp	r3, #8
 8004370:	d05c      	beq.n	800442c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d141      	bne.n	80043fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437a:	4b31      	ldr	r3, [pc, #196]	@ (8004440 <HAL_RCC_OscConfig+0x478>)
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004380:	f7fe fe08 	bl	8002f94 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004388:	f7fe fe04 	bl	8002f94 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e087      	b.n	80044aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439a:	4b27      	ldr	r3, [pc, #156]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f0      	bne.n	8004388 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69da      	ldr	r2, [r3, #28]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	019b      	lsls	r3, r3, #6
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043bc:	085b      	lsrs	r3, r3, #1
 80043be:	3b01      	subs	r3, #1
 80043c0:	041b      	lsls	r3, r3, #16
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c8:	061b      	lsls	r3, r3, #24
 80043ca:	491b      	ldr	r1, [pc, #108]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004440 <HAL_RCC_OscConfig+0x478>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d6:	f7fe fddd 	bl	8002f94 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043de:	f7fe fdd9 	bl	8002f94 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e05c      	b.n	80044aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f0:	4b11      	ldr	r3, [pc, #68]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0f0      	beq.n	80043de <HAL_RCC_OscConfig+0x416>
 80043fc:	e054      	b.n	80044a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fe:	4b10      	ldr	r3, [pc, #64]	@ (8004440 <HAL_RCC_OscConfig+0x478>)
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004404:	f7fe fdc6 	bl	8002f94 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440c:	f7fe fdc2 	bl	8002f94 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e045      	b.n	80044aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441e:	4b06      	ldr	r3, [pc, #24]	@ (8004438 <HAL_RCC_OscConfig+0x470>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0x444>
 800442a:	e03d      	b.n	80044a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d107      	bne.n	8004444 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e038      	b.n	80044aa <HAL_RCC_OscConfig+0x4e2>
 8004438:	40023800 	.word	0x40023800
 800443c:	40007000 	.word	0x40007000
 8004440:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004444:	4b1b      	ldr	r3, [pc, #108]	@ (80044b4 <HAL_RCC_OscConfig+0x4ec>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d028      	beq.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800445c:	429a      	cmp	r2, r3
 800445e:	d121      	bne.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446a:	429a      	cmp	r2, r3
 800446c:	d11a      	bne.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004474:	4013      	ands	r3, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800447a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800447c:	4293      	cmp	r3, r2
 800447e:	d111      	bne.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448a:	085b      	lsrs	r3, r3, #1
 800448c:	3b01      	subs	r3, #1
 800448e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d107      	bne.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d001      	beq.n	80044a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40023800 	.word	0x40023800

080044b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0cc      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044cc:	4b68      	ldr	r3, [pc, #416]	@ (8004670 <HAL_RCC_ClockConfig+0x1b8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d90c      	bls.n	80044f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044da:	4b65      	ldr	r3, [pc, #404]	@ (8004670 <HAL_RCC_ClockConfig+0x1b8>)
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e2:	4b63      	ldr	r3, [pc, #396]	@ (8004670 <HAL_RCC_ClockConfig+0x1b8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0b8      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d020      	beq.n	8004542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800450c:	4b59      	ldr	r3, [pc, #356]	@ (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4a58      	ldr	r2, [pc, #352]	@ (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004516:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004524:	4b53      	ldr	r3, [pc, #332]	@ (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	4a52      	ldr	r2, [pc, #328]	@ (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800452e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004530:	4b50      	ldr	r3, [pc, #320]	@ (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	494d      	ldr	r1, [pc, #308]	@ (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	4313      	orrs	r3, r2
 8004540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d044      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d107      	bne.n	8004566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004556:	4b47      	ldr	r3, [pc, #284]	@ (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d119      	bne.n	8004596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e07f      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b02      	cmp	r3, #2
 800456c:	d003      	beq.n	8004576 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004572:	2b03      	cmp	r3, #3
 8004574:	d107      	bne.n	8004586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004576:	4b3f      	ldr	r3, [pc, #252]	@ (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e06f      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004586:	4b3b      	ldr	r3, [pc, #236]	@ (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e067      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004596:	4b37      	ldr	r3, [pc, #220]	@ (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f023 0203 	bic.w	r2, r3, #3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4934      	ldr	r1, [pc, #208]	@ (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045a8:	f7fe fcf4 	bl	8002f94 <HAL_GetTick>
 80045ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ae:	e00a      	b.n	80045c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b0:	f7fe fcf0 	bl	8002f94 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e04f      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 020c 	and.w	r2, r3, #12
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d1eb      	bne.n	80045b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045d8:	4b25      	ldr	r3, [pc, #148]	@ (8004670 <HAL_RCC_ClockConfig+0x1b8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d20c      	bcs.n	8004600 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e6:	4b22      	ldr	r3, [pc, #136]	@ (8004670 <HAL_RCC_ClockConfig+0x1b8>)
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ee:	4b20      	ldr	r3, [pc, #128]	@ (8004670 <HAL_RCC_ClockConfig+0x1b8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e032      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800460c:	4b19      	ldr	r3, [pc, #100]	@ (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	4916      	ldr	r1, [pc, #88]	@ (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	4313      	orrs	r3, r2
 800461c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800462a:	4b12      	ldr	r3, [pc, #72]	@ (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	490e      	ldr	r1, [pc, #56]	@ (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	4313      	orrs	r3, r2
 800463c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800463e:	f000 f821 	bl	8004684 <HAL_RCC_GetSysClockFreq>
 8004642:	4602      	mov	r2, r0
 8004644:	4b0b      	ldr	r3, [pc, #44]	@ (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	091b      	lsrs	r3, r3, #4
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	490a      	ldr	r1, [pc, #40]	@ (8004678 <HAL_RCC_ClockConfig+0x1c0>)
 8004650:	5ccb      	ldrb	r3, [r1, r3]
 8004652:	fa22 f303 	lsr.w	r3, r2, r3
 8004656:	4a09      	ldr	r2, [pc, #36]	@ (800467c <HAL_RCC_ClockConfig+0x1c4>)
 8004658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800465a:	4b09      	ldr	r3, [pc, #36]	@ (8004680 <HAL_RCC_ClockConfig+0x1c8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe fc54 	bl	8002f0c <HAL_InitTick>

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40023c00 	.word	0x40023c00
 8004674:	40023800 	.word	0x40023800
 8004678:	0800ac84 	.word	0x0800ac84
 800467c:	20000008 	.word	0x20000008
 8004680:	2000000c 	.word	0x2000000c

08004684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004688:	b094      	sub	sp, #80	@ 0x50
 800468a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800469c:	4b79      	ldr	r3, [pc, #484]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x200>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 030c 	and.w	r3, r3, #12
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d00d      	beq.n	80046c4 <HAL_RCC_GetSysClockFreq+0x40>
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	f200 80e1 	bhi.w	8004870 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <HAL_RCC_GetSysClockFreq+0x34>
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d003      	beq.n	80046be <HAL_RCC_GetSysClockFreq+0x3a>
 80046b6:	e0db      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046b8:	4b73      	ldr	r3, [pc, #460]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x204>)
 80046ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046bc:	e0db      	b.n	8004876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046be:	4b73      	ldr	r3, [pc, #460]	@ (800488c <HAL_RCC_GetSysClockFreq+0x208>)
 80046c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046c2:	e0d8      	b.n	8004876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046c4:	4b6f      	ldr	r3, [pc, #444]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x200>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046ce:	4b6d      	ldr	r3, [pc, #436]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x200>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d063      	beq.n	80047a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046da:	4b6a      	ldr	r3, [pc, #424]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x200>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	099b      	lsrs	r3, r3, #6
 80046e0:	2200      	movs	r2, #0
 80046e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80046ee:	2300      	movs	r3, #0
 80046f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80046f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80046f6:	4622      	mov	r2, r4
 80046f8:	462b      	mov	r3, r5
 80046fa:	f04f 0000 	mov.w	r0, #0
 80046fe:	f04f 0100 	mov.w	r1, #0
 8004702:	0159      	lsls	r1, r3, #5
 8004704:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004708:	0150      	lsls	r0, r2, #5
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4621      	mov	r1, r4
 8004710:	1a51      	subs	r1, r2, r1
 8004712:	6139      	str	r1, [r7, #16]
 8004714:	4629      	mov	r1, r5
 8004716:	eb63 0301 	sbc.w	r3, r3, r1
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004728:	4659      	mov	r1, fp
 800472a:	018b      	lsls	r3, r1, #6
 800472c:	4651      	mov	r1, sl
 800472e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004732:	4651      	mov	r1, sl
 8004734:	018a      	lsls	r2, r1, #6
 8004736:	4651      	mov	r1, sl
 8004738:	ebb2 0801 	subs.w	r8, r2, r1
 800473c:	4659      	mov	r1, fp
 800473e:	eb63 0901 	sbc.w	r9, r3, r1
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800474e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004752:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004756:	4690      	mov	r8, r2
 8004758:	4699      	mov	r9, r3
 800475a:	4623      	mov	r3, r4
 800475c:	eb18 0303 	adds.w	r3, r8, r3
 8004760:	60bb      	str	r3, [r7, #8]
 8004762:	462b      	mov	r3, r5
 8004764:	eb49 0303 	adc.w	r3, r9, r3
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004776:	4629      	mov	r1, r5
 8004778:	024b      	lsls	r3, r1, #9
 800477a:	4621      	mov	r1, r4
 800477c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004780:	4621      	mov	r1, r4
 8004782:	024a      	lsls	r2, r1, #9
 8004784:	4610      	mov	r0, r2
 8004786:	4619      	mov	r1, r3
 8004788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800478a:	2200      	movs	r2, #0
 800478c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800478e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004790:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004794:	f7fc fa70 	bl	8000c78 <__aeabi_uldivmod>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4613      	mov	r3, r2
 800479e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047a0:	e058      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a2:	4b38      	ldr	r3, [pc, #224]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x200>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	099b      	lsrs	r3, r3, #6
 80047a8:	2200      	movs	r2, #0
 80047aa:	4618      	mov	r0, r3
 80047ac:	4611      	mov	r1, r2
 80047ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047b2:	623b      	str	r3, [r7, #32]
 80047b4:	2300      	movs	r3, #0
 80047b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80047b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047bc:	4642      	mov	r2, r8
 80047be:	464b      	mov	r3, r9
 80047c0:	f04f 0000 	mov.w	r0, #0
 80047c4:	f04f 0100 	mov.w	r1, #0
 80047c8:	0159      	lsls	r1, r3, #5
 80047ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047ce:	0150      	lsls	r0, r2, #5
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4641      	mov	r1, r8
 80047d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80047da:	4649      	mov	r1, r9
 80047dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047f4:	ebb2 040a 	subs.w	r4, r2, sl
 80047f8:	eb63 050b 	sbc.w	r5, r3, fp
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	00eb      	lsls	r3, r5, #3
 8004806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800480a:	00e2      	lsls	r2, r4, #3
 800480c:	4614      	mov	r4, r2
 800480e:	461d      	mov	r5, r3
 8004810:	4643      	mov	r3, r8
 8004812:	18e3      	adds	r3, r4, r3
 8004814:	603b      	str	r3, [r7, #0]
 8004816:	464b      	mov	r3, r9
 8004818:	eb45 0303 	adc.w	r3, r5, r3
 800481c:	607b      	str	r3, [r7, #4]
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	e9d7 4500 	ldrd	r4, r5, [r7]
 800482a:	4629      	mov	r1, r5
 800482c:	028b      	lsls	r3, r1, #10
 800482e:	4621      	mov	r1, r4
 8004830:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004834:	4621      	mov	r1, r4
 8004836:	028a      	lsls	r2, r1, #10
 8004838:	4610      	mov	r0, r2
 800483a:	4619      	mov	r1, r3
 800483c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800483e:	2200      	movs	r2, #0
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	61fa      	str	r2, [r7, #28]
 8004844:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004848:	f7fc fa16 	bl	8000c78 <__aeabi_uldivmod>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4613      	mov	r3, r2
 8004852:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004854:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x200>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	0c1b      	lsrs	r3, r3, #16
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	3301      	adds	r3, #1
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004864:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800486e:	e002      	b.n	8004876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004870:	4b05      	ldr	r3, [pc, #20]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x204>)
 8004872:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004876:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004878:	4618      	mov	r0, r3
 800487a:	3750      	adds	r7, #80	@ 0x50
 800487c:	46bd      	mov	sp, r7
 800487e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800
 8004888:	00f42400 	.word	0x00f42400
 800488c:	007a1200 	.word	0x007a1200

08004890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004894:	4b03      	ldr	r3, [pc, #12]	@ (80048a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004896:	681b      	ldr	r3, [r3, #0]
}
 8004898:	4618      	mov	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20000008 	.word	0x20000008

080048a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048ac:	f7ff fff0 	bl	8004890 <HAL_RCC_GetHCLKFreq>
 80048b0:	4602      	mov	r2, r0
 80048b2:	4b05      	ldr	r3, [pc, #20]	@ (80048c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	0a9b      	lsrs	r3, r3, #10
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	4903      	ldr	r1, [pc, #12]	@ (80048cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048be:	5ccb      	ldrb	r3, [r1, r3]
 80048c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40023800 	.word	0x40023800
 80048cc:	0800ac94 	.word	0x0800ac94

080048d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048d4:	f7ff ffdc 	bl	8004890 <HAL_RCC_GetHCLKFreq>
 80048d8:	4602      	mov	r2, r0
 80048da:	4b05      	ldr	r3, [pc, #20]	@ (80048f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	0b5b      	lsrs	r3, r3, #13
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	4903      	ldr	r1, [pc, #12]	@ (80048f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048e6:	5ccb      	ldrb	r3, [r1, r3]
 80048e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40023800 	.word	0x40023800
 80048f4:	0800ac94 	.word	0x0800ac94

080048f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e041      	b.n	800498e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d106      	bne.n	8004924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fd ffa2 	bl	8002868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	4619      	mov	r1, r3
 8004936:	4610      	mov	r0, r2
 8004938:	f000 fc3c 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d001      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e044      	b.n	8004a3a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004a48 <HAL_TIM_Base_Start_IT+0xb0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d018      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x6c>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049da:	d013      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x6c>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1a      	ldr	r2, [pc, #104]	@ (8004a4c <HAL_TIM_Base_Start_IT+0xb4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00e      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x6c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a19      	ldr	r2, [pc, #100]	@ (8004a50 <HAL_TIM_Base_Start_IT+0xb8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d009      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x6c>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a17      	ldr	r2, [pc, #92]	@ (8004a54 <HAL_TIM_Base_Start_IT+0xbc>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d004      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x6c>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a16      	ldr	r2, [pc, #88]	@ (8004a58 <HAL_TIM_Base_Start_IT+0xc0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d111      	bne.n	8004a28 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b06      	cmp	r3, #6
 8004a14:	d010      	beq.n	8004a38 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0201 	orr.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a26:	e007      	b.n	8004a38 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40010000 	.word	0x40010000
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800
 8004a54:	40000c00 	.word	0x40000c00
 8004a58:	40014000 	.word	0x40014000

08004a5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e041      	b.n	8004af2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f839 	bl	8004afa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3304      	adds	r3, #4
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	f000 fb8a 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
	...

08004b10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <HAL_TIM_PWM_Start+0x24>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	bf14      	ite	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	2300      	moveq	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	e022      	b.n	8004b7a <HAL_TIM_PWM_Start+0x6a>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d109      	bne.n	8004b4e <HAL_TIM_PWM_Start+0x3e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	bf14      	ite	ne
 8004b46:	2301      	movne	r3, #1
 8004b48:	2300      	moveq	r3, #0
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	e015      	b.n	8004b7a <HAL_TIM_PWM_Start+0x6a>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d109      	bne.n	8004b68 <HAL_TIM_PWM_Start+0x58>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	bf14      	ite	ne
 8004b60:	2301      	movne	r3, #1
 8004b62:	2300      	moveq	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	e008      	b.n	8004b7a <HAL_TIM_PWM_Start+0x6a>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	bf14      	ite	ne
 8004b74:	2301      	movne	r3, #1
 8004b76:	2300      	moveq	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e068      	b.n	8004c54 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d104      	bne.n	8004b92 <HAL_TIM_PWM_Start+0x82>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b90:	e013      	b.n	8004bba <HAL_TIM_PWM_Start+0xaa>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d104      	bne.n	8004ba2 <HAL_TIM_PWM_Start+0x92>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ba0:	e00b      	b.n	8004bba <HAL_TIM_PWM_Start+0xaa>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d104      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0xa2>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bb0:	e003      	b.n	8004bba <HAL_TIM_PWM_Start+0xaa>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	6839      	ldr	r1, [r7, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fda2 	bl	800570c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a23      	ldr	r2, [pc, #140]	@ (8004c5c <HAL_TIM_PWM_Start+0x14c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d107      	bne.n	8004be2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004be0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1d      	ldr	r2, [pc, #116]	@ (8004c5c <HAL_TIM_PWM_Start+0x14c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d018      	beq.n	8004c1e <HAL_TIM_PWM_Start+0x10e>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf4:	d013      	beq.n	8004c1e <HAL_TIM_PWM_Start+0x10e>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a19      	ldr	r2, [pc, #100]	@ (8004c60 <HAL_TIM_PWM_Start+0x150>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00e      	beq.n	8004c1e <HAL_TIM_PWM_Start+0x10e>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a17      	ldr	r2, [pc, #92]	@ (8004c64 <HAL_TIM_PWM_Start+0x154>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d009      	beq.n	8004c1e <HAL_TIM_PWM_Start+0x10e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a16      	ldr	r2, [pc, #88]	@ (8004c68 <HAL_TIM_PWM_Start+0x158>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d004      	beq.n	8004c1e <HAL_TIM_PWM_Start+0x10e>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a14      	ldr	r2, [pc, #80]	@ (8004c6c <HAL_TIM_PWM_Start+0x15c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d111      	bne.n	8004c42 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b06      	cmp	r3, #6
 8004c2e:	d010      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c40:	e007      	b.n	8004c52 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0201 	orr.w	r2, r2, #1
 8004c50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	40000400 	.word	0x40000400
 8004c64:	40000800 	.word	0x40000800
 8004c68:	40000c00 	.word	0x40000c00
 8004c6c:	40014000 	.word	0x40014000

08004c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d020      	beq.n	8004cd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01b      	beq.n	8004cd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0202 	mvn.w	r2, #2
 8004ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fa5b 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8004cc0:	e005      	b.n	8004cce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fa4d 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fa5e 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d020      	beq.n	8004d20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01b      	beq.n	8004d20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0204 	mvn.w	r2, #4
 8004cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fa35 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8004d0c:	e005      	b.n	8004d1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fa27 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fa38 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d020      	beq.n	8004d6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d01b      	beq.n	8004d6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0208 	mvn.w	r2, #8
 8004d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2204      	movs	r2, #4
 8004d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fa0f 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8004d58:	e005      	b.n	8004d66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fa01 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fa12 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f003 0310 	and.w	r3, r3, #16
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d020      	beq.n	8004db8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01b      	beq.n	8004db8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0210 	mvn.w	r2, #16
 8004d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f9e9 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8004da4:	e005      	b.n	8004db2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f9db 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f9ec 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00c      	beq.n	8004ddc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d007      	beq.n	8004ddc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f06f 0201 	mvn.w	r2, #1
 8004dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fd fc0c 	bl	80025f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00c      	beq.n	8004e00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d007      	beq.n	8004e00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fd76 	bl	80058ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00c      	beq.n	8004e24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d007      	beq.n	8004e24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f9bd 	bl	800519e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f003 0320 	and.w	r3, r3, #32
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00c      	beq.n	8004e48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f06f 0220 	mvn.w	r2, #32
 8004e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fd48 	bl	80058d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e48:	bf00      	nop
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d101      	bne.n	8004e6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	e0ae      	b.n	8004fcc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b0c      	cmp	r3, #12
 8004e7a:	f200 809f 	bhi.w	8004fbc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e84:	08004eb9 	.word	0x08004eb9
 8004e88:	08004fbd 	.word	0x08004fbd
 8004e8c:	08004fbd 	.word	0x08004fbd
 8004e90:	08004fbd 	.word	0x08004fbd
 8004e94:	08004ef9 	.word	0x08004ef9
 8004e98:	08004fbd 	.word	0x08004fbd
 8004e9c:	08004fbd 	.word	0x08004fbd
 8004ea0:	08004fbd 	.word	0x08004fbd
 8004ea4:	08004f3b 	.word	0x08004f3b
 8004ea8:	08004fbd 	.word	0x08004fbd
 8004eac:	08004fbd 	.word	0x08004fbd
 8004eb0:	08004fbd 	.word	0x08004fbd
 8004eb4:	08004f7b 	.word	0x08004f7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 f9fe 	bl	80052c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0208 	orr.w	r2, r2, #8
 8004ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0204 	bic.w	r2, r2, #4
 8004ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6999      	ldr	r1, [r3, #24]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	691a      	ldr	r2, [r3, #16]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	619a      	str	r2, [r3, #24]
      break;
 8004ef6:	e064      	b.n	8004fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fa44 	bl	800538c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6999      	ldr	r1, [r3, #24]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	021a      	lsls	r2, r3, #8
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	619a      	str	r2, [r3, #24]
      break;
 8004f38:	e043      	b.n	8004fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fa8f 	bl	8005464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69da      	ldr	r2, [r3, #28]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0208 	orr.w	r2, r2, #8
 8004f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69da      	ldr	r2, [r3, #28]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0204 	bic.w	r2, r2, #4
 8004f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69d9      	ldr	r1, [r3, #28]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	61da      	str	r2, [r3, #28]
      break;
 8004f78:	e023      	b.n	8004fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fad9 	bl	8005538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69da      	ldr	r2, [r3, #28]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69d9      	ldr	r1, [r3, #28]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	021a      	lsls	r2, r3, #8
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	61da      	str	r2, [r3, #28]
      break;
 8004fba:	e002      	b.n	8004fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8004fc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_TIM_ConfigClockSource+0x1c>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e0b4      	b.n	800515a <HAL_TIM_ConfigClockSource+0x186>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800500e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005016:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005028:	d03e      	beq.n	80050a8 <HAL_TIM_ConfigClockSource+0xd4>
 800502a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800502e:	f200 8087 	bhi.w	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005036:	f000 8086 	beq.w	8005146 <HAL_TIM_ConfigClockSource+0x172>
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800503e:	d87f      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005040:	2b70      	cmp	r3, #112	@ 0x70
 8005042:	d01a      	beq.n	800507a <HAL_TIM_ConfigClockSource+0xa6>
 8005044:	2b70      	cmp	r3, #112	@ 0x70
 8005046:	d87b      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005048:	2b60      	cmp	r3, #96	@ 0x60
 800504a:	d050      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x11a>
 800504c:	2b60      	cmp	r3, #96	@ 0x60
 800504e:	d877      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005050:	2b50      	cmp	r3, #80	@ 0x50
 8005052:	d03c      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0xfa>
 8005054:	2b50      	cmp	r3, #80	@ 0x50
 8005056:	d873      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005058:	2b40      	cmp	r3, #64	@ 0x40
 800505a:	d058      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x13a>
 800505c:	2b40      	cmp	r3, #64	@ 0x40
 800505e:	d86f      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005060:	2b30      	cmp	r3, #48	@ 0x30
 8005062:	d064      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 8005064:	2b30      	cmp	r3, #48	@ 0x30
 8005066:	d86b      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005068:	2b20      	cmp	r3, #32
 800506a:	d060      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 800506c:	2b20      	cmp	r3, #32
 800506e:	d867      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d05c      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 8005074:	2b10      	cmp	r3, #16
 8005076:	d05a      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 8005078:	e062      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800508a:	f000 fb1f 	bl	80056cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800509c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	609a      	str	r2, [r3, #8]
      break;
 80050a6:	e04f      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050b8:	f000 fb08 	bl	80056cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050ca:	609a      	str	r2, [r3, #8]
      break;
 80050cc:	e03c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050da:	461a      	mov	r2, r3
 80050dc:	f000 fa7c 	bl	80055d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2150      	movs	r1, #80	@ 0x50
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fad5 	bl	8005696 <TIM_ITRx_SetConfig>
      break;
 80050ec:	e02c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050fa:	461a      	mov	r2, r3
 80050fc:	f000 fa9b 	bl	8005636 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2160      	movs	r1, #96	@ 0x60
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fac5 	bl	8005696 <TIM_ITRx_SetConfig>
      break;
 800510c:	e01c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800511a:	461a      	mov	r2, r3
 800511c:	f000 fa5c 	bl	80055d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2140      	movs	r1, #64	@ 0x40
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fab5 	bl	8005696 <TIM_ITRx_SetConfig>
      break;
 800512c:	e00c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f000 faac 	bl	8005696 <TIM_ITRx_SetConfig>
      break;
 800513e:	e003      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
      break;
 8005144:	e000      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a37      	ldr	r2, [pc, #220]	@ (80052a4 <TIM_Base_SetConfig+0xf0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00f      	beq.n	80051ec <TIM_Base_SetConfig+0x38>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d2:	d00b      	beq.n	80051ec <TIM_Base_SetConfig+0x38>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a34      	ldr	r2, [pc, #208]	@ (80052a8 <TIM_Base_SetConfig+0xf4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d007      	beq.n	80051ec <TIM_Base_SetConfig+0x38>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a33      	ldr	r2, [pc, #204]	@ (80052ac <TIM_Base_SetConfig+0xf8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_Base_SetConfig+0x38>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a32      	ldr	r2, [pc, #200]	@ (80052b0 <TIM_Base_SetConfig+0xfc>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d108      	bne.n	80051fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a28      	ldr	r2, [pc, #160]	@ (80052a4 <TIM_Base_SetConfig+0xf0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d01b      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800520c:	d017      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a25      	ldr	r2, [pc, #148]	@ (80052a8 <TIM_Base_SetConfig+0xf4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d013      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a24      	ldr	r2, [pc, #144]	@ (80052ac <TIM_Base_SetConfig+0xf8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00f      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a23      	ldr	r2, [pc, #140]	@ (80052b0 <TIM_Base_SetConfig+0xfc>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00b      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a22      	ldr	r2, [pc, #136]	@ (80052b4 <TIM_Base_SetConfig+0x100>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d007      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a21      	ldr	r2, [pc, #132]	@ (80052b8 <TIM_Base_SetConfig+0x104>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d003      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a20      	ldr	r2, [pc, #128]	@ (80052bc <TIM_Base_SetConfig+0x108>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d108      	bne.n	8005250 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a0c      	ldr	r2, [pc, #48]	@ (80052a4 <TIM_Base_SetConfig+0xf0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d103      	bne.n	800527e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	691a      	ldr	r2, [r3, #16]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f043 0204 	orr.w	r2, r3, #4
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	601a      	str	r2, [r3, #0]
}
 8005296:	bf00      	nop
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40000400 	.word	0x40000400
 80052ac:	40000800 	.word	0x40000800
 80052b0:	40000c00 	.word	0x40000c00
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40014400 	.word	0x40014400
 80052bc:	40014800 	.word	0x40014800

080052c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f023 0201 	bic.w	r2, r3, #1
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0303 	bic.w	r3, r3, #3
 80052f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f023 0302 	bic.w	r3, r3, #2
 8005308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a1c      	ldr	r2, [pc, #112]	@ (8005388 <TIM_OC1_SetConfig+0xc8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d10c      	bne.n	8005336 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f023 0308 	bic.w	r3, r3, #8
 8005322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f023 0304 	bic.w	r3, r3, #4
 8005334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a13      	ldr	r2, [pc, #76]	@ (8005388 <TIM_OC1_SetConfig+0xc8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d111      	bne.n	8005362 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800534c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	621a      	str	r2, [r3, #32]
}
 800537c:	bf00      	nop
 800537e:	371c      	adds	r7, #28
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	40010000 	.word	0x40010000

0800538c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	f023 0210 	bic.w	r2, r3, #16
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f023 0320 	bic.w	r3, r3, #32
 80053d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005460 <TIM_OC2_SetConfig+0xd4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d10d      	bne.n	8005408 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005406:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a15      	ldr	r2, [pc, #84]	@ (8005460 <TIM_OC2_SetConfig+0xd4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d113      	bne.n	8005438 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005416:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800541e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40010000 	.word	0x40010000

08005464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0303 	bic.w	r3, r3, #3
 800549a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	021b      	lsls	r3, r3, #8
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005534 <TIM_OC3_SetConfig+0xd0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d10d      	bne.n	80054de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a14      	ldr	r2, [pc, #80]	@ (8005534 <TIM_OC3_SetConfig+0xd0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d113      	bne.n	800550e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	621a      	str	r2, [r3, #32]
}
 8005528:	bf00      	nop
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	40010000 	.word	0x40010000

08005538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800556e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	031b      	lsls	r3, r3, #12
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a10      	ldr	r2, [pc, #64]	@ (80055d4 <TIM_OC4_SetConfig+0x9c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d109      	bne.n	80055ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800559e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	019b      	lsls	r3, r3, #6
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40010000 	.word	0x40010000

080055d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f023 0201 	bic.w	r2, r3, #1
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f023 030a 	bic.w	r3, r3, #10
 8005614:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	621a      	str	r2, [r3, #32]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005636:	b480      	push	{r7}
 8005638:	b087      	sub	sp, #28
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	f023 0210 	bic.w	r2, r3, #16
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005660:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	031b      	lsls	r3, r3, #12
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005672:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	621a      	str	r2, [r3, #32]
}
 800568a:	bf00      	nop
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005696:	b480      	push	{r7}
 8005698:	b085      	sub	sp, #20
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f043 0307 	orr.w	r3, r3, #7
 80056b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	609a      	str	r2, [r3, #8]
}
 80056c0:	bf00      	nop
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	021a      	lsls	r2, r3, #8
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	609a      	str	r2, [r3, #8]
}
 8005700:	bf00      	nop
 8005702:	371c      	adds	r7, #28
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f003 031f 	and.w	r3, r3, #31
 800571e:	2201      	movs	r2, #1
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a1a      	ldr	r2, [r3, #32]
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	43db      	mvns	r3, r3
 800572e:	401a      	ands	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6a1a      	ldr	r2, [r3, #32]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f003 031f 	and.w	r3, r3, #31
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	fa01 f303 	lsl.w	r3, r1, r3
 8005744:	431a      	orrs	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800576c:	2302      	movs	r3, #2
 800576e:	e050      	b.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d018      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057bc:	d013      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a18      	ldr	r2, [pc, #96]	@ (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00e      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a16      	ldr	r2, [pc, #88]	@ (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d009      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a15      	ldr	r2, [pc, #84]	@ (800582c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d004      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a13      	ldr	r2, [pc, #76]	@ (8005830 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d10c      	bne.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40010000 	.word	0x40010000
 8005824:	40000400 	.word	0x40000400
 8005828:	40000800 	.word	0x40000800
 800582c:	40000c00 	.word	0x40000c00
 8005830:	40014000 	.word	0x40014000

08005834 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800584c:	2302      	movs	r3, #2
 800584e:	e03d      	b.n	80058cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4313      	orrs	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e042      	b.n	8005998 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fd f8c4 	bl	8002ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2224      	movs	r2, #36	@ 0x24
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005942:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fdd3 	bl	80064f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005968:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005978:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08a      	sub	sp, #40	@ 0x28
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	603b      	str	r3, [r7, #0]
 80059ac:	4613      	mov	r3, r2
 80059ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d175      	bne.n	8005aac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <HAL_UART_Transmit+0x2c>
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e06e      	b.n	8005aae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2221      	movs	r2, #33	@ 0x21
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059de:	f7fd fad9 	bl	8002f94 <HAL_GetTick>
 80059e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	88fa      	ldrh	r2, [r7, #6]
 80059e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	88fa      	ldrh	r2, [r7, #6]
 80059ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059f8:	d108      	bne.n	8005a0c <HAL_UART_Transmit+0x6c>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d104      	bne.n	8005a0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	e003      	b.n	8005a14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a10:	2300      	movs	r3, #0
 8005a12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a14:	e02e      	b.n	8005a74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2180      	movs	r1, #128	@ 0x80
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 fb37 	bl	8006094 <UART_WaitOnFlagUntilTimeout>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e03a      	b.n	8005aae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10b      	bne.n	8005a56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	3302      	adds	r3, #2
 8005a52:	61bb      	str	r3, [r7, #24]
 8005a54:	e007      	b.n	8005a66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	781a      	ldrb	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	3301      	adds	r3, #1
 8005a64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1cb      	bne.n	8005a16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2200      	movs	r2, #0
 8005a86:	2140      	movs	r1, #64	@ 0x40
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 fb03 	bl	8006094 <UART_WaitOnFlagUntilTimeout>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e006      	b.n	8005aae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	e000      	b.n	8005aae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005aac:	2302      	movs	r3, #2
  }
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3720      	adds	r7, #32
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b084      	sub	sp, #16
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b20      	cmp	r3, #32
 8005ace:	d112      	bne.n	8005af6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_UART_Receive_IT+0x26>
 8005ad6:	88fb      	ldrh	r3, [r7, #6]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e00b      	b.n	8005af8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 fb2a 	bl	8006146 <UART_Start_Receive_IT>
 8005af2:	4603      	mov	r3, r0
 8005af4:	e000      	b.n	8005af8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005af6:	2302      	movs	r3, #2
  }
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b0ba      	sub	sp, #232	@ 0xe8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005b3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10f      	bne.n	8005b66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b4a:	f003 0320 	and.w	r3, r3, #32
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d009      	beq.n	8005b66 <HAL_UART_IRQHandler+0x66>
 8005b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fc07 	bl	8006372 <UART_Receive_IT>
      return;
 8005b64:	e273      	b.n	800604e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 80de 	beq.w	8005d2c <HAL_UART_IRQHandler+0x22c>
 8005b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d106      	bne.n	8005b8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 80d1 	beq.w	8005d2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00b      	beq.n	8005bae <HAL_UART_IRQHandler+0xae>
 8005b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d005      	beq.n	8005bae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ba6:	f043 0201 	orr.w	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00b      	beq.n	8005bd2 <HAL_UART_IRQHandler+0xd2>
 8005bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d005      	beq.n	8005bd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bca:	f043 0202 	orr.w	r2, r3, #2
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00b      	beq.n	8005bf6 <HAL_UART_IRQHandler+0xf6>
 8005bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d005      	beq.n	8005bf6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bee:	f043 0204 	orr.w	r2, r3, #4
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d011      	beq.n	8005c26 <HAL_UART_IRQHandler+0x126>
 8005c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c06:	f003 0320 	and.w	r3, r3, #32
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d105      	bne.n	8005c1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1e:	f043 0208 	orr.w	r2, r3, #8
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 820a 	beq.w	8006044 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d008      	beq.n	8005c4e <HAL_UART_IRQHandler+0x14e>
 8005c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fb92 	bl	8006372 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c58:	2b40      	cmp	r3, #64	@ 0x40
 8005c5a:	bf0c      	ite	eq
 8005c5c:	2301      	moveq	r3, #1
 8005c5e:	2300      	movne	r3, #0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <HAL_UART_IRQHandler+0x17a>
 8005c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d04f      	beq.n	8005d1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fa9d 	bl	80061ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c8a:	2b40      	cmp	r3, #64	@ 0x40
 8005c8c:	d141      	bne.n	8005d12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3314      	adds	r3, #20
 8005c94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ca8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3314      	adds	r3, #20
 8005cb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005cba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005cc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005cca:	e841 2300 	strex	r3, r2, [r1]
 8005cce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1d9      	bne.n	8005c8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d013      	beq.n	8005d0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce6:	4a8a      	ldr	r2, [pc, #552]	@ (8005f10 <HAL_UART_IRQHandler+0x410>)
 8005ce8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fd ff6d 	bl	8003bce <HAL_DMA_Abort_IT>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d016      	beq.n	8005d28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005d04:	4610      	mov	r0, r2
 8005d06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d08:	e00e      	b.n	8005d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f9ac 	bl	8006068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d10:	e00a      	b.n	8005d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f9a8 	bl	8006068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d18:	e006      	b.n	8005d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f9a4 	bl	8006068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005d26:	e18d      	b.n	8006044 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d28:	bf00      	nop
    return;
 8005d2a:	e18b      	b.n	8006044 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	f040 8167 	bne.w	8006004 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d3a:	f003 0310 	and.w	r3, r3, #16
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 8160 	beq.w	8006004 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d48:	f003 0310 	and.w	r3, r3, #16
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 8159 	beq.w	8006004 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d52:	2300      	movs	r3, #0
 8005d54:	60bb      	str	r3, [r7, #8]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	60bb      	str	r3, [r7, #8]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	60bb      	str	r3, [r7, #8]
 8005d66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d72:	2b40      	cmp	r3, #64	@ 0x40
 8005d74:	f040 80ce 	bne.w	8005f14 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 80a9 	beq.w	8005ee0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d96:	429a      	cmp	r2, r3
 8005d98:	f080 80a2 	bcs.w	8005ee0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005da2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dae:	f000 8088 	beq.w	8005ec2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	330c      	adds	r3, #12
 8005db8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005dc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005dcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	330c      	adds	r3, #12
 8005dda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005dde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005de2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005dea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1d9      	bne.n	8005db2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3314      	adds	r3, #20
 8005e04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e08:	e853 3f00 	ldrex	r3, [r3]
 8005e0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e10:	f023 0301 	bic.w	r3, r3, #1
 8005e14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3314      	adds	r3, #20
 8005e1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005e26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005e2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005e34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1e1      	bne.n	8005dfe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3314      	adds	r3, #20
 8005e40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e44:	e853 3f00 	ldrex	r3, [r3]
 8005e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005e4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3314      	adds	r3, #20
 8005e5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005e5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e66:	e841 2300 	strex	r3, r2, [r1]
 8005e6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1e3      	bne.n	8005e3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	330c      	adds	r3, #12
 8005e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e8a:	e853 3f00 	ldrex	r3, [r3]
 8005e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e92:	f023 0310 	bic.w	r3, r3, #16
 8005e96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	330c      	adds	r3, #12
 8005ea0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005ea4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ea6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005eaa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005eac:	e841 2300 	strex	r3, r2, [r1]
 8005eb0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005eb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1e3      	bne.n	8005e80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7fd fe16 	bl	8003aee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f8cf 	bl	800607c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005ede:	e0b3      	b.n	8006048 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ee4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	f040 80ad 	bne.w	8006048 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ef8:	f040 80a6 	bne.w	8006048 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f8b7 	bl	800607c <HAL_UARTEx_RxEventCallback>
      return;
 8005f0e:	e09b      	b.n	8006048 <HAL_UART_IRQHandler+0x548>
 8005f10:	08006281 	.word	0x08006281
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 808e 	beq.w	800604c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005f30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 8089 	beq.w	800604c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	330c      	adds	r3, #12
 8005f40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	330c      	adds	r3, #12
 8005f5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005f5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e3      	bne.n	8005f3a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3314      	adds	r3, #20
 8005f78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	623b      	str	r3, [r7, #32]
   return(result);
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	f023 0301 	bic.w	r3, r3, #1
 8005f88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3314      	adds	r3, #20
 8005f92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f96:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e3      	bne.n	8005f72 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0310 	bic.w	r3, r3, #16
 8005fce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	330c      	adds	r3, #12
 8005fd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005fdc:	61fa      	str	r2, [r7, #28]
 8005fde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	69b9      	ldr	r1, [r7, #24]
 8005fe2:	69fa      	ldr	r2, [r7, #28]
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e3      	bne.n	8005fb8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ff6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f83d 	bl	800607c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006002:	e023      	b.n	800604c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800600c:	2b00      	cmp	r3, #0
 800600e:	d009      	beq.n	8006024 <HAL_UART_IRQHandler+0x524>
 8006010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f940 	bl	80062a2 <UART_Transmit_IT>
    return;
 8006022:	e014      	b.n	800604e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00e      	beq.n	800604e <HAL_UART_IRQHandler+0x54e>
 8006030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f980 	bl	8006342 <UART_EndTransmit_IT>
    return;
 8006042:	e004      	b.n	800604e <HAL_UART_IRQHandler+0x54e>
    return;
 8006044:	bf00      	nop
 8006046:	e002      	b.n	800604e <HAL_UART_IRQHandler+0x54e>
      return;
 8006048:	bf00      	nop
 800604a:	e000      	b.n	800604e <HAL_UART_IRQHandler+0x54e>
      return;
 800604c:	bf00      	nop
  }
}
 800604e:	37e8      	adds	r7, #232	@ 0xe8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	460b      	mov	r3, r1
 8006086:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	4613      	mov	r3, r2
 80060a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060a4:	e03b      	b.n	800611e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ac:	d037      	beq.n	800611e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ae:	f7fc ff71 	bl	8002f94 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	6a3a      	ldr	r2, [r7, #32]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d302      	bcc.n	80060c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e03a      	b.n	800613e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	f003 0304 	and.w	r3, r3, #4
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d023      	beq.n	800611e <UART_WaitOnFlagUntilTimeout+0x8a>
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b80      	cmp	r3, #128	@ 0x80
 80060da:	d020      	beq.n	800611e <UART_WaitOnFlagUntilTimeout+0x8a>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b40      	cmp	r3, #64	@ 0x40
 80060e0:	d01d      	beq.n	800611e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0308 	and.w	r3, r3, #8
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d116      	bne.n	800611e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 f857 	bl	80061ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2208      	movs	r2, #8
 8006110:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e00f      	b.n	800613e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	4013      	ands	r3, r2
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	429a      	cmp	r2, r3
 800612c:	bf0c      	ite	eq
 800612e:	2301      	moveq	r3, #1
 8006130:	2300      	movne	r3, #0
 8006132:	b2db      	uxtb	r3, r3
 8006134:	461a      	mov	r2, r3
 8006136:	79fb      	ldrb	r3, [r7, #7]
 8006138:	429a      	cmp	r2, r3
 800613a:	d0b4      	beq.n	80060a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006146:	b480      	push	{r7}
 8006148:	b085      	sub	sp, #20
 800614a:	af00      	add	r7, sp, #0
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	4613      	mov	r3, r2
 8006152:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	88fa      	ldrh	r2, [r7, #6]
 800615e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	88fa      	ldrh	r2, [r7, #6]
 8006164:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2222      	movs	r2, #34	@ 0x22
 8006170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d007      	beq.n	800618c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800618a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695a      	ldr	r2, [r3, #20]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f042 0201 	orr.w	r2, r2, #1
 800619a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0220 	orr.w	r2, r2, #32
 80061aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b095      	sub	sp, #84	@ 0x54
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	330c      	adds	r3, #12
 80061c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	330c      	adds	r3, #12
 80061e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80061e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061ea:	e841 2300 	strex	r3, r2, [r1]
 80061ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1e5      	bne.n	80061c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3314      	adds	r3, #20
 80061fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	61fb      	str	r3, [r7, #28]
   return(result);
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	f023 0301 	bic.w	r3, r3, #1
 800620c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3314      	adds	r3, #20
 8006214:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006216:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006218:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800621c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800621e:	e841 2300 	strex	r3, r2, [r1]
 8006222:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e5      	bne.n	80061f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800622e:	2b01      	cmp	r3, #1
 8006230:	d119      	bne.n	8006266 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	330c      	adds	r3, #12
 8006238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	60bb      	str	r3, [r7, #8]
   return(result);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f023 0310 	bic.w	r3, r3, #16
 8006248:	647b      	str	r3, [r7, #68]	@ 0x44
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	330c      	adds	r3, #12
 8006250:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006252:	61ba      	str	r2, [r7, #24]
 8006254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	6979      	ldr	r1, [r7, #20]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	613b      	str	r3, [r7, #16]
   return(result);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e5      	bne.n	8006232 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006274:	bf00      	nop
 8006276:	3754      	adds	r7, #84	@ 0x54
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800628c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f7ff fee7 	bl	8006068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800629a:	bf00      	nop
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b085      	sub	sp, #20
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b21      	cmp	r3, #33	@ 0x21
 80062b4:	d13e      	bne.n	8006334 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062be:	d114      	bne.n	80062ea <UART_Transmit_IT+0x48>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d110      	bne.n	80062ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	1c9a      	adds	r2, r3, #2
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	621a      	str	r2, [r3, #32]
 80062e8:	e008      	b.n	80062fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	1c59      	adds	r1, r3, #1
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	6211      	str	r1, [r2, #32]
 80062f4:	781a      	ldrb	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006300:	b29b      	uxth	r3, r3
 8006302:	3b01      	subs	r3, #1
 8006304:	b29b      	uxth	r3, r3
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	4619      	mov	r1, r3
 800630a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10f      	bne.n	8006330 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800631e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800632e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006330:	2300      	movs	r3, #0
 8006332:	e000      	b.n	8006336 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006334:	2302      	movs	r3, #2
  }
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006358:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7ff fe76 	bl	8006054 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b08c      	sub	sp, #48	@ 0x30
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800637a:	2300      	movs	r3, #0
 800637c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800637e:	2300      	movs	r3, #0
 8006380:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b22      	cmp	r3, #34	@ 0x22
 800638c:	f040 80aa 	bne.w	80064e4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006398:	d115      	bne.n	80063c6 <UART_Receive_IT+0x54>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d111      	bne.n	80063c6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063be:	1c9a      	adds	r2, r3, #2
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80063c4:	e024      	b.n	8006410 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d4:	d007      	beq.n	80063e6 <UART_Receive_IT+0x74>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10a      	bne.n	80063f4 <UART_Receive_IT+0x82>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f0:	701a      	strb	r2, [r3, #0]
 80063f2:	e008      	b.n	8006406 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006400:	b2da      	uxtb	r2, r3
 8006402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006404:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29b      	uxth	r3, r3
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	4619      	mov	r1, r3
 800641e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006420:	2b00      	cmp	r3, #0
 8006422:	d15d      	bne.n	80064e0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68da      	ldr	r2, [r3, #12]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0220 	bic.w	r2, r2, #32
 8006432:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006442:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695a      	ldr	r2, [r3, #20]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0201 	bic.w	r2, r2, #1
 8006452:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2220      	movs	r2, #32
 8006458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006466:	2b01      	cmp	r3, #1
 8006468:	d135      	bne.n	80064d6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	330c      	adds	r3, #12
 8006476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	613b      	str	r3, [r7, #16]
   return(result);
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f023 0310 	bic.w	r3, r3, #16
 8006486:	627b      	str	r3, [r7, #36]	@ 0x24
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006490:	623a      	str	r2, [r7, #32]
 8006492:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	69f9      	ldr	r1, [r7, #28]
 8006496:	6a3a      	ldr	r2, [r7, #32]
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	61bb      	str	r3, [r7, #24]
   return(result);
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e5      	bne.n	8006470 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0310 	and.w	r3, r3, #16
 80064ae:	2b10      	cmp	r3, #16
 80064b0:	d10a      	bne.n	80064c8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff fdd4 	bl	800607c <HAL_UARTEx_RxEventCallback>
 80064d4:	e002      	b.n	80064dc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fb f8a0 	bl	800161c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	e002      	b.n	80064e6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	e000      	b.n	80064e6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80064e4:	2302      	movs	r3, #2
  }
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3730      	adds	r7, #48	@ 0x30
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f4:	b0c0      	sub	sp, #256	@ 0x100
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800650c:	68d9      	ldr	r1, [r3, #12]
 800650e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	ea40 0301 	orr.w	r3, r0, r1
 8006518:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800651a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	431a      	orrs	r2, r3
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	431a      	orrs	r2, r3
 8006530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800653c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006548:	f021 010c 	bic.w	r1, r1, #12
 800654c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006556:	430b      	orrs	r3, r1
 8006558:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800655a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656a:	6999      	ldr	r1, [r3, #24]
 800656c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	ea40 0301 	orr.w	r3, r0, r1
 8006576:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	4b8f      	ldr	r3, [pc, #572]	@ (80067bc <UART_SetConfig+0x2cc>)
 8006580:	429a      	cmp	r2, r3
 8006582:	d005      	beq.n	8006590 <UART_SetConfig+0xa0>
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	4b8d      	ldr	r3, [pc, #564]	@ (80067c0 <UART_SetConfig+0x2d0>)
 800658c:	429a      	cmp	r2, r3
 800658e:	d104      	bne.n	800659a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006590:	f7fe f99e 	bl	80048d0 <HAL_RCC_GetPCLK2Freq>
 8006594:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006598:	e003      	b.n	80065a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800659a:	f7fe f985 	bl	80048a8 <HAL_RCC_GetPCLK1Freq>
 800659e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065ac:	f040 810c 	bne.w	80067c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065b4:	2200      	movs	r2, #0
 80065b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80065be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065c2:	4622      	mov	r2, r4
 80065c4:	462b      	mov	r3, r5
 80065c6:	1891      	adds	r1, r2, r2
 80065c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80065ca:	415b      	adcs	r3, r3
 80065cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065d2:	4621      	mov	r1, r4
 80065d4:	eb12 0801 	adds.w	r8, r2, r1
 80065d8:	4629      	mov	r1, r5
 80065da:	eb43 0901 	adc.w	r9, r3, r1
 80065de:	f04f 0200 	mov.w	r2, #0
 80065e2:	f04f 0300 	mov.w	r3, #0
 80065e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065f2:	4690      	mov	r8, r2
 80065f4:	4699      	mov	r9, r3
 80065f6:	4623      	mov	r3, r4
 80065f8:	eb18 0303 	adds.w	r3, r8, r3
 80065fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006600:	462b      	mov	r3, r5
 8006602:	eb49 0303 	adc.w	r3, r9, r3
 8006606:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800660a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006616:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800661a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800661e:	460b      	mov	r3, r1
 8006620:	18db      	adds	r3, r3, r3
 8006622:	653b      	str	r3, [r7, #80]	@ 0x50
 8006624:	4613      	mov	r3, r2
 8006626:	eb42 0303 	adc.w	r3, r2, r3
 800662a:	657b      	str	r3, [r7, #84]	@ 0x54
 800662c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006630:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006634:	f7fa fb20 	bl	8000c78 <__aeabi_uldivmod>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4b61      	ldr	r3, [pc, #388]	@ (80067c4 <UART_SetConfig+0x2d4>)
 800663e:	fba3 2302 	umull	r2, r3, r3, r2
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	011c      	lsls	r4, r3, #4
 8006646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800664a:	2200      	movs	r2, #0
 800664c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006650:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006654:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006658:	4642      	mov	r2, r8
 800665a:	464b      	mov	r3, r9
 800665c:	1891      	adds	r1, r2, r2
 800665e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006660:	415b      	adcs	r3, r3
 8006662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006664:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006668:	4641      	mov	r1, r8
 800666a:	eb12 0a01 	adds.w	sl, r2, r1
 800666e:	4649      	mov	r1, r9
 8006670:	eb43 0b01 	adc.w	fp, r3, r1
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006680:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006684:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006688:	4692      	mov	sl, r2
 800668a:	469b      	mov	fp, r3
 800668c:	4643      	mov	r3, r8
 800668e:	eb1a 0303 	adds.w	r3, sl, r3
 8006692:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006696:	464b      	mov	r3, r9
 8006698:	eb4b 0303 	adc.w	r3, fp, r3
 800669c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80066b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80066b4:	460b      	mov	r3, r1
 80066b6:	18db      	adds	r3, r3, r3
 80066b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80066ba:	4613      	mov	r3, r2
 80066bc:	eb42 0303 	adc.w	r3, r2, r3
 80066c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80066c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80066ca:	f7fa fad5 	bl	8000c78 <__aeabi_uldivmod>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4611      	mov	r1, r2
 80066d4:	4b3b      	ldr	r3, [pc, #236]	@ (80067c4 <UART_SetConfig+0x2d4>)
 80066d6:	fba3 2301 	umull	r2, r3, r3, r1
 80066da:	095b      	lsrs	r3, r3, #5
 80066dc:	2264      	movs	r2, #100	@ 0x64
 80066de:	fb02 f303 	mul.w	r3, r2, r3
 80066e2:	1acb      	subs	r3, r1, r3
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066ea:	4b36      	ldr	r3, [pc, #216]	@ (80067c4 <UART_SetConfig+0x2d4>)
 80066ec:	fba3 2302 	umull	r2, r3, r3, r2
 80066f0:	095b      	lsrs	r3, r3, #5
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80066f8:	441c      	add	r4, r3
 80066fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066fe:	2200      	movs	r2, #0
 8006700:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006704:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006708:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800670c:	4642      	mov	r2, r8
 800670e:	464b      	mov	r3, r9
 8006710:	1891      	adds	r1, r2, r2
 8006712:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006714:	415b      	adcs	r3, r3
 8006716:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006718:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800671c:	4641      	mov	r1, r8
 800671e:	1851      	adds	r1, r2, r1
 8006720:	6339      	str	r1, [r7, #48]	@ 0x30
 8006722:	4649      	mov	r1, r9
 8006724:	414b      	adcs	r3, r1
 8006726:	637b      	str	r3, [r7, #52]	@ 0x34
 8006728:	f04f 0200 	mov.w	r2, #0
 800672c:	f04f 0300 	mov.w	r3, #0
 8006730:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006734:	4659      	mov	r1, fp
 8006736:	00cb      	lsls	r3, r1, #3
 8006738:	4651      	mov	r1, sl
 800673a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800673e:	4651      	mov	r1, sl
 8006740:	00ca      	lsls	r2, r1, #3
 8006742:	4610      	mov	r0, r2
 8006744:	4619      	mov	r1, r3
 8006746:	4603      	mov	r3, r0
 8006748:	4642      	mov	r2, r8
 800674a:	189b      	adds	r3, r3, r2
 800674c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006750:	464b      	mov	r3, r9
 8006752:	460a      	mov	r2, r1
 8006754:	eb42 0303 	adc.w	r3, r2, r3
 8006758:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800675c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006768:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800676c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006770:	460b      	mov	r3, r1
 8006772:	18db      	adds	r3, r3, r3
 8006774:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006776:	4613      	mov	r3, r2
 8006778:	eb42 0303 	adc.w	r3, r2, r3
 800677c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800677e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006782:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006786:	f7fa fa77 	bl	8000c78 <__aeabi_uldivmod>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	4b0d      	ldr	r3, [pc, #52]	@ (80067c4 <UART_SetConfig+0x2d4>)
 8006790:	fba3 1302 	umull	r1, r3, r3, r2
 8006794:	095b      	lsrs	r3, r3, #5
 8006796:	2164      	movs	r1, #100	@ 0x64
 8006798:	fb01 f303 	mul.w	r3, r1, r3
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	3332      	adds	r3, #50	@ 0x32
 80067a2:	4a08      	ldr	r2, [pc, #32]	@ (80067c4 <UART_SetConfig+0x2d4>)
 80067a4:	fba2 2303 	umull	r2, r3, r2, r3
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	f003 0207 	and.w	r2, r3, #7
 80067ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4422      	add	r2, r4
 80067b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067b8:	e106      	b.n	80069c8 <UART_SetConfig+0x4d8>
 80067ba:	bf00      	nop
 80067bc:	40011000 	.word	0x40011000
 80067c0:	40011400 	.word	0x40011400
 80067c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067cc:	2200      	movs	r2, #0
 80067ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80067d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80067da:	4642      	mov	r2, r8
 80067dc:	464b      	mov	r3, r9
 80067de:	1891      	adds	r1, r2, r2
 80067e0:	6239      	str	r1, [r7, #32]
 80067e2:	415b      	adcs	r3, r3
 80067e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80067e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067ea:	4641      	mov	r1, r8
 80067ec:	1854      	adds	r4, r2, r1
 80067ee:	4649      	mov	r1, r9
 80067f0:	eb43 0501 	adc.w	r5, r3, r1
 80067f4:	f04f 0200 	mov.w	r2, #0
 80067f8:	f04f 0300 	mov.w	r3, #0
 80067fc:	00eb      	lsls	r3, r5, #3
 80067fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006802:	00e2      	lsls	r2, r4, #3
 8006804:	4614      	mov	r4, r2
 8006806:	461d      	mov	r5, r3
 8006808:	4643      	mov	r3, r8
 800680a:	18e3      	adds	r3, r4, r3
 800680c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006810:	464b      	mov	r3, r9
 8006812:	eb45 0303 	adc.w	r3, r5, r3
 8006816:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800681a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006826:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800682a:	f04f 0200 	mov.w	r2, #0
 800682e:	f04f 0300 	mov.w	r3, #0
 8006832:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006836:	4629      	mov	r1, r5
 8006838:	008b      	lsls	r3, r1, #2
 800683a:	4621      	mov	r1, r4
 800683c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006840:	4621      	mov	r1, r4
 8006842:	008a      	lsls	r2, r1, #2
 8006844:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006848:	f7fa fa16 	bl	8000c78 <__aeabi_uldivmod>
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	4b60      	ldr	r3, [pc, #384]	@ (80069d4 <UART_SetConfig+0x4e4>)
 8006852:	fba3 2302 	umull	r2, r3, r3, r2
 8006856:	095b      	lsrs	r3, r3, #5
 8006858:	011c      	lsls	r4, r3, #4
 800685a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800685e:	2200      	movs	r2, #0
 8006860:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006864:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006868:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800686c:	4642      	mov	r2, r8
 800686e:	464b      	mov	r3, r9
 8006870:	1891      	adds	r1, r2, r2
 8006872:	61b9      	str	r1, [r7, #24]
 8006874:	415b      	adcs	r3, r3
 8006876:	61fb      	str	r3, [r7, #28]
 8006878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800687c:	4641      	mov	r1, r8
 800687e:	1851      	adds	r1, r2, r1
 8006880:	6139      	str	r1, [r7, #16]
 8006882:	4649      	mov	r1, r9
 8006884:	414b      	adcs	r3, r1
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006894:	4659      	mov	r1, fp
 8006896:	00cb      	lsls	r3, r1, #3
 8006898:	4651      	mov	r1, sl
 800689a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800689e:	4651      	mov	r1, sl
 80068a0:	00ca      	lsls	r2, r1, #3
 80068a2:	4610      	mov	r0, r2
 80068a4:	4619      	mov	r1, r3
 80068a6:	4603      	mov	r3, r0
 80068a8:	4642      	mov	r2, r8
 80068aa:	189b      	adds	r3, r3, r2
 80068ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068b0:	464b      	mov	r3, r9
 80068b2:	460a      	mov	r2, r1
 80068b4:	eb42 0303 	adc.w	r3, r2, r3
 80068b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80068c8:	f04f 0200 	mov.w	r2, #0
 80068cc:	f04f 0300 	mov.w	r3, #0
 80068d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80068d4:	4649      	mov	r1, r9
 80068d6:	008b      	lsls	r3, r1, #2
 80068d8:	4641      	mov	r1, r8
 80068da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068de:	4641      	mov	r1, r8
 80068e0:	008a      	lsls	r2, r1, #2
 80068e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80068e6:	f7fa f9c7 	bl	8000c78 <__aeabi_uldivmod>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	4611      	mov	r1, r2
 80068f0:	4b38      	ldr	r3, [pc, #224]	@ (80069d4 <UART_SetConfig+0x4e4>)
 80068f2:	fba3 2301 	umull	r2, r3, r3, r1
 80068f6:	095b      	lsrs	r3, r3, #5
 80068f8:	2264      	movs	r2, #100	@ 0x64
 80068fa:	fb02 f303 	mul.w	r3, r2, r3
 80068fe:	1acb      	subs	r3, r1, r3
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	3332      	adds	r3, #50	@ 0x32
 8006904:	4a33      	ldr	r2, [pc, #204]	@ (80069d4 <UART_SetConfig+0x4e4>)
 8006906:	fba2 2303 	umull	r2, r3, r2, r3
 800690a:	095b      	lsrs	r3, r3, #5
 800690c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006910:	441c      	add	r4, r3
 8006912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006916:	2200      	movs	r2, #0
 8006918:	673b      	str	r3, [r7, #112]	@ 0x70
 800691a:	677a      	str	r2, [r7, #116]	@ 0x74
 800691c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006920:	4642      	mov	r2, r8
 8006922:	464b      	mov	r3, r9
 8006924:	1891      	adds	r1, r2, r2
 8006926:	60b9      	str	r1, [r7, #8]
 8006928:	415b      	adcs	r3, r3
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006930:	4641      	mov	r1, r8
 8006932:	1851      	adds	r1, r2, r1
 8006934:	6039      	str	r1, [r7, #0]
 8006936:	4649      	mov	r1, r9
 8006938:	414b      	adcs	r3, r1
 800693a:	607b      	str	r3, [r7, #4]
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006948:	4659      	mov	r1, fp
 800694a:	00cb      	lsls	r3, r1, #3
 800694c:	4651      	mov	r1, sl
 800694e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006952:	4651      	mov	r1, sl
 8006954:	00ca      	lsls	r2, r1, #3
 8006956:	4610      	mov	r0, r2
 8006958:	4619      	mov	r1, r3
 800695a:	4603      	mov	r3, r0
 800695c:	4642      	mov	r2, r8
 800695e:	189b      	adds	r3, r3, r2
 8006960:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006962:	464b      	mov	r3, r9
 8006964:	460a      	mov	r2, r1
 8006966:	eb42 0303 	adc.w	r3, r2, r3
 800696a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800696c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	663b      	str	r3, [r7, #96]	@ 0x60
 8006976:	667a      	str	r2, [r7, #100]	@ 0x64
 8006978:	f04f 0200 	mov.w	r2, #0
 800697c:	f04f 0300 	mov.w	r3, #0
 8006980:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006984:	4649      	mov	r1, r9
 8006986:	008b      	lsls	r3, r1, #2
 8006988:	4641      	mov	r1, r8
 800698a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800698e:	4641      	mov	r1, r8
 8006990:	008a      	lsls	r2, r1, #2
 8006992:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006996:	f7fa f96f 	bl	8000c78 <__aeabi_uldivmod>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	4b0d      	ldr	r3, [pc, #52]	@ (80069d4 <UART_SetConfig+0x4e4>)
 80069a0:	fba3 1302 	umull	r1, r3, r3, r2
 80069a4:	095b      	lsrs	r3, r3, #5
 80069a6:	2164      	movs	r1, #100	@ 0x64
 80069a8:	fb01 f303 	mul.w	r3, r1, r3
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	3332      	adds	r3, #50	@ 0x32
 80069b2:	4a08      	ldr	r2, [pc, #32]	@ (80069d4 <UART_SetConfig+0x4e4>)
 80069b4:	fba2 2303 	umull	r2, r3, r2, r3
 80069b8:	095b      	lsrs	r3, r3, #5
 80069ba:	f003 020f 	and.w	r2, r3, #15
 80069be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4422      	add	r2, r4
 80069c6:	609a      	str	r2, [r3, #8]
}
 80069c8:	bf00      	nop
 80069ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069ce:	46bd      	mov	sp, r7
 80069d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069d4:	51eb851f 	.word	0x51eb851f

080069d8 <atoi>:
 80069d8:	220a      	movs	r2, #10
 80069da:	2100      	movs	r1, #0
 80069dc:	f000 b87a 	b.w	8006ad4 <strtol>

080069e0 <_strtol_l.isra.0>:
 80069e0:	2b24      	cmp	r3, #36	@ 0x24
 80069e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e6:	4686      	mov	lr, r0
 80069e8:	4690      	mov	r8, r2
 80069ea:	d801      	bhi.n	80069f0 <_strtol_l.isra.0+0x10>
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d106      	bne.n	80069fe <_strtol_l.isra.0+0x1e>
 80069f0:	f000 ffe8 	bl	80079c4 <__errno>
 80069f4:	2316      	movs	r3, #22
 80069f6:	6003      	str	r3, [r0, #0]
 80069f8:	2000      	movs	r0, #0
 80069fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069fe:	4834      	ldr	r0, [pc, #208]	@ (8006ad0 <_strtol_l.isra.0+0xf0>)
 8006a00:	460d      	mov	r5, r1
 8006a02:	462a      	mov	r2, r5
 8006a04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a08:	5d06      	ldrb	r6, [r0, r4]
 8006a0a:	f016 0608 	ands.w	r6, r6, #8
 8006a0e:	d1f8      	bne.n	8006a02 <_strtol_l.isra.0+0x22>
 8006a10:	2c2d      	cmp	r4, #45	@ 0x2d
 8006a12:	d110      	bne.n	8006a36 <_strtol_l.isra.0+0x56>
 8006a14:	782c      	ldrb	r4, [r5, #0]
 8006a16:	2601      	movs	r6, #1
 8006a18:	1c95      	adds	r5, r2, #2
 8006a1a:	f033 0210 	bics.w	r2, r3, #16
 8006a1e:	d115      	bne.n	8006a4c <_strtol_l.isra.0+0x6c>
 8006a20:	2c30      	cmp	r4, #48	@ 0x30
 8006a22:	d10d      	bne.n	8006a40 <_strtol_l.isra.0+0x60>
 8006a24:	782a      	ldrb	r2, [r5, #0]
 8006a26:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006a2a:	2a58      	cmp	r2, #88	@ 0x58
 8006a2c:	d108      	bne.n	8006a40 <_strtol_l.isra.0+0x60>
 8006a2e:	786c      	ldrb	r4, [r5, #1]
 8006a30:	3502      	adds	r5, #2
 8006a32:	2310      	movs	r3, #16
 8006a34:	e00a      	b.n	8006a4c <_strtol_l.isra.0+0x6c>
 8006a36:	2c2b      	cmp	r4, #43	@ 0x2b
 8006a38:	bf04      	itt	eq
 8006a3a:	782c      	ldrbeq	r4, [r5, #0]
 8006a3c:	1c95      	addeq	r5, r2, #2
 8006a3e:	e7ec      	b.n	8006a1a <_strtol_l.isra.0+0x3a>
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1f6      	bne.n	8006a32 <_strtol_l.isra.0+0x52>
 8006a44:	2c30      	cmp	r4, #48	@ 0x30
 8006a46:	bf14      	ite	ne
 8006a48:	230a      	movne	r3, #10
 8006a4a:	2308      	moveq	r3, #8
 8006a4c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006a50:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006a54:	2200      	movs	r2, #0
 8006a56:	fbbc f9f3 	udiv	r9, ip, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	fb03 ca19 	mls	sl, r3, r9, ip
 8006a60:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006a64:	2f09      	cmp	r7, #9
 8006a66:	d80f      	bhi.n	8006a88 <_strtol_l.isra.0+0xa8>
 8006a68:	463c      	mov	r4, r7
 8006a6a:	42a3      	cmp	r3, r4
 8006a6c:	dd1b      	ble.n	8006aa6 <_strtol_l.isra.0+0xc6>
 8006a6e:	1c57      	adds	r7, r2, #1
 8006a70:	d007      	beq.n	8006a82 <_strtol_l.isra.0+0xa2>
 8006a72:	4581      	cmp	r9, r0
 8006a74:	d314      	bcc.n	8006aa0 <_strtol_l.isra.0+0xc0>
 8006a76:	d101      	bne.n	8006a7c <_strtol_l.isra.0+0x9c>
 8006a78:	45a2      	cmp	sl, r4
 8006a7a:	db11      	blt.n	8006aa0 <_strtol_l.isra.0+0xc0>
 8006a7c:	fb00 4003 	mla	r0, r0, r3, r4
 8006a80:	2201      	movs	r2, #1
 8006a82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a86:	e7eb      	b.n	8006a60 <_strtol_l.isra.0+0x80>
 8006a88:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006a8c:	2f19      	cmp	r7, #25
 8006a8e:	d801      	bhi.n	8006a94 <_strtol_l.isra.0+0xb4>
 8006a90:	3c37      	subs	r4, #55	@ 0x37
 8006a92:	e7ea      	b.n	8006a6a <_strtol_l.isra.0+0x8a>
 8006a94:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006a98:	2f19      	cmp	r7, #25
 8006a9a:	d804      	bhi.n	8006aa6 <_strtol_l.isra.0+0xc6>
 8006a9c:	3c57      	subs	r4, #87	@ 0x57
 8006a9e:	e7e4      	b.n	8006a6a <_strtol_l.isra.0+0x8a>
 8006aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa4:	e7ed      	b.n	8006a82 <_strtol_l.isra.0+0xa2>
 8006aa6:	1c53      	adds	r3, r2, #1
 8006aa8:	d108      	bne.n	8006abc <_strtol_l.isra.0+0xdc>
 8006aaa:	2322      	movs	r3, #34	@ 0x22
 8006aac:	f8ce 3000 	str.w	r3, [lr]
 8006ab0:	4660      	mov	r0, ip
 8006ab2:	f1b8 0f00 	cmp.w	r8, #0
 8006ab6:	d0a0      	beq.n	80069fa <_strtol_l.isra.0+0x1a>
 8006ab8:	1e69      	subs	r1, r5, #1
 8006aba:	e006      	b.n	8006aca <_strtol_l.isra.0+0xea>
 8006abc:	b106      	cbz	r6, 8006ac0 <_strtol_l.isra.0+0xe0>
 8006abe:	4240      	negs	r0, r0
 8006ac0:	f1b8 0f00 	cmp.w	r8, #0
 8006ac4:	d099      	beq.n	80069fa <_strtol_l.isra.0+0x1a>
 8006ac6:	2a00      	cmp	r2, #0
 8006ac8:	d1f6      	bne.n	8006ab8 <_strtol_l.isra.0+0xd8>
 8006aca:	f8c8 1000 	str.w	r1, [r8]
 8006ace:	e794      	b.n	80069fa <_strtol_l.isra.0+0x1a>
 8006ad0:	0800ac9d 	.word	0x0800ac9d

08006ad4 <strtol>:
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	460a      	mov	r2, r1
 8006ad8:	4601      	mov	r1, r0
 8006ada:	4802      	ldr	r0, [pc, #8]	@ (8006ae4 <strtol+0x10>)
 8006adc:	6800      	ldr	r0, [r0, #0]
 8006ade:	f7ff bf7f 	b.w	80069e0 <_strtol_l.isra.0>
 8006ae2:	bf00      	nop
 8006ae4:	20000020 	.word	0x20000020

08006ae8 <__cvt>:
 8006ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aec:	ec57 6b10 	vmov	r6, r7, d0
 8006af0:	2f00      	cmp	r7, #0
 8006af2:	460c      	mov	r4, r1
 8006af4:	4619      	mov	r1, r3
 8006af6:	463b      	mov	r3, r7
 8006af8:	bfbb      	ittet	lt
 8006afa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006afe:	461f      	movlt	r7, r3
 8006b00:	2300      	movge	r3, #0
 8006b02:	232d      	movlt	r3, #45	@ 0x2d
 8006b04:	700b      	strb	r3, [r1, #0]
 8006b06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006b0c:	4691      	mov	r9, r2
 8006b0e:	f023 0820 	bic.w	r8, r3, #32
 8006b12:	bfbc      	itt	lt
 8006b14:	4632      	movlt	r2, r6
 8006b16:	4616      	movlt	r6, r2
 8006b18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b1c:	d005      	beq.n	8006b2a <__cvt+0x42>
 8006b1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006b22:	d100      	bne.n	8006b26 <__cvt+0x3e>
 8006b24:	3401      	adds	r4, #1
 8006b26:	2102      	movs	r1, #2
 8006b28:	e000      	b.n	8006b2c <__cvt+0x44>
 8006b2a:	2103      	movs	r1, #3
 8006b2c:	ab03      	add	r3, sp, #12
 8006b2e:	9301      	str	r3, [sp, #4]
 8006b30:	ab02      	add	r3, sp, #8
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	ec47 6b10 	vmov	d0, r6, r7
 8006b38:	4653      	mov	r3, sl
 8006b3a:	4622      	mov	r2, r4
 8006b3c:	f001 f82c 	bl	8007b98 <_dtoa_r>
 8006b40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006b44:	4605      	mov	r5, r0
 8006b46:	d119      	bne.n	8006b7c <__cvt+0x94>
 8006b48:	f019 0f01 	tst.w	r9, #1
 8006b4c:	d00e      	beq.n	8006b6c <__cvt+0x84>
 8006b4e:	eb00 0904 	add.w	r9, r0, r4
 8006b52:	2200      	movs	r2, #0
 8006b54:	2300      	movs	r3, #0
 8006b56:	4630      	mov	r0, r6
 8006b58:	4639      	mov	r1, r7
 8006b5a:	f7f9 ffcd 	bl	8000af8 <__aeabi_dcmpeq>
 8006b5e:	b108      	cbz	r0, 8006b64 <__cvt+0x7c>
 8006b60:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b64:	2230      	movs	r2, #48	@ 0x30
 8006b66:	9b03      	ldr	r3, [sp, #12]
 8006b68:	454b      	cmp	r3, r9
 8006b6a:	d31e      	bcc.n	8006baa <__cvt+0xc2>
 8006b6c:	9b03      	ldr	r3, [sp, #12]
 8006b6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b70:	1b5b      	subs	r3, r3, r5
 8006b72:	4628      	mov	r0, r5
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	b004      	add	sp, #16
 8006b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b80:	eb00 0904 	add.w	r9, r0, r4
 8006b84:	d1e5      	bne.n	8006b52 <__cvt+0x6a>
 8006b86:	7803      	ldrb	r3, [r0, #0]
 8006b88:	2b30      	cmp	r3, #48	@ 0x30
 8006b8a:	d10a      	bne.n	8006ba2 <__cvt+0xba>
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2300      	movs	r3, #0
 8006b90:	4630      	mov	r0, r6
 8006b92:	4639      	mov	r1, r7
 8006b94:	f7f9 ffb0 	bl	8000af8 <__aeabi_dcmpeq>
 8006b98:	b918      	cbnz	r0, 8006ba2 <__cvt+0xba>
 8006b9a:	f1c4 0401 	rsb	r4, r4, #1
 8006b9e:	f8ca 4000 	str.w	r4, [sl]
 8006ba2:	f8da 3000 	ldr.w	r3, [sl]
 8006ba6:	4499      	add	r9, r3
 8006ba8:	e7d3      	b.n	8006b52 <__cvt+0x6a>
 8006baa:	1c59      	adds	r1, r3, #1
 8006bac:	9103      	str	r1, [sp, #12]
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	e7d9      	b.n	8006b66 <__cvt+0x7e>

08006bb2 <__exponent>:
 8006bb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bb4:	2900      	cmp	r1, #0
 8006bb6:	bfba      	itte	lt
 8006bb8:	4249      	neglt	r1, r1
 8006bba:	232d      	movlt	r3, #45	@ 0x2d
 8006bbc:	232b      	movge	r3, #43	@ 0x2b
 8006bbe:	2909      	cmp	r1, #9
 8006bc0:	7002      	strb	r2, [r0, #0]
 8006bc2:	7043      	strb	r3, [r0, #1]
 8006bc4:	dd29      	ble.n	8006c1a <__exponent+0x68>
 8006bc6:	f10d 0307 	add.w	r3, sp, #7
 8006bca:	461d      	mov	r5, r3
 8006bcc:	270a      	movs	r7, #10
 8006bce:	461a      	mov	r2, r3
 8006bd0:	fbb1 f6f7 	udiv	r6, r1, r7
 8006bd4:	fb07 1416 	mls	r4, r7, r6, r1
 8006bd8:	3430      	adds	r4, #48	@ 0x30
 8006bda:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006bde:	460c      	mov	r4, r1
 8006be0:	2c63      	cmp	r4, #99	@ 0x63
 8006be2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006be6:	4631      	mov	r1, r6
 8006be8:	dcf1      	bgt.n	8006bce <__exponent+0x1c>
 8006bea:	3130      	adds	r1, #48	@ 0x30
 8006bec:	1e94      	subs	r4, r2, #2
 8006bee:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006bf2:	1c41      	adds	r1, r0, #1
 8006bf4:	4623      	mov	r3, r4
 8006bf6:	42ab      	cmp	r3, r5
 8006bf8:	d30a      	bcc.n	8006c10 <__exponent+0x5e>
 8006bfa:	f10d 0309 	add.w	r3, sp, #9
 8006bfe:	1a9b      	subs	r3, r3, r2
 8006c00:	42ac      	cmp	r4, r5
 8006c02:	bf88      	it	hi
 8006c04:	2300      	movhi	r3, #0
 8006c06:	3302      	adds	r3, #2
 8006c08:	4403      	add	r3, r0
 8006c0a:	1a18      	subs	r0, r3, r0
 8006c0c:	b003      	add	sp, #12
 8006c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c10:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006c14:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006c18:	e7ed      	b.n	8006bf6 <__exponent+0x44>
 8006c1a:	2330      	movs	r3, #48	@ 0x30
 8006c1c:	3130      	adds	r1, #48	@ 0x30
 8006c1e:	7083      	strb	r3, [r0, #2]
 8006c20:	70c1      	strb	r1, [r0, #3]
 8006c22:	1d03      	adds	r3, r0, #4
 8006c24:	e7f1      	b.n	8006c0a <__exponent+0x58>
	...

08006c28 <_printf_float>:
 8006c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c2c:	b08d      	sub	sp, #52	@ 0x34
 8006c2e:	460c      	mov	r4, r1
 8006c30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006c34:	4616      	mov	r6, r2
 8006c36:	461f      	mov	r7, r3
 8006c38:	4605      	mov	r5, r0
 8006c3a:	f000 fe79 	bl	8007930 <_localeconv_r>
 8006c3e:	6803      	ldr	r3, [r0, #0]
 8006c40:	9304      	str	r3, [sp, #16]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7f9 fb2c 	bl	80002a0 <strlen>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c50:	9005      	str	r0, [sp, #20]
 8006c52:	3307      	adds	r3, #7
 8006c54:	f023 0307 	bic.w	r3, r3, #7
 8006c58:	f103 0208 	add.w	r2, r3, #8
 8006c5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006c60:	f8d4 b000 	ldr.w	fp, [r4]
 8006c64:	f8c8 2000 	str.w	r2, [r8]
 8006c68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006c70:	9307      	str	r3, [sp, #28]
 8006c72:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006c7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c7e:	4b9c      	ldr	r3, [pc, #624]	@ (8006ef0 <_printf_float+0x2c8>)
 8006c80:	f04f 32ff 	mov.w	r2, #4294967295
 8006c84:	f7f9 ff6a 	bl	8000b5c <__aeabi_dcmpun>
 8006c88:	bb70      	cbnz	r0, 8006ce8 <_printf_float+0xc0>
 8006c8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c8e:	4b98      	ldr	r3, [pc, #608]	@ (8006ef0 <_printf_float+0x2c8>)
 8006c90:	f04f 32ff 	mov.w	r2, #4294967295
 8006c94:	f7f9 ff44 	bl	8000b20 <__aeabi_dcmple>
 8006c98:	bb30      	cbnz	r0, 8006ce8 <_printf_float+0xc0>
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	4640      	mov	r0, r8
 8006ca0:	4649      	mov	r1, r9
 8006ca2:	f7f9 ff33 	bl	8000b0c <__aeabi_dcmplt>
 8006ca6:	b110      	cbz	r0, 8006cae <_printf_float+0x86>
 8006ca8:	232d      	movs	r3, #45	@ 0x2d
 8006caa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cae:	4a91      	ldr	r2, [pc, #580]	@ (8006ef4 <_printf_float+0x2cc>)
 8006cb0:	4b91      	ldr	r3, [pc, #580]	@ (8006ef8 <_printf_float+0x2d0>)
 8006cb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006cb6:	bf8c      	ite	hi
 8006cb8:	4690      	movhi	r8, r2
 8006cba:	4698      	movls	r8, r3
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	6123      	str	r3, [r4, #16]
 8006cc0:	f02b 0304 	bic.w	r3, fp, #4
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	f04f 0900 	mov.w	r9, #0
 8006cca:	9700      	str	r7, [sp, #0]
 8006ccc:	4633      	mov	r3, r6
 8006cce:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	f000 f9d2 	bl	800707c <_printf_common>
 8006cd8:	3001      	adds	r0, #1
 8006cda:	f040 808d 	bne.w	8006df8 <_printf_float+0x1d0>
 8006cde:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce2:	b00d      	add	sp, #52	@ 0x34
 8006ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce8:	4642      	mov	r2, r8
 8006cea:	464b      	mov	r3, r9
 8006cec:	4640      	mov	r0, r8
 8006cee:	4649      	mov	r1, r9
 8006cf0:	f7f9 ff34 	bl	8000b5c <__aeabi_dcmpun>
 8006cf4:	b140      	cbz	r0, 8006d08 <_printf_float+0xe0>
 8006cf6:	464b      	mov	r3, r9
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	bfbc      	itt	lt
 8006cfc:	232d      	movlt	r3, #45	@ 0x2d
 8006cfe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006d02:	4a7e      	ldr	r2, [pc, #504]	@ (8006efc <_printf_float+0x2d4>)
 8006d04:	4b7e      	ldr	r3, [pc, #504]	@ (8006f00 <_printf_float+0x2d8>)
 8006d06:	e7d4      	b.n	8006cb2 <_printf_float+0x8a>
 8006d08:	6863      	ldr	r3, [r4, #4]
 8006d0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006d0e:	9206      	str	r2, [sp, #24]
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	d13b      	bne.n	8006d8c <_printf_float+0x164>
 8006d14:	2306      	movs	r3, #6
 8006d16:	6063      	str	r3, [r4, #4]
 8006d18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	6022      	str	r2, [r4, #0]
 8006d20:	9303      	str	r3, [sp, #12]
 8006d22:	ab0a      	add	r3, sp, #40	@ 0x28
 8006d24:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006d28:	ab09      	add	r3, sp, #36	@ 0x24
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	6861      	ldr	r1, [r4, #4]
 8006d2e:	ec49 8b10 	vmov	d0, r8, r9
 8006d32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006d36:	4628      	mov	r0, r5
 8006d38:	f7ff fed6 	bl	8006ae8 <__cvt>
 8006d3c:	9b06      	ldr	r3, [sp, #24]
 8006d3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d40:	2b47      	cmp	r3, #71	@ 0x47
 8006d42:	4680      	mov	r8, r0
 8006d44:	d129      	bne.n	8006d9a <_printf_float+0x172>
 8006d46:	1cc8      	adds	r0, r1, #3
 8006d48:	db02      	blt.n	8006d50 <_printf_float+0x128>
 8006d4a:	6863      	ldr	r3, [r4, #4]
 8006d4c:	4299      	cmp	r1, r3
 8006d4e:	dd41      	ble.n	8006dd4 <_printf_float+0x1ac>
 8006d50:	f1aa 0a02 	sub.w	sl, sl, #2
 8006d54:	fa5f fa8a 	uxtb.w	sl, sl
 8006d58:	3901      	subs	r1, #1
 8006d5a:	4652      	mov	r2, sl
 8006d5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006d60:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d62:	f7ff ff26 	bl	8006bb2 <__exponent>
 8006d66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d68:	1813      	adds	r3, r2, r0
 8006d6a:	2a01      	cmp	r2, #1
 8006d6c:	4681      	mov	r9, r0
 8006d6e:	6123      	str	r3, [r4, #16]
 8006d70:	dc02      	bgt.n	8006d78 <_printf_float+0x150>
 8006d72:	6822      	ldr	r2, [r4, #0]
 8006d74:	07d2      	lsls	r2, r2, #31
 8006d76:	d501      	bpl.n	8006d7c <_printf_float+0x154>
 8006d78:	3301      	adds	r3, #1
 8006d7a:	6123      	str	r3, [r4, #16]
 8006d7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0a2      	beq.n	8006cca <_printf_float+0xa2>
 8006d84:	232d      	movs	r3, #45	@ 0x2d
 8006d86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d8a:	e79e      	b.n	8006cca <_printf_float+0xa2>
 8006d8c:	9a06      	ldr	r2, [sp, #24]
 8006d8e:	2a47      	cmp	r2, #71	@ 0x47
 8006d90:	d1c2      	bne.n	8006d18 <_printf_float+0xf0>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1c0      	bne.n	8006d18 <_printf_float+0xf0>
 8006d96:	2301      	movs	r3, #1
 8006d98:	e7bd      	b.n	8006d16 <_printf_float+0xee>
 8006d9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d9e:	d9db      	bls.n	8006d58 <_printf_float+0x130>
 8006da0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006da4:	d118      	bne.n	8006dd8 <_printf_float+0x1b0>
 8006da6:	2900      	cmp	r1, #0
 8006da8:	6863      	ldr	r3, [r4, #4]
 8006daa:	dd0b      	ble.n	8006dc4 <_printf_float+0x19c>
 8006dac:	6121      	str	r1, [r4, #16]
 8006dae:	b913      	cbnz	r3, 8006db6 <_printf_float+0x18e>
 8006db0:	6822      	ldr	r2, [r4, #0]
 8006db2:	07d0      	lsls	r0, r2, #31
 8006db4:	d502      	bpl.n	8006dbc <_printf_float+0x194>
 8006db6:	3301      	adds	r3, #1
 8006db8:	440b      	add	r3, r1
 8006dba:	6123      	str	r3, [r4, #16]
 8006dbc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006dbe:	f04f 0900 	mov.w	r9, #0
 8006dc2:	e7db      	b.n	8006d7c <_printf_float+0x154>
 8006dc4:	b913      	cbnz	r3, 8006dcc <_printf_float+0x1a4>
 8006dc6:	6822      	ldr	r2, [r4, #0]
 8006dc8:	07d2      	lsls	r2, r2, #31
 8006dca:	d501      	bpl.n	8006dd0 <_printf_float+0x1a8>
 8006dcc:	3302      	adds	r3, #2
 8006dce:	e7f4      	b.n	8006dba <_printf_float+0x192>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e7f2      	b.n	8006dba <_printf_float+0x192>
 8006dd4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006dd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dda:	4299      	cmp	r1, r3
 8006ddc:	db05      	blt.n	8006dea <_printf_float+0x1c2>
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	6121      	str	r1, [r4, #16]
 8006de2:	07d8      	lsls	r0, r3, #31
 8006de4:	d5ea      	bpl.n	8006dbc <_printf_float+0x194>
 8006de6:	1c4b      	adds	r3, r1, #1
 8006de8:	e7e7      	b.n	8006dba <_printf_float+0x192>
 8006dea:	2900      	cmp	r1, #0
 8006dec:	bfd4      	ite	le
 8006dee:	f1c1 0202 	rsble	r2, r1, #2
 8006df2:	2201      	movgt	r2, #1
 8006df4:	4413      	add	r3, r2
 8006df6:	e7e0      	b.n	8006dba <_printf_float+0x192>
 8006df8:	6823      	ldr	r3, [r4, #0]
 8006dfa:	055a      	lsls	r2, r3, #21
 8006dfc:	d407      	bmi.n	8006e0e <_printf_float+0x1e6>
 8006dfe:	6923      	ldr	r3, [r4, #16]
 8006e00:	4642      	mov	r2, r8
 8006e02:	4631      	mov	r1, r6
 8006e04:	4628      	mov	r0, r5
 8006e06:	47b8      	blx	r7
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d12b      	bne.n	8006e64 <_printf_float+0x23c>
 8006e0c:	e767      	b.n	8006cde <_printf_float+0xb6>
 8006e0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e12:	f240 80dd 	bls.w	8006fd0 <_printf_float+0x3a8>
 8006e16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f7f9 fe6b 	bl	8000af8 <__aeabi_dcmpeq>
 8006e22:	2800      	cmp	r0, #0
 8006e24:	d033      	beq.n	8006e8e <_printf_float+0x266>
 8006e26:	4a37      	ldr	r2, [pc, #220]	@ (8006f04 <_printf_float+0x2dc>)
 8006e28:	2301      	movs	r3, #1
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	47b8      	blx	r7
 8006e30:	3001      	adds	r0, #1
 8006e32:	f43f af54 	beq.w	8006cde <_printf_float+0xb6>
 8006e36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006e3a:	4543      	cmp	r3, r8
 8006e3c:	db02      	blt.n	8006e44 <_printf_float+0x21c>
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	07d8      	lsls	r0, r3, #31
 8006e42:	d50f      	bpl.n	8006e64 <_printf_float+0x23c>
 8006e44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	47b8      	blx	r7
 8006e4e:	3001      	adds	r0, #1
 8006e50:	f43f af45 	beq.w	8006cde <_printf_float+0xb6>
 8006e54:	f04f 0900 	mov.w	r9, #0
 8006e58:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e5c:	f104 0a1a 	add.w	sl, r4, #26
 8006e60:	45c8      	cmp	r8, r9
 8006e62:	dc09      	bgt.n	8006e78 <_printf_float+0x250>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	079b      	lsls	r3, r3, #30
 8006e68:	f100 8103 	bmi.w	8007072 <_printf_float+0x44a>
 8006e6c:	68e0      	ldr	r0, [r4, #12]
 8006e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e70:	4298      	cmp	r0, r3
 8006e72:	bfb8      	it	lt
 8006e74:	4618      	movlt	r0, r3
 8006e76:	e734      	b.n	8006ce2 <_printf_float+0xba>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	4652      	mov	r2, sl
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	4628      	mov	r0, r5
 8006e80:	47b8      	blx	r7
 8006e82:	3001      	adds	r0, #1
 8006e84:	f43f af2b 	beq.w	8006cde <_printf_float+0xb6>
 8006e88:	f109 0901 	add.w	r9, r9, #1
 8006e8c:	e7e8      	b.n	8006e60 <_printf_float+0x238>
 8006e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	dc39      	bgt.n	8006f08 <_printf_float+0x2e0>
 8006e94:	4a1b      	ldr	r2, [pc, #108]	@ (8006f04 <_printf_float+0x2dc>)
 8006e96:	2301      	movs	r3, #1
 8006e98:	4631      	mov	r1, r6
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	47b8      	blx	r7
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	f43f af1d 	beq.w	8006cde <_printf_float+0xb6>
 8006ea4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006ea8:	ea59 0303 	orrs.w	r3, r9, r3
 8006eac:	d102      	bne.n	8006eb4 <_printf_float+0x28c>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	07d9      	lsls	r1, r3, #31
 8006eb2:	d5d7      	bpl.n	8006e64 <_printf_float+0x23c>
 8006eb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eb8:	4631      	mov	r1, r6
 8006eba:	4628      	mov	r0, r5
 8006ebc:	47b8      	blx	r7
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	f43f af0d 	beq.w	8006cde <_printf_float+0xb6>
 8006ec4:	f04f 0a00 	mov.w	sl, #0
 8006ec8:	f104 0b1a 	add.w	fp, r4, #26
 8006ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ece:	425b      	negs	r3, r3
 8006ed0:	4553      	cmp	r3, sl
 8006ed2:	dc01      	bgt.n	8006ed8 <_printf_float+0x2b0>
 8006ed4:	464b      	mov	r3, r9
 8006ed6:	e793      	b.n	8006e00 <_printf_float+0x1d8>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	465a      	mov	r2, fp
 8006edc:	4631      	mov	r1, r6
 8006ede:	4628      	mov	r0, r5
 8006ee0:	47b8      	blx	r7
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	f43f aefb 	beq.w	8006cde <_printf_float+0xb6>
 8006ee8:	f10a 0a01 	add.w	sl, sl, #1
 8006eec:	e7ee      	b.n	8006ecc <_printf_float+0x2a4>
 8006eee:	bf00      	nop
 8006ef0:	7fefffff 	.word	0x7fefffff
 8006ef4:	0800ada1 	.word	0x0800ada1
 8006ef8:	0800ad9d 	.word	0x0800ad9d
 8006efc:	0800ada9 	.word	0x0800ada9
 8006f00:	0800ada5 	.word	0x0800ada5
 8006f04:	0800adad 	.word	0x0800adad
 8006f08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f0e:	4553      	cmp	r3, sl
 8006f10:	bfa8      	it	ge
 8006f12:	4653      	movge	r3, sl
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	4699      	mov	r9, r3
 8006f18:	dc36      	bgt.n	8006f88 <_printf_float+0x360>
 8006f1a:	f04f 0b00 	mov.w	fp, #0
 8006f1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f22:	f104 021a 	add.w	r2, r4, #26
 8006f26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f28:	9306      	str	r3, [sp, #24]
 8006f2a:	eba3 0309 	sub.w	r3, r3, r9
 8006f2e:	455b      	cmp	r3, fp
 8006f30:	dc31      	bgt.n	8006f96 <_printf_float+0x36e>
 8006f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f34:	459a      	cmp	sl, r3
 8006f36:	dc3a      	bgt.n	8006fae <_printf_float+0x386>
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	07da      	lsls	r2, r3, #31
 8006f3c:	d437      	bmi.n	8006fae <_printf_float+0x386>
 8006f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f40:	ebaa 0903 	sub.w	r9, sl, r3
 8006f44:	9b06      	ldr	r3, [sp, #24]
 8006f46:	ebaa 0303 	sub.w	r3, sl, r3
 8006f4a:	4599      	cmp	r9, r3
 8006f4c:	bfa8      	it	ge
 8006f4e:	4699      	movge	r9, r3
 8006f50:	f1b9 0f00 	cmp.w	r9, #0
 8006f54:	dc33      	bgt.n	8006fbe <_printf_float+0x396>
 8006f56:	f04f 0800 	mov.w	r8, #0
 8006f5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f5e:	f104 0b1a 	add.w	fp, r4, #26
 8006f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f64:	ebaa 0303 	sub.w	r3, sl, r3
 8006f68:	eba3 0309 	sub.w	r3, r3, r9
 8006f6c:	4543      	cmp	r3, r8
 8006f6e:	f77f af79 	ble.w	8006e64 <_printf_float+0x23c>
 8006f72:	2301      	movs	r3, #1
 8006f74:	465a      	mov	r2, fp
 8006f76:	4631      	mov	r1, r6
 8006f78:	4628      	mov	r0, r5
 8006f7a:	47b8      	blx	r7
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	f43f aeae 	beq.w	8006cde <_printf_float+0xb6>
 8006f82:	f108 0801 	add.w	r8, r8, #1
 8006f86:	e7ec      	b.n	8006f62 <_printf_float+0x33a>
 8006f88:	4642      	mov	r2, r8
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	47b8      	blx	r7
 8006f90:	3001      	adds	r0, #1
 8006f92:	d1c2      	bne.n	8006f1a <_printf_float+0x2f2>
 8006f94:	e6a3      	b.n	8006cde <_printf_float+0xb6>
 8006f96:	2301      	movs	r3, #1
 8006f98:	4631      	mov	r1, r6
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	9206      	str	r2, [sp, #24]
 8006f9e:	47b8      	blx	r7
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	f43f ae9c 	beq.w	8006cde <_printf_float+0xb6>
 8006fa6:	9a06      	ldr	r2, [sp, #24]
 8006fa8:	f10b 0b01 	add.w	fp, fp, #1
 8006fac:	e7bb      	b.n	8006f26 <_printf_float+0x2fe>
 8006fae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	47b8      	blx	r7
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d1c0      	bne.n	8006f3e <_printf_float+0x316>
 8006fbc:	e68f      	b.n	8006cde <_printf_float+0xb6>
 8006fbe:	9a06      	ldr	r2, [sp, #24]
 8006fc0:	464b      	mov	r3, r9
 8006fc2:	4442      	add	r2, r8
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	47b8      	blx	r7
 8006fca:	3001      	adds	r0, #1
 8006fcc:	d1c3      	bne.n	8006f56 <_printf_float+0x32e>
 8006fce:	e686      	b.n	8006cde <_printf_float+0xb6>
 8006fd0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006fd4:	f1ba 0f01 	cmp.w	sl, #1
 8006fd8:	dc01      	bgt.n	8006fde <_printf_float+0x3b6>
 8006fda:	07db      	lsls	r3, r3, #31
 8006fdc:	d536      	bpl.n	800704c <_printf_float+0x424>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	4642      	mov	r2, r8
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	47b8      	blx	r7
 8006fe8:	3001      	adds	r0, #1
 8006fea:	f43f ae78 	beq.w	8006cde <_printf_float+0xb6>
 8006fee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	47b8      	blx	r7
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	f43f ae70 	beq.w	8006cde <_printf_float+0xb6>
 8006ffe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007002:	2200      	movs	r2, #0
 8007004:	2300      	movs	r3, #0
 8007006:	f10a 3aff 	add.w	sl, sl, #4294967295
 800700a:	f7f9 fd75 	bl	8000af8 <__aeabi_dcmpeq>
 800700e:	b9c0      	cbnz	r0, 8007042 <_printf_float+0x41a>
 8007010:	4653      	mov	r3, sl
 8007012:	f108 0201 	add.w	r2, r8, #1
 8007016:	4631      	mov	r1, r6
 8007018:	4628      	mov	r0, r5
 800701a:	47b8      	blx	r7
 800701c:	3001      	adds	r0, #1
 800701e:	d10c      	bne.n	800703a <_printf_float+0x412>
 8007020:	e65d      	b.n	8006cde <_printf_float+0xb6>
 8007022:	2301      	movs	r3, #1
 8007024:	465a      	mov	r2, fp
 8007026:	4631      	mov	r1, r6
 8007028:	4628      	mov	r0, r5
 800702a:	47b8      	blx	r7
 800702c:	3001      	adds	r0, #1
 800702e:	f43f ae56 	beq.w	8006cde <_printf_float+0xb6>
 8007032:	f108 0801 	add.w	r8, r8, #1
 8007036:	45d0      	cmp	r8, sl
 8007038:	dbf3      	blt.n	8007022 <_printf_float+0x3fa>
 800703a:	464b      	mov	r3, r9
 800703c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007040:	e6df      	b.n	8006e02 <_printf_float+0x1da>
 8007042:	f04f 0800 	mov.w	r8, #0
 8007046:	f104 0b1a 	add.w	fp, r4, #26
 800704a:	e7f4      	b.n	8007036 <_printf_float+0x40e>
 800704c:	2301      	movs	r3, #1
 800704e:	4642      	mov	r2, r8
 8007050:	e7e1      	b.n	8007016 <_printf_float+0x3ee>
 8007052:	2301      	movs	r3, #1
 8007054:	464a      	mov	r2, r9
 8007056:	4631      	mov	r1, r6
 8007058:	4628      	mov	r0, r5
 800705a:	47b8      	blx	r7
 800705c:	3001      	adds	r0, #1
 800705e:	f43f ae3e 	beq.w	8006cde <_printf_float+0xb6>
 8007062:	f108 0801 	add.w	r8, r8, #1
 8007066:	68e3      	ldr	r3, [r4, #12]
 8007068:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800706a:	1a5b      	subs	r3, r3, r1
 800706c:	4543      	cmp	r3, r8
 800706e:	dcf0      	bgt.n	8007052 <_printf_float+0x42a>
 8007070:	e6fc      	b.n	8006e6c <_printf_float+0x244>
 8007072:	f04f 0800 	mov.w	r8, #0
 8007076:	f104 0919 	add.w	r9, r4, #25
 800707a:	e7f4      	b.n	8007066 <_printf_float+0x43e>

0800707c <_printf_common>:
 800707c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007080:	4616      	mov	r6, r2
 8007082:	4698      	mov	r8, r3
 8007084:	688a      	ldr	r2, [r1, #8]
 8007086:	690b      	ldr	r3, [r1, #16]
 8007088:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800708c:	4293      	cmp	r3, r2
 800708e:	bfb8      	it	lt
 8007090:	4613      	movlt	r3, r2
 8007092:	6033      	str	r3, [r6, #0]
 8007094:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007098:	4607      	mov	r7, r0
 800709a:	460c      	mov	r4, r1
 800709c:	b10a      	cbz	r2, 80070a2 <_printf_common+0x26>
 800709e:	3301      	adds	r3, #1
 80070a0:	6033      	str	r3, [r6, #0]
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	0699      	lsls	r1, r3, #26
 80070a6:	bf42      	ittt	mi
 80070a8:	6833      	ldrmi	r3, [r6, #0]
 80070aa:	3302      	addmi	r3, #2
 80070ac:	6033      	strmi	r3, [r6, #0]
 80070ae:	6825      	ldr	r5, [r4, #0]
 80070b0:	f015 0506 	ands.w	r5, r5, #6
 80070b4:	d106      	bne.n	80070c4 <_printf_common+0x48>
 80070b6:	f104 0a19 	add.w	sl, r4, #25
 80070ba:	68e3      	ldr	r3, [r4, #12]
 80070bc:	6832      	ldr	r2, [r6, #0]
 80070be:	1a9b      	subs	r3, r3, r2
 80070c0:	42ab      	cmp	r3, r5
 80070c2:	dc26      	bgt.n	8007112 <_printf_common+0x96>
 80070c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070c8:	6822      	ldr	r2, [r4, #0]
 80070ca:	3b00      	subs	r3, #0
 80070cc:	bf18      	it	ne
 80070ce:	2301      	movne	r3, #1
 80070d0:	0692      	lsls	r2, r2, #26
 80070d2:	d42b      	bmi.n	800712c <_printf_common+0xb0>
 80070d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070d8:	4641      	mov	r1, r8
 80070da:	4638      	mov	r0, r7
 80070dc:	47c8      	blx	r9
 80070de:	3001      	adds	r0, #1
 80070e0:	d01e      	beq.n	8007120 <_printf_common+0xa4>
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	6922      	ldr	r2, [r4, #16]
 80070e6:	f003 0306 	and.w	r3, r3, #6
 80070ea:	2b04      	cmp	r3, #4
 80070ec:	bf02      	ittt	eq
 80070ee:	68e5      	ldreq	r5, [r4, #12]
 80070f0:	6833      	ldreq	r3, [r6, #0]
 80070f2:	1aed      	subeq	r5, r5, r3
 80070f4:	68a3      	ldr	r3, [r4, #8]
 80070f6:	bf0c      	ite	eq
 80070f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070fc:	2500      	movne	r5, #0
 80070fe:	4293      	cmp	r3, r2
 8007100:	bfc4      	itt	gt
 8007102:	1a9b      	subgt	r3, r3, r2
 8007104:	18ed      	addgt	r5, r5, r3
 8007106:	2600      	movs	r6, #0
 8007108:	341a      	adds	r4, #26
 800710a:	42b5      	cmp	r5, r6
 800710c:	d11a      	bne.n	8007144 <_printf_common+0xc8>
 800710e:	2000      	movs	r0, #0
 8007110:	e008      	b.n	8007124 <_printf_common+0xa8>
 8007112:	2301      	movs	r3, #1
 8007114:	4652      	mov	r2, sl
 8007116:	4641      	mov	r1, r8
 8007118:	4638      	mov	r0, r7
 800711a:	47c8      	blx	r9
 800711c:	3001      	adds	r0, #1
 800711e:	d103      	bne.n	8007128 <_printf_common+0xac>
 8007120:	f04f 30ff 	mov.w	r0, #4294967295
 8007124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007128:	3501      	adds	r5, #1
 800712a:	e7c6      	b.n	80070ba <_printf_common+0x3e>
 800712c:	18e1      	adds	r1, r4, r3
 800712e:	1c5a      	adds	r2, r3, #1
 8007130:	2030      	movs	r0, #48	@ 0x30
 8007132:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007136:	4422      	add	r2, r4
 8007138:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800713c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007140:	3302      	adds	r3, #2
 8007142:	e7c7      	b.n	80070d4 <_printf_common+0x58>
 8007144:	2301      	movs	r3, #1
 8007146:	4622      	mov	r2, r4
 8007148:	4641      	mov	r1, r8
 800714a:	4638      	mov	r0, r7
 800714c:	47c8      	blx	r9
 800714e:	3001      	adds	r0, #1
 8007150:	d0e6      	beq.n	8007120 <_printf_common+0xa4>
 8007152:	3601      	adds	r6, #1
 8007154:	e7d9      	b.n	800710a <_printf_common+0x8e>
	...

08007158 <_printf_i>:
 8007158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800715c:	7e0f      	ldrb	r7, [r1, #24]
 800715e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007160:	2f78      	cmp	r7, #120	@ 0x78
 8007162:	4691      	mov	r9, r2
 8007164:	4680      	mov	r8, r0
 8007166:	460c      	mov	r4, r1
 8007168:	469a      	mov	sl, r3
 800716a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800716e:	d807      	bhi.n	8007180 <_printf_i+0x28>
 8007170:	2f62      	cmp	r7, #98	@ 0x62
 8007172:	d80a      	bhi.n	800718a <_printf_i+0x32>
 8007174:	2f00      	cmp	r7, #0
 8007176:	f000 80d1 	beq.w	800731c <_printf_i+0x1c4>
 800717a:	2f58      	cmp	r7, #88	@ 0x58
 800717c:	f000 80b8 	beq.w	80072f0 <_printf_i+0x198>
 8007180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007184:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007188:	e03a      	b.n	8007200 <_printf_i+0xa8>
 800718a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800718e:	2b15      	cmp	r3, #21
 8007190:	d8f6      	bhi.n	8007180 <_printf_i+0x28>
 8007192:	a101      	add	r1, pc, #4	@ (adr r1, 8007198 <_printf_i+0x40>)
 8007194:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007198:	080071f1 	.word	0x080071f1
 800719c:	08007205 	.word	0x08007205
 80071a0:	08007181 	.word	0x08007181
 80071a4:	08007181 	.word	0x08007181
 80071a8:	08007181 	.word	0x08007181
 80071ac:	08007181 	.word	0x08007181
 80071b0:	08007205 	.word	0x08007205
 80071b4:	08007181 	.word	0x08007181
 80071b8:	08007181 	.word	0x08007181
 80071bc:	08007181 	.word	0x08007181
 80071c0:	08007181 	.word	0x08007181
 80071c4:	08007303 	.word	0x08007303
 80071c8:	0800722f 	.word	0x0800722f
 80071cc:	080072bd 	.word	0x080072bd
 80071d0:	08007181 	.word	0x08007181
 80071d4:	08007181 	.word	0x08007181
 80071d8:	08007325 	.word	0x08007325
 80071dc:	08007181 	.word	0x08007181
 80071e0:	0800722f 	.word	0x0800722f
 80071e4:	08007181 	.word	0x08007181
 80071e8:	08007181 	.word	0x08007181
 80071ec:	080072c5 	.word	0x080072c5
 80071f0:	6833      	ldr	r3, [r6, #0]
 80071f2:	1d1a      	adds	r2, r3, #4
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6032      	str	r2, [r6, #0]
 80071f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007200:	2301      	movs	r3, #1
 8007202:	e09c      	b.n	800733e <_printf_i+0x1e6>
 8007204:	6833      	ldr	r3, [r6, #0]
 8007206:	6820      	ldr	r0, [r4, #0]
 8007208:	1d19      	adds	r1, r3, #4
 800720a:	6031      	str	r1, [r6, #0]
 800720c:	0606      	lsls	r6, r0, #24
 800720e:	d501      	bpl.n	8007214 <_printf_i+0xbc>
 8007210:	681d      	ldr	r5, [r3, #0]
 8007212:	e003      	b.n	800721c <_printf_i+0xc4>
 8007214:	0645      	lsls	r5, r0, #25
 8007216:	d5fb      	bpl.n	8007210 <_printf_i+0xb8>
 8007218:	f9b3 5000 	ldrsh.w	r5, [r3]
 800721c:	2d00      	cmp	r5, #0
 800721e:	da03      	bge.n	8007228 <_printf_i+0xd0>
 8007220:	232d      	movs	r3, #45	@ 0x2d
 8007222:	426d      	negs	r5, r5
 8007224:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007228:	4858      	ldr	r0, [pc, #352]	@ (800738c <_printf_i+0x234>)
 800722a:	230a      	movs	r3, #10
 800722c:	e011      	b.n	8007252 <_printf_i+0xfa>
 800722e:	6821      	ldr	r1, [r4, #0]
 8007230:	6833      	ldr	r3, [r6, #0]
 8007232:	0608      	lsls	r0, r1, #24
 8007234:	f853 5b04 	ldr.w	r5, [r3], #4
 8007238:	d402      	bmi.n	8007240 <_printf_i+0xe8>
 800723a:	0649      	lsls	r1, r1, #25
 800723c:	bf48      	it	mi
 800723e:	b2ad      	uxthmi	r5, r5
 8007240:	2f6f      	cmp	r7, #111	@ 0x6f
 8007242:	4852      	ldr	r0, [pc, #328]	@ (800738c <_printf_i+0x234>)
 8007244:	6033      	str	r3, [r6, #0]
 8007246:	bf14      	ite	ne
 8007248:	230a      	movne	r3, #10
 800724a:	2308      	moveq	r3, #8
 800724c:	2100      	movs	r1, #0
 800724e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007252:	6866      	ldr	r6, [r4, #4]
 8007254:	60a6      	str	r6, [r4, #8]
 8007256:	2e00      	cmp	r6, #0
 8007258:	db05      	blt.n	8007266 <_printf_i+0x10e>
 800725a:	6821      	ldr	r1, [r4, #0]
 800725c:	432e      	orrs	r6, r5
 800725e:	f021 0104 	bic.w	r1, r1, #4
 8007262:	6021      	str	r1, [r4, #0]
 8007264:	d04b      	beq.n	80072fe <_printf_i+0x1a6>
 8007266:	4616      	mov	r6, r2
 8007268:	fbb5 f1f3 	udiv	r1, r5, r3
 800726c:	fb03 5711 	mls	r7, r3, r1, r5
 8007270:	5dc7      	ldrb	r7, [r0, r7]
 8007272:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007276:	462f      	mov	r7, r5
 8007278:	42bb      	cmp	r3, r7
 800727a:	460d      	mov	r5, r1
 800727c:	d9f4      	bls.n	8007268 <_printf_i+0x110>
 800727e:	2b08      	cmp	r3, #8
 8007280:	d10b      	bne.n	800729a <_printf_i+0x142>
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	07df      	lsls	r7, r3, #31
 8007286:	d508      	bpl.n	800729a <_printf_i+0x142>
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	6861      	ldr	r1, [r4, #4]
 800728c:	4299      	cmp	r1, r3
 800728e:	bfde      	ittt	le
 8007290:	2330      	movle	r3, #48	@ 0x30
 8007292:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007296:	f106 36ff 	addle.w	r6, r6, #4294967295
 800729a:	1b92      	subs	r2, r2, r6
 800729c:	6122      	str	r2, [r4, #16]
 800729e:	f8cd a000 	str.w	sl, [sp]
 80072a2:	464b      	mov	r3, r9
 80072a4:	aa03      	add	r2, sp, #12
 80072a6:	4621      	mov	r1, r4
 80072a8:	4640      	mov	r0, r8
 80072aa:	f7ff fee7 	bl	800707c <_printf_common>
 80072ae:	3001      	adds	r0, #1
 80072b0:	d14a      	bne.n	8007348 <_printf_i+0x1f0>
 80072b2:	f04f 30ff 	mov.w	r0, #4294967295
 80072b6:	b004      	add	sp, #16
 80072b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	f043 0320 	orr.w	r3, r3, #32
 80072c2:	6023      	str	r3, [r4, #0]
 80072c4:	4832      	ldr	r0, [pc, #200]	@ (8007390 <_printf_i+0x238>)
 80072c6:	2778      	movs	r7, #120	@ 0x78
 80072c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	6831      	ldr	r1, [r6, #0]
 80072d0:	061f      	lsls	r7, r3, #24
 80072d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80072d6:	d402      	bmi.n	80072de <_printf_i+0x186>
 80072d8:	065f      	lsls	r7, r3, #25
 80072da:	bf48      	it	mi
 80072dc:	b2ad      	uxthmi	r5, r5
 80072de:	6031      	str	r1, [r6, #0]
 80072e0:	07d9      	lsls	r1, r3, #31
 80072e2:	bf44      	itt	mi
 80072e4:	f043 0320 	orrmi.w	r3, r3, #32
 80072e8:	6023      	strmi	r3, [r4, #0]
 80072ea:	b11d      	cbz	r5, 80072f4 <_printf_i+0x19c>
 80072ec:	2310      	movs	r3, #16
 80072ee:	e7ad      	b.n	800724c <_printf_i+0xf4>
 80072f0:	4826      	ldr	r0, [pc, #152]	@ (800738c <_printf_i+0x234>)
 80072f2:	e7e9      	b.n	80072c8 <_printf_i+0x170>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	f023 0320 	bic.w	r3, r3, #32
 80072fa:	6023      	str	r3, [r4, #0]
 80072fc:	e7f6      	b.n	80072ec <_printf_i+0x194>
 80072fe:	4616      	mov	r6, r2
 8007300:	e7bd      	b.n	800727e <_printf_i+0x126>
 8007302:	6833      	ldr	r3, [r6, #0]
 8007304:	6825      	ldr	r5, [r4, #0]
 8007306:	6961      	ldr	r1, [r4, #20]
 8007308:	1d18      	adds	r0, r3, #4
 800730a:	6030      	str	r0, [r6, #0]
 800730c:	062e      	lsls	r6, r5, #24
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	d501      	bpl.n	8007316 <_printf_i+0x1be>
 8007312:	6019      	str	r1, [r3, #0]
 8007314:	e002      	b.n	800731c <_printf_i+0x1c4>
 8007316:	0668      	lsls	r0, r5, #25
 8007318:	d5fb      	bpl.n	8007312 <_printf_i+0x1ba>
 800731a:	8019      	strh	r1, [r3, #0]
 800731c:	2300      	movs	r3, #0
 800731e:	6123      	str	r3, [r4, #16]
 8007320:	4616      	mov	r6, r2
 8007322:	e7bc      	b.n	800729e <_printf_i+0x146>
 8007324:	6833      	ldr	r3, [r6, #0]
 8007326:	1d1a      	adds	r2, r3, #4
 8007328:	6032      	str	r2, [r6, #0]
 800732a:	681e      	ldr	r6, [r3, #0]
 800732c:	6862      	ldr	r2, [r4, #4]
 800732e:	2100      	movs	r1, #0
 8007330:	4630      	mov	r0, r6
 8007332:	f7f8 ff65 	bl	8000200 <memchr>
 8007336:	b108      	cbz	r0, 800733c <_printf_i+0x1e4>
 8007338:	1b80      	subs	r0, r0, r6
 800733a:	6060      	str	r0, [r4, #4]
 800733c:	6863      	ldr	r3, [r4, #4]
 800733e:	6123      	str	r3, [r4, #16]
 8007340:	2300      	movs	r3, #0
 8007342:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007346:	e7aa      	b.n	800729e <_printf_i+0x146>
 8007348:	6923      	ldr	r3, [r4, #16]
 800734a:	4632      	mov	r2, r6
 800734c:	4649      	mov	r1, r9
 800734e:	4640      	mov	r0, r8
 8007350:	47d0      	blx	sl
 8007352:	3001      	adds	r0, #1
 8007354:	d0ad      	beq.n	80072b2 <_printf_i+0x15a>
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	079b      	lsls	r3, r3, #30
 800735a:	d413      	bmi.n	8007384 <_printf_i+0x22c>
 800735c:	68e0      	ldr	r0, [r4, #12]
 800735e:	9b03      	ldr	r3, [sp, #12]
 8007360:	4298      	cmp	r0, r3
 8007362:	bfb8      	it	lt
 8007364:	4618      	movlt	r0, r3
 8007366:	e7a6      	b.n	80072b6 <_printf_i+0x15e>
 8007368:	2301      	movs	r3, #1
 800736a:	4632      	mov	r2, r6
 800736c:	4649      	mov	r1, r9
 800736e:	4640      	mov	r0, r8
 8007370:	47d0      	blx	sl
 8007372:	3001      	adds	r0, #1
 8007374:	d09d      	beq.n	80072b2 <_printf_i+0x15a>
 8007376:	3501      	adds	r5, #1
 8007378:	68e3      	ldr	r3, [r4, #12]
 800737a:	9903      	ldr	r1, [sp, #12]
 800737c:	1a5b      	subs	r3, r3, r1
 800737e:	42ab      	cmp	r3, r5
 8007380:	dcf2      	bgt.n	8007368 <_printf_i+0x210>
 8007382:	e7eb      	b.n	800735c <_printf_i+0x204>
 8007384:	2500      	movs	r5, #0
 8007386:	f104 0619 	add.w	r6, r4, #25
 800738a:	e7f5      	b.n	8007378 <_printf_i+0x220>
 800738c:	0800adaf 	.word	0x0800adaf
 8007390:	0800adc0 	.word	0x0800adc0

08007394 <std>:
 8007394:	2300      	movs	r3, #0
 8007396:	b510      	push	{r4, lr}
 8007398:	4604      	mov	r4, r0
 800739a:	e9c0 3300 	strd	r3, r3, [r0]
 800739e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073a2:	6083      	str	r3, [r0, #8]
 80073a4:	8181      	strh	r1, [r0, #12]
 80073a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80073a8:	81c2      	strh	r2, [r0, #14]
 80073aa:	6183      	str	r3, [r0, #24]
 80073ac:	4619      	mov	r1, r3
 80073ae:	2208      	movs	r2, #8
 80073b0:	305c      	adds	r0, #92	@ 0x5c
 80073b2:	f000 fa23 	bl	80077fc <memset>
 80073b6:	4b0d      	ldr	r3, [pc, #52]	@ (80073ec <std+0x58>)
 80073b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80073ba:	4b0d      	ldr	r3, [pc, #52]	@ (80073f0 <std+0x5c>)
 80073bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80073be:	4b0d      	ldr	r3, [pc, #52]	@ (80073f4 <std+0x60>)
 80073c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80073c2:	4b0d      	ldr	r3, [pc, #52]	@ (80073f8 <std+0x64>)
 80073c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80073c6:	4b0d      	ldr	r3, [pc, #52]	@ (80073fc <std+0x68>)
 80073c8:	6224      	str	r4, [r4, #32]
 80073ca:	429c      	cmp	r4, r3
 80073cc:	d006      	beq.n	80073dc <std+0x48>
 80073ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80073d2:	4294      	cmp	r4, r2
 80073d4:	d002      	beq.n	80073dc <std+0x48>
 80073d6:	33d0      	adds	r3, #208	@ 0xd0
 80073d8:	429c      	cmp	r4, r3
 80073da:	d105      	bne.n	80073e8 <std+0x54>
 80073dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80073e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073e4:	f000 bb18 	b.w	8007a18 <__retarget_lock_init_recursive>
 80073e8:	bd10      	pop	{r4, pc}
 80073ea:	bf00      	nop
 80073ec:	0800764d 	.word	0x0800764d
 80073f0:	0800766f 	.word	0x0800766f
 80073f4:	080076a7 	.word	0x080076a7
 80073f8:	080076cb 	.word	0x080076cb
 80073fc:	20000ccc 	.word	0x20000ccc

08007400 <stdio_exit_handler>:
 8007400:	4a02      	ldr	r2, [pc, #8]	@ (800740c <stdio_exit_handler+0xc>)
 8007402:	4903      	ldr	r1, [pc, #12]	@ (8007410 <stdio_exit_handler+0x10>)
 8007404:	4803      	ldr	r0, [pc, #12]	@ (8007414 <stdio_exit_handler+0x14>)
 8007406:	f000 b869 	b.w	80074dc <_fwalk_sglue>
 800740a:	bf00      	nop
 800740c:	20000014 	.word	0x20000014
 8007410:	08009669 	.word	0x08009669
 8007414:	20000024 	.word	0x20000024

08007418 <cleanup_stdio>:
 8007418:	6841      	ldr	r1, [r0, #4]
 800741a:	4b0c      	ldr	r3, [pc, #48]	@ (800744c <cleanup_stdio+0x34>)
 800741c:	4299      	cmp	r1, r3
 800741e:	b510      	push	{r4, lr}
 8007420:	4604      	mov	r4, r0
 8007422:	d001      	beq.n	8007428 <cleanup_stdio+0x10>
 8007424:	f002 f920 	bl	8009668 <_fflush_r>
 8007428:	68a1      	ldr	r1, [r4, #8]
 800742a:	4b09      	ldr	r3, [pc, #36]	@ (8007450 <cleanup_stdio+0x38>)
 800742c:	4299      	cmp	r1, r3
 800742e:	d002      	beq.n	8007436 <cleanup_stdio+0x1e>
 8007430:	4620      	mov	r0, r4
 8007432:	f002 f919 	bl	8009668 <_fflush_r>
 8007436:	68e1      	ldr	r1, [r4, #12]
 8007438:	4b06      	ldr	r3, [pc, #24]	@ (8007454 <cleanup_stdio+0x3c>)
 800743a:	4299      	cmp	r1, r3
 800743c:	d004      	beq.n	8007448 <cleanup_stdio+0x30>
 800743e:	4620      	mov	r0, r4
 8007440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007444:	f002 b910 	b.w	8009668 <_fflush_r>
 8007448:	bd10      	pop	{r4, pc}
 800744a:	bf00      	nop
 800744c:	20000ccc 	.word	0x20000ccc
 8007450:	20000d34 	.word	0x20000d34
 8007454:	20000d9c 	.word	0x20000d9c

08007458 <global_stdio_init.part.0>:
 8007458:	b510      	push	{r4, lr}
 800745a:	4b0b      	ldr	r3, [pc, #44]	@ (8007488 <global_stdio_init.part.0+0x30>)
 800745c:	4c0b      	ldr	r4, [pc, #44]	@ (800748c <global_stdio_init.part.0+0x34>)
 800745e:	4a0c      	ldr	r2, [pc, #48]	@ (8007490 <global_stdio_init.part.0+0x38>)
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	4620      	mov	r0, r4
 8007464:	2200      	movs	r2, #0
 8007466:	2104      	movs	r1, #4
 8007468:	f7ff ff94 	bl	8007394 <std>
 800746c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007470:	2201      	movs	r2, #1
 8007472:	2109      	movs	r1, #9
 8007474:	f7ff ff8e 	bl	8007394 <std>
 8007478:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800747c:	2202      	movs	r2, #2
 800747e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007482:	2112      	movs	r1, #18
 8007484:	f7ff bf86 	b.w	8007394 <std>
 8007488:	20000e04 	.word	0x20000e04
 800748c:	20000ccc 	.word	0x20000ccc
 8007490:	08007401 	.word	0x08007401

08007494 <__sfp_lock_acquire>:
 8007494:	4801      	ldr	r0, [pc, #4]	@ (800749c <__sfp_lock_acquire+0x8>)
 8007496:	f000 bac0 	b.w	8007a1a <__retarget_lock_acquire_recursive>
 800749a:	bf00      	nop
 800749c:	20000e0d 	.word	0x20000e0d

080074a0 <__sfp_lock_release>:
 80074a0:	4801      	ldr	r0, [pc, #4]	@ (80074a8 <__sfp_lock_release+0x8>)
 80074a2:	f000 babb 	b.w	8007a1c <__retarget_lock_release_recursive>
 80074a6:	bf00      	nop
 80074a8:	20000e0d 	.word	0x20000e0d

080074ac <__sinit>:
 80074ac:	b510      	push	{r4, lr}
 80074ae:	4604      	mov	r4, r0
 80074b0:	f7ff fff0 	bl	8007494 <__sfp_lock_acquire>
 80074b4:	6a23      	ldr	r3, [r4, #32]
 80074b6:	b11b      	cbz	r3, 80074c0 <__sinit+0x14>
 80074b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074bc:	f7ff bff0 	b.w	80074a0 <__sfp_lock_release>
 80074c0:	4b04      	ldr	r3, [pc, #16]	@ (80074d4 <__sinit+0x28>)
 80074c2:	6223      	str	r3, [r4, #32]
 80074c4:	4b04      	ldr	r3, [pc, #16]	@ (80074d8 <__sinit+0x2c>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1f5      	bne.n	80074b8 <__sinit+0xc>
 80074cc:	f7ff ffc4 	bl	8007458 <global_stdio_init.part.0>
 80074d0:	e7f2      	b.n	80074b8 <__sinit+0xc>
 80074d2:	bf00      	nop
 80074d4:	08007419 	.word	0x08007419
 80074d8:	20000e04 	.word	0x20000e04

080074dc <_fwalk_sglue>:
 80074dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e0:	4607      	mov	r7, r0
 80074e2:	4688      	mov	r8, r1
 80074e4:	4614      	mov	r4, r2
 80074e6:	2600      	movs	r6, #0
 80074e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074ec:	f1b9 0901 	subs.w	r9, r9, #1
 80074f0:	d505      	bpl.n	80074fe <_fwalk_sglue+0x22>
 80074f2:	6824      	ldr	r4, [r4, #0]
 80074f4:	2c00      	cmp	r4, #0
 80074f6:	d1f7      	bne.n	80074e8 <_fwalk_sglue+0xc>
 80074f8:	4630      	mov	r0, r6
 80074fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074fe:	89ab      	ldrh	r3, [r5, #12]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d907      	bls.n	8007514 <_fwalk_sglue+0x38>
 8007504:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007508:	3301      	adds	r3, #1
 800750a:	d003      	beq.n	8007514 <_fwalk_sglue+0x38>
 800750c:	4629      	mov	r1, r5
 800750e:	4638      	mov	r0, r7
 8007510:	47c0      	blx	r8
 8007512:	4306      	orrs	r6, r0
 8007514:	3568      	adds	r5, #104	@ 0x68
 8007516:	e7e9      	b.n	80074ec <_fwalk_sglue+0x10>

08007518 <iprintf>:
 8007518:	b40f      	push	{r0, r1, r2, r3}
 800751a:	b507      	push	{r0, r1, r2, lr}
 800751c:	4906      	ldr	r1, [pc, #24]	@ (8007538 <iprintf+0x20>)
 800751e:	ab04      	add	r3, sp, #16
 8007520:	6808      	ldr	r0, [r1, #0]
 8007522:	f853 2b04 	ldr.w	r2, [r3], #4
 8007526:	6881      	ldr	r1, [r0, #8]
 8007528:	9301      	str	r3, [sp, #4]
 800752a:	f001 ff01 	bl	8009330 <_vfiprintf_r>
 800752e:	b003      	add	sp, #12
 8007530:	f85d eb04 	ldr.w	lr, [sp], #4
 8007534:	b004      	add	sp, #16
 8007536:	4770      	bx	lr
 8007538:	20000020 	.word	0x20000020

0800753c <putchar>:
 800753c:	4b02      	ldr	r3, [pc, #8]	@ (8007548 <putchar+0xc>)
 800753e:	4601      	mov	r1, r0
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	6882      	ldr	r2, [r0, #8]
 8007544:	f002 b92c 	b.w	80097a0 <_putc_r>
 8007548:	20000020 	.word	0x20000020

0800754c <_puts_r>:
 800754c:	6a03      	ldr	r3, [r0, #32]
 800754e:	b570      	push	{r4, r5, r6, lr}
 8007550:	6884      	ldr	r4, [r0, #8]
 8007552:	4605      	mov	r5, r0
 8007554:	460e      	mov	r6, r1
 8007556:	b90b      	cbnz	r3, 800755c <_puts_r+0x10>
 8007558:	f7ff ffa8 	bl	80074ac <__sinit>
 800755c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800755e:	07db      	lsls	r3, r3, #31
 8007560:	d405      	bmi.n	800756e <_puts_r+0x22>
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	0598      	lsls	r0, r3, #22
 8007566:	d402      	bmi.n	800756e <_puts_r+0x22>
 8007568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800756a:	f000 fa56 	bl	8007a1a <__retarget_lock_acquire_recursive>
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	0719      	lsls	r1, r3, #28
 8007572:	d502      	bpl.n	800757a <_puts_r+0x2e>
 8007574:	6923      	ldr	r3, [r4, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d135      	bne.n	80075e6 <_puts_r+0x9a>
 800757a:	4621      	mov	r1, r4
 800757c:	4628      	mov	r0, r5
 800757e:	f000 f8e7 	bl	8007750 <__swsetup_r>
 8007582:	b380      	cbz	r0, 80075e6 <_puts_r+0x9a>
 8007584:	f04f 35ff 	mov.w	r5, #4294967295
 8007588:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800758a:	07da      	lsls	r2, r3, #31
 800758c:	d405      	bmi.n	800759a <_puts_r+0x4e>
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	059b      	lsls	r3, r3, #22
 8007592:	d402      	bmi.n	800759a <_puts_r+0x4e>
 8007594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007596:	f000 fa41 	bl	8007a1c <__retarget_lock_release_recursive>
 800759a:	4628      	mov	r0, r5
 800759c:	bd70      	pop	{r4, r5, r6, pc}
 800759e:	2b00      	cmp	r3, #0
 80075a0:	da04      	bge.n	80075ac <_puts_r+0x60>
 80075a2:	69a2      	ldr	r2, [r4, #24]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	dc17      	bgt.n	80075d8 <_puts_r+0x8c>
 80075a8:	290a      	cmp	r1, #10
 80075aa:	d015      	beq.n	80075d8 <_puts_r+0x8c>
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	6022      	str	r2, [r4, #0]
 80075b2:	7019      	strb	r1, [r3, #0]
 80075b4:	68a3      	ldr	r3, [r4, #8]
 80075b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80075ba:	3b01      	subs	r3, #1
 80075bc:	60a3      	str	r3, [r4, #8]
 80075be:	2900      	cmp	r1, #0
 80075c0:	d1ed      	bne.n	800759e <_puts_r+0x52>
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	da11      	bge.n	80075ea <_puts_r+0x9e>
 80075c6:	4622      	mov	r2, r4
 80075c8:	210a      	movs	r1, #10
 80075ca:	4628      	mov	r0, r5
 80075cc:	f000 f881 	bl	80076d2 <__swbuf_r>
 80075d0:	3001      	adds	r0, #1
 80075d2:	d0d7      	beq.n	8007584 <_puts_r+0x38>
 80075d4:	250a      	movs	r5, #10
 80075d6:	e7d7      	b.n	8007588 <_puts_r+0x3c>
 80075d8:	4622      	mov	r2, r4
 80075da:	4628      	mov	r0, r5
 80075dc:	f000 f879 	bl	80076d2 <__swbuf_r>
 80075e0:	3001      	adds	r0, #1
 80075e2:	d1e7      	bne.n	80075b4 <_puts_r+0x68>
 80075e4:	e7ce      	b.n	8007584 <_puts_r+0x38>
 80075e6:	3e01      	subs	r6, #1
 80075e8:	e7e4      	b.n	80075b4 <_puts_r+0x68>
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	6022      	str	r2, [r4, #0]
 80075f0:	220a      	movs	r2, #10
 80075f2:	701a      	strb	r2, [r3, #0]
 80075f4:	e7ee      	b.n	80075d4 <_puts_r+0x88>
	...

080075f8 <puts>:
 80075f8:	4b02      	ldr	r3, [pc, #8]	@ (8007604 <puts+0xc>)
 80075fa:	4601      	mov	r1, r0
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	f7ff bfa5 	b.w	800754c <_puts_r>
 8007602:	bf00      	nop
 8007604:	20000020 	.word	0x20000020

08007608 <siprintf>:
 8007608:	b40e      	push	{r1, r2, r3}
 800760a:	b510      	push	{r4, lr}
 800760c:	b09d      	sub	sp, #116	@ 0x74
 800760e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007610:	9002      	str	r0, [sp, #8]
 8007612:	9006      	str	r0, [sp, #24]
 8007614:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007618:	480a      	ldr	r0, [pc, #40]	@ (8007644 <siprintf+0x3c>)
 800761a:	9107      	str	r1, [sp, #28]
 800761c:	9104      	str	r1, [sp, #16]
 800761e:	490a      	ldr	r1, [pc, #40]	@ (8007648 <siprintf+0x40>)
 8007620:	f853 2b04 	ldr.w	r2, [r3], #4
 8007624:	9105      	str	r1, [sp, #20]
 8007626:	2400      	movs	r4, #0
 8007628:	a902      	add	r1, sp, #8
 800762a:	6800      	ldr	r0, [r0, #0]
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007630:	f001 fd58 	bl	80090e4 <_svfiprintf_r>
 8007634:	9b02      	ldr	r3, [sp, #8]
 8007636:	701c      	strb	r4, [r3, #0]
 8007638:	b01d      	add	sp, #116	@ 0x74
 800763a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800763e:	b003      	add	sp, #12
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	20000020 	.word	0x20000020
 8007648:	ffff0208 	.word	0xffff0208

0800764c <__sread>:
 800764c:	b510      	push	{r4, lr}
 800764e:	460c      	mov	r4, r1
 8007650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007654:	f000 f992 	bl	800797c <_read_r>
 8007658:	2800      	cmp	r0, #0
 800765a:	bfab      	itete	ge
 800765c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800765e:	89a3      	ldrhlt	r3, [r4, #12]
 8007660:	181b      	addge	r3, r3, r0
 8007662:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007666:	bfac      	ite	ge
 8007668:	6563      	strge	r3, [r4, #84]	@ 0x54
 800766a:	81a3      	strhlt	r3, [r4, #12]
 800766c:	bd10      	pop	{r4, pc}

0800766e <__swrite>:
 800766e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007672:	461f      	mov	r7, r3
 8007674:	898b      	ldrh	r3, [r1, #12]
 8007676:	05db      	lsls	r3, r3, #23
 8007678:	4605      	mov	r5, r0
 800767a:	460c      	mov	r4, r1
 800767c:	4616      	mov	r6, r2
 800767e:	d505      	bpl.n	800768c <__swrite+0x1e>
 8007680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007684:	2302      	movs	r3, #2
 8007686:	2200      	movs	r2, #0
 8007688:	f000 f966 	bl	8007958 <_lseek_r>
 800768c:	89a3      	ldrh	r3, [r4, #12]
 800768e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007692:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007696:	81a3      	strh	r3, [r4, #12]
 8007698:	4632      	mov	r2, r6
 800769a:	463b      	mov	r3, r7
 800769c:	4628      	mov	r0, r5
 800769e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076a2:	f000 b97d 	b.w	80079a0 <_write_r>

080076a6 <__sseek>:
 80076a6:	b510      	push	{r4, lr}
 80076a8:	460c      	mov	r4, r1
 80076aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ae:	f000 f953 	bl	8007958 <_lseek_r>
 80076b2:	1c43      	adds	r3, r0, #1
 80076b4:	89a3      	ldrh	r3, [r4, #12]
 80076b6:	bf15      	itete	ne
 80076b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80076ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80076be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80076c2:	81a3      	strheq	r3, [r4, #12]
 80076c4:	bf18      	it	ne
 80076c6:	81a3      	strhne	r3, [r4, #12]
 80076c8:	bd10      	pop	{r4, pc}

080076ca <__sclose>:
 80076ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ce:	f000 b933 	b.w	8007938 <_close_r>

080076d2 <__swbuf_r>:
 80076d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d4:	460e      	mov	r6, r1
 80076d6:	4614      	mov	r4, r2
 80076d8:	4605      	mov	r5, r0
 80076da:	b118      	cbz	r0, 80076e4 <__swbuf_r+0x12>
 80076dc:	6a03      	ldr	r3, [r0, #32]
 80076de:	b90b      	cbnz	r3, 80076e4 <__swbuf_r+0x12>
 80076e0:	f7ff fee4 	bl	80074ac <__sinit>
 80076e4:	69a3      	ldr	r3, [r4, #24]
 80076e6:	60a3      	str	r3, [r4, #8]
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	071a      	lsls	r2, r3, #28
 80076ec:	d501      	bpl.n	80076f2 <__swbuf_r+0x20>
 80076ee:	6923      	ldr	r3, [r4, #16]
 80076f0:	b943      	cbnz	r3, 8007704 <__swbuf_r+0x32>
 80076f2:	4621      	mov	r1, r4
 80076f4:	4628      	mov	r0, r5
 80076f6:	f000 f82b 	bl	8007750 <__swsetup_r>
 80076fa:	b118      	cbz	r0, 8007704 <__swbuf_r+0x32>
 80076fc:	f04f 37ff 	mov.w	r7, #4294967295
 8007700:	4638      	mov	r0, r7
 8007702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	6922      	ldr	r2, [r4, #16]
 8007708:	1a98      	subs	r0, r3, r2
 800770a:	6963      	ldr	r3, [r4, #20]
 800770c:	b2f6      	uxtb	r6, r6
 800770e:	4283      	cmp	r3, r0
 8007710:	4637      	mov	r7, r6
 8007712:	dc05      	bgt.n	8007720 <__swbuf_r+0x4e>
 8007714:	4621      	mov	r1, r4
 8007716:	4628      	mov	r0, r5
 8007718:	f001 ffa6 	bl	8009668 <_fflush_r>
 800771c:	2800      	cmp	r0, #0
 800771e:	d1ed      	bne.n	80076fc <__swbuf_r+0x2a>
 8007720:	68a3      	ldr	r3, [r4, #8]
 8007722:	3b01      	subs	r3, #1
 8007724:	60a3      	str	r3, [r4, #8]
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	6022      	str	r2, [r4, #0]
 800772c:	701e      	strb	r6, [r3, #0]
 800772e:	6962      	ldr	r2, [r4, #20]
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	429a      	cmp	r2, r3
 8007734:	d004      	beq.n	8007740 <__swbuf_r+0x6e>
 8007736:	89a3      	ldrh	r3, [r4, #12]
 8007738:	07db      	lsls	r3, r3, #31
 800773a:	d5e1      	bpl.n	8007700 <__swbuf_r+0x2e>
 800773c:	2e0a      	cmp	r6, #10
 800773e:	d1df      	bne.n	8007700 <__swbuf_r+0x2e>
 8007740:	4621      	mov	r1, r4
 8007742:	4628      	mov	r0, r5
 8007744:	f001 ff90 	bl	8009668 <_fflush_r>
 8007748:	2800      	cmp	r0, #0
 800774a:	d0d9      	beq.n	8007700 <__swbuf_r+0x2e>
 800774c:	e7d6      	b.n	80076fc <__swbuf_r+0x2a>
	...

08007750 <__swsetup_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4b29      	ldr	r3, [pc, #164]	@ (80077f8 <__swsetup_r+0xa8>)
 8007754:	4605      	mov	r5, r0
 8007756:	6818      	ldr	r0, [r3, #0]
 8007758:	460c      	mov	r4, r1
 800775a:	b118      	cbz	r0, 8007764 <__swsetup_r+0x14>
 800775c:	6a03      	ldr	r3, [r0, #32]
 800775e:	b90b      	cbnz	r3, 8007764 <__swsetup_r+0x14>
 8007760:	f7ff fea4 	bl	80074ac <__sinit>
 8007764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007768:	0719      	lsls	r1, r3, #28
 800776a:	d422      	bmi.n	80077b2 <__swsetup_r+0x62>
 800776c:	06da      	lsls	r2, r3, #27
 800776e:	d407      	bmi.n	8007780 <__swsetup_r+0x30>
 8007770:	2209      	movs	r2, #9
 8007772:	602a      	str	r2, [r5, #0]
 8007774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007778:	81a3      	strh	r3, [r4, #12]
 800777a:	f04f 30ff 	mov.w	r0, #4294967295
 800777e:	e033      	b.n	80077e8 <__swsetup_r+0x98>
 8007780:	0758      	lsls	r0, r3, #29
 8007782:	d512      	bpl.n	80077aa <__swsetup_r+0x5a>
 8007784:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007786:	b141      	cbz	r1, 800779a <__swsetup_r+0x4a>
 8007788:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800778c:	4299      	cmp	r1, r3
 800778e:	d002      	beq.n	8007796 <__swsetup_r+0x46>
 8007790:	4628      	mov	r0, r5
 8007792:	f000 ffd1 	bl	8008738 <_free_r>
 8007796:	2300      	movs	r3, #0
 8007798:	6363      	str	r3, [r4, #52]	@ 0x34
 800779a:	89a3      	ldrh	r3, [r4, #12]
 800779c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80077a0:	81a3      	strh	r3, [r4, #12]
 80077a2:	2300      	movs	r3, #0
 80077a4:	6063      	str	r3, [r4, #4]
 80077a6:	6923      	ldr	r3, [r4, #16]
 80077a8:	6023      	str	r3, [r4, #0]
 80077aa:	89a3      	ldrh	r3, [r4, #12]
 80077ac:	f043 0308 	orr.w	r3, r3, #8
 80077b0:	81a3      	strh	r3, [r4, #12]
 80077b2:	6923      	ldr	r3, [r4, #16]
 80077b4:	b94b      	cbnz	r3, 80077ca <__swsetup_r+0x7a>
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80077bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077c0:	d003      	beq.n	80077ca <__swsetup_r+0x7a>
 80077c2:	4621      	mov	r1, r4
 80077c4:	4628      	mov	r0, r5
 80077c6:	f001 ffaf 	bl	8009728 <__smakebuf_r>
 80077ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ce:	f013 0201 	ands.w	r2, r3, #1
 80077d2:	d00a      	beq.n	80077ea <__swsetup_r+0x9a>
 80077d4:	2200      	movs	r2, #0
 80077d6:	60a2      	str	r2, [r4, #8]
 80077d8:	6962      	ldr	r2, [r4, #20]
 80077da:	4252      	negs	r2, r2
 80077dc:	61a2      	str	r2, [r4, #24]
 80077de:	6922      	ldr	r2, [r4, #16]
 80077e0:	b942      	cbnz	r2, 80077f4 <__swsetup_r+0xa4>
 80077e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80077e6:	d1c5      	bne.n	8007774 <__swsetup_r+0x24>
 80077e8:	bd38      	pop	{r3, r4, r5, pc}
 80077ea:	0799      	lsls	r1, r3, #30
 80077ec:	bf58      	it	pl
 80077ee:	6962      	ldrpl	r2, [r4, #20]
 80077f0:	60a2      	str	r2, [r4, #8]
 80077f2:	e7f4      	b.n	80077de <__swsetup_r+0x8e>
 80077f4:	2000      	movs	r0, #0
 80077f6:	e7f7      	b.n	80077e8 <__swsetup_r+0x98>
 80077f8:	20000020 	.word	0x20000020

080077fc <memset>:
 80077fc:	4402      	add	r2, r0
 80077fe:	4603      	mov	r3, r0
 8007800:	4293      	cmp	r3, r2
 8007802:	d100      	bne.n	8007806 <memset+0xa>
 8007804:	4770      	bx	lr
 8007806:	f803 1b01 	strb.w	r1, [r3], #1
 800780a:	e7f9      	b.n	8007800 <memset+0x4>

0800780c <strchr>:
 800780c:	b2c9      	uxtb	r1, r1
 800780e:	4603      	mov	r3, r0
 8007810:	4618      	mov	r0, r3
 8007812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007816:	b112      	cbz	r2, 800781e <strchr+0x12>
 8007818:	428a      	cmp	r2, r1
 800781a:	d1f9      	bne.n	8007810 <strchr+0x4>
 800781c:	4770      	bx	lr
 800781e:	2900      	cmp	r1, #0
 8007820:	bf18      	it	ne
 8007822:	2000      	movne	r0, #0
 8007824:	4770      	bx	lr

08007826 <strncmp>:
 8007826:	b510      	push	{r4, lr}
 8007828:	b16a      	cbz	r2, 8007846 <strncmp+0x20>
 800782a:	3901      	subs	r1, #1
 800782c:	1884      	adds	r4, r0, r2
 800782e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007832:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007836:	429a      	cmp	r2, r3
 8007838:	d103      	bne.n	8007842 <strncmp+0x1c>
 800783a:	42a0      	cmp	r0, r4
 800783c:	d001      	beq.n	8007842 <strncmp+0x1c>
 800783e:	2a00      	cmp	r2, #0
 8007840:	d1f5      	bne.n	800782e <strncmp+0x8>
 8007842:	1ad0      	subs	r0, r2, r3
 8007844:	bd10      	pop	{r4, pc}
 8007846:	4610      	mov	r0, r2
 8007848:	e7fc      	b.n	8007844 <strncmp+0x1e>
	...

0800784c <strtok>:
 800784c:	4b16      	ldr	r3, [pc, #88]	@ (80078a8 <strtok+0x5c>)
 800784e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007852:	681f      	ldr	r7, [r3, #0]
 8007854:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007856:	4605      	mov	r5, r0
 8007858:	460e      	mov	r6, r1
 800785a:	b9ec      	cbnz	r4, 8007898 <strtok+0x4c>
 800785c:	2050      	movs	r0, #80	@ 0x50
 800785e:	f000 ffb5 	bl	80087cc <malloc>
 8007862:	4602      	mov	r2, r0
 8007864:	6478      	str	r0, [r7, #68]	@ 0x44
 8007866:	b920      	cbnz	r0, 8007872 <strtok+0x26>
 8007868:	4b10      	ldr	r3, [pc, #64]	@ (80078ac <strtok+0x60>)
 800786a:	4811      	ldr	r0, [pc, #68]	@ (80078b0 <strtok+0x64>)
 800786c:	215b      	movs	r1, #91	@ 0x5b
 800786e:	f000 f8ed 	bl	8007a4c <__assert_func>
 8007872:	e9c0 4400 	strd	r4, r4, [r0]
 8007876:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800787a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800787e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007882:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007886:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800788a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800788e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007892:	6184      	str	r4, [r0, #24]
 8007894:	7704      	strb	r4, [r0, #28]
 8007896:	6244      	str	r4, [r0, #36]	@ 0x24
 8007898:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800789a:	4631      	mov	r1, r6
 800789c:	4628      	mov	r0, r5
 800789e:	2301      	movs	r3, #1
 80078a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078a4:	f000 b806 	b.w	80078b4 <__strtok_r>
 80078a8:	20000020 	.word	0x20000020
 80078ac:	0800add1 	.word	0x0800add1
 80078b0:	0800ade8 	.word	0x0800ade8

080078b4 <__strtok_r>:
 80078b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078b6:	4604      	mov	r4, r0
 80078b8:	b908      	cbnz	r0, 80078be <__strtok_r+0xa>
 80078ba:	6814      	ldr	r4, [r2, #0]
 80078bc:	b144      	cbz	r4, 80078d0 <__strtok_r+0x1c>
 80078be:	4620      	mov	r0, r4
 80078c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80078c4:	460f      	mov	r7, r1
 80078c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80078ca:	b91e      	cbnz	r6, 80078d4 <__strtok_r+0x20>
 80078cc:	b965      	cbnz	r5, 80078e8 <__strtok_r+0x34>
 80078ce:	6015      	str	r5, [r2, #0]
 80078d0:	2000      	movs	r0, #0
 80078d2:	e005      	b.n	80078e0 <__strtok_r+0x2c>
 80078d4:	42b5      	cmp	r5, r6
 80078d6:	d1f6      	bne.n	80078c6 <__strtok_r+0x12>
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1f0      	bne.n	80078be <__strtok_r+0xa>
 80078dc:	6014      	str	r4, [r2, #0]
 80078de:	7003      	strb	r3, [r0, #0]
 80078e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078e2:	461c      	mov	r4, r3
 80078e4:	e00c      	b.n	8007900 <__strtok_r+0x4c>
 80078e6:	b91d      	cbnz	r5, 80078f0 <__strtok_r+0x3c>
 80078e8:	4627      	mov	r7, r4
 80078ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 80078ee:	460e      	mov	r6, r1
 80078f0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80078f4:	42ab      	cmp	r3, r5
 80078f6:	d1f6      	bne.n	80078e6 <__strtok_r+0x32>
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d0f2      	beq.n	80078e2 <__strtok_r+0x2e>
 80078fc:	2300      	movs	r3, #0
 80078fe:	703b      	strb	r3, [r7, #0]
 8007900:	6014      	str	r4, [r2, #0]
 8007902:	e7ed      	b.n	80078e0 <__strtok_r+0x2c>

08007904 <strstr>:
 8007904:	780a      	ldrb	r2, [r1, #0]
 8007906:	b570      	push	{r4, r5, r6, lr}
 8007908:	b96a      	cbnz	r2, 8007926 <strstr+0x22>
 800790a:	bd70      	pop	{r4, r5, r6, pc}
 800790c:	429a      	cmp	r2, r3
 800790e:	d109      	bne.n	8007924 <strstr+0x20>
 8007910:	460c      	mov	r4, r1
 8007912:	4605      	mov	r5, r0
 8007914:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007918:	2b00      	cmp	r3, #0
 800791a:	d0f6      	beq.n	800790a <strstr+0x6>
 800791c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007920:	429e      	cmp	r6, r3
 8007922:	d0f7      	beq.n	8007914 <strstr+0x10>
 8007924:	3001      	adds	r0, #1
 8007926:	7803      	ldrb	r3, [r0, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1ef      	bne.n	800790c <strstr+0x8>
 800792c:	4618      	mov	r0, r3
 800792e:	e7ec      	b.n	800790a <strstr+0x6>

08007930 <_localeconv_r>:
 8007930:	4800      	ldr	r0, [pc, #0]	@ (8007934 <_localeconv_r+0x4>)
 8007932:	4770      	bx	lr
 8007934:	20000160 	.word	0x20000160

08007938 <_close_r>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	4d06      	ldr	r5, [pc, #24]	@ (8007954 <_close_r+0x1c>)
 800793c:	2300      	movs	r3, #0
 800793e:	4604      	mov	r4, r0
 8007940:	4608      	mov	r0, r1
 8007942:	602b      	str	r3, [r5, #0]
 8007944:	f7fb fa1a 	bl	8002d7c <_close>
 8007948:	1c43      	adds	r3, r0, #1
 800794a:	d102      	bne.n	8007952 <_close_r+0x1a>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	b103      	cbz	r3, 8007952 <_close_r+0x1a>
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	20000e08 	.word	0x20000e08

08007958 <_lseek_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4d07      	ldr	r5, [pc, #28]	@ (8007978 <_lseek_r+0x20>)
 800795c:	4604      	mov	r4, r0
 800795e:	4608      	mov	r0, r1
 8007960:	4611      	mov	r1, r2
 8007962:	2200      	movs	r2, #0
 8007964:	602a      	str	r2, [r5, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	f7fb fa2f 	bl	8002dca <_lseek>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d102      	bne.n	8007976 <_lseek_r+0x1e>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	b103      	cbz	r3, 8007976 <_lseek_r+0x1e>
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	bd38      	pop	{r3, r4, r5, pc}
 8007978:	20000e08 	.word	0x20000e08

0800797c <_read_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4d07      	ldr	r5, [pc, #28]	@ (800799c <_read_r+0x20>)
 8007980:	4604      	mov	r4, r0
 8007982:	4608      	mov	r0, r1
 8007984:	4611      	mov	r1, r2
 8007986:	2200      	movs	r2, #0
 8007988:	602a      	str	r2, [r5, #0]
 800798a:	461a      	mov	r2, r3
 800798c:	f7fb f9bd 	bl	8002d0a <_read>
 8007990:	1c43      	adds	r3, r0, #1
 8007992:	d102      	bne.n	800799a <_read_r+0x1e>
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	b103      	cbz	r3, 800799a <_read_r+0x1e>
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	20000e08 	.word	0x20000e08

080079a0 <_write_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	4d07      	ldr	r5, [pc, #28]	@ (80079c0 <_write_r+0x20>)
 80079a4:	4604      	mov	r4, r0
 80079a6:	4608      	mov	r0, r1
 80079a8:	4611      	mov	r1, r2
 80079aa:	2200      	movs	r2, #0
 80079ac:	602a      	str	r2, [r5, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	f7fb f9c8 	bl	8002d44 <_write>
 80079b4:	1c43      	adds	r3, r0, #1
 80079b6:	d102      	bne.n	80079be <_write_r+0x1e>
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	b103      	cbz	r3, 80079be <_write_r+0x1e>
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	bd38      	pop	{r3, r4, r5, pc}
 80079c0:	20000e08 	.word	0x20000e08

080079c4 <__errno>:
 80079c4:	4b01      	ldr	r3, [pc, #4]	@ (80079cc <__errno+0x8>)
 80079c6:	6818      	ldr	r0, [r3, #0]
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	20000020 	.word	0x20000020

080079d0 <__libc_init_array>:
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007a08 <__libc_init_array+0x38>)
 80079d4:	4c0d      	ldr	r4, [pc, #52]	@ (8007a0c <__libc_init_array+0x3c>)
 80079d6:	1b64      	subs	r4, r4, r5
 80079d8:	10a4      	asrs	r4, r4, #2
 80079da:	2600      	movs	r6, #0
 80079dc:	42a6      	cmp	r6, r4
 80079de:	d109      	bne.n	80079f4 <__libc_init_array+0x24>
 80079e0:	4d0b      	ldr	r5, [pc, #44]	@ (8007a10 <__libc_init_array+0x40>)
 80079e2:	4c0c      	ldr	r4, [pc, #48]	@ (8007a14 <__libc_init_array+0x44>)
 80079e4:	f002 ff6e 	bl	800a8c4 <_init>
 80079e8:	1b64      	subs	r4, r4, r5
 80079ea:	10a4      	asrs	r4, r4, #2
 80079ec:	2600      	movs	r6, #0
 80079ee:	42a6      	cmp	r6, r4
 80079f0:	d105      	bne.n	80079fe <__libc_init_array+0x2e>
 80079f2:	bd70      	pop	{r4, r5, r6, pc}
 80079f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079f8:	4798      	blx	r3
 80079fa:	3601      	adds	r6, #1
 80079fc:	e7ee      	b.n	80079dc <__libc_init_array+0xc>
 80079fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a02:	4798      	blx	r3
 8007a04:	3601      	adds	r6, #1
 8007a06:	e7f2      	b.n	80079ee <__libc_init_array+0x1e>
 8007a08:	0800b0b0 	.word	0x0800b0b0
 8007a0c:	0800b0b0 	.word	0x0800b0b0
 8007a10:	0800b0b0 	.word	0x0800b0b0
 8007a14:	0800b0b4 	.word	0x0800b0b4

08007a18 <__retarget_lock_init_recursive>:
 8007a18:	4770      	bx	lr

08007a1a <__retarget_lock_acquire_recursive>:
 8007a1a:	4770      	bx	lr

08007a1c <__retarget_lock_release_recursive>:
 8007a1c:	4770      	bx	lr

08007a1e <strcpy>:
 8007a1e:	4603      	mov	r3, r0
 8007a20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a24:	f803 2b01 	strb.w	r2, [r3], #1
 8007a28:	2a00      	cmp	r2, #0
 8007a2a:	d1f9      	bne.n	8007a20 <strcpy+0x2>
 8007a2c:	4770      	bx	lr

08007a2e <memcpy>:
 8007a2e:	440a      	add	r2, r1
 8007a30:	4291      	cmp	r1, r2
 8007a32:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a36:	d100      	bne.n	8007a3a <memcpy+0xc>
 8007a38:	4770      	bx	lr
 8007a3a:	b510      	push	{r4, lr}
 8007a3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a44:	4291      	cmp	r1, r2
 8007a46:	d1f9      	bne.n	8007a3c <memcpy+0xe>
 8007a48:	bd10      	pop	{r4, pc}
	...

08007a4c <__assert_func>:
 8007a4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a4e:	4614      	mov	r4, r2
 8007a50:	461a      	mov	r2, r3
 8007a52:	4b09      	ldr	r3, [pc, #36]	@ (8007a78 <__assert_func+0x2c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4605      	mov	r5, r0
 8007a58:	68d8      	ldr	r0, [r3, #12]
 8007a5a:	b14c      	cbz	r4, 8007a70 <__assert_func+0x24>
 8007a5c:	4b07      	ldr	r3, [pc, #28]	@ (8007a7c <__assert_func+0x30>)
 8007a5e:	9100      	str	r1, [sp, #0]
 8007a60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a64:	4906      	ldr	r1, [pc, #24]	@ (8007a80 <__assert_func+0x34>)
 8007a66:	462b      	mov	r3, r5
 8007a68:	f001 fe26 	bl	80096b8 <fiprintf>
 8007a6c:	f001 ff18 	bl	80098a0 <abort>
 8007a70:	4b04      	ldr	r3, [pc, #16]	@ (8007a84 <__assert_func+0x38>)
 8007a72:	461c      	mov	r4, r3
 8007a74:	e7f3      	b.n	8007a5e <__assert_func+0x12>
 8007a76:	bf00      	nop
 8007a78:	20000020 	.word	0x20000020
 8007a7c:	0800ae42 	.word	0x0800ae42
 8007a80:	0800ae4f 	.word	0x0800ae4f
 8007a84:	0800ae7d 	.word	0x0800ae7d

08007a88 <quorem>:
 8007a88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8c:	6903      	ldr	r3, [r0, #16]
 8007a8e:	690c      	ldr	r4, [r1, #16]
 8007a90:	42a3      	cmp	r3, r4
 8007a92:	4607      	mov	r7, r0
 8007a94:	db7e      	blt.n	8007b94 <quorem+0x10c>
 8007a96:	3c01      	subs	r4, #1
 8007a98:	f101 0814 	add.w	r8, r1, #20
 8007a9c:	00a3      	lsls	r3, r4, #2
 8007a9e:	f100 0514 	add.w	r5, r0, #20
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aa8:	9301      	str	r3, [sp, #4]
 8007aaa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007aae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007aba:	fbb2 f6f3 	udiv	r6, r2, r3
 8007abe:	d32e      	bcc.n	8007b1e <quorem+0x96>
 8007ac0:	f04f 0a00 	mov.w	sl, #0
 8007ac4:	46c4      	mov	ip, r8
 8007ac6:	46ae      	mov	lr, r5
 8007ac8:	46d3      	mov	fp, sl
 8007aca:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ace:	b298      	uxth	r0, r3
 8007ad0:	fb06 a000 	mla	r0, r6, r0, sl
 8007ad4:	0c02      	lsrs	r2, r0, #16
 8007ad6:	0c1b      	lsrs	r3, r3, #16
 8007ad8:	fb06 2303 	mla	r3, r6, r3, r2
 8007adc:	f8de 2000 	ldr.w	r2, [lr]
 8007ae0:	b280      	uxth	r0, r0
 8007ae2:	b292      	uxth	r2, r2
 8007ae4:	1a12      	subs	r2, r2, r0
 8007ae6:	445a      	add	r2, fp
 8007ae8:	f8de 0000 	ldr.w	r0, [lr]
 8007aec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007af6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007afa:	b292      	uxth	r2, r2
 8007afc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b00:	45e1      	cmp	r9, ip
 8007b02:	f84e 2b04 	str.w	r2, [lr], #4
 8007b06:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007b0a:	d2de      	bcs.n	8007aca <quorem+0x42>
 8007b0c:	9b00      	ldr	r3, [sp, #0]
 8007b0e:	58eb      	ldr	r3, [r5, r3]
 8007b10:	b92b      	cbnz	r3, 8007b1e <quorem+0x96>
 8007b12:	9b01      	ldr	r3, [sp, #4]
 8007b14:	3b04      	subs	r3, #4
 8007b16:	429d      	cmp	r5, r3
 8007b18:	461a      	mov	r2, r3
 8007b1a:	d32f      	bcc.n	8007b7c <quorem+0xf4>
 8007b1c:	613c      	str	r4, [r7, #16]
 8007b1e:	4638      	mov	r0, r7
 8007b20:	f001 f97c 	bl	8008e1c <__mcmp>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	db25      	blt.n	8007b74 <quorem+0xec>
 8007b28:	4629      	mov	r1, r5
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b30:	f8d1 c000 	ldr.w	ip, [r1]
 8007b34:	fa1f fe82 	uxth.w	lr, r2
 8007b38:	fa1f f38c 	uxth.w	r3, ip
 8007b3c:	eba3 030e 	sub.w	r3, r3, lr
 8007b40:	4403      	add	r3, r0
 8007b42:	0c12      	lsrs	r2, r2, #16
 8007b44:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007b48:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b52:	45c1      	cmp	r9, r8
 8007b54:	f841 3b04 	str.w	r3, [r1], #4
 8007b58:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b5c:	d2e6      	bcs.n	8007b2c <quorem+0xa4>
 8007b5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b66:	b922      	cbnz	r2, 8007b72 <quorem+0xea>
 8007b68:	3b04      	subs	r3, #4
 8007b6a:	429d      	cmp	r5, r3
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	d30b      	bcc.n	8007b88 <quorem+0x100>
 8007b70:	613c      	str	r4, [r7, #16]
 8007b72:	3601      	adds	r6, #1
 8007b74:	4630      	mov	r0, r6
 8007b76:	b003      	add	sp, #12
 8007b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7c:	6812      	ldr	r2, [r2, #0]
 8007b7e:	3b04      	subs	r3, #4
 8007b80:	2a00      	cmp	r2, #0
 8007b82:	d1cb      	bne.n	8007b1c <quorem+0x94>
 8007b84:	3c01      	subs	r4, #1
 8007b86:	e7c6      	b.n	8007b16 <quorem+0x8e>
 8007b88:	6812      	ldr	r2, [r2, #0]
 8007b8a:	3b04      	subs	r3, #4
 8007b8c:	2a00      	cmp	r2, #0
 8007b8e:	d1ef      	bne.n	8007b70 <quorem+0xe8>
 8007b90:	3c01      	subs	r4, #1
 8007b92:	e7ea      	b.n	8007b6a <quorem+0xe2>
 8007b94:	2000      	movs	r0, #0
 8007b96:	e7ee      	b.n	8007b76 <quorem+0xee>

08007b98 <_dtoa_r>:
 8007b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	69c7      	ldr	r7, [r0, #28]
 8007b9e:	b097      	sub	sp, #92	@ 0x5c
 8007ba0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007ba4:	ec55 4b10 	vmov	r4, r5, d0
 8007ba8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007baa:	9107      	str	r1, [sp, #28]
 8007bac:	4681      	mov	r9, r0
 8007bae:	920c      	str	r2, [sp, #48]	@ 0x30
 8007bb0:	9311      	str	r3, [sp, #68]	@ 0x44
 8007bb2:	b97f      	cbnz	r7, 8007bd4 <_dtoa_r+0x3c>
 8007bb4:	2010      	movs	r0, #16
 8007bb6:	f000 fe09 	bl	80087cc <malloc>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	f8c9 001c 	str.w	r0, [r9, #28]
 8007bc0:	b920      	cbnz	r0, 8007bcc <_dtoa_r+0x34>
 8007bc2:	4ba9      	ldr	r3, [pc, #676]	@ (8007e68 <_dtoa_r+0x2d0>)
 8007bc4:	21ef      	movs	r1, #239	@ 0xef
 8007bc6:	48a9      	ldr	r0, [pc, #676]	@ (8007e6c <_dtoa_r+0x2d4>)
 8007bc8:	f7ff ff40 	bl	8007a4c <__assert_func>
 8007bcc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007bd0:	6007      	str	r7, [r0, #0]
 8007bd2:	60c7      	str	r7, [r0, #12]
 8007bd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007bd8:	6819      	ldr	r1, [r3, #0]
 8007bda:	b159      	cbz	r1, 8007bf4 <_dtoa_r+0x5c>
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	604a      	str	r2, [r1, #4]
 8007be0:	2301      	movs	r3, #1
 8007be2:	4093      	lsls	r3, r2
 8007be4:	608b      	str	r3, [r1, #8]
 8007be6:	4648      	mov	r0, r9
 8007be8:	f000 fee6 	bl	80089b8 <_Bfree>
 8007bec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	1e2b      	subs	r3, r5, #0
 8007bf6:	bfb9      	ittee	lt
 8007bf8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007bfc:	9305      	strlt	r3, [sp, #20]
 8007bfe:	2300      	movge	r3, #0
 8007c00:	6033      	strge	r3, [r6, #0]
 8007c02:	9f05      	ldr	r7, [sp, #20]
 8007c04:	4b9a      	ldr	r3, [pc, #616]	@ (8007e70 <_dtoa_r+0x2d8>)
 8007c06:	bfbc      	itt	lt
 8007c08:	2201      	movlt	r2, #1
 8007c0a:	6032      	strlt	r2, [r6, #0]
 8007c0c:	43bb      	bics	r3, r7
 8007c0e:	d112      	bne.n	8007c36 <_dtoa_r+0x9e>
 8007c10:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007c12:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007c16:	6013      	str	r3, [r2, #0]
 8007c18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c1c:	4323      	orrs	r3, r4
 8007c1e:	f000 855a 	beq.w	80086d6 <_dtoa_r+0xb3e>
 8007c22:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c24:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007e84 <_dtoa_r+0x2ec>
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 855c 	beq.w	80086e6 <_dtoa_r+0xb4e>
 8007c2e:	f10a 0303 	add.w	r3, sl, #3
 8007c32:	f000 bd56 	b.w	80086e2 <_dtoa_r+0xb4a>
 8007c36:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	ec51 0b17 	vmov	r0, r1, d7
 8007c40:	2300      	movs	r3, #0
 8007c42:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007c46:	f7f8 ff57 	bl	8000af8 <__aeabi_dcmpeq>
 8007c4a:	4680      	mov	r8, r0
 8007c4c:	b158      	cbz	r0, 8007c66 <_dtoa_r+0xce>
 8007c4e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007c50:	2301      	movs	r3, #1
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c56:	b113      	cbz	r3, 8007c5e <_dtoa_r+0xc6>
 8007c58:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007c5a:	4b86      	ldr	r3, [pc, #536]	@ (8007e74 <_dtoa_r+0x2dc>)
 8007c5c:	6013      	str	r3, [r2, #0]
 8007c5e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007e88 <_dtoa_r+0x2f0>
 8007c62:	f000 bd40 	b.w	80086e6 <_dtoa_r+0xb4e>
 8007c66:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007c6a:	aa14      	add	r2, sp, #80	@ 0x50
 8007c6c:	a915      	add	r1, sp, #84	@ 0x54
 8007c6e:	4648      	mov	r0, r9
 8007c70:	f001 f984 	bl	8008f7c <__d2b>
 8007c74:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007c78:	9002      	str	r0, [sp, #8]
 8007c7a:	2e00      	cmp	r6, #0
 8007c7c:	d078      	beq.n	8007d70 <_dtoa_r+0x1d8>
 8007c7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c80:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007c8c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007c90:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007c94:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007c98:	4619      	mov	r1, r3
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	4b76      	ldr	r3, [pc, #472]	@ (8007e78 <_dtoa_r+0x2e0>)
 8007c9e:	f7f8 fb0b 	bl	80002b8 <__aeabi_dsub>
 8007ca2:	a36b      	add	r3, pc, #428	@ (adr r3, 8007e50 <_dtoa_r+0x2b8>)
 8007ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca8:	f7f8 fcbe 	bl	8000628 <__aeabi_dmul>
 8007cac:	a36a      	add	r3, pc, #424	@ (adr r3, 8007e58 <_dtoa_r+0x2c0>)
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	f7f8 fb03 	bl	80002bc <__adddf3>
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	4630      	mov	r0, r6
 8007cba:	460d      	mov	r5, r1
 8007cbc:	f7f8 fc4a 	bl	8000554 <__aeabi_i2d>
 8007cc0:	a367      	add	r3, pc, #412	@ (adr r3, 8007e60 <_dtoa_r+0x2c8>)
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	f7f8 fcaf 	bl	8000628 <__aeabi_dmul>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4620      	mov	r0, r4
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	f7f8 faf3 	bl	80002bc <__adddf3>
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	460d      	mov	r5, r1
 8007cda:	f7f8 ff55 	bl	8000b88 <__aeabi_d2iz>
 8007cde:	2200      	movs	r2, #0
 8007ce0:	4607      	mov	r7, r0
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	f7f8 ff10 	bl	8000b0c <__aeabi_dcmplt>
 8007cec:	b140      	cbz	r0, 8007d00 <_dtoa_r+0x168>
 8007cee:	4638      	mov	r0, r7
 8007cf0:	f7f8 fc30 	bl	8000554 <__aeabi_i2d>
 8007cf4:	4622      	mov	r2, r4
 8007cf6:	462b      	mov	r3, r5
 8007cf8:	f7f8 fefe 	bl	8000af8 <__aeabi_dcmpeq>
 8007cfc:	b900      	cbnz	r0, 8007d00 <_dtoa_r+0x168>
 8007cfe:	3f01      	subs	r7, #1
 8007d00:	2f16      	cmp	r7, #22
 8007d02:	d852      	bhi.n	8007daa <_dtoa_r+0x212>
 8007d04:	4b5d      	ldr	r3, [pc, #372]	@ (8007e7c <_dtoa_r+0x2e4>)
 8007d06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d12:	f7f8 fefb 	bl	8000b0c <__aeabi_dcmplt>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d049      	beq.n	8007dae <_dtoa_r+0x216>
 8007d1a:	3f01      	subs	r7, #1
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d20:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007d22:	1b9b      	subs	r3, r3, r6
 8007d24:	1e5a      	subs	r2, r3, #1
 8007d26:	bf45      	ittet	mi
 8007d28:	f1c3 0301 	rsbmi	r3, r3, #1
 8007d2c:	9300      	strmi	r3, [sp, #0]
 8007d2e:	2300      	movpl	r3, #0
 8007d30:	2300      	movmi	r3, #0
 8007d32:	9206      	str	r2, [sp, #24]
 8007d34:	bf54      	ite	pl
 8007d36:	9300      	strpl	r3, [sp, #0]
 8007d38:	9306      	strmi	r3, [sp, #24]
 8007d3a:	2f00      	cmp	r7, #0
 8007d3c:	db39      	blt.n	8007db2 <_dtoa_r+0x21a>
 8007d3e:	9b06      	ldr	r3, [sp, #24]
 8007d40:	970d      	str	r7, [sp, #52]	@ 0x34
 8007d42:	443b      	add	r3, r7
 8007d44:	9306      	str	r3, [sp, #24]
 8007d46:	2300      	movs	r3, #0
 8007d48:	9308      	str	r3, [sp, #32]
 8007d4a:	9b07      	ldr	r3, [sp, #28]
 8007d4c:	2b09      	cmp	r3, #9
 8007d4e:	d863      	bhi.n	8007e18 <_dtoa_r+0x280>
 8007d50:	2b05      	cmp	r3, #5
 8007d52:	bfc4      	itt	gt
 8007d54:	3b04      	subgt	r3, #4
 8007d56:	9307      	strgt	r3, [sp, #28]
 8007d58:	9b07      	ldr	r3, [sp, #28]
 8007d5a:	f1a3 0302 	sub.w	r3, r3, #2
 8007d5e:	bfcc      	ite	gt
 8007d60:	2400      	movgt	r4, #0
 8007d62:	2401      	movle	r4, #1
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d863      	bhi.n	8007e30 <_dtoa_r+0x298>
 8007d68:	e8df f003 	tbb	[pc, r3]
 8007d6c:	2b375452 	.word	0x2b375452
 8007d70:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007d74:	441e      	add	r6, r3
 8007d76:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007d7a:	2b20      	cmp	r3, #32
 8007d7c:	bfc1      	itttt	gt
 8007d7e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007d82:	409f      	lslgt	r7, r3
 8007d84:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007d88:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007d8c:	bfd6      	itet	le
 8007d8e:	f1c3 0320 	rsble	r3, r3, #32
 8007d92:	ea47 0003 	orrgt.w	r0, r7, r3
 8007d96:	fa04 f003 	lslle.w	r0, r4, r3
 8007d9a:	f7f8 fbcb 	bl	8000534 <__aeabi_ui2d>
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007da4:	3e01      	subs	r6, #1
 8007da6:	9212      	str	r2, [sp, #72]	@ 0x48
 8007da8:	e776      	b.n	8007c98 <_dtoa_r+0x100>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e7b7      	b.n	8007d1e <_dtoa_r+0x186>
 8007dae:	9010      	str	r0, [sp, #64]	@ 0x40
 8007db0:	e7b6      	b.n	8007d20 <_dtoa_r+0x188>
 8007db2:	9b00      	ldr	r3, [sp, #0]
 8007db4:	1bdb      	subs	r3, r3, r7
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	427b      	negs	r3, r7
 8007dba:	9308      	str	r3, [sp, #32]
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	930d      	str	r3, [sp, #52]	@ 0x34
 8007dc0:	e7c3      	b.n	8007d4a <_dtoa_r+0x1b2>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007dc8:	eb07 0b03 	add.w	fp, r7, r3
 8007dcc:	f10b 0301 	add.w	r3, fp, #1
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	9303      	str	r3, [sp, #12]
 8007dd4:	bfb8      	it	lt
 8007dd6:	2301      	movlt	r3, #1
 8007dd8:	e006      	b.n	8007de8 <_dtoa_r+0x250>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	dd28      	ble.n	8007e36 <_dtoa_r+0x29e>
 8007de4:	469b      	mov	fp, r3
 8007de6:	9303      	str	r3, [sp, #12]
 8007de8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007dec:	2100      	movs	r1, #0
 8007dee:	2204      	movs	r2, #4
 8007df0:	f102 0514 	add.w	r5, r2, #20
 8007df4:	429d      	cmp	r5, r3
 8007df6:	d926      	bls.n	8007e46 <_dtoa_r+0x2ae>
 8007df8:	6041      	str	r1, [r0, #4]
 8007dfa:	4648      	mov	r0, r9
 8007dfc:	f000 fd9c 	bl	8008938 <_Balloc>
 8007e00:	4682      	mov	sl, r0
 8007e02:	2800      	cmp	r0, #0
 8007e04:	d142      	bne.n	8007e8c <_dtoa_r+0x2f4>
 8007e06:	4b1e      	ldr	r3, [pc, #120]	@ (8007e80 <_dtoa_r+0x2e8>)
 8007e08:	4602      	mov	r2, r0
 8007e0a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e0e:	e6da      	b.n	8007bc6 <_dtoa_r+0x2e>
 8007e10:	2300      	movs	r3, #0
 8007e12:	e7e3      	b.n	8007ddc <_dtoa_r+0x244>
 8007e14:	2300      	movs	r3, #0
 8007e16:	e7d5      	b.n	8007dc4 <_dtoa_r+0x22c>
 8007e18:	2401      	movs	r4, #1
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	9307      	str	r3, [sp, #28]
 8007e1e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007e20:	f04f 3bff 	mov.w	fp, #4294967295
 8007e24:	2200      	movs	r2, #0
 8007e26:	f8cd b00c 	str.w	fp, [sp, #12]
 8007e2a:	2312      	movs	r3, #18
 8007e2c:	920c      	str	r2, [sp, #48]	@ 0x30
 8007e2e:	e7db      	b.n	8007de8 <_dtoa_r+0x250>
 8007e30:	2301      	movs	r3, #1
 8007e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e34:	e7f4      	b.n	8007e20 <_dtoa_r+0x288>
 8007e36:	f04f 0b01 	mov.w	fp, #1
 8007e3a:	f8cd b00c 	str.w	fp, [sp, #12]
 8007e3e:	465b      	mov	r3, fp
 8007e40:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007e44:	e7d0      	b.n	8007de8 <_dtoa_r+0x250>
 8007e46:	3101      	adds	r1, #1
 8007e48:	0052      	lsls	r2, r2, #1
 8007e4a:	e7d1      	b.n	8007df0 <_dtoa_r+0x258>
 8007e4c:	f3af 8000 	nop.w
 8007e50:	636f4361 	.word	0x636f4361
 8007e54:	3fd287a7 	.word	0x3fd287a7
 8007e58:	8b60c8b3 	.word	0x8b60c8b3
 8007e5c:	3fc68a28 	.word	0x3fc68a28
 8007e60:	509f79fb 	.word	0x509f79fb
 8007e64:	3fd34413 	.word	0x3fd34413
 8007e68:	0800add1 	.word	0x0800add1
 8007e6c:	0800ae8b 	.word	0x0800ae8b
 8007e70:	7ff00000 	.word	0x7ff00000
 8007e74:	0800adae 	.word	0x0800adae
 8007e78:	3ff80000 	.word	0x3ff80000
 8007e7c:	0800afa0 	.word	0x0800afa0
 8007e80:	0800aee3 	.word	0x0800aee3
 8007e84:	0800ae87 	.word	0x0800ae87
 8007e88:	0800adad 	.word	0x0800adad
 8007e8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e90:	6018      	str	r0, [r3, #0]
 8007e92:	9b03      	ldr	r3, [sp, #12]
 8007e94:	2b0e      	cmp	r3, #14
 8007e96:	f200 80a1 	bhi.w	8007fdc <_dtoa_r+0x444>
 8007e9a:	2c00      	cmp	r4, #0
 8007e9c:	f000 809e 	beq.w	8007fdc <_dtoa_r+0x444>
 8007ea0:	2f00      	cmp	r7, #0
 8007ea2:	dd33      	ble.n	8007f0c <_dtoa_r+0x374>
 8007ea4:	4b9c      	ldr	r3, [pc, #624]	@ (8008118 <_dtoa_r+0x580>)
 8007ea6:	f007 020f 	and.w	r2, r7, #15
 8007eaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eae:	ed93 7b00 	vldr	d7, [r3]
 8007eb2:	05f8      	lsls	r0, r7, #23
 8007eb4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007eb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007ebc:	d516      	bpl.n	8007eec <_dtoa_r+0x354>
 8007ebe:	4b97      	ldr	r3, [pc, #604]	@ (800811c <_dtoa_r+0x584>)
 8007ec0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007ec4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ec8:	f7f8 fcd8 	bl	800087c <__aeabi_ddiv>
 8007ecc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ed0:	f004 040f 	and.w	r4, r4, #15
 8007ed4:	2603      	movs	r6, #3
 8007ed6:	4d91      	ldr	r5, [pc, #580]	@ (800811c <_dtoa_r+0x584>)
 8007ed8:	b954      	cbnz	r4, 8007ef0 <_dtoa_r+0x358>
 8007eda:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007ede:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ee2:	f7f8 fccb 	bl	800087c <__aeabi_ddiv>
 8007ee6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007eea:	e028      	b.n	8007f3e <_dtoa_r+0x3a6>
 8007eec:	2602      	movs	r6, #2
 8007eee:	e7f2      	b.n	8007ed6 <_dtoa_r+0x33e>
 8007ef0:	07e1      	lsls	r1, r4, #31
 8007ef2:	d508      	bpl.n	8007f06 <_dtoa_r+0x36e>
 8007ef4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007ef8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007efc:	f7f8 fb94 	bl	8000628 <__aeabi_dmul>
 8007f00:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f04:	3601      	adds	r6, #1
 8007f06:	1064      	asrs	r4, r4, #1
 8007f08:	3508      	adds	r5, #8
 8007f0a:	e7e5      	b.n	8007ed8 <_dtoa_r+0x340>
 8007f0c:	f000 80af 	beq.w	800806e <_dtoa_r+0x4d6>
 8007f10:	427c      	negs	r4, r7
 8007f12:	4b81      	ldr	r3, [pc, #516]	@ (8008118 <_dtoa_r+0x580>)
 8007f14:	4d81      	ldr	r5, [pc, #516]	@ (800811c <_dtoa_r+0x584>)
 8007f16:	f004 020f 	and.w	r2, r4, #15
 8007f1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007f26:	f7f8 fb7f 	bl	8000628 <__aeabi_dmul>
 8007f2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f2e:	1124      	asrs	r4, r4, #4
 8007f30:	2300      	movs	r3, #0
 8007f32:	2602      	movs	r6, #2
 8007f34:	2c00      	cmp	r4, #0
 8007f36:	f040 808f 	bne.w	8008058 <_dtoa_r+0x4c0>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1d3      	bne.n	8007ee6 <_dtoa_r+0x34e>
 8007f3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f40:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 8094 	beq.w	8008072 <_dtoa_r+0x4da>
 8007f4a:	4b75      	ldr	r3, [pc, #468]	@ (8008120 <_dtoa_r+0x588>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4620      	mov	r0, r4
 8007f50:	4629      	mov	r1, r5
 8007f52:	f7f8 fddb 	bl	8000b0c <__aeabi_dcmplt>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	f000 808b 	beq.w	8008072 <_dtoa_r+0x4da>
 8007f5c:	9b03      	ldr	r3, [sp, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 8087 	beq.w	8008072 <_dtoa_r+0x4da>
 8007f64:	f1bb 0f00 	cmp.w	fp, #0
 8007f68:	dd34      	ble.n	8007fd4 <_dtoa_r+0x43c>
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	4b6d      	ldr	r3, [pc, #436]	@ (8008124 <_dtoa_r+0x58c>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	4629      	mov	r1, r5
 8007f72:	f7f8 fb59 	bl	8000628 <__aeabi_dmul>
 8007f76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f7a:	f107 38ff 	add.w	r8, r7, #4294967295
 8007f7e:	3601      	adds	r6, #1
 8007f80:	465c      	mov	r4, fp
 8007f82:	4630      	mov	r0, r6
 8007f84:	f7f8 fae6 	bl	8000554 <__aeabi_i2d>
 8007f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f8c:	f7f8 fb4c 	bl	8000628 <__aeabi_dmul>
 8007f90:	4b65      	ldr	r3, [pc, #404]	@ (8008128 <_dtoa_r+0x590>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	f7f8 f992 	bl	80002bc <__adddf3>
 8007f98:	4605      	mov	r5, r0
 8007f9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007f9e:	2c00      	cmp	r4, #0
 8007fa0:	d16a      	bne.n	8008078 <_dtoa_r+0x4e0>
 8007fa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fa6:	4b61      	ldr	r3, [pc, #388]	@ (800812c <_dtoa_r+0x594>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f7f8 f985 	bl	80002b8 <__aeabi_dsub>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fb6:	462a      	mov	r2, r5
 8007fb8:	4633      	mov	r3, r6
 8007fba:	f7f8 fdc5 	bl	8000b48 <__aeabi_dcmpgt>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	f040 8298 	bne.w	80084f4 <_dtoa_r+0x95c>
 8007fc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fc8:	462a      	mov	r2, r5
 8007fca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007fce:	f7f8 fd9d 	bl	8000b0c <__aeabi_dcmplt>
 8007fd2:	bb38      	cbnz	r0, 8008024 <_dtoa_r+0x48c>
 8007fd4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007fd8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007fdc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f2c0 8157 	blt.w	8008292 <_dtoa_r+0x6fa>
 8007fe4:	2f0e      	cmp	r7, #14
 8007fe6:	f300 8154 	bgt.w	8008292 <_dtoa_r+0x6fa>
 8007fea:	4b4b      	ldr	r3, [pc, #300]	@ (8008118 <_dtoa_r+0x580>)
 8007fec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ff0:	ed93 7b00 	vldr	d7, [r3]
 8007ff4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	ed8d 7b00 	vstr	d7, [sp]
 8007ffc:	f280 80e5 	bge.w	80081ca <_dtoa_r+0x632>
 8008000:	9b03      	ldr	r3, [sp, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	f300 80e1 	bgt.w	80081ca <_dtoa_r+0x632>
 8008008:	d10c      	bne.n	8008024 <_dtoa_r+0x48c>
 800800a:	4b48      	ldr	r3, [pc, #288]	@ (800812c <_dtoa_r+0x594>)
 800800c:	2200      	movs	r2, #0
 800800e:	ec51 0b17 	vmov	r0, r1, d7
 8008012:	f7f8 fb09 	bl	8000628 <__aeabi_dmul>
 8008016:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800801a:	f7f8 fd8b 	bl	8000b34 <__aeabi_dcmpge>
 800801e:	2800      	cmp	r0, #0
 8008020:	f000 8266 	beq.w	80084f0 <_dtoa_r+0x958>
 8008024:	2400      	movs	r4, #0
 8008026:	4625      	mov	r5, r4
 8008028:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800802a:	4656      	mov	r6, sl
 800802c:	ea6f 0803 	mvn.w	r8, r3
 8008030:	2700      	movs	r7, #0
 8008032:	4621      	mov	r1, r4
 8008034:	4648      	mov	r0, r9
 8008036:	f000 fcbf 	bl	80089b8 <_Bfree>
 800803a:	2d00      	cmp	r5, #0
 800803c:	f000 80bd 	beq.w	80081ba <_dtoa_r+0x622>
 8008040:	b12f      	cbz	r7, 800804e <_dtoa_r+0x4b6>
 8008042:	42af      	cmp	r7, r5
 8008044:	d003      	beq.n	800804e <_dtoa_r+0x4b6>
 8008046:	4639      	mov	r1, r7
 8008048:	4648      	mov	r0, r9
 800804a:	f000 fcb5 	bl	80089b8 <_Bfree>
 800804e:	4629      	mov	r1, r5
 8008050:	4648      	mov	r0, r9
 8008052:	f000 fcb1 	bl	80089b8 <_Bfree>
 8008056:	e0b0      	b.n	80081ba <_dtoa_r+0x622>
 8008058:	07e2      	lsls	r2, r4, #31
 800805a:	d505      	bpl.n	8008068 <_dtoa_r+0x4d0>
 800805c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008060:	f7f8 fae2 	bl	8000628 <__aeabi_dmul>
 8008064:	3601      	adds	r6, #1
 8008066:	2301      	movs	r3, #1
 8008068:	1064      	asrs	r4, r4, #1
 800806a:	3508      	adds	r5, #8
 800806c:	e762      	b.n	8007f34 <_dtoa_r+0x39c>
 800806e:	2602      	movs	r6, #2
 8008070:	e765      	b.n	8007f3e <_dtoa_r+0x3a6>
 8008072:	9c03      	ldr	r4, [sp, #12]
 8008074:	46b8      	mov	r8, r7
 8008076:	e784      	b.n	8007f82 <_dtoa_r+0x3ea>
 8008078:	4b27      	ldr	r3, [pc, #156]	@ (8008118 <_dtoa_r+0x580>)
 800807a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800807c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008080:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008084:	4454      	add	r4, sl
 8008086:	2900      	cmp	r1, #0
 8008088:	d054      	beq.n	8008134 <_dtoa_r+0x59c>
 800808a:	4929      	ldr	r1, [pc, #164]	@ (8008130 <_dtoa_r+0x598>)
 800808c:	2000      	movs	r0, #0
 800808e:	f7f8 fbf5 	bl	800087c <__aeabi_ddiv>
 8008092:	4633      	mov	r3, r6
 8008094:	462a      	mov	r2, r5
 8008096:	f7f8 f90f 	bl	80002b8 <__aeabi_dsub>
 800809a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800809e:	4656      	mov	r6, sl
 80080a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080a4:	f7f8 fd70 	bl	8000b88 <__aeabi_d2iz>
 80080a8:	4605      	mov	r5, r0
 80080aa:	f7f8 fa53 	bl	8000554 <__aeabi_i2d>
 80080ae:	4602      	mov	r2, r0
 80080b0:	460b      	mov	r3, r1
 80080b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080b6:	f7f8 f8ff 	bl	80002b8 <__aeabi_dsub>
 80080ba:	3530      	adds	r5, #48	@ 0x30
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80080c4:	f806 5b01 	strb.w	r5, [r6], #1
 80080c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80080cc:	f7f8 fd1e 	bl	8000b0c <__aeabi_dcmplt>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d172      	bne.n	80081ba <_dtoa_r+0x622>
 80080d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080d8:	4911      	ldr	r1, [pc, #68]	@ (8008120 <_dtoa_r+0x588>)
 80080da:	2000      	movs	r0, #0
 80080dc:	f7f8 f8ec 	bl	80002b8 <__aeabi_dsub>
 80080e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80080e4:	f7f8 fd12 	bl	8000b0c <__aeabi_dcmplt>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	f040 80b4 	bne.w	8008256 <_dtoa_r+0x6be>
 80080ee:	42a6      	cmp	r6, r4
 80080f0:	f43f af70 	beq.w	8007fd4 <_dtoa_r+0x43c>
 80080f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80080f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008124 <_dtoa_r+0x58c>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	f7f8 fa94 	bl	8000628 <__aeabi_dmul>
 8008100:	4b08      	ldr	r3, [pc, #32]	@ (8008124 <_dtoa_r+0x58c>)
 8008102:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008106:	2200      	movs	r2, #0
 8008108:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800810c:	f7f8 fa8c 	bl	8000628 <__aeabi_dmul>
 8008110:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008114:	e7c4      	b.n	80080a0 <_dtoa_r+0x508>
 8008116:	bf00      	nop
 8008118:	0800afa0 	.word	0x0800afa0
 800811c:	0800af78 	.word	0x0800af78
 8008120:	3ff00000 	.word	0x3ff00000
 8008124:	40240000 	.word	0x40240000
 8008128:	401c0000 	.word	0x401c0000
 800812c:	40140000 	.word	0x40140000
 8008130:	3fe00000 	.word	0x3fe00000
 8008134:	4631      	mov	r1, r6
 8008136:	4628      	mov	r0, r5
 8008138:	f7f8 fa76 	bl	8000628 <__aeabi_dmul>
 800813c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008140:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008142:	4656      	mov	r6, sl
 8008144:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008148:	f7f8 fd1e 	bl	8000b88 <__aeabi_d2iz>
 800814c:	4605      	mov	r5, r0
 800814e:	f7f8 fa01 	bl	8000554 <__aeabi_i2d>
 8008152:	4602      	mov	r2, r0
 8008154:	460b      	mov	r3, r1
 8008156:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800815a:	f7f8 f8ad 	bl	80002b8 <__aeabi_dsub>
 800815e:	3530      	adds	r5, #48	@ 0x30
 8008160:	f806 5b01 	strb.w	r5, [r6], #1
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	42a6      	cmp	r6, r4
 800816a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800816e:	f04f 0200 	mov.w	r2, #0
 8008172:	d124      	bne.n	80081be <_dtoa_r+0x626>
 8008174:	4baf      	ldr	r3, [pc, #700]	@ (8008434 <_dtoa_r+0x89c>)
 8008176:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800817a:	f7f8 f89f 	bl	80002bc <__adddf3>
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008186:	f7f8 fcdf 	bl	8000b48 <__aeabi_dcmpgt>
 800818a:	2800      	cmp	r0, #0
 800818c:	d163      	bne.n	8008256 <_dtoa_r+0x6be>
 800818e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008192:	49a8      	ldr	r1, [pc, #672]	@ (8008434 <_dtoa_r+0x89c>)
 8008194:	2000      	movs	r0, #0
 8008196:	f7f8 f88f 	bl	80002b8 <__aeabi_dsub>
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081a2:	f7f8 fcb3 	bl	8000b0c <__aeabi_dcmplt>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	f43f af14 	beq.w	8007fd4 <_dtoa_r+0x43c>
 80081ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80081ae:	1e73      	subs	r3, r6, #1
 80081b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80081b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80081b6:	2b30      	cmp	r3, #48	@ 0x30
 80081b8:	d0f8      	beq.n	80081ac <_dtoa_r+0x614>
 80081ba:	4647      	mov	r7, r8
 80081bc:	e03b      	b.n	8008236 <_dtoa_r+0x69e>
 80081be:	4b9e      	ldr	r3, [pc, #632]	@ (8008438 <_dtoa_r+0x8a0>)
 80081c0:	f7f8 fa32 	bl	8000628 <__aeabi_dmul>
 80081c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081c8:	e7bc      	b.n	8008144 <_dtoa_r+0x5ac>
 80081ca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80081ce:	4656      	mov	r6, sl
 80081d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081d4:	4620      	mov	r0, r4
 80081d6:	4629      	mov	r1, r5
 80081d8:	f7f8 fb50 	bl	800087c <__aeabi_ddiv>
 80081dc:	f7f8 fcd4 	bl	8000b88 <__aeabi_d2iz>
 80081e0:	4680      	mov	r8, r0
 80081e2:	f7f8 f9b7 	bl	8000554 <__aeabi_i2d>
 80081e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081ea:	f7f8 fa1d 	bl	8000628 <__aeabi_dmul>
 80081ee:	4602      	mov	r2, r0
 80081f0:	460b      	mov	r3, r1
 80081f2:	4620      	mov	r0, r4
 80081f4:	4629      	mov	r1, r5
 80081f6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80081fa:	f7f8 f85d 	bl	80002b8 <__aeabi_dsub>
 80081fe:	f806 4b01 	strb.w	r4, [r6], #1
 8008202:	9d03      	ldr	r5, [sp, #12]
 8008204:	eba6 040a 	sub.w	r4, r6, sl
 8008208:	42a5      	cmp	r5, r4
 800820a:	4602      	mov	r2, r0
 800820c:	460b      	mov	r3, r1
 800820e:	d133      	bne.n	8008278 <_dtoa_r+0x6e0>
 8008210:	f7f8 f854 	bl	80002bc <__adddf3>
 8008214:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008218:	4604      	mov	r4, r0
 800821a:	460d      	mov	r5, r1
 800821c:	f7f8 fc94 	bl	8000b48 <__aeabi_dcmpgt>
 8008220:	b9c0      	cbnz	r0, 8008254 <_dtoa_r+0x6bc>
 8008222:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008226:	4620      	mov	r0, r4
 8008228:	4629      	mov	r1, r5
 800822a:	f7f8 fc65 	bl	8000af8 <__aeabi_dcmpeq>
 800822e:	b110      	cbz	r0, 8008236 <_dtoa_r+0x69e>
 8008230:	f018 0f01 	tst.w	r8, #1
 8008234:	d10e      	bne.n	8008254 <_dtoa_r+0x6bc>
 8008236:	9902      	ldr	r1, [sp, #8]
 8008238:	4648      	mov	r0, r9
 800823a:	f000 fbbd 	bl	80089b8 <_Bfree>
 800823e:	2300      	movs	r3, #0
 8008240:	7033      	strb	r3, [r6, #0]
 8008242:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008244:	3701      	adds	r7, #1
 8008246:	601f      	str	r7, [r3, #0]
 8008248:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 824b 	beq.w	80086e6 <_dtoa_r+0xb4e>
 8008250:	601e      	str	r6, [r3, #0]
 8008252:	e248      	b.n	80086e6 <_dtoa_r+0xb4e>
 8008254:	46b8      	mov	r8, r7
 8008256:	4633      	mov	r3, r6
 8008258:	461e      	mov	r6, r3
 800825a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800825e:	2a39      	cmp	r2, #57	@ 0x39
 8008260:	d106      	bne.n	8008270 <_dtoa_r+0x6d8>
 8008262:	459a      	cmp	sl, r3
 8008264:	d1f8      	bne.n	8008258 <_dtoa_r+0x6c0>
 8008266:	2230      	movs	r2, #48	@ 0x30
 8008268:	f108 0801 	add.w	r8, r8, #1
 800826c:	f88a 2000 	strb.w	r2, [sl]
 8008270:	781a      	ldrb	r2, [r3, #0]
 8008272:	3201      	adds	r2, #1
 8008274:	701a      	strb	r2, [r3, #0]
 8008276:	e7a0      	b.n	80081ba <_dtoa_r+0x622>
 8008278:	4b6f      	ldr	r3, [pc, #444]	@ (8008438 <_dtoa_r+0x8a0>)
 800827a:	2200      	movs	r2, #0
 800827c:	f7f8 f9d4 	bl	8000628 <__aeabi_dmul>
 8008280:	2200      	movs	r2, #0
 8008282:	2300      	movs	r3, #0
 8008284:	4604      	mov	r4, r0
 8008286:	460d      	mov	r5, r1
 8008288:	f7f8 fc36 	bl	8000af8 <__aeabi_dcmpeq>
 800828c:	2800      	cmp	r0, #0
 800828e:	d09f      	beq.n	80081d0 <_dtoa_r+0x638>
 8008290:	e7d1      	b.n	8008236 <_dtoa_r+0x69e>
 8008292:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008294:	2a00      	cmp	r2, #0
 8008296:	f000 80ea 	beq.w	800846e <_dtoa_r+0x8d6>
 800829a:	9a07      	ldr	r2, [sp, #28]
 800829c:	2a01      	cmp	r2, #1
 800829e:	f300 80cd 	bgt.w	800843c <_dtoa_r+0x8a4>
 80082a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80082a4:	2a00      	cmp	r2, #0
 80082a6:	f000 80c1 	beq.w	800842c <_dtoa_r+0x894>
 80082aa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80082ae:	9c08      	ldr	r4, [sp, #32]
 80082b0:	9e00      	ldr	r6, [sp, #0]
 80082b2:	9a00      	ldr	r2, [sp, #0]
 80082b4:	441a      	add	r2, r3
 80082b6:	9200      	str	r2, [sp, #0]
 80082b8:	9a06      	ldr	r2, [sp, #24]
 80082ba:	2101      	movs	r1, #1
 80082bc:	441a      	add	r2, r3
 80082be:	4648      	mov	r0, r9
 80082c0:	9206      	str	r2, [sp, #24]
 80082c2:	f000 fc2d 	bl	8008b20 <__i2b>
 80082c6:	4605      	mov	r5, r0
 80082c8:	b166      	cbz	r6, 80082e4 <_dtoa_r+0x74c>
 80082ca:	9b06      	ldr	r3, [sp, #24]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	dd09      	ble.n	80082e4 <_dtoa_r+0x74c>
 80082d0:	42b3      	cmp	r3, r6
 80082d2:	9a00      	ldr	r2, [sp, #0]
 80082d4:	bfa8      	it	ge
 80082d6:	4633      	movge	r3, r6
 80082d8:	1ad2      	subs	r2, r2, r3
 80082da:	9200      	str	r2, [sp, #0]
 80082dc:	9a06      	ldr	r2, [sp, #24]
 80082de:	1af6      	subs	r6, r6, r3
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	9306      	str	r3, [sp, #24]
 80082e4:	9b08      	ldr	r3, [sp, #32]
 80082e6:	b30b      	cbz	r3, 800832c <_dtoa_r+0x794>
 80082e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 80c6 	beq.w	800847c <_dtoa_r+0x8e4>
 80082f0:	2c00      	cmp	r4, #0
 80082f2:	f000 80c0 	beq.w	8008476 <_dtoa_r+0x8de>
 80082f6:	4629      	mov	r1, r5
 80082f8:	4622      	mov	r2, r4
 80082fa:	4648      	mov	r0, r9
 80082fc:	f000 fcc8 	bl	8008c90 <__pow5mult>
 8008300:	9a02      	ldr	r2, [sp, #8]
 8008302:	4601      	mov	r1, r0
 8008304:	4605      	mov	r5, r0
 8008306:	4648      	mov	r0, r9
 8008308:	f000 fc20 	bl	8008b4c <__multiply>
 800830c:	9902      	ldr	r1, [sp, #8]
 800830e:	4680      	mov	r8, r0
 8008310:	4648      	mov	r0, r9
 8008312:	f000 fb51 	bl	80089b8 <_Bfree>
 8008316:	9b08      	ldr	r3, [sp, #32]
 8008318:	1b1b      	subs	r3, r3, r4
 800831a:	9308      	str	r3, [sp, #32]
 800831c:	f000 80b1 	beq.w	8008482 <_dtoa_r+0x8ea>
 8008320:	9a08      	ldr	r2, [sp, #32]
 8008322:	4641      	mov	r1, r8
 8008324:	4648      	mov	r0, r9
 8008326:	f000 fcb3 	bl	8008c90 <__pow5mult>
 800832a:	9002      	str	r0, [sp, #8]
 800832c:	2101      	movs	r1, #1
 800832e:	4648      	mov	r0, r9
 8008330:	f000 fbf6 	bl	8008b20 <__i2b>
 8008334:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008336:	4604      	mov	r4, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	f000 81d8 	beq.w	80086ee <_dtoa_r+0xb56>
 800833e:	461a      	mov	r2, r3
 8008340:	4601      	mov	r1, r0
 8008342:	4648      	mov	r0, r9
 8008344:	f000 fca4 	bl	8008c90 <__pow5mult>
 8008348:	9b07      	ldr	r3, [sp, #28]
 800834a:	2b01      	cmp	r3, #1
 800834c:	4604      	mov	r4, r0
 800834e:	f300 809f 	bgt.w	8008490 <_dtoa_r+0x8f8>
 8008352:	9b04      	ldr	r3, [sp, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	f040 8097 	bne.w	8008488 <_dtoa_r+0x8f0>
 800835a:	9b05      	ldr	r3, [sp, #20]
 800835c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008360:	2b00      	cmp	r3, #0
 8008362:	f040 8093 	bne.w	800848c <_dtoa_r+0x8f4>
 8008366:	9b05      	ldr	r3, [sp, #20]
 8008368:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800836c:	0d1b      	lsrs	r3, r3, #20
 800836e:	051b      	lsls	r3, r3, #20
 8008370:	b133      	cbz	r3, 8008380 <_dtoa_r+0x7e8>
 8008372:	9b00      	ldr	r3, [sp, #0]
 8008374:	3301      	adds	r3, #1
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	9b06      	ldr	r3, [sp, #24]
 800837a:	3301      	adds	r3, #1
 800837c:	9306      	str	r3, [sp, #24]
 800837e:	2301      	movs	r3, #1
 8008380:	9308      	str	r3, [sp, #32]
 8008382:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 81b8 	beq.w	80086fa <_dtoa_r+0xb62>
 800838a:	6923      	ldr	r3, [r4, #16]
 800838c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008390:	6918      	ldr	r0, [r3, #16]
 8008392:	f000 fb79 	bl	8008a88 <__hi0bits>
 8008396:	f1c0 0020 	rsb	r0, r0, #32
 800839a:	9b06      	ldr	r3, [sp, #24]
 800839c:	4418      	add	r0, r3
 800839e:	f010 001f 	ands.w	r0, r0, #31
 80083a2:	f000 8082 	beq.w	80084aa <_dtoa_r+0x912>
 80083a6:	f1c0 0320 	rsb	r3, r0, #32
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	dd73      	ble.n	8008496 <_dtoa_r+0x8fe>
 80083ae:	9b00      	ldr	r3, [sp, #0]
 80083b0:	f1c0 001c 	rsb	r0, r0, #28
 80083b4:	4403      	add	r3, r0
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	9b06      	ldr	r3, [sp, #24]
 80083ba:	4403      	add	r3, r0
 80083bc:	4406      	add	r6, r0
 80083be:	9306      	str	r3, [sp, #24]
 80083c0:	9b00      	ldr	r3, [sp, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	dd05      	ble.n	80083d2 <_dtoa_r+0x83a>
 80083c6:	9902      	ldr	r1, [sp, #8]
 80083c8:	461a      	mov	r2, r3
 80083ca:	4648      	mov	r0, r9
 80083cc:	f000 fcba 	bl	8008d44 <__lshift>
 80083d0:	9002      	str	r0, [sp, #8]
 80083d2:	9b06      	ldr	r3, [sp, #24]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	dd05      	ble.n	80083e4 <_dtoa_r+0x84c>
 80083d8:	4621      	mov	r1, r4
 80083da:	461a      	mov	r2, r3
 80083dc:	4648      	mov	r0, r9
 80083de:	f000 fcb1 	bl	8008d44 <__lshift>
 80083e2:	4604      	mov	r4, r0
 80083e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d061      	beq.n	80084ae <_dtoa_r+0x916>
 80083ea:	9802      	ldr	r0, [sp, #8]
 80083ec:	4621      	mov	r1, r4
 80083ee:	f000 fd15 	bl	8008e1c <__mcmp>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	da5b      	bge.n	80084ae <_dtoa_r+0x916>
 80083f6:	2300      	movs	r3, #0
 80083f8:	9902      	ldr	r1, [sp, #8]
 80083fa:	220a      	movs	r2, #10
 80083fc:	4648      	mov	r0, r9
 80083fe:	f000 fafd 	bl	80089fc <__multadd>
 8008402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008404:	9002      	str	r0, [sp, #8]
 8008406:	f107 38ff 	add.w	r8, r7, #4294967295
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 8177 	beq.w	80086fe <_dtoa_r+0xb66>
 8008410:	4629      	mov	r1, r5
 8008412:	2300      	movs	r3, #0
 8008414:	220a      	movs	r2, #10
 8008416:	4648      	mov	r0, r9
 8008418:	f000 faf0 	bl	80089fc <__multadd>
 800841c:	f1bb 0f00 	cmp.w	fp, #0
 8008420:	4605      	mov	r5, r0
 8008422:	dc6f      	bgt.n	8008504 <_dtoa_r+0x96c>
 8008424:	9b07      	ldr	r3, [sp, #28]
 8008426:	2b02      	cmp	r3, #2
 8008428:	dc49      	bgt.n	80084be <_dtoa_r+0x926>
 800842a:	e06b      	b.n	8008504 <_dtoa_r+0x96c>
 800842c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800842e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008432:	e73c      	b.n	80082ae <_dtoa_r+0x716>
 8008434:	3fe00000 	.word	0x3fe00000
 8008438:	40240000 	.word	0x40240000
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	1e5c      	subs	r4, r3, #1
 8008440:	9b08      	ldr	r3, [sp, #32]
 8008442:	42a3      	cmp	r3, r4
 8008444:	db09      	blt.n	800845a <_dtoa_r+0x8c2>
 8008446:	1b1c      	subs	r4, r3, r4
 8008448:	9b03      	ldr	r3, [sp, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	f6bf af30 	bge.w	80082b0 <_dtoa_r+0x718>
 8008450:	9b00      	ldr	r3, [sp, #0]
 8008452:	9a03      	ldr	r2, [sp, #12]
 8008454:	1a9e      	subs	r6, r3, r2
 8008456:	2300      	movs	r3, #0
 8008458:	e72b      	b.n	80082b2 <_dtoa_r+0x71a>
 800845a:	9b08      	ldr	r3, [sp, #32]
 800845c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800845e:	9408      	str	r4, [sp, #32]
 8008460:	1ae3      	subs	r3, r4, r3
 8008462:	441a      	add	r2, r3
 8008464:	9e00      	ldr	r6, [sp, #0]
 8008466:	9b03      	ldr	r3, [sp, #12]
 8008468:	920d      	str	r2, [sp, #52]	@ 0x34
 800846a:	2400      	movs	r4, #0
 800846c:	e721      	b.n	80082b2 <_dtoa_r+0x71a>
 800846e:	9c08      	ldr	r4, [sp, #32]
 8008470:	9e00      	ldr	r6, [sp, #0]
 8008472:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008474:	e728      	b.n	80082c8 <_dtoa_r+0x730>
 8008476:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800847a:	e751      	b.n	8008320 <_dtoa_r+0x788>
 800847c:	9a08      	ldr	r2, [sp, #32]
 800847e:	9902      	ldr	r1, [sp, #8]
 8008480:	e750      	b.n	8008324 <_dtoa_r+0x78c>
 8008482:	f8cd 8008 	str.w	r8, [sp, #8]
 8008486:	e751      	b.n	800832c <_dtoa_r+0x794>
 8008488:	2300      	movs	r3, #0
 800848a:	e779      	b.n	8008380 <_dtoa_r+0x7e8>
 800848c:	9b04      	ldr	r3, [sp, #16]
 800848e:	e777      	b.n	8008380 <_dtoa_r+0x7e8>
 8008490:	2300      	movs	r3, #0
 8008492:	9308      	str	r3, [sp, #32]
 8008494:	e779      	b.n	800838a <_dtoa_r+0x7f2>
 8008496:	d093      	beq.n	80083c0 <_dtoa_r+0x828>
 8008498:	9a00      	ldr	r2, [sp, #0]
 800849a:	331c      	adds	r3, #28
 800849c:	441a      	add	r2, r3
 800849e:	9200      	str	r2, [sp, #0]
 80084a0:	9a06      	ldr	r2, [sp, #24]
 80084a2:	441a      	add	r2, r3
 80084a4:	441e      	add	r6, r3
 80084a6:	9206      	str	r2, [sp, #24]
 80084a8:	e78a      	b.n	80083c0 <_dtoa_r+0x828>
 80084aa:	4603      	mov	r3, r0
 80084ac:	e7f4      	b.n	8008498 <_dtoa_r+0x900>
 80084ae:	9b03      	ldr	r3, [sp, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	46b8      	mov	r8, r7
 80084b4:	dc20      	bgt.n	80084f8 <_dtoa_r+0x960>
 80084b6:	469b      	mov	fp, r3
 80084b8:	9b07      	ldr	r3, [sp, #28]
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	dd1e      	ble.n	80084fc <_dtoa_r+0x964>
 80084be:	f1bb 0f00 	cmp.w	fp, #0
 80084c2:	f47f adb1 	bne.w	8008028 <_dtoa_r+0x490>
 80084c6:	4621      	mov	r1, r4
 80084c8:	465b      	mov	r3, fp
 80084ca:	2205      	movs	r2, #5
 80084cc:	4648      	mov	r0, r9
 80084ce:	f000 fa95 	bl	80089fc <__multadd>
 80084d2:	4601      	mov	r1, r0
 80084d4:	4604      	mov	r4, r0
 80084d6:	9802      	ldr	r0, [sp, #8]
 80084d8:	f000 fca0 	bl	8008e1c <__mcmp>
 80084dc:	2800      	cmp	r0, #0
 80084de:	f77f ada3 	ble.w	8008028 <_dtoa_r+0x490>
 80084e2:	4656      	mov	r6, sl
 80084e4:	2331      	movs	r3, #49	@ 0x31
 80084e6:	f806 3b01 	strb.w	r3, [r6], #1
 80084ea:	f108 0801 	add.w	r8, r8, #1
 80084ee:	e59f      	b.n	8008030 <_dtoa_r+0x498>
 80084f0:	9c03      	ldr	r4, [sp, #12]
 80084f2:	46b8      	mov	r8, r7
 80084f4:	4625      	mov	r5, r4
 80084f6:	e7f4      	b.n	80084e2 <_dtoa_r+0x94a>
 80084f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80084fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 8101 	beq.w	8008706 <_dtoa_r+0xb6e>
 8008504:	2e00      	cmp	r6, #0
 8008506:	dd05      	ble.n	8008514 <_dtoa_r+0x97c>
 8008508:	4629      	mov	r1, r5
 800850a:	4632      	mov	r2, r6
 800850c:	4648      	mov	r0, r9
 800850e:	f000 fc19 	bl	8008d44 <__lshift>
 8008512:	4605      	mov	r5, r0
 8008514:	9b08      	ldr	r3, [sp, #32]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d05c      	beq.n	80085d4 <_dtoa_r+0xa3c>
 800851a:	6869      	ldr	r1, [r5, #4]
 800851c:	4648      	mov	r0, r9
 800851e:	f000 fa0b 	bl	8008938 <_Balloc>
 8008522:	4606      	mov	r6, r0
 8008524:	b928      	cbnz	r0, 8008532 <_dtoa_r+0x99a>
 8008526:	4b82      	ldr	r3, [pc, #520]	@ (8008730 <_dtoa_r+0xb98>)
 8008528:	4602      	mov	r2, r0
 800852a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800852e:	f7ff bb4a 	b.w	8007bc6 <_dtoa_r+0x2e>
 8008532:	692a      	ldr	r2, [r5, #16]
 8008534:	3202      	adds	r2, #2
 8008536:	0092      	lsls	r2, r2, #2
 8008538:	f105 010c 	add.w	r1, r5, #12
 800853c:	300c      	adds	r0, #12
 800853e:	f7ff fa76 	bl	8007a2e <memcpy>
 8008542:	2201      	movs	r2, #1
 8008544:	4631      	mov	r1, r6
 8008546:	4648      	mov	r0, r9
 8008548:	f000 fbfc 	bl	8008d44 <__lshift>
 800854c:	f10a 0301 	add.w	r3, sl, #1
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	eb0a 030b 	add.w	r3, sl, fp
 8008556:	9308      	str	r3, [sp, #32]
 8008558:	9b04      	ldr	r3, [sp, #16]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	462f      	mov	r7, r5
 8008560:	9306      	str	r3, [sp, #24]
 8008562:	4605      	mov	r5, r0
 8008564:	9b00      	ldr	r3, [sp, #0]
 8008566:	9802      	ldr	r0, [sp, #8]
 8008568:	4621      	mov	r1, r4
 800856a:	f103 3bff 	add.w	fp, r3, #4294967295
 800856e:	f7ff fa8b 	bl	8007a88 <quorem>
 8008572:	4603      	mov	r3, r0
 8008574:	3330      	adds	r3, #48	@ 0x30
 8008576:	9003      	str	r0, [sp, #12]
 8008578:	4639      	mov	r1, r7
 800857a:	9802      	ldr	r0, [sp, #8]
 800857c:	9309      	str	r3, [sp, #36]	@ 0x24
 800857e:	f000 fc4d 	bl	8008e1c <__mcmp>
 8008582:	462a      	mov	r2, r5
 8008584:	9004      	str	r0, [sp, #16]
 8008586:	4621      	mov	r1, r4
 8008588:	4648      	mov	r0, r9
 800858a:	f000 fc63 	bl	8008e54 <__mdiff>
 800858e:	68c2      	ldr	r2, [r0, #12]
 8008590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008592:	4606      	mov	r6, r0
 8008594:	bb02      	cbnz	r2, 80085d8 <_dtoa_r+0xa40>
 8008596:	4601      	mov	r1, r0
 8008598:	9802      	ldr	r0, [sp, #8]
 800859a:	f000 fc3f 	bl	8008e1c <__mcmp>
 800859e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a0:	4602      	mov	r2, r0
 80085a2:	4631      	mov	r1, r6
 80085a4:	4648      	mov	r0, r9
 80085a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80085a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80085aa:	f000 fa05 	bl	80089b8 <_Bfree>
 80085ae:	9b07      	ldr	r3, [sp, #28]
 80085b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80085b2:	9e00      	ldr	r6, [sp, #0]
 80085b4:	ea42 0103 	orr.w	r1, r2, r3
 80085b8:	9b06      	ldr	r3, [sp, #24]
 80085ba:	4319      	orrs	r1, r3
 80085bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085be:	d10d      	bne.n	80085dc <_dtoa_r+0xa44>
 80085c0:	2b39      	cmp	r3, #57	@ 0x39
 80085c2:	d027      	beq.n	8008614 <_dtoa_r+0xa7c>
 80085c4:	9a04      	ldr	r2, [sp, #16]
 80085c6:	2a00      	cmp	r2, #0
 80085c8:	dd01      	ble.n	80085ce <_dtoa_r+0xa36>
 80085ca:	9b03      	ldr	r3, [sp, #12]
 80085cc:	3331      	adds	r3, #49	@ 0x31
 80085ce:	f88b 3000 	strb.w	r3, [fp]
 80085d2:	e52e      	b.n	8008032 <_dtoa_r+0x49a>
 80085d4:	4628      	mov	r0, r5
 80085d6:	e7b9      	b.n	800854c <_dtoa_r+0x9b4>
 80085d8:	2201      	movs	r2, #1
 80085da:	e7e2      	b.n	80085a2 <_dtoa_r+0xa0a>
 80085dc:	9904      	ldr	r1, [sp, #16]
 80085de:	2900      	cmp	r1, #0
 80085e0:	db04      	blt.n	80085ec <_dtoa_r+0xa54>
 80085e2:	9807      	ldr	r0, [sp, #28]
 80085e4:	4301      	orrs	r1, r0
 80085e6:	9806      	ldr	r0, [sp, #24]
 80085e8:	4301      	orrs	r1, r0
 80085ea:	d120      	bne.n	800862e <_dtoa_r+0xa96>
 80085ec:	2a00      	cmp	r2, #0
 80085ee:	ddee      	ble.n	80085ce <_dtoa_r+0xa36>
 80085f0:	9902      	ldr	r1, [sp, #8]
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	2201      	movs	r2, #1
 80085f6:	4648      	mov	r0, r9
 80085f8:	f000 fba4 	bl	8008d44 <__lshift>
 80085fc:	4621      	mov	r1, r4
 80085fe:	9002      	str	r0, [sp, #8]
 8008600:	f000 fc0c 	bl	8008e1c <__mcmp>
 8008604:	2800      	cmp	r0, #0
 8008606:	9b00      	ldr	r3, [sp, #0]
 8008608:	dc02      	bgt.n	8008610 <_dtoa_r+0xa78>
 800860a:	d1e0      	bne.n	80085ce <_dtoa_r+0xa36>
 800860c:	07da      	lsls	r2, r3, #31
 800860e:	d5de      	bpl.n	80085ce <_dtoa_r+0xa36>
 8008610:	2b39      	cmp	r3, #57	@ 0x39
 8008612:	d1da      	bne.n	80085ca <_dtoa_r+0xa32>
 8008614:	2339      	movs	r3, #57	@ 0x39
 8008616:	f88b 3000 	strb.w	r3, [fp]
 800861a:	4633      	mov	r3, r6
 800861c:	461e      	mov	r6, r3
 800861e:	3b01      	subs	r3, #1
 8008620:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008624:	2a39      	cmp	r2, #57	@ 0x39
 8008626:	d04e      	beq.n	80086c6 <_dtoa_r+0xb2e>
 8008628:	3201      	adds	r2, #1
 800862a:	701a      	strb	r2, [r3, #0]
 800862c:	e501      	b.n	8008032 <_dtoa_r+0x49a>
 800862e:	2a00      	cmp	r2, #0
 8008630:	dd03      	ble.n	800863a <_dtoa_r+0xaa2>
 8008632:	2b39      	cmp	r3, #57	@ 0x39
 8008634:	d0ee      	beq.n	8008614 <_dtoa_r+0xa7c>
 8008636:	3301      	adds	r3, #1
 8008638:	e7c9      	b.n	80085ce <_dtoa_r+0xa36>
 800863a:	9a00      	ldr	r2, [sp, #0]
 800863c:	9908      	ldr	r1, [sp, #32]
 800863e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008642:	428a      	cmp	r2, r1
 8008644:	d028      	beq.n	8008698 <_dtoa_r+0xb00>
 8008646:	9902      	ldr	r1, [sp, #8]
 8008648:	2300      	movs	r3, #0
 800864a:	220a      	movs	r2, #10
 800864c:	4648      	mov	r0, r9
 800864e:	f000 f9d5 	bl	80089fc <__multadd>
 8008652:	42af      	cmp	r7, r5
 8008654:	9002      	str	r0, [sp, #8]
 8008656:	f04f 0300 	mov.w	r3, #0
 800865a:	f04f 020a 	mov.w	r2, #10
 800865e:	4639      	mov	r1, r7
 8008660:	4648      	mov	r0, r9
 8008662:	d107      	bne.n	8008674 <_dtoa_r+0xadc>
 8008664:	f000 f9ca 	bl	80089fc <__multadd>
 8008668:	4607      	mov	r7, r0
 800866a:	4605      	mov	r5, r0
 800866c:	9b00      	ldr	r3, [sp, #0]
 800866e:	3301      	adds	r3, #1
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	e777      	b.n	8008564 <_dtoa_r+0x9cc>
 8008674:	f000 f9c2 	bl	80089fc <__multadd>
 8008678:	4629      	mov	r1, r5
 800867a:	4607      	mov	r7, r0
 800867c:	2300      	movs	r3, #0
 800867e:	220a      	movs	r2, #10
 8008680:	4648      	mov	r0, r9
 8008682:	f000 f9bb 	bl	80089fc <__multadd>
 8008686:	4605      	mov	r5, r0
 8008688:	e7f0      	b.n	800866c <_dtoa_r+0xad4>
 800868a:	f1bb 0f00 	cmp.w	fp, #0
 800868e:	bfcc      	ite	gt
 8008690:	465e      	movgt	r6, fp
 8008692:	2601      	movle	r6, #1
 8008694:	4456      	add	r6, sl
 8008696:	2700      	movs	r7, #0
 8008698:	9902      	ldr	r1, [sp, #8]
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	2201      	movs	r2, #1
 800869e:	4648      	mov	r0, r9
 80086a0:	f000 fb50 	bl	8008d44 <__lshift>
 80086a4:	4621      	mov	r1, r4
 80086a6:	9002      	str	r0, [sp, #8]
 80086a8:	f000 fbb8 	bl	8008e1c <__mcmp>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	dcb4      	bgt.n	800861a <_dtoa_r+0xa82>
 80086b0:	d102      	bne.n	80086b8 <_dtoa_r+0xb20>
 80086b2:	9b00      	ldr	r3, [sp, #0]
 80086b4:	07db      	lsls	r3, r3, #31
 80086b6:	d4b0      	bmi.n	800861a <_dtoa_r+0xa82>
 80086b8:	4633      	mov	r3, r6
 80086ba:	461e      	mov	r6, r3
 80086bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086c0:	2a30      	cmp	r2, #48	@ 0x30
 80086c2:	d0fa      	beq.n	80086ba <_dtoa_r+0xb22>
 80086c4:	e4b5      	b.n	8008032 <_dtoa_r+0x49a>
 80086c6:	459a      	cmp	sl, r3
 80086c8:	d1a8      	bne.n	800861c <_dtoa_r+0xa84>
 80086ca:	2331      	movs	r3, #49	@ 0x31
 80086cc:	f108 0801 	add.w	r8, r8, #1
 80086d0:	f88a 3000 	strb.w	r3, [sl]
 80086d4:	e4ad      	b.n	8008032 <_dtoa_r+0x49a>
 80086d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008734 <_dtoa_r+0xb9c>
 80086dc:	b11b      	cbz	r3, 80086e6 <_dtoa_r+0xb4e>
 80086de:	f10a 0308 	add.w	r3, sl, #8
 80086e2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	4650      	mov	r0, sl
 80086e8:	b017      	add	sp, #92	@ 0x5c
 80086ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ee:	9b07      	ldr	r3, [sp, #28]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	f77f ae2e 	ble.w	8008352 <_dtoa_r+0x7ba>
 80086f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086f8:	9308      	str	r3, [sp, #32]
 80086fa:	2001      	movs	r0, #1
 80086fc:	e64d      	b.n	800839a <_dtoa_r+0x802>
 80086fe:	f1bb 0f00 	cmp.w	fp, #0
 8008702:	f77f aed9 	ble.w	80084b8 <_dtoa_r+0x920>
 8008706:	4656      	mov	r6, sl
 8008708:	9802      	ldr	r0, [sp, #8]
 800870a:	4621      	mov	r1, r4
 800870c:	f7ff f9bc 	bl	8007a88 <quorem>
 8008710:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008714:	f806 3b01 	strb.w	r3, [r6], #1
 8008718:	eba6 020a 	sub.w	r2, r6, sl
 800871c:	4593      	cmp	fp, r2
 800871e:	ddb4      	ble.n	800868a <_dtoa_r+0xaf2>
 8008720:	9902      	ldr	r1, [sp, #8]
 8008722:	2300      	movs	r3, #0
 8008724:	220a      	movs	r2, #10
 8008726:	4648      	mov	r0, r9
 8008728:	f000 f968 	bl	80089fc <__multadd>
 800872c:	9002      	str	r0, [sp, #8]
 800872e:	e7eb      	b.n	8008708 <_dtoa_r+0xb70>
 8008730:	0800aee3 	.word	0x0800aee3
 8008734:	0800ae7e 	.word	0x0800ae7e

08008738 <_free_r>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4605      	mov	r5, r0
 800873c:	2900      	cmp	r1, #0
 800873e:	d041      	beq.n	80087c4 <_free_r+0x8c>
 8008740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008744:	1f0c      	subs	r4, r1, #4
 8008746:	2b00      	cmp	r3, #0
 8008748:	bfb8      	it	lt
 800874a:	18e4      	addlt	r4, r4, r3
 800874c:	f000 f8e8 	bl	8008920 <__malloc_lock>
 8008750:	4a1d      	ldr	r2, [pc, #116]	@ (80087c8 <_free_r+0x90>)
 8008752:	6813      	ldr	r3, [r2, #0]
 8008754:	b933      	cbnz	r3, 8008764 <_free_r+0x2c>
 8008756:	6063      	str	r3, [r4, #4]
 8008758:	6014      	str	r4, [r2, #0]
 800875a:	4628      	mov	r0, r5
 800875c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008760:	f000 b8e4 	b.w	800892c <__malloc_unlock>
 8008764:	42a3      	cmp	r3, r4
 8008766:	d908      	bls.n	800877a <_free_r+0x42>
 8008768:	6820      	ldr	r0, [r4, #0]
 800876a:	1821      	adds	r1, r4, r0
 800876c:	428b      	cmp	r3, r1
 800876e:	bf01      	itttt	eq
 8008770:	6819      	ldreq	r1, [r3, #0]
 8008772:	685b      	ldreq	r3, [r3, #4]
 8008774:	1809      	addeq	r1, r1, r0
 8008776:	6021      	streq	r1, [r4, #0]
 8008778:	e7ed      	b.n	8008756 <_free_r+0x1e>
 800877a:	461a      	mov	r2, r3
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	b10b      	cbz	r3, 8008784 <_free_r+0x4c>
 8008780:	42a3      	cmp	r3, r4
 8008782:	d9fa      	bls.n	800877a <_free_r+0x42>
 8008784:	6811      	ldr	r1, [r2, #0]
 8008786:	1850      	adds	r0, r2, r1
 8008788:	42a0      	cmp	r0, r4
 800878a:	d10b      	bne.n	80087a4 <_free_r+0x6c>
 800878c:	6820      	ldr	r0, [r4, #0]
 800878e:	4401      	add	r1, r0
 8008790:	1850      	adds	r0, r2, r1
 8008792:	4283      	cmp	r3, r0
 8008794:	6011      	str	r1, [r2, #0]
 8008796:	d1e0      	bne.n	800875a <_free_r+0x22>
 8008798:	6818      	ldr	r0, [r3, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	6053      	str	r3, [r2, #4]
 800879e:	4408      	add	r0, r1
 80087a0:	6010      	str	r0, [r2, #0]
 80087a2:	e7da      	b.n	800875a <_free_r+0x22>
 80087a4:	d902      	bls.n	80087ac <_free_r+0x74>
 80087a6:	230c      	movs	r3, #12
 80087a8:	602b      	str	r3, [r5, #0]
 80087aa:	e7d6      	b.n	800875a <_free_r+0x22>
 80087ac:	6820      	ldr	r0, [r4, #0]
 80087ae:	1821      	adds	r1, r4, r0
 80087b0:	428b      	cmp	r3, r1
 80087b2:	bf04      	itt	eq
 80087b4:	6819      	ldreq	r1, [r3, #0]
 80087b6:	685b      	ldreq	r3, [r3, #4]
 80087b8:	6063      	str	r3, [r4, #4]
 80087ba:	bf04      	itt	eq
 80087bc:	1809      	addeq	r1, r1, r0
 80087be:	6021      	streq	r1, [r4, #0]
 80087c0:	6054      	str	r4, [r2, #4]
 80087c2:	e7ca      	b.n	800875a <_free_r+0x22>
 80087c4:	bd38      	pop	{r3, r4, r5, pc}
 80087c6:	bf00      	nop
 80087c8:	20000e14 	.word	0x20000e14

080087cc <malloc>:
 80087cc:	4b02      	ldr	r3, [pc, #8]	@ (80087d8 <malloc+0xc>)
 80087ce:	4601      	mov	r1, r0
 80087d0:	6818      	ldr	r0, [r3, #0]
 80087d2:	f000 b825 	b.w	8008820 <_malloc_r>
 80087d6:	bf00      	nop
 80087d8:	20000020 	.word	0x20000020

080087dc <sbrk_aligned>:
 80087dc:	b570      	push	{r4, r5, r6, lr}
 80087de:	4e0f      	ldr	r6, [pc, #60]	@ (800881c <sbrk_aligned+0x40>)
 80087e0:	460c      	mov	r4, r1
 80087e2:	6831      	ldr	r1, [r6, #0]
 80087e4:	4605      	mov	r5, r0
 80087e6:	b911      	cbnz	r1, 80087ee <sbrk_aligned+0x12>
 80087e8:	f001 f84a 	bl	8009880 <_sbrk_r>
 80087ec:	6030      	str	r0, [r6, #0]
 80087ee:	4621      	mov	r1, r4
 80087f0:	4628      	mov	r0, r5
 80087f2:	f001 f845 	bl	8009880 <_sbrk_r>
 80087f6:	1c43      	adds	r3, r0, #1
 80087f8:	d103      	bne.n	8008802 <sbrk_aligned+0x26>
 80087fa:	f04f 34ff 	mov.w	r4, #4294967295
 80087fe:	4620      	mov	r0, r4
 8008800:	bd70      	pop	{r4, r5, r6, pc}
 8008802:	1cc4      	adds	r4, r0, #3
 8008804:	f024 0403 	bic.w	r4, r4, #3
 8008808:	42a0      	cmp	r0, r4
 800880a:	d0f8      	beq.n	80087fe <sbrk_aligned+0x22>
 800880c:	1a21      	subs	r1, r4, r0
 800880e:	4628      	mov	r0, r5
 8008810:	f001 f836 	bl	8009880 <_sbrk_r>
 8008814:	3001      	adds	r0, #1
 8008816:	d1f2      	bne.n	80087fe <sbrk_aligned+0x22>
 8008818:	e7ef      	b.n	80087fa <sbrk_aligned+0x1e>
 800881a:	bf00      	nop
 800881c:	20000e10 	.word	0x20000e10

08008820 <_malloc_r>:
 8008820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008824:	1ccd      	adds	r5, r1, #3
 8008826:	f025 0503 	bic.w	r5, r5, #3
 800882a:	3508      	adds	r5, #8
 800882c:	2d0c      	cmp	r5, #12
 800882e:	bf38      	it	cc
 8008830:	250c      	movcc	r5, #12
 8008832:	2d00      	cmp	r5, #0
 8008834:	4606      	mov	r6, r0
 8008836:	db01      	blt.n	800883c <_malloc_r+0x1c>
 8008838:	42a9      	cmp	r1, r5
 800883a:	d904      	bls.n	8008846 <_malloc_r+0x26>
 800883c:	230c      	movs	r3, #12
 800883e:	6033      	str	r3, [r6, #0]
 8008840:	2000      	movs	r0, #0
 8008842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008846:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800891c <_malloc_r+0xfc>
 800884a:	f000 f869 	bl	8008920 <__malloc_lock>
 800884e:	f8d8 3000 	ldr.w	r3, [r8]
 8008852:	461c      	mov	r4, r3
 8008854:	bb44      	cbnz	r4, 80088a8 <_malloc_r+0x88>
 8008856:	4629      	mov	r1, r5
 8008858:	4630      	mov	r0, r6
 800885a:	f7ff ffbf 	bl	80087dc <sbrk_aligned>
 800885e:	1c43      	adds	r3, r0, #1
 8008860:	4604      	mov	r4, r0
 8008862:	d158      	bne.n	8008916 <_malloc_r+0xf6>
 8008864:	f8d8 4000 	ldr.w	r4, [r8]
 8008868:	4627      	mov	r7, r4
 800886a:	2f00      	cmp	r7, #0
 800886c:	d143      	bne.n	80088f6 <_malloc_r+0xd6>
 800886e:	2c00      	cmp	r4, #0
 8008870:	d04b      	beq.n	800890a <_malloc_r+0xea>
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	4639      	mov	r1, r7
 8008876:	4630      	mov	r0, r6
 8008878:	eb04 0903 	add.w	r9, r4, r3
 800887c:	f001 f800 	bl	8009880 <_sbrk_r>
 8008880:	4581      	cmp	r9, r0
 8008882:	d142      	bne.n	800890a <_malloc_r+0xea>
 8008884:	6821      	ldr	r1, [r4, #0]
 8008886:	1a6d      	subs	r5, r5, r1
 8008888:	4629      	mov	r1, r5
 800888a:	4630      	mov	r0, r6
 800888c:	f7ff ffa6 	bl	80087dc <sbrk_aligned>
 8008890:	3001      	adds	r0, #1
 8008892:	d03a      	beq.n	800890a <_malloc_r+0xea>
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	442b      	add	r3, r5
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	f8d8 3000 	ldr.w	r3, [r8]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	bb62      	cbnz	r2, 80088fc <_malloc_r+0xdc>
 80088a2:	f8c8 7000 	str.w	r7, [r8]
 80088a6:	e00f      	b.n	80088c8 <_malloc_r+0xa8>
 80088a8:	6822      	ldr	r2, [r4, #0]
 80088aa:	1b52      	subs	r2, r2, r5
 80088ac:	d420      	bmi.n	80088f0 <_malloc_r+0xd0>
 80088ae:	2a0b      	cmp	r2, #11
 80088b0:	d917      	bls.n	80088e2 <_malloc_r+0xc2>
 80088b2:	1961      	adds	r1, r4, r5
 80088b4:	42a3      	cmp	r3, r4
 80088b6:	6025      	str	r5, [r4, #0]
 80088b8:	bf18      	it	ne
 80088ba:	6059      	strne	r1, [r3, #4]
 80088bc:	6863      	ldr	r3, [r4, #4]
 80088be:	bf08      	it	eq
 80088c0:	f8c8 1000 	streq.w	r1, [r8]
 80088c4:	5162      	str	r2, [r4, r5]
 80088c6:	604b      	str	r3, [r1, #4]
 80088c8:	4630      	mov	r0, r6
 80088ca:	f000 f82f 	bl	800892c <__malloc_unlock>
 80088ce:	f104 000b 	add.w	r0, r4, #11
 80088d2:	1d23      	adds	r3, r4, #4
 80088d4:	f020 0007 	bic.w	r0, r0, #7
 80088d8:	1ac2      	subs	r2, r0, r3
 80088da:	bf1c      	itt	ne
 80088dc:	1a1b      	subne	r3, r3, r0
 80088de:	50a3      	strne	r3, [r4, r2]
 80088e0:	e7af      	b.n	8008842 <_malloc_r+0x22>
 80088e2:	6862      	ldr	r2, [r4, #4]
 80088e4:	42a3      	cmp	r3, r4
 80088e6:	bf0c      	ite	eq
 80088e8:	f8c8 2000 	streq.w	r2, [r8]
 80088ec:	605a      	strne	r2, [r3, #4]
 80088ee:	e7eb      	b.n	80088c8 <_malloc_r+0xa8>
 80088f0:	4623      	mov	r3, r4
 80088f2:	6864      	ldr	r4, [r4, #4]
 80088f4:	e7ae      	b.n	8008854 <_malloc_r+0x34>
 80088f6:	463c      	mov	r4, r7
 80088f8:	687f      	ldr	r7, [r7, #4]
 80088fa:	e7b6      	b.n	800886a <_malloc_r+0x4a>
 80088fc:	461a      	mov	r2, r3
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	42a3      	cmp	r3, r4
 8008902:	d1fb      	bne.n	80088fc <_malloc_r+0xdc>
 8008904:	2300      	movs	r3, #0
 8008906:	6053      	str	r3, [r2, #4]
 8008908:	e7de      	b.n	80088c8 <_malloc_r+0xa8>
 800890a:	230c      	movs	r3, #12
 800890c:	6033      	str	r3, [r6, #0]
 800890e:	4630      	mov	r0, r6
 8008910:	f000 f80c 	bl	800892c <__malloc_unlock>
 8008914:	e794      	b.n	8008840 <_malloc_r+0x20>
 8008916:	6005      	str	r5, [r0, #0]
 8008918:	e7d6      	b.n	80088c8 <_malloc_r+0xa8>
 800891a:	bf00      	nop
 800891c:	20000e14 	.word	0x20000e14

08008920 <__malloc_lock>:
 8008920:	4801      	ldr	r0, [pc, #4]	@ (8008928 <__malloc_lock+0x8>)
 8008922:	f7ff b87a 	b.w	8007a1a <__retarget_lock_acquire_recursive>
 8008926:	bf00      	nop
 8008928:	20000e0c 	.word	0x20000e0c

0800892c <__malloc_unlock>:
 800892c:	4801      	ldr	r0, [pc, #4]	@ (8008934 <__malloc_unlock+0x8>)
 800892e:	f7ff b875 	b.w	8007a1c <__retarget_lock_release_recursive>
 8008932:	bf00      	nop
 8008934:	20000e0c 	.word	0x20000e0c

08008938 <_Balloc>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	69c6      	ldr	r6, [r0, #28]
 800893c:	4604      	mov	r4, r0
 800893e:	460d      	mov	r5, r1
 8008940:	b976      	cbnz	r6, 8008960 <_Balloc+0x28>
 8008942:	2010      	movs	r0, #16
 8008944:	f7ff ff42 	bl	80087cc <malloc>
 8008948:	4602      	mov	r2, r0
 800894a:	61e0      	str	r0, [r4, #28]
 800894c:	b920      	cbnz	r0, 8008958 <_Balloc+0x20>
 800894e:	4b18      	ldr	r3, [pc, #96]	@ (80089b0 <_Balloc+0x78>)
 8008950:	4818      	ldr	r0, [pc, #96]	@ (80089b4 <_Balloc+0x7c>)
 8008952:	216b      	movs	r1, #107	@ 0x6b
 8008954:	f7ff f87a 	bl	8007a4c <__assert_func>
 8008958:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800895c:	6006      	str	r6, [r0, #0]
 800895e:	60c6      	str	r6, [r0, #12]
 8008960:	69e6      	ldr	r6, [r4, #28]
 8008962:	68f3      	ldr	r3, [r6, #12]
 8008964:	b183      	cbz	r3, 8008988 <_Balloc+0x50>
 8008966:	69e3      	ldr	r3, [r4, #28]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800896e:	b9b8      	cbnz	r0, 80089a0 <_Balloc+0x68>
 8008970:	2101      	movs	r1, #1
 8008972:	fa01 f605 	lsl.w	r6, r1, r5
 8008976:	1d72      	adds	r2, r6, #5
 8008978:	0092      	lsls	r2, r2, #2
 800897a:	4620      	mov	r0, r4
 800897c:	f000 ff97 	bl	80098ae <_calloc_r>
 8008980:	b160      	cbz	r0, 800899c <_Balloc+0x64>
 8008982:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008986:	e00e      	b.n	80089a6 <_Balloc+0x6e>
 8008988:	2221      	movs	r2, #33	@ 0x21
 800898a:	2104      	movs	r1, #4
 800898c:	4620      	mov	r0, r4
 800898e:	f000 ff8e 	bl	80098ae <_calloc_r>
 8008992:	69e3      	ldr	r3, [r4, #28]
 8008994:	60f0      	str	r0, [r6, #12]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e4      	bne.n	8008966 <_Balloc+0x2e>
 800899c:	2000      	movs	r0, #0
 800899e:	bd70      	pop	{r4, r5, r6, pc}
 80089a0:	6802      	ldr	r2, [r0, #0]
 80089a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089a6:	2300      	movs	r3, #0
 80089a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089ac:	e7f7      	b.n	800899e <_Balloc+0x66>
 80089ae:	bf00      	nop
 80089b0:	0800add1 	.word	0x0800add1
 80089b4:	0800aef4 	.word	0x0800aef4

080089b8 <_Bfree>:
 80089b8:	b570      	push	{r4, r5, r6, lr}
 80089ba:	69c6      	ldr	r6, [r0, #28]
 80089bc:	4605      	mov	r5, r0
 80089be:	460c      	mov	r4, r1
 80089c0:	b976      	cbnz	r6, 80089e0 <_Bfree+0x28>
 80089c2:	2010      	movs	r0, #16
 80089c4:	f7ff ff02 	bl	80087cc <malloc>
 80089c8:	4602      	mov	r2, r0
 80089ca:	61e8      	str	r0, [r5, #28]
 80089cc:	b920      	cbnz	r0, 80089d8 <_Bfree+0x20>
 80089ce:	4b09      	ldr	r3, [pc, #36]	@ (80089f4 <_Bfree+0x3c>)
 80089d0:	4809      	ldr	r0, [pc, #36]	@ (80089f8 <_Bfree+0x40>)
 80089d2:	218f      	movs	r1, #143	@ 0x8f
 80089d4:	f7ff f83a 	bl	8007a4c <__assert_func>
 80089d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089dc:	6006      	str	r6, [r0, #0]
 80089de:	60c6      	str	r6, [r0, #12]
 80089e0:	b13c      	cbz	r4, 80089f2 <_Bfree+0x3a>
 80089e2:	69eb      	ldr	r3, [r5, #28]
 80089e4:	6862      	ldr	r2, [r4, #4]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089ec:	6021      	str	r1, [r4, #0]
 80089ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089f2:	bd70      	pop	{r4, r5, r6, pc}
 80089f4:	0800add1 	.word	0x0800add1
 80089f8:	0800aef4 	.word	0x0800aef4

080089fc <__multadd>:
 80089fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a00:	690d      	ldr	r5, [r1, #16]
 8008a02:	4607      	mov	r7, r0
 8008a04:	460c      	mov	r4, r1
 8008a06:	461e      	mov	r6, r3
 8008a08:	f101 0c14 	add.w	ip, r1, #20
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	f8dc 3000 	ldr.w	r3, [ip]
 8008a12:	b299      	uxth	r1, r3
 8008a14:	fb02 6101 	mla	r1, r2, r1, r6
 8008a18:	0c1e      	lsrs	r6, r3, #16
 8008a1a:	0c0b      	lsrs	r3, r1, #16
 8008a1c:	fb02 3306 	mla	r3, r2, r6, r3
 8008a20:	b289      	uxth	r1, r1
 8008a22:	3001      	adds	r0, #1
 8008a24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a28:	4285      	cmp	r5, r0
 8008a2a:	f84c 1b04 	str.w	r1, [ip], #4
 8008a2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a32:	dcec      	bgt.n	8008a0e <__multadd+0x12>
 8008a34:	b30e      	cbz	r6, 8008a7a <__multadd+0x7e>
 8008a36:	68a3      	ldr	r3, [r4, #8]
 8008a38:	42ab      	cmp	r3, r5
 8008a3a:	dc19      	bgt.n	8008a70 <__multadd+0x74>
 8008a3c:	6861      	ldr	r1, [r4, #4]
 8008a3e:	4638      	mov	r0, r7
 8008a40:	3101      	adds	r1, #1
 8008a42:	f7ff ff79 	bl	8008938 <_Balloc>
 8008a46:	4680      	mov	r8, r0
 8008a48:	b928      	cbnz	r0, 8008a56 <__multadd+0x5a>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8008a80 <__multadd+0x84>)
 8008a4e:	480d      	ldr	r0, [pc, #52]	@ (8008a84 <__multadd+0x88>)
 8008a50:	21ba      	movs	r1, #186	@ 0xba
 8008a52:	f7fe fffb 	bl	8007a4c <__assert_func>
 8008a56:	6922      	ldr	r2, [r4, #16]
 8008a58:	3202      	adds	r2, #2
 8008a5a:	f104 010c 	add.w	r1, r4, #12
 8008a5e:	0092      	lsls	r2, r2, #2
 8008a60:	300c      	adds	r0, #12
 8008a62:	f7fe ffe4 	bl	8007a2e <memcpy>
 8008a66:	4621      	mov	r1, r4
 8008a68:	4638      	mov	r0, r7
 8008a6a:	f7ff ffa5 	bl	80089b8 <_Bfree>
 8008a6e:	4644      	mov	r4, r8
 8008a70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a74:	3501      	adds	r5, #1
 8008a76:	615e      	str	r6, [r3, #20]
 8008a78:	6125      	str	r5, [r4, #16]
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a80:	0800aee3 	.word	0x0800aee3
 8008a84:	0800aef4 	.word	0x0800aef4

08008a88 <__hi0bits>:
 8008a88:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	bf36      	itet	cc
 8008a90:	0403      	lslcc	r3, r0, #16
 8008a92:	2000      	movcs	r0, #0
 8008a94:	2010      	movcc	r0, #16
 8008a96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a9a:	bf3c      	itt	cc
 8008a9c:	021b      	lslcc	r3, r3, #8
 8008a9e:	3008      	addcc	r0, #8
 8008aa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aa4:	bf3c      	itt	cc
 8008aa6:	011b      	lslcc	r3, r3, #4
 8008aa8:	3004      	addcc	r0, #4
 8008aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aae:	bf3c      	itt	cc
 8008ab0:	009b      	lslcc	r3, r3, #2
 8008ab2:	3002      	addcc	r0, #2
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	db05      	blt.n	8008ac4 <__hi0bits+0x3c>
 8008ab8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008abc:	f100 0001 	add.w	r0, r0, #1
 8008ac0:	bf08      	it	eq
 8008ac2:	2020      	moveq	r0, #32
 8008ac4:	4770      	bx	lr

08008ac6 <__lo0bits>:
 8008ac6:	6803      	ldr	r3, [r0, #0]
 8008ac8:	4602      	mov	r2, r0
 8008aca:	f013 0007 	ands.w	r0, r3, #7
 8008ace:	d00b      	beq.n	8008ae8 <__lo0bits+0x22>
 8008ad0:	07d9      	lsls	r1, r3, #31
 8008ad2:	d421      	bmi.n	8008b18 <__lo0bits+0x52>
 8008ad4:	0798      	lsls	r0, r3, #30
 8008ad6:	bf49      	itett	mi
 8008ad8:	085b      	lsrmi	r3, r3, #1
 8008ada:	089b      	lsrpl	r3, r3, #2
 8008adc:	2001      	movmi	r0, #1
 8008ade:	6013      	strmi	r3, [r2, #0]
 8008ae0:	bf5c      	itt	pl
 8008ae2:	6013      	strpl	r3, [r2, #0]
 8008ae4:	2002      	movpl	r0, #2
 8008ae6:	4770      	bx	lr
 8008ae8:	b299      	uxth	r1, r3
 8008aea:	b909      	cbnz	r1, 8008af0 <__lo0bits+0x2a>
 8008aec:	0c1b      	lsrs	r3, r3, #16
 8008aee:	2010      	movs	r0, #16
 8008af0:	b2d9      	uxtb	r1, r3
 8008af2:	b909      	cbnz	r1, 8008af8 <__lo0bits+0x32>
 8008af4:	3008      	adds	r0, #8
 8008af6:	0a1b      	lsrs	r3, r3, #8
 8008af8:	0719      	lsls	r1, r3, #28
 8008afa:	bf04      	itt	eq
 8008afc:	091b      	lsreq	r3, r3, #4
 8008afe:	3004      	addeq	r0, #4
 8008b00:	0799      	lsls	r1, r3, #30
 8008b02:	bf04      	itt	eq
 8008b04:	089b      	lsreq	r3, r3, #2
 8008b06:	3002      	addeq	r0, #2
 8008b08:	07d9      	lsls	r1, r3, #31
 8008b0a:	d403      	bmi.n	8008b14 <__lo0bits+0x4e>
 8008b0c:	085b      	lsrs	r3, r3, #1
 8008b0e:	f100 0001 	add.w	r0, r0, #1
 8008b12:	d003      	beq.n	8008b1c <__lo0bits+0x56>
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	4770      	bx	lr
 8008b18:	2000      	movs	r0, #0
 8008b1a:	4770      	bx	lr
 8008b1c:	2020      	movs	r0, #32
 8008b1e:	4770      	bx	lr

08008b20 <__i2b>:
 8008b20:	b510      	push	{r4, lr}
 8008b22:	460c      	mov	r4, r1
 8008b24:	2101      	movs	r1, #1
 8008b26:	f7ff ff07 	bl	8008938 <_Balloc>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	b928      	cbnz	r0, 8008b3a <__i2b+0x1a>
 8008b2e:	4b05      	ldr	r3, [pc, #20]	@ (8008b44 <__i2b+0x24>)
 8008b30:	4805      	ldr	r0, [pc, #20]	@ (8008b48 <__i2b+0x28>)
 8008b32:	f240 1145 	movw	r1, #325	@ 0x145
 8008b36:	f7fe ff89 	bl	8007a4c <__assert_func>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	6144      	str	r4, [r0, #20]
 8008b3e:	6103      	str	r3, [r0, #16]
 8008b40:	bd10      	pop	{r4, pc}
 8008b42:	bf00      	nop
 8008b44:	0800aee3 	.word	0x0800aee3
 8008b48:	0800aef4 	.word	0x0800aef4

08008b4c <__multiply>:
 8008b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b50:	4617      	mov	r7, r2
 8008b52:	690a      	ldr	r2, [r1, #16]
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	bfa8      	it	ge
 8008b5a:	463b      	movge	r3, r7
 8008b5c:	4689      	mov	r9, r1
 8008b5e:	bfa4      	itt	ge
 8008b60:	460f      	movge	r7, r1
 8008b62:	4699      	movge	r9, r3
 8008b64:	693d      	ldr	r5, [r7, #16]
 8008b66:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	6879      	ldr	r1, [r7, #4]
 8008b6e:	eb05 060a 	add.w	r6, r5, sl
 8008b72:	42b3      	cmp	r3, r6
 8008b74:	b085      	sub	sp, #20
 8008b76:	bfb8      	it	lt
 8008b78:	3101      	addlt	r1, #1
 8008b7a:	f7ff fedd 	bl	8008938 <_Balloc>
 8008b7e:	b930      	cbnz	r0, 8008b8e <__multiply+0x42>
 8008b80:	4602      	mov	r2, r0
 8008b82:	4b41      	ldr	r3, [pc, #260]	@ (8008c88 <__multiply+0x13c>)
 8008b84:	4841      	ldr	r0, [pc, #260]	@ (8008c8c <__multiply+0x140>)
 8008b86:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008b8a:	f7fe ff5f 	bl	8007a4c <__assert_func>
 8008b8e:	f100 0414 	add.w	r4, r0, #20
 8008b92:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008b96:	4623      	mov	r3, r4
 8008b98:	2200      	movs	r2, #0
 8008b9a:	4573      	cmp	r3, lr
 8008b9c:	d320      	bcc.n	8008be0 <__multiply+0x94>
 8008b9e:	f107 0814 	add.w	r8, r7, #20
 8008ba2:	f109 0114 	add.w	r1, r9, #20
 8008ba6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008baa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008bae:	9302      	str	r3, [sp, #8]
 8008bb0:	1beb      	subs	r3, r5, r7
 8008bb2:	3b15      	subs	r3, #21
 8008bb4:	f023 0303 	bic.w	r3, r3, #3
 8008bb8:	3304      	adds	r3, #4
 8008bba:	3715      	adds	r7, #21
 8008bbc:	42bd      	cmp	r5, r7
 8008bbe:	bf38      	it	cc
 8008bc0:	2304      	movcc	r3, #4
 8008bc2:	9301      	str	r3, [sp, #4]
 8008bc4:	9b02      	ldr	r3, [sp, #8]
 8008bc6:	9103      	str	r1, [sp, #12]
 8008bc8:	428b      	cmp	r3, r1
 8008bca:	d80c      	bhi.n	8008be6 <__multiply+0x9a>
 8008bcc:	2e00      	cmp	r6, #0
 8008bce:	dd03      	ble.n	8008bd8 <__multiply+0x8c>
 8008bd0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d055      	beq.n	8008c84 <__multiply+0x138>
 8008bd8:	6106      	str	r6, [r0, #16]
 8008bda:	b005      	add	sp, #20
 8008bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be0:	f843 2b04 	str.w	r2, [r3], #4
 8008be4:	e7d9      	b.n	8008b9a <__multiply+0x4e>
 8008be6:	f8b1 a000 	ldrh.w	sl, [r1]
 8008bea:	f1ba 0f00 	cmp.w	sl, #0
 8008bee:	d01f      	beq.n	8008c30 <__multiply+0xe4>
 8008bf0:	46c4      	mov	ip, r8
 8008bf2:	46a1      	mov	r9, r4
 8008bf4:	2700      	movs	r7, #0
 8008bf6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008bfa:	f8d9 3000 	ldr.w	r3, [r9]
 8008bfe:	fa1f fb82 	uxth.w	fp, r2
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	fb0a 330b 	mla	r3, sl, fp, r3
 8008c08:	443b      	add	r3, r7
 8008c0a:	f8d9 7000 	ldr.w	r7, [r9]
 8008c0e:	0c12      	lsrs	r2, r2, #16
 8008c10:	0c3f      	lsrs	r7, r7, #16
 8008c12:	fb0a 7202 	mla	r2, sl, r2, r7
 8008c16:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c20:	4565      	cmp	r5, ip
 8008c22:	f849 3b04 	str.w	r3, [r9], #4
 8008c26:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008c2a:	d8e4      	bhi.n	8008bf6 <__multiply+0xaa>
 8008c2c:	9b01      	ldr	r3, [sp, #4]
 8008c2e:	50e7      	str	r7, [r4, r3]
 8008c30:	9b03      	ldr	r3, [sp, #12]
 8008c32:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008c36:	3104      	adds	r1, #4
 8008c38:	f1b9 0f00 	cmp.w	r9, #0
 8008c3c:	d020      	beq.n	8008c80 <__multiply+0x134>
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	4647      	mov	r7, r8
 8008c42:	46a4      	mov	ip, r4
 8008c44:	f04f 0a00 	mov.w	sl, #0
 8008c48:	f8b7 b000 	ldrh.w	fp, [r7]
 8008c4c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008c50:	fb09 220b 	mla	r2, r9, fp, r2
 8008c54:	4452      	add	r2, sl
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c5c:	f84c 3b04 	str.w	r3, [ip], #4
 8008c60:	f857 3b04 	ldr.w	r3, [r7], #4
 8008c64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c68:	f8bc 3000 	ldrh.w	r3, [ip]
 8008c6c:	fb09 330a 	mla	r3, r9, sl, r3
 8008c70:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008c74:	42bd      	cmp	r5, r7
 8008c76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c7a:	d8e5      	bhi.n	8008c48 <__multiply+0xfc>
 8008c7c:	9a01      	ldr	r2, [sp, #4]
 8008c7e:	50a3      	str	r3, [r4, r2]
 8008c80:	3404      	adds	r4, #4
 8008c82:	e79f      	b.n	8008bc4 <__multiply+0x78>
 8008c84:	3e01      	subs	r6, #1
 8008c86:	e7a1      	b.n	8008bcc <__multiply+0x80>
 8008c88:	0800aee3 	.word	0x0800aee3
 8008c8c:	0800aef4 	.word	0x0800aef4

08008c90 <__pow5mult>:
 8008c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c94:	4615      	mov	r5, r2
 8008c96:	f012 0203 	ands.w	r2, r2, #3
 8008c9a:	4607      	mov	r7, r0
 8008c9c:	460e      	mov	r6, r1
 8008c9e:	d007      	beq.n	8008cb0 <__pow5mult+0x20>
 8008ca0:	4c25      	ldr	r4, [pc, #148]	@ (8008d38 <__pow5mult+0xa8>)
 8008ca2:	3a01      	subs	r2, #1
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008caa:	f7ff fea7 	bl	80089fc <__multadd>
 8008cae:	4606      	mov	r6, r0
 8008cb0:	10ad      	asrs	r5, r5, #2
 8008cb2:	d03d      	beq.n	8008d30 <__pow5mult+0xa0>
 8008cb4:	69fc      	ldr	r4, [r7, #28]
 8008cb6:	b97c      	cbnz	r4, 8008cd8 <__pow5mult+0x48>
 8008cb8:	2010      	movs	r0, #16
 8008cba:	f7ff fd87 	bl	80087cc <malloc>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	61f8      	str	r0, [r7, #28]
 8008cc2:	b928      	cbnz	r0, 8008cd0 <__pow5mult+0x40>
 8008cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8008d3c <__pow5mult+0xac>)
 8008cc6:	481e      	ldr	r0, [pc, #120]	@ (8008d40 <__pow5mult+0xb0>)
 8008cc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008ccc:	f7fe febe 	bl	8007a4c <__assert_func>
 8008cd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cd4:	6004      	str	r4, [r0, #0]
 8008cd6:	60c4      	str	r4, [r0, #12]
 8008cd8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008cdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ce0:	b94c      	cbnz	r4, 8008cf6 <__pow5mult+0x66>
 8008ce2:	f240 2171 	movw	r1, #625	@ 0x271
 8008ce6:	4638      	mov	r0, r7
 8008ce8:	f7ff ff1a 	bl	8008b20 <__i2b>
 8008cec:	2300      	movs	r3, #0
 8008cee:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	6003      	str	r3, [r0, #0]
 8008cf6:	f04f 0900 	mov.w	r9, #0
 8008cfa:	07eb      	lsls	r3, r5, #31
 8008cfc:	d50a      	bpl.n	8008d14 <__pow5mult+0x84>
 8008cfe:	4631      	mov	r1, r6
 8008d00:	4622      	mov	r2, r4
 8008d02:	4638      	mov	r0, r7
 8008d04:	f7ff ff22 	bl	8008b4c <__multiply>
 8008d08:	4631      	mov	r1, r6
 8008d0a:	4680      	mov	r8, r0
 8008d0c:	4638      	mov	r0, r7
 8008d0e:	f7ff fe53 	bl	80089b8 <_Bfree>
 8008d12:	4646      	mov	r6, r8
 8008d14:	106d      	asrs	r5, r5, #1
 8008d16:	d00b      	beq.n	8008d30 <__pow5mult+0xa0>
 8008d18:	6820      	ldr	r0, [r4, #0]
 8008d1a:	b938      	cbnz	r0, 8008d2c <__pow5mult+0x9c>
 8008d1c:	4622      	mov	r2, r4
 8008d1e:	4621      	mov	r1, r4
 8008d20:	4638      	mov	r0, r7
 8008d22:	f7ff ff13 	bl	8008b4c <__multiply>
 8008d26:	6020      	str	r0, [r4, #0]
 8008d28:	f8c0 9000 	str.w	r9, [r0]
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	e7e4      	b.n	8008cfa <__pow5mult+0x6a>
 8008d30:	4630      	mov	r0, r6
 8008d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d36:	bf00      	nop
 8008d38:	0800af68 	.word	0x0800af68
 8008d3c:	0800add1 	.word	0x0800add1
 8008d40:	0800aef4 	.word	0x0800aef4

08008d44 <__lshift>:
 8008d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d48:	460c      	mov	r4, r1
 8008d4a:	6849      	ldr	r1, [r1, #4]
 8008d4c:	6923      	ldr	r3, [r4, #16]
 8008d4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d52:	68a3      	ldr	r3, [r4, #8]
 8008d54:	4607      	mov	r7, r0
 8008d56:	4691      	mov	r9, r2
 8008d58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d5c:	f108 0601 	add.w	r6, r8, #1
 8008d60:	42b3      	cmp	r3, r6
 8008d62:	db0b      	blt.n	8008d7c <__lshift+0x38>
 8008d64:	4638      	mov	r0, r7
 8008d66:	f7ff fde7 	bl	8008938 <_Balloc>
 8008d6a:	4605      	mov	r5, r0
 8008d6c:	b948      	cbnz	r0, 8008d82 <__lshift+0x3e>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	4b28      	ldr	r3, [pc, #160]	@ (8008e14 <__lshift+0xd0>)
 8008d72:	4829      	ldr	r0, [pc, #164]	@ (8008e18 <__lshift+0xd4>)
 8008d74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008d78:	f7fe fe68 	bl	8007a4c <__assert_func>
 8008d7c:	3101      	adds	r1, #1
 8008d7e:	005b      	lsls	r3, r3, #1
 8008d80:	e7ee      	b.n	8008d60 <__lshift+0x1c>
 8008d82:	2300      	movs	r3, #0
 8008d84:	f100 0114 	add.w	r1, r0, #20
 8008d88:	f100 0210 	add.w	r2, r0, #16
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	4553      	cmp	r3, sl
 8008d90:	db33      	blt.n	8008dfa <__lshift+0xb6>
 8008d92:	6920      	ldr	r0, [r4, #16]
 8008d94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d98:	f104 0314 	add.w	r3, r4, #20
 8008d9c:	f019 091f 	ands.w	r9, r9, #31
 8008da0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008da4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008da8:	d02b      	beq.n	8008e02 <__lshift+0xbe>
 8008daa:	f1c9 0e20 	rsb	lr, r9, #32
 8008dae:	468a      	mov	sl, r1
 8008db0:	2200      	movs	r2, #0
 8008db2:	6818      	ldr	r0, [r3, #0]
 8008db4:	fa00 f009 	lsl.w	r0, r0, r9
 8008db8:	4310      	orrs	r0, r2
 8008dba:	f84a 0b04 	str.w	r0, [sl], #4
 8008dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dc2:	459c      	cmp	ip, r3
 8008dc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008dc8:	d8f3      	bhi.n	8008db2 <__lshift+0x6e>
 8008dca:	ebac 0304 	sub.w	r3, ip, r4
 8008dce:	3b15      	subs	r3, #21
 8008dd0:	f023 0303 	bic.w	r3, r3, #3
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	f104 0015 	add.w	r0, r4, #21
 8008dda:	4560      	cmp	r0, ip
 8008ddc:	bf88      	it	hi
 8008dde:	2304      	movhi	r3, #4
 8008de0:	50ca      	str	r2, [r1, r3]
 8008de2:	b10a      	cbz	r2, 8008de8 <__lshift+0xa4>
 8008de4:	f108 0602 	add.w	r6, r8, #2
 8008de8:	3e01      	subs	r6, #1
 8008dea:	4638      	mov	r0, r7
 8008dec:	612e      	str	r6, [r5, #16]
 8008dee:	4621      	mov	r1, r4
 8008df0:	f7ff fde2 	bl	80089b8 <_Bfree>
 8008df4:	4628      	mov	r0, r5
 8008df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8008dfe:	3301      	adds	r3, #1
 8008e00:	e7c5      	b.n	8008d8e <__lshift+0x4a>
 8008e02:	3904      	subs	r1, #4
 8008e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e08:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e0c:	459c      	cmp	ip, r3
 8008e0e:	d8f9      	bhi.n	8008e04 <__lshift+0xc0>
 8008e10:	e7ea      	b.n	8008de8 <__lshift+0xa4>
 8008e12:	bf00      	nop
 8008e14:	0800aee3 	.word	0x0800aee3
 8008e18:	0800aef4 	.word	0x0800aef4

08008e1c <__mcmp>:
 8008e1c:	690a      	ldr	r2, [r1, #16]
 8008e1e:	4603      	mov	r3, r0
 8008e20:	6900      	ldr	r0, [r0, #16]
 8008e22:	1a80      	subs	r0, r0, r2
 8008e24:	b530      	push	{r4, r5, lr}
 8008e26:	d10e      	bne.n	8008e46 <__mcmp+0x2a>
 8008e28:	3314      	adds	r3, #20
 8008e2a:	3114      	adds	r1, #20
 8008e2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e3c:	4295      	cmp	r5, r2
 8008e3e:	d003      	beq.n	8008e48 <__mcmp+0x2c>
 8008e40:	d205      	bcs.n	8008e4e <__mcmp+0x32>
 8008e42:	f04f 30ff 	mov.w	r0, #4294967295
 8008e46:	bd30      	pop	{r4, r5, pc}
 8008e48:	42a3      	cmp	r3, r4
 8008e4a:	d3f3      	bcc.n	8008e34 <__mcmp+0x18>
 8008e4c:	e7fb      	b.n	8008e46 <__mcmp+0x2a>
 8008e4e:	2001      	movs	r0, #1
 8008e50:	e7f9      	b.n	8008e46 <__mcmp+0x2a>
	...

08008e54 <__mdiff>:
 8008e54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e58:	4689      	mov	r9, r1
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	4648      	mov	r0, r9
 8008e60:	4614      	mov	r4, r2
 8008e62:	f7ff ffdb 	bl	8008e1c <__mcmp>
 8008e66:	1e05      	subs	r5, r0, #0
 8008e68:	d112      	bne.n	8008e90 <__mdiff+0x3c>
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f7ff fd63 	bl	8008938 <_Balloc>
 8008e72:	4602      	mov	r2, r0
 8008e74:	b928      	cbnz	r0, 8008e82 <__mdiff+0x2e>
 8008e76:	4b3f      	ldr	r3, [pc, #252]	@ (8008f74 <__mdiff+0x120>)
 8008e78:	f240 2137 	movw	r1, #567	@ 0x237
 8008e7c:	483e      	ldr	r0, [pc, #248]	@ (8008f78 <__mdiff+0x124>)
 8008e7e:	f7fe fde5 	bl	8007a4c <__assert_func>
 8008e82:	2301      	movs	r3, #1
 8008e84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e88:	4610      	mov	r0, r2
 8008e8a:	b003      	add	sp, #12
 8008e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e90:	bfbc      	itt	lt
 8008e92:	464b      	movlt	r3, r9
 8008e94:	46a1      	movlt	r9, r4
 8008e96:	4630      	mov	r0, r6
 8008e98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008e9c:	bfba      	itte	lt
 8008e9e:	461c      	movlt	r4, r3
 8008ea0:	2501      	movlt	r5, #1
 8008ea2:	2500      	movge	r5, #0
 8008ea4:	f7ff fd48 	bl	8008938 <_Balloc>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	b918      	cbnz	r0, 8008eb4 <__mdiff+0x60>
 8008eac:	4b31      	ldr	r3, [pc, #196]	@ (8008f74 <__mdiff+0x120>)
 8008eae:	f240 2145 	movw	r1, #581	@ 0x245
 8008eb2:	e7e3      	b.n	8008e7c <__mdiff+0x28>
 8008eb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008eb8:	6926      	ldr	r6, [r4, #16]
 8008eba:	60c5      	str	r5, [r0, #12]
 8008ebc:	f109 0310 	add.w	r3, r9, #16
 8008ec0:	f109 0514 	add.w	r5, r9, #20
 8008ec4:	f104 0e14 	add.w	lr, r4, #20
 8008ec8:	f100 0b14 	add.w	fp, r0, #20
 8008ecc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008ed0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ed4:	9301      	str	r3, [sp, #4]
 8008ed6:	46d9      	mov	r9, fp
 8008ed8:	f04f 0c00 	mov.w	ip, #0
 8008edc:	9b01      	ldr	r3, [sp, #4]
 8008ede:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008ee2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008ee6:	9301      	str	r3, [sp, #4]
 8008ee8:	fa1f f38a 	uxth.w	r3, sl
 8008eec:	4619      	mov	r1, r3
 8008eee:	b283      	uxth	r3, r0
 8008ef0:	1acb      	subs	r3, r1, r3
 8008ef2:	0c00      	lsrs	r0, r0, #16
 8008ef4:	4463      	add	r3, ip
 8008ef6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008efa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008f04:	4576      	cmp	r6, lr
 8008f06:	f849 3b04 	str.w	r3, [r9], #4
 8008f0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f0e:	d8e5      	bhi.n	8008edc <__mdiff+0x88>
 8008f10:	1b33      	subs	r3, r6, r4
 8008f12:	3b15      	subs	r3, #21
 8008f14:	f023 0303 	bic.w	r3, r3, #3
 8008f18:	3415      	adds	r4, #21
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	42a6      	cmp	r6, r4
 8008f1e:	bf38      	it	cc
 8008f20:	2304      	movcc	r3, #4
 8008f22:	441d      	add	r5, r3
 8008f24:	445b      	add	r3, fp
 8008f26:	461e      	mov	r6, r3
 8008f28:	462c      	mov	r4, r5
 8008f2a:	4544      	cmp	r4, r8
 8008f2c:	d30e      	bcc.n	8008f4c <__mdiff+0xf8>
 8008f2e:	f108 0103 	add.w	r1, r8, #3
 8008f32:	1b49      	subs	r1, r1, r5
 8008f34:	f021 0103 	bic.w	r1, r1, #3
 8008f38:	3d03      	subs	r5, #3
 8008f3a:	45a8      	cmp	r8, r5
 8008f3c:	bf38      	it	cc
 8008f3e:	2100      	movcc	r1, #0
 8008f40:	440b      	add	r3, r1
 8008f42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f46:	b191      	cbz	r1, 8008f6e <__mdiff+0x11a>
 8008f48:	6117      	str	r7, [r2, #16]
 8008f4a:	e79d      	b.n	8008e88 <__mdiff+0x34>
 8008f4c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008f50:	46e6      	mov	lr, ip
 8008f52:	0c08      	lsrs	r0, r1, #16
 8008f54:	fa1c fc81 	uxtah	ip, ip, r1
 8008f58:	4471      	add	r1, lr
 8008f5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008f5e:	b289      	uxth	r1, r1
 8008f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f64:	f846 1b04 	str.w	r1, [r6], #4
 8008f68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f6c:	e7dd      	b.n	8008f2a <__mdiff+0xd6>
 8008f6e:	3f01      	subs	r7, #1
 8008f70:	e7e7      	b.n	8008f42 <__mdiff+0xee>
 8008f72:	bf00      	nop
 8008f74:	0800aee3 	.word	0x0800aee3
 8008f78:	0800aef4 	.word	0x0800aef4

08008f7c <__d2b>:
 8008f7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f80:	460f      	mov	r7, r1
 8008f82:	2101      	movs	r1, #1
 8008f84:	ec59 8b10 	vmov	r8, r9, d0
 8008f88:	4616      	mov	r6, r2
 8008f8a:	f7ff fcd5 	bl	8008938 <_Balloc>
 8008f8e:	4604      	mov	r4, r0
 8008f90:	b930      	cbnz	r0, 8008fa0 <__d2b+0x24>
 8008f92:	4602      	mov	r2, r0
 8008f94:	4b23      	ldr	r3, [pc, #140]	@ (8009024 <__d2b+0xa8>)
 8008f96:	4824      	ldr	r0, [pc, #144]	@ (8009028 <__d2b+0xac>)
 8008f98:	f240 310f 	movw	r1, #783	@ 0x30f
 8008f9c:	f7fe fd56 	bl	8007a4c <__assert_func>
 8008fa0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008fa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fa8:	b10d      	cbz	r5, 8008fae <__d2b+0x32>
 8008faa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fae:	9301      	str	r3, [sp, #4]
 8008fb0:	f1b8 0300 	subs.w	r3, r8, #0
 8008fb4:	d023      	beq.n	8008ffe <__d2b+0x82>
 8008fb6:	4668      	mov	r0, sp
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	f7ff fd84 	bl	8008ac6 <__lo0bits>
 8008fbe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008fc2:	b1d0      	cbz	r0, 8008ffa <__d2b+0x7e>
 8008fc4:	f1c0 0320 	rsb	r3, r0, #32
 8008fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fcc:	430b      	orrs	r3, r1
 8008fce:	40c2      	lsrs	r2, r0
 8008fd0:	6163      	str	r3, [r4, #20]
 8008fd2:	9201      	str	r2, [sp, #4]
 8008fd4:	9b01      	ldr	r3, [sp, #4]
 8008fd6:	61a3      	str	r3, [r4, #24]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	bf0c      	ite	eq
 8008fdc:	2201      	moveq	r2, #1
 8008fde:	2202      	movne	r2, #2
 8008fe0:	6122      	str	r2, [r4, #16]
 8008fe2:	b1a5      	cbz	r5, 800900e <__d2b+0x92>
 8008fe4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008fe8:	4405      	add	r5, r0
 8008fea:	603d      	str	r5, [r7, #0]
 8008fec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008ff0:	6030      	str	r0, [r6, #0]
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	b003      	add	sp, #12
 8008ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ffa:	6161      	str	r1, [r4, #20]
 8008ffc:	e7ea      	b.n	8008fd4 <__d2b+0x58>
 8008ffe:	a801      	add	r0, sp, #4
 8009000:	f7ff fd61 	bl	8008ac6 <__lo0bits>
 8009004:	9b01      	ldr	r3, [sp, #4]
 8009006:	6163      	str	r3, [r4, #20]
 8009008:	3020      	adds	r0, #32
 800900a:	2201      	movs	r2, #1
 800900c:	e7e8      	b.n	8008fe0 <__d2b+0x64>
 800900e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009012:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009016:	6038      	str	r0, [r7, #0]
 8009018:	6918      	ldr	r0, [r3, #16]
 800901a:	f7ff fd35 	bl	8008a88 <__hi0bits>
 800901e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009022:	e7e5      	b.n	8008ff0 <__d2b+0x74>
 8009024:	0800aee3 	.word	0x0800aee3
 8009028:	0800aef4 	.word	0x0800aef4

0800902c <__ssputs_r>:
 800902c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009030:	688e      	ldr	r6, [r1, #8]
 8009032:	461f      	mov	r7, r3
 8009034:	42be      	cmp	r6, r7
 8009036:	680b      	ldr	r3, [r1, #0]
 8009038:	4682      	mov	sl, r0
 800903a:	460c      	mov	r4, r1
 800903c:	4690      	mov	r8, r2
 800903e:	d82d      	bhi.n	800909c <__ssputs_r+0x70>
 8009040:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009044:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009048:	d026      	beq.n	8009098 <__ssputs_r+0x6c>
 800904a:	6965      	ldr	r5, [r4, #20]
 800904c:	6909      	ldr	r1, [r1, #16]
 800904e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009052:	eba3 0901 	sub.w	r9, r3, r1
 8009056:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800905a:	1c7b      	adds	r3, r7, #1
 800905c:	444b      	add	r3, r9
 800905e:	106d      	asrs	r5, r5, #1
 8009060:	429d      	cmp	r5, r3
 8009062:	bf38      	it	cc
 8009064:	461d      	movcc	r5, r3
 8009066:	0553      	lsls	r3, r2, #21
 8009068:	d527      	bpl.n	80090ba <__ssputs_r+0x8e>
 800906a:	4629      	mov	r1, r5
 800906c:	f7ff fbd8 	bl	8008820 <_malloc_r>
 8009070:	4606      	mov	r6, r0
 8009072:	b360      	cbz	r0, 80090ce <__ssputs_r+0xa2>
 8009074:	6921      	ldr	r1, [r4, #16]
 8009076:	464a      	mov	r2, r9
 8009078:	f7fe fcd9 	bl	8007a2e <memcpy>
 800907c:	89a3      	ldrh	r3, [r4, #12]
 800907e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009086:	81a3      	strh	r3, [r4, #12]
 8009088:	6126      	str	r6, [r4, #16]
 800908a:	6165      	str	r5, [r4, #20]
 800908c:	444e      	add	r6, r9
 800908e:	eba5 0509 	sub.w	r5, r5, r9
 8009092:	6026      	str	r6, [r4, #0]
 8009094:	60a5      	str	r5, [r4, #8]
 8009096:	463e      	mov	r6, r7
 8009098:	42be      	cmp	r6, r7
 800909a:	d900      	bls.n	800909e <__ssputs_r+0x72>
 800909c:	463e      	mov	r6, r7
 800909e:	6820      	ldr	r0, [r4, #0]
 80090a0:	4632      	mov	r2, r6
 80090a2:	4641      	mov	r1, r8
 80090a4:	f000 fbb0 	bl	8009808 <memmove>
 80090a8:	68a3      	ldr	r3, [r4, #8]
 80090aa:	1b9b      	subs	r3, r3, r6
 80090ac:	60a3      	str	r3, [r4, #8]
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	4433      	add	r3, r6
 80090b2:	6023      	str	r3, [r4, #0]
 80090b4:	2000      	movs	r0, #0
 80090b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ba:	462a      	mov	r2, r5
 80090bc:	f000 fc1d 	bl	80098fa <_realloc_r>
 80090c0:	4606      	mov	r6, r0
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d1e0      	bne.n	8009088 <__ssputs_r+0x5c>
 80090c6:	6921      	ldr	r1, [r4, #16]
 80090c8:	4650      	mov	r0, sl
 80090ca:	f7ff fb35 	bl	8008738 <_free_r>
 80090ce:	230c      	movs	r3, #12
 80090d0:	f8ca 3000 	str.w	r3, [sl]
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090da:	81a3      	strh	r3, [r4, #12]
 80090dc:	f04f 30ff 	mov.w	r0, #4294967295
 80090e0:	e7e9      	b.n	80090b6 <__ssputs_r+0x8a>
	...

080090e4 <_svfiprintf_r>:
 80090e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e8:	4698      	mov	r8, r3
 80090ea:	898b      	ldrh	r3, [r1, #12]
 80090ec:	061b      	lsls	r3, r3, #24
 80090ee:	b09d      	sub	sp, #116	@ 0x74
 80090f0:	4607      	mov	r7, r0
 80090f2:	460d      	mov	r5, r1
 80090f4:	4614      	mov	r4, r2
 80090f6:	d510      	bpl.n	800911a <_svfiprintf_r+0x36>
 80090f8:	690b      	ldr	r3, [r1, #16]
 80090fa:	b973      	cbnz	r3, 800911a <_svfiprintf_r+0x36>
 80090fc:	2140      	movs	r1, #64	@ 0x40
 80090fe:	f7ff fb8f 	bl	8008820 <_malloc_r>
 8009102:	6028      	str	r0, [r5, #0]
 8009104:	6128      	str	r0, [r5, #16]
 8009106:	b930      	cbnz	r0, 8009116 <_svfiprintf_r+0x32>
 8009108:	230c      	movs	r3, #12
 800910a:	603b      	str	r3, [r7, #0]
 800910c:	f04f 30ff 	mov.w	r0, #4294967295
 8009110:	b01d      	add	sp, #116	@ 0x74
 8009112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009116:	2340      	movs	r3, #64	@ 0x40
 8009118:	616b      	str	r3, [r5, #20]
 800911a:	2300      	movs	r3, #0
 800911c:	9309      	str	r3, [sp, #36]	@ 0x24
 800911e:	2320      	movs	r3, #32
 8009120:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009124:	f8cd 800c 	str.w	r8, [sp, #12]
 8009128:	2330      	movs	r3, #48	@ 0x30
 800912a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80092c8 <_svfiprintf_r+0x1e4>
 800912e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009132:	f04f 0901 	mov.w	r9, #1
 8009136:	4623      	mov	r3, r4
 8009138:	469a      	mov	sl, r3
 800913a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800913e:	b10a      	cbz	r2, 8009144 <_svfiprintf_r+0x60>
 8009140:	2a25      	cmp	r2, #37	@ 0x25
 8009142:	d1f9      	bne.n	8009138 <_svfiprintf_r+0x54>
 8009144:	ebba 0b04 	subs.w	fp, sl, r4
 8009148:	d00b      	beq.n	8009162 <_svfiprintf_r+0x7e>
 800914a:	465b      	mov	r3, fp
 800914c:	4622      	mov	r2, r4
 800914e:	4629      	mov	r1, r5
 8009150:	4638      	mov	r0, r7
 8009152:	f7ff ff6b 	bl	800902c <__ssputs_r>
 8009156:	3001      	adds	r0, #1
 8009158:	f000 80a7 	beq.w	80092aa <_svfiprintf_r+0x1c6>
 800915c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800915e:	445a      	add	r2, fp
 8009160:	9209      	str	r2, [sp, #36]	@ 0x24
 8009162:	f89a 3000 	ldrb.w	r3, [sl]
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 809f 	beq.w	80092aa <_svfiprintf_r+0x1c6>
 800916c:	2300      	movs	r3, #0
 800916e:	f04f 32ff 	mov.w	r2, #4294967295
 8009172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009176:	f10a 0a01 	add.w	sl, sl, #1
 800917a:	9304      	str	r3, [sp, #16]
 800917c:	9307      	str	r3, [sp, #28]
 800917e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009182:	931a      	str	r3, [sp, #104]	@ 0x68
 8009184:	4654      	mov	r4, sl
 8009186:	2205      	movs	r2, #5
 8009188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800918c:	484e      	ldr	r0, [pc, #312]	@ (80092c8 <_svfiprintf_r+0x1e4>)
 800918e:	f7f7 f837 	bl	8000200 <memchr>
 8009192:	9a04      	ldr	r2, [sp, #16]
 8009194:	b9d8      	cbnz	r0, 80091ce <_svfiprintf_r+0xea>
 8009196:	06d0      	lsls	r0, r2, #27
 8009198:	bf44      	itt	mi
 800919a:	2320      	movmi	r3, #32
 800919c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091a0:	0711      	lsls	r1, r2, #28
 80091a2:	bf44      	itt	mi
 80091a4:	232b      	movmi	r3, #43	@ 0x2b
 80091a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091aa:	f89a 3000 	ldrb.w	r3, [sl]
 80091ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80091b0:	d015      	beq.n	80091de <_svfiprintf_r+0xfa>
 80091b2:	9a07      	ldr	r2, [sp, #28]
 80091b4:	4654      	mov	r4, sl
 80091b6:	2000      	movs	r0, #0
 80091b8:	f04f 0c0a 	mov.w	ip, #10
 80091bc:	4621      	mov	r1, r4
 80091be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091c2:	3b30      	subs	r3, #48	@ 0x30
 80091c4:	2b09      	cmp	r3, #9
 80091c6:	d94b      	bls.n	8009260 <_svfiprintf_r+0x17c>
 80091c8:	b1b0      	cbz	r0, 80091f8 <_svfiprintf_r+0x114>
 80091ca:	9207      	str	r2, [sp, #28]
 80091cc:	e014      	b.n	80091f8 <_svfiprintf_r+0x114>
 80091ce:	eba0 0308 	sub.w	r3, r0, r8
 80091d2:	fa09 f303 	lsl.w	r3, r9, r3
 80091d6:	4313      	orrs	r3, r2
 80091d8:	9304      	str	r3, [sp, #16]
 80091da:	46a2      	mov	sl, r4
 80091dc:	e7d2      	b.n	8009184 <_svfiprintf_r+0xa0>
 80091de:	9b03      	ldr	r3, [sp, #12]
 80091e0:	1d19      	adds	r1, r3, #4
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	9103      	str	r1, [sp, #12]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	bfbb      	ittet	lt
 80091ea:	425b      	neglt	r3, r3
 80091ec:	f042 0202 	orrlt.w	r2, r2, #2
 80091f0:	9307      	strge	r3, [sp, #28]
 80091f2:	9307      	strlt	r3, [sp, #28]
 80091f4:	bfb8      	it	lt
 80091f6:	9204      	strlt	r2, [sp, #16]
 80091f8:	7823      	ldrb	r3, [r4, #0]
 80091fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80091fc:	d10a      	bne.n	8009214 <_svfiprintf_r+0x130>
 80091fe:	7863      	ldrb	r3, [r4, #1]
 8009200:	2b2a      	cmp	r3, #42	@ 0x2a
 8009202:	d132      	bne.n	800926a <_svfiprintf_r+0x186>
 8009204:	9b03      	ldr	r3, [sp, #12]
 8009206:	1d1a      	adds	r2, r3, #4
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	9203      	str	r2, [sp, #12]
 800920c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009210:	3402      	adds	r4, #2
 8009212:	9305      	str	r3, [sp, #20]
 8009214:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80092d8 <_svfiprintf_r+0x1f4>
 8009218:	7821      	ldrb	r1, [r4, #0]
 800921a:	2203      	movs	r2, #3
 800921c:	4650      	mov	r0, sl
 800921e:	f7f6 ffef 	bl	8000200 <memchr>
 8009222:	b138      	cbz	r0, 8009234 <_svfiprintf_r+0x150>
 8009224:	9b04      	ldr	r3, [sp, #16]
 8009226:	eba0 000a 	sub.w	r0, r0, sl
 800922a:	2240      	movs	r2, #64	@ 0x40
 800922c:	4082      	lsls	r2, r0
 800922e:	4313      	orrs	r3, r2
 8009230:	3401      	adds	r4, #1
 8009232:	9304      	str	r3, [sp, #16]
 8009234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009238:	4824      	ldr	r0, [pc, #144]	@ (80092cc <_svfiprintf_r+0x1e8>)
 800923a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800923e:	2206      	movs	r2, #6
 8009240:	f7f6 ffde 	bl	8000200 <memchr>
 8009244:	2800      	cmp	r0, #0
 8009246:	d036      	beq.n	80092b6 <_svfiprintf_r+0x1d2>
 8009248:	4b21      	ldr	r3, [pc, #132]	@ (80092d0 <_svfiprintf_r+0x1ec>)
 800924a:	bb1b      	cbnz	r3, 8009294 <_svfiprintf_r+0x1b0>
 800924c:	9b03      	ldr	r3, [sp, #12]
 800924e:	3307      	adds	r3, #7
 8009250:	f023 0307 	bic.w	r3, r3, #7
 8009254:	3308      	adds	r3, #8
 8009256:	9303      	str	r3, [sp, #12]
 8009258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800925a:	4433      	add	r3, r6
 800925c:	9309      	str	r3, [sp, #36]	@ 0x24
 800925e:	e76a      	b.n	8009136 <_svfiprintf_r+0x52>
 8009260:	fb0c 3202 	mla	r2, ip, r2, r3
 8009264:	460c      	mov	r4, r1
 8009266:	2001      	movs	r0, #1
 8009268:	e7a8      	b.n	80091bc <_svfiprintf_r+0xd8>
 800926a:	2300      	movs	r3, #0
 800926c:	3401      	adds	r4, #1
 800926e:	9305      	str	r3, [sp, #20]
 8009270:	4619      	mov	r1, r3
 8009272:	f04f 0c0a 	mov.w	ip, #10
 8009276:	4620      	mov	r0, r4
 8009278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800927c:	3a30      	subs	r2, #48	@ 0x30
 800927e:	2a09      	cmp	r2, #9
 8009280:	d903      	bls.n	800928a <_svfiprintf_r+0x1a6>
 8009282:	2b00      	cmp	r3, #0
 8009284:	d0c6      	beq.n	8009214 <_svfiprintf_r+0x130>
 8009286:	9105      	str	r1, [sp, #20]
 8009288:	e7c4      	b.n	8009214 <_svfiprintf_r+0x130>
 800928a:	fb0c 2101 	mla	r1, ip, r1, r2
 800928e:	4604      	mov	r4, r0
 8009290:	2301      	movs	r3, #1
 8009292:	e7f0      	b.n	8009276 <_svfiprintf_r+0x192>
 8009294:	ab03      	add	r3, sp, #12
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	462a      	mov	r2, r5
 800929a:	4b0e      	ldr	r3, [pc, #56]	@ (80092d4 <_svfiprintf_r+0x1f0>)
 800929c:	a904      	add	r1, sp, #16
 800929e:	4638      	mov	r0, r7
 80092a0:	f7fd fcc2 	bl	8006c28 <_printf_float>
 80092a4:	1c42      	adds	r2, r0, #1
 80092a6:	4606      	mov	r6, r0
 80092a8:	d1d6      	bne.n	8009258 <_svfiprintf_r+0x174>
 80092aa:	89ab      	ldrh	r3, [r5, #12]
 80092ac:	065b      	lsls	r3, r3, #25
 80092ae:	f53f af2d 	bmi.w	800910c <_svfiprintf_r+0x28>
 80092b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092b4:	e72c      	b.n	8009110 <_svfiprintf_r+0x2c>
 80092b6:	ab03      	add	r3, sp, #12
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	462a      	mov	r2, r5
 80092bc:	4b05      	ldr	r3, [pc, #20]	@ (80092d4 <_svfiprintf_r+0x1f0>)
 80092be:	a904      	add	r1, sp, #16
 80092c0:	4638      	mov	r0, r7
 80092c2:	f7fd ff49 	bl	8007158 <_printf_i>
 80092c6:	e7ed      	b.n	80092a4 <_svfiprintf_r+0x1c0>
 80092c8:	0800af4d 	.word	0x0800af4d
 80092cc:	0800af57 	.word	0x0800af57
 80092d0:	08006c29 	.word	0x08006c29
 80092d4:	0800902d 	.word	0x0800902d
 80092d8:	0800af53 	.word	0x0800af53

080092dc <__sfputc_r>:
 80092dc:	6893      	ldr	r3, [r2, #8]
 80092de:	3b01      	subs	r3, #1
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	b410      	push	{r4}
 80092e4:	6093      	str	r3, [r2, #8]
 80092e6:	da08      	bge.n	80092fa <__sfputc_r+0x1e>
 80092e8:	6994      	ldr	r4, [r2, #24]
 80092ea:	42a3      	cmp	r3, r4
 80092ec:	db01      	blt.n	80092f2 <__sfputc_r+0x16>
 80092ee:	290a      	cmp	r1, #10
 80092f0:	d103      	bne.n	80092fa <__sfputc_r+0x1e>
 80092f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092f6:	f7fe b9ec 	b.w	80076d2 <__swbuf_r>
 80092fa:	6813      	ldr	r3, [r2, #0]
 80092fc:	1c58      	adds	r0, r3, #1
 80092fe:	6010      	str	r0, [r2, #0]
 8009300:	7019      	strb	r1, [r3, #0]
 8009302:	4608      	mov	r0, r1
 8009304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009308:	4770      	bx	lr

0800930a <__sfputs_r>:
 800930a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930c:	4606      	mov	r6, r0
 800930e:	460f      	mov	r7, r1
 8009310:	4614      	mov	r4, r2
 8009312:	18d5      	adds	r5, r2, r3
 8009314:	42ac      	cmp	r4, r5
 8009316:	d101      	bne.n	800931c <__sfputs_r+0x12>
 8009318:	2000      	movs	r0, #0
 800931a:	e007      	b.n	800932c <__sfputs_r+0x22>
 800931c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009320:	463a      	mov	r2, r7
 8009322:	4630      	mov	r0, r6
 8009324:	f7ff ffda 	bl	80092dc <__sfputc_r>
 8009328:	1c43      	adds	r3, r0, #1
 800932a:	d1f3      	bne.n	8009314 <__sfputs_r+0xa>
 800932c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009330 <_vfiprintf_r>:
 8009330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009334:	460d      	mov	r5, r1
 8009336:	b09d      	sub	sp, #116	@ 0x74
 8009338:	4614      	mov	r4, r2
 800933a:	4698      	mov	r8, r3
 800933c:	4606      	mov	r6, r0
 800933e:	b118      	cbz	r0, 8009348 <_vfiprintf_r+0x18>
 8009340:	6a03      	ldr	r3, [r0, #32]
 8009342:	b90b      	cbnz	r3, 8009348 <_vfiprintf_r+0x18>
 8009344:	f7fe f8b2 	bl	80074ac <__sinit>
 8009348:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800934a:	07d9      	lsls	r1, r3, #31
 800934c:	d405      	bmi.n	800935a <_vfiprintf_r+0x2a>
 800934e:	89ab      	ldrh	r3, [r5, #12]
 8009350:	059a      	lsls	r2, r3, #22
 8009352:	d402      	bmi.n	800935a <_vfiprintf_r+0x2a>
 8009354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009356:	f7fe fb60 	bl	8007a1a <__retarget_lock_acquire_recursive>
 800935a:	89ab      	ldrh	r3, [r5, #12]
 800935c:	071b      	lsls	r3, r3, #28
 800935e:	d501      	bpl.n	8009364 <_vfiprintf_r+0x34>
 8009360:	692b      	ldr	r3, [r5, #16]
 8009362:	b99b      	cbnz	r3, 800938c <_vfiprintf_r+0x5c>
 8009364:	4629      	mov	r1, r5
 8009366:	4630      	mov	r0, r6
 8009368:	f7fe f9f2 	bl	8007750 <__swsetup_r>
 800936c:	b170      	cbz	r0, 800938c <_vfiprintf_r+0x5c>
 800936e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009370:	07dc      	lsls	r4, r3, #31
 8009372:	d504      	bpl.n	800937e <_vfiprintf_r+0x4e>
 8009374:	f04f 30ff 	mov.w	r0, #4294967295
 8009378:	b01d      	add	sp, #116	@ 0x74
 800937a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800937e:	89ab      	ldrh	r3, [r5, #12]
 8009380:	0598      	lsls	r0, r3, #22
 8009382:	d4f7      	bmi.n	8009374 <_vfiprintf_r+0x44>
 8009384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009386:	f7fe fb49 	bl	8007a1c <__retarget_lock_release_recursive>
 800938a:	e7f3      	b.n	8009374 <_vfiprintf_r+0x44>
 800938c:	2300      	movs	r3, #0
 800938e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009390:	2320      	movs	r3, #32
 8009392:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009396:	f8cd 800c 	str.w	r8, [sp, #12]
 800939a:	2330      	movs	r3, #48	@ 0x30
 800939c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800954c <_vfiprintf_r+0x21c>
 80093a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093a4:	f04f 0901 	mov.w	r9, #1
 80093a8:	4623      	mov	r3, r4
 80093aa:	469a      	mov	sl, r3
 80093ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093b0:	b10a      	cbz	r2, 80093b6 <_vfiprintf_r+0x86>
 80093b2:	2a25      	cmp	r2, #37	@ 0x25
 80093b4:	d1f9      	bne.n	80093aa <_vfiprintf_r+0x7a>
 80093b6:	ebba 0b04 	subs.w	fp, sl, r4
 80093ba:	d00b      	beq.n	80093d4 <_vfiprintf_r+0xa4>
 80093bc:	465b      	mov	r3, fp
 80093be:	4622      	mov	r2, r4
 80093c0:	4629      	mov	r1, r5
 80093c2:	4630      	mov	r0, r6
 80093c4:	f7ff ffa1 	bl	800930a <__sfputs_r>
 80093c8:	3001      	adds	r0, #1
 80093ca:	f000 80a7 	beq.w	800951c <_vfiprintf_r+0x1ec>
 80093ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093d0:	445a      	add	r2, fp
 80093d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80093d4:	f89a 3000 	ldrb.w	r3, [sl]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 809f 	beq.w	800951c <_vfiprintf_r+0x1ec>
 80093de:	2300      	movs	r3, #0
 80093e0:	f04f 32ff 	mov.w	r2, #4294967295
 80093e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093e8:	f10a 0a01 	add.w	sl, sl, #1
 80093ec:	9304      	str	r3, [sp, #16]
 80093ee:	9307      	str	r3, [sp, #28]
 80093f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80093f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80093f6:	4654      	mov	r4, sl
 80093f8:	2205      	movs	r2, #5
 80093fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093fe:	4853      	ldr	r0, [pc, #332]	@ (800954c <_vfiprintf_r+0x21c>)
 8009400:	f7f6 fefe 	bl	8000200 <memchr>
 8009404:	9a04      	ldr	r2, [sp, #16]
 8009406:	b9d8      	cbnz	r0, 8009440 <_vfiprintf_r+0x110>
 8009408:	06d1      	lsls	r1, r2, #27
 800940a:	bf44      	itt	mi
 800940c:	2320      	movmi	r3, #32
 800940e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009412:	0713      	lsls	r3, r2, #28
 8009414:	bf44      	itt	mi
 8009416:	232b      	movmi	r3, #43	@ 0x2b
 8009418:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800941c:	f89a 3000 	ldrb.w	r3, [sl]
 8009420:	2b2a      	cmp	r3, #42	@ 0x2a
 8009422:	d015      	beq.n	8009450 <_vfiprintf_r+0x120>
 8009424:	9a07      	ldr	r2, [sp, #28]
 8009426:	4654      	mov	r4, sl
 8009428:	2000      	movs	r0, #0
 800942a:	f04f 0c0a 	mov.w	ip, #10
 800942e:	4621      	mov	r1, r4
 8009430:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009434:	3b30      	subs	r3, #48	@ 0x30
 8009436:	2b09      	cmp	r3, #9
 8009438:	d94b      	bls.n	80094d2 <_vfiprintf_r+0x1a2>
 800943a:	b1b0      	cbz	r0, 800946a <_vfiprintf_r+0x13a>
 800943c:	9207      	str	r2, [sp, #28]
 800943e:	e014      	b.n	800946a <_vfiprintf_r+0x13a>
 8009440:	eba0 0308 	sub.w	r3, r0, r8
 8009444:	fa09 f303 	lsl.w	r3, r9, r3
 8009448:	4313      	orrs	r3, r2
 800944a:	9304      	str	r3, [sp, #16]
 800944c:	46a2      	mov	sl, r4
 800944e:	e7d2      	b.n	80093f6 <_vfiprintf_r+0xc6>
 8009450:	9b03      	ldr	r3, [sp, #12]
 8009452:	1d19      	adds	r1, r3, #4
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	9103      	str	r1, [sp, #12]
 8009458:	2b00      	cmp	r3, #0
 800945a:	bfbb      	ittet	lt
 800945c:	425b      	neglt	r3, r3
 800945e:	f042 0202 	orrlt.w	r2, r2, #2
 8009462:	9307      	strge	r3, [sp, #28]
 8009464:	9307      	strlt	r3, [sp, #28]
 8009466:	bfb8      	it	lt
 8009468:	9204      	strlt	r2, [sp, #16]
 800946a:	7823      	ldrb	r3, [r4, #0]
 800946c:	2b2e      	cmp	r3, #46	@ 0x2e
 800946e:	d10a      	bne.n	8009486 <_vfiprintf_r+0x156>
 8009470:	7863      	ldrb	r3, [r4, #1]
 8009472:	2b2a      	cmp	r3, #42	@ 0x2a
 8009474:	d132      	bne.n	80094dc <_vfiprintf_r+0x1ac>
 8009476:	9b03      	ldr	r3, [sp, #12]
 8009478:	1d1a      	adds	r2, r3, #4
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	9203      	str	r2, [sp, #12]
 800947e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009482:	3402      	adds	r4, #2
 8009484:	9305      	str	r3, [sp, #20]
 8009486:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800955c <_vfiprintf_r+0x22c>
 800948a:	7821      	ldrb	r1, [r4, #0]
 800948c:	2203      	movs	r2, #3
 800948e:	4650      	mov	r0, sl
 8009490:	f7f6 feb6 	bl	8000200 <memchr>
 8009494:	b138      	cbz	r0, 80094a6 <_vfiprintf_r+0x176>
 8009496:	9b04      	ldr	r3, [sp, #16]
 8009498:	eba0 000a 	sub.w	r0, r0, sl
 800949c:	2240      	movs	r2, #64	@ 0x40
 800949e:	4082      	lsls	r2, r0
 80094a0:	4313      	orrs	r3, r2
 80094a2:	3401      	adds	r4, #1
 80094a4:	9304      	str	r3, [sp, #16]
 80094a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094aa:	4829      	ldr	r0, [pc, #164]	@ (8009550 <_vfiprintf_r+0x220>)
 80094ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094b0:	2206      	movs	r2, #6
 80094b2:	f7f6 fea5 	bl	8000200 <memchr>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d03f      	beq.n	800953a <_vfiprintf_r+0x20a>
 80094ba:	4b26      	ldr	r3, [pc, #152]	@ (8009554 <_vfiprintf_r+0x224>)
 80094bc:	bb1b      	cbnz	r3, 8009506 <_vfiprintf_r+0x1d6>
 80094be:	9b03      	ldr	r3, [sp, #12]
 80094c0:	3307      	adds	r3, #7
 80094c2:	f023 0307 	bic.w	r3, r3, #7
 80094c6:	3308      	adds	r3, #8
 80094c8:	9303      	str	r3, [sp, #12]
 80094ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094cc:	443b      	add	r3, r7
 80094ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80094d0:	e76a      	b.n	80093a8 <_vfiprintf_r+0x78>
 80094d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80094d6:	460c      	mov	r4, r1
 80094d8:	2001      	movs	r0, #1
 80094da:	e7a8      	b.n	800942e <_vfiprintf_r+0xfe>
 80094dc:	2300      	movs	r3, #0
 80094de:	3401      	adds	r4, #1
 80094e0:	9305      	str	r3, [sp, #20]
 80094e2:	4619      	mov	r1, r3
 80094e4:	f04f 0c0a 	mov.w	ip, #10
 80094e8:	4620      	mov	r0, r4
 80094ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094ee:	3a30      	subs	r2, #48	@ 0x30
 80094f0:	2a09      	cmp	r2, #9
 80094f2:	d903      	bls.n	80094fc <_vfiprintf_r+0x1cc>
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d0c6      	beq.n	8009486 <_vfiprintf_r+0x156>
 80094f8:	9105      	str	r1, [sp, #20]
 80094fa:	e7c4      	b.n	8009486 <_vfiprintf_r+0x156>
 80094fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009500:	4604      	mov	r4, r0
 8009502:	2301      	movs	r3, #1
 8009504:	e7f0      	b.n	80094e8 <_vfiprintf_r+0x1b8>
 8009506:	ab03      	add	r3, sp, #12
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	462a      	mov	r2, r5
 800950c:	4b12      	ldr	r3, [pc, #72]	@ (8009558 <_vfiprintf_r+0x228>)
 800950e:	a904      	add	r1, sp, #16
 8009510:	4630      	mov	r0, r6
 8009512:	f7fd fb89 	bl	8006c28 <_printf_float>
 8009516:	4607      	mov	r7, r0
 8009518:	1c78      	adds	r0, r7, #1
 800951a:	d1d6      	bne.n	80094ca <_vfiprintf_r+0x19a>
 800951c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800951e:	07d9      	lsls	r1, r3, #31
 8009520:	d405      	bmi.n	800952e <_vfiprintf_r+0x1fe>
 8009522:	89ab      	ldrh	r3, [r5, #12]
 8009524:	059a      	lsls	r2, r3, #22
 8009526:	d402      	bmi.n	800952e <_vfiprintf_r+0x1fe>
 8009528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800952a:	f7fe fa77 	bl	8007a1c <__retarget_lock_release_recursive>
 800952e:	89ab      	ldrh	r3, [r5, #12]
 8009530:	065b      	lsls	r3, r3, #25
 8009532:	f53f af1f 	bmi.w	8009374 <_vfiprintf_r+0x44>
 8009536:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009538:	e71e      	b.n	8009378 <_vfiprintf_r+0x48>
 800953a:	ab03      	add	r3, sp, #12
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	462a      	mov	r2, r5
 8009540:	4b05      	ldr	r3, [pc, #20]	@ (8009558 <_vfiprintf_r+0x228>)
 8009542:	a904      	add	r1, sp, #16
 8009544:	4630      	mov	r0, r6
 8009546:	f7fd fe07 	bl	8007158 <_printf_i>
 800954a:	e7e4      	b.n	8009516 <_vfiprintf_r+0x1e6>
 800954c:	0800af4d 	.word	0x0800af4d
 8009550:	0800af57 	.word	0x0800af57
 8009554:	08006c29 	.word	0x08006c29
 8009558:	0800930b 	.word	0x0800930b
 800955c:	0800af53 	.word	0x0800af53

08009560 <__sflush_r>:
 8009560:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009568:	0716      	lsls	r6, r2, #28
 800956a:	4605      	mov	r5, r0
 800956c:	460c      	mov	r4, r1
 800956e:	d454      	bmi.n	800961a <__sflush_r+0xba>
 8009570:	684b      	ldr	r3, [r1, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	dc02      	bgt.n	800957c <__sflush_r+0x1c>
 8009576:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009578:	2b00      	cmp	r3, #0
 800957a:	dd48      	ble.n	800960e <__sflush_r+0xae>
 800957c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800957e:	2e00      	cmp	r6, #0
 8009580:	d045      	beq.n	800960e <__sflush_r+0xae>
 8009582:	2300      	movs	r3, #0
 8009584:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009588:	682f      	ldr	r7, [r5, #0]
 800958a:	6a21      	ldr	r1, [r4, #32]
 800958c:	602b      	str	r3, [r5, #0]
 800958e:	d030      	beq.n	80095f2 <__sflush_r+0x92>
 8009590:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	0759      	lsls	r1, r3, #29
 8009596:	d505      	bpl.n	80095a4 <__sflush_r+0x44>
 8009598:	6863      	ldr	r3, [r4, #4]
 800959a:	1ad2      	subs	r2, r2, r3
 800959c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800959e:	b10b      	cbz	r3, 80095a4 <__sflush_r+0x44>
 80095a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80095a2:	1ad2      	subs	r2, r2, r3
 80095a4:	2300      	movs	r3, #0
 80095a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095a8:	6a21      	ldr	r1, [r4, #32]
 80095aa:	4628      	mov	r0, r5
 80095ac:	47b0      	blx	r6
 80095ae:	1c43      	adds	r3, r0, #1
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	d106      	bne.n	80095c2 <__sflush_r+0x62>
 80095b4:	6829      	ldr	r1, [r5, #0]
 80095b6:	291d      	cmp	r1, #29
 80095b8:	d82b      	bhi.n	8009612 <__sflush_r+0xb2>
 80095ba:	4a2a      	ldr	r2, [pc, #168]	@ (8009664 <__sflush_r+0x104>)
 80095bc:	40ca      	lsrs	r2, r1
 80095be:	07d6      	lsls	r6, r2, #31
 80095c0:	d527      	bpl.n	8009612 <__sflush_r+0xb2>
 80095c2:	2200      	movs	r2, #0
 80095c4:	6062      	str	r2, [r4, #4]
 80095c6:	04d9      	lsls	r1, r3, #19
 80095c8:	6922      	ldr	r2, [r4, #16]
 80095ca:	6022      	str	r2, [r4, #0]
 80095cc:	d504      	bpl.n	80095d8 <__sflush_r+0x78>
 80095ce:	1c42      	adds	r2, r0, #1
 80095d0:	d101      	bne.n	80095d6 <__sflush_r+0x76>
 80095d2:	682b      	ldr	r3, [r5, #0]
 80095d4:	b903      	cbnz	r3, 80095d8 <__sflush_r+0x78>
 80095d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80095d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095da:	602f      	str	r7, [r5, #0]
 80095dc:	b1b9      	cbz	r1, 800960e <__sflush_r+0xae>
 80095de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095e2:	4299      	cmp	r1, r3
 80095e4:	d002      	beq.n	80095ec <__sflush_r+0x8c>
 80095e6:	4628      	mov	r0, r5
 80095e8:	f7ff f8a6 	bl	8008738 <_free_r>
 80095ec:	2300      	movs	r3, #0
 80095ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80095f0:	e00d      	b.n	800960e <__sflush_r+0xae>
 80095f2:	2301      	movs	r3, #1
 80095f4:	4628      	mov	r0, r5
 80095f6:	47b0      	blx	r6
 80095f8:	4602      	mov	r2, r0
 80095fa:	1c50      	adds	r0, r2, #1
 80095fc:	d1c9      	bne.n	8009592 <__sflush_r+0x32>
 80095fe:	682b      	ldr	r3, [r5, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d0c6      	beq.n	8009592 <__sflush_r+0x32>
 8009604:	2b1d      	cmp	r3, #29
 8009606:	d001      	beq.n	800960c <__sflush_r+0xac>
 8009608:	2b16      	cmp	r3, #22
 800960a:	d11e      	bne.n	800964a <__sflush_r+0xea>
 800960c:	602f      	str	r7, [r5, #0]
 800960e:	2000      	movs	r0, #0
 8009610:	e022      	b.n	8009658 <__sflush_r+0xf8>
 8009612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009616:	b21b      	sxth	r3, r3
 8009618:	e01b      	b.n	8009652 <__sflush_r+0xf2>
 800961a:	690f      	ldr	r7, [r1, #16]
 800961c:	2f00      	cmp	r7, #0
 800961e:	d0f6      	beq.n	800960e <__sflush_r+0xae>
 8009620:	0793      	lsls	r3, r2, #30
 8009622:	680e      	ldr	r6, [r1, #0]
 8009624:	bf08      	it	eq
 8009626:	694b      	ldreq	r3, [r1, #20]
 8009628:	600f      	str	r7, [r1, #0]
 800962a:	bf18      	it	ne
 800962c:	2300      	movne	r3, #0
 800962e:	eba6 0807 	sub.w	r8, r6, r7
 8009632:	608b      	str	r3, [r1, #8]
 8009634:	f1b8 0f00 	cmp.w	r8, #0
 8009638:	dde9      	ble.n	800960e <__sflush_r+0xae>
 800963a:	6a21      	ldr	r1, [r4, #32]
 800963c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800963e:	4643      	mov	r3, r8
 8009640:	463a      	mov	r2, r7
 8009642:	4628      	mov	r0, r5
 8009644:	47b0      	blx	r6
 8009646:	2800      	cmp	r0, #0
 8009648:	dc08      	bgt.n	800965c <__sflush_r+0xfc>
 800964a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800964e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009652:	81a3      	strh	r3, [r4, #12]
 8009654:	f04f 30ff 	mov.w	r0, #4294967295
 8009658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800965c:	4407      	add	r7, r0
 800965e:	eba8 0800 	sub.w	r8, r8, r0
 8009662:	e7e7      	b.n	8009634 <__sflush_r+0xd4>
 8009664:	20400001 	.word	0x20400001

08009668 <_fflush_r>:
 8009668:	b538      	push	{r3, r4, r5, lr}
 800966a:	690b      	ldr	r3, [r1, #16]
 800966c:	4605      	mov	r5, r0
 800966e:	460c      	mov	r4, r1
 8009670:	b913      	cbnz	r3, 8009678 <_fflush_r+0x10>
 8009672:	2500      	movs	r5, #0
 8009674:	4628      	mov	r0, r5
 8009676:	bd38      	pop	{r3, r4, r5, pc}
 8009678:	b118      	cbz	r0, 8009682 <_fflush_r+0x1a>
 800967a:	6a03      	ldr	r3, [r0, #32]
 800967c:	b90b      	cbnz	r3, 8009682 <_fflush_r+0x1a>
 800967e:	f7fd ff15 	bl	80074ac <__sinit>
 8009682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d0f3      	beq.n	8009672 <_fflush_r+0xa>
 800968a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800968c:	07d0      	lsls	r0, r2, #31
 800968e:	d404      	bmi.n	800969a <_fflush_r+0x32>
 8009690:	0599      	lsls	r1, r3, #22
 8009692:	d402      	bmi.n	800969a <_fflush_r+0x32>
 8009694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009696:	f7fe f9c0 	bl	8007a1a <__retarget_lock_acquire_recursive>
 800969a:	4628      	mov	r0, r5
 800969c:	4621      	mov	r1, r4
 800969e:	f7ff ff5f 	bl	8009560 <__sflush_r>
 80096a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096a4:	07da      	lsls	r2, r3, #31
 80096a6:	4605      	mov	r5, r0
 80096a8:	d4e4      	bmi.n	8009674 <_fflush_r+0xc>
 80096aa:	89a3      	ldrh	r3, [r4, #12]
 80096ac:	059b      	lsls	r3, r3, #22
 80096ae:	d4e1      	bmi.n	8009674 <_fflush_r+0xc>
 80096b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096b2:	f7fe f9b3 	bl	8007a1c <__retarget_lock_release_recursive>
 80096b6:	e7dd      	b.n	8009674 <_fflush_r+0xc>

080096b8 <fiprintf>:
 80096b8:	b40e      	push	{r1, r2, r3}
 80096ba:	b503      	push	{r0, r1, lr}
 80096bc:	4601      	mov	r1, r0
 80096be:	ab03      	add	r3, sp, #12
 80096c0:	4805      	ldr	r0, [pc, #20]	@ (80096d8 <fiprintf+0x20>)
 80096c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096c6:	6800      	ldr	r0, [r0, #0]
 80096c8:	9301      	str	r3, [sp, #4]
 80096ca:	f7ff fe31 	bl	8009330 <_vfiprintf_r>
 80096ce:	b002      	add	sp, #8
 80096d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80096d4:	b003      	add	sp, #12
 80096d6:	4770      	bx	lr
 80096d8:	20000020 	.word	0x20000020

080096dc <__swhatbuf_r>:
 80096dc:	b570      	push	{r4, r5, r6, lr}
 80096de:	460c      	mov	r4, r1
 80096e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e4:	2900      	cmp	r1, #0
 80096e6:	b096      	sub	sp, #88	@ 0x58
 80096e8:	4615      	mov	r5, r2
 80096ea:	461e      	mov	r6, r3
 80096ec:	da0d      	bge.n	800970a <__swhatbuf_r+0x2e>
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80096f4:	f04f 0100 	mov.w	r1, #0
 80096f8:	bf14      	ite	ne
 80096fa:	2340      	movne	r3, #64	@ 0x40
 80096fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009700:	2000      	movs	r0, #0
 8009702:	6031      	str	r1, [r6, #0]
 8009704:	602b      	str	r3, [r5, #0]
 8009706:	b016      	add	sp, #88	@ 0x58
 8009708:	bd70      	pop	{r4, r5, r6, pc}
 800970a:	466a      	mov	r2, sp
 800970c:	f000 f896 	bl	800983c <_fstat_r>
 8009710:	2800      	cmp	r0, #0
 8009712:	dbec      	blt.n	80096ee <__swhatbuf_r+0x12>
 8009714:	9901      	ldr	r1, [sp, #4]
 8009716:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800971a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800971e:	4259      	negs	r1, r3
 8009720:	4159      	adcs	r1, r3
 8009722:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009726:	e7eb      	b.n	8009700 <__swhatbuf_r+0x24>

08009728 <__smakebuf_r>:
 8009728:	898b      	ldrh	r3, [r1, #12]
 800972a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800972c:	079d      	lsls	r5, r3, #30
 800972e:	4606      	mov	r6, r0
 8009730:	460c      	mov	r4, r1
 8009732:	d507      	bpl.n	8009744 <__smakebuf_r+0x1c>
 8009734:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009738:	6023      	str	r3, [r4, #0]
 800973a:	6123      	str	r3, [r4, #16]
 800973c:	2301      	movs	r3, #1
 800973e:	6163      	str	r3, [r4, #20]
 8009740:	b003      	add	sp, #12
 8009742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009744:	ab01      	add	r3, sp, #4
 8009746:	466a      	mov	r2, sp
 8009748:	f7ff ffc8 	bl	80096dc <__swhatbuf_r>
 800974c:	9f00      	ldr	r7, [sp, #0]
 800974e:	4605      	mov	r5, r0
 8009750:	4639      	mov	r1, r7
 8009752:	4630      	mov	r0, r6
 8009754:	f7ff f864 	bl	8008820 <_malloc_r>
 8009758:	b948      	cbnz	r0, 800976e <__smakebuf_r+0x46>
 800975a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800975e:	059a      	lsls	r2, r3, #22
 8009760:	d4ee      	bmi.n	8009740 <__smakebuf_r+0x18>
 8009762:	f023 0303 	bic.w	r3, r3, #3
 8009766:	f043 0302 	orr.w	r3, r3, #2
 800976a:	81a3      	strh	r3, [r4, #12]
 800976c:	e7e2      	b.n	8009734 <__smakebuf_r+0xc>
 800976e:	89a3      	ldrh	r3, [r4, #12]
 8009770:	6020      	str	r0, [r4, #0]
 8009772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009776:	81a3      	strh	r3, [r4, #12]
 8009778:	9b01      	ldr	r3, [sp, #4]
 800977a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800977e:	b15b      	cbz	r3, 8009798 <__smakebuf_r+0x70>
 8009780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009784:	4630      	mov	r0, r6
 8009786:	f000 f86b 	bl	8009860 <_isatty_r>
 800978a:	b128      	cbz	r0, 8009798 <__smakebuf_r+0x70>
 800978c:	89a3      	ldrh	r3, [r4, #12]
 800978e:	f023 0303 	bic.w	r3, r3, #3
 8009792:	f043 0301 	orr.w	r3, r3, #1
 8009796:	81a3      	strh	r3, [r4, #12]
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	431d      	orrs	r5, r3
 800979c:	81a5      	strh	r5, [r4, #12]
 800979e:	e7cf      	b.n	8009740 <__smakebuf_r+0x18>

080097a0 <_putc_r>:
 80097a0:	b570      	push	{r4, r5, r6, lr}
 80097a2:	460d      	mov	r5, r1
 80097a4:	4614      	mov	r4, r2
 80097a6:	4606      	mov	r6, r0
 80097a8:	b118      	cbz	r0, 80097b2 <_putc_r+0x12>
 80097aa:	6a03      	ldr	r3, [r0, #32]
 80097ac:	b90b      	cbnz	r3, 80097b2 <_putc_r+0x12>
 80097ae:	f7fd fe7d 	bl	80074ac <__sinit>
 80097b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097b4:	07d8      	lsls	r0, r3, #31
 80097b6:	d405      	bmi.n	80097c4 <_putc_r+0x24>
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	0599      	lsls	r1, r3, #22
 80097bc:	d402      	bmi.n	80097c4 <_putc_r+0x24>
 80097be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097c0:	f7fe f92b 	bl	8007a1a <__retarget_lock_acquire_recursive>
 80097c4:	68a3      	ldr	r3, [r4, #8]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	60a3      	str	r3, [r4, #8]
 80097cc:	da05      	bge.n	80097da <_putc_r+0x3a>
 80097ce:	69a2      	ldr	r2, [r4, #24]
 80097d0:	4293      	cmp	r3, r2
 80097d2:	db12      	blt.n	80097fa <_putc_r+0x5a>
 80097d4:	b2eb      	uxtb	r3, r5
 80097d6:	2b0a      	cmp	r3, #10
 80097d8:	d00f      	beq.n	80097fa <_putc_r+0x5a>
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	1c5a      	adds	r2, r3, #1
 80097de:	6022      	str	r2, [r4, #0]
 80097e0:	701d      	strb	r5, [r3, #0]
 80097e2:	b2ed      	uxtb	r5, r5
 80097e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097e6:	07da      	lsls	r2, r3, #31
 80097e8:	d405      	bmi.n	80097f6 <_putc_r+0x56>
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	059b      	lsls	r3, r3, #22
 80097ee:	d402      	bmi.n	80097f6 <_putc_r+0x56>
 80097f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097f2:	f7fe f913 	bl	8007a1c <__retarget_lock_release_recursive>
 80097f6:	4628      	mov	r0, r5
 80097f8:	bd70      	pop	{r4, r5, r6, pc}
 80097fa:	4629      	mov	r1, r5
 80097fc:	4622      	mov	r2, r4
 80097fe:	4630      	mov	r0, r6
 8009800:	f7fd ff67 	bl	80076d2 <__swbuf_r>
 8009804:	4605      	mov	r5, r0
 8009806:	e7ed      	b.n	80097e4 <_putc_r+0x44>

08009808 <memmove>:
 8009808:	4288      	cmp	r0, r1
 800980a:	b510      	push	{r4, lr}
 800980c:	eb01 0402 	add.w	r4, r1, r2
 8009810:	d902      	bls.n	8009818 <memmove+0x10>
 8009812:	4284      	cmp	r4, r0
 8009814:	4623      	mov	r3, r4
 8009816:	d807      	bhi.n	8009828 <memmove+0x20>
 8009818:	1e43      	subs	r3, r0, #1
 800981a:	42a1      	cmp	r1, r4
 800981c:	d008      	beq.n	8009830 <memmove+0x28>
 800981e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009822:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009826:	e7f8      	b.n	800981a <memmove+0x12>
 8009828:	4402      	add	r2, r0
 800982a:	4601      	mov	r1, r0
 800982c:	428a      	cmp	r2, r1
 800982e:	d100      	bne.n	8009832 <memmove+0x2a>
 8009830:	bd10      	pop	{r4, pc}
 8009832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009836:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800983a:	e7f7      	b.n	800982c <memmove+0x24>

0800983c <_fstat_r>:
 800983c:	b538      	push	{r3, r4, r5, lr}
 800983e:	4d07      	ldr	r5, [pc, #28]	@ (800985c <_fstat_r+0x20>)
 8009840:	2300      	movs	r3, #0
 8009842:	4604      	mov	r4, r0
 8009844:	4608      	mov	r0, r1
 8009846:	4611      	mov	r1, r2
 8009848:	602b      	str	r3, [r5, #0]
 800984a:	f7f9 faa3 	bl	8002d94 <_fstat>
 800984e:	1c43      	adds	r3, r0, #1
 8009850:	d102      	bne.n	8009858 <_fstat_r+0x1c>
 8009852:	682b      	ldr	r3, [r5, #0]
 8009854:	b103      	cbz	r3, 8009858 <_fstat_r+0x1c>
 8009856:	6023      	str	r3, [r4, #0]
 8009858:	bd38      	pop	{r3, r4, r5, pc}
 800985a:	bf00      	nop
 800985c:	20000e08 	.word	0x20000e08

08009860 <_isatty_r>:
 8009860:	b538      	push	{r3, r4, r5, lr}
 8009862:	4d06      	ldr	r5, [pc, #24]	@ (800987c <_isatty_r+0x1c>)
 8009864:	2300      	movs	r3, #0
 8009866:	4604      	mov	r4, r0
 8009868:	4608      	mov	r0, r1
 800986a:	602b      	str	r3, [r5, #0]
 800986c:	f7f9 faa2 	bl	8002db4 <_isatty>
 8009870:	1c43      	adds	r3, r0, #1
 8009872:	d102      	bne.n	800987a <_isatty_r+0x1a>
 8009874:	682b      	ldr	r3, [r5, #0]
 8009876:	b103      	cbz	r3, 800987a <_isatty_r+0x1a>
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	bd38      	pop	{r3, r4, r5, pc}
 800987c:	20000e08 	.word	0x20000e08

08009880 <_sbrk_r>:
 8009880:	b538      	push	{r3, r4, r5, lr}
 8009882:	4d06      	ldr	r5, [pc, #24]	@ (800989c <_sbrk_r+0x1c>)
 8009884:	2300      	movs	r3, #0
 8009886:	4604      	mov	r4, r0
 8009888:	4608      	mov	r0, r1
 800988a:	602b      	str	r3, [r5, #0]
 800988c:	f7f9 faaa 	bl	8002de4 <_sbrk>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	d102      	bne.n	800989a <_sbrk_r+0x1a>
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	b103      	cbz	r3, 800989a <_sbrk_r+0x1a>
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	20000e08 	.word	0x20000e08

080098a0 <abort>:
 80098a0:	b508      	push	{r3, lr}
 80098a2:	2006      	movs	r0, #6
 80098a4:	f000 f88c 	bl	80099c0 <raise>
 80098a8:	2001      	movs	r0, #1
 80098aa:	f7f9 fa23 	bl	8002cf4 <_exit>

080098ae <_calloc_r>:
 80098ae:	b570      	push	{r4, r5, r6, lr}
 80098b0:	fba1 5402 	umull	r5, r4, r1, r2
 80098b4:	b934      	cbnz	r4, 80098c4 <_calloc_r+0x16>
 80098b6:	4629      	mov	r1, r5
 80098b8:	f7fe ffb2 	bl	8008820 <_malloc_r>
 80098bc:	4606      	mov	r6, r0
 80098be:	b928      	cbnz	r0, 80098cc <_calloc_r+0x1e>
 80098c0:	4630      	mov	r0, r6
 80098c2:	bd70      	pop	{r4, r5, r6, pc}
 80098c4:	220c      	movs	r2, #12
 80098c6:	6002      	str	r2, [r0, #0]
 80098c8:	2600      	movs	r6, #0
 80098ca:	e7f9      	b.n	80098c0 <_calloc_r+0x12>
 80098cc:	462a      	mov	r2, r5
 80098ce:	4621      	mov	r1, r4
 80098d0:	f7fd ff94 	bl	80077fc <memset>
 80098d4:	e7f4      	b.n	80098c0 <_calloc_r+0x12>

080098d6 <__ascii_mbtowc>:
 80098d6:	b082      	sub	sp, #8
 80098d8:	b901      	cbnz	r1, 80098dc <__ascii_mbtowc+0x6>
 80098da:	a901      	add	r1, sp, #4
 80098dc:	b142      	cbz	r2, 80098f0 <__ascii_mbtowc+0x1a>
 80098de:	b14b      	cbz	r3, 80098f4 <__ascii_mbtowc+0x1e>
 80098e0:	7813      	ldrb	r3, [r2, #0]
 80098e2:	600b      	str	r3, [r1, #0]
 80098e4:	7812      	ldrb	r2, [r2, #0]
 80098e6:	1e10      	subs	r0, r2, #0
 80098e8:	bf18      	it	ne
 80098ea:	2001      	movne	r0, #1
 80098ec:	b002      	add	sp, #8
 80098ee:	4770      	bx	lr
 80098f0:	4610      	mov	r0, r2
 80098f2:	e7fb      	b.n	80098ec <__ascii_mbtowc+0x16>
 80098f4:	f06f 0001 	mvn.w	r0, #1
 80098f8:	e7f8      	b.n	80098ec <__ascii_mbtowc+0x16>

080098fa <_realloc_r>:
 80098fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098fe:	4607      	mov	r7, r0
 8009900:	4614      	mov	r4, r2
 8009902:	460d      	mov	r5, r1
 8009904:	b921      	cbnz	r1, 8009910 <_realloc_r+0x16>
 8009906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800990a:	4611      	mov	r1, r2
 800990c:	f7fe bf88 	b.w	8008820 <_malloc_r>
 8009910:	b92a      	cbnz	r2, 800991e <_realloc_r+0x24>
 8009912:	f7fe ff11 	bl	8008738 <_free_r>
 8009916:	4625      	mov	r5, r4
 8009918:	4628      	mov	r0, r5
 800991a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800991e:	f000 f86b 	bl	80099f8 <_malloc_usable_size_r>
 8009922:	4284      	cmp	r4, r0
 8009924:	4606      	mov	r6, r0
 8009926:	d802      	bhi.n	800992e <_realloc_r+0x34>
 8009928:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800992c:	d8f4      	bhi.n	8009918 <_realloc_r+0x1e>
 800992e:	4621      	mov	r1, r4
 8009930:	4638      	mov	r0, r7
 8009932:	f7fe ff75 	bl	8008820 <_malloc_r>
 8009936:	4680      	mov	r8, r0
 8009938:	b908      	cbnz	r0, 800993e <_realloc_r+0x44>
 800993a:	4645      	mov	r5, r8
 800993c:	e7ec      	b.n	8009918 <_realloc_r+0x1e>
 800993e:	42b4      	cmp	r4, r6
 8009940:	4622      	mov	r2, r4
 8009942:	4629      	mov	r1, r5
 8009944:	bf28      	it	cs
 8009946:	4632      	movcs	r2, r6
 8009948:	f7fe f871 	bl	8007a2e <memcpy>
 800994c:	4629      	mov	r1, r5
 800994e:	4638      	mov	r0, r7
 8009950:	f7fe fef2 	bl	8008738 <_free_r>
 8009954:	e7f1      	b.n	800993a <_realloc_r+0x40>

08009956 <__ascii_wctomb>:
 8009956:	4603      	mov	r3, r0
 8009958:	4608      	mov	r0, r1
 800995a:	b141      	cbz	r1, 800996e <__ascii_wctomb+0x18>
 800995c:	2aff      	cmp	r2, #255	@ 0xff
 800995e:	d904      	bls.n	800996a <__ascii_wctomb+0x14>
 8009960:	228a      	movs	r2, #138	@ 0x8a
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	f04f 30ff 	mov.w	r0, #4294967295
 8009968:	4770      	bx	lr
 800996a:	700a      	strb	r2, [r1, #0]
 800996c:	2001      	movs	r0, #1
 800996e:	4770      	bx	lr

08009970 <_raise_r>:
 8009970:	291f      	cmp	r1, #31
 8009972:	b538      	push	{r3, r4, r5, lr}
 8009974:	4605      	mov	r5, r0
 8009976:	460c      	mov	r4, r1
 8009978:	d904      	bls.n	8009984 <_raise_r+0x14>
 800997a:	2316      	movs	r3, #22
 800997c:	6003      	str	r3, [r0, #0]
 800997e:	f04f 30ff 	mov.w	r0, #4294967295
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009986:	b112      	cbz	r2, 800998e <_raise_r+0x1e>
 8009988:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800998c:	b94b      	cbnz	r3, 80099a2 <_raise_r+0x32>
 800998e:	4628      	mov	r0, r5
 8009990:	f000 f830 	bl	80099f4 <_getpid_r>
 8009994:	4622      	mov	r2, r4
 8009996:	4601      	mov	r1, r0
 8009998:	4628      	mov	r0, r5
 800999a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800999e:	f000 b817 	b.w	80099d0 <_kill_r>
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d00a      	beq.n	80099bc <_raise_r+0x4c>
 80099a6:	1c59      	adds	r1, r3, #1
 80099a8:	d103      	bne.n	80099b2 <_raise_r+0x42>
 80099aa:	2316      	movs	r3, #22
 80099ac:	6003      	str	r3, [r0, #0]
 80099ae:	2001      	movs	r0, #1
 80099b0:	e7e7      	b.n	8009982 <_raise_r+0x12>
 80099b2:	2100      	movs	r1, #0
 80099b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80099b8:	4620      	mov	r0, r4
 80099ba:	4798      	blx	r3
 80099bc:	2000      	movs	r0, #0
 80099be:	e7e0      	b.n	8009982 <_raise_r+0x12>

080099c0 <raise>:
 80099c0:	4b02      	ldr	r3, [pc, #8]	@ (80099cc <raise+0xc>)
 80099c2:	4601      	mov	r1, r0
 80099c4:	6818      	ldr	r0, [r3, #0]
 80099c6:	f7ff bfd3 	b.w	8009970 <_raise_r>
 80099ca:	bf00      	nop
 80099cc:	20000020 	.word	0x20000020

080099d0 <_kill_r>:
 80099d0:	b538      	push	{r3, r4, r5, lr}
 80099d2:	4d07      	ldr	r5, [pc, #28]	@ (80099f0 <_kill_r+0x20>)
 80099d4:	2300      	movs	r3, #0
 80099d6:	4604      	mov	r4, r0
 80099d8:	4608      	mov	r0, r1
 80099da:	4611      	mov	r1, r2
 80099dc:	602b      	str	r3, [r5, #0]
 80099de:	f7f9 f979 	bl	8002cd4 <_kill>
 80099e2:	1c43      	adds	r3, r0, #1
 80099e4:	d102      	bne.n	80099ec <_kill_r+0x1c>
 80099e6:	682b      	ldr	r3, [r5, #0]
 80099e8:	b103      	cbz	r3, 80099ec <_kill_r+0x1c>
 80099ea:	6023      	str	r3, [r4, #0]
 80099ec:	bd38      	pop	{r3, r4, r5, pc}
 80099ee:	bf00      	nop
 80099f0:	20000e08 	.word	0x20000e08

080099f4 <_getpid_r>:
 80099f4:	f7f9 b966 	b.w	8002cc4 <_getpid>

080099f8 <_malloc_usable_size_r>:
 80099f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099fc:	1f18      	subs	r0, r3, #4
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	bfbc      	itt	lt
 8009a02:	580b      	ldrlt	r3, [r1, r0]
 8009a04:	18c0      	addlt	r0, r0, r3
 8009a06:	4770      	bx	lr

08009a08 <pow>:
 8009a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0a:	ed2d 8b02 	vpush	{d8}
 8009a0e:	eeb0 8a40 	vmov.f32	s16, s0
 8009a12:	eef0 8a60 	vmov.f32	s17, s1
 8009a16:	ec55 4b11 	vmov	r4, r5, d1
 8009a1a:	f000 f871 	bl	8009b00 <__ieee754_pow>
 8009a1e:	4622      	mov	r2, r4
 8009a20:	462b      	mov	r3, r5
 8009a22:	4620      	mov	r0, r4
 8009a24:	4629      	mov	r1, r5
 8009a26:	ec57 6b10 	vmov	r6, r7, d0
 8009a2a:	f7f7 f897 	bl	8000b5c <__aeabi_dcmpun>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d13b      	bne.n	8009aaa <pow+0xa2>
 8009a32:	ec51 0b18 	vmov	r0, r1, d8
 8009a36:	2200      	movs	r2, #0
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f7f7 f85d 	bl	8000af8 <__aeabi_dcmpeq>
 8009a3e:	b1b8      	cbz	r0, 8009a70 <pow+0x68>
 8009a40:	2200      	movs	r2, #0
 8009a42:	2300      	movs	r3, #0
 8009a44:	4620      	mov	r0, r4
 8009a46:	4629      	mov	r1, r5
 8009a48:	f7f7 f856 	bl	8000af8 <__aeabi_dcmpeq>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	d146      	bne.n	8009ade <pow+0xd6>
 8009a50:	ec45 4b10 	vmov	d0, r4, r5
 8009a54:	f000 f848 	bl	8009ae8 <finite>
 8009a58:	b338      	cbz	r0, 8009aaa <pow+0xa2>
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4620      	mov	r0, r4
 8009a60:	4629      	mov	r1, r5
 8009a62:	f7f7 f853 	bl	8000b0c <__aeabi_dcmplt>
 8009a66:	b300      	cbz	r0, 8009aaa <pow+0xa2>
 8009a68:	f7fd ffac 	bl	80079c4 <__errno>
 8009a6c:	2322      	movs	r3, #34	@ 0x22
 8009a6e:	e01b      	b.n	8009aa8 <pow+0xa0>
 8009a70:	ec47 6b10 	vmov	d0, r6, r7
 8009a74:	f000 f838 	bl	8009ae8 <finite>
 8009a78:	b9e0      	cbnz	r0, 8009ab4 <pow+0xac>
 8009a7a:	eeb0 0a48 	vmov.f32	s0, s16
 8009a7e:	eef0 0a68 	vmov.f32	s1, s17
 8009a82:	f000 f831 	bl	8009ae8 <finite>
 8009a86:	b1a8      	cbz	r0, 8009ab4 <pow+0xac>
 8009a88:	ec45 4b10 	vmov	d0, r4, r5
 8009a8c:	f000 f82c 	bl	8009ae8 <finite>
 8009a90:	b180      	cbz	r0, 8009ab4 <pow+0xac>
 8009a92:	4632      	mov	r2, r6
 8009a94:	463b      	mov	r3, r7
 8009a96:	4630      	mov	r0, r6
 8009a98:	4639      	mov	r1, r7
 8009a9a:	f7f7 f85f 	bl	8000b5c <__aeabi_dcmpun>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d0e2      	beq.n	8009a68 <pow+0x60>
 8009aa2:	f7fd ff8f 	bl	80079c4 <__errno>
 8009aa6:	2321      	movs	r3, #33	@ 0x21
 8009aa8:	6003      	str	r3, [r0, #0]
 8009aaa:	ecbd 8b02 	vpop	{d8}
 8009aae:	ec47 6b10 	vmov	d0, r6, r7
 8009ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	4630      	mov	r0, r6
 8009aba:	4639      	mov	r1, r7
 8009abc:	f7f7 f81c 	bl	8000af8 <__aeabi_dcmpeq>
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	d0f2      	beq.n	8009aaa <pow+0xa2>
 8009ac4:	eeb0 0a48 	vmov.f32	s0, s16
 8009ac8:	eef0 0a68 	vmov.f32	s1, s17
 8009acc:	f000 f80c 	bl	8009ae8 <finite>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d0ea      	beq.n	8009aaa <pow+0xa2>
 8009ad4:	ec45 4b10 	vmov	d0, r4, r5
 8009ad8:	f000 f806 	bl	8009ae8 <finite>
 8009adc:	e7c3      	b.n	8009a66 <pow+0x5e>
 8009ade:	4f01      	ldr	r7, [pc, #4]	@ (8009ae4 <pow+0xdc>)
 8009ae0:	2600      	movs	r6, #0
 8009ae2:	e7e2      	b.n	8009aaa <pow+0xa2>
 8009ae4:	3ff00000 	.word	0x3ff00000

08009ae8 <finite>:
 8009ae8:	b082      	sub	sp, #8
 8009aea:	ed8d 0b00 	vstr	d0, [sp]
 8009aee:	9801      	ldr	r0, [sp, #4]
 8009af0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009af4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009af8:	0fc0      	lsrs	r0, r0, #31
 8009afa:	b002      	add	sp, #8
 8009afc:	4770      	bx	lr
	...

08009b00 <__ieee754_pow>:
 8009b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	b091      	sub	sp, #68	@ 0x44
 8009b06:	ed8d 1b00 	vstr	d1, [sp]
 8009b0a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8009b0e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009b12:	ea5a 0001 	orrs.w	r0, sl, r1
 8009b16:	ec57 6b10 	vmov	r6, r7, d0
 8009b1a:	d113      	bne.n	8009b44 <__ieee754_pow+0x44>
 8009b1c:	19b3      	adds	r3, r6, r6
 8009b1e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009b22:	4152      	adcs	r2, r2
 8009b24:	4298      	cmp	r0, r3
 8009b26:	4b9a      	ldr	r3, [pc, #616]	@ (8009d90 <__ieee754_pow+0x290>)
 8009b28:	4193      	sbcs	r3, r2
 8009b2a:	f080 84ee 	bcs.w	800a50a <__ieee754_pow+0xa0a>
 8009b2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b32:	4630      	mov	r0, r6
 8009b34:	4639      	mov	r1, r7
 8009b36:	f7f6 fbc1 	bl	80002bc <__adddf3>
 8009b3a:	ec41 0b10 	vmov	d0, r0, r1
 8009b3e:	b011      	add	sp, #68	@ 0x44
 8009b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b44:	4a93      	ldr	r2, [pc, #588]	@ (8009d94 <__ieee754_pow+0x294>)
 8009b46:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8009b4a:	4295      	cmp	r5, r2
 8009b4c:	46b8      	mov	r8, r7
 8009b4e:	4633      	mov	r3, r6
 8009b50:	d80a      	bhi.n	8009b68 <__ieee754_pow+0x68>
 8009b52:	d104      	bne.n	8009b5e <__ieee754_pow+0x5e>
 8009b54:	2e00      	cmp	r6, #0
 8009b56:	d1ea      	bne.n	8009b2e <__ieee754_pow+0x2e>
 8009b58:	45aa      	cmp	sl, r5
 8009b5a:	d8e8      	bhi.n	8009b2e <__ieee754_pow+0x2e>
 8009b5c:	e001      	b.n	8009b62 <__ieee754_pow+0x62>
 8009b5e:	4592      	cmp	sl, r2
 8009b60:	d802      	bhi.n	8009b68 <__ieee754_pow+0x68>
 8009b62:	4592      	cmp	sl, r2
 8009b64:	d10f      	bne.n	8009b86 <__ieee754_pow+0x86>
 8009b66:	b171      	cbz	r1, 8009b86 <__ieee754_pow+0x86>
 8009b68:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8009b6c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009b70:	ea58 0803 	orrs.w	r8, r8, r3
 8009b74:	d1db      	bne.n	8009b2e <__ieee754_pow+0x2e>
 8009b76:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b7a:	18db      	adds	r3, r3, r3
 8009b7c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009b80:	4152      	adcs	r2, r2
 8009b82:	4598      	cmp	r8, r3
 8009b84:	e7cf      	b.n	8009b26 <__ieee754_pow+0x26>
 8009b86:	f1b8 0f00 	cmp.w	r8, #0
 8009b8a:	46ab      	mov	fp, r5
 8009b8c:	da43      	bge.n	8009c16 <__ieee754_pow+0x116>
 8009b8e:	4a82      	ldr	r2, [pc, #520]	@ (8009d98 <__ieee754_pow+0x298>)
 8009b90:	4592      	cmp	sl, r2
 8009b92:	d856      	bhi.n	8009c42 <__ieee754_pow+0x142>
 8009b94:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009b98:	4592      	cmp	sl, r2
 8009b9a:	f240 84c5 	bls.w	800a528 <__ieee754_pow+0xa28>
 8009b9e:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009ba2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009ba6:	2a14      	cmp	r2, #20
 8009ba8:	dd18      	ble.n	8009bdc <__ieee754_pow+0xdc>
 8009baa:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009bae:	fa21 f402 	lsr.w	r4, r1, r2
 8009bb2:	fa04 f202 	lsl.w	r2, r4, r2
 8009bb6:	428a      	cmp	r2, r1
 8009bb8:	f040 84b6 	bne.w	800a528 <__ieee754_pow+0xa28>
 8009bbc:	f004 0401 	and.w	r4, r4, #1
 8009bc0:	f1c4 0402 	rsb	r4, r4, #2
 8009bc4:	2900      	cmp	r1, #0
 8009bc6:	d159      	bne.n	8009c7c <__ieee754_pow+0x17c>
 8009bc8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8009bcc:	d148      	bne.n	8009c60 <__ieee754_pow+0x160>
 8009bce:	4632      	mov	r2, r6
 8009bd0:	463b      	mov	r3, r7
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	4639      	mov	r1, r7
 8009bd6:	f7f6 fd27 	bl	8000628 <__aeabi_dmul>
 8009bda:	e7ae      	b.n	8009b3a <__ieee754_pow+0x3a>
 8009bdc:	2900      	cmp	r1, #0
 8009bde:	d14c      	bne.n	8009c7a <__ieee754_pow+0x17a>
 8009be0:	f1c2 0214 	rsb	r2, r2, #20
 8009be4:	fa4a f402 	asr.w	r4, sl, r2
 8009be8:	fa04 f202 	lsl.w	r2, r4, r2
 8009bec:	4552      	cmp	r2, sl
 8009bee:	f040 8498 	bne.w	800a522 <__ieee754_pow+0xa22>
 8009bf2:	f004 0401 	and.w	r4, r4, #1
 8009bf6:	f1c4 0402 	rsb	r4, r4, #2
 8009bfa:	4a68      	ldr	r2, [pc, #416]	@ (8009d9c <__ieee754_pow+0x29c>)
 8009bfc:	4592      	cmp	sl, r2
 8009bfe:	d1e3      	bne.n	8009bc8 <__ieee754_pow+0xc8>
 8009c00:	f1b9 0f00 	cmp.w	r9, #0
 8009c04:	f280 8489 	bge.w	800a51a <__ieee754_pow+0xa1a>
 8009c08:	4964      	ldr	r1, [pc, #400]	@ (8009d9c <__ieee754_pow+0x29c>)
 8009c0a:	4632      	mov	r2, r6
 8009c0c:	463b      	mov	r3, r7
 8009c0e:	2000      	movs	r0, #0
 8009c10:	f7f6 fe34 	bl	800087c <__aeabi_ddiv>
 8009c14:	e791      	b.n	8009b3a <__ieee754_pow+0x3a>
 8009c16:	2400      	movs	r4, #0
 8009c18:	bb81      	cbnz	r1, 8009c7c <__ieee754_pow+0x17c>
 8009c1a:	4a5e      	ldr	r2, [pc, #376]	@ (8009d94 <__ieee754_pow+0x294>)
 8009c1c:	4592      	cmp	sl, r2
 8009c1e:	d1ec      	bne.n	8009bfa <__ieee754_pow+0xfa>
 8009c20:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8009c24:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009c28:	431a      	orrs	r2, r3
 8009c2a:	f000 846e 	beq.w	800a50a <__ieee754_pow+0xa0a>
 8009c2e:	4b5c      	ldr	r3, [pc, #368]	@ (8009da0 <__ieee754_pow+0x2a0>)
 8009c30:	429d      	cmp	r5, r3
 8009c32:	d908      	bls.n	8009c46 <__ieee754_pow+0x146>
 8009c34:	f1b9 0f00 	cmp.w	r9, #0
 8009c38:	f280 846b 	bge.w	800a512 <__ieee754_pow+0xa12>
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	2100      	movs	r1, #0
 8009c40:	e77b      	b.n	8009b3a <__ieee754_pow+0x3a>
 8009c42:	2402      	movs	r4, #2
 8009c44:	e7e8      	b.n	8009c18 <__ieee754_pow+0x118>
 8009c46:	f1b9 0f00 	cmp.w	r9, #0
 8009c4a:	f04f 0000 	mov.w	r0, #0
 8009c4e:	f04f 0100 	mov.w	r1, #0
 8009c52:	f6bf af72 	bge.w	8009b3a <__ieee754_pow+0x3a>
 8009c56:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009c5a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009c5e:	e76c      	b.n	8009b3a <__ieee754_pow+0x3a>
 8009c60:	4a50      	ldr	r2, [pc, #320]	@ (8009da4 <__ieee754_pow+0x2a4>)
 8009c62:	4591      	cmp	r9, r2
 8009c64:	d10a      	bne.n	8009c7c <__ieee754_pow+0x17c>
 8009c66:	f1b8 0f00 	cmp.w	r8, #0
 8009c6a:	db07      	blt.n	8009c7c <__ieee754_pow+0x17c>
 8009c6c:	ec47 6b10 	vmov	d0, r6, r7
 8009c70:	b011      	add	sp, #68	@ 0x44
 8009c72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c76:	f000 bd4f 	b.w	800a718 <__ieee754_sqrt>
 8009c7a:	2400      	movs	r4, #0
 8009c7c:	ec47 6b10 	vmov	d0, r6, r7
 8009c80:	9302      	str	r3, [sp, #8]
 8009c82:	f000 fc87 	bl	800a594 <fabs>
 8009c86:	9b02      	ldr	r3, [sp, #8]
 8009c88:	ec51 0b10 	vmov	r0, r1, d0
 8009c8c:	bb43      	cbnz	r3, 8009ce0 <__ieee754_pow+0x1e0>
 8009c8e:	4b43      	ldr	r3, [pc, #268]	@ (8009d9c <__ieee754_pow+0x29c>)
 8009c90:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d000      	beq.n	8009c9a <__ieee754_pow+0x19a>
 8009c98:	bb15      	cbnz	r5, 8009ce0 <__ieee754_pow+0x1e0>
 8009c9a:	f1b9 0f00 	cmp.w	r9, #0
 8009c9e:	da05      	bge.n	8009cac <__ieee754_pow+0x1ac>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	493d      	ldr	r1, [pc, #244]	@ (8009d9c <__ieee754_pow+0x29c>)
 8009ca8:	f7f6 fde8 	bl	800087c <__aeabi_ddiv>
 8009cac:	f1b8 0f00 	cmp.w	r8, #0
 8009cb0:	f6bf af43 	bge.w	8009b3a <__ieee754_pow+0x3a>
 8009cb4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009cb8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009cbc:	4325      	orrs	r5, r4
 8009cbe:	d108      	bne.n	8009cd2 <__ieee754_pow+0x1d2>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	f7f6 faf6 	bl	80002b8 <__aeabi_dsub>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	e79e      	b.n	8009c10 <__ieee754_pow+0x110>
 8009cd2:	2c01      	cmp	r4, #1
 8009cd4:	f47f af31 	bne.w	8009b3a <__ieee754_pow+0x3a>
 8009cd8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009cdc:	4619      	mov	r1, r3
 8009cde:	e72c      	b.n	8009b3a <__ieee754_pow+0x3a>
 8009ce0:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	ea53 0204 	orrs.w	r2, r3, r4
 8009cea:	d102      	bne.n	8009cf2 <__ieee754_pow+0x1f2>
 8009cec:	4632      	mov	r2, r6
 8009cee:	463b      	mov	r3, r7
 8009cf0:	e7e8      	b.n	8009cc4 <__ieee754_pow+0x1c4>
 8009cf2:	3c01      	subs	r4, #1
 8009cf4:	431c      	orrs	r4, r3
 8009cf6:	d016      	beq.n	8009d26 <__ieee754_pow+0x226>
 8009cf8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009d80 <__ieee754_pow+0x280>
 8009cfc:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009d00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d04:	f240 8110 	bls.w	8009f28 <__ieee754_pow+0x428>
 8009d08:	4b27      	ldr	r3, [pc, #156]	@ (8009da8 <__ieee754_pow+0x2a8>)
 8009d0a:	459a      	cmp	sl, r3
 8009d0c:	4b24      	ldr	r3, [pc, #144]	@ (8009da0 <__ieee754_pow+0x2a0>)
 8009d0e:	d916      	bls.n	8009d3e <__ieee754_pow+0x23e>
 8009d10:	429d      	cmp	r5, r3
 8009d12:	d80b      	bhi.n	8009d2c <__ieee754_pow+0x22c>
 8009d14:	f1b9 0f00 	cmp.w	r9, #0
 8009d18:	da0b      	bge.n	8009d32 <__ieee754_pow+0x232>
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	b011      	add	sp, #68	@ 0x44
 8009d1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d22:	f000 bcf1 	b.w	800a708 <__math_oflow>
 8009d26:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8009d88 <__ieee754_pow+0x288>
 8009d2a:	e7e7      	b.n	8009cfc <__ieee754_pow+0x1fc>
 8009d2c:	f1b9 0f00 	cmp.w	r9, #0
 8009d30:	dcf3      	bgt.n	8009d1a <__ieee754_pow+0x21a>
 8009d32:	2000      	movs	r0, #0
 8009d34:	b011      	add	sp, #68	@ 0x44
 8009d36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3a:	f000 bcdd 	b.w	800a6f8 <__math_uflow>
 8009d3e:	429d      	cmp	r5, r3
 8009d40:	d20c      	bcs.n	8009d5c <__ieee754_pow+0x25c>
 8009d42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d46:	2200      	movs	r2, #0
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f7f6 fedf 	bl	8000b0c <__aeabi_dcmplt>
 8009d4e:	3800      	subs	r0, #0
 8009d50:	bf18      	it	ne
 8009d52:	2001      	movne	r0, #1
 8009d54:	f1b9 0f00 	cmp.w	r9, #0
 8009d58:	daec      	bge.n	8009d34 <__ieee754_pow+0x234>
 8009d5a:	e7df      	b.n	8009d1c <__ieee754_pow+0x21c>
 8009d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8009d9c <__ieee754_pow+0x29c>)
 8009d5e:	429d      	cmp	r5, r3
 8009d60:	f04f 0200 	mov.w	r2, #0
 8009d64:	d922      	bls.n	8009dac <__ieee754_pow+0x2ac>
 8009d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f7f6 fece 	bl	8000b0c <__aeabi_dcmplt>
 8009d70:	3800      	subs	r0, #0
 8009d72:	bf18      	it	ne
 8009d74:	2001      	movne	r0, #1
 8009d76:	f1b9 0f00 	cmp.w	r9, #0
 8009d7a:	dccf      	bgt.n	8009d1c <__ieee754_pow+0x21c>
 8009d7c:	e7da      	b.n	8009d34 <__ieee754_pow+0x234>
 8009d7e:	bf00      	nop
 8009d80:	00000000 	.word	0x00000000
 8009d84:	3ff00000 	.word	0x3ff00000
 8009d88:	00000000 	.word	0x00000000
 8009d8c:	bff00000 	.word	0xbff00000
 8009d90:	fff00000 	.word	0xfff00000
 8009d94:	7ff00000 	.word	0x7ff00000
 8009d98:	433fffff 	.word	0x433fffff
 8009d9c:	3ff00000 	.word	0x3ff00000
 8009da0:	3fefffff 	.word	0x3fefffff
 8009da4:	3fe00000 	.word	0x3fe00000
 8009da8:	43f00000 	.word	0x43f00000
 8009dac:	4b5a      	ldr	r3, [pc, #360]	@ (8009f18 <__ieee754_pow+0x418>)
 8009dae:	f7f6 fa83 	bl	80002b8 <__aeabi_dsub>
 8009db2:	a351      	add	r3, pc, #324	@ (adr r3, 8009ef8 <__ieee754_pow+0x3f8>)
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	4604      	mov	r4, r0
 8009dba:	460d      	mov	r5, r1
 8009dbc:	f7f6 fc34 	bl	8000628 <__aeabi_dmul>
 8009dc0:	a34f      	add	r3, pc, #316	@ (adr r3, 8009f00 <__ieee754_pow+0x400>)
 8009dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc6:	4606      	mov	r6, r0
 8009dc8:	460f      	mov	r7, r1
 8009dca:	4620      	mov	r0, r4
 8009dcc:	4629      	mov	r1, r5
 8009dce:	f7f6 fc2b 	bl	8000628 <__aeabi_dmul>
 8009dd2:	4b52      	ldr	r3, [pc, #328]	@ (8009f1c <__ieee754_pow+0x41c>)
 8009dd4:	4682      	mov	sl, r0
 8009dd6:	468b      	mov	fp, r1
 8009dd8:	2200      	movs	r2, #0
 8009dda:	4620      	mov	r0, r4
 8009ddc:	4629      	mov	r1, r5
 8009dde:	f7f6 fc23 	bl	8000628 <__aeabi_dmul>
 8009de2:	4602      	mov	r2, r0
 8009de4:	460b      	mov	r3, r1
 8009de6:	a148      	add	r1, pc, #288	@ (adr r1, 8009f08 <__ieee754_pow+0x408>)
 8009de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dec:	f7f6 fa64 	bl	80002b8 <__aeabi_dsub>
 8009df0:	4622      	mov	r2, r4
 8009df2:	462b      	mov	r3, r5
 8009df4:	f7f6 fc18 	bl	8000628 <__aeabi_dmul>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	4948      	ldr	r1, [pc, #288]	@ (8009f20 <__ieee754_pow+0x420>)
 8009e00:	f7f6 fa5a 	bl	80002b8 <__aeabi_dsub>
 8009e04:	4622      	mov	r2, r4
 8009e06:	4680      	mov	r8, r0
 8009e08:	4689      	mov	r9, r1
 8009e0a:	462b      	mov	r3, r5
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	4629      	mov	r1, r5
 8009e10:	f7f6 fc0a 	bl	8000628 <__aeabi_dmul>
 8009e14:	4602      	mov	r2, r0
 8009e16:	460b      	mov	r3, r1
 8009e18:	4640      	mov	r0, r8
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	f7f6 fc04 	bl	8000628 <__aeabi_dmul>
 8009e20:	a33b      	add	r3, pc, #236	@ (adr r3, 8009f10 <__ieee754_pow+0x410>)
 8009e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e26:	f7f6 fbff 	bl	8000628 <__aeabi_dmul>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	4650      	mov	r0, sl
 8009e30:	4659      	mov	r1, fp
 8009e32:	f7f6 fa41 	bl	80002b8 <__aeabi_dsub>
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4680      	mov	r8, r0
 8009e3c:	4689      	mov	r9, r1
 8009e3e:	4630      	mov	r0, r6
 8009e40:	4639      	mov	r1, r7
 8009e42:	f7f6 fa3b 	bl	80002bc <__adddf3>
 8009e46:	2400      	movs	r4, #0
 8009e48:	4632      	mov	r2, r6
 8009e4a:	463b      	mov	r3, r7
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	460d      	mov	r5, r1
 8009e50:	f7f6 fa32 	bl	80002b8 <__aeabi_dsub>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4640      	mov	r0, r8
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	f7f6 fa2c 	bl	80002b8 <__aeabi_dsub>
 8009e60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e64:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e68:	2300      	movs	r3, #0
 8009e6a:	9304      	str	r3, [sp, #16]
 8009e6c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009e70:	4606      	mov	r6, r0
 8009e72:	460f      	mov	r7, r1
 8009e74:	465b      	mov	r3, fp
 8009e76:	4652      	mov	r2, sl
 8009e78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e7c:	f7f6 fa1c 	bl	80002b8 <__aeabi_dsub>
 8009e80:	4622      	mov	r2, r4
 8009e82:	462b      	mov	r3, r5
 8009e84:	f7f6 fbd0 	bl	8000628 <__aeabi_dmul>
 8009e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e8c:	4680      	mov	r8, r0
 8009e8e:	4689      	mov	r9, r1
 8009e90:	4630      	mov	r0, r6
 8009e92:	4639      	mov	r1, r7
 8009e94:	f7f6 fbc8 	bl	8000628 <__aeabi_dmul>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	4640      	mov	r0, r8
 8009e9e:	4649      	mov	r1, r9
 8009ea0:	f7f6 fa0c 	bl	80002bc <__adddf3>
 8009ea4:	465b      	mov	r3, fp
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	460f      	mov	r7, r1
 8009eaa:	4652      	mov	r2, sl
 8009eac:	4620      	mov	r0, r4
 8009eae:	4629      	mov	r1, r5
 8009eb0:	f7f6 fbba 	bl	8000628 <__aeabi_dmul>
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	4680      	mov	r8, r0
 8009eba:	4689      	mov	r9, r1
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	4639      	mov	r1, r7
 8009ec0:	f7f6 f9fc 	bl	80002bc <__adddf3>
 8009ec4:	4b17      	ldr	r3, [pc, #92]	@ (8009f24 <__ieee754_pow+0x424>)
 8009ec6:	4299      	cmp	r1, r3
 8009ec8:	4604      	mov	r4, r0
 8009eca:	460d      	mov	r5, r1
 8009ecc:	468b      	mov	fp, r1
 8009ece:	f340 820b 	ble.w	800a2e8 <__ieee754_pow+0x7e8>
 8009ed2:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009ed6:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009eda:	4303      	orrs	r3, r0
 8009edc:	f000 81ea 	beq.w	800a2b4 <__ieee754_pow+0x7b4>
 8009ee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	f7f6 fe10 	bl	8000b0c <__aeabi_dcmplt>
 8009eec:	3800      	subs	r0, #0
 8009eee:	bf18      	it	ne
 8009ef0:	2001      	movne	r0, #1
 8009ef2:	e713      	b.n	8009d1c <__ieee754_pow+0x21c>
 8009ef4:	f3af 8000 	nop.w
 8009ef8:	60000000 	.word	0x60000000
 8009efc:	3ff71547 	.word	0x3ff71547
 8009f00:	f85ddf44 	.word	0xf85ddf44
 8009f04:	3e54ae0b 	.word	0x3e54ae0b
 8009f08:	55555555 	.word	0x55555555
 8009f0c:	3fd55555 	.word	0x3fd55555
 8009f10:	652b82fe 	.word	0x652b82fe
 8009f14:	3ff71547 	.word	0x3ff71547
 8009f18:	3ff00000 	.word	0x3ff00000
 8009f1c:	3fd00000 	.word	0x3fd00000
 8009f20:	3fe00000 	.word	0x3fe00000
 8009f24:	408fffff 	.word	0x408fffff
 8009f28:	4bd5      	ldr	r3, [pc, #852]	@ (800a280 <__ieee754_pow+0x780>)
 8009f2a:	ea08 0303 	and.w	r3, r8, r3
 8009f2e:	2200      	movs	r2, #0
 8009f30:	b92b      	cbnz	r3, 8009f3e <__ieee754_pow+0x43e>
 8009f32:	4bd4      	ldr	r3, [pc, #848]	@ (800a284 <__ieee754_pow+0x784>)
 8009f34:	f7f6 fb78 	bl	8000628 <__aeabi_dmul>
 8009f38:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8009f3c:	468b      	mov	fp, r1
 8009f3e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009f42:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009f46:	4413      	add	r3, r2
 8009f48:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f4a:	4bcf      	ldr	r3, [pc, #828]	@ (800a288 <__ieee754_pow+0x788>)
 8009f4c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8009f50:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8009f54:	459b      	cmp	fp, r3
 8009f56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009f5a:	dd08      	ble.n	8009f6e <__ieee754_pow+0x46e>
 8009f5c:	4bcb      	ldr	r3, [pc, #812]	@ (800a28c <__ieee754_pow+0x78c>)
 8009f5e:	459b      	cmp	fp, r3
 8009f60:	f340 81a5 	ble.w	800a2ae <__ieee754_pow+0x7ae>
 8009f64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f66:	3301      	adds	r3, #1
 8009f68:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f6a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009f6e:	f04f 0a00 	mov.w	sl, #0
 8009f72:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009f76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f78:	4bc5      	ldr	r3, [pc, #788]	@ (800a290 <__ieee754_pow+0x790>)
 8009f7a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f7e:	ed93 7b00 	vldr	d7, [r3]
 8009f82:	4629      	mov	r1, r5
 8009f84:	ec53 2b17 	vmov	r2, r3, d7
 8009f88:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f8c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f90:	f7f6 f992 	bl	80002b8 <__aeabi_dsub>
 8009f94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f98:	4606      	mov	r6, r0
 8009f9a:	460f      	mov	r7, r1
 8009f9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fa0:	f7f6 f98c 	bl	80002bc <__adddf3>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	2000      	movs	r0, #0
 8009faa:	49ba      	ldr	r1, [pc, #744]	@ (800a294 <__ieee754_pow+0x794>)
 8009fac:	f7f6 fc66 	bl	800087c <__aeabi_ddiv>
 8009fb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4630      	mov	r0, r6
 8009fba:	4639      	mov	r1, r7
 8009fbc:	f7f6 fb34 	bl	8000628 <__aeabi_dmul>
 8009fc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fc4:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009fc8:	106d      	asrs	r5, r5, #1
 8009fca:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009fce:	f04f 0b00 	mov.w	fp, #0
 8009fd2:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009fd6:	4661      	mov	r1, ip
 8009fd8:	2200      	movs	r2, #0
 8009fda:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009fde:	4658      	mov	r0, fp
 8009fe0:	46e1      	mov	r9, ip
 8009fe2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009fe6:	4614      	mov	r4, r2
 8009fe8:	461d      	mov	r5, r3
 8009fea:	f7f6 fb1d 	bl	8000628 <__aeabi_dmul>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	4639      	mov	r1, r7
 8009ff6:	f7f6 f95f 	bl	80002b8 <__aeabi_dsub>
 8009ffa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ffe:	4606      	mov	r6, r0
 800a000:	460f      	mov	r7, r1
 800a002:	4620      	mov	r0, r4
 800a004:	4629      	mov	r1, r5
 800a006:	f7f6 f957 	bl	80002b8 <__aeabi_dsub>
 800a00a:	4602      	mov	r2, r0
 800a00c:	460b      	mov	r3, r1
 800a00e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a012:	f7f6 f951 	bl	80002b8 <__aeabi_dsub>
 800a016:	465a      	mov	r2, fp
 800a018:	464b      	mov	r3, r9
 800a01a:	f7f6 fb05 	bl	8000628 <__aeabi_dmul>
 800a01e:	4602      	mov	r2, r0
 800a020:	460b      	mov	r3, r1
 800a022:	4630      	mov	r0, r6
 800a024:	4639      	mov	r1, r7
 800a026:	f7f6 f947 	bl	80002b8 <__aeabi_dsub>
 800a02a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a02e:	f7f6 fafb 	bl	8000628 <__aeabi_dmul>
 800a032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a036:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a03a:	4610      	mov	r0, r2
 800a03c:	4619      	mov	r1, r3
 800a03e:	f7f6 faf3 	bl	8000628 <__aeabi_dmul>
 800a042:	a37d      	add	r3, pc, #500	@ (adr r3, 800a238 <__ieee754_pow+0x738>)
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	4604      	mov	r4, r0
 800a04a:	460d      	mov	r5, r1
 800a04c:	f7f6 faec 	bl	8000628 <__aeabi_dmul>
 800a050:	a37b      	add	r3, pc, #492	@ (adr r3, 800a240 <__ieee754_pow+0x740>)
 800a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a056:	f7f6 f931 	bl	80002bc <__adddf3>
 800a05a:	4622      	mov	r2, r4
 800a05c:	462b      	mov	r3, r5
 800a05e:	f7f6 fae3 	bl	8000628 <__aeabi_dmul>
 800a062:	a379      	add	r3, pc, #484	@ (adr r3, 800a248 <__ieee754_pow+0x748>)
 800a064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a068:	f7f6 f928 	bl	80002bc <__adddf3>
 800a06c:	4622      	mov	r2, r4
 800a06e:	462b      	mov	r3, r5
 800a070:	f7f6 fada 	bl	8000628 <__aeabi_dmul>
 800a074:	a376      	add	r3, pc, #472	@ (adr r3, 800a250 <__ieee754_pow+0x750>)
 800a076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07a:	f7f6 f91f 	bl	80002bc <__adddf3>
 800a07e:	4622      	mov	r2, r4
 800a080:	462b      	mov	r3, r5
 800a082:	f7f6 fad1 	bl	8000628 <__aeabi_dmul>
 800a086:	a374      	add	r3, pc, #464	@ (adr r3, 800a258 <__ieee754_pow+0x758>)
 800a088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08c:	f7f6 f916 	bl	80002bc <__adddf3>
 800a090:	4622      	mov	r2, r4
 800a092:	462b      	mov	r3, r5
 800a094:	f7f6 fac8 	bl	8000628 <__aeabi_dmul>
 800a098:	a371      	add	r3, pc, #452	@ (adr r3, 800a260 <__ieee754_pow+0x760>)
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	f7f6 f90d 	bl	80002bc <__adddf3>
 800a0a2:	4622      	mov	r2, r4
 800a0a4:	4606      	mov	r6, r0
 800a0a6:	460f      	mov	r7, r1
 800a0a8:	462b      	mov	r3, r5
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	f7f6 fabb 	bl	8000628 <__aeabi_dmul>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	4639      	mov	r1, r7
 800a0ba:	f7f6 fab5 	bl	8000628 <__aeabi_dmul>
 800a0be:	465a      	mov	r2, fp
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	460d      	mov	r5, r1
 800a0c4:	464b      	mov	r3, r9
 800a0c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0ca:	f7f6 f8f7 	bl	80002bc <__adddf3>
 800a0ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0d2:	f7f6 faa9 	bl	8000628 <__aeabi_dmul>
 800a0d6:	4622      	mov	r2, r4
 800a0d8:	462b      	mov	r3, r5
 800a0da:	f7f6 f8ef 	bl	80002bc <__adddf3>
 800a0de:	465a      	mov	r2, fp
 800a0e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a0e4:	464b      	mov	r3, r9
 800a0e6:	4658      	mov	r0, fp
 800a0e8:	4649      	mov	r1, r9
 800a0ea:	f7f6 fa9d 	bl	8000628 <__aeabi_dmul>
 800a0ee:	4b6a      	ldr	r3, [pc, #424]	@ (800a298 <__ieee754_pow+0x798>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	460f      	mov	r7, r1
 800a0f6:	f7f6 f8e1 	bl	80002bc <__adddf3>
 800a0fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a0fe:	f7f6 f8dd 	bl	80002bc <__adddf3>
 800a102:	46d8      	mov	r8, fp
 800a104:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a108:	460d      	mov	r5, r1
 800a10a:	465a      	mov	r2, fp
 800a10c:	460b      	mov	r3, r1
 800a10e:	4640      	mov	r0, r8
 800a110:	4649      	mov	r1, r9
 800a112:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a116:	f7f6 fa87 	bl	8000628 <__aeabi_dmul>
 800a11a:	465c      	mov	r4, fp
 800a11c:	4680      	mov	r8, r0
 800a11e:	4689      	mov	r9, r1
 800a120:	4b5d      	ldr	r3, [pc, #372]	@ (800a298 <__ieee754_pow+0x798>)
 800a122:	2200      	movs	r2, #0
 800a124:	4620      	mov	r0, r4
 800a126:	4629      	mov	r1, r5
 800a128:	f7f6 f8c6 	bl	80002b8 <__aeabi_dsub>
 800a12c:	4632      	mov	r2, r6
 800a12e:	463b      	mov	r3, r7
 800a130:	f7f6 f8c2 	bl	80002b8 <__aeabi_dsub>
 800a134:	4602      	mov	r2, r0
 800a136:	460b      	mov	r3, r1
 800a138:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a13c:	f7f6 f8bc 	bl	80002b8 <__aeabi_dsub>
 800a140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a144:	f7f6 fa70 	bl	8000628 <__aeabi_dmul>
 800a148:	4622      	mov	r2, r4
 800a14a:	4606      	mov	r6, r0
 800a14c:	460f      	mov	r7, r1
 800a14e:	462b      	mov	r3, r5
 800a150:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a154:	f7f6 fa68 	bl	8000628 <__aeabi_dmul>
 800a158:	4602      	mov	r2, r0
 800a15a:	460b      	mov	r3, r1
 800a15c:	4630      	mov	r0, r6
 800a15e:	4639      	mov	r1, r7
 800a160:	f7f6 f8ac 	bl	80002bc <__adddf3>
 800a164:	4606      	mov	r6, r0
 800a166:	460f      	mov	r7, r1
 800a168:	4602      	mov	r2, r0
 800a16a:	460b      	mov	r3, r1
 800a16c:	4640      	mov	r0, r8
 800a16e:	4649      	mov	r1, r9
 800a170:	f7f6 f8a4 	bl	80002bc <__adddf3>
 800a174:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a178:	a33b      	add	r3, pc, #236	@ (adr r3, 800a268 <__ieee754_pow+0x768>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	4658      	mov	r0, fp
 800a180:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a184:	460d      	mov	r5, r1
 800a186:	f7f6 fa4f 	bl	8000628 <__aeabi_dmul>
 800a18a:	465c      	mov	r4, fp
 800a18c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a190:	4642      	mov	r2, r8
 800a192:	464b      	mov	r3, r9
 800a194:	4620      	mov	r0, r4
 800a196:	4629      	mov	r1, r5
 800a198:	f7f6 f88e 	bl	80002b8 <__aeabi_dsub>
 800a19c:	4602      	mov	r2, r0
 800a19e:	460b      	mov	r3, r1
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	4639      	mov	r1, r7
 800a1a4:	f7f6 f888 	bl	80002b8 <__aeabi_dsub>
 800a1a8:	a331      	add	r3, pc, #196	@ (adr r3, 800a270 <__ieee754_pow+0x770>)
 800a1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ae:	f7f6 fa3b 	bl	8000628 <__aeabi_dmul>
 800a1b2:	a331      	add	r3, pc, #196	@ (adr r3, 800a278 <__ieee754_pow+0x778>)
 800a1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b8:	4606      	mov	r6, r0
 800a1ba:	460f      	mov	r7, r1
 800a1bc:	4620      	mov	r0, r4
 800a1be:	4629      	mov	r1, r5
 800a1c0:	f7f6 fa32 	bl	8000628 <__aeabi_dmul>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	4639      	mov	r1, r7
 800a1cc:	f7f6 f876 	bl	80002bc <__adddf3>
 800a1d0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a1d2:	4b32      	ldr	r3, [pc, #200]	@ (800a29c <__ieee754_pow+0x79c>)
 800a1d4:	4413      	add	r3, r2
 800a1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1da:	f7f6 f86f 	bl	80002bc <__adddf3>
 800a1de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a1e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a1e4:	f7f6 f9b6 	bl	8000554 <__aeabi_i2d>
 800a1e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a1ea:	4b2d      	ldr	r3, [pc, #180]	@ (800a2a0 <__ieee754_pow+0x7a0>)
 800a1ec:	4413      	add	r3, r2
 800a1ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1f2:	4606      	mov	r6, r0
 800a1f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1f8:	460f      	mov	r7, r1
 800a1fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1fe:	f7f6 f85d 	bl	80002bc <__adddf3>
 800a202:	4642      	mov	r2, r8
 800a204:	464b      	mov	r3, r9
 800a206:	f7f6 f859 	bl	80002bc <__adddf3>
 800a20a:	4632      	mov	r2, r6
 800a20c:	463b      	mov	r3, r7
 800a20e:	f7f6 f855 	bl	80002bc <__adddf3>
 800a212:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a216:	4632      	mov	r2, r6
 800a218:	463b      	mov	r3, r7
 800a21a:	4658      	mov	r0, fp
 800a21c:	460d      	mov	r5, r1
 800a21e:	f7f6 f84b 	bl	80002b8 <__aeabi_dsub>
 800a222:	4642      	mov	r2, r8
 800a224:	464b      	mov	r3, r9
 800a226:	f7f6 f847 	bl	80002b8 <__aeabi_dsub>
 800a22a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a22e:	f7f6 f843 	bl	80002b8 <__aeabi_dsub>
 800a232:	465c      	mov	r4, fp
 800a234:	e036      	b.n	800a2a4 <__ieee754_pow+0x7a4>
 800a236:	bf00      	nop
 800a238:	4a454eef 	.word	0x4a454eef
 800a23c:	3fca7e28 	.word	0x3fca7e28
 800a240:	93c9db65 	.word	0x93c9db65
 800a244:	3fcd864a 	.word	0x3fcd864a
 800a248:	a91d4101 	.word	0xa91d4101
 800a24c:	3fd17460 	.word	0x3fd17460
 800a250:	518f264d 	.word	0x518f264d
 800a254:	3fd55555 	.word	0x3fd55555
 800a258:	db6fabff 	.word	0xdb6fabff
 800a25c:	3fdb6db6 	.word	0x3fdb6db6
 800a260:	33333303 	.word	0x33333303
 800a264:	3fe33333 	.word	0x3fe33333
 800a268:	e0000000 	.word	0xe0000000
 800a26c:	3feec709 	.word	0x3feec709
 800a270:	dc3a03fd 	.word	0xdc3a03fd
 800a274:	3feec709 	.word	0x3feec709
 800a278:	145b01f5 	.word	0x145b01f5
 800a27c:	be3e2fe0 	.word	0xbe3e2fe0
 800a280:	7ff00000 	.word	0x7ff00000
 800a284:	43400000 	.word	0x43400000
 800a288:	0003988e 	.word	0x0003988e
 800a28c:	000bb679 	.word	0x000bb679
 800a290:	0800b088 	.word	0x0800b088
 800a294:	3ff00000 	.word	0x3ff00000
 800a298:	40080000 	.word	0x40080000
 800a29c:	0800b068 	.word	0x0800b068
 800a2a0:	0800b078 	.word	0x0800b078
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2ac:	e5d6      	b.n	8009e5c <__ieee754_pow+0x35c>
 800a2ae:	f04f 0a01 	mov.w	sl, #1
 800a2b2:	e65e      	b.n	8009f72 <__ieee754_pow+0x472>
 800a2b4:	a3b5      	add	r3, pc, #724	@ (adr r3, 800a58c <__ieee754_pow+0xa8c>)
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	4639      	mov	r1, r7
 800a2be:	f7f5 fffd 	bl	80002bc <__adddf3>
 800a2c2:	4642      	mov	r2, r8
 800a2c4:	e9cd 0100 	strd	r0, r1, [sp]
 800a2c8:	464b      	mov	r3, r9
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	4629      	mov	r1, r5
 800a2ce:	f7f5 fff3 	bl	80002b8 <__aeabi_dsub>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2da:	f7f6 fc35 	bl	8000b48 <__aeabi_dcmpgt>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	f47f adfe 	bne.w	8009ee0 <__ieee754_pow+0x3e0>
 800a2e4:	4ba2      	ldr	r3, [pc, #648]	@ (800a570 <__ieee754_pow+0xa70>)
 800a2e6:	e022      	b.n	800a32e <__ieee754_pow+0x82e>
 800a2e8:	4ca2      	ldr	r4, [pc, #648]	@ (800a574 <__ieee754_pow+0xa74>)
 800a2ea:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a2ee:	42a3      	cmp	r3, r4
 800a2f0:	d919      	bls.n	800a326 <__ieee754_pow+0x826>
 800a2f2:	4ba1      	ldr	r3, [pc, #644]	@ (800a578 <__ieee754_pow+0xa78>)
 800a2f4:	440b      	add	r3, r1
 800a2f6:	4303      	orrs	r3, r0
 800a2f8:	d009      	beq.n	800a30e <__ieee754_pow+0x80e>
 800a2fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2fe:	2200      	movs	r2, #0
 800a300:	2300      	movs	r3, #0
 800a302:	f7f6 fc03 	bl	8000b0c <__aeabi_dcmplt>
 800a306:	3800      	subs	r0, #0
 800a308:	bf18      	it	ne
 800a30a:	2001      	movne	r0, #1
 800a30c:	e512      	b.n	8009d34 <__ieee754_pow+0x234>
 800a30e:	4642      	mov	r2, r8
 800a310:	464b      	mov	r3, r9
 800a312:	f7f5 ffd1 	bl	80002b8 <__aeabi_dsub>
 800a316:	4632      	mov	r2, r6
 800a318:	463b      	mov	r3, r7
 800a31a:	f7f6 fc0b 	bl	8000b34 <__aeabi_dcmpge>
 800a31e:	2800      	cmp	r0, #0
 800a320:	d1eb      	bne.n	800a2fa <__ieee754_pow+0x7fa>
 800a322:	4b96      	ldr	r3, [pc, #600]	@ (800a57c <__ieee754_pow+0xa7c>)
 800a324:	e003      	b.n	800a32e <__ieee754_pow+0x82e>
 800a326:	4a96      	ldr	r2, [pc, #600]	@ (800a580 <__ieee754_pow+0xa80>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	f240 80e7 	bls.w	800a4fc <__ieee754_pow+0x9fc>
 800a32e:	151b      	asrs	r3, r3, #20
 800a330:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800a334:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800a338:	fa4a fa03 	asr.w	sl, sl, r3
 800a33c:	44da      	add	sl, fp
 800a33e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a342:	4890      	ldr	r0, [pc, #576]	@ (800a584 <__ieee754_pow+0xa84>)
 800a344:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a348:	4108      	asrs	r0, r1
 800a34a:	ea00 030a 	and.w	r3, r0, sl
 800a34e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a352:	f1c1 0114 	rsb	r1, r1, #20
 800a356:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a35a:	fa4a fa01 	asr.w	sl, sl, r1
 800a35e:	f1bb 0f00 	cmp.w	fp, #0
 800a362:	4640      	mov	r0, r8
 800a364:	4649      	mov	r1, r9
 800a366:	f04f 0200 	mov.w	r2, #0
 800a36a:	bfb8      	it	lt
 800a36c:	f1ca 0a00 	rsblt	sl, sl, #0
 800a370:	f7f5 ffa2 	bl	80002b8 <__aeabi_dsub>
 800a374:	4680      	mov	r8, r0
 800a376:	4689      	mov	r9, r1
 800a378:	4632      	mov	r2, r6
 800a37a:	463b      	mov	r3, r7
 800a37c:	4640      	mov	r0, r8
 800a37e:	4649      	mov	r1, r9
 800a380:	f7f5 ff9c 	bl	80002bc <__adddf3>
 800a384:	2400      	movs	r4, #0
 800a386:	a36a      	add	r3, pc, #424	@ (adr r3, 800a530 <__ieee754_pow+0xa30>)
 800a388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38c:	4620      	mov	r0, r4
 800a38e:	460d      	mov	r5, r1
 800a390:	f7f6 f94a 	bl	8000628 <__aeabi_dmul>
 800a394:	4642      	mov	r2, r8
 800a396:	e9cd 0100 	strd	r0, r1, [sp]
 800a39a:	464b      	mov	r3, r9
 800a39c:	4620      	mov	r0, r4
 800a39e:	4629      	mov	r1, r5
 800a3a0:	f7f5 ff8a 	bl	80002b8 <__aeabi_dsub>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	4639      	mov	r1, r7
 800a3ac:	f7f5 ff84 	bl	80002b8 <__aeabi_dsub>
 800a3b0:	a361      	add	r3, pc, #388	@ (adr r3, 800a538 <__ieee754_pow+0xa38>)
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	f7f6 f937 	bl	8000628 <__aeabi_dmul>
 800a3ba:	a361      	add	r3, pc, #388	@ (adr r3, 800a540 <__ieee754_pow+0xa40>)
 800a3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c0:	4680      	mov	r8, r0
 800a3c2:	4689      	mov	r9, r1
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	f7f6 f92e 	bl	8000628 <__aeabi_dmul>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	4640      	mov	r0, r8
 800a3d2:	4649      	mov	r1, r9
 800a3d4:	f7f5 ff72 	bl	80002bc <__adddf3>
 800a3d8:	4604      	mov	r4, r0
 800a3da:	460d      	mov	r5, r1
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3e4:	f7f5 ff6a 	bl	80002bc <__adddf3>
 800a3e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3ec:	4680      	mov	r8, r0
 800a3ee:	4689      	mov	r9, r1
 800a3f0:	f7f5 ff62 	bl	80002b8 <__aeabi_dsub>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	f7f5 ff5c 	bl	80002b8 <__aeabi_dsub>
 800a400:	4642      	mov	r2, r8
 800a402:	4606      	mov	r6, r0
 800a404:	460f      	mov	r7, r1
 800a406:	464b      	mov	r3, r9
 800a408:	4640      	mov	r0, r8
 800a40a:	4649      	mov	r1, r9
 800a40c:	f7f6 f90c 	bl	8000628 <__aeabi_dmul>
 800a410:	a34d      	add	r3, pc, #308	@ (adr r3, 800a548 <__ieee754_pow+0xa48>)
 800a412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a416:	4604      	mov	r4, r0
 800a418:	460d      	mov	r5, r1
 800a41a:	f7f6 f905 	bl	8000628 <__aeabi_dmul>
 800a41e:	a34c      	add	r3, pc, #304	@ (adr r3, 800a550 <__ieee754_pow+0xa50>)
 800a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a424:	f7f5 ff48 	bl	80002b8 <__aeabi_dsub>
 800a428:	4622      	mov	r2, r4
 800a42a:	462b      	mov	r3, r5
 800a42c:	f7f6 f8fc 	bl	8000628 <__aeabi_dmul>
 800a430:	a349      	add	r3, pc, #292	@ (adr r3, 800a558 <__ieee754_pow+0xa58>)
 800a432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a436:	f7f5 ff41 	bl	80002bc <__adddf3>
 800a43a:	4622      	mov	r2, r4
 800a43c:	462b      	mov	r3, r5
 800a43e:	f7f6 f8f3 	bl	8000628 <__aeabi_dmul>
 800a442:	a347      	add	r3, pc, #284	@ (adr r3, 800a560 <__ieee754_pow+0xa60>)
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	f7f5 ff36 	bl	80002b8 <__aeabi_dsub>
 800a44c:	4622      	mov	r2, r4
 800a44e:	462b      	mov	r3, r5
 800a450:	f7f6 f8ea 	bl	8000628 <__aeabi_dmul>
 800a454:	a344      	add	r3, pc, #272	@ (adr r3, 800a568 <__ieee754_pow+0xa68>)
 800a456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45a:	f7f5 ff2f 	bl	80002bc <__adddf3>
 800a45e:	4622      	mov	r2, r4
 800a460:	462b      	mov	r3, r5
 800a462:	f7f6 f8e1 	bl	8000628 <__aeabi_dmul>
 800a466:	4602      	mov	r2, r0
 800a468:	460b      	mov	r3, r1
 800a46a:	4640      	mov	r0, r8
 800a46c:	4649      	mov	r1, r9
 800a46e:	f7f5 ff23 	bl	80002b8 <__aeabi_dsub>
 800a472:	4604      	mov	r4, r0
 800a474:	460d      	mov	r5, r1
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	4640      	mov	r0, r8
 800a47c:	4649      	mov	r1, r9
 800a47e:	f7f6 f8d3 	bl	8000628 <__aeabi_dmul>
 800a482:	2200      	movs	r2, #0
 800a484:	e9cd 0100 	strd	r0, r1, [sp]
 800a488:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a48c:	4620      	mov	r0, r4
 800a48e:	4629      	mov	r1, r5
 800a490:	f7f5 ff12 	bl	80002b8 <__aeabi_dsub>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a49c:	f7f6 f9ee 	bl	800087c <__aeabi_ddiv>
 800a4a0:	4632      	mov	r2, r6
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	460d      	mov	r5, r1
 800a4a6:	463b      	mov	r3, r7
 800a4a8:	4640      	mov	r0, r8
 800a4aa:	4649      	mov	r1, r9
 800a4ac:	f7f6 f8bc 	bl	8000628 <__aeabi_dmul>
 800a4b0:	4632      	mov	r2, r6
 800a4b2:	463b      	mov	r3, r7
 800a4b4:	f7f5 ff02 	bl	80002bc <__adddf3>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4620      	mov	r0, r4
 800a4be:	4629      	mov	r1, r5
 800a4c0:	f7f5 fefa 	bl	80002b8 <__aeabi_dsub>
 800a4c4:	4642      	mov	r2, r8
 800a4c6:	464b      	mov	r3, r9
 800a4c8:	f7f5 fef6 	bl	80002b8 <__aeabi_dsub>
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	492d      	ldr	r1, [pc, #180]	@ (800a588 <__ieee754_pow+0xa88>)
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	f7f5 fef0 	bl	80002b8 <__aeabi_dsub>
 800a4d8:	ec41 0b10 	vmov	d0, r0, r1
 800a4dc:	ee10 3a90 	vmov	r3, s1
 800a4e0:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a4e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4e8:	da0b      	bge.n	800a502 <__ieee754_pow+0xa02>
 800a4ea:	4650      	mov	r0, sl
 800a4ec:	f000 f85c 	bl	800a5a8 <scalbn>
 800a4f0:	ec51 0b10 	vmov	r0, r1, d0
 800a4f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4f8:	f7ff bb6d 	b.w	8009bd6 <__ieee754_pow+0xd6>
 800a4fc:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a500:	e73a      	b.n	800a378 <__ieee754_pow+0x878>
 800a502:	ec51 0b10 	vmov	r0, r1, d0
 800a506:	4619      	mov	r1, r3
 800a508:	e7f4      	b.n	800a4f4 <__ieee754_pow+0x9f4>
 800a50a:	491f      	ldr	r1, [pc, #124]	@ (800a588 <__ieee754_pow+0xa88>)
 800a50c:	2000      	movs	r0, #0
 800a50e:	f7ff bb14 	b.w	8009b3a <__ieee754_pow+0x3a>
 800a512:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a516:	f7ff bb10 	b.w	8009b3a <__ieee754_pow+0x3a>
 800a51a:	4630      	mov	r0, r6
 800a51c:	4639      	mov	r1, r7
 800a51e:	f7ff bb0c 	b.w	8009b3a <__ieee754_pow+0x3a>
 800a522:	460c      	mov	r4, r1
 800a524:	f7ff bb69 	b.w	8009bfa <__ieee754_pow+0xfa>
 800a528:	2400      	movs	r4, #0
 800a52a:	f7ff bb4b 	b.w	8009bc4 <__ieee754_pow+0xc4>
 800a52e:	bf00      	nop
 800a530:	00000000 	.word	0x00000000
 800a534:	3fe62e43 	.word	0x3fe62e43
 800a538:	fefa39ef 	.word	0xfefa39ef
 800a53c:	3fe62e42 	.word	0x3fe62e42
 800a540:	0ca86c39 	.word	0x0ca86c39
 800a544:	be205c61 	.word	0xbe205c61
 800a548:	72bea4d0 	.word	0x72bea4d0
 800a54c:	3e663769 	.word	0x3e663769
 800a550:	c5d26bf1 	.word	0xc5d26bf1
 800a554:	3ebbbd41 	.word	0x3ebbbd41
 800a558:	af25de2c 	.word	0xaf25de2c
 800a55c:	3f11566a 	.word	0x3f11566a
 800a560:	16bebd93 	.word	0x16bebd93
 800a564:	3f66c16c 	.word	0x3f66c16c
 800a568:	5555553e 	.word	0x5555553e
 800a56c:	3fc55555 	.word	0x3fc55555
 800a570:	40900000 	.word	0x40900000
 800a574:	4090cbff 	.word	0x4090cbff
 800a578:	3f6f3400 	.word	0x3f6f3400
 800a57c:	4090cc00 	.word	0x4090cc00
 800a580:	3fe00000 	.word	0x3fe00000
 800a584:	fff00000 	.word	0xfff00000
 800a588:	3ff00000 	.word	0x3ff00000
 800a58c:	652b82fe 	.word	0x652b82fe
 800a590:	3c971547 	.word	0x3c971547

0800a594 <fabs>:
 800a594:	ec51 0b10 	vmov	r0, r1, d0
 800a598:	4602      	mov	r2, r0
 800a59a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a59e:	ec43 2b10 	vmov	d0, r2, r3
 800a5a2:	4770      	bx	lr
 800a5a4:	0000      	movs	r0, r0
	...

0800a5a8 <scalbn>:
 800a5a8:	b570      	push	{r4, r5, r6, lr}
 800a5aa:	ec55 4b10 	vmov	r4, r5, d0
 800a5ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a5b2:	4606      	mov	r6, r0
 800a5b4:	462b      	mov	r3, r5
 800a5b6:	b991      	cbnz	r1, 800a5de <scalbn+0x36>
 800a5b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a5bc:	4323      	orrs	r3, r4
 800a5be:	d03b      	beq.n	800a638 <scalbn+0x90>
 800a5c0:	4b33      	ldr	r3, [pc, #204]	@ (800a690 <scalbn+0xe8>)
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f7f6 f82e 	bl	8000628 <__aeabi_dmul>
 800a5cc:	4b31      	ldr	r3, [pc, #196]	@ (800a694 <scalbn+0xec>)
 800a5ce:	429e      	cmp	r6, r3
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	460d      	mov	r5, r1
 800a5d4:	da0f      	bge.n	800a5f6 <scalbn+0x4e>
 800a5d6:	a326      	add	r3, pc, #152	@ (adr r3, 800a670 <scalbn+0xc8>)
 800a5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5dc:	e01e      	b.n	800a61c <scalbn+0x74>
 800a5de:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a5e2:	4291      	cmp	r1, r2
 800a5e4:	d10b      	bne.n	800a5fe <scalbn+0x56>
 800a5e6:	4622      	mov	r2, r4
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	f7f5 fe66 	bl	80002bc <__adddf3>
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	460d      	mov	r5, r1
 800a5f4:	e020      	b.n	800a638 <scalbn+0x90>
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a5fc:	3936      	subs	r1, #54	@ 0x36
 800a5fe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a602:	4296      	cmp	r6, r2
 800a604:	dd0d      	ble.n	800a622 <scalbn+0x7a>
 800a606:	2d00      	cmp	r5, #0
 800a608:	a11b      	add	r1, pc, #108	@ (adr r1, 800a678 <scalbn+0xd0>)
 800a60a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a60e:	da02      	bge.n	800a616 <scalbn+0x6e>
 800a610:	a11b      	add	r1, pc, #108	@ (adr r1, 800a680 <scalbn+0xd8>)
 800a612:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a616:	a318      	add	r3, pc, #96	@ (adr r3, 800a678 <scalbn+0xd0>)
 800a618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61c:	f7f6 f804 	bl	8000628 <__aeabi_dmul>
 800a620:	e7e6      	b.n	800a5f0 <scalbn+0x48>
 800a622:	1872      	adds	r2, r6, r1
 800a624:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a628:	428a      	cmp	r2, r1
 800a62a:	dcec      	bgt.n	800a606 <scalbn+0x5e>
 800a62c:	2a00      	cmp	r2, #0
 800a62e:	dd06      	ble.n	800a63e <scalbn+0x96>
 800a630:	f36f 531e 	bfc	r3, #20, #11
 800a634:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a638:	ec45 4b10 	vmov	d0, r4, r5
 800a63c:	bd70      	pop	{r4, r5, r6, pc}
 800a63e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a642:	da08      	bge.n	800a656 <scalbn+0xae>
 800a644:	2d00      	cmp	r5, #0
 800a646:	a10a      	add	r1, pc, #40	@ (adr r1, 800a670 <scalbn+0xc8>)
 800a648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a64c:	dac3      	bge.n	800a5d6 <scalbn+0x2e>
 800a64e:	a10e      	add	r1, pc, #56	@ (adr r1, 800a688 <scalbn+0xe0>)
 800a650:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a654:	e7bf      	b.n	800a5d6 <scalbn+0x2e>
 800a656:	3236      	adds	r2, #54	@ 0x36
 800a658:	f36f 531e 	bfc	r3, #20, #11
 800a65c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a660:	4620      	mov	r0, r4
 800a662:	4b0d      	ldr	r3, [pc, #52]	@ (800a698 <scalbn+0xf0>)
 800a664:	4629      	mov	r1, r5
 800a666:	2200      	movs	r2, #0
 800a668:	e7d8      	b.n	800a61c <scalbn+0x74>
 800a66a:	bf00      	nop
 800a66c:	f3af 8000 	nop.w
 800a670:	c2f8f359 	.word	0xc2f8f359
 800a674:	01a56e1f 	.word	0x01a56e1f
 800a678:	8800759c 	.word	0x8800759c
 800a67c:	7e37e43c 	.word	0x7e37e43c
 800a680:	8800759c 	.word	0x8800759c
 800a684:	fe37e43c 	.word	0xfe37e43c
 800a688:	c2f8f359 	.word	0xc2f8f359
 800a68c:	81a56e1f 	.word	0x81a56e1f
 800a690:	43500000 	.word	0x43500000
 800a694:	ffff3cb0 	.word	0xffff3cb0
 800a698:	3c900000 	.word	0x3c900000

0800a69c <with_errno>:
 800a69c:	b510      	push	{r4, lr}
 800a69e:	ed2d 8b02 	vpush	{d8}
 800a6a2:	eeb0 8a40 	vmov.f32	s16, s0
 800a6a6:	eef0 8a60 	vmov.f32	s17, s1
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	f7fd f98a 	bl	80079c4 <__errno>
 800a6b0:	eeb0 0a48 	vmov.f32	s0, s16
 800a6b4:	eef0 0a68 	vmov.f32	s1, s17
 800a6b8:	ecbd 8b02 	vpop	{d8}
 800a6bc:	6004      	str	r4, [r0, #0]
 800a6be:	bd10      	pop	{r4, pc}

0800a6c0 <xflow>:
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	b507      	push	{r0, r1, r2, lr}
 800a6c4:	ec51 0b10 	vmov	r0, r1, d0
 800a6c8:	b183      	cbz	r3, 800a6ec <xflow+0x2c>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a6d0:	e9cd 2300 	strd	r2, r3, [sp]
 800a6d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6d8:	f7f5 ffa6 	bl	8000628 <__aeabi_dmul>
 800a6dc:	ec41 0b10 	vmov	d0, r0, r1
 800a6e0:	2022      	movs	r0, #34	@ 0x22
 800a6e2:	b003      	add	sp, #12
 800a6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6e8:	f7ff bfd8 	b.w	800a69c <with_errno>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	e7ee      	b.n	800a6d0 <xflow+0x10>
 800a6f2:	0000      	movs	r0, r0
 800a6f4:	0000      	movs	r0, r0
	...

0800a6f8 <__math_uflow>:
 800a6f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a700 <__math_uflow+0x8>
 800a6fc:	f7ff bfe0 	b.w	800a6c0 <xflow>
 800a700:	00000000 	.word	0x00000000
 800a704:	10000000 	.word	0x10000000

0800a708 <__math_oflow>:
 800a708:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a710 <__math_oflow+0x8>
 800a70c:	f7ff bfd8 	b.w	800a6c0 <xflow>
 800a710:	00000000 	.word	0x00000000
 800a714:	70000000 	.word	0x70000000

0800a718 <__ieee754_sqrt>:
 800a718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71c:	4a66      	ldr	r2, [pc, #408]	@ (800a8b8 <__ieee754_sqrt+0x1a0>)
 800a71e:	ec55 4b10 	vmov	r4, r5, d0
 800a722:	43aa      	bics	r2, r5
 800a724:	462b      	mov	r3, r5
 800a726:	4621      	mov	r1, r4
 800a728:	d110      	bne.n	800a74c <__ieee754_sqrt+0x34>
 800a72a:	4622      	mov	r2, r4
 800a72c:	4620      	mov	r0, r4
 800a72e:	4629      	mov	r1, r5
 800a730:	f7f5 ff7a 	bl	8000628 <__aeabi_dmul>
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	4620      	mov	r0, r4
 800a73a:	4629      	mov	r1, r5
 800a73c:	f7f5 fdbe 	bl	80002bc <__adddf3>
 800a740:	4604      	mov	r4, r0
 800a742:	460d      	mov	r5, r1
 800a744:	ec45 4b10 	vmov	d0, r4, r5
 800a748:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a74c:	2d00      	cmp	r5, #0
 800a74e:	dc0e      	bgt.n	800a76e <__ieee754_sqrt+0x56>
 800a750:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a754:	4322      	orrs	r2, r4
 800a756:	d0f5      	beq.n	800a744 <__ieee754_sqrt+0x2c>
 800a758:	b19d      	cbz	r5, 800a782 <__ieee754_sqrt+0x6a>
 800a75a:	4622      	mov	r2, r4
 800a75c:	4620      	mov	r0, r4
 800a75e:	4629      	mov	r1, r5
 800a760:	f7f5 fdaa 	bl	80002b8 <__aeabi_dsub>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	f7f6 f888 	bl	800087c <__aeabi_ddiv>
 800a76c:	e7e8      	b.n	800a740 <__ieee754_sqrt+0x28>
 800a76e:	152a      	asrs	r2, r5, #20
 800a770:	d115      	bne.n	800a79e <__ieee754_sqrt+0x86>
 800a772:	2000      	movs	r0, #0
 800a774:	e009      	b.n	800a78a <__ieee754_sqrt+0x72>
 800a776:	0acb      	lsrs	r3, r1, #11
 800a778:	3a15      	subs	r2, #21
 800a77a:	0549      	lsls	r1, r1, #21
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d0fa      	beq.n	800a776 <__ieee754_sqrt+0x5e>
 800a780:	e7f7      	b.n	800a772 <__ieee754_sqrt+0x5a>
 800a782:	462a      	mov	r2, r5
 800a784:	e7fa      	b.n	800a77c <__ieee754_sqrt+0x64>
 800a786:	005b      	lsls	r3, r3, #1
 800a788:	3001      	adds	r0, #1
 800a78a:	02dc      	lsls	r4, r3, #11
 800a78c:	d5fb      	bpl.n	800a786 <__ieee754_sqrt+0x6e>
 800a78e:	1e44      	subs	r4, r0, #1
 800a790:	1b12      	subs	r2, r2, r4
 800a792:	f1c0 0420 	rsb	r4, r0, #32
 800a796:	fa21 f404 	lsr.w	r4, r1, r4
 800a79a:	4323      	orrs	r3, r4
 800a79c:	4081      	lsls	r1, r0
 800a79e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7a2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a7a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7aa:	07d2      	lsls	r2, r2, #31
 800a7ac:	bf5c      	itt	pl
 800a7ae:	005b      	lslpl	r3, r3, #1
 800a7b0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a7b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a7b8:	bf58      	it	pl
 800a7ba:	0049      	lslpl	r1, r1, #1
 800a7bc:	2600      	movs	r6, #0
 800a7be:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a7c2:	107f      	asrs	r7, r7, #1
 800a7c4:	0049      	lsls	r1, r1, #1
 800a7c6:	2016      	movs	r0, #22
 800a7c8:	4632      	mov	r2, r6
 800a7ca:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a7ce:	1915      	adds	r5, r2, r4
 800a7d0:	429d      	cmp	r5, r3
 800a7d2:	bfde      	ittt	le
 800a7d4:	192a      	addle	r2, r5, r4
 800a7d6:	1b5b      	suble	r3, r3, r5
 800a7d8:	1936      	addle	r6, r6, r4
 800a7da:	0fcd      	lsrs	r5, r1, #31
 800a7dc:	3801      	subs	r0, #1
 800a7de:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a7e2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a7e6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a7ea:	d1f0      	bne.n	800a7ce <__ieee754_sqrt+0xb6>
 800a7ec:	4605      	mov	r5, r0
 800a7ee:	2420      	movs	r4, #32
 800a7f0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	eb0c 0e00 	add.w	lr, ip, r0
 800a7fa:	dc02      	bgt.n	800a802 <__ieee754_sqrt+0xea>
 800a7fc:	d113      	bne.n	800a826 <__ieee754_sqrt+0x10e>
 800a7fe:	458e      	cmp	lr, r1
 800a800:	d811      	bhi.n	800a826 <__ieee754_sqrt+0x10e>
 800a802:	f1be 0f00 	cmp.w	lr, #0
 800a806:	eb0e 000c 	add.w	r0, lr, ip
 800a80a:	da3f      	bge.n	800a88c <__ieee754_sqrt+0x174>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	db3d      	blt.n	800a88c <__ieee754_sqrt+0x174>
 800a810:	f102 0801 	add.w	r8, r2, #1
 800a814:	1a9b      	subs	r3, r3, r2
 800a816:	458e      	cmp	lr, r1
 800a818:	bf88      	it	hi
 800a81a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a81e:	eba1 010e 	sub.w	r1, r1, lr
 800a822:	4465      	add	r5, ip
 800a824:	4642      	mov	r2, r8
 800a826:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a82a:	3c01      	subs	r4, #1
 800a82c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a830:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a834:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a838:	d1dc      	bne.n	800a7f4 <__ieee754_sqrt+0xdc>
 800a83a:	4319      	orrs	r1, r3
 800a83c:	d01b      	beq.n	800a876 <__ieee754_sqrt+0x15e>
 800a83e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800a8bc <__ieee754_sqrt+0x1a4>
 800a842:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800a8c0 <__ieee754_sqrt+0x1a8>
 800a846:	e9da 0100 	ldrd	r0, r1, [sl]
 800a84a:	e9db 2300 	ldrd	r2, r3, [fp]
 800a84e:	f7f5 fd33 	bl	80002b8 <__aeabi_dsub>
 800a852:	e9da 8900 	ldrd	r8, r9, [sl]
 800a856:	4602      	mov	r2, r0
 800a858:	460b      	mov	r3, r1
 800a85a:	4640      	mov	r0, r8
 800a85c:	4649      	mov	r1, r9
 800a85e:	f7f6 f95f 	bl	8000b20 <__aeabi_dcmple>
 800a862:	b140      	cbz	r0, 800a876 <__ieee754_sqrt+0x15e>
 800a864:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a868:	e9da 0100 	ldrd	r0, r1, [sl]
 800a86c:	e9db 2300 	ldrd	r2, r3, [fp]
 800a870:	d10e      	bne.n	800a890 <__ieee754_sqrt+0x178>
 800a872:	3601      	adds	r6, #1
 800a874:	4625      	mov	r5, r4
 800a876:	1073      	asrs	r3, r6, #1
 800a878:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800a87c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800a880:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800a884:	086b      	lsrs	r3, r5, #1
 800a886:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800a88a:	e759      	b.n	800a740 <__ieee754_sqrt+0x28>
 800a88c:	4690      	mov	r8, r2
 800a88e:	e7c1      	b.n	800a814 <__ieee754_sqrt+0xfc>
 800a890:	f7f5 fd14 	bl	80002bc <__adddf3>
 800a894:	e9da 8900 	ldrd	r8, r9, [sl]
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	4640      	mov	r0, r8
 800a89e:	4649      	mov	r1, r9
 800a8a0:	f7f6 f934 	bl	8000b0c <__aeabi_dcmplt>
 800a8a4:	b120      	cbz	r0, 800a8b0 <__ieee754_sqrt+0x198>
 800a8a6:	1cab      	adds	r3, r5, #2
 800a8a8:	bf08      	it	eq
 800a8aa:	3601      	addeq	r6, #1
 800a8ac:	3502      	adds	r5, #2
 800a8ae:	e7e2      	b.n	800a876 <__ieee754_sqrt+0x15e>
 800a8b0:	1c6b      	adds	r3, r5, #1
 800a8b2:	f023 0501 	bic.w	r5, r3, #1
 800a8b6:	e7de      	b.n	800a876 <__ieee754_sqrt+0x15e>
 800a8b8:	7ff00000 	.word	0x7ff00000
 800a8bc:	0800b0a0 	.word	0x0800b0a0
 800a8c0:	0800b098 	.word	0x0800b098

0800a8c4 <_init>:
 800a8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c6:	bf00      	nop
 800a8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ca:	bc08      	pop	{r3}
 800a8cc:	469e      	mov	lr, r3
 800a8ce:	4770      	bx	lr

0800a8d0 <_fini>:
 800a8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d2:	bf00      	nop
 800a8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8d6:	bc08      	pop	{r3}
 800a8d8:	469e      	mov	lr, r3
 800a8da:	4770      	bx	lr
